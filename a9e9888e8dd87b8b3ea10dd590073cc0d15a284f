{
  "comments": [
    {
      "key": {
        "uuid": "34e7f1d9_3ac2883c",
        "filename": "third_party/WebKit/Source/bindings/templates/methods.cpp.tmpl",
        "patchSetId": 4
      },
      "lineNbr": 257,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2017-08-03T09:46:13Z",
      "side": 1,
      "message": "Are you sure that we should use FunctionObject here?",
      "revId": "a9e9888e8dd87b8b3ea10dd590073cc0d15a284f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b6abb88e_43a602eb",
        "filename": "third_party/WebKit/Source/bindings/templates/methods.cpp.tmpl",
        "patchSetId": 4
      },
      "lineNbr": 257,
      "author": {
        "id": 1002507
      },
      "writtenOn": "2017-08-03T09:56:34Z",
      "side": 1,
      "message": "This is the case of [ConstructorCallWith\u003dDocument].  In a constructor, a new object is created in the current realm and the new object is treated as if it\u0027s the receiver object although the constructor itself doesn\u0027t take a receiver object.\n\nIn short, the current realm \u003d\u003d the relevant realm in constructors (unless a constructor internally invokes another constructor in another context).\n\n... considering such an insane case (internally invoke another context\u0027s constructor), the best thing would be to use info.NewTarget()-\u003eCreationContext().  Let me think a little more.",
      "parentUuid": "34e7f1d9_3ac2883c",
      "revId": "a9e9888e8dd87b8b3ea10dd590073cc0d15a284f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "18c335fd_482ecc0f",
        "filename": "third_party/WebKit/Source/bindings/templates/methods.cpp.tmpl",
        "patchSetId": 4
      },
      "lineNbr": 257,
      "author": {
        "id": 1002507
      },
      "writtenOn": "2017-08-03T13:34:22Z",
      "side": 1,
      "message": "Updated to use info.NewTarget()-\u003eCreationContext().\n\nBy the way, it turned out that info.Holder() \u003d\u003d info.NewTarget() is not guaranteed in general in constructors, while GetCurrentContext() \u003d\u003d info.NewTarget()-\u003eCreationContext() is satisfied in our codebase so far.",
      "parentUuid": "b6abb88e_43a602eb",
      "revId": "a9e9888e8dd87b8b3ea10dd590073cc0d15a284f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3910cf4e_1c1f8461",
        "filename": "third_party/WebKit/Source/bindings/templates/methods.cpp.tmpl",
        "patchSetId": 4
      },
      "lineNbr": 257,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2017-08-03T13:37:17Z",
      "side": 1,
      "message": "Hmm. What is NewTarget? Do you know why it\u0027s needed?",
      "parentUuid": "18c335fd_482ecc0f",
      "revId": "a9e9888e8dd87b8b3ea10dd590073cc0d15a284f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "734bc3e7_a04be012",
        "filename": "third_party/WebKit/Source/bindings/templates/methods.cpp.tmpl",
        "patchSetId": 4
      },
      "lineNbr": 257,
      "author": {
        "id": 1002507
      },
      "writtenOn": "2017-08-03T13:43:50Z",
      "side": 1,
      "message": "info.NewTarget() is a new value being constructed.\n\nI\u0027m not 100% sure why it\u0027s needed.  Maybe it\u0027s because ECMAScript defines \"new.target\" as a different concept from \"receiver object\".  Maybe it\u0027s because it\u0027s possible that \"foo.Func()\" (without the \"new\" keyword) can create a new object (in this case, I guess that \"foo\" is a receiver object, \"Func\" is a constructor function, and the \"new.target\" is different from either of them).",
      "parentUuid": "3910cf4e_1c1f8461",
      "revId": "a9e9888e8dd87b8b3ea10dd590073cc0d15a284f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}