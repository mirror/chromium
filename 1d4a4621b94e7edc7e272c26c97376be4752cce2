{
  "comments": [
    {
      "key": {
        "uuid": "e06315f7_dab5824a",
        "filename": "chrome/browser/vr/ui_scene_manager.cc",
        "patchSetId": 2
      },
      "lineNbr": 808,
      "author": {
        "id": 1126726
      },
      "writtenOn": "2017-08-04T18:13:26Z",
      "side": 1,
      "message": "Before we were checking IsSecureContext in the renderer process, whereas now we\u0027re just checking the top-level origin. The main difference is that IsSecureContext walks the entire frame tree and checks that everything in the frame tree is secure.\n\nThis *might* be okay; the only case where it matters is when there is WebVR content inside an http:// iframe inside an https:// frame. In normal Chrome, an http:// iframe inside an https:// page would be blocked by default, and only allowed to run if the user selects to run insecure content from a page action item. I\u0027m not sure if the user can get into this state in WebVR. Is WebVR content allowed in iframes?",
      "range": {
        "startLine": 808,
        "startChar": 32,
        "endLine": 808,
        "endChar": 46
      },
      "revId": "1d4a4621b94e7edc7e272c26c97376be4752cce2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "17f96280_e775a928",
        "filename": "chrome/browser/vr/ui_scene_manager.cc",
        "patchSetId": 2
      },
      "lineNbr": 808,
      "author": {
        "id": 1002411
      },
      "writtenOn": "2017-08-04T19:34:11Z",
      "side": 1,
      "message": "Okay, I\u0027ve changed the behaviour to match. The logic here has moved down into vr_shell_delegate.cc, which knows which RenderFrameHost has requested presentation, and can then walk its tree to check for insecure contexts up the chain.",
      "parentUuid": "e06315f7_dab5824a",
      "range": {
        "startLine": 808,
        "startChar": 32,
        "endLine": 808,
        "endChar": 46
      },
      "revId": "1d4a4621b94e7edc7e272c26c97376be4752cce2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}