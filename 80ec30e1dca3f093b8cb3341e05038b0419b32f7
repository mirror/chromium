{
  "comments": [
    {
      "key": {
        "uuid": "127ce241_4733e1b2",
        "filename": "ios/chrome/browser/ios_chrome_main_parts.mm",
        "patchSetId": 5
      },
      "lineNbr": 226,
      "author": {
        "id": 1103654
      },
      "writtenOn": "2017-11-15T22:33:19Z",
      "side": 1,
      "message": "This if statement should no longer be needed as VariationsService always exists.\n\n(At least, that\u0027s now the case for non-IOS Chrome. Please check on iOS as well - if it\u0027s not the case there, we should make it consistent.)",
      "range": {
        "startLine": 226,
        "startChar": 27,
        "endLine": 226,
        "endChar": 0
      },
      "revId": "80ec30e1dca3f093b8cb3341e05038b0419b32f7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c28ee937_05a54943",
        "filename": "ios/chrome/browser/ios_chrome_main_parts.mm",
        "patchSetId": 5
      },
      "lineNbr": 226,
      "author": {
        "id": 1191445
      },
      "writtenOn": "2017-11-15T22:44:12Z",
      "side": 1,
      "message": "VariationsService is lazy loaded, so it should always be available. I will drop the if statement.",
      "parentUuid": "127ce241_4733e1b2",
      "range": {
        "startLine": 226,
        "startChar": 27,
        "endLine": 226,
        "endChar": 0
      },
      "revId": "80ec30e1dca3f093b8cb3341e05038b0419b32f7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "caec44a4_318cd45d",
        "filename": "ios/chrome/browser/ios_chrome_main_parts.mm",
        "patchSetId": 5
      },
      "lineNbr": 226,
      "author": {
        "id": 1191445
      },
      "writtenOn": "2017-11-16T22:48:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c28ee937_05a54943",
      "range": {
        "startLine": 226,
        "startChar": 27,
        "endLine": 226,
        "endChar": 0
      },
      "revId": "80ec30e1dca3f093b8cb3341e05038b0419b32f7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "374f57f6_60a6e1ef",
        "filename": "ios/chrome/browser/ios_chrome_main_parts.mm",
        "patchSetId": 5
      },
      "lineNbr": 228,
      "author": {
        "id": 1103654
      },
      "writtenOn": "2017-11-15T22:33:19Z",
      "side": 1,
      "message": "Please document that passing nullptr for the param is acceptable and add appropriate checks to VariationsFieldTrialCreator::SetupFieldTrials() to check that the value is not null.",
      "range": {
        "startLine": 228,
        "startChar": 35,
        "endLine": 228,
        "endChar": 42
      },
      "revId": "80ec30e1dca3f093b8cb3341e05038b0419b32f7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "59056c0a_2814ecf2",
        "filename": "ios/chrome/browser/ios_chrome_main_parts.mm",
        "patchSetId": 5
      },
      "lineNbr": 228,
      "author": {
        "id": 1191445
      },
      "writtenOn": "2017-11-15T22:44:12Z",
      "side": 1,
      "message": "Do you mean document on VariationsService::SetupFieldTrials that nullptr is acceptable? If it is acceptable, why add checks to ensure that the value is not null.\n\nBased on what is currently implemented, nullptr is fine, but I suppose that could change in the future. Is it better then to just pass an empty string?",
      "parentUuid": "374f57f6_60a6e1ef",
      "range": {
        "startLine": 228,
        "startChar": 35,
        "endLine": 228,
        "endChar": 42
      },
      "revId": "80ec30e1dca3f093b8cb3341e05038b0419b32f7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b70d297e_8f34db98",
        "filename": "ios/chrome/browser/ios_chrome_main_parts.mm",
        "patchSetId": 5
      },
      "lineNbr": 228,
      "author": {
        "id": 1103654
      },
      "writtenOn": "2017-11-15T23:04:32Z",
      "side": 1,
      "message": "Yes, document that passing nullptr is acceptable.\n\nThe way it\u0027s used is:\n\n command_line-\u003eHasSwitch(kEnableGpuBenchmarking)\n\nHasSwitch() creates a StringPiece out of the passed value. Looks like StringPiece does end up checking for null input and creating an empty StringPiece.\n\nSo then we\u0027re checking command_line-\u003eHasSwitch(\"\").\n\nThere are two things wrong with this picture:\n  1. HasSwitch(\"\") behavior is not documented. If it returns true, it will actually be incorrect behavior here. If it returns false currently, it\u0027s not guaranteed that won\u0027t change, since it\u0027s undocumented.\n  2. VariationsFieldTrialCreator::SetupFieldTrials() does not document that it accepts nullptr. Just because it works right now, doesn\u0027t mean that it\u0027s guaranteed to continue working. And there\u0027s obviously no test case for this - since it was not designed to be called with NULL.\n\nSo I suggest either documenting that NULL is supported for the variations API and adding a check before calling HasSwitch() - or you can, for example, pass in kEnableBenchmarking from variations_switches.h - since it wouldn\u0027t affect behavior. If you do the latter, please document the reason at the call site with a comment.",
      "parentUuid": "59056c0a_2814ecf2",
      "range": {
        "startLine": 228,
        "startChar": 35,
        "endLine": 228,
        "endChar": 42
      },
      "revId": "80ec30e1dca3f093b8cb3341e05038b0419b32f7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "46d4b06c_02ba9ea2",
        "filename": "ios/chrome/browser/ios_chrome_main_parts.mm",
        "patchSetId": 5
      },
      "lineNbr": 228,
      "author": {
        "id": 1191445
      },
      "writtenOn": "2017-11-16T22:48:53Z",
      "side": 1,
      "message": "I found that other iOS code that passes an unsupported switch to variations_service, a dummy value is used. So, I replicated that here, and left a comment.",
      "parentUuid": "b70d297e_8f34db98",
      "range": {
        "startLine": 228,
        "startChar": 35,
        "endLine": 228,
        "endChar": 42
      },
      "revId": "80ec30e1dca3f093b8cb3341e05038b0419b32f7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}