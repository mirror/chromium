{
  "comments": [
    {
      "key": {
        "uuid": "cc5bea4d_28b3b7af",
        "filename": "chrome/browser/ui/views/omnibox/omnibox_view_views.cc",
        "patchSetId": 3
      },
      "lineNbr": 463,
      "author": {
        "id": 1115920
      },
      "writtenOn": "2018-01-26T18:29:05Z",
      "side": 1,
      "message": "Drive-by comment: Could we have the model check its own has_focus() in SetInputInProgress() to decide whether to call the notify method instead of telling it not to and then separately asking it to notify here?\n\nMore generally, this method seems a little odd to me (even before this change but this exacerbates the issue). It implements a back-and-forth where the view asks the model questions about the model\u0027s state and then based on that tells the model to do things.\n\nI feel like we could change this method to consist of nothing but a single call to SetInputInProgress and let the model decide when and whether to notify. The logic depends on the selection range but that\u0027s accessible to the model via OmniboxView::GetSelectionBounds.\n\nIt\u0027s not quite that simple since there are other calls to SetInputInProgress that would be affected by the proposed change but I think they could be accommodated solely via changes within the model itself. An additional advantage to simplifying the method here is that OmniboxViewMac has a parallel method with the exact same logic. Simplifying it rather than making it more complex would reduce the maintenance burden and reduce the chance that we neglect to keep them in sync.\n\nI\u0027m not suggesting that this necessarily should be done by you or in this CL, but I\u0027m curious as to your thoughts.",
      "revId": "0ff6529ac0bbe14c87dad8c8b5ec0bb62dc32821",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c26ad693_3270a113",
        "filename": "chrome/browser/ui/views/omnibox/omnibox_view_views.cc",
        "patchSetId": 3
      },
      "lineNbr": 463,
      "author": {
        "id": 1105777
      },
      "writtenOn": "2018-01-27T19:58:27Z",
      "side": 1,
      "message": "I agree that this function looks like it doesn\u0027t belong here. (Good observation, I didn\u0027t catch it.) But I don\u0027t think changing SetInputInProgress() to replace it is the answer, however.\n\nA better suggestion might be, \"Can we just push this entire function down to the model?\" That seems the least intrusive and possibly better architecturally (the only risk being if the model were currently a derived class, OmniboxViewsViews knew that, and some of these functions weren\u0027t virtual. But that\u0027s not the case currently, so let me know what you think of the latest.)",
      "parentUuid": "cc5bea4d_28b3b7af",
      "revId": "0ff6529ac0bbe14c87dad8c8b5ec0bb62dc32821",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bd2e257a_631370f1",
        "filename": "components/omnibox/browser/omnibox_edit_model.cc",
        "patchSetId": 3
      },
      "lineNbr": 197,
      "author": {
        "id": 1001310
      },
      "writtenOn": "2018-01-25T23:38:57Z",
      "side": 1,
      "message": "I\u0027m really nervous about this change.  I think we\u0027ll end up having a current_match() at times we shouldn\u0027t.  (I think it\u0027ll follow us around tab changes and such.)  Can you please split this change off into a separate changelist so we can discuss in depth?\n\nFor one, I\u0027d like clear repro steps, e.g., a set of actions that cause more StartAutocomplete() actions that you\u0027d expect.  The current bug does not have them.  Please start a new bug for it, so we can discuss whether there is an issue, and then whether this simple fix is the right solution.",
      "revId": "0ff6529ac0bbe14c87dad8c8b5ec0bb62dc32821",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f7207cd3_5a93f535",
        "filename": "components/omnibox/browser/omnibox_edit_model.cc",
        "patchSetId": 3
      },
      "lineNbr": 197,
      "author": {
        "id": 1105777
      },
      "writtenOn": "2018-01-26T14:17:55Z",
      "side": 1,
      "message": "Removed.",
      "parentUuid": "bd2e257a_631370f1",
      "revId": "0ff6529ac0bbe14c87dad8c8b5ec0bb62dc32821",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "54fe19cc_3d73231a",
        "filename": "components/omnibox/browser/omnibox_edit_model.h",
        "patchSetId": 3
      },
      "lineNbr": 152,
      "author": {
        "id": 1001310
      },
      "writtenOn": "2018-01-25T23:38:57Z",
      "side": 1,
      "message": "This is confusing.  If this is the function that notifies observers, why does it need to return whether the state changed \"to avoid unnecessary notifications\".  This is the function that does the notifications, at least so the comment implies.\n\nI\u0027d suggest a different interface:\n  // Sets the state of user_input_in_progress_.  Returns whether the state changed.  If so, the caller should call NotifyObserversInputInProgress().\n  bool SetInputInProgress(bool in_progress);\n\nP.S.  No need to mention \"records time\".",
      "revId": "0ff6529ac0bbe14c87dad8c8b5ec0bb62dc32821",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e92daf38_c4ee45e7",
        "filename": "components/omnibox/browser/omnibox_edit_model.h",
        "patchSetId": 3
      },
      "lineNbr": 152,
      "author": {
        "id": 1105777
      },
      "writtenOn": "2018-01-26T14:17:55Z",
      "side": 1,
      "message": "Re-written.",
      "parentUuid": "54fe19cc_3d73231a",
      "revId": "0ff6529ac0bbe14c87dad8c8b5ec0bb62dc32821",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c08bab69_d2997fcb",
        "filename": "components/omnibox/browser/omnibox_edit_model.h",
        "patchSetId": 3
      },
      "lineNbr": 152,
      "author": {
        "id": 1001310
      },
      "writtenOn": "2018-01-26T20:22:02Z",
      "side": 1,
      "message": "No comments about my suggested improvement to the interface?\n\nJustin\u0027s comments are worth thinking about too.",
      "parentUuid": "e92daf38_c4ee45e7",
      "revId": "0ff6529ac0bbe14c87dad8c8b5ec0bb62dc32821",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eae5cc8e_cacaeeea",
        "filename": "components/omnibox/browser/omnibox_edit_model.h",
        "patchSetId": 3
      },
      "lineNbr": 152,
      "author": {
        "id": 1105777
      },
      "writtenOn": "2018-01-27T19:58:27Z",
      "side": 1,
      "message": "\u003e No comments about my suggested improvement to the interface?\n\nSorry, I thought changing the comment would clear up my intention. Your proposal would require a lot more code at each call site. It\u0027s not just 2 function calls; there\u0027s a test too. I think it highlights the whiplash that Justin talks about. By including the |notify| parameter, it cleans up most of the call sites, since only one place wants to split the function. I also believe that it addresses a lot of the concern over forgetting to make the second call that Peter raised.",
      "parentUuid": "c08bab69_d2997fcb",
      "revId": "0ff6529ac0bbe14c87dad8c8b5ec0bb62dc32821",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}