{
  "comments": [
    {
      "key": {
        "uuid": "0b9902ad_f08c6402",
        "filename": "content/browser/loader/cross_site_document_blocking_browsertest.cc",
        "patchSetId": 12
      },
      "lineNbr": 357,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2018-02-03T00:01:12Z",
      "side": 1,
      "message": "Just curious, what makes them cross-site?  I would have guessed that they\u0027re both https://127.0.0.1 with different ports, which seems like it would be same-site.",
      "revId": "d690ea97d61e1a5d765f422e3b025a49eb122283",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "550d0ec0_eeeba880",
        "filename": "content/browser/loader/cross_site_document_blocking_browsertest.cc",
        "patchSetId": 12
      },
      "lineNbr": 357,
      "author": {
        "id": 1130134
      },
      "writtenOn": "2018-02-05T16:45:09Z",
      "side": 1,
      "message": "|service_worker_https_server_| has hostname \u003d 127.0.0.1.\n|cross_origin_https_server_| has hostname \u003d localhost.\nThe difference comes from the call to SetSSLConfig with CERT_COMMON_NAME_IS_DOMAIN.\n\nI\u0027ve added a comment pointing this out.",
      "parentUuid": "0b9902ad_f08c6402",
      "revId": "d690ea97d61e1a5d765f422e3b025a49eb122283",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9444dbe2_82a73bd3",
        "filename": "content/browser/loader/cross_site_document_blocking_browsertest.cc",
        "patchSetId": 12
      },
      "lineNbr": 397,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2018-02-03T00:01:12Z",
      "side": 1,
      "message": "nit: Drop \"a\"",
      "range": {
        "startLine": 397,
        "startChar": 39,
        "endLine": 397,
        "endChar": 40
      },
      "revId": "d690ea97d61e1a5d765f422e3b025a49eb122283",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6b2e7d69_3a7eb1d9",
        "filename": "content/browser/loader/cross_site_document_blocking_browsertest.cc",
        "patchSetId": 12
      },
      "lineNbr": 397,
      "author": {
        "id": 1130134
      },
      "writtenOn": "2018-02-05T16:45:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9444dbe2_82a73bd3",
      "range": {
        "startLine": 397,
        "startChar": 39,
        "endLine": 397,
        "endChar": 40
      },
      "revId": "d690ea97d61e1a5d765f422e3b025a49eb122283",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c25410e2_00a10afb",
        "filename": "content/browser/loader/cross_site_document_blocking_browsertest.cc",
        "patchSetId": 12
      },
      "lineNbr": 416,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2018-02-03T00:01:12Z",
      "side": 1,
      "message": "nit: Move comment above the test declaration (line 406).",
      "revId": "d690ea97d61e1a5d765f422e3b025a49eb122283",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "59ba10de_5f43c0ab",
        "filename": "content/browser/loader/cross_site_document_blocking_browsertest.cc",
        "patchSetId": 12
      },
      "lineNbr": 416,
      "author": {
        "id": 1130134
      },
      "writtenOn": "2018-02-05T16:45:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c25410e2_00a10afb",
      "revId": "d690ea97d61e1a5d765f422e3b025a49eb122283",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "05072629_457bc522",
        "filename": "content/browser/loader/cross_site_document_blocking_browsertest.cc",
        "patchSetId": 12
      },
      "lineNbr": 420,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2018-02-03T00:01:12Z",
      "side": 1,
      "message": "Any cross-origin URL, or any cross-origin URL ending with data_from_service_worker?",
      "revId": "d690ea97d61e1a5d765f422e3b025a49eb122283",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9c6c22b6_d6b33f74",
        "filename": "content/browser/loader/cross_site_document_blocking_browsertest.cc",
        "patchSetId": 12
      },
      "lineNbr": 420,
      "author": {
        "id": 1130134
      },
      "writtenOn": "2018-02-05T16:45:09Z",
      "side": 1,
      "message": "You\u0027re right - the URL suffix is important here.  I\u0027ve added this qualification / clarification to the comment.",
      "parentUuid": "05072629_457bc522",
      "revId": "d690ea97d61e1a5d765f422e3b025a49eb122283",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8bc8bb80_1360a7ad",
        "filename": "content/browser/loader/cross_site_document_resource_handler.cc",
        "patchSetId": 12
      },
      "lineNbr": 483,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2018-02-03T00:01:12Z",
      "side": 1,
      "message": "Is this related to the ServiceWorker case?  Or just an independent fix to the UMA metrics?",
      "revId": "d690ea97d61e1a5d765f422e3b025a49eb122283",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "88c6dc68_6b9f0b75",
        "filename": "content/browser/loader/cross_site_document_resource_handler.cc",
        "patchSetId": 12
      },
      "lineNbr": 483,
      "author": {
        "id": 1130134
      },
      "writtenOn": "2018-02-05T16:45:09Z",
      "side": 1,
      "message": "Without this change, we would get a test failure in the second new test, during the 1st fetch.  During the first fetch, the request errors out, because the service worker responds with an error.  UMA logging in response to the error is incorrect + makes the test confused (the call to InspectHistograms sees extra UMAs/buckets/values).",
      "parentUuid": "8bc8bb80_1360a7ad",
      "revId": "d690ea97d61e1a5d765f422e3b025a49eb122283",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6cf5dd3c_8b1fb89f",
        "filename": "content/browser/loader/cross_site_document_resource_handler.cc",
        "patchSetId": 12
      },
      "lineNbr": 483,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2018-02-05T19:24:24Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "88c6dc68_6b9f0b75",
      "revId": "d690ea97d61e1a5d765f422e3b025a49eb122283",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e71e99e9_08bce866",
        "filename": "content/browser/loader/cross_site_document_resource_handler.cc",
        "patchSetId": 12
      },
      "lineNbr": 580,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2018-02-03T00:01:12Z",
      "side": 1,
      "message": "Sanity check: Would a compromised renderer have any ability to lie about this value to make us allow actual responses from the network through, or is it tracked accurately in the browser process?\n\n(We don\u0027t currently have a full story for compromised renderers, but we\u0027d want a TODO if the renderer can trick us here.  Might be worth having a comment on either way.)",
      "revId": "d690ea97d61e1a5d765f422e3b025a49eb122283",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "264de36d_6e9dc86a",
        "filename": "content/browser/loader/cross_site_document_resource_handler.cc",
        "patchSetId": 12
      },
      "lineNbr": 580,
      "author": {
        "id": 1000128
      },
      "writtenOn": "2018-02-05T06:54:06Z",
      "side": 1,
      "message": "I don\u0027t know the full path of how the ResourceResponse ends up here, but was_fetched_via_service_worker gets set by the browser whenever it uses a response provided by a service worker.",
      "parentUuid": "e71e99e9_08bce866",
      "revId": "d690ea97d61e1a5d765f422e3b025a49eb122283",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e1eddca9_b541d324",
        "filename": "content/browser/loader/cross_site_document_resource_handler.cc",
        "patchSetId": 12
      },
      "lineNbr": 587,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2018-02-03T00:01:12Z",
      "side": 1,
      "message": "falken@: I seem to remember there was talk of changes to ServiceWorker so that the responses it generates wouldn\u0027t need to go through the network stack but could be delivered directly.  Would that eliminate the need for this check in the future?  If so, can we put a TODO with a bug number?  (Sorry if I\u0027m misunderstanding how this works.)",
      "revId": "d690ea97d61e1a5d765f422e3b025a49eb122283",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2d1b16db_ebf7da14",
        "filename": "content/browser/loader/cross_site_document_resource_handler.cc",
        "patchSetId": 12
      },
      "lineNbr": 587,
      "author": {
        "id": 1000128
      },
      "writtenOn": "2018-02-05T06:54:06Z",
      "side": 1,
      "message": "Ah yes that\u0027s a good point. Our new architecture is S13nServiceWorker. In this architecture, the request goes directly from page to service worker, and response from service worker to page. So the browser process would not know about the request/response at all.\n\nI don\u0027t know whether you want XSDB to be aware of the request/response in that architecture.\n\nThe bug is 715640",
      "parentUuid": "e1eddca9_b541d324",
      "revId": "d690ea97d61e1a5d765f422e3b025a49eb122283",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bfef6bd9_ac9878f4",
        "filename": "content/browser/loader/cross_site_document_resource_handler.cc",
        "patchSetId": 12
      },
      "lineNbr": 587,
      "author": {
        "id": 1130134
      },
      "writtenOn": "2018-02-05T16:45:09Z",
      "side": 1,
      "message": "\u003e Ah yes that\u0027s a good point. Our new architecture is S13nServiceWorker. In this architecture, the request goes directly from page to service worker, and response from service worker to page. So the browser process would not know about the request/response at all.\n\u003e \n\u003e I don\u0027t know whether you want XSDB to be aware of the request/response in that architecture.\n\nPossibly not (because intercepting service_worker-\u003eserved_page responses by XSDB is kind of redundant, since XSDB should have already stripper the response body earlier, when intercepting network-\u003eservice_worker request).\n\nI wonder if this means that the new tests are overtesting to some extent:\n\n- CrossSiteDocumentBlockingServiceWorkerTest.NetworkAndOpaqueResponse:\n  - The first fetch is a good test - we want to ensure that\n    network-\u003eservice_worker request gets blocked by XSDB.\n    I think this is a moderately valuable test that is desirable overall.\n  - The second fetch won\u0027t be intercepted by XSDB after the architecture\n    change.  Maybe the test shouldn\u0027t bother with the second fetch?\n\n- CrossSiteDocumentBlockingServiceWorkerTest.NoNetwork - overtesting?\n  - The test will be invalid after S13nServiceWorker architecture change.\n  - Additionally, the test is somewhat repeating the valudation done already\n    by wpt/service-workers/service-worker/fetch-request-xhr.https.html\n\n\u003e The bug is 715640\n\nFor now, I\u0027ve added references to this bug in the tests.  Do you think I should go further and remove parts of the tests?",
      "parentUuid": "2d1b16db_ebf7da14",
      "revId": "d690ea97d61e1a5d765f422e3b025a49eb122283",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ce5e941a_aca77872",
        "filename": "content/browser/loader/cross_site_document_resource_handler.cc",
        "patchSetId": 12
      },
      "lineNbr": 587,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2018-02-05T19:24:24Z",
      "side": 1,
      "message": "\u003e \u003e Ah yes that\u0027s a good point. Our new architecture is S13nServiceWorker. In this architecture, the request goes directly from page to service worker, and response from service worker to page. So the browser process would not know about the request/response at all.\n\u003e \u003e \n\u003e \u003e I don\u0027t know whether you want XSDB to be aware of the request/response in that architecture.\n\u003e \n\u003e Possibly not (because intercepting service_worker-\u003eserved_page responses by XSDB is kind of redundant, since XSDB should have already stripper the response body earlier, when intercepting network-\u003eservice_worker request).\n\u003e \n\u003e I wonder if this means that the new tests are overtesting to some extent:\n\u003e \n\u003e - CrossSiteDocumentBlockingServiceWorkerTest.NetworkAndOpaqueResponse:\n\u003e   - The first fetch is a good test - we want to ensure that\n\u003e     network-\u003eservice_worker request gets blocked by XSDB.\n\u003e     I think this is a moderately valuable test that is desirable overall.\n\u003e   - The second fetch won\u0027t be intercepted by XSDB after the architecture\n\u003e     change.  Maybe the test shouldn\u0027t bother with the second fetch?\n\u003e \n\u003e - CrossSiteDocumentBlockingServiceWorkerTest.NoNetwork - overtesting?\n\u003e   - The test will be invalid after S13nServiceWorker architecture change.\n\u003e   - Additionally, the test is somewhat repeating the valudation done already\n\u003e     by wpt/service-workers/service-worker/fetch-request-xhr.https.html\n\u003e \n\u003e \u003e The bug is 715640\n\u003e \n\u003e For now, I\u0027ve added references to this bug in the tests.  Do you think I should go further and remove parts of the tests?\n\nI think your comments are probably sufficient, allowing the tests to be removed or changed when that work happens.  For now, I think it\u0027s good to have the regression tests in place.",
      "parentUuid": "bfef6bd9_ac9878f4",
      "revId": "d690ea97d61e1a5d765f422e3b025a49eb122283",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "89e9fd69_3b19248b",
        "filename": "content/test/data/cross_site_document_blocking/service_worker.js",
        "patchSetId": 12
      },
      "lineNbr": 31,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2018-02-03T00:01:12Z",
      "side": 1,
      "message": "Is this actually for the second request?  I see it\u0027s checking for whether previousResponse is defined.",
      "range": {
        "startLine": 31,
        "startChar": 34,
        "endLine": 31,
        "endChar": 39
      },
      "revId": "d690ea97d61e1a5d765f422e3b025a49eb122283",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9278f6af_1b1ff61b",
        "filename": "content/test/data/cross_site_document_blocking/service_worker.js",
        "patchSetId": 12
      },
      "lineNbr": 31,
      "author": {
        "id": 1130134
      },
      "writtenOn": "2018-02-05T16:45:09Z",
      "side": 1,
      "message": "Thanks for catching this - yes this is the second request.",
      "parentUuid": "89e9fd69_3b19248b",
      "range": {
        "startLine": 31,
        "startChar": 34,
        "endLine": 31,
        "endChar": 39
      },
      "revId": "d690ea97d61e1a5d765f422e3b025a49eb122283",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}