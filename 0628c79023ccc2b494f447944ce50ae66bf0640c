{
  "comments": [
    {
      "key": {
        "uuid": "65b53ab1_08bc9e7c",
        "filename": "ui/compositor/scoped_layer_animation_settings.cc",
        "patchSetId": 4
      },
      "lineNbr": 96,
      "author": {
        "id": 1148065
      },
      "writtenOn": "2017-09-28T22:29:51Z",
      "side": 1,
      "message": "Is OnImplicitAnimationsCompleted guaranteed to be called? That\u0027s absolutely not obvious from the code. Otherwise it would leak the DeferredPaintObserver.\n\nIn particular, it looks to me that ~ScopedLayerAnimationSettings will remove it from animator_-\u003eobservers_, and so I don\u0027t think anything else will destroy it at that point.\n\nThe same is true of CacheRenderSurfaceObserver... I\u0027m super uncomfortable with the pattern, I would prefer if ScopedLayerAnimationSettings kept explicit ownership (unique_ptr) of the observers.",
      "revId": "0628c79023ccc2b494f447944ce50ae66bf0640c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8ad9e808_d7882f0c",
        "filename": "ui/compositor/scoped_layer_animation_settings.cc",
        "patchSetId": 4
      },
      "lineNbr": 96,
      "author": {
        "id": 1228419
      },
      "writtenOn": "2017-09-28T22:46:13Z",
      "side": 1,
      "message": "+ajuma@\n\nNot sure what is the original design, but ScopedLayerAnimationSettings will be out of scope and destroyed and set the ImplicitAnimationObserver active to start the animation.\n\nIt takes a while to know that all the observers are passed to animation sequence [1].\nI have written tests to verify that the child layer OnImplicitAnimationsCompleted is called [2].\n\n[1] https://cs.chromium.org/chromium/src/ui/compositor/layer_animator.cc?l\u003d875\u0026rcl\u003d1e608a56dad5dc35a4372a4179d5a82a4fdb0355\n[2] https://chromium-review.googlesource.com/c/chromium/src/+/685493/4/ui/compositor/layer_animator_unittest.cc#1900",
      "parentUuid": "65b53ab1_08bc9e7c",
      "revId": "0628c79023ccc2b494f447944ce50ae66bf0640c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3f9e8b9c_c8569dde",
        "filename": "ui/compositor/scoped_layer_animation_settings.cc",
        "patchSetId": 4
      },
      "lineNbr": 96,
      "author": {
        "id": 1002110
      },
      "writtenOn": "2017-09-29T14:47:25Z",
      "side": 1,
      "message": "Right, ScopedLayerAnimationSettings only sticks around for scheduling the animation, so it can\u0027t own the observer. Your explanation for why OnImplicitAnimationsCompleted will get called looks correct to me, but I also agree that this is pretty non-obvious. Would it make sense to have the Layer own these observers?",
      "parentUuid": "8ad9e808_d7882f0c",
      "revId": "0628c79023ccc2b494f447944ce50ae66bf0640c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7be2ed6b_b41fc502",
        "filename": "ui/compositor/scoped_layer_animation_settings.cc",
        "patchSetId": 4
      },
      "lineNbr": 96,
      "author": {
        "id": 1228419
      },
      "writtenOn": "2017-09-29T17:05:48Z",
      "side": 1,
      "message": "+varkha@\n\nThe CacheRenderSurfaceObserver and DeferredPaintObserver are also subclass of LayerObserver, so it is easy to add the observer to current existing observer_list_ in ui::Layer.\n\nDo we also want to make current ScopedLayerAnimationSettings::AddObserver(ImplicitAnimationObserver* observer) to let the layer has the observers list? Then we might need to add a new observer_list_animation_ of type of base::ObserverList\u003cLayerAnimationObserver\u003e.\n\nAbout the ownership (unique_ptr), searching the code base, what I got is base::ObserverList\u003cObserverType\u003e. It seems all the ImplicitAnimationObserver will delete itself when the animation is finished. There is not usage of base::ObserverList\u003csdg::uqique_ptr\u003cObserverType\u003e\u003e, except this DelayedAnimationObserver [1], we use std::vector to maintain the list. But it is used for more complicated ownership concern [1]. It is also hard to track the when will it be called and maintain the observer list.\n\nWhat I can tell from the codebase is that OnImplicitAnimationsCompleted is guaranteed to be called. So the observer can delete itself. So the ownership is not required by design?\n\n[1] https://cs.chromium.org/chromium/src/ash/wm/overview/window_selector_controller.h?l\u003d78\u0026rcl\u003d3d27469c6dd35ec9a5a95702bc9158e1d5416062",
      "parentUuid": "3f9e8b9c_c8569dde",
      "revId": "0628c79023ccc2b494f447944ce50ae66bf0640c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "af476312_b985cc31",
        "filename": "ui/compositor/scoped_layer_animation_settings.cc",
        "patchSetId": 4
      },
      "lineNbr": 96,
      "author": {
        "id": 1148065
      },
      "writtenOn": "2017-09-29T23:08:50Z",
      "side": 1,
      "message": "What if the relevant classes (LayerAnimator, LayerAnimationSequence) are destroyed before the end of the animation? What if the animation is queued but never runs? What if no animation is started at all?\n\nI don\u0027t think that is well tested. But I don\u0027t think something as basic as ownership should rely on unit tests to prove correctness - it should be obvious from the code. We absolutely need to use smart pointers (unique_ptr) to make it obviously correct, instead of relying on explicit new/deletes.",
      "parentUuid": "7be2ed6b_b41fc502",
      "tag": "mailMessageId\u003d\u003cCAMeTaZdUDzP4pUawZtvSc9vqFsX9E8tkMFnB96wf4pATAGQk8Q@mail.gmail.com\u003e",
      "revId": "0628c79023ccc2b494f447944ce50ae66bf0640c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}