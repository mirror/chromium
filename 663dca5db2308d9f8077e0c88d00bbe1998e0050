{
  "comments": [
    {
      "key": {
        "uuid": "69887bbb_817374a5",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 7,
      "author": {
        "id": 1001385
      },
      "writtenOn": "2017-08-23T00:37:19Z",
      "side": 1,
      "message": "nit: Capitalization.\n\nCan we make the CL title a little more specific?  We already have child process support, via LaunchPprocess - this is specifically adding support to the content/ layer for launching child processes, right?",
      "revId": "663dca5db2308d9f8077e0c88d00bbe1998e0050",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5989f61f_c63051fb",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 7,
      "author": {
        "id": 1113499
      },
      "writtenOn": "2017-08-23T18:02:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "69887bbb_817374a5",
      "revId": "663dca5db2308d9f8077e0c88d00bbe1998e0050",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d0caee11_f07928b3",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 9,
      "author": {
        "id": 1001385
      },
      "writtenOn": "2017-08-23T00:37:19Z",
      "side": 1,
      "message": "nit: In future it\u0027d be helpful to break out these dependency changes into another CL (or more), so that we can have them reviewed in parallel, and so that if e.g. someone else is working on a change that happens to need the same things fixing, we\u0027re less likely to duplicate effort, \u0027cos they\u0027ll land in a snap. :)",
      "revId": "663dca5db2308d9f8077e0c88d00bbe1998e0050",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9d9de73d_e0646329",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 11,
      "author": {
        "id": 1001385
      },
      "writtenOn": "2017-08-23T00:37:19Z",
      "side": 1,
      "message": "It\u0027s necessary when we want to spawn a child process that either:\na) runs the same executable.\nb) runs an executable that we expect should be at the same path as the current executable.",
      "revId": "663dca5db2308d9f8077e0c88d00bbe1998e0050",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "04e3faf1_f580350d",
        "filename": "base/base_paths_fuchsia.cc",
        "patchSetId": 4
      },
      "lineNbr": 1,
      "author": {
        "id": 1144260
      },
      "writtenOn": "2017-08-23T04:22:48Z",
      "side": 1,
      "message": "Does something use this change? It looks like it could land first/separately.",
      "revId": "663dca5db2308d9f8077e0c88d00bbe1998e0050",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "478182a4_4102199d",
        "filename": "base/base_paths_fuchsia.cc",
        "patchSetId": 4
      },
      "lineNbr": 16,
      "author": {
        "id": 1144260
      },
      "writtenOn": "2017-08-23T04:22:48Z",
      "side": 1,
      "message": "This comment needs some fiddling.",
      "range": {
        "startLine": 15,
        "startChar": 65,
        "endLine": 16,
        "endChar": 56
      },
      "revId": "663dca5db2308d9f8077e0c88d00bbe1998e0050",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8ec90118_5afbd4d8",
        "filename": "base/base_paths_fuchsia.cc",
        "patchSetId": 4
      },
      "lineNbr": 22,
      "author": {
        "id": 1001385
      },
      "writtenOn": "2017-08-23T00:37:19Z",
      "side": 1,
      "message": "nit: Wrap this case block in { } so that |bin_dir| is scoped to it.\n\nnit: char bin_dir[...] \u003d {}; so that it\u0027s initialized no matter what.",
      "revId": "663dca5db2308d9f8077e0c88d00bbe1998e0050",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d31abc41_9487dcff",
        "filename": "base/base_paths_fuchsia.cc",
        "patchSetId": 4
      },
      "lineNbr": 22,
      "author": {
        "id": 1113499
      },
      "writtenOn": "2017-08-23T18:02:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8ec90118_5afbd4d8",
      "revId": "663dca5db2308d9f8077e0c88d00bbe1998e0050",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a4f737ae_4ccb2b1b",
        "filename": "base/base_paths_fuchsia.cc",
        "patchSetId": 4
      },
      "lineNbr": 28,
      "author": {
        "id": 1001385
      },
      "writtenOn": "2017-08-23T00:37:19Z",
      "side": 1,
      "message": "Sometimes gl cl format makes me happy, this time it makes me sad. Q.Q",
      "revId": "663dca5db2308d9f8077e0c88d00bbe1998e0050",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9011438d_4548ee74",
        "filename": "base/base_paths_fuchsia.cc",
        "patchSetId": 4
      },
      "lineNbr": 28,
      "author": {
        "id": 1113499
      },
      "writtenOn": "2017-08-23T18:02:33Z",
      "side": 1,
      "message": "Yeah. What is this, a Java Builder?",
      "parentUuid": "a4f737ae_4ccb2b1b",
      "revId": "663dca5db2308d9f8077e0c88d00bbe1998e0050",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "496f2144_a841362c",
        "filename": "base/fuchsia/child_job.cc",
        "patchSetId": 4
      },
      "lineNbr": 14,
      "author": {
        "id": 1001385
      },
      "writtenOn": "2017-08-23T00:37:19Z",
      "side": 1,
      "message": "MX_HANDLE_INVALID",
      "revId": "663dca5db2308d9f8077e0c88d00bbe1998e0050",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dedb6b6b_27520885",
        "filename": "base/fuchsia/child_job.cc",
        "patchSetId": 4
      },
      "lineNbr": 14,
      "author": {
        "id": 1113499
      },
      "writtenOn": "2017-08-23T18:02:33Z",
      "side": 1,
      "message": "Defaults to mx_job_default.",
      "parentUuid": "496f2144_a841362c",
      "revId": "663dca5db2308d9f8077e0c88d00bbe1998e0050",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5d049969_80fe7b75",
        "filename": "base/fuchsia/child_job.cc",
        "patchSetId": 4
      },
      "lineNbr": 14,
      "author": {
        "id": 1001385
      },
      "writtenOn": "2017-08-24T03:33:07Z",
      "side": 1,
      "message": "mx_job_default() is a function, so that would result in a static initializer.",
      "parentUuid": "dedb6b6b_27520885",
      "revId": "663dca5db2308d9f8077e0c88d00bbe1998e0050",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "37a64170_465d98dd",
        "filename": "base/fuchsia/child_job.cc",
        "patchSetId": 4
      },
      "lineNbr": 17,
      "author": {
        "id": 1144260
      },
      "writtenOn": "2017-08-23T04:22:48Z",
      "side": 1,
      "message": "It seems ok to me to live here base/ as the whole point of it is to make sure that all subprocesses will work with base::Process::Open() (is that right?) For that reason, autocreating it here seems fine.\n\nmx_handle_t GetChildProcessJob() {\n  static mx_handle_t g_job_handle \u003d [](){\n    mx_job_create(...);\n    ...\n    return new_job;\n  }();\n  return g_job_handle;\n}\n\nTwo things I\u0027d like to check:\n- what happens if the browser spawns a child and then the child (say a service process) wants to spawn children -- we should probably make sure the same job is used in the child, or that pass no job so that that happens by default, so that the browser can do things to the grandchildren without unexpected behaviour\n- what does the os actually pass us as mx_job_default() for the initial process? Is it MX_HANDLE_INVALID?",
      "range": {
        "startLine": 17,
        "startChar": 12,
        "endLine": 17,
        "endChar": 30
      },
      "revId": "663dca5db2308d9f8077e0c88d00bbe1998e0050",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "443c8dda_57847d43",
        "filename": "base/fuchsia/child_job.cc",
        "patchSetId": 4
      },
      "lineNbr": 17,
      "author": {
        "id": 1001385
      },
      "writtenOn": "2017-08-23T17:37:33Z",
      "side": 1,
      "message": "We discussed offline; basically:\n- At present the main process is launched with a non-enumerable Job.\n- We want it to have an enumerable Job, containing its child processes, so it can look them up by KOID, etc.\n- We may or may not want separate sub-Jobs for the children, depending on what policies we want for the sandbox; that\u0027s follow-up work to this CL, so the idea is to basically have LaunchProcess continue to accept a job_handle via Options, and for it to continue to look up the default job otherwise, but for it to use base::GetDefaultJob() so that in the browser it\u0027ll use our enumerable job.\n\nIIUC if we do for some reason want child processes to live in sub-jobs (e.g. to isolate them from one another more completely) then if a child process is itself able to launch processes, in it\u0027s sub-job, the browser will still be able to \"see\" into the sub-job to enumerate the children, etc; only the processes inside the sub-job will not be able to \"see\" outside the scope of their job.",
      "parentUuid": "37a64170_465d98dd",
      "range": {
        "startLine": 17,
        "startChar": 12,
        "endLine": 17,
        "endChar": 30
      },
      "revId": "663dca5db2308d9f8077e0c88d00bbe1998e0050",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0e898325_764150f0",
        "filename": "base/fuchsia/child_job.cc",
        "patchSetId": 4
      },
      "lineNbr": 17,
      "author": {
        "id": 1113499
      },
      "writtenOn": "2017-08-23T18:02:33Z",
      "side": 1,
      "message": "\u003ewhat happens if the browser spawns a child and then the child (say a service process) wants to spawn children?\n\nWez and I had a discussion in person yesterday. We\u0027ll be creating a Chromium wrapper around mx_default_job. Calls to GetDefaultJob() will return mx_default_job OR an override job.\n\nThe content/browser process\u0027 init code sets the override to a new job meant for spawning all its child processes and their descendants.\n\nAll other processes will use mx_default_job() if they can spawn their own processes, or no job at all (indeed, jamesr said it\u0027s MX_HANDLE_INVALID).",
      "parentUuid": "37a64170_465d98dd",
      "range": {
        "startLine": 17,
        "startChar": 12,
        "endLine": 17,
        "endChar": 30
      },
      "revId": "663dca5db2308d9f8077e0c88d00bbe1998e0050",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f0ade24d_f1d6e8c3",
        "filename": "base/fuchsia/child_job.cc",
        "patchSetId": 4
      },
      "lineNbr": 17,
      "author": {
        "id": 1001385
      },
      "writtenOn": "2017-08-24T03:33:07Z",
      "side": 1,
      "message": "Child processes will still call GetDefaultJob(), it\u0027ll just return mx_job_default() in most cases, surely?",
      "parentUuid": "0e898325_764150f0",
      "range": {
        "startLine": 17,
        "startChar": 12,
        "endLine": 17,
        "endChar": 30
      },
      "revId": "663dca5db2308d9f8077e0c88d00bbe1998e0050",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "610cda6e_3d360c18",
        "filename": "base/fuchsia/child_job.cc",
        "patchSetId": 4
      },
      "lineNbr": 19,
      "author": {
        "id": 1001385
      },
      "writtenOn": "2017-08-23T00:37:19Z",
      "side": 1,
      "message": "As we discussed it, the idea was to have a wrapper to get the \"default\" job, which would either call mx_job_default(), or return the job previously set by e.g. the content main runner.\n\nIf this is going to be an on-demand-created job object, specifically for use when creating new content child processes, then I think the API belongs in content/, and you\u0027ll need to use a LazyInstance, or wrap the mx_job_create() into a call which returns the mx_handle_t and use C++11 safe static initialization, e.g this would become:\n\n  static g_job_handle \u003d InternalCreateJobHandle();\n  return g_job_handle;",
      "revId": "663dca5db2308d9f8077e0c88d00bbe1998e0050",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fcc007a3_1700cadc",
        "filename": "base/fuchsia/child_job.cc",
        "patchSetId": 4
      },
      "lineNbr": 19,
      "author": {
        "id": 1113499
      },
      "writtenOn": "2017-08-23T18:02:33Z",
      "side": 1,
      "message": "Setting the job in BrowserMainRunner, otherwise serving mx_job_default.",
      "parentUuid": "610cda6e_3d360c18",
      "revId": "663dca5db2308d9f8077e0c88d00bbe1998e0050",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "70fda798_c1a6dab7",
        "filename": "base/fuchsia/child_job.cc",
        "patchSetId": 4
      },
      "lineNbr": 21,
      "author": {
        "id": 1001385
      },
      "writtenOn": "2017-08-23T00:37:19Z",
      "side": 1,
      "message": "mx_status_get_string(result) plz :)",
      "revId": "663dca5db2308d9f8077e0c88d00bbe1998e0050",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bd6e765b_9a30a15e",
        "filename": "base/fuchsia/child_job.cc",
        "patchSetId": 4
      },
      "lineNbr": 21,
      "author": {
        "id": 1113499
      },
      "writtenOn": "2017-08-23T18:02:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "70fda798_c1a6dab7",
      "revId": "663dca5db2308d9f8077e0c88d00bbe1998e0050",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f8684c5e_5e27b591",
        "filename": "base/fuchsia/child_job.h",
        "patchSetId": 4
      },
      "lineNbr": 4,
      "author": {
        "id": 1144260
      },
      "writtenOn": "2017-08-23T04:22:48Z",
      "side": 1,
      "message": "Header guard missing.",
      "revId": "663dca5db2308d9f8077e0c88d00bbe1998e0050",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "449ed6ce_9891dd81",
        "filename": "base/fuchsia/child_job.h",
        "patchSetId": 4
      },
      "lineNbr": 5,
      "author": {
        "id": 1144260
      },
      "writtenOn": "2017-08-23T04:22:48Z",
      "side": 1,
      "message": "I think you only need magenta/types.h here.",
      "range": {
        "startLine": 5,
        "startChar": 10,
        "endLine": 5,
        "endChar": 28
      },
      "revId": "663dca5db2308d9f8077e0c88d00bbe1998e0050",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c55f72a6_c2dea650",
        "filename": "base/fuchsia/child_job.h",
        "patchSetId": 4
      },
      "lineNbr": 10,
      "author": {
        "id": 1001385
      },
      "writtenOn": "2017-08-23T00:37:19Z",
      "side": 1,
      "message": "Defining this as the job used to create \"child processes\" seems too specific, and if that\u0027s what we want this to be then we should just add a Fuchsia-specific setter function in base/process/launch.h and avoid the need for an extra .cc and .h.\n\nHowever, as we discussed it, this was more of a wrapper around mx_job_default, that allows us to set our own preferred \"default job\" for the rest of the Chromium code to use - if we take that model then the .h/.cc make more sense to me, but could we check with the Fuchsia team whether an mx_job_set_default() API would be plausible before we work-around that lack in the Chromium-side?",
      "revId": "663dca5db2308d9f8077e0c88d00bbe1998e0050",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "68964a1e_4c8aff8e",
        "filename": "base/fuchsia/child_job.h",
        "patchSetId": 4
      },
      "lineNbr": 10,
      "author": {
        "id": 1144260
      },
      "writtenOn": "2017-08-23T04:22:48Z",
      "side": 1,
      "message": "I missed some discussion here, but I think don\u0027t think mx_job_set_default() is likely, it\u0027d be a bit odd to have a setter for such a global thing I think?\n\nIs mx_job_default() even !\u003d MX_HANDLE_INVALID in normal usage?",
      "range": {
        "startLine": 10,
        "startChar": 12,
        "endLine": 10,
        "endChar": 30
      },
      "revId": "663dca5db2308d9f8077e0c88d00bbe1998e0050",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6eef5bc6_0c14145b",
        "filename": "base/fuchsia/child_job.h",
        "patchSetId": 4
      },
      "lineNbr": 10,
      "author": {
        "id": 1001385
      },
      "writtenOn": "2017-08-23T17:37:33Z",
      "side": 1,
      "message": "We discussed offline and yes, we can\u0027t have an mx_job_set_default(), so for our purposes it makes most sense to have a GetDefaultJob(), and a SetDefaultJob() - the content/ layer will call the latter in the Browser process, while child processes will typically just rely on GetDefaultJob() falling-back to mx_job_default().",
      "parentUuid": "68964a1e_4c8aff8e",
      "range": {
        "startLine": 10,
        "startChar": 12,
        "endLine": 10,
        "endChar": 30
      },
      "revId": "663dca5db2308d9f8077e0c88d00bbe1998e0050",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "27541a2e_609deaf4",
        "filename": "base/fuchsia/child_job.h",
        "patchSetId": 4
      },
      "lineNbr": 10,
      "author": {
        "id": 1113499
      },
      "writtenOn": "2017-08-23T18:02:33Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "c55f72a6_c2dea650",
      "revId": "663dca5db2308d9f8077e0c88d00bbe1998e0050",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "220537ea_36621f4d",
        "filename": "content/browser/child_process_launcher_helper_fuchsia.cc",
        "patchSetId": 4
      },
      "lineNbr": 68,
      "author": {
        "id": 1001385
      },
      "writtenOn": "2017-08-23T00:37:19Z",
      "side": 1,
      "message": "Does the base class require us to specifically implement this, or could we just not-override a default no-op impl?",
      "revId": "663dca5db2308d9f8077e0c88d00bbe1998e0050",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "de16f61a_918bcf62",
        "filename": "content/browser/child_process_launcher_helper_fuchsia.cc",
        "patchSetId": 4
      },
      "lineNbr": 68,
      "author": {
        "id": 1113499
      },
      "writtenOn": "2017-08-23T18:02:33Z",
      "side": 1,
      "message": "This specifies a partial implementation of a class, not a subclass. Adding inheritance \u0026 making some methods virtual would probably be more trouble than it\u0027s worth.",
      "parentUuid": "220537ea_36621f4d",
      "revId": "663dca5db2308d9f8077e0c88d00bbe1998e0050",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e15c2734_502158b1",
        "filename": "content/browser/child_process_launcher_helper_fuchsia.cc",
        "patchSetId": 4
      },
      "lineNbr": 68,
      "author": {
        "id": 1001385
      },
      "writtenOn": "2017-08-24T03:33:07Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "de16f61a_918bcf62",
      "revId": "663dca5db2308d9f8077e0c88d00bbe1998e0050",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6ec123b3_74d1949f",
        "filename": "content/browser/child_process_launcher_helper_fuchsia.cc",
        "patchSetId": 4
      },
      "lineNbr": 73,
      "author": {
        "id": 1001385
      },
      "writtenOn": "2017-08-23T00:37:19Z",
      "side": 1,
      "message": "nit: Missing thread check?",
      "revId": "663dca5db2308d9f8077e0c88d00bbe1998e0050",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bfdab00b_0e829c95",
        "filename": "content/browser/child_process_launcher_helper_fuchsia.cc",
        "patchSetId": 4
      },
      "lineNbr": 73,
      "author": {
        "id": 1113499
      },
      "writtenOn": "2017-08-23T18:02:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6ec123b3_74d1949f",
      "revId": "663dca5db2308d9f8077e0c88d00bbe1998e0050",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "58fcded0_d4cc9966",
        "filename": "content/browser/child_process_launcher_helper_fuchsia.cc",
        "patchSetId": 4
      },
      "lineNbr": 85,
      "author": {
        "id": 1001385
      },
      "writtenOn": "2017-08-23T00:37:19Z",
      "side": 1,
      "message": "As discussed offline, I thought we were going to have LaunchProcess() launch processes using either the supplied job_handle, or default to calling base::GetDefaultJob() to determine the job to create them under?",
      "revId": "663dca5db2308d9f8077e0c88d00bbe1998e0050",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "86327911_22b1772f",
        "filename": "content/browser/child_process_launcher_helper_fuchsia.cc",
        "patchSetId": 4
      },
      "lineNbr": 85,
      "author": {
        "id": 1113499
      },
      "writtenOn": "2017-08-23T18:02:33Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "58fcded0_d4cc9966",
      "revId": "663dca5db2308d9f8077e0c88d00bbe1998e0050",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "72db21ef_fe819930",
        "filename": "content/browser/child_process_launcher_helper_fuchsia.cc",
        "patchSetId": 4
      },
      "lineNbr": 99,
      "author": {
        "id": 1001385
      },
      "writtenOn": "2017-08-23T00:37:19Z",
      "side": 1,
      "message": "FWIW we\u0027ve rolled an SDK that fixes that, I think.",
      "revId": "663dca5db2308d9f8077e0c88d00bbe1998e0050",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d07b4f27_50f38b37",
        "filename": "content/browser/child_process_launcher_helper_fuchsia.cc",
        "patchSetId": 4
      },
      "lineNbr": 99,
      "author": {
        "id": 1113499
      },
      "writtenOn": "2017-08-23T18:02:33Z",
      "side": 1,
      "message": "So we did, awesome",
      "parentUuid": "72db21ef_fe819930",
      "revId": "663dca5db2308d9f8077e0c88d00bbe1998e0050",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fbd6df94_28ea5c38",
        "filename": "content/browser/child_process_launcher_helper_fuchsia.cc",
        "patchSetId": 4
      },
      "lineNbr": 111,
      "author": {
        "id": 1001385
      },
      "writtenOn": "2017-08-23T00:37:19Z",
      "side": 1,
      "message": "ignore_result(...) here, and preferably a comment explaining that the |mojo_client_handle_| has been passed to the child process, not copied.\n\nYou might also consider moving this to AfterLaunchOnLauncherThread, as a form of post-launch cleanup.\n\nNote that the same is true of any other handles passed via options.handles_to_transfer, so are there callers or other components that need to know to relinquish passed handles here?  (This would be so much nicer if we rework LaunchProcess into a ProcessLauncher helper class...)",
      "revId": "663dca5db2308d9f8077e0c88d00bbe1998e0050",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a1241dc7_a2b57980",
        "filename": "content/browser/child_process_launcher_helper_fuchsia.cc",
        "patchSetId": 4
      },
      "lineNbr": 111,
      "author": {
        "id": 1113499
      },
      "writtenOn": "2017-08-23T18:02:33Z",
      "side": 1,
      "message": "Done.\n\nDone.\n\nFor a more general solution we\u0027d need to do a bit of rework to move scoped handle ownership into |options| and make it mutable. It doesn\u0027t seem necessary right now.",
      "parentUuid": "fbd6df94_28ea5c38",
      "revId": "663dca5db2308d9f8077e0c88d00bbe1998e0050",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "865a1bdc_517e7cff",
        "filename": "content/browser/child_process_launcher_helper_fuchsia.cc",
        "patchSetId": 4
      },
      "lineNbr": 127,
      "author": {
        "id": 1144260
      },
      "writtenOn": "2017-08-23T04:22:48Z",
      "side": 1,
      "message": "I think based on this function being named \"Sync\" this should probably be passing true, although it looks like other platforms are inconsistent.",
      "range": {
        "startLine": 127,
        "startChar": 53,
        "endLine": 127,
        "endChar": 58
      },
      "revId": "663dca5db2308d9f8077e0c88d00bbe1998e0050",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2dec396f_549adb07",
        "filename": "content/browser/child_process_launcher_helper_fuchsia.cc",
        "patchSetId": 4
      },
      "lineNbr": 127,
      "author": {
        "id": 1001385
      },
      "writtenOn": "2017-08-23T17:37:33Z",
      "side": 1,
      "message": "That other platforms are inconsistent is a bit worrying :-/",
      "parentUuid": "865a1bdc_517e7cff",
      "range": {
        "startLine": 127,
        "startChar": 53,
        "endLine": 127,
        "endChar": 58
      },
      "revId": "663dca5db2308d9f8077e0c88d00bbe1998e0050",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "435c5427_d68e9e4c",
        "filename": "content/browser/child_process_launcher_helper_fuchsia.cc",
        "patchSetId": 4
      },
      "lineNbr": 127,
      "author": {
        "id": 1113499
      },
      "writtenOn": "2017-08-23T18:02:33Z",
      "side": 1,
      "message": "Done.",
      "parentUuid": "865a1bdc_517e7cff",
      "range": {
        "startLine": 127,
        "startChar": 53,
        "endLine": 127,
        "endChar": 58
      },
      "revId": "663dca5db2308d9f8077e0c88d00bbe1998e0050",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1fd6ca17_7bc64e98",
        "filename": "content/renderer/renderer_main_platform_delegate_fuchsia.cc",
        "patchSetId": 4
      },
      "lineNbr": 21,
      "author": {
        "id": 1144260
      },
      "writtenOn": "2017-08-23T04:22:48Z",
      "side": 1,
      "message": "This is my kind of security! :)",
      "range": {
        "startLine": 21,
        "startChar": 9,
        "endLine": 21,
        "endChar": 13
      },
      "revId": "663dca5db2308d9f8077e0c88d00bbe1998e0050",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "442abfec_989d1daf",
        "filename": "content/renderer/renderer_main_platform_delegate_fuchsia.cc",
        "patchSetId": 4
      },
      "lineNbr": 21,
      "author": {
        "id": 1001385
      },
      "writtenOn": "2017-08-23T17:37:33Z",
      "side": 1,
      "message": "Let\u0027s have this return false, and manually run with --no-sandbox for now; that seems preferable to having code lying about whether we have a sandbox!  We can replace the NOTIMPLEMENTED() with NOTREACHED() \u003c\u003c \"We have no sandbox - run with --no-sandbox for now!\"; :D",
      "parentUuid": "1fd6ca17_7bc64e98",
      "range": {
        "startLine": 21,
        "startChar": 9,
        "endLine": 21,
        "endChar": 13
      },
      "revId": "663dca5db2308d9f8077e0c88d00bbe1998e0050",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6498247d_539d3f86",
        "filename": "content/renderer/renderer_main_platform_delegate_fuchsia.cc",
        "patchSetId": 4
      },
      "lineNbr": 21,
      "author": {
        "id": 1113499
      },
      "writtenOn": "2017-08-23T18:02:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "442abfec_989d1daf",
      "range": {
        "startLine": 21,
        "startChar": 9,
        "endLine": 21,
        "endChar": 13
      },
      "revId": "663dca5db2308d9f8077e0c88d00bbe1998e0050",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}