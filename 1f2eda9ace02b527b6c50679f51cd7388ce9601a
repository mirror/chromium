{
  "comments": [
    {
      "key": {
        "uuid": "9fc153b3_d9aa3c20",
        "filename": "media/mojo/common/mojo_data_pipe_read_write.cc",
        "patchSetId": 3
      },
      "lineNbr": 154,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2017-12-07T04:44:39Z",
      "side": 1,
      "message": "It might be good to add:\n\n  producer_handle_.set_connection_handler(Bind(this-\u003eOnPipeError());\n\n...so OnPipeError() could cancel an in-progress write that fails because the data pipe got closed unexpectedly.",
      "range": {
        "startLine": 154,
        "startChar": 0,
        "endLine": 154,
        "endChar": 3
      },
      "revId": "1f2eda9ace02b527b6c50679f51cd7388ce9601a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "756f06ab_e3c8c6ee",
        "filename": "media/mojo/common/mojo_data_pipe_read_write.cc",
        "patchSetId": 3
      },
      "lineNbr": 154,
      "author": {
        "id": 1157930
      },
      "writtenOn": "2017-12-07T19:31:33Z",
      "side": 1,
      "message": "Seems that DataPipeProducerHandle doesn\u0027t have such method to set the connection error handler. https://cs.chromium.org/chromium/src/mojo/public/cpp/system/data_pipe.h?rcl\u003ddfa4d7dd9696c70e0368123d3b1d8629b35fe19b\u0026l\u003d26",
      "parentUuid": "9fc153b3_d9aa3c20",
      "range": {
        "startLine": 154,
        "startChar": 0,
        "endLine": 154,
        "endChar": 3
      },
      "revId": "1f2eda9ace02b527b6c50679f51cd7388ce9601a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "38a2ee8d_a3866bbc",
        "filename": "media/mojo/common/mojo_data_pipe_read_write.cc",
        "patchSetId": 3
      },
      "lineNbr": 154,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2017-12-07T21:59:38Z",
      "side": 1,
      "message": "Ok. So, it seems we\u0027ll just encounter errors on the next Write() attempt. Sounds good.",
      "parentUuid": "756f06ab_e3c8c6ee",
      "range": {
        "startLine": 154,
        "startChar": 0,
        "endLine": 154,
        "endChar": 3
      },
      "revId": "1f2eda9ace02b527b6c50679f51cd7388ce9601a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d37e6cc3_0ebfe2af",
        "filename": "media/mojo/common/mojo_data_pipe_read_write.cc",
        "patchSetId": 3
      },
      "lineNbr": 154,
      "author": {
        "id": 1157930
      },
      "writtenOn": "2017-12-07T23:42:06Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "38a2ee8d_a3866bbc",
      "range": {
        "startLine": 154,
        "startChar": 0,
        "endLine": 154,
        "endChar": 3
      },
      "revId": "1f2eda9ace02b527b6c50679f51cd7388ce9601a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2b4ae9f0_afafe514",
        "filename": "media/mojo/common/mojo_data_pipe_read_write.cc",
        "patchSetId": 3
      },
      "lineNbr": 166,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2017-12-07T04:44:39Z",
      "side": 1,
      "message": "IMHO, you should support sending zero-byte buffers. Sometimes codecs (e.g., Opus, IIRC) can produce 0-byte frames. The semantics of this, from both the producer\u0027s and consumer\u0027s point-of-view would be that a 0-byte frame is being sent/received.\n\n...\n\nOh, I just looked at the code later on, and realized you\u0027re not sending the payload size through the data pipe, like we had discussed earlier. Can we add that? Some use cases, such as CastRemotingSender, would benefit from not having to have the separate message to signal when to Read() from the pipe. Actually, it would solve a huge complexity issue regarding a race condition: Mojo doesn\u0027t guarantee whether the other endpoint will see bytes in the data pipe before or after the message is received. Last year, this led me to have to write some complex task queuing code: https://cs.chromium.org/chromium/src/chrome/browser/media/cast_remoting_sender.cc?rcl\u003d7e81dda83e2309e9faa74cda282d6f9ed4a6f870\u0026l\u003d332\n\nNote that this might change your Read() interface, since the number of bytes to be read wouldn\u0027t be known ahead of time. Maybe do something like to mitigate that:\n\n  using DoneCB \u003d base::OnceCallback\u003cvoid(std::unique_ptr\u003cstd::string\u003e buffer)\u003e;\n  void Read(std::unique_ptr\u003cstd::string\u003e buffer, DoneCB done_cb);\n\n(This would allow re-use of the same std::string as it gets passed in/out to/from each Read() operation, hopefully avoiding lots of heap reallocs.)",
      "range": {
        "startLine": 166,
        "startChar": 2,
        "endLine": 166,
        "endChar": 29
      },
      "revId": "1f2eda9ace02b527b6c50679f51cd7388ce9601a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "05327c43_d92e88fe",
        "filename": "media/mojo/common/mojo_data_pipe_read_write.cc",
        "patchSetId": 3
      },
      "lineNbr": 166,
      "author": {
        "id": 1157930
      },
      "writtenOn": "2017-12-07T19:31:33Z",
      "side": 1,
      "message": "Changed to simply return when buffer size is 0, though I think this can be guarded by the caller.\nThe MojoDataPipeReader/Writer in this CL is a general reader/writer that reads/writes a chunk of data by request. For some applications, like the MojoDecoderBufferReader/Writer, the size for each buffer is passed along with other information through mojo message. It sounds not necessary to write the size again in the data pipe for that case. For our application to transfer the UDP packets, for each packet we can simply call Write() twice: write the size first, then packet. And in the reader, call read twice as well. \nActually the Read() and DoneCB you suggested is the interface for the UdpPacketsReader that is in my another CL that comes later. :)\nWill discuss further with you offline on this.",
      "parentUuid": "2b4ae9f0_afafe514",
      "range": {
        "startLine": 166,
        "startChar": 2,
        "endLine": 166,
        "endChar": 29
      },
      "revId": "1f2eda9ace02b527b6c50679f51cd7388ce9601a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "82321888_83529438",
        "filename": "media/mojo/common/mojo_data_pipe_read_write.cc",
        "patchSetId": 3
      },
      "lineNbr": 166,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2017-12-07T21:59:38Z",
      "side": 1,
      "message": "Ah, yes! Two Write()\u0027s sounds better. :)",
      "parentUuid": "05327c43_d92e88fe",
      "range": {
        "startLine": 166,
        "startChar": 2,
        "endLine": 166,
        "endChar": 29
      },
      "revId": "1f2eda9ace02b527b6c50679f51cd7388ce9601a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "00b3767c_57caab3b",
        "filename": "media/mojo/common/mojo_data_pipe_read_write.cc",
        "patchSetId": 3
      },
      "lineNbr": 166,
      "author": {
        "id": 1157930
      },
      "writtenOn": "2017-12-07T23:42:06Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "82321888_83529438",
      "range": {
        "startLine": 166,
        "startChar": 2,
        "endLine": 166,
        "endChar": 29
      },
      "revId": "1f2eda9ace02b527b6c50679f51cd7388ce9601a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "62e0fb7e_60f9b41e",
        "filename": "media/mojo/common/mojo_data_pipe_read_write.cc",
        "patchSetId": 3
      },
      "lineNbr": 168,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2017-12-07T04:44:39Z",
      "side": 1,
      "message": "The !done_cb_.is_null() is superfluous since the DCHECK() above checked that.",
      "range": {
        "startLine": 168,
        "startChar": 6,
        "endLine": 168,
        "endChar": 25
      },
      "revId": "1f2eda9ace02b527b6c50679f51cd7388ce9601a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7259fd0e_630bf42c",
        "filename": "media/mojo/common/mojo_data_pipe_read_write.cc",
        "patchSetId": 3
      },
      "lineNbr": 168,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2017-12-07T04:44:39Z",
      "side": 1,
      "message": "The current_buffer_size_ part is also not needed, right? |current-buffer_| will always be null.",
      "range": {
        "startLine": 168,
        "startChar": 48,
        "endLine": 168,
        "endChar": 68
      },
      "revId": "1f2eda9ace02b527b6c50679f51cd7388ce9601a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f1a5d1e0_21824007",
        "filename": "media/mojo/common/mojo_data_pipe_read_write.cc",
        "patchSetId": 3
      },
      "lineNbr": 168,
      "author": {
        "id": 1157930
      },
      "writtenOn": "2017-12-07T19:31:33Z",
      "side": 1,
      "message": "All the checks here were to make sure that there is no active writing while Write() is called. Removed the check on |current_buffer_size_| after addressing your other comments.",
      "parentUuid": "7259fd0e_630bf42c",
      "range": {
        "startLine": 168,
        "startChar": 48,
        "endLine": 168,
        "endChar": 68
      },
      "revId": "1f2eda9ace02b527b6c50679f51cd7388ce9601a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "539a60bf_efc01ad6",
        "filename": "media/mojo/common/mojo_data_pipe_read_write.cc",
        "patchSetId": 3
      },
      "lineNbr": 168,
      "author": {
        "id": 1157930
      },
      "writtenOn": "2017-12-07T19:31:33Z",
      "side": 1,
      "message": "This check was to check whether there is an active writing since it was reset after a write completes. Removed it now after addressing your other comments below.",
      "parentUuid": "62e0fb7e_60f9b41e",
      "range": {
        "startLine": 168,
        "startChar": 6,
        "endLine": 168,
        "endChar": 25
      },
      "revId": "1f2eda9ace02b527b6c50679f51cd7388ce9601a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "917f859e_17835e6e",
        "filename": "media/mojo/common/mojo_data_pipe_read_write.cc",
        "patchSetId": 3
      },
      "lineNbr": 170,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2017-12-07T04:44:39Z",
      "side": 1,
      "message": "I\u0027m thinking this should all be a DCHECK(): It\u0027s a logic flaw in the code to call Write() while a previous write is in-progress.",
      "range": {
        "startLine": 170,
        "startChar": 0,
        "endLine": 170,
        "endChar": 34
      },
      "revId": "1f2eda9ace02b527b6c50679f51cd7388ce9601a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b2702cbf_0a270c52",
        "filename": "media/mojo/common/mojo_data_pipe_read_write.cc",
        "patchSetId": 3
      },
      "lineNbr": 170,
      "author": {
        "id": 1157930
      },
      "writtenOn": "2017-12-07T19:31:33Z",
      "side": 1,
      "message": "Yes, it\u0027s a logic flaw in the caller\u0027s code to call Write() while a previous write is in-progress. Though not sure whether DCHECK() is better. It sounds good to me to let the caller handle the error. WDYT?",
      "parentUuid": "917f859e_17835e6e",
      "range": {
        "startLine": 170,
        "startChar": 0,
        "endLine": 170,
        "endChar": 34
      },
      "revId": "1f2eda9ace02b527b6c50679f51cd7388ce9601a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7066c46c_9bb0915f",
        "filename": "media/mojo/common/mojo_data_pipe_read_write.cc",
        "patchSetId": 3
      },
      "lineNbr": 170,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2017-12-07T21:59:38Z",
      "side": 1,
      "message": "In this case, the calling code is violating the interface contract. Meaning, the header file explicitly said \"don\u0027t do that.\"\n\nI don\u0027t feel strongly about what you decide to do here. However, note that if you go with my advice, then the DoneCB is only run with false when the data pipe becomes invalid (and no other reason), making \"false\" mean \"permanent error\" rather than \"transient or permanent error.\"",
      "parentUuid": "b2702cbf_0a270c52",
      "range": {
        "startLine": 170,
        "startChar": 0,
        "endLine": 170,
        "endChar": 34
      },
      "revId": "1f2eda9ace02b527b6c50679f51cd7388ce9601a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a4cbefbf_72ea2bf4",
        "filename": "media/mojo/common/mojo_data_pipe_read_write.cc",
        "patchSetId": 3
      },
      "lineNbr": 170,
      "author": {
        "id": 1157930
      },
      "writtenOn": "2017-12-07T23:42:06Z",
      "side": 1,
      "message": "Done. Changed to DCHECK.",
      "parentUuid": "7066c46c_9bb0915f",
      "range": {
        "startLine": 170,
        "startChar": 0,
        "endLine": 170,
        "endChar": 34
      },
      "revId": "1f2eda9ace02b527b6c50679f51cd7388ce9601a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1561bebb_a3b25172",
        "filename": "media/mojo/common/mojo_data_pipe_read_write.cc",
        "patchSetId": 3
      },
      "lineNbr": 183,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2017-12-07T04:44:39Z",
      "side": 1,
      "message": "I\u0027d set bytes_written_ to 0 here, since this is the point in the code where the write from the first byte begins.",
      "range": {
        "startLine": 183,
        "startChar": 0,
        "endLine": 183,
        "endChar": 37
      },
      "revId": "1f2eda9ace02b527b6c50679f51cd7388ce9601a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c17e3ca2_5095c6aa",
        "filename": "media/mojo/common/mojo_data_pipe_read_write.cc",
        "patchSetId": 3
      },
      "lineNbr": 183,
      "author": {
        "id": 1157930
      },
      "writtenOn": "2017-12-07T19:31:33Z",
      "side": 1,
      "message": "Done.",
      "parentUuid": "1561bebb_a3b25172",
      "range": {
        "startLine": 183,
        "startChar": 0,
        "endLine": 183,
        "endChar": 37
      },
      "revId": "1f2eda9ace02b527b6c50679f51cd7388ce9601a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f556fb5f_102009d4",
        "filename": "media/mojo/common/mojo_data_pipe_read_write.cc",
        "patchSetId": 3
      },
      "lineNbr": 225,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2017-12-07T04:44:39Z",
      "side": 1,
      "message": "nit: It\u0027s probably sufficient to just set |current_buffer_| to null and then run the |done_cb_|. The other fields will get re-initialized on the next call to Write() anyway.",
      "range": {
        "startLine": 222,
        "startChar": 0,
        "endLine": 225,
        "endChar": 27
      },
      "revId": "1f2eda9ace02b527b6c50679f51cd7388ce9601a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "457f826d_d476aefd",
        "filename": "media/mojo/common/mojo_data_pipe_read_write.cc",
        "patchSetId": 3
      },
      "lineNbr": 225,
      "author": {
        "id": 1157930
      },
      "writtenOn": "2017-12-07T19:31:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f556fb5f_102009d4",
      "range": {
        "startLine": 222,
        "startChar": 0,
        "endLine": 225,
        "endChar": 27
      },
      "revId": "1f2eda9ace02b527b6c50679f51cd7388ce9601a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d8d6925a_745d7229",
        "filename": "media/mojo/common/mojo_data_pipe_read_write.h",
        "patchSetId": 3
      },
      "lineNbr": 69,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2017-12-07T04:44:39Z",
      "side": 1,
      "message": "nit: Comment not necessary. The handle is a move-only type and named as such, so this is implied.",
      "range": {
        "startLine": 69,
        "startChar": 2,
        "endLine": 69,
        "endChar": 44
      },
      "revId": "1f2eda9ace02b527b6c50679f51cd7388ce9601a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "51774725_9c14449b",
        "filename": "media/mojo/common/mojo_data_pipe_read_write.h",
        "patchSetId": 3
      },
      "lineNbr": 69,
      "author": {
        "id": 1157930
      },
      "writtenOn": "2017-12-07T19:31:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d8d6925a_745d7229",
      "range": {
        "startLine": 69,
        "startChar": 2,
        "endLine": 69,
        "endChar": 44
      },
      "revId": "1f2eda9ace02b527b6c50679f51cd7388ce9601a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}