{
  "comments": [
    {
      "key": {
        "uuid": "fb04ded2_4a96a60a",
        "filename": "net/http/http_cache.cc",
        "patchSetId": 34
      },
      "lineNbr": 1130,
      "author": {
        "id": 1001809
      },
      "writtenOn": "2017-09-21T21:53:15Z",
      "side": 0,
      "message": "Why were these removed?  I\u0027m not following the motivation.",
      "range": {
        "startLine": 1130,
        "startChar": 17,
        "endLine": 1130,
        "endChar": 0
      },
      "revId": "07ea99d7e17fb423850453e72795646d9c9bc82c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "21064f83_d45d181f",
        "filename": "net/http/http_cache.cc",
        "patchSetId": 34
      },
      "lineNbr": 1130,
      "author": {
        "id": 1172224
      },
      "writtenOn": "2017-09-22T20:55:26Z",
      "side": 0,
      "message": "There is a valid path https://cs.chromium.org/chromium/src/net/http/http_cache_transaction.cc?dr\u0026l\u003d1775 where a HEAD transaction wants to invalidate the existing entry. Since we are replacing DoneWritingToEntry with DoneWithEntry, HasDependentTransactions should no longer return a false for HEAD. These conditions were earlier added because of the assumption that HEAD transactions never invalidate an existing entry.\nMerging DoneWritingToEntry calls in DoneWithEntry is proving helpful to figure out such cases and treat all paths consistently through this one function",
      "parentUuid": "fb04ded2_4a96a60a",
      "range": {
        "startLine": 1130,
        "startChar": 17,
        "endLine": 1130,
        "endChar": 0
      },
      "revId": "07ea99d7e17fb423850453e72795646d9c9bc82c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "99d8b591_92569472",
        "filename": "net/http/http_cache_unittest.cc",
        "patchSetId": 34
      },
      "lineNbr": 7208,
      "author": {
        "id": 1001809
      },
      "writtenOn": "2017-10-03T18:56:45Z",
      "side": 0,
      "message": "So I\u0027m fine with this if you\u0027ve gone through the code and convinced yourself it\u0027s not needed.  But it raises the concern that the test is passing but flaky if there\u0027s asynchrony behind the scenes and we just happen to be winning the race.  Could you take a look and convince yourself that that isn\u0027t the case?",
      "range": {
        "startLine": 7208,
        "startChar": 29,
        "endLine": 7208,
        "endChar": 47
      },
      "revId": "07ea99d7e17fb423850453e72795646d9c9bc82c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eab61885_f07c8ef2",
        "filename": "net/http/http_cache_unittest.cc",
        "patchSetId": 34
      },
      "lineNbr": 7208,
      "author": {
        "id": 1172224
      },
      "writtenOn": "2017-10-11T20:51:15Z",
      "side": 0,
      "message": "In the future patches because we have changed truncation to only happen after the outstanding operation is complete, the truncated flag is only checked after we invoke base::RunLoop().RunUntilIdle() so that will make sure that the test is consistent.",
      "parentUuid": "99d8b591_92569472",
      "range": {
        "startLine": 7208,
        "startChar": 29,
        "endLine": 7208,
        "endChar": 47
      },
      "revId": "07ea99d7e17fb423850453e72795646d9c9bc82c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}