{
  "comments": [
    {
      "key": {
        "uuid": "66ce4b6b_f84cb781",
        "filename": "chrome/browser/ui/views/omnibox/omnibox_popup_contents_view.cc",
        "patchSetId": 7
      },
      "lineNbr": 213,
      "author": {
        "id": 1115920
      },
      "writtenOn": "2017-07-14T21:04:43Z",
      "side": 1,
      "message": "Add a comment explaining what this block does. Something like:\n\n// Determine whether any tail suggestions are present and if so, what the\n// common prefix text is.",
      "revId": "12fb6bc8c8dde06fec682939d400f03a4eef1c5d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8fcd6312_0d75fa62",
        "filename": "chrome/browser/ui/views/omnibox/omnibox_popup_contents_view.cc",
        "patchSetId": 7
      },
      "lineNbr": 213,
      "author": {
        "id": 1105777
      },
      "writtenOn": "2017-07-16T22:02:12Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "66ce4b6b_f84cb781",
      "revId": "12fb6bc8c8dde06fec682939d400f03a4eef1c5d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f98cc229_b650eef4",
        "filename": "chrome/browser/ui/views/omnibox/omnibox_popup_contents_view.cc",
        "patchSetId": 7
      },
      "lineNbr": 234,
      "author": {
        "id": 1115920
      },
      "writtenOn": "2017-07-14T21:04:43Z",
      "side": 1,
      "message": "I\u0027d still much prefer all the code to be in this class, so that all of the logic dealing with tail suggestions can be seen in one place.\n\nGiven that OmniboxResultView doesn\u0027t have any special knowledge about the match or how to deal with tail suggestions, the fixup method doesn\u0027t need to live there. Can you move it here? (And maybe give it a bit more descriptive name? Proposed: InlineTailPrefix)\n\nIn other words, this code would look something like this:\n\nAutocompleteMatch match \u003d GetMatchAtIndex(i);\nInlineTailPrefix(any_tail_suggestions, common_prefix, \u0026match);\nview-\u003eSetMatch(match);\n\nGranted, this requires an extra copy. But I don\u0027t think it\u0027s worth adding complexity by splitting this logic across 2 classes in order to avoid copying a small number of objects that are already being copied around a few times.",
      "revId": "12fb6bc8c8dde06fec682939d400f03a4eef1c5d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e9314999_bf0795cd",
        "filename": "chrome/browser/ui/views/omnibox/omnibox_popup_contents_view.cc",
        "patchSetId": 7
      },
      "lineNbr": 234,
      "author": {
        "id": 1105777
      },
      "writtenOn": "2017-07-16T22:02:12Z",
      "side": 1,
      "message": "To be fair, this class doesn\u0027t know anything about tail suggestions either. The only reason there\u0027s any code here at all is because Update() is the best place to capture \u0027any_tail_suggestions\u0027 which would be a one-liner in Python and we wouldn\u0027t think twice about it.\n\nI prefer leaving it in ResultView because I see the match as \"his\" data. I worry much more about data consistency than having some code in a single file. Granted, it\u0027s not \"his\" data yet technically, but you know how code changes, and tail suggestion code is already spread over several directories.\n\nAlso, notice how there\u0027s already code to modify the match in SetMatch(). I\u0027d prefer not modifying it two separate places. It already raises the question of which should occur first. Putting it all there makes it obvious it\u0027s happening more than once.\n\nA possibly better place to move the actual method might be autocomplete_match.cc. Like PossiblySwapContents(), the match could define InlineTailPrefix(). One benefit of this approach would be that if/when we change the provider to put \"correct\" strings in the matches, we could do it all from the components directory.\n\nThe only reason I didn\u0027t put it there in this CL is because it still bothers my sensibilities to put UI code down there, but I could be convinced that it\u0027s the best place.",
      "parentUuid": "f98cc229_b650eef4",
      "revId": "12fb6bc8c8dde06fec682939d400f03a4eef1c5d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f6ec9755_7e8066da",
        "filename": "chrome/browser/ui/views/omnibox/omnibox_popup_contents_view.cc",
        "patchSetId": 7
      },
      "lineNbr": 234,
      "author": {
        "id": 1115920
      },
      "writtenOn": "2017-07-18T13:44:48Z",
      "side": 1,
      "message": "\u003e To be fair, this class doesn\u0027t know anything about tail suggestions\n\u003e either.\n\nIt does now, however. It knows whether tail suggestions are present and what their prefix is, which is why it has to pass additional information (any_tail_suggestions, common_prefix) to the result view.\n\n\u003e A possibly better place to move the actual method might be \n\u003e autocomplete_match.cc. Like PossiblySwapContents(), the match could define\n\u003e InlineTailPrefix(). One benefit of this approach would be that if/when we\n\u003e change the provider to put \"correct\" strings in the matches, we could do\n\u003e it all from the components directory.\n\nYeah, you\u0027re right. Moving this logic to the data classes in components is the way to go. This is all about manipulating the model into a form that represents what we want on desktop, so we should let the model classes take care of it. This will avoid us having to re-implement any of it on the Cocoa side, also.\n\nI just realized that everything you care about is encapsulated in a single value: the AutocompleteResult available via model_-\u003eresult(). So all this code can and should go in that class (piped through model_-\u003eautocomplete_controller() since model_-\u003eresult() is const).\n\nI still suspect there\u0027s an earlier point at which the results are available and we can determine whether any of them are tail suggestions. But if there\u0027s just a single method to call (InlineTailPrefixes() or whatever) we can easily move it at some later time if we find a better point.\n\n\u003e Also, notice how there\u0027s already code to modify the match in SetMatch().\n\u003e I\u0027d prefer not modifying it two separate places.\n\nI assume you mean the call to PossiblySwapContents()? The doc comment for that method suggests that it should be done at the latest possible time, so I think doing the tail suggest manipulation earlier is better, regardless. It\u0027s also experimental code that we might not need anymore (I need to check with Mark).",
      "parentUuid": "e9314999_bf0795cd",
      "revId": "12fb6bc8c8dde06fec682939d400f03a4eef1c5d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "593f9156_41d5d48c",
        "filename": "chrome/browser/ui/views/omnibox/omnibox_popup_contents_view.cc",
        "patchSetId": 7
      },
      "lineNbr": 234,
      "author": {
        "id": 1105777
      },
      "writtenOn": "2017-07-18T16:13:02Z",
      "side": 1,
      "message": "\u003e \n\u003e It does now, however.\n\nBut it\u0027s not a binary concept. Just because the method makes a non-modifying loop through the results doesn\u0027t mean that it\u0027s the authority on tail suggestions, much less the optimal location of all the code. There are many factors to consider and my point is that it\u0027s a minority participant.\n\n\u003e I still suspect there\u0027s an earlier point at which the results are available and we can determine whether any of them are tail suggestions. But if there\u0027s just a single method to call (InlineTailPrefixes() or whatever) we can easily move it at some later time if we find a better point.\n\nWe can move the calculation of \u0027any\u0027 and \u0027prefix\u0027 earlier, but the call to fix-up a match needs to occur in the UI (assuming we still want to avoid #ifdef\u0027s) If we move all the tail suggest code out of popup_contents_view.cc, this makes putting the call in SetMatch() that much more natural.\n\n\u003e The doc comment for that method suggests that it should be done at the latest possible time, so I think doing the tail suggest manipulation earlier is better...\n\nSorry, I didn\u0027t follow this logic.",
      "parentUuid": "f6ec9755_7e8066da",
      "revId": "12fb6bc8c8dde06fec682939d400f03a4eef1c5d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}