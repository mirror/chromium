{
  "comments": [
    {
      "key": {
        "uuid": "ac9e1467_1fe78eac",
        "filename": "chrome/browser/search/instant_service.cc",
        "patchSetId": 7
      },
      "lineNbr": 30,
      "author": {
        "id": 1116059
      },
      "writtenOn": "2017-08-02T12:06:31Z",
      "side": 1,
      "message": "I think this isn\u0027t needed anymore",
      "range": {
        "startLine": 30,
        "startChar": 42,
        "endLine": 30,
        "endChar": 0
      },
      "revId": "c7c6bbe1dffbedad5ffb65122cfef0d3492f350a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fe9412e9_40678270",
        "filename": "chrome/browser/search/instant_service.cc",
        "patchSetId": 7
      },
      "lineNbr": 30,
      "author": {
        "id": 1186968
      },
      "writtenOn": "2017-08-03T01:24:01Z",
      "side": 1,
      "message": "thanks - not needed indeed.",
      "parentUuid": "ac9e1467_1fe78eac",
      "range": {
        "startLine": 30,
        "startChar": 42,
        "endLine": 30,
        "endChar": 0
      },
      "revId": "c7c6bbe1dffbedad5ffb65122cfef0d3492f350a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b9216876_f0017f6a",
        "filename": "chrome/browser/search/instant_service.cc",
        "patchSetId": 7
      },
      "lineNbr": 211,
      "author": {
        "id": 1109754
      },
      "writtenOn": "2017-08-02T11:34:11Z",
      "side": 1,
      "message": "nit: maybe move this variable declaration inside the if {..} block since that\u0027s the only place it\u0027s used?",
      "revId": "c7c6bbe1dffbedad5ffb65122cfef0d3492f350a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d82cc320_634d71e3",
        "filename": "chrome/browser/search/instant_service.cc",
        "patchSetId": 7
      },
      "lineNbr": 211,
      "author": {
        "id": 1186968
      },
      "writtenOn": "2017-08-03T01:24:01Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b9216876_f0017f6a",
      "revId": "c7c6bbe1dffbedad5ffb65122cfef0d3492f350a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e3be7712_454aac9f",
        "filename": "chrome/common/search.mojom",
        "patchSetId": 7
      },
      "lineNbr": 122,
      "author": {
        "id": 1109754
      },
      "writtenOn": "2017-08-02T11:34:11Z",
      "side": 1,
      "message": "nit: grammar which/that confusion, should use \"that\" here, eg.,\n\n// SearchBouncer tracks URLs that should be sent back to ...",
      "revId": "c7c6bbe1dffbedad5ffb65122cfef0d3492f350a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7a4650dd_9a694861",
        "filename": "chrome/common/search.mojom",
        "patchSetId": 7
      },
      "lineNbr": 122,
      "author": {
        "id": 1186968
      },
      "writtenOn": "2017-08-03T01:24:01Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e3be7712_454aac9f",
      "revId": "c7c6bbe1dffbedad5ffb65122cfef0d3492f350a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5b30b859_ed1d86ae",
        "filename": "chrome/common/search.mojom",
        "patchSetId": 7
      },
      "lineNbr": 125,
      "author": {
        "id": 1109754
      },
      "writtenOn": "2017-08-02T11:34:11Z",
      "side": 1,
      "message": "dito:\n\n// Sets the URLs that the renderer should send back to the browser process for reassignment to an Instant renderer.",
      "revId": "c7c6bbe1dffbedad5ffb65122cfef0d3492f350a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "618f0874_23b48515",
        "filename": "chrome/common/search.mojom",
        "patchSetId": 7
      },
      "lineNbr": 125,
      "author": {
        "id": 1186968
      },
      "writtenOn": "2017-08-03T01:24:01Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5b30b859_ed1d86ae",
      "revId": "c7c6bbe1dffbedad5ffb65122cfef0d3492f350a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c7986e2f_cae7f4cf",
        "filename": "chrome/renderer/searchbox/search_bouncer.cc",
        "patchSetId": 7
      },
      "lineNbr": 30,
      "author": {
        "id": 1116059
      },
      "writtenOn": "2017-08-02T12:06:31Z",
      "side": 1,
      "message": "Is Unretained() safe here? If so, add a comment why?",
      "revId": "c7c6bbe1dffbedad5ffb65122cfef0d3492f350a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "225995b9_f3c6541d",
        "filename": "chrome/renderer/searchbox/search_bouncer.cc",
        "patchSetId": 7
      },
      "lineNbr": 30,
      "author": {
        "id": 1186968
      },
      "writtenOn": "2017-08-03T01:24:01Z",
      "side": 1,
      "message": "Unretained is safe since this class is a leaky singleton.  I\u0027m inclined not to add a comment since using Unretained(this) is the most idomatic usage in mojo binders.",
      "parentUuid": "c7986e2f_cae7f4cf",
      "revId": "c7c6bbe1dffbedad5ffb65122cfef0d3492f350a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ac6c1493_e5c14ad4",
        "filename": "chrome/renderer/searchbox/search_bouncer.cc",
        "patchSetId": 7
      },
      "lineNbr": 30,
      "author": {
        "id": 1116059
      },
      "writtenOn": "2017-08-03T08:32:02Z",
      "side": 1,
      "message": "So, from what I can tell, in the typical case Unretained is safe because there\u0027s an accompanying UnregisterMojoInterfaces which calls RemoveInterface? Or is there some more fundamental reason?\nSorry, all the Mojo stuff always feels a bit like black magic to me...\n\nSo if the reason it\u0027s safe *here* is \"this class is a leaky singleton\", then I\u0027d prefer to have a comment saying that, since it\u0027s easy to miss otherwise. OTOH, if the reason is \"Mojo is magic\", then I guess that\u0027s just how it is :-/",
      "parentUuid": "225995b9_f3c6541d",
      "revId": "c7c6bbe1dffbedad5ffb65122cfef0d3492f350a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "796c4f8b_c8f13ee6",
        "filename": "chrome/renderer/searchbox/search_bouncer.cc",
        "patchSetId": 7
      },
      "lineNbr": 30,
      "author": {
        "id": 1186968
      },
      "writtenOn": "2017-08-04T00:34:17Z",
      "side": 1,
      "message": "We are both in the same boat about mojo being black magic.  This is the 4th IPC that I\u0027ve converted to mojo in the last 2 or 3 weeks since I first laid eyes on mojo.  It isn\u0027t entirely clear how it all works, and frankly some of the code ends up looking messy to my eyes.  And to make it even a little harder, the mojo interfaces are still changing in fairly large ways quite often.\n\nSo your comments seem very fair, and I\u0027m not sure that I have good answers.  My gut feel is that \u0027mojo is magic\u0027 so unretained is fine.  This mojo documentation has a short reference to why Unretained is safe when used in one particular situation relating to the lifetime of |bindings| and |this|, but I don\u0027t believe it is relevant right here where we are using a |registry|.  https://chromium.googlesource.com/chromium/src/+/master/mojo/public/cpp/bindings\n\nOn looking at this a little right now, I can see that like you mention, RenderThreadObserver::UnregisterMojoInterfaces will take care of removing references, so using Unretained is fine, even if this class was not a leaky singleton.\n\nThanks for you comments on this review.",
      "parentUuid": "ac6c1493_e5c14ad4",
      "revId": "c7c6bbe1dffbedad5ffb65122cfef0d3492f350a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ff914c3a_bec25a70",
        "filename": "chrome/renderer/searchbox/search_bouncer.cc",
        "patchSetId": 7
      },
      "lineNbr": 30,
      "author": {
        "id": 1116059
      },
      "writtenOn": "2017-08-04T09:06:15Z",
      "side": 1,
      "message": "\u003e We are both in the same boat about mojo being black magic.  This is the 4th IPC that I\u0027ve converted to mojo in the last 2 or 3 weeks since I first laid eyes on mojo.  It isn\u0027t entirely clear how it all works, and frankly some of the code ends up looking messy to my eyes.  And to make it even a little harder, the mojo interfaces are still changing in fairly large ways quite often.\n\u003e \n\u003e So your comments seem very fair, and I\u0027m not sure that I have good answers.  My gut feel is that \u0027mojo is magic\u0027 so unretained is fine.  This mojo documentation has a short reference to why Unretained is safe when used in one particular situation relating to the lifetime of |bindings| and |this|, but I don\u0027t believe it is relevant right here where we are using a |registry|.  https://chromium.googlesource.com/chromium/src/+/master/mojo/public/cpp/bindings\n\nYeah, I think that\u0027s a different situation. In the one mention of Unretained there, it\u0027s safe because we\u0027re passing the Unretained(this) to a thing owned by this, which is a common pattern independent of Mojo.\n\n\u003e On looking at this a little right now, I can see that like you mention, RenderThreadObserver::UnregisterMojoInterfaces will take care of removing references, so using Unretained is fine, even if this class was not a leaky singleton.\n\nBut this class doesn\u0027t implement UnregisterMojoInterfaces. Maybe it doesn\u0027t have to, due to being a LeakySingleton, but then that IMO warrants a comment.",
      "parentUuid": "796c4f8b_c8f13ee6",
      "revId": "c7c6bbe1dffbedad5ffb65122cfef0d3492f350a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}