{
  "comments": [
    {
      "key": {
        "uuid": "98562f64_a9df4812",
        "filename": "remoting/protocol/webrtc_dummy_video_encoder.cc",
        "patchSetId": 19
      },
      "lineNbr": 20,
      "author": {
        "id": 1120879
      },
      "writtenOn": "2017-10-11T18:11:57Z",
      "side": 1,
      "message": "Is there a reason this is a define rather than a buildflag?",
      "range": {
        "startLine": 20,
        "startChar": 12,
        "endLine": 20,
        "endChar": 28
      },
      "revId": "2547e9be122ae84e835b35dec271b01adb0c8b58",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "180bf33d_982179d1",
        "filename": "remoting/protocol/webrtc_dummy_video_encoder.cc",
        "patchSetId": 19
      },
      "lineNbr": 20,
      "author": {
        "id": 1196069
      },
      "writtenOn": "2017-10-11T19:37:09Z",
      "side": 1,
      "message": "H264 works for both Linux and Windows (and maybe other platforms later). So using a define can help to reduce the duplication of the combinations of build flags. (This define is used in several source files.) It can also help to ensure the consistency between BUILD.gn file and the source files.",
      "parentUuid": "98562f64_a9df4812",
      "range": {
        "startLine": 20,
        "startChar": 12,
        "endLine": 20,
        "endChar": 28
      },
      "revId": "2547e9be122ae84e835b35dec271b01adb0c8b58",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1ac152c7_0df17976",
        "filename": "remoting/protocol/webrtc_dummy_video_encoder.cc",
        "patchSetId": 19
      },
      "lineNbr": 20,
      "author": {
        "id": 1120879
      },
      "writtenOn": "2017-10-11T21:36:31Z",
      "side": 1,
      "message": "I think there is a misunderstanding here. A buildflag is just a more robust way to specify defines, such that they fail to compile if you have incorrect deps.\n\nSee build/buildflag_header.gni for documentation, media/BUILD.gn for an example.",
      "parentUuid": "180bf33d_982179d1",
      "range": {
        "startLine": 20,
        "startChar": 12,
        "endLine": 20,
        "endChar": 28
      },
      "revId": "2547e9be122ae84e835b35dec271b01adb0c8b58",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9cc75d0e_6714db3d",
        "filename": "remoting/protocol/webrtc_dummy_video_encoder.cc",
        "patchSetId": 19
      },
      "lineNbr": 20,
      "author": {
        "id": 1196069
      },
      "writtenOn": "2017-10-11T23:57:44Z",
      "side": 1,
      "message": "Sorry, I thought you were talking about OS_WIN / OS_LINUX flags.\n\nI think the buildflag_header is more useful if we would like to control the behavior with GN arguments. But we do not have plan to do so. Using a define is sufficient for now.\n\nIf some deps are missing, we will also have a build error by using current implementation. Isn\u0027t it?",
      "parentUuid": "1ac152c7_0df17976",
      "range": {
        "startLine": 20,
        "startChar": 12,
        "endLine": 20,
        "endChar": 28
      },
      "revId": "2547e9be122ae84e835b35dec271b01adb0c8b58",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d07a9599_3e755d24",
        "filename": "remoting/protocol/webrtc_dummy_video_encoder.cc",
        "patchSetId": 19
      },
      "lineNbr": 20,
      "author": {
        "id": 1120879
      },
      "writtenOn": "2017-10-12T18:31:06Z",
      "side": 1,
      "message": "I\u0027m not really sure how your build is structured. In general, if a build does not depend on the target that defines the macro, then `#if defined(...)` will simply be false. This can lead to different parts of the codebase being compiled with different values for the same definition.",
      "parentUuid": "9cc75d0e_6714db3d",
      "range": {
        "startLine": 20,
        "startChar": 12,
        "endLine": 20,
        "endChar": 28
      },
      "revId": "2547e9be122ae84e835b35dec271b01adb0c8b58",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8e8b0770_3a3adf0d",
        "filename": "remoting/protocol/webrtc_dummy_video_encoder.cc",
        "patchSetId": 19
      },
      "lineNbr": 56,
      "author": {
        "id": 1120879
      },
      "writtenOn": "2017-10-11T18:11:57Z",
      "side": 1,
      "message": "This is exactly your own ParseNALUs()?",
      "range": {
        "startLine": 41,
        "startChar": 2,
        "endLine": 56,
        "endChar": 3
      },
      "revId": "2547e9be122ae84e835b35dec271b01adb0c8b58",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7434c20e_a03102b1",
        "filename": "remoting/protocol/webrtc_dummy_video_encoder.cc",
        "patchSetId": 19
      },
      "lineNbr": 56,
      "author": {
        "id": 1196069
      },
      "writtenOn": "2017-10-11T19:37:09Z",
      "side": 1,
      "message": "Yes, this change was prepared before ParseNALUs() is submitted. I will prepare another CL to change both here and //content/render/media/gpu/rtc_video_encoder.cc.",
      "parentUuid": "8e8b0770_3a3adf0d",
      "range": {
        "startLine": 41,
        "startChar": 2,
        "endLine": 56,
        "endChar": 3
      },
      "revId": "2547e9be122ae84e835b35dec271b01adb0c8b58",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}