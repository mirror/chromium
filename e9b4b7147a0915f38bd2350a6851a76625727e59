{
  "comments": [
    {
      "key": {
        "uuid": "273610f9_4b3e2cb1",
        "filename": "base/memory/shared_memory_mapping.h",
        "patchSetId": 5
      },
      "lineNbr": 71,
      "author": {
        "id": 1154589
      },
      "writtenOn": "2018-01-31T10:27:15Z",
      "side": 1,
      "message": "Do we even need the empty public constructor? Or can we only have them constructed from the private constructor?",
      "range": {
        "startLine": 71,
        "startChar": 31,
        "endLine": 71,
        "endChar": 32
      },
      "revId": "e9b4b7147a0915f38bd2350a6851a76625727e59",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "380f2755_17cac651",
        "filename": "base/memory/shared_memory_mapping.h",
        "patchSetId": 5
      },
      "lineNbr": 71,
      "author": {
        "id": 1194993
      },
      "writtenOn": "2018-01-31T12:46:08Z",
      "side": 1,
      "message": "It\u0027s allowed to have an invalid mapping, so I think it won\u0027t be convenient not being able to use the empty constructor. I look at it as a null pointer.\nConsider this example from unittests which is not possible to write without the empty constructor:\n\n    ReadOnlySharedMemoryRegion region;\n    WritableSharedMemoryMapping rw_mapping;\n    std::tie(region, rw_mapping) \u003d ReadOnlySharedMemoryRegion::Create(kRegionSize);",
      "parentUuid": "273610f9_4b3e2cb1",
      "range": {
        "startLine": 71,
        "startChar": 31,
        "endLine": 71,
        "endChar": 32
      },
      "revId": "e9b4b7147a0915f38bd2350a6851a76625727e59",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "378a5ac5_2c884388",
        "filename": "base/memory/shared_memory_mapping.h",
        "patchSetId": 5
      },
      "lineNbr": 71,
      "author": {
        "id": 1154589
      },
      "writtenOn": "2018-01-31T13:15:09Z",
      "side": 1,
      "message": "That\u0027s a good point. It does have the downside that the implementations always need to do an invalid check, but I guess we\u0027d have to do that anyway as Create() could always return an invalid mapping if there\u0027s an error.",
      "parentUuid": "380f2755_17cac651",
      "range": {
        "startLine": 71,
        "startChar": 31,
        "endLine": 71,
        "endChar": 32
      },
      "revId": "e9b4b7147a0915f38bd2350a6851a76625727e59",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "72bbcc8a_ddb4f7f0",
        "filename": "base/memory/shared_memory_mapping.h",
        "patchSetId": 5
      },
      "lineNbr": 71,
      "author": {
        "id": 1194993
      },
      "writtenOn": "2018-01-31T14:34:42Z",
      "side": 1,
      "message": "Exactly. Anyway we need to have some way to report about an error and a caller should check if there was an error. \nAnother option would be to return a boolean or a null pointer.",
      "parentUuid": "378a5ac5_2c884388",
      "range": {
        "startLine": 71,
        "startChar": 31,
        "endLine": 71,
        "endChar": 32
      },
      "revId": "e9b4b7147a0915f38bd2350a6851a76625727e59",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}