{
  "comments": [
    {
      "key": {
        "uuid": "59484fc0_aa7293ca",
        "filename": "services/network/public/interfaces/udp_socket.mojom",
        "patchSetId": 28
      },
      "lineNbr": 70,
      "author": {
        "id": 1115968
      },
      "writtenOn": "2017-12-18T16:45:53Z",
      "side": 1,
      "message": "Can we instead just have a hard-coded limit, which we guarantee that we\u0027ll allow, and get rid of this method?  Returning ERR_INSUFFICIENT_RESOURCES for some indeterminate limit seems not great.  If we want to let consumers set a lower limit (For debugging/error checking), we can just make it passed in on creation.",
      "range": {
        "startLine": 70,
        "startChar": 31,
        "endLine": 70,
        "endChar": 32
      },
      "revId": "17a5ee71f975ebd03efe1a9ce102f03b7df0c301",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "45c1469d_04c92c85",
        "filename": "services/network/public/interfaces/udp_socket.mojom",
        "patchSetId": 28
      },
      "lineNbr": 76,
      "author": {
        "id": 1118144
      },
      "writtenOn": "2017-12-16T00:14:43Z",
      "side": 1,
      "message": "Are you retaining this? I thought we agreed that this wouldn\u0027t be necessary anymore.",
      "revId": "17a5ee71f975ebd03efe1a9ce102f03b7df0c301",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "db3f4e8d_6e9e68b7",
        "filename": "services/network/public/interfaces/udp_socket.mojom",
        "patchSetId": 28
      },
      "lineNbr": 76,
      "author": {
        "id": 1140166
      },
      "writtenOn": "2017-12-16T00:54:13Z",
      "side": 1,
      "message": "Drive by comment:  Some amount of queuing should be supported *if* there is any chance you might use such an interface and care about performance.  \n\nIn my work on QUIC upload performance, I added a batching mechanism somewhat like this to net/socket (not landed yet).   I devised it as a step toward moving UDP writes to a different thread/core.   Even without the threading, I saw big gains just from the queuing/batching.   An important difference between UDP and TCP is that posix writes to UDP are 1:1 with datagrams.   You can do a large write and have the kernel break that up for you into smaller datagrams (unlike TCP which will both fragment and coalesce data into segments).   UDP constrains you to MTU sized datagrams, so batching is the only way to amortize the cost of an expensive boundary.",
      "parentUuid": "45c1469d_04c92c85",
      "revId": "17a5ee71f975ebd03efe1a9ce102f03b7df0c301",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "38b6d298_49ec7a47",
        "filename": "services/network/public/interfaces/udp_socket.mojom",
        "patchSetId": 28
      },
      "lineNbr": 76,
      "author": {
        "id": 1120845
      },
      "writtenOn": "2017-12-18T14:50:43Z",
      "side": 1,
      "message": "Thanks Jana and Buck for the QUIC insight. \nWe still need the pipelining in the mojo API layer. Randy mentioned that the cost of mojo API call is at least a PostTask if in-process and more if it crosses the process boundary. Without pipelining, this will be significantly less usable compared to //net\u0027s C++ net::UDPSocket.\n\nThere is a different type of pipelining that Randy mentioned in https://chromium-review.googlesource.com/c/chromium/src/+/796933/23/services/network/udp_socket_impl.cc#191.\nThat is between //net and the kernel. We talked about it briefly and decided that is out of scope of the CL.",
      "parentUuid": "db3f4e8d_6e9e68b7",
      "revId": "17a5ee71f975ebd03efe1a9ce102f03b7df0c301",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "925a0fe0_0d37e3d0",
        "filename": "services/network/public/interfaces/udp_socket.mojom",
        "patchSetId": 28
      },
      "lineNbr": 117,
      "author": {
        "id": 1118144
      },
      "writtenOn": "2017-12-16T00:14:43Z",
      "side": 1,
      "message": "ditto",
      "revId": "17a5ee71f975ebd03efe1a9ce102f03b7df0c301",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}