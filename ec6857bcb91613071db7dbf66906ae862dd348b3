{
  "comments": [
    {
      "key": {
        "uuid": "4a6bf2ee_db20086e",
        "filename": "chrome/browser/vr/elements/url_bar_texture.cc",
        "patchSetId": 2
      },
      "lineNbr": 348,
      "author": {
        "id": 1000805
      },
      "writtenOn": "2017-08-28T23:03:51Z",
      "side": 1,
      "message": "In general, they may not.  Maybe you can punt this for now but I\u0027d think you might need to embed formatting characters or teach the elider to measure correctly?  Matt Giuca is the expert here.",
      "revId": "ec6857bcb91613071db7dbf66906ae862dd348b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0d3f4953_0252200b",
        "filename": "chrome/browser/vr/elements/url_bar_texture.cc",
        "patchSetId": 2
      },
      "lineNbr": 359,
      "author": {
        "id": 1000805
      },
      "writtenOn": "2017-08-28T23:03:51Z",
      "side": 1,
      "message": "Nit: Remove entirely (also for all commented/ifdefed code below)",
      "revId": "ec6857bcb91613071db7dbf66906ae862dd348b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "626b3643_bb9ddc73",
        "filename": "components/url_formatter/elide_url.cc",
        "patchSetId": 2
      },
      "lineNbr": 23,
      "author": {
        "id": 1000805
      },
      "writtenOn": "2017-08-28T23:03:51Z",
      "side": 1,
      "message": "Remove nognchecks and address properly?\n\nNit: Move to correct spot in #include list",
      "revId": "ec6857bcb91613071db7dbf66906ae862dd348b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b67b3248_ccad0d48",
        "filename": "components/url_formatter/elide_url.cc",
        "patchSetId": 2
      },
      "lineNbr": 428,
      "author": {
        "id": 1000805
      },
      "writtenOn": "2017-08-28T23:03:51Z",
      "side": 1,
      "message": "Nit: Remove whole commented block",
      "revId": "ec6857bcb91613071db7dbf66906ae862dd348b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4576da97_118a4039",
        "filename": "components/url_formatter/elide_url.cc",
        "patchSetId": 2
      },
      "lineNbr": 432,
      "author": {
        "id": 1000805
      },
      "writtenOn": "2017-08-28T23:03:51Z",
      "side": 1,
      "message": "Nit: This comment is more \"what\" (restating the code) than \"why\".  Either remove, or change to e.g. \"We can only securely elide standard non-file URLs, since non-standard URLs may have an arbitrary format and file URLs have no real origin.\"",
      "revId": "ec6857bcb91613071db7dbf66906ae862dd348b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7f2bf2b7_8e736d95",
        "filename": "components/url_formatter/elide_url.cc",
        "patchSetId": 2
      },
      "lineNbr": 433,
      "author": {
        "id": 1000805
      },
      "writtenOn": "2017-08-28T23:03:51Z",
      "side": 1,
      "message": "Nit: {}",
      "revId": "ec6857bcb91613071db7dbf66906ae862dd348b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ef12ce8b_8011d12f",
        "filename": "components/url_formatter/elide_url.cc",
        "patchSetId": 2
      },
      "lineNbr": 441,
      "author": {
        "id": 1000805
      },
      "writtenOn": "2017-08-28T23:03:51Z",
      "side": 1,
      "message": "Nit: |path_elision| would be better, since we only use this as the trailing elision when it\u0027s to elide the full path.",
      "revId": "ec6857bcb91613071db7dbf66906ae862dd348b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a5509942_7540fd4b",
        "filename": "components/url_formatter/elide_url.cc",
        "patchSetId": 2
      },
      "lineNbr": 445,
      "author": {
        "id": 1000805
      },
      "writtenOn": "2017-08-28T23:03:51Z",
      "side": 1,
      "message": "Can standard, non-file URLs have no host?",
      "revId": "ec6857bcb91613071db7dbf66906ae862dd348b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a7ebe00a_9ef6fa88",
        "filename": "components/url_formatter/elide_url.cc",
        "patchSetId": 2
      },
      "lineNbr": 449,
      "author": {
        "id": 1000805
      },
      "writtenOn": "2017-08-28T23:03:51Z",
      "side": 1,
      "message": "Nit: Casting end() to size_t instead would be safer.",
      "revId": "ec6857bcb91613071db7dbf66906ae862dd348b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "02cd4fec_3e85d345",
        "filename": "components/url_formatter/elide_url.cc",
        "patchSetId": 2
      },
      "lineNbr": 452,
      "author": {
        "id": 1000805
      },
      "writtenOn": "2017-08-28T23:03:51Z",
      "side": 1,
      "message": "I have the vague sense that this block can be refactored, maybe with helper functions and/or a loop.  It seems like it\u0027s doing the same thing twice, just removing the scheme off the front the first time.  Within each part we use substr() to remove similar pieces twice.  Not quite sure how to rewrite but it seems like something briefer is possible.",
      "revId": "ec6857bcb91613071db7dbf66906ae862dd348b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0236f516_ca000886",
        "filename": "components/url_formatter/elide_url.cc",
        "patchSetId": 2
      },
      "lineNbr": 453,
      "author": {
        "id": 1000805
      },
      "writtenOn": "2017-08-28T23:03:51Z",
      "side": 1,
      "message": "Nit: \"shortest\" is a confusing name; maybe \"host_only\".",
      "revId": "ec6857bcb91613071db7dbf66906ae862dd348b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e7ec1f7c_9f6f48c1",
        "filename": "components/url_formatter/elide_url.cc",
        "patchSetId": 2
      },
      "lineNbr": 481,
      "author": {
        "id": 1000805
      },
      "writtenOn": "2017-08-28T23:03:51Z",
      "side": 1,
      "message": "Nit: Or just return this value directly.\n\nCan collapse into a ?:, but probably not in few lines due to the length of the condition.",
      "revId": "ec6857bcb91613071db7dbf66906ae862dd348b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "89820369_3be51bdc",
        "filename": "components/url_formatter/elide_url_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 538,
      "author": {
        "id": 1115963
      },
      "writtenOn": "2017-08-24T04:17:40Z",
      "side": 1,
      "message": "ASSERT_FALSE(strings.empty());",
      "range": {
        "startLine": 538,
        "startChar": 2,
        "endLine": 538,
        "endChar": 11
      },
      "revId": "ec6857bcb91613071db7dbf66906ae862dd348b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "916e2209_d4f19d76",
        "filename": "components/url_formatter/elide_url_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 542,
      "author": {
        "id": 1115963
      },
      "writtenOn": "2017-08-24T04:17:40Z",
      "side": 1,
      "message": "Why is this ssize_t? (I\u0027m not quite sure what that is but it looks like it\u0027s supposed to be a string length.)\n\nGetStringWidth returns an int. Write a comment that width is the width in pixels.",
      "range": {
        "startLine": 542,
        "startChar": 8,
        "endLine": 542,
        "endChar": 15
      },
      "revId": "ec6857bcb91613071db7dbf66906ae862dd348b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2db2d8ed_a205d5a9",
        "filename": "components/url_formatter/elide_url_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 542,
      "author": {
        "id": 1000805
      },
      "writtenOn": "2017-08-28T23:03:51Z",
      "side": 1,
      "message": "Yeah, ssize_t is basically banned, and this should be the same as the GetStringWidth() return type anyway.\n\nI would prefer naming like \"int width_px\" to writing a comment to note it is in px.",
      "parentUuid": "916e2209_d4f19d76",
      "range": {
        "startLine": 542,
        "startChar": 8,
        "endLine": 542,
        "endChar": 15
      },
      "revId": "ec6857bcb91613071db7dbf66906ae862dd348b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "98608936_2275ab57",
        "filename": "components/url_formatter/elide_url_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 548,
      "author": {
        "id": 1115963
      },
      "writtenOn": "2017-08-24T04:17:40Z",
      "side": 1,
      "message": "// Try eliding at all widths, one pixel at a time.",
      "revId": "ec6857bcb91613071db7dbf66906ae862dd348b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2a69bc9b_71db35b7",
        "filename": "components/url_formatter/elide_url_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 549,
      "author": {
        "id": 1115963
      },
      "writtenOn": "2017-08-24T04:17:40Z",
      "side": 1,
      "message": "This i check isn\u0027t necessary because it\u0027s always checked below whenever i is incremented.",
      "range": {
        "startLine": 549,
        "startChar": 50,
        "endLine": 549,
        "endChar": 68
      },
      "revId": "ec6857bcb91613071db7dbf66906ae862dd348b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bbe4e2df_2efdef9b",
        "filename": "components/url_formatter/elide_url_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 551,
      "author": {
        "id": 1115963
      },
      "writtenOn": "2017-08-24T04:17:40Z",
      "side": 1,
      "message": "I think (re the other CL) we\u0027ll want this for normal elision as well. Could you make the elider be a std::function parameter that gets passed into this function?",
      "range": {
        "startLine": 551,
        "startChar": 33,
        "endLine": 551,
        "endChar": 58
      },
      "revId": "ec6857bcb91613071db7dbf66906ae862dd348b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "084dd25e_70e00e0e",
        "filename": "components/url_formatter/elide_url_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 551,
      "author": {
        "id": 1000805
      },
      "writtenOn": "2017-08-28T23:03:51Z",
      "side": 1,
      "message": "Nit: Here and below, I would spell out the type, since the return type of the function is not spelled out in the function name.  With functions with outparams like this, it\u0027s not instantly obvious to the reader whether the return value is e.g. \"bool elided\" vs. \"std::string elided\", both of which would be sane.",
      "revId": "ec6857bcb91613071db7dbf66906ae862dd348b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f9acd631_843a8187",
        "filename": "components/url_formatter/elide_url_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 551,
      "author": {
        "id": 1000805
      },
      "writtenOn": "2017-08-28T23:03:51Z",
      "side": 1,
      "message": "std::function is banned (see https://chromium-cpp.appspot.com/#library-blacklist ); use base::Callback for this.",
      "parentUuid": "bbe4e2df_2efdef9b",
      "range": {
        "startLine": 551,
        "startChar": 33,
        "endLine": 551,
        "endChar": 58
      },
      "revId": "ec6857bcb91613071db7dbf66906ae862dd348b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b086fe15_19632653",
        "filename": "components/url_formatter/elide_url_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 553,
      "author": {
        "id": 1115963
      },
      "writtenOn": "2017-08-24T04:17:40Z",
      "side": 1,
      "message": "This code is quite hard to read / mentally prove correct.\n\nFor one thing, while it will *check* the first string it won\u0027t ever fail on it. If the initial elide fails to deliver the whole string, the error will be that it didn\u0027t match the *second* expected output.\n\nFor another, if it doesn\u0027t match the last string, it will just exit without checking.\n\nHow about the following algorithm (pseudocode):\n\n  width \u003d total_width;\n  elided \u003d \"\";\n\n  // Outer loop is once per string.\n  for (i \u003d 0; i \u003c strings.size(); ++i) {\n    // Inner loop shaves off pixels until the string changes.\n    do {\n      new_elided \u003d elide(url, width);\n      if (width \u003c\u003d 0)\n        break;\n\n      --width;\n    } while (new_elided \u003d\u003d elided);\n    elided \u003d new_elided;\n\n    EXPECT_EQ(strings[i], elided);\n  }",
      "revId": "ec6857bcb91613071db7dbf66906ae862dd348b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "74f8668e_1035a58b",
        "filename": "components/url_formatter/elide_url_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 553,
      "author": {
        "id": 1117479
      },
      "writtenOn": "2017-08-24T14:09:35Z",
      "side": 1,
      "message": "Matt, this function body was as WIP as everything else, so sorry for it\u0027s roughness.  Thanks for looking carefully.  :)  I\u0027m happy you like the approach, and I agree it\u0027s a good tool.\n\nI had a variant like yours, and I like it.  Going further down that road, we could also not require that the set of expected strings covers every case - instead, the test could simply ensure that elision passes through all provided strings, in order, while trimming pixels.  Then we could shrink the test input to only the edge cases.  Eg:\n\nhttps://www.google.com/lengthy_path\nhttps://www.google.com/lengthy_p...\nhttps://www.google.com/l...\nhttps://www.google.com/...\nwww.google.com/length...\nwww.google.com/l...\nwww.google.com/...\n...w.google.com/...\n....google.com/...\n...google.com/...\n...e.com/...\n.../...\n...\n\nThoughts?",
      "parentUuid": "b086fe15_19632653",
      "revId": "ec6857bcb91613071db7dbf66906ae862dd348b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2adaa304_02559156",
        "filename": "components/url_formatter/elide_url_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 553,
      "author": {
        "id": 1115963
      },
      "writtenOn": "2017-08-25T01:47:15Z",
      "side": 1,
      "message": "EDIT: Damn, I wrote this yesterday but forgot to mail it out. It\u0027s a little redundant based on what you wrote in the interim. Leaving for posterity...\n\n\u003d\u003d Yesterday\u0027s message \u003d\u003d\nAnother approach which might make things simpler and produce better error messages is two separate steps: 1. Without looking at the expected strings, iterate over all widths and produce a list of elided strings from biggest to smallest (only insert a new one when it changes, so you cut out duplicates). 2. Simply EXPECT_EQ the generated list with the expected list.\n\nI believe EXPECT_EQ has a special case on a list of strings where it shows which strings didn\u0027t match in a very readable way. I could be wrong though.\n\u003d\u003d End yesterday\u0027s \u003d\u003d\n\nSo I think my suggestion here is incompatible with yours (that we do not require covering every case). I think I like that better, since there is no need to test all letters in a long word, I agree. Let\u0027s go with that.",
      "parentUuid": "b086fe15_19632653",
      "revId": "ec6857bcb91613071db7dbf66906ae862dd348b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fd54e5d7_9a7feb4c",
        "filename": "components/url_formatter/elide_url_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 553,
      "author": {
        "id": 1117479
      },
      "writtenOn": "2017-08-25T14:06:30Z",
      "side": 1,
      "message": "I think your suggestion is compatible.  Either way, the test has to ratchet through all the pixel widths making strings, so we might as well keep them.  The verification step may then either match all strings, or a subset - it\u0027s a fairly minor difference.",
      "parentUuid": "2adaa304_02559156",
      "revId": "ec6857bcb91613071db7dbf66906ae862dd348b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d24b79ee_93a9426d",
        "filename": "components/url_formatter/elide_url_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 553,
      "author": {
        "id": 1000805
      },
      "writtenOn": "2017-08-28T23:03:51Z",
      "side": 1,
      "message": "I like the idea of \"iterate to generate an ordered list of the elided strings, make sure it\u0027s a supserset (in the same order) compared to the passed in list\".",
      "parentUuid": "fd54e5d7_9a7feb4c",
      "revId": "ec6857bcb91613071db7dbf66906ae862dd348b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dc973df0_4256c53a",
        "filename": "components/url_formatter/elide_url_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 589,
      "author": {
        "id": 1000805
      },
      "writtenOn": "2017-08-28T23:03:51Z",
      "side": 1,
      "message": "Nit: If this took a vector, it wouldn\u0027t need two args, and could use range-based for to iterate.",
      "revId": "ec6857bcb91613071db7dbf66906ae862dd348b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0d51a6eb_19d548a5",
        "filename": "components/url_formatter/elide_url_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 602,
      "author": {
        "id": 1115963
      },
      "writtenOn": "2017-08-24T04:17:40Z",
      "side": 1,
      "message": "As above, this could be a function parameter to share code with RunUrlTest.",
      "range": {
        "startLine": 602,
        "startChar": 33,
        "endLine": 602,
        "endChar": 58
      },
      "revId": "ec6857bcb91613071db7dbf66906ae862dd348b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eb52692c_a067f10e",
        "filename": "components/url_formatter/elide_url_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 612,
      "author": {
        "id": 1115963
      },
      "writtenOn": "2017-08-24T04:17:40Z",
      "side": 1,
      "message": "Could these all be progressive elision tests? There are only 5 different URLs tested here; it would be a bit longer but much better to move away from the weird elision-length-is-the-length-of-the-output style tests (and we can migrate the other tests in this file to progressive tests later).",
      "range": {
        "startLine": 612,
        "startChar": 2,
        "endLine": 612,
        "endChar": 10
      },
      "revId": "ec6857bcb91613071db7dbf66906ae862dd348b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1e1d5f17_3bb30004",
        "filename": "components/url_formatter/elide_url_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 612,
      "author": {
        "id": 1117479
      },
      "writtenOn": "2017-08-25T14:06:30Z",
      "side": 1,
      "message": "We could.  I don\u0027t think execution time is a big deal.  I\u0027ll come back to this when the actual elision code has progressed.",
      "parentUuid": "eb52692c_a067f10e",
      "range": {
        "startLine": 612,
        "startChar": 2,
        "endLine": 612,
        "endChar": 10
      },
      "revId": "ec6857bcb91613071db7dbf66906ae862dd348b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0b2da41e_c34abca3",
        "filename": "components/url_formatter/elide_url_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 612,
      "author": {
        "id": 1115963
      },
      "writtenOn": "2017-08-28T03:20:43Z",
      "side": 1,
      "message": "Execution time is somewhat important in tests... we want to make sure this isn\u0027t taking ~10s or more (for all ElideUrl tests combined) since testing time does slow down everyone\u0027s development. But yes, not a huge concern.",
      "parentUuid": "1e1d5f17_3bb30004",
      "range": {
        "startLine": 612,
        "startChar": 2,
        "endLine": 612,
        "endChar": 10
      },
      "revId": "ec6857bcb91613071db7dbf66906ae862dd348b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}