{
  "comments": [
    {
      "key": {
        "uuid": "498ac7fb_173669be",
        "filename": "content/network/url_loader.cc",
        "patchSetId": 4
      },
      "lineNbr": 19,
      "author": {
        "id": 1115881
      },
      "writtenOn": "2018-01-19T12:54:11Z",
      "side": 1,
      "message": "This is needed to check for redirections to kChromeUIScheme, which is not defined in url.",
      "revId": "491dcf34c872df6838063f7a6f4641da848db38b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "db8d13d2_2d7f04b6",
        "filename": "content/network/url_loader.cc",
        "patchSetId": 4
      },
      "lineNbr": 192,
      "author": {
        "id": 1115968
      },
      "writtenOn": "2018-01-19T17:30:20Z",
      "side": 1,
      "message": "The network service should not know what ChromeUIScheme is.  I think this blocking logic needs to be in Chrome.  (Note that the network stack, left to its own devices, will follow redirects, but fail the next request, since it doesn\u0027t have a handler, at least in the network service path).\n\nThe network service will currently block data and file redirects, since it has handlers for them (Even if the file path isn\u0027t generally used, it\u0027s still needed for PACs, currently, so it has a handler).  I\u0027m not sure if it has an about handler.",
      "range": {
        "startLine": 192,
        "startChar": 24,
        "endLine": 192,
        "endChar": 36
      },
      "revId": "491dcf34c872df6838063f7a6f4641da848db38b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d69c5c18_2b0e5f41",
        "filename": "content/network/url_loader.cc",
        "patchSetId": 4
      },
      "lineNbr": 192,
      "author": {
        "id": 1115881
      },
      "writtenOn": "2018-01-22T15:25:46Z",
      "side": 1,
      "message": "The issue with not having this logic in the network service is that I now have to replicate it three times:\n1) In the navigation code.\n2) In the sub-resource load code.\n3) In the downloads code.\n\nIf we want to add other schemes where a redirection of a network request would fail, we\u0027ll have to add it in three different places. There\u0027s a high chance that we forget it and it goes out of date (not to mention that each component has to make sure that the check is properly done in each of the code paths that interacts with the network service).\n\nI understand that hard-coding it is an issue. Could we have a system where the embedder gives the network service a list of schemes on which to block the redirects? This way users of the network service don\u0027t have to do the checks themselves, we keep the blocking logic in one place while also not needing to know about what a particular scheme is.",
      "parentUuid": "db8d13d2_2d7f04b6",
      "range": {
        "startLine": 192,
        "startChar": 24,
        "endLine": 192,
        "endChar": 36
      },
      "revId": "491dcf34c872df6838063f7a6f4641da848db38b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9330c4f0_9295748a",
        "filename": "content/network/url_loader.cc",
        "patchSetId": 4
      },
      "lineNbr": 192,
      "author": {
        "id": 1115968
      },
      "writtenOn": "2018-01-22T15:29:46Z",
      "side": 1,
      "message": "I\u0027m completely fine with passing a list.\n\nHowever, I\u0027m not sure that argument holds - there are a lot of things that need to be on all three paths, so it seems like we\u0027re going to need to have shared consumer-side code for all three of those paths, anyways, so we\u0027ll presumably need some shared consumer-side infrastructure, regardless.",
      "parentUuid": "d69c5c18_2b0e5f41",
      "range": {
        "startLine": 192,
        "startChar": 24,
        "endLine": 192,
        "endChar": 36
      },
      "revId": "491dcf34c872df6838063f7a6f4641da848db38b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}