{
  "comments": [
    {
      "key": {
        "uuid": "997ff451_de88376a",
        "filename": "third_party/WebKit/Source/platform/heap/HeapPage.cpp",
        "patchSetId": 17
      },
      "lineNbr": 716,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2017-11-10T02:12:42Z",
      "side": 1,
      "message": "Do we really need to clear the bitmap here?\n\nEven if we do nothing, I guess it will \"just work\". We could remove SetBit at line 753.\n\nThe same comment for other Clear \u003d\u003e SetBit patterns in this file.",
      "revId": "8181bf71935def062a2ad9b15002e075a91fa5f6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e2418340_80a2a11d",
        "filename": "third_party/WebKit/Source/platform/heap/HeapPage.cpp",
        "patchSetId": 17
      },
      "lineNbr": 716,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2017-11-10T12:48:55Z",
      "side": 1,
      "message": "We need to clear the bitmap because free list entries are coalesced and the bitmap has to stay in sync with actual object iteration on the page.\n\nIf we would not clear here and remove the SetBit, then the bits for FreeListEntries get out of sync.\n\nIn general we can either\n(a) keep only bits for live objects, which requires clearing (of ranges) when adding stuff to the free list\n(b) keep bits for *all* objects, this requires rebuilding during operations sweep, compaction, and coalescing.",
      "parentUuid": "997ff451_de88376a",
      "revId": "8181bf71935def062a2ad9b15002e075a91fa5f6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "60eff6e3_7ebf6463",
        "filename": "third_party/WebKit/Source/platform/heap/HeapPage.cpp",
        "patchSetId": 17
      },
      "lineNbr": 716,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2017-11-10T14:42:54Z",
      "side": 1,
      "message": "Thanks for the clarification, makes sense!\n\nMy preference is (b) because it (should be safe but) is not really nice to let FindHeader(address) to search objects exceeding the boundary of the object that had existed on the address.",
      "parentUuid": "e2418340_80a2a11d",
      "revId": "8181bf71935def062a2ad9b15002e075a91fa5f6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4eea9daa_7ba8bd0f",
        "filename": "third_party/WebKit/Source/platform/heap/HeapPage.cpp",
        "patchSetId": 17
      },
      "lineNbr": 716,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2017-11-21T18:52:42Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "60eff6e3_7ebf6463",
      "revId": "8181bf71935def062a2ad9b15002e075a91fa5f6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "07b7b068_e09999f4",
        "filename": "third_party/WebKit/Source/platform/heap/HeapPage.cpp",
        "patchSetId": 17
      },
      "lineNbr": 785,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2017-11-10T02:12:42Z",
      "side": 1,
      "message": "I\u0027d prefer keeping the bit for PromptlyFreed objects.\n\nOtherwise, FindHeader(pointer_to_promptly_freed_object) will search an object head exceeding the boundary of a promptly freed object. This would be safe but not nice.",
      "revId": "8181bf71935def062a2ad9b15002e075a91fa5f6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a60b3fc6_15e28720",
        "filename": "third_party/WebKit/Source/platform/heap/HeapPage.cpp",
        "patchSetId": 17
      },
      "lineNbr": 785,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2017-11-10T12:48:55Z",
      "side": 1,
      "message": "Done. I think we have to keep it as promptly freed objects are still part of the payload and not yet in a free list.",
      "parentUuid": "07b7b068_e09999f4",
      "revId": "8181bf71935def062a2ad9b15002e075a91fa5f6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ab050e26_2915f0fc",
        "filename": "third_party/WebKit/Source/platform/heap/HeapPage.cpp",
        "patchSetId": 17
      },
      "lineNbr": 1432,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2017-11-10T02:12:42Z",
      "side": 1,
      "message": "Add VerifyObjectStartBitmapIsConsistentWithPayload() before calling Clear().",
      "revId": "8181bf71935def062a2ad9b15002e075a91fa5f6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "58d2f5ad_92c13498",
        "filename": "third_party/WebKit/Source/platform/heap/HeapPage.cpp",
        "patchSetId": 17
      },
      "lineNbr": 1432,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2017-11-10T12:48:55Z",
      "side": 1,
      "message": "As far as I can see, we cannot verify during compaction as the page is not completely iterable due to the compaction_frontier.\n\nThat\u0027s why the verify calls are on the caller level for this operation.",
      "parentUuid": "ab050e26_2915f0fc",
      "revId": "8181bf71935def062a2ad9b15002e075a91fa5f6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e9c3b52d_5c6e9350",
        "filename": "third_party/WebKit/Source/platform/heap/HeapPage.cpp",
        "patchSetId": 17
      },
      "lineNbr": 1432,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2017-11-21T18:52:42Z",
      "side": 1,
      "message": "(Marking as resolved.)",
      "parentUuid": "58d2f5ad_92c13498",
      "revId": "8181bf71935def062a2ad9b15002e075a91fa5f6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "27334862_9a6270bb",
        "filename": "third_party/WebKit/Source/platform/heap/HeapPage.cpp",
        "patchSetId": 17
      },
      "lineNbr": 1545,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2017-11-10T02:12:42Z",
      "side": 1,
      "message": "Add VerifyObjectStartBitmapIsConsistentWithPayload() before calling Clear().",
      "revId": "8181bf71935def062a2ad9b15002e075a91fa5f6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cf8c69bf_24d55d17",
        "filename": "third_party/WebKit/Source/platform/heap/HeapPage.cpp",
        "patchSetId": 17
      },
      "lineNbr": 1545,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2017-11-10T12:48:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "27334862_9a6270bb",
      "revId": "8181bf71935def062a2ad9b15002e075a91fa5f6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c5b89898_0aa735c8",
        "filename": "third_party/WebKit/Source/platform/heap/HeapPage.cpp",
        "patchSetId": 17
      },
      "lineNbr": 1572,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2017-11-10T02:12:42Z",
      "side": 1,
      "message": "static_cast\u003cNormalPage*\u003e(BasePage::FromHeader(header)) should be equal to |this|.",
      "revId": "8181bf71935def062a2ad9b15002e075a91fa5f6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a97dc47d_a3148cbe",
        "filename": "third_party/WebKit/Source/platform/heap/HeapPage.cpp",
        "patchSetId": 17
      },
      "lineNbr": 1572,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2017-11-10T12:48:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c5b89898_0aa735c8",
      "revId": "8181bf71935def062a2ad9b15002e075a91fa5f6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ffa82c9e_9f5defa1",
        "filename": "third_party/WebKit/Source/platform/heap/HeapPage.cpp",
        "patchSetId": 17
      },
      "lineNbr": 1612,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2017-11-10T02:12:42Z",
      "side": 1,
      "message": "Also CheckHeader() ?",
      "revId": "8181bf71935def062a2ad9b15002e075a91fa5f6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "612aa944_31fbb7a9",
        "filename": "third_party/WebKit/Source/platform/heap/HeapPage.cpp",
        "patchSetId": 17
      },
      "lineNbr": 1612,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2017-11-10T12:48:55Z",
      "side": 1,
      "message": "Should be IsValidOrZapped()",
      "parentUuid": "ffa82c9e_9f5defa1",
      "revId": "8181bf71935def062a2ad9b15002e075a91fa5f6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c875254a_042acaf3",
        "filename": "third_party/WebKit/Source/platform/heap/HeapPage.cpp",
        "patchSetId": 17
      },
      "lineNbr": 1646,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2017-11-10T02:12:42Z",
      "side": 1,
      "message": "It would be heavy to call Verify at each call of NormalPage::FindHeaderFromAddress() because it is called for all addresses on the stack. Move the verification to the beginning of CollectGarbage().",
      "revId": "8181bf71935def062a2ad9b15002e075a91fa5f6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "13683d4b_26f37682",
        "filename": "third_party/WebKit/Source/platform/heap/HeapPage.cpp",
        "patchSetId": 17
      },
      "lineNbr": 1646,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2017-11-21T18:52:42Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c875254a_042acaf3",
      "revId": "8181bf71935def062a2ad9b15002e075a91fa5f6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "54567d02_fa549a96",
        "filename": "third_party/WebKit/Source/platform/heap/HeapPage.h",
        "patchSetId": 17
      },
      "lineNbr": 77,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2017-11-10T02:12:42Z",
      "side": 1,
      "message": "Remove this?",
      "revId": "8181bf71935def062a2ad9b15002e075a91fa5f6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "24837c28_8ccf86ba",
        "filename": "third_party/WebKit/Source/platform/heap/HeapPage.h",
        "patchSetId": 17
      },
      "lineNbr": 77,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2017-11-10T12:48:55Z",
      "side": 1,
      "message": "Done. Something got mixed up in the merge here.",
      "parentUuid": "54567d02_fa549a96",
      "revId": "8181bf71935def062a2ad9b15002e075a91fa5f6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f6c2c11f_f004f69d",
        "filename": "third_party/WebKit/Source/platform/heap/HeapPage.h",
        "patchSetId": 17
      },
      "lineNbr": 462,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2017-11-10T02:12:42Z",
      "side": 1,
      "message": "Unused?",
      "revId": "8181bf71935def062a2ad9b15002e075a91fa5f6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c02bb963_a8dc8fdc",
        "filename": "third_party/WebKit/Source/platform/heap/HeapPage.h",
        "patchSetId": 17
      },
      "lineNbr": 462,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2017-11-10T12:48:55Z",
      "side": 1,
      "message": "Used for unit tests.",
      "parentUuid": "f6c2c11f_f004f69d",
      "revId": "8181bf71935def062a2ad9b15002e075a91fa5f6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "754d3c09_95551a0a",
        "filename": "third_party/WebKit/Source/platform/heap/HeapPage.h",
        "patchSetId": 17
      },
      "lineNbr": 465,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2017-11-10T02:12:42Z",
      "side": 1,
      "message": "Unused?",
      "revId": "8181bf71935def062a2ad9b15002e075a91fa5f6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8618f2c8_29d45af7",
        "filename": "third_party/WebKit/Source/platform/heap/HeapPage.h",
        "patchSetId": 17
      },
      "lineNbr": 465,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2017-11-10T12:48:55Z",
      "side": 1,
      "message": "Used for unit tests.",
      "parentUuid": "754d3c09_95551a0a",
      "revId": "8181bf71935def062a2ad9b15002e075a91fa5f6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c8da859a_1bbb581f",
        "filename": "third_party/WebKit/Source/platform/heap/HeapPage.h",
        "patchSetId": 17
      },
      "lineNbr": 502,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2017-11-10T02:12:42Z",
      "side": 1,
      "message": "offset_ \u003d\u003e payload_start_",
      "revId": "8181bf71935def062a2ad9b15002e075a91fa5f6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e25c8e87_b3dd8f23",
        "filename": "third_party/WebKit/Source/platform/heap/HeapPage.h",
        "patchSetId": 17
      },
      "lineNbr": 502,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2017-11-10T12:48:55Z",
      "side": 1,
      "message": "The bitmap does not know about pages, or payloads. The offset_ is just a general base for all addresses in the bitmap.",
      "parentUuid": "c8da859a_1bbb581f",
      "revId": "8181bf71935def062a2ad9b15002e075a91fa5f6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bb266153_9b643faf",
        "filename": "third_party/WebKit/Source/platform/heap/HeapPage.h",
        "patchSetId": 17
      },
      "lineNbr": 1150,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2017-11-10T02:12:42Z",
      "side": 1,
      "message": "Can you add a DCHECK to check that object_address is pointing to a valid object header?",
      "revId": "8181bf71935def062a2ad9b15002e075a91fa5f6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a8d22cb8_d04a4d37",
        "filename": "third_party/WebKit/Source/platform/heap/HeapPage.h",
        "patchSetId": 17
      },
      "lineNbr": 1150,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2017-11-10T12:48:55Z",
      "side": 1,
      "message": "The bitmap does not know about objects, headers, or pages. That\u0027s the responsibility of the Verify call on NormalPage.",
      "parentUuid": "bb266153_9b643faf",
      "revId": "8181bf71935def062a2ad9b15002e075a91fa5f6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}