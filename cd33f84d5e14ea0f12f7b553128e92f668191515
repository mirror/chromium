{
  "comments": [
    {
      "key": {
        "uuid": "dfc7b17a_4229df5c",
        "filename": "ios/chrome/browser/browser_state/browser_state_services_egtest.mm",
        "patchSetId": 4
      },
      "lineNbr": 32,
      "author": {
        "id": 1116027
      },
      "writtenOn": "2017-11-20T10:57:38Z",
      "side": 1,
      "message": "I don\u0027t really understand why there is a need to pass the identity_manager ownership, but not the stack local variable.\n\nAs there is a WaitForCallback(), the only case when the stack local IdentityManagerPtr can have a shorter lifetime than the callback is when the condition timeout. But if this happen, then the -testConnectionToIdentityService method will return, and the local variable will be destroyed, thus get_primary_account_info_callback_called_flag will be invalid and dereferencing it in the callback will be undefined behavior.\n\nSo, either the ownership of the bool should also be passed to this function, or more simply, just use the fact that the manager is stack local and will be destroyed after the WaitForCallback timeout. If this happens, then we\u0027ll destroy the mojom object. I don\u0027t know whether the mojo binding support an object being destroyed while a method is pending on it (but given then methods are asynchronous, I would hope this is the case).\n\nSo, my recommendation are to either:\n-   remove identity_manager parameter, or\n-   convert get_primary_account_info_callback_called_flag to std::unique_ptr\u003cbool\u003e",
      "range": {
        "startLine": 32,
        "startChar": 10,
        "endLine": 32,
        "endChar": 55
      },
      "revId": "cd33f84d5e14ea0f12f7b553128e92f668191515",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ad3bf020_221fc901",
        "filename": "ios/chrome/browser/browser_state/browser_state_services_egtest.mm",
        "patchSetId": 4
      },
      "lineNbr": 32,
      "author": {
        "id": 1113941
      },
      "writtenOn": "2017-11-23T12:10:07Z",
      "side": 1,
      "message": "You are 100% correct. This is a pattern that\u0027s used when the local variable holding the pipe handle would otherwise fall out of scope before the callback was fired from the other side, but that is not the case here. Fixed. (Mojo bindings definitely support having a pipe closed while a method call is outstanding, btw).",
      "parentUuid": "dfc7b17a_4229df5c",
      "range": {
        "startLine": 32,
        "startChar": 10,
        "endLine": 32,
        "endChar": 55
      },
      "revId": "cd33f84d5e14ea0f12f7b553128e92f668191515",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "98f71d32_e5ded42c",
        "filename": "ios/chrome/browser/browser_state/chrome_browser_state_impl.cc",
        "patchSetId": 4
      },
      "lineNbr": 184,
      "author": {
        "id": 1116027
      },
      "writtenOn": "2017-11-20T10:57:38Z",
      "side": 1,
      "message": "Is this the pattern that is going to be used for all services? Add a method to create the instance to chrome_browser_state_impl.cc? Isn\u0027t this is a step back from KeyedServices?\n\nCan we at least move this to a free function in another file and add a TODO so that we refactor this to avoid having ChromeBrowserStateImpl depends on all services?",
      "revId": "cd33f84d5e14ea0f12f7b553128e92f668191515",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1ff0a15a_9151e39e",
        "filename": "ios/chrome/browser/browser_state/chrome_browser_state_impl.cc",
        "patchSetId": 4
      },
      "lineNbr": 184,
      "author": {
        "id": 1113941
      },
      "writtenOn": "2017-11-23T12:10:07Z",
      "side": 1,
      "message": "This is a great question. You can think of this stage as being a rough analogue of ChromeBrowserMainExtraPartsProfiles::EnsureBrowserContextKeyedServicesBuilt(). *Something* needs to register all the services that are embedded in the chrome_browser service. We could certainly add a generic interface to ChromeBrowserState that adds a registration function; that interface would have to be invoked before this call to BrowserState::RegisterServices() is made. However, that just pushes the problem somewhere else: What is going to invoke that interface for e.g. the Identity Service to ensure that the Identity Service is registered with this ChromeBrowserState?\n\nAdded bug and TODO to track this issue.",
      "parentUuid": "98f71d32_e5ded42c",
      "revId": "cd33f84d5e14ea0f12f7b553128e92f668191515",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fdedc7ee_3040b991",
        "filename": "ios/chrome/browser/browser_state/chrome_browser_state_impl.cc",
        "patchSetId": 4
      },
      "lineNbr": 184,
      "author": {
        "id": 1116027
      },
      "writtenOn": "2017-11-23T14:31:20Z",
      "side": 1,
      "message": "I think the chrome/ way is better.\n\nIMO, it should be the responsibility of ios/chrome/app code to ensure that all the global objects that need to be registered are, and not the responsibility of ChromeBrowserStateImpl.\n\nWe already have a free function EnsureBrowserStateKeyedServiceFactoriesBuilt on iOS (in ios/chrome/browser/browser_state/browser_state_keyed_service_factories.h). Maybe we could add as a first step add a function there, and then invoke it from ChromeBrowserStateImpl as a first step.\n\nMarking as Resolved as I think this should be addressed once we have more than one service to register.",
      "parentUuid": "1ff0a15a_9151e39e",
      "revId": "cd33f84d5e14ea0f12f7b553128e92f668191515",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1cda4508_eb74012e",
        "filename": "ios/chrome/browser/browser_state/chrome_browser_state_impl.cc",
        "patchSetId": 4
      },
      "lineNbr": 259,
      "author": {
        "id": 1116027
      },
      "writtenOn": "2017-11-20T10:57:38Z",
      "side": 1,
      "message": "This does not have to be a member method, instead it could be a free function taking an ios::ChromeBrowserState*.",
      "revId": "cd33f84d5e14ea0f12f7b553128e92f668191515",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4a3f0687_1c4495b4",
        "filename": "ios/chrome/browser/chrome_browser_manifest_overlay.json",
        "patchSetId": 4
      },
      "lineNbr": 7,
      "author": {
        "id": 1116053
      },
      "writtenOn": "2017-11-17T17:20:40Z",
      "side": 1,
      "message": "Is there a corresponding \"provides\" clause somewhere to go with this \"requires\" clause?\n\nCan you give me a quick overview of what identity service does?\n\nThanks!",
      "range": {
        "startLine": 7,
        "startChar": 9,
        "endLine": 7,
        "endChar": 17
      },
      "revId": "cd33f84d5e14ea0f12f7b553128e92f668191515",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6e88f31d_a0837c34",
        "filename": "ios/chrome/browser/chrome_browser_manifest_overlay.json",
        "patchSetId": 4
      },
      "lineNbr": 7,
      "author": {
        "id": 1113941
      },
      "writtenOn": "2017-11-20T10:14:34Z",
      "side": 1,
      "message": "The provides clause is here: https://cs.chromium.org/chromium/src/services/identity/manifest.json?q\u003dservices/identity/man\u0026sq\u003dpackage:chromium\u0026l\u003d1\n\nThe Identity Service gives access to the user\u0027s Google identity. It is the long-term replacement for //components/signin (which //ios/chrome currently interacts with). This change is similar to the existing usage of the Identity Service by //chrome/browser.",
      "parentUuid": "4a3f0687_1c4495b4",
      "range": {
        "startLine": 7,
        "startChar": 9,
        "endLine": 7,
        "endChar": 17
      },
      "revId": "cd33f84d5e14ea0f12f7b553128e92f668191515",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}