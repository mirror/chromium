{
  "comments": [
    {
      "key": {
        "uuid": "76cf2f26_7dd80401",
        "filename": "cc/paint/paint_op_buffer_fuzzer.cc",
        "patchSetId": 3
      },
      "lineNbr": 25,
      "author": {
        "id": 1000770
      },
      "writtenOn": "2017-12-04T18:06:10Z",
      "side": 1,
      "message": "I\u0027m wondering what the right way to handle this is. The reason this is here is that creating the TestContextProvider indirectly checks whether a command flag has been passed indicating low memory mode. If the process\u0027s base::CommandLine hasn\u0027t been initialized then the query causes a crash. I\u0027m guessing this isn\u0027t the right place to do this but wasn\u0027t sure where might be.",
      "range": {
        "startLine": 21,
        "startChar": 0,
        "endLine": 25,
        "endChar": 6
      },
      "revId": "04957f3153505ae67153ae9b7ccd382c2df62857",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4e89f949_cf47d436",
        "filename": "cc/paint/paint_op_buffer_fuzzer.cc",
        "patchSetId": 3
      },
      "lineNbr": 25,
      "author": {
        "id": 1000887
      },
      "writtenOn": "2017-12-05T15:48:59Z",
      "side": 1,
      "message": "Can we instead make TestContextProvider stop reading the command line?",
      "parentUuid": "76cf2f26_7dd80401",
      "range": {
        "startLine": 21,
        "startChar": 0,
        "endLine": 25,
        "endChar": 6
      },
      "revId": "04957f3153505ae67153ae9b7ccd382c2df62857",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f4151618_263f8df2",
        "filename": "cc/paint/paint_op_buffer_fuzzer.cc",
        "patchSetId": 3
      },
      "lineNbr": 25,
      "author": {
        "id": 1000770
      },
      "writtenOn": "2017-12-05T16:03:25Z",
      "side": 1,
      "message": "It\u0027s somewhat indirect.  TestContextProvider::GrContext() on its first invocation creates a  skia_bindings::GrContextForGLES2Interface(). GrContextForGLES2Interface\u0027s constructor calls base::SysInfo::AmountOfPhysicalMemory() which in turn checks base::CommandLine::ForCurrentProcess()-\u003eHasSwitch(switches::kEnableLowEndDeviceMode).\n\nWould it be appropriate to make base::SysInfo::AmountOfPhysicalMemory() check base::CommandLine::InitializedForCurrentProcess() before calling HasSwitch()?",
      "parentUuid": "4e89f949_cf47d436",
      "range": {
        "startLine": 21,
        "startChar": 0,
        "endLine": 25,
        "endChar": 6
      },
      "revId": "04957f3153505ae67153ae9b7ccd382c2df62857",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9b719777_5a9680cd",
        "filename": "cc/paint/paint_op_buffer_fuzzer.cc",
        "patchSetId": 3
      },
      "lineNbr": 25,
      "author": {
        "id": 1000887
      },
      "writtenOn": "2017-12-05T16:13:44Z",
      "side": 1,
      "message": "Can we give a way for tests to set the low memory/amount of memory instead of having GrContextForGLES2Interface call base?\n\nWhat if it takes the amount of memory as an argument, instead of calling base itself? Then TestContextProvider can make something up?",
      "parentUuid": "f4151618_263f8df2",
      "range": {
        "startLine": 21,
        "startChar": 0,
        "endLine": 25,
        "endChar": 6
      },
      "revId": "04957f3153505ae67153ae9b7ccd382c2df62857",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2bc22bbc_a634c9cd",
        "filename": "cc/paint/paint_op_buffer_fuzzer.cc",
        "patchSetId": 3
      },
      "lineNbr": 25,
      "author": {
        "id": 1000770
      },
      "writtenOn": "2017-12-05T19:57:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9b719777_5a9680cd",
      "range": {
        "startLine": 21,
        "startChar": 0,
        "endLine": 25,
        "endChar": 6
      },
      "revId": "04957f3153505ae67153ae9b7ccd382c2df62857",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}