# Copyright 2014 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

source_set("system") {
  sources = [
    "../../platform/native/system_thunks.cc",
    "../../platform/native/system_thunks.h",
    "buffer.h",
    "core.h",
    "data_pipe.h",
    "functions.h",
    "macros.h",
    "message_pipe.h",
    "system_export.h",
    "types.h",
  ]
  defines = [ "MOJO_SYSTEM_IMPLEMENTATION" ]

  # The GYP target analogous to this one builds this code into a
  # static library.  When building for Android, both the GYP and GN
  # builds add --exclude-libs=ALL globally, which means that all
  # symbols in static libraries are excluded from export.  That's a
  # problem, as code outside this target needs to be able to call
  # MojoSetSystemThunks(). Therefore, the GYP target needs to specifiy
  # that all dependent targets remove that link flag. Since GN uses a
  # source_set here, this flag change is not needed.
}

# In an is_component_build build, everything can link against //mojo/system
# because it is built as a shared library. However, in a static build,
# //mojo/system is linked into an executable (e.g., mojo_shell), and must be
# injected into other shared libraries (i.e., Mojo Apps) that need the mojo
# system API.
#
# For component targets, add //mojo/public/c/system:for_component to your deps
# section.
#
# For shared_library targets (e.g., a Mojo App), add
# //mojo/public/c/system:for_shared_library to your deps

group("for_shared_library") {
  if (is_component_build) {
    deps = [ "//mojo/system" ]
  } else {
    deps = [ ":system" ]
  }
}

group("for_component") {
  if (is_component_build) {
    deps = [ "//mojo/system" ]
  }
}
