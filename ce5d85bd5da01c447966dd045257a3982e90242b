{
  "comments": [
    {
      "key": {
        "uuid": "c26221da_45668214",
        "filename": "chrome/browser/io_thread.cc",
        "patchSetId": 5
      },
      "lineNbr": 826,
      "author": {
        "id": 1115968
      },
      "writtenOn": "2017-11-15T16:35:17Z",
      "side": 1,
      "message": "BUG:  With the above change, this is now nullptr.\n\nWe\u0027ll probably have to move creating and setting the ct_tree_tracker to some point after the system_network_context is created in this method.\n\nThe fact that no test caught this seems like a problem.  Add a test?",
      "range": {
        "startLine": 826,
        "startChar": 15,
        "endLine": 826,
        "endChar": 26
      },
      "revId": "ce5d85bd5da01c447966dd045257a3982e90242b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b58139db_c54dd75f",
        "filename": "chrome/browser/io_thread.cc",
        "patchSetId": 5
      },
      "lineNbr": 826,
      "author": {
        "id": 1000193
      },
      "writtenOn": "2017-11-15T17:37:09Z",
      "side": 1,
      "message": "Doesn\u0027t it also imply a circular dependency now?\n\nThe SystemURLRequestContext\u0027s ct_verifier depends on ct_tree_tracker, which depends on the SystemURLRequestContext (by virtue of of host_resolver)\n\n+1 to moving this later, as that would also resolve that dependency graph issue",
      "parentUuid": "c26221da_45668214",
      "range": {
        "startLine": 826,
        "startChar": 15,
        "endLine": 826,
        "endChar": 26
      },
      "revId": "ce5d85bd5da01c447966dd045257a3982e90242b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e4d682bc_ffe36154",
        "filename": "components/certificate_transparency/single_tree_tracker.cc",
        "patchSetId": 5
      },
      "lineNbr": 281,
      "author": {
        "id": 1130929
      },
      "writtenOn": "2017-11-15T11:52:40Z",
      "side": 1,
      "message": "FYI, this code assumes that the cache entries will have address_family \u003d\u003d ADDRESS_FAMILY_UNSPECIFIED and host_resolver_flags \u003d\u003d 0. I\u0027m not sure for what proportion of users that assumption doesn\u0027t hold. Any idea? I could work around this by adding a Lookup(hostname) method to HostCache that ignores the address family and flags, if necessary.",
      "range": {
        "startLine": 280,
        "startChar": 2,
        "endLine": 281,
        "endChar": 45
      },
      "revId": "ce5d85bd5da01c447966dd045257a3982e90242b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1067a153_23146e00",
        "filename": "components/certificate_transparency/single_tree_tracker.cc",
        "patchSetId": 5
      },
      "lineNbr": 281,
      "author": {
        "id": 1115968
      },
      "writtenOn": "2017-11-15T16:35:17Z",
      "side": 1,
      "message": "If you\u0027re using a SOCKS4 proxy, always, but in general, I\u0027m not sure.\n\nIf you look are our resolution time histograms (https://uma.googleplex.com/timeline_v2?sid\u003d36fa4a17db310431882a6a4f73b3f163)...It actually looks like 75% are IPv4, but that can\u0027t be right...Can it?  It does ignore \"speculative requests\", so I suppose that could be it.",
      "parentUuid": "e4d682bc_ffe36154",
      "range": {
        "startLine": 280,
        "startChar": 2,
        "endLine": 281,
        "endChar": 45
      },
      "revId": "ce5d85bd5da01c447966dd045257a3982e90242b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "df80928c_d2e75d88",
        "filename": "components/certificate_transparency/single_tree_tracker.cc",
        "patchSetId": 5
      },
      "lineNbr": 281,
      "author": {
        "id": 1113149
      },
      "writtenOn": "2017-11-15T16:50:51Z",
      "side": 1,
      "message": "The two common combinations are that one and ADDRESS_FAMILY_IPV4/HOST_RESOLVER_DEFAULT_FAMILY_SET_DUE_TO_NO_IPV6. So you could either do what you suggested, or just check those two combinations.",
      "parentUuid": "e4d682bc_ffe36154",
      "range": {
        "startLine": 280,
        "startChar": 2,
        "endLine": 281,
        "endChar": 45
      },
      "revId": "ce5d85bd5da01c447966dd045257a3982e90242b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0066e7b6_3ee4ddd3",
        "filename": "components/certificate_transparency/single_tree_tracker.h",
        "patchSetId": 5
      },
      "lineNbr": 85,
      "author": {
        "id": 1000193
      },
      "writtenOn": "2017-11-15T17:37:09Z",
      "side": 1,
      "message": "Document",
      "revId": "ce5d85bd5da01c447966dd045257a3982e90242b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "74223c42_313e5cce",
        "filename": "components/certificate_transparency/tree_state_tracker.h",
        "patchSetId": 5
      },
      "lineNbr": 49,
      "author": {
        "id": 1000193
      },
      "writtenOn": "2017-11-15T17:37:09Z",
      "side": 1,
      "message": "document",
      "revId": "ce5d85bd5da01c447966dd045257a3982e90242b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fda6dbe6_6e702c80",
        "filename": "components/certificate_transparency/tree_state_tracker_unittest.cc",
        "patchSetId": 5
      },
      "lineNbr": 100,
      "author": {
        "id": 1000193
      },
      "writtenOn": "2017-11-15T17:37:09Z",
      "side": 1,
      "message": "naming",
      "revId": "ce5d85bd5da01c447966dd045257a3982e90242b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1e639b6e_69b81ea0",
        "filename": "net/cert/ct_verifier.h",
        "patchSetId": 5
      },
      "lineNbr": 50,
      "author": {
        "id": 1000193
      },
      "writtenOn": "2017-11-15T17:37:09Z",
      "side": 1,
      "message": "document",
      "revId": "ce5d85bd5da01c447966dd045257a3982e90242b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f34c739e_218ddeaf",
        "filename": "net/dns/host_resolver.cc",
        "patchSetId": 5
      },
      "lineNbr": 125,
      "author": {
        "id": 1113149
      },
      "writtenOn": "2017-11-15T16:50:51Z",
      "side": 1,
      "message": "This implementation really belongs in the HostResolverImpl, not the HostResolver. Sorry, I know that\u0027s more work.\n\nAlso, I\u0027d like this API better if it got the source and staleness without the whole entry, similar to what ResolveStaleFromCache() does, but you\u0027re welcome to ignore that suggestion.",
      "revId": "ce5d85bd5da01c447966dd045257a3982e90242b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}