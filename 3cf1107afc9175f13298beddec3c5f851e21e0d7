{
  "comments": [
    {
      "key": {
        "uuid": "c05bb957_84667731",
        "filename": "content/browser/service_worker/service_worker_registration_handle.cc",
        "patchSetId": 4
      },
      "lineNbr": 128,
      "author": {
        "id": 1000128
      },
      "writtenOn": "2017-10-02T06:38:59Z",
      "side": 1,
      "message": "don\u0027t think we need that comment",
      "revId": "3cf1107afc9175f13298beddec3c5f851e21e0d7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "093b1fb4_caa32d39",
        "filename": "content/browser/service_worker/service_worker_registration_handle.cc",
        "patchSetId": 4
      },
      "lineNbr": 128,
      "author": {
        "id": 1161621
      },
      "writtenOn": "2017-10-08T10:04:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c05bb957_84667731",
      "revId": "3cf1107afc9175f13298beddec3c5f851e21e0d7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b819d87e_5d25b4aa",
        "filename": "content/browser/service_worker/service_worker_registration_handle.cc",
        "patchSetId": 4
      },
      "lineNbr": 182,
      "author": {
        "id": 1000128
      },
      "writtenOn": "2017-10-02T06:38:59Z",
      "side": 1,
      "message": "maintain same order as .h file",
      "revId": "3cf1107afc9175f13298beddec3c5f851e21e0d7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d208551c_bab27937",
        "filename": "content/browser/service_worker/service_worker_registration_handle.cc",
        "patchSetId": 4
      },
      "lineNbr": 182,
      "author": {
        "id": 1161621
      },
      "writtenOn": "2017-10-08T10:04:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b819d87e_5d25b4aa",
      "revId": "3cf1107afc9175f13298beddec3c5f851e21e0d7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cc6dd261_f9b257ee",
        "filename": "content/browser/service_worker/service_worker_registration_handle.h",
        "patchSetId": 4
      },
      "lineNbr": 67,
      "author": {
        "id": 1000128
      },
      "writtenOn": "2017-10-02T06:38:59Z",
      "side": 1,
      "message": "// Called back from ServiceWorkerContextCore when an update is complete.",
      "revId": "3cf1107afc9175f13298beddec3c5f851e21e0d7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "53033bbe_29171331",
        "filename": "content/browser/service_worker/service_worker_registration_handle.h",
        "patchSetId": 4
      },
      "lineNbr": 67,
      "author": {
        "id": 1161621
      },
      "writtenOn": "2017-10-08T10:04:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "cc6dd261_f9b257ee",
      "revId": "3cf1107afc9175f13298beddec3c5f851e21e0d7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "04ae691f_59f40a69",
        "filename": "content/child/service_worker/service_worker_dispatcher.cc",
        "patchSetId": 4
      },
      "lineNbr": 240,
      "author": {
        "id": 1000128
      },
      "writtenOn": "2017-10-02T06:38:59Z",
      "side": 1,
      "message": "std::move(binding_task_runner)",
      "revId": "3cf1107afc9175f13298beddec3c5f851e21e0d7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "22b7ae0d_9b0d7858",
        "filename": "content/child/service_worker/service_worker_dispatcher.cc",
        "patchSetId": 4
      },
      "lineNbr": 240,
      "author": {
        "id": 1161621
      },
      "writtenOn": "2017-10-08T10:04:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "04ae691f_59f40a69",
      "revId": "3cf1107afc9175f13298beddec3c5f851e21e0d7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3f686729_65556f61",
        "filename": "content/child/service_worker/service_worker_dispatcher.h",
        "patchSetId": 4
      },
      "lineNbr": 126,
      "author": {
        "id": 1000128
      },
      "writtenOn": "2017-10-02T06:38:59Z",
      "side": 1,
      "message": "Can you help me understand why Controller vs Controllee has different behavior about whether it adopts or creates?",
      "revId": "3cf1107afc9175f13298beddec3c5f851e21e0d7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e683fba4_a4346379",
        "filename": "content/child/service_worker/service_worker_dispatcher.h",
        "patchSetId": 4
      },
      "lineNbr": 126,
      "author": {
        "id": 1161621
      },
      "writtenOn": "2017-10-08T10:04:55Z",
      "side": 1,
      "message": "After CL https://chromium-review.googlesource.com/c/chromium/src/+/665097, currently Controller and Controllee have the same behavior against SW registration object, but SW object still has \u0027Adopt\u0027 concept(https://cs.chromium.org/chromium/src/content/child/service_worker/service_worker_handle_reference.h?l\u003d34\u0026gs\u003dcpp%253Acontent%253A%253Aclass-ServiceWorkerHandleReference%253A%253AAdopt(const%2Bcontent%253A%253AServiceWorkerObjectInfo%2B%2526%252C%2Bcontent%253A%253AThreadSafeSender%2B*)%2540chromium%252F..%252F..%252Fcontent%252Fchild%252Fservice_worker%252Fservice_worker_handle_reference.h%257Cdecl\u0026gsn\u003dAdopt\u0026ct\u003dxref_usages).\n\nNext step I\u0027ll use the similar method to eliminate ServiceWorkerHandleReference class, after that \u0027Adopt\u0027 concept will disappear and we can merge these 2 functions to 1 function GetOrCreateRegistration().",
      "parentUuid": "3f686729_65556f61",
      "revId": "3cf1107afc9175f13298beddec3c5f851e21e0d7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f268c69f_e199f9e6",
        "filename": "content/child/service_worker/service_worker_dispatcher.h",
        "patchSetId": 4
      },
      "lineNbr": 128,
      "author": {
        "id": 1000128
      },
      "writtenOn": "2017-10-02T06:38:59Z",
      "side": 1,
      "message": "Let\u0027s not use Controller vs Controllee teminology outside of the \"Provider\" classes where it\u0027s quite baked in. I\u0027d call it ServiceWorkerGlobalScope and ServiceWorkerClient.",
      "revId": "3cf1107afc9175f13298beddec3c5f851e21e0d7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "06c04540_506e9d73",
        "filename": "content/child/service_worker/service_worker_dispatcher.h",
        "patchSetId": 4
      },
      "lineNbr": 128,
      "author": {
        "id": 1161621
      },
      "writtenOn": "2017-10-08T10:04:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f268c69f_e199f9e6",
      "revId": "3cf1107afc9175f13298beddec3c5f851e21e0d7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1ccbfdd2_875d1830",
        "filename": "content/child/service_worker/web_service_worker_registration_impl.cc",
        "patchSetId": 4
      },
      "lineNbr": 207,
      "author": {
        "id": 1000128
      },
      "writtenOn": "2017-10-02T06:38:59Z",
      "side": 1,
      "message": "FromUTF8?",
      "revId": "3cf1107afc9175f13298beddec3c5f851e21e0d7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ac31e60e_f158c44a",
        "filename": "content/child/service_worker/web_service_worker_registration_impl.cc",
        "patchSetId": 4
      },
      "lineNbr": 207,
      "author": {
        "id": 1161621
      },
      "writtenOn": "2017-10-08T10:04:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1ccbfdd2_875d1830",
      "revId": "3cf1107afc9175f13298beddec3c5f851e21e0d7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3449cf13_8e7d494c",
        "filename": "content/child/service_worker/web_service_worker_registration_impl.h",
        "patchSetId": 4
      },
      "lineNbr": 49,
      "author": {
        "id": 1000128
      },
      "writtenOn": "2017-10-02T06:38:59Z",
      "side": 1,
      "message": "why is the default arg needed?",
      "revId": "3cf1107afc9175f13298beddec3c5f851e21e0d7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4aa6d581_9e5f72ad",
        "filename": "content/child/service_worker/web_service_worker_registration_impl.h",
        "patchSetId": 4
      },
      "lineNbr": 49,
      "author": {
        "id": 1161621
      },
      "writtenOn": "2017-10-08T10:04:55Z",
      "side": 1,
      "message": "For service worker client contexts, |this| is created/bound/used on the main thread, so no need to pass such a |binding_task_runner| to its ctor, which will use current thread task runner if |binding_task_runner| is nullptr.",
      "parentUuid": "3449cf13_8e7d494c",
      "revId": "3cf1107afc9175f13298beddec3c5f851e21e0d7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "93c59b21_8c995efb",
        "filename": "content/child/service_worker/web_service_worker_registration_impl.h",
        "patchSetId": 4
      },
      "lineNbr": 49,
      "author": {
        "id": 1000128
      },
      "writtenOn": "2017-10-10T06:47:41Z",
      "side": 1,
      "message": "Maybe nicer to just require the latter to pass base::ThreadTaskRunnerHandle::Get() to make things more explcit. Or else introduce factory methods like CreateForServiceWorkerClient and CreateForServiceWorkerGlobalScope",
      "parentUuid": "4aa6d581_9e5f72ad",
      "revId": "3cf1107afc9175f13298beddec3c5f851e21e0d7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8fbba130_00dfc233",
        "filename": "content/child/service_worker/web_service_worker_registration_impl.h",
        "patchSetId": 4
      },
      "lineNbr": 49,
      "author": {
        "id": 1161621
      },
      "writtenOn": "2017-10-10T08:31:44Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "93c59b21_8c995efb",
      "revId": "3cf1107afc9175f13298beddec3c5f851e21e0d7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d15334ab_d9865a08",
        "filename": "content/child/service_worker/web_service_worker_registration_impl.h",
        "patchSetId": 4
      },
      "lineNbr": 126,
      "author": {
        "id": 1161621
      },
      "writtenOn": "2017-09-30T09:14:04Z",
      "side": 1,
      "message": "The discussions about this is at https://groups.google.com/a/chromium.org/forum/#!topic/chromium-mojo/Ee20u9osnrs",
      "range": {
        "startLine": 123,
        "startChar": 32,
        "endLine": 126,
        "endChar": 16
      },
      "revId": "3cf1107afc9175f13298beddec3c5f851e21e0d7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "36c2d7df_c4216ce1",
        "filename": "content/child/service_worker/web_service_worker_registration_impl.h",
        "patchSetId": 4
      },
      "lineNbr": 126,
      "author": {
        "id": 1161621
      },
      "writtenOn": "2017-10-09T08:56:27Z",
      "side": 1,
      "message": "I investigated around and now have another idea:\nCan we just use a dedicated Mojo message pipe for SWRegistrationObjectHost interface? I mean we do not need to associate it with SWContainerHost(being a IPC channel-associated connection).\n\nBecause I think SWRegistrationObjectHost.{Update,Unregister} should have no ordering race issue with SWContainerHost.{Register,GetRegistration,etc.}, because all these methods serve to impl JavaScript calls expecting a promise to be returned.\n\nFor example we always write like:\n  navigator.serviceWorker.getRegistration(xxx).then(function(reg) \n      { reg.update().then(function() { XXX }); });\nbut NOT like:\n  navigator.serviceWorker.getRegistration(xxx).then(function(reg) \n      { XXX });\n  reg.update().then(function() { XXX });\n\nI think we should always try to avoid using IPC channel-associated interfaces and should use separate Mojo message pipes as possible as we can.\nWDYT? Thanks.",
      "parentUuid": "d15334ab_d9865a08",
      "range": {
        "startLine": 123,
        "startChar": 32,
        "endLine": 126,
        "endChar": 16
      },
      "revId": "3cf1107afc9175f13298beddec3c5f851e21e0d7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b9c5a93d_87acbb7c",
        "filename": "content/child/service_worker/web_service_worker_registration_impl.h",
        "patchSetId": 4
      },
      "lineNbr": 126,
      "author": {
        "id": 1161621
      },
      "writtenOn": "2017-10-09T09:05:57Z",
      "side": 1,
      "message": "For the following code I mean developers usually should not have the assumption that getRegistration must get back earlier than update.\n\n  // Use other methods to preapre a registration object named as |old_reg|.\n  navigator.serviceWorker.getRegistration(xxx).then(function(reg) \n      { XXX });\n  old_reg.update().then(function() { XXX });",
      "parentUuid": "36c2d7df_c4216ce1",
      "range": {
        "startLine": 123,
        "startChar": 32,
        "endLine": 126,
        "endChar": 16
      },
      "revId": "3cf1107afc9175f13298beddec3c5f851e21e0d7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "88247678_6dd40eeb",
        "filename": "content/child/service_worker/web_service_worker_registration_impl.h",
        "patchSetId": 4
      },
      "lineNbr": 126,
      "author": {
        "id": 1000128
      },
      "writtenOn": "2017-10-10T06:47:41Z",
      "side": 1,
      "message": "Although I agree we want to avoid channel associated interfaces, I\u0027m a bit wary of not having ordering guarantees even if we think the web-exposed behavior doesn\u0027t need it. I\u0027m worried more about stability than web-exposed behavior. Since we expect SWDispatcher to eventually be removed, and then we won\u0027t have any legacy IPCs then and can remove the channel associated interface, it might be worth it to just continue as coded with the TODO. WDYT?",
      "parentUuid": "b9c5a93d_87acbb7c",
      "range": {
        "startLine": 123,
        "startChar": 32,
        "endLine": 126,
        "endChar": 16
      },
      "revId": "3cf1107afc9175f13298beddec3c5f851e21e0d7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "82c934f6_784c6450",
        "filename": "content/child/service_worker/web_service_worker_registration_impl.h",
        "patchSetId": 4
      },
      "lineNbr": 126,
      "author": {
        "id": 1161621
      },
      "writtenOn": "2017-10-10T08:31:44Z",
      "side": 1,
      "message": "Yeah I agree we play for safety currently so we can focus on mojofication work now, we can re-consider all the Mojo connections arrangement at last.",
      "parentUuid": "88247678_6dd40eeb",
      "range": {
        "startLine": 123,
        "startChar": 32,
        "endLine": 126,
        "endChar": 16
      },
      "revId": "3cf1107afc9175f13298beddec3c5f851e21e0d7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}