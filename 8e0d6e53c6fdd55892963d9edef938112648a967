{
  "comments": [
    {
      "key": {
        "uuid": "f9919773_b69e5157",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 16,
      "author": {
        "id": 1001385
      },
      "writtenOn": "2018-01-12T02:39:23Z",
      "side": 1,
      "message": "Suggest rewording this to mention that SSHD would allow us to do this, but is currently limited in the number of connections it can handle due to POSIX-lite.",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 16,
        "endChar": 41
      },
      "revId": "8e0d6e53c6fdd55892963d9edef938112648a967",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "97521d33_efa9303d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 16,
      "author": {
        "id": 1116023
      },
      "writtenOn": "2018-01-12T19:18:03Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f9919773_b69e5157",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 16,
        "endChar": 41
      },
      "revId": "8e0d6e53c6fdd55892963d9edef938112648a967",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d8b75c1d_85a1f777",
        "filename": "build/fuchsia/layout_test_proxy/BUILD.gn",
        "patchSetId": 4
      },
      "lineNbr": 9,
      "author": {
        "id": 1001385
      },
      "writtenOn": "2018-01-12T02:39:23Z",
      "side": 1,
      "message": "Is there anything specific to layout-tests about this proxy?  Can\u0027t it be used for any other test that needs simple TCP-port relaying back to the host?\n\nWhat do we actually use for the equivalent function on Android?\n\nYou\u0027re repurposing the internals of RemoteTestServerProxy for this, so that it essentially equivalent except that RTSP has code to launch the actual test server in Python, and this new server doesn\u0027t - could we just modify the RemoteTestServerProxy to support running against an existing server?\n\nFailing that, could we at least put this simple TCP proxy alongside the RTSP, rather than hidden away in build/fuchsia?",
      "range": {
        "startLine": 9,
        "startChar": 12,
        "endLine": 9,
        "endChar": 29
      },
      "revId": "8e0d6e53c6fdd55892963d9edef938112648a967",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cb768eab_226fc3cc",
        "filename": "build/fuchsia/layout_test_proxy/BUILD.gn",
        "patchSetId": 4
      },
      "lineNbr": 9,
      "author": {
        "id": 1116023
      },
      "writtenOn": "2018-01-12T19:18:03Z",
      "side": 1,
      "message": "\u003e Is there anything specific to layout-tests about this proxy?  Can\u0027t it be used for any other test that needs simple TCP-port relaying back to the host?\n\nThere is nothing specific to layout tests right now, but it will be used only for layout tests I think. Calling it this way makes the purpose clearer and it gives us freedom to add some layout-specific logic if necessary. Currently it\u0027s not a generic TCP proxy (it always binds to localhost and it only supports the same port number on both ends). I\u0027d prefer keeping it this way, unless there is some other case when a generic TCP proxy will be useful.\n\n\n\u003e What do we actually use for the equivalent function on Android?\n\nADB can forward TCP connections from an Android device connected to the host. Also when running Android tests there is usually no network connection between the device and the host, so this proxy couldn\u0027t replace ADB.\n\n\n\u003e \n\u003e You\u0027re repurposing the internals of RemoteTestServerProxy for this, so that it essentially equivalent except that RTSP has code to launch the actual test server in Python, and this new server doesn\u0027t - could we just modify the RemoteTestServerProxy to support running against an existing server?\n\nRTSP doesn\u0027t launch test server. net::RemoteTestServer is responsible for starting the server and then it instantiates RTSP if necessary (it\u0027s not necessary on Android).\nFor layout tests we will want to run multiple instances of content_shell against the same server with a fixed port on the target machine. That\u0027s the reason the proxy needs to be in a separate process.\nnet_unittests are different because these tests are responsible for starting test server, i.e. each test server instance is used in only one test. There can be multiple testserver instances running in parallel with their individual proxies.\n\n\n\u003e \n\u003e Failing that, could we at least put this simple TCP proxy alongside the RTSP, rather than hidden away in build/fuchsia?\n\nIMO net/test/spawned_test_server would not be the right place to put it because it\u0027s not related to the testserver.py used in net_unittests. I also don\u0027t think this code belongs to //net because it has nothing to do with other code in //net, except reusing some of it.\n\nWDYT about moving it to //testing/fuchsia?",
      "parentUuid": "d8b75c1d_85a1f777",
      "range": {
        "startLine": 9,
        "startChar": 12,
        "endLine": 9,
        "endChar": 29
      },
      "revId": "8e0d6e53c6fdd55892963d9edef938112648a967",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "51e3f5c3_86fb17f7",
        "filename": "build/fuchsia/layout_test_proxy/BUILD.gn",
        "patchSetId": 4
      },
      "lineNbr": 9,
      "author": {
        "id": 1001385
      },
      "writtenOn": "2018-01-13T02:18:17Z",
      "side": 1,
      "message": "Regarding the location of the implementation, //testing/fuchsia doesn\u0027t exist yet, so it seems unfortunate for us to have to create it.\n\nIf we only need this until SSHD gets fixed, how about putting it under //build/fuchsia but with a comment in the BUILD.gn referring to the Chromium bug and stating that we should remove all this code once SSHD works?",
      "parentUuid": "cb768eab_226fc3cc",
      "range": {
        "startLine": 9,
        "startChar": 12,
        "endLine": 9,
        "endChar": 29
      },
      "revId": "8e0d6e53c6fdd55892963d9edef938112648a967",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "084cc96f_6a30eed1",
        "filename": "build/fuchsia/layout_test_proxy/layout_test_proxy.cc",
        "patchSetId": 4
      },
      "lineNbr": 18,
      "author": {
        "id": 1001385
      },
      "writtenOn": "2018-01-12T02:39:23Z",
      "side": 1,
      "message": "nit: Do we actually need an at-exit manager for this code?",
      "range": {
        "startLine": 18,
        "startChar": 2,
        "endLine": 18,
        "endChar": 30
      },
      "revId": "8e0d6e53c6fdd55892963d9edef938112648a967",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9828be13_94b24d9d",
        "filename": "build/fuchsia/layout_test_proxy/layout_test_proxy.cc",
        "patchSetId": 4
      },
      "lineNbr": 18,
      "author": {
        "id": 1116023
      },
      "writtenOn": "2018-01-12T19:18:03Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "084cc96f_6a30eed1",
      "range": {
        "startLine": 18,
        "startChar": 2,
        "endLine": 18,
        "endChar": 30
      },
      "revId": "8e0d6e53c6fdd55892963d9edef938112648a967",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4a61c463_0d749db6",
        "filename": "build/fuchsia/layout_test_proxy/layout_test_proxy.cc",
        "patchSetId": 4
      },
      "lineNbr": 30,
      "author": {
        "id": 1001385
      },
      "writtenOn": "2018-01-12T02:39:23Z",
      "side": 1,
      "message": "What is the use-case for proxying multiple ports?\n\nDo we always just forward them to the same-numbered port on the remote address?",
      "range": {
        "startLine": 30,
        "startChar": 2,
        "endLine": 30,
        "endChar": 25
      },
      "revId": "8e0d6e53c6fdd55892963d9edef938112648a967",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ce7d2ee0_1b121bd0",
        "filename": "build/fuchsia/layout_test_proxy/layout_test_proxy.cc",
        "patchSetId": 4
      },
      "lineNbr": 30,
      "author": {
        "id": 1116023
      },
      "writtenOn": "2018-01-12T19:18:03Z",
      "side": 1,
      "message": "Layout tests need multiple ports. Here is full list of the ports:\nhttps://codesearch.chromium.org/chromium/src/third_party/WebKit/Tools/Scripts/webkitpy/layout_tests/port/android.py?q\u003dandroid.py+webkit\u0026dr\u003dC\u0026l\u003d119\n\nYes port numbers will match on both ends.",
      "parentUuid": "4a61c463_0d749db6",
      "range": {
        "startLine": 30,
        "startChar": 2,
        "endLine": 30,
        "endChar": 25
      },
      "revId": "8e0d6e53c6fdd55892963d9edef938112648a967",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a392d9c1_c37ca66e",
        "filename": "build/fuchsia/layout_test_proxy/layout_test_proxy.cc",
        "patchSetId": 4
      },
      "lineNbr": 30,
      "author": {
        "id": 1001385
      },
      "writtenOn": "2018-01-13T02:14:29Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "ce7d2ee0_1b121bd0",
      "range": {
        "startLine": 30,
        "startChar": 2,
        "endLine": 30,
        "endChar": 25
      },
      "revId": "8e0d6e53c6fdd55892963d9edef938112648a967",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "072cf0cb_4790f0cc",
        "filename": "build/fuchsia/layout_test_proxy/layout_test_proxy.cc",
        "patchSetId": 4
      },
      "lineNbr": 32,
      "author": {
        "id": 1001385
      },
      "writtenOn": "2018-01-12T02:39:23Z",
      "side": 1,
      "message": "nit: port_string",
      "range": {
        "startLine": 32,
        "startChar": 13,
        "endLine": 32,
        "endChar": 21
      },
      "revId": "8e0d6e53c6fdd55892963d9edef938112648a967",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "19a9e757_93dc3292",
        "filename": "build/fuchsia/layout_test_proxy/layout_test_proxy.cc",
        "patchSetId": 4
      },
      "lineNbr": 32,
      "author": {
        "id": 1116023
      },
      "writtenOn": "2018-01-12T19:18:03Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "072cf0cb_4790f0cc",
      "range": {
        "startLine": 32,
        "startChar": 13,
        "endLine": 32,
        "endChar": 21
      },
      "revId": "8e0d6e53c6fdd55892963d9edef938112648a967",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8d603e75_cb14773a",
        "filename": "build/fuchsia/layout_test_proxy/layout_test_proxy.cc",
        "patchSetId": 4
      },
      "lineNbr": 45,
      "author": {
        "id": 1001385
      },
      "writtenOn": "2018-01-12T02:39:23Z",
      "side": 1,
      "message": "nit: Move this check to be |!ports_strings.empty()|, before the decode loop.",
      "range": {
        "startLine": 42,
        "startChar": 0,
        "endLine": 45,
        "endChar": 3
      },
      "revId": "8e0d6e53c6fdd55892963d9edef938112648a967",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5cf2f44a_b0f6179d",
        "filename": "build/fuchsia/layout_test_proxy/layout_test_proxy.cc",
        "patchSetId": 4
      },
      "lineNbr": 45,
      "author": {
        "id": 1116023
      },
      "writtenOn": "2018-01-12T19:18:03Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8d603e75_cb14773a",
      "range": {
        "startLine": 42,
        "startChar": 0,
        "endLine": 45,
        "endChar": 3
      },
      "revId": "8e0d6e53c6fdd55892963d9edef938112648a967",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "427e46fa_1849e63c",
        "filename": "build/fuchsia/layout_test_proxy/layout_test_proxy.cc",
        "patchSetId": 4
      },
      "lineNbr": 61,
      "author": {
        "id": 1001385
      },
      "writtenOn": "2018-01-12T02:39:23Z",
      "side": 1,
      "message": "Does this actually need to be declared before we create the ports?",
      "range": {
        "startLine": 61,
        "startChar": 0,
        "endLine": 61,
        "endChar": 38
      },
      "revId": "8e0d6e53c6fdd55892963d9edef938112648a967",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8bc477bb_41e83d43",
        "filename": "build/fuchsia/layout_test_proxy/layout_test_proxy.cc",
        "patchSetId": 4
      },
      "lineNbr": 61,
      "author": {
        "id": 1116023
      },
      "writtenOn": "2018-01-12T19:18:03Z",
      "side": 1,
      "message": "Yes. net::TcpSocketProxy creates sockets and then calls Listen(), which wouldn\u0027t work without message loop. There are also DCHECKs to ensure that sockets are created only on IO thread.",
      "parentUuid": "427e46fa_1849e63c",
      "range": {
        "startLine": 61,
        "startChar": 0,
        "endLine": 61,
        "endChar": 38
      },
      "revId": "8e0d6e53c6fdd55892963d9edef938112648a967",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3ef6f6c4_b4c1dde6",
        "filename": "build/fuchsia/layout_test_proxy/layout_test_proxy.cc",
        "patchSetId": 4
      },
      "lineNbr": 61,
      "author": {
        "id": 1001385
      },
      "writtenOn": "2018-01-13T02:14:29Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "8bc477bb_41e83d43",
      "range": {
        "startLine": 61,
        "startChar": 0,
        "endLine": 61,
        "endChar": 38
      },
      "revId": "8e0d6e53c6fdd55892963d9edef938112648a967",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "68e0d190_a8880a79",
        "filename": "build/fuchsia/layout_test_proxy/layout_test_proxy.cc",
        "patchSetId": 4
      },
      "lineNbr": 77,
      "author": {
        "id": 1001385
      },
      "writtenOn": "2018-01-12T02:39:23Z",
      "side": 1,
      "message": "How does this process get quit?",
      "range": {
        "startLine": 77,
        "startChar": 0,
        "endLine": 77,
        "endChar": 39
      },
      "revId": "8e0d6e53c6fdd55892963d9edef938112648a967",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b5a15d18_65c74106",
        "filename": "build/fuchsia/layout_test_proxy/layout_test_proxy.cc",
        "patchSetId": 4
      },
      "lineNbr": 77,
      "author": {
        "id": 1116023
      },
      "writtenOn": "2018-01-12T19:18:03Z",
      "side": 1,
      "message": "The calling process will need to kill it somehow. When the process is started over SSH it will be killed when the SSH connection is closed (it works on Fuchsia after https://fuchsia-review.googlesource.com/c/garnet/+/108272)",
      "parentUuid": "68e0d190_a8880a79",
      "range": {
        "startLine": 77,
        "startChar": 0,
        "endLine": 77,
        "endChar": 39
      },
      "revId": "8e0d6e53c6fdd55892963d9edef938112648a967",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4bdc482c_48bda42a",
        "filename": "build/fuchsia/layout_test_proxy/layout_test_proxy.cc",
        "patchSetId": 4
      },
      "lineNbr": 77,
      "author": {
        "id": 1001385
      },
      "writtenOn": "2018-01-13T02:14:29Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "b5a15d18_65c74106",
      "range": {
        "startLine": 77,
        "startChar": 0,
        "endLine": 77,
        "endChar": 39
      },
      "revId": "8e0d6e53c6fdd55892963d9edef938112648a967",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9d625634_82c4f206",
        "filename": "net/test/spawned_test_server/remote_test_server.cc",
        "patchSetId": 4
      },
      "lineNbr": 101,
      "author": {
        "id": 1001385
      },
      "writtenOn": "2018-01-12T02:39:23Z",
      "side": 1,
      "message": "nit: This can be CHECK(Initialize()).",
      "range": {
        "startLine": 101,
        "startChar": 6,
        "endLine": 101,
        "endChar": 58
      },
      "revId": "8e0d6e53c6fdd55892963d9edef938112648a967",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1c2b3f64_5ecae518",
        "filename": "net/test/spawned_test_server/remote_test_server.cc",
        "patchSetId": 4
      },
      "lineNbr": 101,
      "author": {
        "id": 1116023
      },
      "writtenOn": "2018-01-12T19:18:03Z",
      "side": 1,
      "message": "It\u0027s best to avoid side-effects inside CHECK() because someone may try changing DCHECK which breaks stuff release build (often creating hard-to-debug bugs, not in this case).",
      "parentUuid": "9d625634_82c4f206",
      "range": {
        "startLine": 101,
        "startChar": 6,
        "endLine": 101,
        "endChar": 58
      },
      "revId": "8e0d6e53c6fdd55892963d9edef938112648a967",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b8a1c605_1873904c",
        "filename": "net/test/spawned_test_server/remote_test_server.cc",
        "patchSetId": 4
      },
      "lineNbr": 101,
      "author": {
        "id": 1001385
      },
      "writtenOn": "2018-01-13T02:18:17Z",
      "side": 1,
      "message": "I disagree; CHECK(ImportantCallWithAmazingSideEffects()) is perfectly standard in the codebase. :)",
      "parentUuid": "1c2b3f64_5ecae518",
      "range": {
        "startLine": 101,
        "startChar": 6,
        "endLine": 101,
        "endChar": 58
      },
      "revId": "8e0d6e53c6fdd55892963d9edef938112648a967",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9d04337b_afc387d9",
        "filename": "net/test/spawned_test_server/remote_test_server.cc",
        "patchSetId": 4
      },
      "lineNbr": 141,
      "author": {
        "id": 1001385
      },
      "writtenOn": "2018-01-12T02:39:23Z",
      "side": 1,
      "message": "nit: This too.",
      "range": {
        "startLine": 140,
        "startChar": 4,
        "endLine": 141,
        "endChar": 58
      },
      "revId": "8e0d6e53c6fdd55892963d9edef938112648a967",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "41220a80_0db9c033",
        "filename": "net/test/spawned_test_server/remote_test_server.cc",
        "patchSetId": 4
      },
      "lineNbr": 141,
      "author": {
        "id": 1116023
      },
      "writtenOn": "2018-01-12T19:18:03Z",
      "side": 1,
      "message": "same here",
      "parentUuid": "9d04337b_afc387d9",
      "range": {
        "startLine": 140,
        "startChar": 4,
        "endLine": 141,
        "endChar": 58
      },
      "revId": "8e0d6e53c6fdd55892963d9edef938112648a967",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6430cb38_b3fe5132",
        "filename": "net/test/tcp_socket_proxy.cc",
        "patchSetId": 4
      },
      "lineNbr": 204,
      "author": {
        "id": 1001385
      },
      "writtenOn": "2018-01-12T02:39:23Z",
      "side": 1,
      "message": "These comments are the sort of thing I\u0027d expect on the class header to describe the API - Core is an internal implementation detail, so I don\u0027t think we need such detailed comments here, especially the one on local_port() seems overkill.",
      "range": {
        "startLine": 203,
        "startChar": 0,
        "endLine": 204,
        "endChar": 60
      },
      "revId": "8e0d6e53c6fdd55892963d9edef938112648a967",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3896d590_cca45bdd",
        "filename": "net/test/tcp_socket_proxy.cc",
        "patchSetId": 4
      },
      "lineNbr": 204,
      "author": {
        "id": 1116023
      },
      "writtenOn": "2018-01-12T19:18:03Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6430cb38_b3fe5132",
      "range": {
        "startLine": 203,
        "startChar": 0,
        "endLine": 204,
        "endChar": 60
      },
      "revId": "8e0d6e53c6fdd55892963d9edef938112648a967",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a5731f4f_906623bc",
        "filename": "net/test/tcp_socket_proxy.cc",
        "patchSetId": 4
      },
      "lineNbr": 246,
      "author": {
        "id": 1001385
      },
      "writtenOn": "2018-01-12T02:39:23Z",
      "side": 1,
      "message": "Do we want to continue even if these fail, or should this be LOG(FATAL), or CHECK_EQ(result, OK) \u003c\u003c ErrorToString(result)?",
      "range": {
        "startLine": 245,
        "startChar": 0,
        "endLine": 246,
        "endChar": 40
      },
      "revId": "8e0d6e53c6fdd55892963d9edef938112648a967",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2cd0609d_649f670e",
        "filename": "net/test/tcp_socket_proxy.cc",
        "patchSetId": 4
      },
      "lineNbr": 246,
      "author": {
        "id": 1116023
      },
      "writtenOn": "2018-01-12T19:18:03Z",
      "side": 1,
      "message": "For layout_test_proxy it\u0027s better to handle this case as an error instead of fatal condition because the script that started layout_test_proxy may need to handle this case somehow. At very least reporting this error instead of crashing will make it easier to debug the issue when local_port is not available for some reason (e.g. it will happen if two instances of run-webkit-tests are started for the same target Fuchsia device).",
      "parentUuid": "a5731f4f_906623bc",
      "range": {
        "startLine": 245,
        "startChar": 0,
        "endLine": 246,
        "endChar": 40
      },
      "revId": "8e0d6e53c6fdd55892963d9edef938112648a967",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "42a20705_22e996f0",
        "filename": "net/test/tcp_socket_proxy.cc",
        "patchSetId": 4
      },
      "lineNbr": 246,
      "author": {
        "id": 1001385
      },
      "writtenOn": "2018-01-13T02:14:29Z",
      "side": 1,
      "message": "If the calling code is going to handle this condition then we really need to signal it back to the caller, rather than just logging the error, surely?\n\nAs for logging vs crashing, I disagree - I think logging and then continuing on as though nothing went wrong makes it _harder_ to debug, if anything, since it is then likely that the test will sit idle and eventually timeout, or we\u0027ll crash at some other point because things are in a weird state.\n\nIf you just don\u0027t want to log-spew a backtrace for a well-defined error then perhaps just LOG(ERROR) and then exit.",
      "parentUuid": "2cd0609d_649f670e",
      "range": {
        "startLine": 245,
        "startChar": 0,
        "endLine": 246,
        "endChar": 40
      },
      "revId": "8e0d6e53c6fdd55892963d9edef938112648a967",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d4efc56b_43487eb4",
        "filename": "net/test/tcp_socket_proxy.cc",
        "patchSetId": 4
      },
      "lineNbr": 331,
      "author": {
        "id": 1001385
      },
      "writtenOn": "2018-01-12T02:39:23Z",
      "side": 1,
      "message": "typo: initialized_event",
      "range": {
        "startLine": 331,
        "startChar": 24,
        "endLine": 331,
        "endChar": 40
      },
      "revId": "8e0d6e53c6fdd55892963d9edef938112648a967",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d5a819e5_a2b493f8",
        "filename": "net/test/tcp_socket_proxy.cc",
        "patchSetId": 4
      },
      "lineNbr": 331,
      "author": {
        "id": 1116023
      },
      "writtenOn": "2018-01-12T19:18:03Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d4efc56b_43487eb4",
      "range": {
        "startLine": 331,
        "startChar": 24,
        "endLine": 331,
        "endChar": 40
      },
      "revId": "8e0d6e53c6fdd55892963d9edef938112648a967",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "331fcedb_90ef022b",
        "filename": "net/test/tcp_socket_proxy.cc",
        "patchSetId": 4
      },
      "lineNbr": 348,
      "author": {
        "id": 1001385
      },
      "writtenOn": "2018-01-12T02:39:23Z",
      "side": 1,
      "message": "nit: I think you can std::move(core_) these days.",
      "range": {
        "startLine": 348,
        "startChar": 41,
        "endLine": 348,
        "endChar": 56
      },
      "revId": "8e0d6e53c6fdd55892963d9edef938112648a967",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bacdf952_67c49a22",
        "filename": "net/test/tcp_socket_proxy.cc",
        "patchSetId": 4
      },
      "lineNbr": 348,
      "author": {
        "id": 1116023
      },
      "writtenOn": "2018-01-12T19:18:03Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "331fcedb_90ef022b",
      "range": {
        "startLine": 348,
        "startChar": 41,
        "endLine": 348,
        "endChar": 56
      },
      "revId": "8e0d6e53c6fdd55892963d9edef938112648a967",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bbcab950_7672193c",
        "filename": "net/test/tcp_socket_proxy.h",
        "patchSetId": 4
      },
      "lineNbr": 40,
      "author": {
        "id": 1001385
      },
      "writtenOn": "2018-01-12T02:39:23Z",
      "side": 1,
      "message": "typo: calls-\u003ecall",
      "range": {
        "startLine": 40,
        "startChar": 31,
        "endLine": 40,
        "endChar": 36
      },
      "revId": "8e0d6e53c6fdd55892963d9edef938112648a967",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "166982f6_30f71d88",
        "filename": "net/test/tcp_socket_proxy.h",
        "patchSetId": 4
      },
      "lineNbr": 40,
      "author": {
        "id": 1116023
      },
      "writtenOn": "2018-01-12T19:18:03Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "bbcab950_7672193c",
      "range": {
        "startLine": 40,
        "startChar": 31,
        "endLine": 40,
        "endChar": 36
      },
      "revId": "8e0d6e53c6fdd55892963d9edef938112648a967",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6c4a3b72_8e6791a4",
        "filename": "net/test/tcp_socket_proxy.h",
        "patchSetId": 4
      },
      "lineNbr": 41,
      "author": {
        "id": 1001385
      },
      "writtenOn": "2018-01-12T02:39:23Z",
      "side": 1,
      "message": "What is the use-case for have Initialize and Start be separate like this?",
      "range": {
        "startLine": 39,
        "startChar": 58,
        "endLine": 41,
        "endChar": 32
      },
      "revId": "8e0d6e53c6fdd55892963d9edef938112648a967",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d175fcbb_e958164d",
        "filename": "net/test/tcp_socket_proxy.h",
        "patchSetId": 4
      },
      "lineNbr": 41,
      "author": {
        "id": 1116023
      },
      "writtenOn": "2018-01-12T19:18:03Z",
      "side": 1,
      "message": "For OCSP tests we need to start HTTPServer and OCSPServer together. HTTPServer needs to know the port number for OCSPServer. Having initialization separate from Start() allows to pre-allocate local port before the remote port is know. This allows to start HTTPServer and OCSPServer at the same time, with a single request to the test server spawner. See https://chromium-review.googlesource.com/#/c/810096/",
      "parentUuid": "6c4a3b72_8e6791a4",
      "range": {
        "startLine": 39,
        "startChar": 58,
        "endLine": 41,
        "endChar": 32
      },
      "revId": "8e0d6e53c6fdd55892963d9edef938112648a967",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "87b102ac_047e1ec4",
        "filename": "net/test/tcp_socket_proxy.h",
        "patchSetId": 4
      },
      "lineNbr": 41,
      "author": {
        "id": 1001385
      },
      "writtenOn": "2018-01-13T02:14:29Z",
      "side": 1,
      "message": "As discussed offline, the confusion was in the |remote_address| naming - essentially we call Initialize(port) and then Start(remote_address_and_port) to tell it what to proxy through to.\n\nPerhaps it would be clearer to actually rename the methods to StartListening(port) and StartProxying(remote_endpoint)?",
      "parentUuid": "d175fcbb_e958164d",
      "range": {
        "startLine": 39,
        "startChar": 58,
        "endLine": 41,
        "endChar": 32
      },
      "revId": "8e0d6e53c6fdd55892963d9edef938112648a967",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}