{
  "comments": [
    {
      "key": {
        "uuid": "151d3a99_26cd490b",
        "filename": "content/child/child_url_loader_factory_getter.cc",
        "patchSetId": 21
      },
      "lineNbr": 62,
      "author": {
        "id": 1001472
      },
      "writtenOn": "2017-08-22T07:57:21Z",
      "side": 1,
      "message": "Could we do this only if neither of blob_loader_factory_ nor blob_loader_factory_getter_ is given (in addition to !kNetworkService)? (I can imagine we might launch BlobURLLoader earlier than NetworkService launch)",
      "revId": "ce36806ff8e0a25955bb7cd42e54f4cecc339439",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "01601973_3eec4780",
        "filename": "content/child/child_url_loader_factory_getter.cc",
        "patchSetId": 21
      },
      "lineNbr": 62,
      "author": {
        "id": 1000781
      },
      "writtenOn": "2017-08-22T09:59:10Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "151d3a99_26cd490b",
      "revId": "ce36806ff8e0a25955bb7cd42e54f4cecc339439",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b551474b_e723e435",
        "filename": "content/child/service_worker/service_worker_provider_context.h",
        "patchSetId": 21
      },
      "lineNbr": 151,
      "author": {
        "id": 1000128
      },
      "writtenOn": "2017-08-22T08:14:36Z",
      "side": 1,
      "message": "I still don\u0027t understand why this is needed. SharedWorker and Worker don\u0027t have their own ServiceWorkerProviderContext which keeps |controller| which the browser process sends SetController IPCs to? Seems like that would be a more sane/straightforward design than having the Document\u0027s ProviderContext propagate the controller to a separate interface for Worker clients.",
      "revId": "ce36806ff8e0a25955bb7cd42e54f4cecc339439",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5bb62a98_fa3d02aa",
        "filename": "content/child/service_worker/service_worker_provider_context.h",
        "patchSetId": 21
      },
      "lineNbr": 151,
      "author": {
        "id": 1000128
      },
      "writtenOn": "2017-08-22T08:24:05Z",
      "side": 1,
      "message": "I guess this is https://bugs.chromium.org/p/chromium/issues/detail?id\u003d731604 which says DedicatedWorker doesn\u0027t get its own NetworkProvider, and therefore its own ProviderContext. But SharedWorker should have its own, so I would think it doesn\u0027t need the Document to keep track of its controller for it?",
      "parentUuid": "b551474b_e723e435",
      "revId": "ce36806ff8e0a25955bb7cd42e54f4cecc339439",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fd4d3ad9_5c5ff428",
        "filename": "content/child/service_worker/service_worker_provider_context.h",
        "patchSetId": 21
      },
      "lineNbr": 151,
      "author": {
        "id": 1000781
      },
      "writtenOn": "2017-08-22T09:59:10Z",
      "side": 1,
      "message": "There are two reasons:\n- Moving ProviderContext from the document to the worker is not in the scope of this CL.\n- We need to know whether the worker is controlled by a SW or not both in the main thread and in the worker thread. It is because synchronous load such as importScritps() is handled in the main thread and synchronous load such as fetch() is handled in the worker thread. We check IsControlledByServiceWorker() and set the ServiceWorkerMode of requests in WillSendRequest().",
      "parentUuid": "5bb62a98_fa3d02aa",
      "revId": "ce36806ff8e0a25955bb7cd42e54f4cecc339439",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a43614aa_40bc3861",
        "filename": "content/common/service_worker/service_worker_provider_interfaces.mojom",
        "patchSetId": 21
      },
      "lineNbr": 16,
      "author": {
        "id": 1001472
      },
      "writtenOn": "2017-08-22T07:57:21Z",
      "side": 1,
      "message": "It feels a bit sudden / not clear what this \u0027(ex: ...)\u0027 means, could you expand the intention a bit further?",
      "revId": "ce36806ff8e0a25955bb7cd42e54f4cecc339439",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5c1ee6c9_51332995",
        "filename": "content/common/service_worker/service_worker_provider_interfaces.mojom",
        "patchSetId": 21
      },
      "lineNbr": 16,
      "author": {
        "id": 1000781
      },
      "writtenOn": "2017-08-22T09:59:10Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a43614aa_40bc3861",
      "revId": "ce36806ff8e0a25955bb7cd42e54f4cecc339439",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6f12b5f9_709e615d",
        "filename": "content/renderer/renderer_blink_platform_impl.h",
        "patchSetId": 21
      },
      "lineNbr": 326,
      "author": {
        "id": 1001472
      },
      "writtenOn": "2017-08-22T07:57:21Z",
      "side": 1,
      "message": "Oops, I think we want to have this on RenderFrameImpl for regular frames as the intention was to use per-frame loader factory (so that we can get rid of routing_id at some point)",
      "revId": "ce36806ff8e0a25955bb7cd42e54f4cecc339439",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6a89069b_8c46cd03",
        "filename": "content/renderer/renderer_blink_platform_impl.h",
        "patchSetId": 21
      },
      "lineNbr": 326,
      "author": {
        "id": 1000781
      },
      "writtenOn": "2017-08-22T09:59:10Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6f12b5f9_709e615d",
      "revId": "ce36806ff8e0a25955bb7cd42e54f4cecc339439",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}