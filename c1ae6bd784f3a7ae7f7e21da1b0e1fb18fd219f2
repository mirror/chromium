{
  "comments": [
    {
      "key": {
        "uuid": "ab5acf50_e742647c",
        "filename": "components/viz/common/frame_sinks/copy_output_result.h",
        "patchSetId": 8
      },
      "lineNbr": 71,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-11-22T18:18:14Z",
      "side": 1,
      "message": "Nit: though -\u003e when?\n\n(My impression is that this can in fact return null, but it\u0027s not 100% clear to me)",
      "range": {
        "startLine": 71,
        "startChar": 10,
        "endLine": 71,
        "endChar": 16
      },
      "revId": "c1ae6bd784f3a7ae7f7e21da1b0e1fb18fd219f2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "648ae1e8_0a681c30",
        "filename": "components/viz/common/frame_sinks/copy_output_result.h",
        "patchSetId": 8
      },
      "lineNbr": 71,
      "author": {
        "id": 1000887
      },
      "writtenOn": "2017-11-22T19:17:48Z",
      "side": 1,
      "message": "Right it returns null if the result isn\u0027t a texture format. Most code now checks the format() instead of checking for null. Done.",
      "parentUuid": "ab5acf50_e742647c",
      "range": {
        "startLine": 71,
        "startChar": 10,
        "endLine": 71,
        "endChar": 16
      },
      "revId": "c1ae6bd784f3a7ae7f7e21da1b0e1fb18fd219f2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "598bf3fc_d469fd8f",
        "filename": "services/viz/public/interfaces/compositing/copy_output_result.mojom",
        "patchSetId": 8
      },
      "lineNbr": 34,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-11-22T18:18:14Z",
      "side": 1,
      "message": "Would it make sense to add a mojo TextureResult struct? That way, we wouldn\u0027t need to construct an Optional temporary every time we serialize.",
      "range": {
        "startLine": 32,
        "startChar": 0,
        "endLine": 34,
        "endChar": 36
      },
      "revId": "c1ae6bd784f3a7ae7f7e21da1b0e1fb18fd219f2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eee965e4_e0c72e98",
        "filename": "services/viz/public/interfaces/compositing/copy_output_result.mojom",
        "patchSetId": 8
      },
      "lineNbr": 34,
      "author": {
        "id": 1000887
      },
      "writtenOn": "2017-11-22T18:23:38Z",
      "side": 1,
      "message": "Maybe.. but then it will be out of line in the wire format right? And the struct is a nested implementation detail kinda of CopyOutputResult. I don\u0027t really wanna tie the mojo format to the c++ details like that, and I don\u0027t know that I can make the mojom struct without tying it to that c++ thing can I?",
      "parentUuid": "598bf3fc_d469fd8f",
      "range": {
        "startLine": 32,
        "startChar": 0,
        "endLine": 34,
        "endChar": 36
      },
      "revId": "c1ae6bd784f3a7ae7f7e21da1b0e1fb18fd219f2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7fcffe58_7b2f7e01",
        "filename": "services/viz/public/interfaces/compositing/copy_output_result.mojom",
        "patchSetId": 8
      },
      "lineNbr": 34,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-11-22T18:34:32Z",
      "side": 1,
      "message": "I think it\u0027s out-of-line on the wire, but I\u0027m not sure if that will significantly affect serialization / deserialization speed. And it does have the advantage of logically grouping the fields that are tied to RGBA_TEXTURE.\n\nYou\u0027re also right that this would either:\n- require adding the C++ nested struct to the typemap\n- or using the mojo struct directly\n\nIf we took the typemap route, I think we\u0027d still have the temporary problem. I guess one way to work around that is to create a static for the empty Optional\u003cTextureResult\u003e...",
      "parentUuid": "eee965e4_e0c72e98",
      "range": {
        "startLine": 32,
        "startChar": 0,
        "endLine": 34,
        "endChar": 36
      },
      "revId": "c1ae6bd784f3a7ae7f7e21da1b0e1fb18fd219f2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9bf47cde_475f3927",
        "filename": "services/viz/public/interfaces/compositing/copy_output_result.mojom",
        "patchSetId": 8
      },
      "lineNbr": 34,
      "author": {
        "id": 1000887
      },
      "writtenOn": "2017-11-22T18:48:12Z",
      "side": 1,
      "message": "For option 2, putting a mojo struct into the C++ object seems like the wrong layering. These objects are used without mojo, and we\u0027re building a mojo transport mechanism. I don\u0027t want to involve mojo as a data type into non-mojo related code paths, I don\u0027t think?",
      "parentUuid": "7fcffe58_7b2f7e01",
      "range": {
        "startLine": 32,
        "startChar": 0,
        "endLine": 34,
        "endChar": 36
      },
      "revId": "c1ae6bd784f3a7ae7f7e21da1b0e1fb18fd219f2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}