{
  "comments": [
    {
      "key": {
        "uuid": "4e0970e2_5b493b9a",
        "filename": "third_party/WebKit/Source/platform/image-decoders/png/SetRGBA.h",
        "patchSetId": 6
      },
      "lineNbr": 11,
      "author": {
        "id": 1193769
      },
      "writtenOn": "2018-01-31T18:53:20Z",
      "side": 1,
      "message": "Might make things a bit easier to work with if you structure this without templates, something like,\n\nIn a header,\n\n  void SetRGBARawRow_portable(...);\n  void SetRGBARawRow(...);   // This may just call _portable() or may be its own implementation.\n\nThen in the .cc file,\n\n   void SetRGBARawRow_portable(...) { ... }\n\n#if defined(__ARM_NEON)  // Pretty sure this #define is all you need.\n   void SetRGBARawRow(...) { NEON here }\n#else\n   void SetRGBARawRow(...) { return SetRGBARawRow_portable(...); }\n#endif\n\nThat way we don\u0027t have to worry about inlining, what \u003ctrue\u003e and \u003cfalse\u003e mean, etc.",
      "revId": "9cf7ae652d470b3f2d997cb6b1d0d7c8df67f840",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0b90084a_63e2b4c1",
        "filename": "third_party/WebKit/Source/platform/image-decoders/png/SetRGBA.h",
        "patchSetId": 6
      },
      "lineNbr": 11,
      "author": {
        "id": 1189229
      },
      "writtenOn": "2018-01-31T19:20:38Z",
      "side": 1,
      "message": "Jonathan had tried that. That was my original suggestion.\nIt caused a regression because of the extra function call for each row.\n\nThat is why these functions are in a header and marked inline.\n\nMore here: https://chromium-review.googlesource.com/c/chromium/src/+/827136/4/third_party/WebKit/Source/platform/image-decoders/png/PNGImageDecoder.cpp#510",
      "parentUuid": "4e0970e2_5b493b9a",
      "revId": "9cf7ae652d470b3f2d997cb6b1d0d7c8df67f840",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a9ae24cd_cb775230",
        "filename": "third_party/WebKit/Source/platform/image-decoders/png/SetRGBA.h",
        "patchSetId": 6
      },
      "lineNbr": 11,
      "author": {
        "id": 1193769
      },
      "writtenOn": "2018-01-31T21:14:38Z",
      "side": 1,
      "message": "Yeah, sorry, I missed that the first time.  I\u0027m suggesting something slightly different, which is to have them in the same file, letting the compiler inline them, but keeping them extern for the unit tests.\n\nOr drop the unit tests entirely and make them static inline in the same source file.  These are kind of trivial functions and I\u0027m certain that by the time we\u0027re done review here they will have no bugs.",
      "parentUuid": "0b90084a_63e2b4c1",
      "revId": "9cf7ae652d470b3f2d997cb6b1d0d7c8df67f840",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e97234dc_0307d393",
        "filename": "third_party/WebKit/Source/platform/image-decoders/png/SetRGBA.h",
        "patchSetId": 6
      },
      "lineNbr": 11,
      "author": {
        "id": 1247893
      },
      "writtenOn": "2018-02-06T18:30:48Z",
      "side": 1,
      "message": "See reply to comments below.",
      "parentUuid": "a9ae24cd_cb775230",
      "revId": "9cf7ae652d470b3f2d997cb6b1d0d7c8df67f840",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "55ae9090_16546972",
        "filename": "third_party/WebKit/Source/platform/image-decoders/png/SetRGBA.h",
        "patchSetId": 6
      },
      "lineNbr": 12,
      "author": {
        "id": 1193769
      },
      "writtenOn": "2018-01-31T18:53:20Z",
      "side": 1,
      "message": "Is this really the right interface?  Since we\u0027re working with blink types, why are we using png_bytep?  Something like const uint8_t* instead?",
      "range": {
        "startLine": 12,
        "startChar": 26,
        "endLine": 12,
        "endChar": 43
      },
      "revId": "9cf7ae652d470b3f2d997cb6b1d0d7c8df67f840",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2fbaec52_cc0502a0",
        "filename": "third_party/WebKit/Source/platform/image-decoders/png/SetRGBA.h",
        "patchSetId": 6
      },
      "lineNbr": 12,
      "author": {
        "id": 1247893
      },
      "writtenOn": "2018-02-06T18:30:48Z",
      "side": 1,
      "message": "png_bytep is the type passed in by the calling function: PNGImageDecoder::RowAvailable. I can change it if you like but png_bytep is the type used within in PNGImageDecoder.cpp.",
      "parentUuid": "55ae9090_16546972",
      "range": {
        "startLine": 12,
        "startChar": 26,
        "endLine": 12,
        "endChar": 43
      },
      "revId": "9cf7ae652d470b3f2d997cb6b1d0d7c8df67f840",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b2c0df30_7a5a8c23",
        "filename": "third_party/WebKit/Source/platform/image-decoders/png/SetRGBA.h",
        "patchSetId": 6
      },
      "lineNbr": 19,
      "author": {
        "id": 1193769
      },
      "writtenOn": "2018-01-31T18:53:20Z",
      "side": 1,
      "message": "I think this code might read more clearly if you don\u0027t call blink::ImageFrame::SetRGBARaw, and instead just write this out with \u003c\u003c and | ?  It\u0027d be a little easier to see how it parallels the NEON code below for people who don\u0027t know blink::ImageFrame::SetRGBARaw.",
      "revId": "9cf7ae652d470b3f2d997cb6b1d0d7c8df67f840",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "00e43ad5_457a0232",
        "filename": "third_party/WebKit/Source/platform/image-decoders/png/SetRGBA.h",
        "patchSetId": 6
      },
      "lineNbr": 19,
      "author": {
        "id": 1247893
      },
      "writtenOn": "2018-02-06T18:30:48Z",
      "side": 1,
      "message": "Given we\u0027ve moved back to an implementation where all of the code sits in PNGImageDecoder.cpp, and the default implementation uses SetRGBARaw, let me know if you\u0027d still like me to make this change. Personally I think the calls to SetRGBARaw keep the NEON implementation tied to the portable one in a good way - it\u0027s clear we\u0027re doing the same thing.",
      "parentUuid": "b2c0df30_7a5a8c23",
      "revId": "9cf7ae652d470b3f2d997cb6b1d0d7c8df67f840",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1efabf61_86e791c0",
        "filename": "third_party/WebKit/Source/platform/image-decoders/png/SetRGBA.h",
        "patchSetId": 6
      },
      "lineNbr": 38,
      "author": {
        "id": 1193769
      },
      "writtenOn": "2018-01-31T18:53:20Z",
      "side": 1,
      "message": "Somewhere in here it\u0027d be nice to remind us what these functions are supposed to do.  It\u0027s something like\n\n// Swizzle RGBA to BGRA, and return the AND of all alpha channels.\n\nOr alternatively, let\u0027s put them near blink::ImageFrame::SetRGBARaw() itself so that we can just read that as a reference?",
      "revId": "9cf7ae652d470b3f2d997cb6b1d0d7c8df67f840",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "44a1d63e_be990bea",
        "filename": "third_party/WebKit/Source/platform/image-decoders/png/SetRGBA.h",
        "patchSetId": 6
      },
      "lineNbr": 38,
      "author": {
        "id": 1247893
      },
      "writtenOn": "2018-02-06T18:30:48Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1efabf61_86e791c0",
      "revId": "9cf7ae652d470b3f2d997cb6b1d0d7c8df67f840",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a2bc711_e9f08fc3",
        "filename": "third_party/WebKit/Source/platform/image-decoders/png/SetRGBA.h",
        "patchSetId": 6
      },
      "lineNbr": 40,
      "author": {
        "id": 1189229
      },
      "writtenOn": "2018-01-31T19:20:38Z",
      "side": 1,
      "message": "This solution works for me. Maybe rename the template param from \"optimized\" to \"use_vectorized_implementation\" or something more descriptive?\n\nAlso I see that even if someone specified \u0027true\u0027 but were on x86 for example, it would use the default implementation.\n\nI don\u0027t want to keep adding suggestions and never land your patch. But if you want (totally happy to not do this or do it in a follow-up patch), this might fit more nicely as policy based design:\n\ntemplate \u003cRowFillerPolicy\u003e\nclass RowFiller : public RowFillerPolicy {\n}\n\nclass NaiveRowFillerPolicy {\n public:\n  static SetRGBARawRow(...) { ... };\n  static SetRGBARawRowNoAlpha(...) { ... };\n}\n\nclass VectorizedRowFillerPolicy {\n public:\n  static SetRGBARawRow(...) { ... };\n  static SetRGBARawRowNoAlpha(...) { ... };\n}\n\n#ifdef NEON\ntypedef OurRowFiller RowFiller\u003cVectorizedRowFillerPolicy\u003e;\n#else\ntypedef OurRowFiller RowFiller\u003cNaiveRowFillerPolicy\u003e;\n#endif\n\nOurRowFiller foo;\nfoo.SetRGBARawRow(...);",
      "range": {
        "startLine": 40,
        "startChar": 26,
        "endLine": 40,
        "endChar": 30
      },
      "revId": "9cf7ae652d470b3f2d997cb6b1d0d7c8df67f840",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fb682b41_2a2f521b",
        "filename": "third_party/WebKit/Source/platform/image-decoders/png/SetRGBA.h",
        "patchSetId": 6
      },
      "lineNbr": 40,
      "author": {
        "id": 1193769
      },
      "writtenOn": "2018-01-31T21:14:38Z",
      "side": 1,
      "message": "I just really don\u0027t think it\u0027s that important for people to be able to call the naive version.  This is not really a common pattern, and the extra complexity of templates and looking in another file for the implementation of this is just going to be a stumbling block, particularly when it\u0027s fleshed out with all the other paths that are the likely follow-ups (premul and blending).\n\nI do think this was nice for testing, and I\u0027m somewhat open to making this unit testable if we find a way to do it that doesn\u0027t leave the code too unusual to work with or performance too compromised, but I think this CL has it a little too far tipped towards doing odd things just so we can unit test.",
      "parentUuid": "1a2bc711_e9f08fc3",
      "range": {
        "startLine": 40,
        "startChar": 26,
        "endLine": 40,
        "endChar": 30
      },
      "revId": "9cf7ae652d470b3f2d997cb6b1d0d7c8df67f840",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "46ba9d86_90765a77",
        "filename": "third_party/WebKit/Source/platform/image-decoders/png/SetRGBA.h",
        "patchSetId": 6
      },
      "lineNbr": 40,
      "author": {
        "id": 1145695
      },
      "writtenOn": "2018-02-01T05:11:25Z",
      "side": 1,
      "message": "I have the impression that most of SIMD code is written once and never touched again mostly because people are afraid of introducing regressions.\n\nOne very good way to ensure that code will be refactored if there is the need is the presence of unit tests (as if they are well written, they should flag any regression).\n\nIf the template is a major issue, perhaps we could use an easier way to handle the \u0027testability\u0027 of the new code?\n\nWhat if we follow something simpler like (in SetRGBA.h):\n#if defined(INTEL) || defined(RGBA_UTEST_ENABLED)\n// here goes the portable code.\nvoid SetRGBARawRowPortable(...)\n#endif\n#if defined(ARM) || defined(RGBA_UTEST_ENABLED)\nvoid SetRGBARawRowPortable(...)\n#endif\n\nIn such way that to enable both implementations, we just set the macro *before* including the header file in the unit test (i.e. in SetRGBAOptsTest.cpp):\n\n#define RGBA_UTEST_ENABLED\n#include \"SetRGBA.h\"\n// Here goes the test calling both functions...\n\nI agree that the template use here may be a bit too much for what we are really trying to achieve which is:\na) Inlining the function.\nb) Ensure availability of both the NEON + portable implementations in the unit test.",
      "parentUuid": "fb682b41_2a2f521b",
      "range": {
        "startLine": 40,
        "startChar": 26,
        "endLine": 40,
        "endChar": 30
      },
      "revId": "9cf7ae652d470b3f2d997cb6b1d0d7c8df67f840",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "84c90291_1b975226",
        "filename": "third_party/WebKit/Source/platform/image-decoders/png/SetRGBA.h",
        "patchSetId": 6
      },
      "lineNbr": 40,
      "author": {
        "id": 1145695
      },
      "writtenOn": "2018-02-01T05:16:01Z",
      "side": 1,
      "message": "Sorry, the second block should read SetRGBARawNEON().\n\nLike:\n#if defined(ARM) || defined(RGBA_UTEST_ENABLED)\nvoid SetRGBARawRowNeon(...)\n#endif",
      "parentUuid": "46ba9d86_90765a77",
      "range": {
        "startLine": 40,
        "startChar": 26,
        "endLine": 40,
        "endChar": 30
      },
      "revId": "9cf7ae652d470b3f2d997cb6b1d0d7c8df67f840",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3808550b_c6c13ed6",
        "filename": "third_party/WebKit/Source/platform/image-decoders/png/SetRGBA.h",
        "patchSetId": 6
      },
      "lineNbr": 40,
      "author": {
        "id": 1193769
      },
      "writtenOn": "2018-02-01T13:49:52Z",
      "side": 1,
      "message": "It\u0027s true that unit tests guarantee refactoring will happen correctly if it\u0027s attempted, but in this case I suspect the next person will come and look at this code and just decide not to do anything at all for fear of its complexity.  This patch is much more complex than the task it\u0027s trying to solve merits.  This is is just about the simplest thing you\u0027d ever try to use NEON to do, so we should strive to make it read simply too.  Complex #define logic, extra files, templates all impose a real \"WTF?\" tax on the next reader.\n\nThere is no reason that vectorized code cannot be just as clear and maintainable as any other normal scalar code, especially NEON with its strong typing and thorough support for the math operators everyone is already familiar with.  I think we can make the NEON parts of this code much less intimidating, perhaps even less intimidating than the scalar code.\n\nThis is an area that we can rely on existing larger-scale integration tests to catch problems.  If you swizzle the color channels wrong, the existing tests will look _very_ wrong.",
      "parentUuid": "84c90291_1b975226",
      "range": {
        "startLine": 40,
        "startChar": 26,
        "endLine": 40,
        "endChar": 30
      },
      "revId": "9cf7ae652d470b3f2d997cb6b1d0d7c8df67f840",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e04fa90d_14defce7",
        "filename": "third_party/WebKit/Source/platform/image-decoders/png/SetRGBA.h",
        "patchSetId": 6
      },
      "lineNbr": 40,
      "author": {
        "id": 1247893
      },
      "writtenOn": "2018-02-06T18:30:48Z",
      "side": 1,
      "message": "I have left the unit tests out of this version of the patch. We can always add them back in using Adenilson\u0027s method if deemed necessary further down the road - a full suite of tests would be useful when adding the SetRGBAPremultiply patch as the maths in that case is non-trivial.",
      "parentUuid": "3808550b_c6c13ed6",
      "range": {
        "startLine": 40,
        "startChar": 26,
        "endLine": 40,
        "endChar": 30
      },
      "revId": "9cf7ae652d470b3f2d997cb6b1d0d7c8df67f840",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "25d5eeb1_693b6d18",
        "filename": "third_party/WebKit/Source/platform/image-decoders/png/SetRGBA.h",
        "patchSetId": 6
      },
      "lineNbr": 54,
      "author": {
        "id": 1193769
      },
      "writtenOn": "2018-01-31T18:53:20Z",
      "side": 1,
      "message": "In the portable case we AND into the existing value of alpha_mask, but here we\u0027re starting at 255.  Shouldn\u0027t they be the same?",
      "range": {
        "startLine": 54,
        "startChar": 32,
        "endLine": 54,
        "endChar": 49
      },
      "revId": "9cf7ae652d470b3f2d997cb6b1d0d7c8df67f840",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5424c348_d7dca3ae",
        "filename": "third_party/WebKit/Source/platform/image-decoders/png/SetRGBA.h",
        "patchSetId": 6
      },
      "lineNbr": 54,
      "author": {
        "id": 1247893
      },
      "writtenOn": "2018-02-06T18:30:48Z",
      "side": 1,
      "message": "It doesn\u0027t matter since alpha_mask_vector is ANDed with alpha_mask, and the result assigned to alpha_mask, before we clear up the left over elements with the scalar implementation.",
      "parentUuid": "25d5eeb1_693b6d18",
      "range": {
        "startLine": 54,
        "startChar": 32,
        "endLine": 54,
        "endChar": 49
      },
      "revId": "9cf7ae652d470b3f2d997cb6b1d0d7c8df67f840",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "84333ac3_8c661ab1",
        "filename": "third_party/WebKit/Source/platform/image-decoders/png/SetRGBA.h",
        "patchSetId": 6
      },
      "lineNbr": 62,
      "author": {
        "id": 1193769
      },
      "writtenOn": "2018-01-31T18:53:20Z",
      "side": 1,
      "message": "This isn\u0027t really an endian swap, is it?  It\u0027s just rgba -\u003e bgra.",
      "range": {
        "startLine": 62,
        "startChar": 35,
        "endLine": 62,
        "endChar": 48
      },
      "revId": "9cf7ae652d470b3f2d997cb6b1d0d7c8df67f840",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "88caaea9_22fe16a8",
        "filename": "third_party/WebKit/Source/platform/image-decoders/png/SetRGBA.h",
        "patchSetId": 6
      },
      "lineNbr": 62,
      "author": {
        "id": 1247893
      },
      "writtenOn": "2018-02-06T18:30:48Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "84333ac3_8c661ab1",
      "range": {
        "startLine": 62,
        "startChar": 35,
        "endLine": 62,
        "endChar": 48
      },
      "revId": "9cf7ae652d470b3f2d997cb6b1d0d7c8df67f840",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "52bd2f8b_5b833df7",
        "filename": "third_party/WebKit/Source/platform/image-decoders/png/SetRGBA.h",
        "patchSetId": 6
      },
      "lineNbr": 68,
      "author": {
        "id": 1193769
      },
      "writtenOn": "2018-01-31T18:53:20Z",
      "side": 1,
      "message": "maybe \"into\" here?  otherwise it sort of reads like you\u0027re updating rgba.val[3].",
      "range": {
        "startLine": 68,
        "startChar": 30,
        "endLine": 68,
        "endChar": 34
      },
      "revId": "9cf7ae652d470b3f2d997cb6b1d0d7c8df67f840",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "89fe12a5_5d70708f",
        "filename": "third_party/WebKit/Source/platform/image-decoders/png/SetRGBA.h",
        "patchSetId": 6
      },
      "lineNbr": 68,
      "author": {
        "id": 1247893
      },
      "writtenOn": "2018-02-06T18:30:48Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "52bd2f8b_5b833df7",
      "range": {
        "startLine": 68,
        "startChar": 30,
        "endLine": 68,
        "endChar": 34
      },
      "revId": "9cf7ae652d470b3f2d997cb6b1d0d7c8df67f840",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a301c180_48db6cab",
        "filename": "third_party/WebKit/Source/platform/image-decoders/png/SetRGBA.h",
        "patchSetId": 6
      },
      "lineNbr": 75,
      "author": {
        "id": 1193769
      },
      "writtenOn": "2018-01-31T18:53:20Z",
      "side": 1,
      "message": "I think it might be clearer to read kPixelsPerLoad * 4 here.\n\nOr, alternatively, maybe do everything in terms of sizeof(rgba.val[0]) and sizeof(rgba)?  That way it\u0027ll be clear exactly where the numbers 16 and 64 come from.  The opaque version below could do the same with sizeof(rgb.val[0]) and sizeof(rgb).",
      "revId": "9cf7ae652d470b3f2d997cb6b1d0d7c8df67f840",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1b04b284_3804d388",
        "filename": "third_party/WebKit/Source/platform/image-decoders/png/SetRGBA.h",
        "patchSetId": 6
      },
      "lineNbr": 75,
      "author": {
        "id": 1247893
      },
      "writtenOn": "2018-02-06T18:30:48Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a301c180_48db6cab",
      "revId": "9cf7ae652d470b3f2d997cb6b1d0d7c8df67f840",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c53347b0_a2b758b9",
        "filename": "third_party/WebKit/Source/platform/image-decoders/png/SetRGBA.h",
        "patchSetId": 6
      },
      "lineNbr": 94,
      "author": {
        "id": 1193769
      },
      "writtenOn": "2018-01-31T18:53:20Z",
      "side": 1,
      "message": "Do you think the callers of this are doing anything other than comparing against 0xff?  If so, we might be able to do a little less work here, e.g. stop folding the vectorized results at 64-bit, fold the remaining couple alphas into that, then return alpha_mask_u64 \u003d\u003d 0xffffffffffffffff?",
      "revId": "9cf7ae652d470b3f2d997cb6b1d0d7c8df67f840",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3d904859_5608c79f",
        "filename": "third_party/WebKit/Source/platform/image-decoders/png/SetRGBA.h",
        "patchSetId": 6
      },
      "lineNbr": 94,
      "author": {
        "id": 1247893
      },
      "writtenOn": "2018-02-06T18:30:48Z",
      "side": 1,
      "message": "PNGImageDecoder::RowAvailable (the caller) just sets a boolean based on (alpha_mask !\u003d 255), so we could go with your suggestion. However, ANDing a uint64 with a unint8 would 0 the upper 56 bits of the uint64 without some masking? To me, this masking would negate most of the performance gain and also make the code a little less readable.",
      "parentUuid": "c53347b0_a2b758b9",
      "revId": "9cf7ae652d470b3f2d997cb6b1d0d7c8df67f840",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6c1c4dc2_83ea3bec",
        "filename": "third_party/WebKit/Source/platform/image-decoders/png/SetRGBA.h",
        "patchSetId": 6
      },
      "lineNbr": 98,
      "author": {
        "id": 1193769
      },
      "writtenOn": "2018-01-31T18:53:20Z",
      "side": 1,
      "message": "This one is\n\n  // Swizzle RGB to opaque BGRA.\n\nright?",
      "revId": "9cf7ae652d470b3f2d997cb6b1d0d7c8df67f840",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "71edcf98_86f102a8",
        "filename": "third_party/WebKit/Source/platform/image-decoders/png/SetRGBA.h",
        "patchSetId": 6
      },
      "lineNbr": 98,
      "author": {
        "id": 1247893
      },
      "writtenOn": "2018-02-06T18:30:48Z",
      "side": 1,
      "message": "Correct, added the comment to explain it.",
      "parentUuid": "6c1c4dc2_83ea3bec",
      "revId": "9cf7ae652d470b3f2d997cb6b1d0d7c8df67f840",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}