{
  "comments": [
    {
      "key": {
        "uuid": "4dec7a86_fae12703",
        "filename": "chrome/browser/resources/md_extensions/code_section.html",
        "patchSetId": 9
      },
      "lineNbr": 62,
      "author": {
        "id": 1136204
      },
      "writtenOn": "2017-12-20T02:21:08Z",
      "side": 1,
      "message": "optional: would it make sense to use an ellipses character? Even though I\u0027m mentioning it, I\u0027m going to vote against it (I prefer ...), but my opinion shouldn\u0027t stop us from considering both options.",
      "revId": "d8057c5b32afd8d45c11a62ac9db99483318c345",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7144f567_4b6c8910",
        "filename": "chrome/browser/resources/md_extensions/code_section.js",
        "patchSetId": 9
      },
      "lineNbr": 5,
      "author": {
        "id": 1115893
      },
      "writtenOn": "2017-12-19T18:49:28Z",
      "side": 1,
      "message": "@param, @return (here and elsewhere in this file).",
      "revId": "d8057c5b32afd8d45c11a62ac9db99483318c345",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1f590b2d_6fe37fbb",
        "filename": "chrome/browser/resources/md_extensions/code_section.js",
        "patchSetId": 9
      },
      "lineNbr": 5,
      "author": {
        "id": 1214259
      },
      "writtenOn": "2017-12-20T00:03:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7144f567_4b6c8910",
      "revId": "d8057c5b32afd8d45c11a62ac9db99483318c345",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b528a7d8_44abc0de",
        "filename": "chrome/browser/resources/md_extensions/code_section.js",
        "patchSetId": 9
      },
      "lineNbr": 11,
      "author": {
        "id": 1136204
      },
      "writtenOn": "2017-12-19T01:00:15Z",
      "side": 1,
      "message": "It\u0027s rather likely that something (lower level) will convert \\r\\n (or just \\r) to \\n for us, but could we confirm that? i.e. confirm that we don\u0027t need to handle \\r in this code",
      "revId": "d8057c5b32afd8d45c11a62ac9db99483318c345",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8c74e732_b844e55e",
        "filename": "chrome/browser/resources/md_extensions/code_section.js",
        "patchSetId": 9
      },
      "lineNbr": 11,
      "author": {
        "id": 1214259
      },
      "writtenOn": "2017-12-20T00:03:55Z",
      "side": 1,
      "message": "I just tested in Chrome, even using white-space:pre it doesn\u0027t do anything with the \\r, so we\u0027ll get a correct count/split without handling \\r anyway.",
      "parentUuid": "b528a7d8_44abc0de",
      "revId": "d8057c5b32afd8d45c11a62ac9db99483318c345",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ea8449bd_6227f393",
        "filename": "chrome/browser/resources/md_extensions/code_section.js",
        "patchSetId": 9
      },
      "lineNbr": 25,
      "author": {
        "id": 1136204
      },
      "writtenOn": "2017-12-19T01:00:15Z",
      "side": 1,
      "message": "Suggest removing the \" - 1\".\n\nNot all coding standards require a trailing blank line. So \"foo\\nbar\" will show up as one line. Removing the -1 also means that \"foo\\nbar\\n\" will appear as three lines, but it is three lines (so that\u0027s a good thing).",
      "revId": "d8057c5b32afd8d45c11a62ac9db99483318c345",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3ddfa2a2_36cba8c1",
        "filename": "chrome/browser/resources/md_extensions/code_section.js",
        "patchSetId": 9
      },
      "lineNbr": 25,
      "author": {
        "id": 1214259
      },
      "writtenOn": "2017-12-20T00:03:55Z",
      "side": 1,
      "message": "the substring logic will always snip next to a \\n, so split will always count one extra.",
      "parentUuid": "ea8449bd_6227f393",
      "revId": "d8057c5b32afd8d45c11a62ac9db99483318c345",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "eac7d6bc_69abc8fc",
        "filename": "chrome/browser/resources/md_extensions/code_section.js",
        "patchSetId": 9
      },
      "lineNbr": 25,
      "author": {
        "id": 1136204
      },
      "writtenOn": "2017-12-20T02:21:08Z",
      "side": 1,
      "message": "That\u0027s cool, but how about a comment saying that (i.e. the code looks wrong without explanation).",
      "parentUuid": "3ddfa2a2_36cba8c1",
      "revId": "d8057c5b32afd8d45c11a62ac9db99483318c345",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "185545fe_79040c30",
        "filename": "chrome/browser/resources/md_extensions/code_section.js",
        "patchSetId": 9
      },
      "lineNbr": 29,
      "author": {
        "id": 1115893
      },
      "writtenOn": "2017-12-19T18:49:28Z",
      "side": 1,
      "message": "Can me move all helper methods within this scope, such that they are not unnecessarily global?",
      "revId": "d8057c5b32afd8d45c11a62ac9db99483318c345",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7cd052aa_9ffd812a",
        "filename": "chrome/browser/resources/md_extensions/code_section.js",
        "patchSetId": 9
      },
      "lineNbr": 29,
      "author": {
        "id": 1214259
      },
      "writtenOn": "2017-12-20T00:03:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "185545fe_79040c30",
      "revId": "d8057c5b32afd8d45c11a62ac9db99483318c345",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a009d362_7ba0d418",
        "filename": "chrome/browser/resources/md_extensions/code_section.js",
        "patchSetId": 9
      },
      "lineNbr": 110,
      "author": {
        "id": 1115893
      },
      "writtenOn": "2017-12-19T18:49:28Z",
      "side": 1,
      "message": "The equivalent I18nBehavior code to create parametrized localized strings does a bit more than just this, see https://cs.chromium.org/chromium/src/ui/webui/resources/js/i18n_behavior.js?l\u003d48.\n\nShould we use this.i18n() here, and move the string ID from C++ to the JS for this reason?",
      "range": {
        "startLine": 110,
        "startChar": 37,
        "endLine": 110,
        "endChar": 39
      },
      "revId": "d8057c5b32afd8d45c11a62ac9db99483318c345",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7a1e76bc_8aa4eb03",
        "filename": "chrome/browser/resources/md_extensions/code_section.js",
        "patchSetId": 9
      },
      "lineNbr": 110,
      "author": {
        "id": 1136204
      },
      "writtenOn": "2017-12-19T19:20:53Z",
      "side": 1,
      "message": "In this case the string and the replacement are controlled so the bit more is unnecessary. The replacement is also a number; that is unable to generate an XSS. If we did desire an extra layer of armor, we could either assert that lineCount is a number, or call parseInt on lineCount (optional and unnecessary imo, but wouldn\u0027t hurt that much).",
      "parentUuid": "a009d362_7ba0d418",
      "range": {
        "startLine": 110,
        "startChar": 37,
        "endLine": 110,
        "endChar": 39
      },
      "revId": "d8057c5b32afd8d45c11a62ac9db99483318c345",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ce491eb4_68c709b6",
        "filename": "chrome/browser/resources/md_extensions/code_section.js",
        "patchSetId": 9
      },
      "lineNbr": 110,
      "author": {
        "id": 1115893
      },
      "writtenOn": "2017-12-19T19:25:57Z",
      "side": 1,
      "message": "I am more worried about others following this pattern as an example, in cases where the contents are not controlled by us.\n\nAlso I don\u0027t recall any other place in the code where we directly refer to the placeholders $1..$9. My understanding is that this are considered implementation details, and are meant to be hidden behind the loadTimeData.getStringF() API.",
      "parentUuid": "7a1e76bc_8aa4eb03",
      "range": {
        "startLine": 110,
        "startChar": 37,
        "endLine": 110,
        "endChar": 39
      },
      "revId": "d8057c5b32afd8d45c11a62ac9db99483318c345",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0964409f_3297bbeb",
        "filename": "chrome/browser/resources/md_extensions/code_section.js",
        "patchSetId": 9
      },
      "lineNbr": 110,
      "author": {
        "id": 1214259
      },
      "writtenOn": "2017-12-20T00:03:55Z",
      "side": 1,
      "message": "I\u0027ll use loadTimeData.substituteString so I don\u0027t have to refer to the token nor the string ID in the js code.",
      "parentUuid": "ce491eb4_68c709b6",
      "range": {
        "startLine": 110,
        "startChar": 37,
        "endLine": 110,
        "endChar": 39
      },
      "revId": "d8057c5b32afd8d45c11a62ac9db99483318c345",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}