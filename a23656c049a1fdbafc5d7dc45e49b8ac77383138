{
  "comments": [
    {
      "key": {
        "uuid": "315187c2_e6a0f502",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 10,
      "author": {
        "id": 1115963
      },
      "writtenOn": "2017-12-06T02:58:31Z",
      "side": 1,
      "message": "All the refactors you\u0027re making in this CL change JoinString (not operator+) to StrCat. Is there a performance benefit to using StrCat over JoinString? (I ask because of my suggestion below.)",
      "revId": "a23656c049a1fdbafc5d7dc45e49b8ac77383138",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "892cc9a8_dd1c1751",
        "filename": "base/strings/strcat.cc",
        "patchSetId": 6
      },
      "lineNbr": 29,
      "author": {
        "id": 1115963
      },
      "writtenOn": "2017-12-06T02:58:31Z",
      "side": 1,
      "message": "Is there a good reason to have a divergent implementation from base::JoinString? (Even though this implementation is simpler, due to not having a separator, is there a performance cost to dealing with the empty separator?)\n\nYou could augment base::JoinStringT to also take a std::string* dest, and then JoinString, StrAppend and StrCat could all use the same code.",
      "revId": "a23656c049a1fdbafc5d7dc45e49b8ac77383138",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "baed38e7_58bb2cf8",
        "filename": "base/strings/strcat.cc",
        "patchSetId": 6
      },
      "lineNbr": 29,
      "author": {
        "id": 1002691
      },
      "writtenOn": "2017-12-06T05:18:15Z",
      "side": 1,
      "message": "The goal is to replace current sequences of operator + for string concatenation. Having each of those places need to supply a second argument of an empty string seems undesirable.\n\nThis patch started off as a function that takes many arguments (see patch 2) and in that case the two versions could not be unified.\n\nIf we do want to keep the initializer-list-only approach, it might be interesting to consider a default separator argument of an empty string piece. It would make the call sites larger which is not so great (I would expect thousands) but maybe not horrible. I am not concerned about performance at this level.\n\nIf we do keep them separate, I personally prefer StrCat since it matches a C concept. I called it this before I knew of the Abseil one.",
      "parentUuid": "892cc9a8_dd1c1751",
      "revId": "a23656c049a1fdbafc5d7dc45e49b8ac77383138",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a20cd27a_b7505f12",
        "filename": "base/strings/strcat.cc",
        "patchSetId": 6
      },
      "lineNbr": 29,
      "author": {
        "id": 1115963
      },
      "writtenOn": "2017-12-06T06:23:04Z",
      "side": 1,
      "message": "\u003e Having each of those places need to supply a second argument of an empty string seems undesirable.\n\nI\u0027m not talking about the interface, but whether the implementation can be shared with JoinString\u0027s? (i.e., StrCat just calls JoinString with \"\").\n\nWould that suffer a performance penalty due to processing the empty delimiter, versus this separate implementation?\n\nTo be clear, I think having StrCat that does not take a delimiter is great, especially since most call sites seem to pass \"\". It could just be an overload of JoinString though, instead of a separate method in a separate file with a separate implementation that is really just a special case. (An overload, rather than a default argument, would avoid bloating all the call sites.)",
      "parentUuid": "baed38e7_58bb2cf8",
      "revId": "a23656c049a1fdbafc5d7dc45e49b8ac77383138",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6d53e298_10dfc558",
        "filename": "base/strings/strcat.cc",
        "patchSetId": 6
      },
      "lineNbr": 29,
      "author": {
        "id": 1002691
      },
      "writtenOn": "2017-12-06T15:19:40Z",
      "side": 1,
      "message": "I think it\u0027s fine to share implementations. I do really want the separate file though, and think that the JoinString methods should be moved to strcat.h. I have beel trying to move things out of string_util.h for about 9 years now, as almost everything in base/strings used to be in there.",
      "parentUuid": "a20cd27a_b7505f12",
      "revId": "a23656c049a1fdbafc5d7dc45e49b8ac77383138",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f441d190_66afb6b2",
        "filename": "base/strings/strcat.cc",
        "patchSetId": 6
      },
      "lineNbr": 29,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-12-06T19:53:43Z",
      "side": 1,
      "message": "I think it\u0027s fine to share implementations, but if we\u0027re going to go to the trouble of moving things, I think we should keep StrCat and JoinStrings in separate headers. They\u0027re similar conceptually, but ultimately, they\u0027re not quite the same either. The fact that StrCat happens to work with containers just like JoinStrings() is a detail of the current implementation that I see as something that could potentially change down the road, whereas JoinStrings() is always going to work with containers.\n\nGranted this is because I\u0027m still not very fond of the ilist overload...",
      "parentUuid": "6d53e298_10dfc558",
      "revId": "a23656c049a1fdbafc5d7dc45e49b8ac77383138",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4297bd90_82738b82",
        "filename": "base/strings/strcat.cc",
        "patchSetId": 6
      },
      "lineNbr": 29,
      "author": {
        "id": 1002691
      },
      "writtenOn": "2017-12-06T20:46:56Z",
      "side": 1,
      "message": "I think we shouldn\u0027t worry too much about sharing implementations. We can merge it if it\u0027s convenient, but otherwise not. It\u0027s only a few lines of relatively simple code.",
      "parentUuid": "f441d190_66afb6b2",
      "revId": "a23656c049a1fdbafc5d7dc45e49b8ac77383138",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "127be37c_e6c3d749",
        "filename": "base/strings/strcat.h",
        "patchSetId": 6
      },
      "lineNbr": 55,
      "author": {
        "id": 1115963
      },
      "writtenOn": "2017-12-06T02:58:31Z",
      "side": 1,
      "message": "Can this be called ConcatString and AppendString for consistency with JoinString? (Is the reason to call it StrCat and StrAppend for consistency with Abseil? Is that something we care about over consistency with our own base libraries?)",
      "revId": "a23656c049a1fdbafc5d7dc45e49b8ac77383138",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}