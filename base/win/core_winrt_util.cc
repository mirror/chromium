// Copyright 2017 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "base/win/core_winrt_util.h"

#include <delayimp.h>

#include "base/threading/thread_restrictions.h"

namespace {

// A frame-based exception handler filter function for a handler for exceptions
// generated by the Visual C++ delay loader helper function.
int FilterVisualCPPExceptions(DWORD exception_code) {
  return HRESULT_FACILITY(exception_code) == FACILITY_VISUALCPP
             ? EXCEPTION_EXECUTE_HANDLER
             : EXCEPTION_CONTINUE_SEARCH;
}

}  // namespace

namespace base {
namespace win {

bool ResolveCoreWinRTDelayload() {
  ThreadRestrictions::AssertIOAllowed();

  static const bool load_succeeded = []() {
    HRESULT hr = E_FAIL;
    __try {
      hr = __HrLoadAllImportsForDll("api-ms-win-core-winrt-l1-1-0.dll");
    } __except (FilterVisualCPPExceptions(::GetExceptionCode())) {
      hr = E_FAIL;
    }
    return SUCCEEDED(hr);
  }();
  return load_succeeded;
}

HRESULT RoGetActivationFactory(HSTRING class_id,
                               const IID& iid,
                               void** out_factory) {
  return ::RoGetActivationFactory(class_id, iid, out_factory);
}

HRESULT RoActivateInstance(HSTRING class_id, IInspectable** instance) {
  return ::RoActivateInstance(class_id, instance);
}

}  // namespace win
}  // namespace base
