// Copyright 2017 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "base/win/scoped_hstring.h"

#include <delayimp.h>

#include "base/logging.h"
#include "base/strings/utf_string_conversions.h"
#include "base/win/com_base_util.h"

namespace {

// A frame-based exception handler filter function for a handler for exceptions
// generated by the Visual C++ delay loader helper function.
int FilterVisualCPPExceptions(DWORD exception_code) {
  return HRESULT_FACILITY(exception_code) == FACILITY_VISUALCPP
             ? EXCEPTION_EXECUTE_HANDLER
             : EXCEPTION_CONTINUE_SEARCH;
}

}  // namespace

namespace base {
namespace win {

// static
HSTRING ScopedHStringTraits::InvalidValue() {
  return nullptr;
}

// static
void ScopedHStringTraits::Free(HSTRING hstr) {
  WindowsDeleteString(hstr);
}

ScopedHString::ScopedHString(const base::char16* str) : ScopedGeneric(nullptr) {
  HSTRING hstr;
  HRESULT hr =
      WindowsCreateString(str, static_cast<uint32_t>(wcslen(str)), &hstr);
  if (FAILED(hr))
    VLOG(1) << "WindowsCreateString failed";
  else
    reset(hstr);
}

// static
bool ScopedHString::PreloadRequiredFunctions() {
  static enum {
    LOAD_STATUS_UNKNOWN,
    LOAD_STATUS_DONE,
    LOAD_SATUS_FAIL,
  } has_loaded = LOAD_STATUS_UNKNOWN;

  if (has_loaded == LOAD_STATUS_UNKNOWN) {
    HRESULT hr = E_FAIL;
    __try {
      hr = __HrLoadAllImportsForDll("api-ms-win-core-winrt-string-l1-1-0.dll");
    } __except (FilterVisualCPPExceptions(::GetExceptionCode())) {
      hr = E_FAIL;
    }
    has_loaded = SUCCEEDED(hr) ? LOAD_STATUS_DONE : LOAD_SATUS_FAIL;
  }
  return has_loaded == LOAD_STATUS_DONE;
}

// static
std::string ScopedHString::HStringToString(HSTRING hstr) {
  // Note: empty HSTRINGs are represent as nullptr, and instantiating
  // std::string with nullptr (in base::WideToUTF8) is undefined behavior.
  const base::char16* buffer = WindowsGetStringRawBuffer(hstr, nullptr);
  if (buffer)
    return base::WideToUTF8(buffer);
  return std::string();
}

}  // namespace win
}  // namespace base
