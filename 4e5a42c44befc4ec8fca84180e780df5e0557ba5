{
  "comments": [
    {
      "key": {
        "uuid": "7395cec0_2ec73866",
        "filename": "build/config/c++/c++.gni",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 1001629
      },
      "writtenOn": "2017-08-18T23:01:18Z",
      "side": 1,
      "message": "Can\u0027t you explicitly set this to false for your internal bots?",
      "range": {
        "startLine": 11,
        "startChar": 4,
        "endLine": 11,
        "endChar": 68
      },
      "revId": "4e5a42c44befc4ec8fca84180e780df5e0557ba5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a5701914_06b2e0c1",
        "filename": "build/config/c++/c++.gni",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 1176174
      },
      "writtenOn": "2017-08-18T23:14:15Z",
      "side": 1,
      "message": "We had this explicitly set false internally, but are now having issues building the new c++14 stuff that got introduced recently for the host_cpu (b/64850365), so we want the x86/x64 host components to build with the chromium libc++ and then use our libc++ to build the device/arm components",
      "parentUuid": "7395cec0_2ec73866",
      "range": {
        "startLine": 11,
        "startChar": 4,
        "endLine": 11,
        "endChar": 68
      },
      "revId": "4e5a42c44befc4ec8fca84180e780df5e0557ba5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f1112c89_dad6c796",
        "filename": "build/config/c++/c++.gni",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 1176174
      },
      "writtenOn": "2017-08-19T14:36:10Z",
      "side": 1,
      "message": "Ugh, I thought I had a great idea of setting use_custom_libcxx \u003d false explicitly just in our custom toolchain\u0027s toolchain_args, but of course we pass that in as the \"custom_toolchain\" arg, so it gets set as the default toolchain and the toolchain_args are intentionally ignored by gn for the default toolchain :(\n\nhttps://cs.chromium.org/chromium/src/build/config/BUILDCONFIG.gn?q\u003dcustom_toolchain\u0026sq\u003dpackage:chromium\u0026l\u003d266\nhttps://chromium.googlesource.com/chromium/src/+/master/tools/gn/docs/reference.md#functions-and-variables",
      "parentUuid": "a5701914_06b2e0c1",
      "range": {
        "startLine": 11,
        "startChar": 4,
        "endLine": 11,
        "endChar": 68
      },
      "revId": "4e5a42c44befc4ec8fca84180e780df5e0557ba5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2df22c97_ef56dfa9",
        "filename": "build/config/c++/c++.gni",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 1176174
      },
      "writtenOn": "2017-08-19T15:14:41Z",
      "side": 1,
      "message": "I also tried passing \u0027use_custom_libcxx \u003d current_cpu!\u003d\"arm\"\u0027 via the args.gn, but gn complains that current_cpu is an \u0027undefined identifier\u0027 at that point. I was a bit surprised by that, since https://chromium.googlesource.com/chromium/src/+/master/tools/gn/docs/reference.md#how-build-arguments-are-set says that current_cpu is one of the first values set, but seems the other buildargs are not in scope for the args.gn\n\n+brettw is that expected / intentional?",
      "parentUuid": "f1112c89_dad6c796",
      "range": {
        "startLine": 11,
        "startChar": 4,
        "endLine": 11,
        "endChar": 68
      },
      "revId": "4e5a42c44befc4ec8fca84180e780df5e0557ba5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "17023fad_662b32f4",
        "filename": "build/config/c++/c++.gni",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 1002691
      },
      "writtenOn": "2017-08-20T15:57:19Z",
      "side": 1,
      "message": "Yes, those things aren\u0027t defined at the time when args.gn is evaluated. But that\u0027s normally not an issue since you should know the CPU arch for the build your args.gn is for.",
      "parentUuid": "2df22c97_ef56dfa9",
      "range": {
        "startLine": 11,
        "startChar": 4,
        "endLine": 11,
        "endChar": 68
      },
      "revId": "4e5a42c44befc4ec8fca84180e780df5e0557ba5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eb77fcf7_597a20c4",
        "filename": "build/config/c++/c++.gni",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 1176174
      },
      "writtenOn": "2017-08-20T16:56:19Z",
      "side": 1,
      "message": "Indeed, we know the args.gn is for our arm devices and we set target_cpu\u003d\"arm\" in the same args.gn, but we need different values for use_custom_libcxx depending on whether current_cpu \u003d\u003d target_cpu (\"arm\"), or current_cpu \u003d\u003d host_cpu (\"x64\")",
      "parentUuid": "17023fad_662b32f4",
      "range": {
        "startLine": 11,
        "startChar": 4,
        "endLine": 11,
        "endChar": 68
      },
      "revId": "4e5a42c44befc4ec8fca84180e780df5e0557ba5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "de2830a3_f8ef2d05",
        "filename": "build/config/c++/c++.gni",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 1176174
      },
      "writtenOn": "2017-08-21T20:57:42Z",
      "side": 1,
      "message": "Another idea:\n\nAdd a new var: \"use_custom_libcxx_on_host\" that defaults false and then make this condition read:\n\n use_custom_libcxx \u003d\n      is_msan || is_fuchsia || (use_custom_libcxx_on_host \u0026\u0026 current_cpu \u003d\u003d host_cpu) ||\n      (is_linux \u0026\u0026 is_clang \u0026\u0026\n       (!is_chromeos || default_toolchain !\u003d \"//build/toolchain/cros:target\"))\n\n\nAnd then we can set use_custom_libcxx_on_host \u003d True on our internal builders, and it will default False everywhere else",
      "parentUuid": "eb77fcf7_597a20c4",
      "range": {
        "startLine": 11,
        "startChar": 4,
        "endLine": 11,
        "endChar": 68
      },
      "revId": "4e5a42c44befc4ec8fca84180e780df5e0557ba5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ebec4653_b6a6ee91",
        "filename": "build/config/c++/c++.gni",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 1001629
      },
      "writtenOn": "2017-08-25T20:07:14Z",
      "side": 1,
      "message": "That sounds good to me.",
      "parentUuid": "de2830a3_f8ef2d05",
      "range": {
        "startLine": 11,
        "startChar": 4,
        "endLine": 11,
        "endChar": 68
      },
      "revId": "4e5a42c44befc4ec8fca84180e780df5e0557ba5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "26d5829d_70f4c9d4",
        "filename": "build/config/c++/c++.gni",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 1176174
      },
      "writtenOn": "2017-08-25T20:10:05Z",
      "side": 1,
      "message": "oh, derp, this doesn\u0027t actually do what I need it to, since it won\u0027t set use_custom_libcxx \u003d false if use_custom_libcxx_on_host is true and current_cpu \u003d\u003d target_cpu, since it will still evaluate true from the is_linux \u0026\u0026 is_clang clause.",
      "parentUuid": "de2830a3_f8ef2d05",
      "range": {
        "startLine": 11,
        "startChar": 4,
        "endLine": 11,
        "endChar": 68
      },
      "revId": "4e5a42c44befc4ec8fca84180e780df5e0557ba5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}