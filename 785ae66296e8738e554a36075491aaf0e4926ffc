{
  "comments": [
    {
      "key": {
        "uuid": "2ca73ddd_ade6e3ab",
        "filename": "net/http/http_server_properties_impl.cc",
        "patchSetId": 2
      },
      "lineNbr": 598,
      "author": {
        "id": 1116006
      },
      "writtenOn": "2017-11-06T19:46:58Z",
      "side": 1,
      "message": "nit: early return here to avoid extra indenting:\n\nif (it !\u003d end())\n  return it-\u003esecond;\n...",
      "range": {
        "startLine": 598,
        "startChar": 42,
        "endLine": 598,
        "endChar": 0
      },
      "revId": "785ae66296e8738e554a36075491aaf0e4926ffc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3238d961_51a7f26b",
        "filename": "net/http/http_server_properties_impl.cc",
        "patchSetId": 2
      },
      "lineNbr": 598,
      "author": {
        "id": 1143554
      },
      "writtenOn": "2017-11-06T22:07:29Z",
      "side": 1,
      "message": "Done. Looks better now.",
      "parentUuid": "2ca73ddd_ade6e3ab",
      "range": {
        "startLine": 598,
        "startChar": 42,
        "endLine": 598,
        "endChar": 0
      },
      "revId": "785ae66296e8738e554a36075491aaf0e4926ffc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "eee3e93a_6de2cb68",
        "filename": "net/http/http_server_properties_impl.cc",
        "patchSetId": 2
      },
      "lineNbr": 599,
      "author": {
        "id": 1157934
      },
      "writtenOn": "2017-11-06T18:54:36Z",
      "side": 1,
      "message": "Canonical suffix only applies to HTTPS, how about check the scheme and return nullptr if scheme is HTTP?",
      "range": {
        "startLine": 599,
        "startChar": 79,
        "endLine": 599,
        "endChar": 0
      },
      "revId": "785ae66296e8738e554a36075491aaf0e4926ffc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9550cb41_68fc1bba",
        "filename": "net/http/http_server_properties_impl.cc",
        "patchSetId": 2
      },
      "lineNbr": 599,
      "author": {
        "id": 1143554
      },
      "writtenOn": "2017-11-06T22:07:29Z",
      "side": 1,
      "message": "That would be good optimization but QuicServerId doesn\u0027t have a scheme associated with it. It looks that \"https\" is implied.",
      "parentUuid": "eee3e93a_6de2cb68",
      "range": {
        "startLine": 599,
        "startChar": 79,
        "endLine": 599,
        "endChar": 0
      },
      "revId": "785ae66296e8738e554a36075491aaf0e4926ffc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d8ac6573_13237743",
        "filename": "net/http/http_server_properties_impl.cc",
        "patchSetId": 2
      },
      "lineNbr": 599,
      "author": {
        "id": 1116006
      },
      "writtenOn": "2017-11-06T23:13:29Z",
      "side": 1,
      "message": "QUIC is only for secure URLs to HTTPS should be fine.",
      "parentUuid": "9550cb41_68fc1bba",
      "range": {
        "startLine": 599,
        "startChar": 79,
        "endLine": 599,
        "endChar": 0
      },
      "revId": "785ae66296e8738e554a36075491aaf0e4926ffc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "52746ca4_463877b4",
        "filename": "net/http/http_server_properties_impl.cc",
        "patchSetId": 2
      },
      "lineNbr": 599,
      "author": {
        "id": 1143554
      },
      "writtenOn": "2017-11-06T23:47:31Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "d8ac6573_13237743",
      "range": {
        "startLine": 599,
        "startChar": 79,
        "endLine": 599,
        "endChar": 0
      },
      "revId": "785ae66296e8738e554a36075491aaf0e4926ffc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a3115bd_6f1e345d",
        "filename": "net/http/http_server_properties_impl.cc",
        "patchSetId": 2
      },
      "lineNbr": 605,
      "author": {
        "id": 1157934
      },
      "writtenOn": "2017-11-06T18:54:36Z",
      "side": 1,
      "message": "nit: If I read it correctly, the comment and code are out of sync. We are actually iterating in MRU order, and returns the most recent server that matches the canonical suffix?",
      "range": {
        "startLine": 605,
        "startChar": 52,
        "endLine": 605,
        "endChar": 0
      },
      "revId": "785ae66296e8738e554a36075491aaf0e4926ffc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1dbd226b_36e5ba2f",
        "filename": "net/http/http_server_properties_impl.cc",
        "patchSetId": 2
      },
      "lineNbr": 605,
      "author": {
        "id": 1143554
      },
      "writtenOn": "2017-11-06T22:07:29Z",
      "side": 1,
      "message": "Thanks for spotting it. Yes, I meant MRU. Not even sure what RLU is :)",
      "parentUuid": "5a3115bd_6f1e345d",
      "range": {
        "startLine": 605,
        "startChar": 52,
        "endLine": 605,
        "endChar": 0
      },
      "revId": "785ae66296e8738e554a36075491aaf0e4926ffc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0636c9c3_33fc6450",
        "filename": "net/http/http_server_properties_impl.cc",
        "patchSetId": 2
      },
      "lineNbr": 619,
      "author": {
        "id": 1116006
      },
      "writtenOn": "2017-11-06T19:46:58Z",
      "side": 1,
      "message": "Instead of doing this, \u0027how \u0027bout doing what we do in other places where check for a canonical server. Namely, call the GetCanonicalHost() method. Something like:\n\n  url::SchemeHostPort server(\"https\", server_id.host(),\n                             server_id.port());\n  CanonicalHostMap::const_iterator canonical \u003d GetCanonicalHost(server);",
      "range": {
        "startLine": 619,
        "startChar": 3,
        "endLine": 619,
        "endChar": 0
      },
      "revId": "785ae66296e8738e554a36075491aaf0e4926ffc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b4025abd_ba84cb85",
        "filename": "net/http/http_server_properties_impl.cc",
        "patchSetId": 2
      },
      "lineNbr": 619,
      "author": {
        "id": 1143554
      },
      "writtenOn": "2017-11-06T22:07:29Z",
      "side": 1,
      "message": "Here I need some help with understanding. According to the code, GetCanonicalHost(...) searches in |canonical_host_to_origin_map_|, which is not the same map as |quic_server_info_map_|. I don\u0027t see |canonical_host_to_origin_map_| is populated when we set QUIC server info.",
      "parentUuid": "0636c9c3_33fc6450",
      "range": {
        "startLine": 619,
        "startChar": 3,
        "endLine": 619,
        "endChar": 0
      },
      "revId": "785ae66296e8738e554a36075491aaf0e4926ffc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "efdc1f27_f46b991c",
        "filename": "net/http/http_server_properties_impl.cc",
        "patchSetId": 2
      },
      "lineNbr": 619,
      "author": {
        "id": 1116006
      },
      "writtenOn": "2017-11-06T23:13:29Z",
      "side": 1,
      "message": "Ah. Sorry. So with canonical suffixes, we don\u0027t want to have to search through an entire list of servers looking to see if we have an entry for one which has the same suffix as the current. So to avoid this problem, we have a map from \"canonical suffix\" to \"canonical servers\", e.g. \"googlevideo.com\" \u003d\u003e \"foo.googlevideo.com\". So if we look for \"bar.googlevideo.com\" and fail to find it, we can then look into canonical_host_to_origin_map_ and find \"foo.googlevideo.com\" which we can then use as the host in question.\n\nDoes that sound plausible?\n\n(If we\u0027re not populating that when we populate QuicServerInfo, like we do when we populate alt-svc, then we should probably do that too as part of this CL, I think)",
      "parentUuid": "b4025abd_ba84cb85",
      "range": {
        "startLine": 619,
        "startChar": 3,
        "endLine": 619,
        "endChar": 0
      },
      "revId": "785ae66296e8738e554a36075491aaf0e4926ffc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4dcf21da_740a54b6",
        "filename": "net/http/http_server_properties_impl.cc",
        "patchSetId": 2
      },
      "lineNbr": 619,
      "author": {
        "id": 1143554
      },
      "writtenOn": "2017-11-06T23:47:31Z",
      "side": 1,
      "message": "That sounds plausible. What should happen if multiple hosts map to the same canonical name? The CanonicalHostMap has 1-to-1 relationship. I guess we only need to hold the reference to the MRU origin for a given canonical host.\n\nWe don\u0027t populate QuicServerInfo. I will add it to this CL.",
      "parentUuid": "efdc1f27_f46b991c",
      "range": {
        "startLine": 619,
        "startChar": 3,
        "endLine": 619,
        "endChar": 0
      },
      "revId": "785ae66296e8738e554a36075491aaf0e4926ffc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eec2fc45_6b5ae30f",
        "filename": "net/http/http_server_properties_impl.cc",
        "patchSetId": 2
      },
      "lineNbr": 619,
      "author": {
        "id": 1143554
      },
      "writtenOn": "2017-11-06T23:50:27Z",
      "side": 1,
      "message": "Sorry, I meant we don\u0027t populate |canonical_host_to_origin_map_| when we populate QuicServerInfo.",
      "parentUuid": "4dcf21da_740a54b6",
      "range": {
        "startLine": 619,
        "startChar": 3,
        "endLine": 619,
        "endChar": 0
      },
      "revId": "785ae66296e8738e554a36075491aaf0e4926ffc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "00e72c42_f1a671ad",
        "filename": "net/http/http_server_properties_impl.cc",
        "patchSetId": 2
      },
      "lineNbr": 619,
      "author": {
        "id": 1116006
      },
      "writtenOn": "2017-11-07T00:24:56Z",
      "side": 1,
      "message": "If there are multiple hosts which share the same suffix, only the first host ends up in the canonical map. But once the new host gets an alt-svc mapping of it\u0027s own (or a quic server info) it\u0027ll get an explicit entry in the main map, and we won\u0027t need to use the canonical map again. Does that help?",
      "parentUuid": "eec2fc45_6b5ae30f",
      "range": {
        "startLine": 619,
        "startChar": 3,
        "endLine": 619,
        "endChar": 0
      },
      "revId": "785ae66296e8738e554a36075491aaf0e4926ffc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e09dd83e_229da1aa",
        "filename": "net/http/http_server_properties_impl.cc",
        "patchSetId": 2
      },
      "lineNbr": 619,
      "author": {
        "id": 1143554
      },
      "writtenOn": "2017-11-07T02:08:01Z",
      "side": 1,
      "message": "It helps but I have more questions :) E.g., let\u0027s say a Cronet client adds a QUIC hint for \"foo.googlevideo.com\" at app startup. This will result in a new entry in |canonical_host_to_origin_map_|: \"googlevideo.com\" \u003d\u003e \"foo.googlevideo.com\". At the same time, let\u0027s say there is server info persisted from the previous app launch for \"bar.googlevideo.com\". If we give the priority to \"foo.googlevideo.com\" then we will not be able to find the server info when the app connects for the first time to a different host with same canonical suffix (let\u0027s say \"baz.googlevideo.com). If we give the priority to \"bar.googlevideo.com\", we overwrite the client setting. Is it okay to do it? It may complicate the logic.\n\nBtw, when you are saying the main map, are you referring |alternative_service_map_|?",
      "parentUuid": "00e72c42_f1a671ad",
      "range": {
        "startLine": 619,
        "startChar": 3,
        "endLine": 619,
        "endChar": 0
      },
      "revId": "785ae66296e8738e554a36075491aaf0e4926ffc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "49a1bdbb_e402a450",
        "filename": "net/http/http_server_properties_impl.cc",
        "patchSetId": 2
      },
      "lineNbr": 619,
      "author": {
        "id": 1116006
      },
      "writtenOn": "2017-11-07T05:09:54Z",
      "side": 1,
      "message": "Your question is a fair one. Thanks for asking!\n\nTo date, canonical_host_to_origin_map_ was only used for alt-svc, but *I* think it makes sense to be used for server info as well, though we\u0027ve not ever done that before, so there may well be corner cases to work out.\n\nIn the case of chrome, the server infos and alt-svc are both persisted together so if we have alt-svc for foo, we\u0027ll have server info for foo, so we should be safe.\n\nFor cronet, if the app is saving server properties, then it should not need addQuicHint because it has both the alt-svc and the server info saved to properties. If the app is not saving properties, then it won\u0027t have server infos at all.\n\nBut if an app is doing both addQuicHint for a canonical server *and* saving server properties to disk, that could break. We should consider talking to the cronet apps which make use of canonical servers and see if they also use addQuicHint. Do you know if addQuicHint happens before or after server configs are loaded from disk?",
      "parentUuid": "e09dd83e_229da1aa",
      "range": {
        "startLine": 619,
        "startChar": 3,
        "endLine": 619,
        "endChar": 0
      },
      "revId": "785ae66296e8738e554a36075491aaf0e4926ffc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "131e8391_65d41dcd",
        "filename": "net/http/http_server_properties_impl.cc",
        "patchSetId": 2
      },
      "lineNbr": 619,
      "author": {
        "id": 1143554
      },
      "writtenOn": "2017-11-07T17:00:20Z",
      "side": 1,
      "message": "I know an app that might use addQuicHint and persist server info. My understanding is that,from the client point of view, these options should not be mutually exclusive \"addQuicHint\" is useful when the persistent cache is empty (e.g. at first time app launch) or doesn\u0027t contain the host of interest (e.g. because of capacity limitation). On the other hand, server properties provide data necessary for 0-RTT.\n\nWe always handle addQuicHint first. The properties are actually read by a separate file thread but the result will be queued on the network thread.",
      "parentUuid": "49a1bdbb_e402a450",
      "range": {
        "startLine": 619,
        "startChar": 3,
        "endLine": 619,
        "endChar": 0
      },
      "revId": "785ae66296e8738e554a36075491aaf0e4926ffc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8d712ece_f81f6f85",
        "filename": "net/http/http_server_properties_impl.cc",
        "patchSetId": 2
      },
      "lineNbr": 619,
      "author": {
        "id": 1143554
      },
      "writtenOn": "2017-11-08T17:21:47Z",
      "side": 1,
      "message": "I can see two solutions that will not introduce too much complexity to the code:\n1) Add a map that translates a canonical suffix to QuicServerInfo (string). Whenever, ServerInfo is updated, we update the map. There are 4 canonical suffixes, so the max memory impact is server info length multiplied by 4 if an app connects to hosts with all four different canonical suffixes.\n\n2) Add a map similar to |canonical_host_to_origin_map_| to map a canonical suffix to origin that can be used to retrieve server info from |quic_server_info_map_|. Compared to solution 1, it has memory usage benefits but a little more complex (due to extra level of indirection) and may require extra CPU cycles during search.\n\nI would not like to mix alt-svc and server info in |canonical_host_to_origin_map_| because it adds complexity and may not be functionally correct in all scenarios. E.g., HttpServerPropertiesImpl exposes public setters and getters for alt-svc and server info. They look completely independent to a class caller, e.g., if the caller sets alt-svc, the result of \u0027get\u0027 operation should not depend on whether a setter for the server info was called in between.\n\nWhat do think? Should we implement approach 1, 2 or something else?",
      "parentUuid": "131e8391_65d41dcd",
      "range": {
        "startLine": 619,
        "startChar": 3,
        "endLine": 619,
        "endChar": 0
      },
      "revId": "785ae66296e8738e554a36075491aaf0e4926ffc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "71ac8a88_d9a35a62",
        "filename": "net/http/http_server_properties_impl_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 1377,
      "author": {
        "id": 1157934
      },
      "writtenOn": "2017-11-06T18:54:36Z",
      "side": 1,
      "message": "How about check the order of the QuicServerInfoMap is not changed? It would also be a good idea to have two googlevideo.com entries in the quic_server_info_map so that we could verify which one is returned(the most recently used or the other).",
      "range": {
        "startLine": 1377,
        "startChar": 66,
        "endLine": 1377,
        "endChar": 0
      },
      "revId": "785ae66296e8738e554a36075491aaf0e4926ffc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4ee6f36a_8f8f37a6",
        "filename": "net/http/http_server_properties_impl_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 1377,
      "author": {
        "id": 1143554
      },
      "writtenOn": "2017-11-06T23:47:31Z",
      "side": 1,
      "message": "Added more tests that cover the above mentioned functionality.",
      "parentUuid": "71ac8a88_d9a35a62",
      "range": {
        "startLine": 1377,
        "startChar": 66,
        "endLine": 1377,
        "endChar": 0
      },
      "revId": "785ae66296e8738e554a36075491aaf0e4926ffc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}