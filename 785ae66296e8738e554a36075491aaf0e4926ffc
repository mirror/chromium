{
  "comments": [
    {
      "key": {
        "uuid": "2ca73ddd_ade6e3ab",
        "filename": "net/http/http_server_properties_impl.cc",
        "patchSetId": 2
      },
      "lineNbr": 598,
      "author": {
        "id": 1116006
      },
      "writtenOn": "2017-11-06T19:46:58Z",
      "side": 1,
      "message": "nit: early return here to avoid extra indenting:\n\nif (it !\u003d end())\n  return it-\u003esecond;\n...",
      "range": {
        "startLine": 598,
        "startChar": 42,
        "endLine": 598,
        "endChar": 0
      },
      "revId": "785ae66296e8738e554a36075491aaf0e4926ffc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3238d961_51a7f26b",
        "filename": "net/http/http_server_properties_impl.cc",
        "patchSetId": 2
      },
      "lineNbr": 598,
      "author": {
        "id": 1143554
      },
      "writtenOn": "2017-11-06T22:07:29Z",
      "side": 1,
      "message": "Done. Looks better now.",
      "parentUuid": "2ca73ddd_ade6e3ab",
      "range": {
        "startLine": 598,
        "startChar": 42,
        "endLine": 598,
        "endChar": 0
      },
      "revId": "785ae66296e8738e554a36075491aaf0e4926ffc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "eee3e93a_6de2cb68",
        "filename": "net/http/http_server_properties_impl.cc",
        "patchSetId": 2
      },
      "lineNbr": 599,
      "author": {
        "id": 1157934
      },
      "writtenOn": "2017-11-06T18:54:36Z",
      "side": 1,
      "message": "Canonical suffix only applies to HTTPS, how about check the scheme and return nullptr if scheme is HTTP?",
      "range": {
        "startLine": 599,
        "startChar": 79,
        "endLine": 599,
        "endChar": 0
      },
      "revId": "785ae66296e8738e554a36075491aaf0e4926ffc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9550cb41_68fc1bba",
        "filename": "net/http/http_server_properties_impl.cc",
        "patchSetId": 2
      },
      "lineNbr": 599,
      "author": {
        "id": 1143554
      },
      "writtenOn": "2017-11-06T22:07:29Z",
      "side": 1,
      "message": "That would be good optimization but QuicServerId doesn\u0027t have a scheme associated with it. It looks that \"https\" is implied.",
      "parentUuid": "eee3e93a_6de2cb68",
      "range": {
        "startLine": 599,
        "startChar": 79,
        "endLine": 599,
        "endChar": 0
      },
      "revId": "785ae66296e8738e554a36075491aaf0e4926ffc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d8ac6573_13237743",
        "filename": "net/http/http_server_properties_impl.cc",
        "patchSetId": 2
      },
      "lineNbr": 599,
      "author": {
        "id": 1116006
      },
      "writtenOn": "2017-11-06T23:13:29Z",
      "side": 1,
      "message": "QUIC is only for secure URLs to HTTPS should be fine.",
      "parentUuid": "9550cb41_68fc1bba",
      "range": {
        "startLine": 599,
        "startChar": 79,
        "endLine": 599,
        "endChar": 0
      },
      "revId": "785ae66296e8738e554a36075491aaf0e4926ffc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "52746ca4_463877b4",
        "filename": "net/http/http_server_properties_impl.cc",
        "patchSetId": 2
      },
      "lineNbr": 599,
      "author": {
        "id": 1143554
      },
      "writtenOn": "2017-11-06T23:47:31Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "d8ac6573_13237743",
      "range": {
        "startLine": 599,
        "startChar": 79,
        "endLine": 599,
        "endChar": 0
      },
      "revId": "785ae66296e8738e554a36075491aaf0e4926ffc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a3115bd_6f1e345d",
        "filename": "net/http/http_server_properties_impl.cc",
        "patchSetId": 2
      },
      "lineNbr": 605,
      "author": {
        "id": 1157934
      },
      "writtenOn": "2017-11-06T18:54:36Z",
      "side": 1,
      "message": "nit: If I read it correctly, the comment and code are out of sync. We are actually iterating in MRU order, and returns the most recent server that matches the canonical suffix?",
      "range": {
        "startLine": 605,
        "startChar": 52,
        "endLine": 605,
        "endChar": 0
      },
      "revId": "785ae66296e8738e554a36075491aaf0e4926ffc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1dbd226b_36e5ba2f",
        "filename": "net/http/http_server_properties_impl.cc",
        "patchSetId": 2
      },
      "lineNbr": 605,
      "author": {
        "id": 1143554
      },
      "writtenOn": "2017-11-06T22:07:29Z",
      "side": 1,
      "message": "Thanks for spotting it. Yes, I meant MRU. Not even sure what RLU is :)",
      "parentUuid": "5a3115bd_6f1e345d",
      "range": {
        "startLine": 605,
        "startChar": 52,
        "endLine": 605,
        "endChar": 0
      },
      "revId": "785ae66296e8738e554a36075491aaf0e4926ffc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0636c9c3_33fc6450",
        "filename": "net/http/http_server_properties_impl.cc",
        "patchSetId": 2
      },
      "lineNbr": 619,
      "author": {
        "id": 1116006
      },
      "writtenOn": "2017-11-06T19:46:58Z",
      "side": 1,
      "message": "Instead of doing this, \u0027how \u0027bout doing what we do in other places where check for a canonical server. Namely, call the GetCanonicalHost() method. Something like:\n\n  url::SchemeHostPort server(\"https\", server_id.host(),\n                             server_id.port());\n  CanonicalHostMap::const_iterator canonical \u003d GetCanonicalHost(server);",
      "range": {
        "startLine": 619,
        "startChar": 3,
        "endLine": 619,
        "endChar": 0
      },
      "revId": "785ae66296e8738e554a36075491aaf0e4926ffc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b4025abd_ba84cb85",
        "filename": "net/http/http_server_properties_impl.cc",
        "patchSetId": 2
      },
      "lineNbr": 619,
      "author": {
        "id": 1143554
      },
      "writtenOn": "2017-11-06T22:07:29Z",
      "side": 1,
      "message": "Here I need some help with understanding. According to the code, GetCanonicalHost(...) searches in |canonical_host_to_origin_map_|, which is not the same map as |quic_server_info_map_|. I don\u0027t see |canonical_host_to_origin_map_| is populated when we set QUIC server info.",
      "parentUuid": "0636c9c3_33fc6450",
      "range": {
        "startLine": 619,
        "startChar": 3,
        "endLine": 619,
        "endChar": 0
      },
      "revId": "785ae66296e8738e554a36075491aaf0e4926ffc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "efdc1f27_f46b991c",
        "filename": "net/http/http_server_properties_impl.cc",
        "patchSetId": 2
      },
      "lineNbr": 619,
      "author": {
        "id": 1116006
      },
      "writtenOn": "2017-11-06T23:13:29Z",
      "side": 1,
      "message": "Ah. Sorry. So with canonical suffixes, we don\u0027t want to have to search through an entire list of servers looking to see if we have an entry for one which has the same suffix as the current. So to avoid this problem, we have a map from \"canonical suffix\" to \"canonical servers\", e.g. \"googlevideo.com\" \u003d\u003e \"foo.googlevideo.com\". So if we look for \"bar.googlevideo.com\" and fail to find it, we can then look into canonical_host_to_origin_map_ and find \"foo.googlevideo.com\" which we can then use as the host in question.\n\nDoes that sound plausible?\n\n(If we\u0027re not populating that when we populate QuicServerInfo, like we do when we populate alt-svc, then we should probably do that too as part of this CL, I think)",
      "parentUuid": "b4025abd_ba84cb85",
      "range": {
        "startLine": 619,
        "startChar": 3,
        "endLine": 619,
        "endChar": 0
      },
      "revId": "785ae66296e8738e554a36075491aaf0e4926ffc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4dcf21da_740a54b6",
        "filename": "net/http/http_server_properties_impl.cc",
        "patchSetId": 2
      },
      "lineNbr": 619,
      "author": {
        "id": 1143554
      },
      "writtenOn": "2017-11-06T23:47:31Z",
      "side": 1,
      "message": "That sounds plausible. What should happen if multiple hosts map to the same canonical name? The CanonicalHostMap has 1-to-1 relationship. I guess we only need to hold the reference to the MRU origin for a given canonical host.\n\nWe don\u0027t populate QuicServerInfo. I will add it to this CL.",
      "parentUuid": "efdc1f27_f46b991c",
      "range": {
        "startLine": 619,
        "startChar": 3,
        "endLine": 619,
        "endChar": 0
      },
      "revId": "785ae66296e8738e554a36075491aaf0e4926ffc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eec2fc45_6b5ae30f",
        "filename": "net/http/http_server_properties_impl.cc",
        "patchSetId": 2
      },
      "lineNbr": 619,
      "author": {
        "id": 1143554
      },
      "writtenOn": "2017-11-06T23:50:27Z",
      "side": 1,
      "message": "Sorry, I meant we don\u0027t populate |canonical_host_to_origin_map_| when we populate QuicServerInfo.",
      "parentUuid": "4dcf21da_740a54b6",
      "range": {
        "startLine": 619,
        "startChar": 3,
        "endLine": 619,
        "endChar": 0
      },
      "revId": "785ae66296e8738e554a36075491aaf0e4926ffc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "00e72c42_f1a671ad",
        "filename": "net/http/http_server_properties_impl.cc",
        "patchSetId": 2
      },
      "lineNbr": 619,
      "author": {
        "id": 1116006
      },
      "writtenOn": "2017-11-07T00:24:56Z",
      "side": 1,
      "message": "If there are multiple hosts which share the same suffix, only the first host ends up in the canonical map. But once the new host gets an alt-svc mapping of it\u0027s own (or a quic server info) it\u0027ll get an explicit entry in the main map, and we won\u0027t need to use the canonical map again. Does that help?",
      "parentUuid": "eec2fc45_6b5ae30f",
      "range": {
        "startLine": 619,
        "startChar": 3,
        "endLine": 619,
        "endChar": 0
      },
      "revId": "785ae66296e8738e554a36075491aaf0e4926ffc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e09dd83e_229da1aa",
        "filename": "net/http/http_server_properties_impl.cc",
        "patchSetId": 2
      },
      "lineNbr": 619,
      "author": {
        "id": 1143554
      },
      "writtenOn": "2017-11-07T02:08:01Z",
      "side": 1,
      "message": "It helps but I have more questions :) E.g., let\u0027s say a Cronet client adds a QUIC hint for \"foo.googlevideo.com\" at app startup. This will result in a new entry in |canonical_host_to_origin_map_|: \"googlevideo.com\" \u003d\u003e \"foo.googlevideo.com\". At the same time, let\u0027s say there is server info persisted from the previous app launch for \"bar.googlevideo.com\". If we give the priority to \"foo.googlevideo.com\" then we will not be able to find the server info when the app connects for the first time to a different host with same canonical suffix (let\u0027s say \"baz.googlevideo.com). If we give the priority to \"bar.googlevideo.com\", we overwrite the client setting. Is it okay to do it? It may complicate the logic.\n\nBtw, when you are saying the main map, are you referring |alternative_service_map_|?",
      "parentUuid": "00e72c42_f1a671ad",
      "range": {
        "startLine": 619,
        "startChar": 3,
        "endLine": 619,
        "endChar": 0
      },
      "revId": "785ae66296e8738e554a36075491aaf0e4926ffc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "71ac8a88_d9a35a62",
        "filename": "net/http/http_server_properties_impl_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 1377,
      "author": {
        "id": 1157934
      },
      "writtenOn": "2017-11-06T18:54:36Z",
      "side": 1,
      "message": "How about check the order of the QuicServerInfoMap is not changed? It would also be a good idea to have two googlevideo.com entries in the quic_server_info_map so that we could verify which one is returned(the most recently used or the other).",
      "range": {
        "startLine": 1377,
        "startChar": 66,
        "endLine": 1377,
        "endChar": 0
      },
      "revId": "785ae66296e8738e554a36075491aaf0e4926ffc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4ee6f36a_8f8f37a6",
        "filename": "net/http/http_server_properties_impl_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 1377,
      "author": {
        "id": 1143554
      },
      "writtenOn": "2017-11-06T23:47:31Z",
      "side": 1,
      "message": "Added more tests that cover the above mentioned functionality.",
      "parentUuid": "71ac8a88_d9a35a62",
      "range": {
        "startLine": 1377,
        "startChar": 66,
        "endLine": 1377,
        "endChar": 0
      },
      "revId": "785ae66296e8738e554a36075491aaf0e4926ffc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}