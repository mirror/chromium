{
  "comments": [
    {
      "key": {
        "uuid": "9dd18024_5599826c",
        "filename": "third_party/WebKit/Source/platform/fonts/shaping/ShapeResult.cpp",
        "patchSetId": 3
      },
      "lineNbr": 132,
      "author": {
        "id": 1130679
      },
      "writtenOn": "2017-11-17T12:04:55Z",
      "side": 1,
      "message": "This comment does not capture the whole behavior yet. I believe this should be: XPositionForOffset returns the x position in layout space from the beginning of the run to the beginning (kAdjustToStart) or the end (kAdjustToEnd) of the grapheme cluster that the character at \u0027offset\u0027 is a part of. Would you agree?",
      "revId": "7eae00bd82142101931207b4187cc54504bf36d8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ef4ef3cd_44bb435c",
        "filename": "third_party/WebKit/Source/platform/fonts/shaping/ShapeResult.cpp",
        "patchSetId": 3
      },
      "lineNbr": 132,
      "author": {
        "id": 1134723
      },
      "writtenOn": "2017-11-22T20:14:38Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "9dd18024_5599826c",
      "revId": "7eae00bd82142101931207b4187cc54504bf36d8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b7a3ab10_54c113de",
        "filename": "third_party/WebKit/Source/platform/fonts/shaping/ShapeResult.cpp",
        "patchSetId": 3
      },
      "lineNbr": 137,
      "author": {
        "id": 1130679
      },
      "writtenOn": "2017-11-17T12:04:55Z",
      "side": 1,
      "message": "UCI? Do you mean ICU?\n\nI would not talk about ICU\u0027s behavior here, rather about Unicode and HarfBuzz terminology, something like: When multiple characters form one visual grapheme as returned by HarfBuzz, we distribute the width of this grapheme cluster linearly among the number of cursor position stops as returned by our TextBreakIterator configured for cursor positions.",
      "revId": "7eae00bd82142101931207b4187cc54504bf36d8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9f227498_f53f9cc7",
        "filename": "third_party/WebKit/Source/platform/fonts/shaping/ShapeResult.cpp",
        "patchSetId": 3
      },
      "lineNbr": 137,
      "author": {
        "id": 1134723
      },
      "writtenOn": "2017-11-22T20:14:38Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b7a3ab10_54c113de",
      "revId": "7eae00bd82142101931207b4187cc54504bf36d8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "61090a9b_7ac67dd2",
        "filename": "third_party/WebKit/Source/platform/fonts/shaping/ShapeResult.cpp",
        "patchSetId": 3
      },
      "lineNbr": 154,
      "author": {
        "id": 1130679
      },
      "writtenOn": "2017-11-17T12:04:55Z",
      "side": 1,
      "message": "It\u0027s not clear to me what you mean by \"track\" here, could you explain that further?",
      "revId": "7eae00bd82142101931207b4187cc54504bf36d8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "71832f02_a5d8913a",
        "filename": "third_party/WebKit/Source/platform/fonts/shaping/ShapeResult.cpp",
        "patchSetId": 3
      },
      "lineNbr": 154,
      "author": {
        "id": 1134723
      },
      "writtenOn": "2017-11-22T20:14:38Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "61090a9b_7ac67dd2",
      "revId": "7eae00bd82142101931207b4187cc54504bf36d8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "89e77028_0a0fdef2",
        "filename": "third_party/WebKit/Source/platform/fonts/shaping/ShapeResult.cpp",
        "patchSetId": 3
      },
      "lineNbr": 166,
      "author": {
        "id": 1130679
      },
      "writtenOn": "2017-11-17T12:04:55Z",
      "side": 1,
      "message": "c is too short, let\u0027s find a better name for it.",
      "revId": "7eae00bd82142101931207b4187cc54504bf36d8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8ff8dba6_aad6ddb7",
        "filename": "third_party/WebKit/Source/platform/fonts/shaping/ShapeResult.cpp",
        "patchSetId": 3
      },
      "lineNbr": 166,
      "author": {
        "id": 1134723
      },
      "writtenOn": "2017-11-22T20:14:38Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "89e77028_0a0fdef2",
      "revId": "7eae00bd82142101931207b4187cc54504bf36d8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8712d5b8_e4bd7dcd",
        "filename": "third_party/WebKit/Source/platform/text/CursorPositionTest.cpp",
        "patchSetId": 3
      },
      "lineNbr": 17,
      "author": {
        "id": 1130679
      },
      "writtenOn": "2017-11-17T12:04:55Z",
      "side": 1,
      "message": "Minor: Since it\u0027s now three fonts here in the instantiation if statement, and the string comparison is not necessary, perhaps use an enum for font_name/font? Then you could use the enum value to index into a dictionary with the font family name and the path.",
      "revId": "7eae00bd82142101931207b4187cc54504bf36d8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dd3a3922_f6b6c7c5",
        "filename": "third_party/WebKit/Source/platform/text/CursorPositionTest.cpp",
        "patchSetId": 3
      },
      "lineNbr": 17,
      "author": {
        "id": 1134723
      },
      "writtenOn": "2017-11-22T20:14:38Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8712d5b8_e4bd7dcd",
      "revId": "7eae00bd82142101931207b4187cc54504bf36d8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5de9ae5c_83608e9a",
        "filename": "third_party/WebKit/Source/platform/text/CursorPositionTest.cpp",
        "patchSetId": 3
      },
      "lineNbr": 59,
      "author": {
        "id": 1130679
      },
      "writtenOn": "2017-11-17T12:04:55Z",
      "side": 1,
      "message": "Could you make the name a bit clearer, perhaps something like kSyllableWidthFU?",
      "revId": "7eae00bd82142101931207b4187cc54504bf36d8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "115659ed_5a344d74",
        "filename": "third_party/WebKit/Source/platform/text/CursorPositionTest.cpp",
        "patchSetId": 3
      },
      "lineNbr": 59,
      "author": {
        "id": 1134723
      },
      "writtenOn": "2017-11-22T20:14:38Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5de9ae5c_83608e9a",
      "revId": "7eae00bd82142101931207b4187cc54504bf36d8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b4c37e25_b2591f7d",
        "filename": "third_party/WebKit/Source/platform/text/CursorPositionTest.cpp",
        "patchSetId": 3
      },
      "lineNbr": 62,
      "author": {
        "id": 1130679
      },
      "writtenOn": "2017-11-17T12:04:55Z",
      "side": 1,
      "message": "Can we work with ASSERT_FLOAT_EQ or ASSERT_NEAR for these tests?\nCompare https://github.com/google/googletest/blob/master/googletest/docs/AdvancedGuide.md#floating-point-comparison",
      "revId": "7eae00bd82142101931207b4187cc54504bf36d8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c658dbf2_5df6243b",
        "filename": "third_party/WebKit/Source/platform/text/CursorPositionTest.cpp",
        "patchSetId": 3
      },
      "lineNbr": 62,
      "author": {
        "id": 1134723
      },
      "writtenOn": "2017-11-22T20:14:38Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b4c37e25_b2591f7d",
      "revId": "7eae00bd82142101931207b4187cc54504bf36d8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "30c132f3_e92913a6",
        "filename": "third_party/WebKit/Source/platform/text/CursorPositionTest.cpp",
        "patchSetId": 3
      },
      "lineNbr": 77,
      "author": {
        "id": 1130679
      },
      "writtenOn": "2017-11-17T12:04:55Z",
      "side": 1,
      "message": "Somewhat optional, but really nice to have: I think Roboto has a ffi ligature, but doesn\u0027t have a ligature for ff√Æ. For the latter, HarfBuzz should pick the ff ligature, but use a separate i glyph. It would be great if we could cover this case as well, because a) it\u0027s a longer 3 character ligature, and has this special case of different ligature formation with the i with circumflex.",
      "revId": "7eae00bd82142101931207b4187cc54504bf36d8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1308b5d4_85cea510",
        "filename": "third_party/WebKit/Source/platform/text/CursorPositionTest.cpp",
        "patchSetId": 3
      },
      "lineNbr": 77,
      "author": {
        "id": 1134723
      },
      "writtenOn": "2017-11-23T18:06:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "30c132f3_e92913a6",
      "revId": "7eae00bd82142101931207b4187cc54504bf36d8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "692303ef_2a4cca99",
        "filename": "third_party/WebKit/Source/platform/text/CursorPositionTest.cpp",
        "patchSetId": 3
      },
      "lineNbr": 92,
      "author": {
        "id": 1130679
      },
      "writtenOn": "2017-11-17T12:04:55Z",
      "side": 1,
      "message": "For these Arabic comparisons could we make them more reftest like, instead of using the numbers? Could you use the substrings beginning/ending on a ZWJ to force medial forms where possible, otherwise use the explicit terminal or initial forms?\n\ne.g. compare ÿßŸÑÿÆÿ∑  0,2\nto ÿßŸÑ‚Äç\n(You can use https://codepoints.net/%D8%A7%D9%84%E2%80%8D and just paste after the slash of codepoints.net to analyze the exact codepoint sequence).",
      "revId": "7eae00bd82142101931207b4187cc54504bf36d8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7465a958_70d6ad64",
        "filename": "third_party/WebKit/Source/platform/text/CursorPositionTest.cpp",
        "patchSetId": 3
      },
      "lineNbr": 92,
      "author": {
        "id": 1134723
      },
      "writtenOn": "2017-11-22T20:14:38Z",
      "side": 1,
      "message": "I\u0027m not sure what\u0027s supposed to come out of this?\nis 0,2 on ÿßŸÑÿÆÿ∑ supposed to be the same as ÿßŸÑ‚Äç ?",
      "parentUuid": "692303ef_2a4cca99",
      "revId": "7eae00bd82142101931207b4187cc54504bf36d8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9cb3c46f_5c7c63c0",
        "filename": "third_party/WebKit/Source/platform/text/CursorPositionTest.cpp",
        "patchSetId": 3
      },
      "lineNbr": 92,
      "author": {
        "id": 1130679
      },
      "writtenOn": "2017-11-23T09:16:48Z",
      "side": 1,
      "message": "What I meant by that: Compare GetWidth of a substring to GetWidth of the full run, but modified with ZWJ characters to get the correct matching shaping result.\ni.e. \nEXPECT_EQ|EXPECT_NEAR(GetWidth(\"amiri\", u\"ÿßŸÑÿÆÿ∑\", false, 0, 2), GetWidth(\"amiri\", u\"ÿßŸÑ‚Äç\", false, 0, String(\"ÿßŸÑ‚Äç\").length())\n\nBut now I realize that, depending on the font, this might not work if the shaping result for some of the character sequences are really single glyphs that we interpolate. \n\nStill, explicitly using the concrete numbers is prone to test breakage when the used font changes. Could we phrase the expectation as a formula based on the whole or parts of the base string\u0027s width, so that it\u0027s clear in the test that we expect interpolation?",
      "parentUuid": "7465a958_70d6ad64",
      "revId": "7eae00bd82142101931207b4187cc54504bf36d8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "97fa77be_b08ff341",
        "filename": "third_party/WebKit/Source/platform/text/CursorPositionTest.cpp",
        "patchSetId": 3
      },
      "lineNbr": 92,
      "author": {
        "id": 1134723
      },
      "writtenOn": "2017-11-23T18:06:39Z",
      "side": 1,
      "message": "gotcha.",
      "parentUuid": "9cb3c46f_5c7c63c0",
      "revId": "7eae00bd82142101931207b4187cc54504bf36d8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "32e59216_07357830",
        "filename": "third_party/WebKit/Source/platform/text/CursorPositionTest.cpp",
        "patchSetId": 3
      },
      "lineNbr": 114,
      "author": {
        "id": 1130679
      },
      "writtenOn": "2017-11-23T09:16:48Z",
      "side": 1,
      "message": "For example here, the input is 4 characters:\nÿß ŸÑ ŸÑ Ÿá\n0,1 \u003d Width of initial ÿß\n0,2 \u003d Width of ZWJ ÿß ŸÑ shaped together?\n0,3 \u003d Width of ZWJ ÿß ŸÑ ŸÑ shaped together?\n\nWould that work?",
      "revId": "7eae00bd82142101931207b4187cc54504bf36d8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "43adf344_f06e4188",
        "filename": "third_party/WebKit/Source/platform/text/CursorPositionTest.cpp",
        "patchSetId": 3
      },
      "lineNbr": 114,
      "author": {
        "id": 1134723
      },
      "writtenOn": "2017-11-23T18:06:39Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "32e59216_07357830",
      "revId": "7eae00bd82142101931207b4187cc54504bf36d8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "df8994a0_42d1e6c5",
        "filename": "third_party/WebKit/Source/platform/text/TextBreakIterator.h",
        "patchSetId": 3
      },
      "lineNbr": 359,
      "author": {
        "id": 1130679
      },
      "writtenOn": "2017-11-17T12:04:55Z",
      "side": 1,
      "message": "Nice, thanks for moving that.",
      "revId": "7eae00bd82142101931207b4187cc54504bf36d8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "04f3a54b_a33859c6",
        "filename": "third_party/WebKit/Source/platform/text/TextBreakIterator.h",
        "patchSetId": 3
      },
      "lineNbr": 359,
      "author": {
        "id": 1134723
      },
      "writtenOn": "2017-11-22T20:14:38Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "df8994a0_42d1e6c5",
      "revId": "7eae00bd82142101931207b4187cc54504bf36d8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}