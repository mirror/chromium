{
  "comments": [
    {
      "key": {
        "uuid": "10c9bb07_815553c8",
        "filename": "third_party/WebKit/Source/core/exported/WebAssociatedURLLoaderImpl.cpp",
        "patchSetId": 3
      },
      "lineNbr": 232,
      "author": {
        "id": 1001472
      },
      "writtenOn": "2017-08-17T15:13:18Z",
      "side": 1,
      "message": "Thanks for making these changes, but this change also makes me feel slightly uncomfortable, as currently all these consumers seem to be in Blink. We\u0027re shuffling things around so we\u0027ll probably need to temporarily introduce a bit of uncommon patterns, but I\u0027m still trying to figure out what transition could be smoother. Sorry for being a unclear on these, I\u0027ll try to be specific here (Takeshi, Mike-- if anything I write is not compatible with your thinking please let me know, we can also have a quick VC / chat if it works better).\n\nHere are concerns: 1) for the things in core/ and modules/ using std containers is a bit unusual (highly discouraged actually) and 2) defining multiple new WebString utilities for this transition feels slightly wasteful given that the current state is transient (and WebString is not what we\u0027ll be using forever).\n\nThe easiest, minimal change to fix the current status would be to start with adding INSIDE_BLINK in the header file, and just keep the Blink-side callsites as is. But I suppose that in the next few changes we\u0027ll also want to include these header files outside Blink too-- then we\u0027ll need to make these work there too.\n\nBelow are some patterns that feel a little more common to me, you could probably mix some of these case by case:\n\n1) just use std:: and base:: types only, without mixing them up with blink types like WebString. Consumers in Blink would need to do some type conversions when it calls CORS code but the usage would look similar to how we use, say, //base or //net code in Blink.  I think for HTTPHeader{Set,Map} we might eventually need to take this path.\n2) or, just don\u0027t expose implementation details in the header file if they are not necessarily accessed by the consumers. For example for the private members in WebCORSPreflightResultCacheItem we really don\u0027t need to expose them to the consumers. You can probably use pimpl pattern (e.g. just declare an inner class in the header file and have it with std::unique_ptr, and implement the class within the .cpp file).\n3) or, have two types of implementations via template and/or ifdef\u0027s (INSIDE_BLINK and else), one with std:: and base:: for the code outside Blink and the other with WTF:: types for the code within Blink. This\u0027d likely introduce code bloat and could make things less readable, but there might be cases this works better (not sure if it applies anything in this CL).",
      "revId": "f452c8b9f010ec7e5e5a5331524a136ed5192d9f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9917f188_e6f664b6",
        "filename": "third_party/WebKit/Source/core/exported/WebAssociatedURLLoaderImpl.cpp",
        "patchSetId": 3
      },
      "lineNbr": 232,
      "author": {
        "id": 1002864
      },
      "writtenOn": "2017-08-17T16:15:14Z",
      "side": 1,
      "message": "Regarding the concern (1), I was feeling it\u0027s at acceptable level given we\u0027re in rapid re-architecturing era. IIUC, we\u0027ve been using WTF types in Source/ for some real reason such as code consistency, benefit of PartitionAlloc based allocation, etc. Except for ones that are relatively less important during the big transition, it looks the only real disadvantage is that we\u0027re introducing conversion. But as we\u0027re going to use //base and stl soon (in WebKit/common/), it happens anyway. We\u0027re just doing them a bit earlier.\n\nI agree with the concern (2). Yes, it\u0027s going to go away and we should avoid it if possible.\n\nI think the solution (1) and (2) (looks over killing. just INSIDE_BLINK looks enough) are both reasonable. (3) looks ok as temporary solution, but sounds not so worth compared to (1) and (2).",
      "parentUuid": "10c9bb07_815553c8",
      "revId": "f452c8b9f010ec7e5e5a5331524a136ed5192d9f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e93ca2b8_7f8b251e",
        "filename": "third_party/WebKit/Source/core/exported/WebAssociatedURLLoaderImpl.cpp",
        "patchSetId": 3
      },
      "lineNbr": 232,
      "author": {
        "id": 1217370
      },
      "writtenOn": "2017-08-17T19:45:57Z",
      "side": 1,
      "message": "Hey, thank you both for the elaborate discussion and sorry for making you feel uncomfortable! :-)\n\nI\u0027d like to emphasize that for my project to come to an reasonable end state within my remaining two weeks, I need to be able to use WebCORS from content/child/loader/CORSURLLoader and it is my understanding that content/child does not qualify as being INSIDE_BLINK(?).\n\nAs for the solutions, considering that I am literally counting the days that I have left to finish, I would appreciate something that wouldn\u0027t take me (i.e. a green intern) too much time or could be polished later once CORSURLLoader and friends are landed.",
      "parentUuid": "9917f188_e6f664b6",
      "revId": "f452c8b9f010ec7e5e5a5331524a136ed5192d9f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6aa8eb77_9450314c",
        "filename": "third_party/WebKit/Source/core/exported/WebAssociatedURLLoaderImpl.cpp",
        "patchSetId": 3
      },
      "lineNbr": 232,
      "author": {
        "id": 1001472
      },
      "writtenOn": "2017-08-18T06:03:55Z",
      "side": 1,
      "message": "\u003e (2) (looks over killing. just INSIDE_BLINK looks enough)\n\nHiding actual fields in INSIDE_BLINK would make the exposed struct size incompatible, we\u0027ll need to follow pimpl pattern for member fields.\n\n\u003e I would appreciate something that wouldn\u0027t take me (i.e. a green intern) too much time\n\nYep, I\u0027ll try reducing discussion time, while we\u0027ll anyway need to add some conversion code somewhere as far as we want to share the code both inside and outside the Blink. It shouldn\u0027t be hard, but just a little more typing.\n\nAnyways in short I think both I and Takeshi are suggesting that only using std:: (and base::) types for the things that are exposed (e.g. HTTPSet/HTTPMap in WebCORS), and using pimpl pattern for the things that can be hidden inside .cpp (e.g. private fields).\n\nI think I can possibly help some of these if you feel you\u0027ll need some extra investigation to do that.",
      "parentUuid": "e93ca2b8_7f8b251e",
      "revId": "f452c8b9f010ec7e5e5a5331524a136ed5192d9f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "145e4dae_428c28b0",
        "filename": "third_party/WebKit/Source/core/exported/WebAssociatedURLLoaderImpl.cpp",
        "patchSetId": 3
      },
      "lineNbr": 232,
      "author": {
        "id": 1002864
      },
      "writtenOn": "2017-08-18T06:47:33Z",
      "side": 1,
      "message": "\u003e \u003e (2) (looks over killing. just INSIDE_BLINK looks enough)\n\u003e \n\u003e Hiding actual fields in INSIDE_BLINK would make the exposed struct size incompatible, we\u0027ll need to follow pimpl pattern for member fields.\n\nAh, I see. Sorry, I was misunderstanding that it\u0027s done commonly in WebKit/public and is viable here. It\u0027s not commonly done (only inside WebServiceWorkerInstalledScriptsManager.h) and though allocation of WebCORSPreflightResultCache is done inside Blink but can be destroyed outside of Blink where the mismatch will be problematic.",
      "parentUuid": "6aa8eb77_9450314c",
      "revId": "f452c8b9f010ec7e5e5a5331524a136ed5192d9f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8e5b883a_dc6fe362",
        "filename": "third_party/WebKit/public/platform/WebCORS.h",
        "patchSetId": 3
      },
      "lineNbr": 44,
      "author": {
        "id": 1001472
      },
      "writtenOn": "2017-08-17T15:13:18Z",
      "side": 1,
      "message": "nit: using",
      "revId": "f452c8b9f010ec7e5e5a5331524a136ed5192d9f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "616ab2a4_9d086c9b",
        "filename": "third_party/WebKit/public/platform/WebCORS.h",
        "patchSetId": 3
      },
      "lineNbr": 44,
      "author": {
        "id": 1217370
      },
      "writtenOn": "2017-08-18T05:56:13Z",
      "side": 1,
      "message": "Replaced typedef with using here and at other changes in this CL.",
      "parentUuid": "8e5b883a_dc6fe362",
      "revId": "f452c8b9f010ec7e5e5a5331524a136ed5192d9f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c9da602a_d66af9cb",
        "filename": "third_party/WebKit/public/platform/WebString.h",
        "patchSetId": 3
      },
      "lineNbr": 252,
      "author": {
        "id": 1002864
      },
      "writtenOn": "2017-08-17T12:45:18Z",
      "side": 1,
      "message": "Please take a look at the section about unordered_set in https://chromium-cpp.appspot.com/.",
      "revId": "f452c8b9f010ec7e5e5a5331524a136ed5192d9f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5259e8d4_a2e241c1",
        "filename": "third_party/WebKit/public/platform/WebString.h",
        "patchSetId": 3
      },
      "lineNbr": 252,
      "author": {
        "id": 1217370
      },
      "writtenOn": "2017-08-18T05:56:13Z",
      "side": 1,
      "message": "I see. Replaced it with a struct.",
      "parentUuid": "c9da602a_d66af9cb",
      "revId": "f452c8b9f010ec7e5e5a5331524a136ed5192d9f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}