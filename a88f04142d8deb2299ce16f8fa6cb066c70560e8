{
  "comments": [
    {
      "key": {
        "uuid": "f4ec2193_8bf5854d",
        "filename": "content/browser/compositor/gpu_process_transport_factory.cc",
        "patchSetId": 10
      },
      "lineNbr": 854,
      "author": {
        "id": 1148065
      },
      "writtenOn": "2017-09-29T21:41:31Z",
      "side": 1,
      "message": "nit: DLOG",
      "revId": "a88f04142d8deb2299ce16f8fa6cb066c70560e8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7fae53d2_c498f18a",
        "filename": "content/browser/compositor/gpu_process_transport_factory.cc",
        "patchSetId": 10
      },
      "lineNbr": 854,
      "author": {
        "id": 1173914
      },
      "writtenOn": "2017-10-03T09:46:01Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f4ec2193_8bf5854d",
      "revId": "a88f04142d8deb2299ce16f8fa6cb066c70560e8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f236ae8f_9a50e357",
        "filename": "content/browser/devtools/protocol/target_handler.cc",
        "patchSetId": 10
      },
      "lineNbr": 295,
      "author": {
        "id": 1116032
      },
      "writtenOn": "2017-10-03T05:07:52Z",
      "side": 1,
      "message": "Ditto.",
      "range": {
        "startLine": 295,
        "startChar": 49,
        "endLine": 295,
        "endChar": 72
      },
      "revId": "a88f04142d8deb2299ce16f8fa6cb066c70560e8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1e400b9c_8ca2cd9b",
        "filename": "content/browser/devtools/protocol/target_handler.cc",
        "patchSetId": 10
      },
      "lineNbr": 295,
      "author": {
        "id": 1173914
      },
      "writtenOn": "2017-10-03T09:46:01Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f236ae8f_9a50e357",
      "range": {
        "startLine": 295,
        "startChar": 49,
        "endLine": 295,
        "endChar": 72
      },
      "revId": "a88f04142d8deb2299ce16f8fa6cb066c70560e8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "df50f2ac_a43695fc",
        "filename": "content/browser/devtools/protocol/target_handler.h",
        "patchSetId": 10
      },
      "lineNbr": 66,
      "author": {
        "id": 1116032
      },
      "writtenOn": "2017-10-03T05:07:52Z",
      "side": 1,
      "message": "nit: enable_begin_frame_control",
      "range": {
        "startLine": 66,
        "startChar": 36,
        "endLine": 66,
        "endChar": 59
      },
      "revId": "a88f04142d8deb2299ce16f8fa6cb066c70560e8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c6a6dc07_992ec058",
        "filename": "content/browser/devtools/protocol/target_handler.h",
        "patchSetId": 10
      },
      "lineNbr": 66,
      "author": {
        "id": 1173914
      },
      "writtenOn": "2017-10-03T09:46:01Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "df50f2ac_a43695fc",
      "range": {
        "startLine": 66,
        "startChar": 36,
        "endLine": 66,
        "endChar": 59
      },
      "revId": "a88f04142d8deb2299ce16f8fa6cb066c70560e8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "da1fd900_5103ddbb",
        "filename": "headless/BUILD.gn",
        "patchSetId": 10
      },
      "lineNbr": 164,
      "author": {
        "id": 1116032
      },
      "writtenOn": "2017-10-03T05:07:52Z",
      "side": 1,
      "message": "Don\u0027t want to turn this into a bikeshed but baking in the name \"experimental\" here seems unfortunate. Only alternative that comes to mind is \"headless_browser\". I\u0027ll leave this up to Pavel.",
      "range": {
        "startLine": 164,
        "startChar": 3,
        "endLine": 164,
        "endChar": 24
      },
      "revId": "a88f04142d8deb2299ce16f8fa6cb066c70560e8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8cc8cf0b_20615138",
        "filename": "headless/BUILD.gn",
        "patchSetId": 10
      },
      "lineNbr": 164,
      "author": {
        "id": 1173914
      },
      "writtenOn": "2017-10-03T09:46:01Z",
      "side": 1,
      "message": "Not sure if HeadlessBrowser makes sense, since it\u0027s not a browser target domain. FWIW, I\u0027d be fine with simple \"Headless\", but Alex mentioned that the namespace nesting clash (headless::headless) is confusing.\n\nThe rationale for HeadlessExperimental was that we intend to make BeginFrameControl a dynamic setting and support it in non-headless targets eventually, too. Alternatively, we could move these commands into the Emulation domain right away, where they\u0027re likely to end up once finalized.\n\nwdyt? :)",
      "parentUuid": "da1fd900_5103ddbb",
      "range": {
        "startLine": 164,
        "startChar": 3,
        "endLine": 164,
        "endChar": 24
      },
      "revId": "a88f04142d8deb2299ce16f8fa6cb066c70560e8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "199ddc64_418d968d",
        "filename": "headless/BUILD.gn",
        "patchSetId": 10
      },
      "lineNbr": 164,
      "author": {
        "id": 1116032
      },
      "writtenOn": "2017-10-03T17:47:00Z",
      "side": 1,
      "message": "I can live with headless_experimental :)",
      "parentUuid": "8cc8cf0b_20615138",
      "range": {
        "startLine": 164,
        "startChar": 3,
        "endLine": 164,
        "endChar": 24
      },
      "revId": "a88f04142d8deb2299ce16f8fa6cb066c70560e8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "751bcda4_e9f7de0c",
        "filename": "headless/lib/browser/headless_devtools_manager_delegate.cc",
        "patchSetId": 10
      },
      "lineNbr": 720,
      "author": {
        "id": 1116032
      },
      "writtenOn": "2017-10-03T05:07:52Z",
      "side": 1,
      "message": "Please sample Now() just once in this function and store it in local to avoid issues with drift.",
      "range": {
        "startLine": 720,
        "startChar": 53,
        "endLine": 720,
        "endChar": 56
      },
      "revId": "a88f04142d8deb2299ce16f8fa6cb066c70560e8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c121783a_08f1d4f4",
        "filename": "headless/lib/browser/headless_devtools_manager_delegate.cc",
        "patchSetId": 10
      },
      "lineNbr": 720,
      "author": {
        "id": 1173914
      },
      "writtenOn": "2017-10-03T09:46:01Z",
      "side": 1,
      "message": "That\u0027s a little tricky here, since I\u0027m sampling Now() for base::Time and base::TimeTicks respectively (I need to convert from a Time to a TimeTicks).\n\nI\u0027m using TimeTicks::UnixEpoch() instead now - yet, it\u0027s a similar estimation only. At least it should be more deterministic for subsequent invocations.\n\nThe alternative would be to pass a TimeTicks value rather than a Time via DevTools, but that only works if the DevTools client is in the same process.",
      "parentUuid": "751bcda4_e9f7de0c",
      "range": {
        "startLine": 720,
        "startChar": 53,
        "endLine": 720,
        "endChar": 56
      },
      "revId": "a88f04142d8deb2299ce16f8fa6cb066c70560e8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}