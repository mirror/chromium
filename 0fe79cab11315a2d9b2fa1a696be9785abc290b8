{
  "comments": [
    {
      "key": {
        "uuid": "42c7f33c_e96b03fb",
        "filename": "services/network/public/interfaces/data_pipe_getter.mojom",
        "patchSetId": 1
      },
      "lineNbr": 16,
      "author": {
        "id": 1001472
      },
      "writtenOn": "2017-12-18T14:04:15Z",
      "side": 1,
      "message": "Maybe make it a little clearer that it\u0027s not just cloning handles to \u0027this interface\u0027 but creating and attaching a new pipe \u0027to the source of the content\u0027?",
      "revId": "0fe79cab11315a2d9b2fa1a696be9785abc290b8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cb36c55e_ba38e6bd",
        "filename": "services/network/public/interfaces/data_pipe_getter.mojom",
        "patchSetId": 1
      },
      "lineNbr": 18,
      "author": {
        "id": 1001472
      },
      "writtenOn": "2017-12-18T14:04:15Z",
      "side": 1,
      "message": "Maybe also note that it doesn\u0027t matter if there\u0027re concurrent or not?",
      "revId": "0fe79cab11315a2d9b2fa1a696be9785abc290b8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b8c95e68_f78a7b2f",
        "filename": "services/network/public/interfaces/data_pipe_getter.mojom",
        "patchSetId": 1
      },
      "lineNbr": 19,
      "author": {
        "id": 1115968
      },
      "writtenOn": "2017-12-18T14:16:50Z",
      "side": 1,
      "message": "I\u0027m concerned about the complexity and extra testing this method will add to all implementations.  Hopefully there won\u0027t be many, but if you\u0027re streaming data to the network service, even if you\u0027re not going through ServiceWorker, you\u0027re going to need to implement it.  (And I say this as someone who has a CL out for review that implements a DataPipeGetter, and will have to substantially rewrite the class, and add a lot of unit test infrastructure, just to test the implementation of this method).\n\nIs there a way around this?  Why is it needed?  It basically means Clone() + Read() needs to create a bunch of state in the consumer, to track reads from multiple independent pipes.  Is this behavior expected for Read() without Clone()?  I know for the network service, we\u0027re only doing one read at a time, so I\u0027d planned to cancel previous reads when a new one starts.  Should we update read documentation, too?",
      "range": {
        "startLine": 19,
        "startChar": 41,
        "endLine": 19,
        "endChar": 52
      },
      "revId": "0fe79cab11315a2d9b2fa1a696be9785abc290b8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a6a8ee76_36e1a28c",
        "filename": "services/network/public/interfaces/data_pipe_getter.mojom",
        "patchSetId": 1
      },
      "lineNbr": 19,
      "author": {
        "id": 1000128
      },
      "writtenOn": "2017-12-19T01:17:16Z",
      "side": 1,
      "message": "This was needed because the request body gets passed around in some places but the passer still needs access to the body. Specifically, when the body goes from Blink to //content/renderer, Blink still needs to keep the body around in case of redirect responses: sometimes Blink handles the redirect itself and needs to reissue the request. We\u0027ll need a similar thing when service worker URL interception code (ServiceWorkerURLLoaderJob and ServiceWorkerSubresourceLoader) passes the request to the service worker.\n\nIt also just made code health better. This way GetRequestBodyForWebHTTPBody and GetWebHTTPBodyForRequestBody can convert between content::ResourceRequestBody and blink::WebHTTPBody without mutating the input.\n\nAdmittedly, I didn\u0027t think we\u0027d have more DataPipeGetter implementations and was just thinking about the Blob-backed one. I imagined you could have multiple Read() calls inflight even without Clone() but I see that how that could be a pain.\n\nWhat is the DataPipeGetter implementation you are adding? Is a possibility just electing to not support Clone() in certain implementations, and fail with NOTREACHED()/BadMessageReceieved()?",
      "parentUuid": "b8c95e68_f78a7b2f",
      "range": {
        "startLine": 19,
        "startChar": 41,
        "endLine": 19,
        "endChar": 52
      },
      "revId": "0fe79cab11315a2d9b2fa1a696be9785abc290b8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "595fbb5e_bda83c8e",
        "filename": "services/network/public/interfaces/data_pipe_getter.mojom",
        "patchSetId": 1
      },
      "lineNbr": 19,
      "author": {
        "id": 1115968
      },
      "writtenOn": "2017-12-19T06:39:11Z",
      "side": 1,
      "message": "I\u0027m adding string upload support - both to reduce copies and decrease memory loads (Particularly with consumers that want to retry on error), I\u0027m streaming longer strings instead of copying them.\n\nSince I\u0027m implementing a wrapper, that may be used in the renderer process as well as the browser process, it\u0027s probably best to make sure my code fully supports the needed API.\n\nIs there any case in which we\u0027ll need to support reads from different consumers at once?  i.e., if we get another read call, can we just abandon any previously in use data pipes?",
      "parentUuid": "a6a8ee76_36e1a28c",
      "range": {
        "startLine": 19,
        "startChar": 41,
        "endLine": 19,
        "endChar": 52
      },
      "revId": "0fe79cab11315a2d9b2fa1a696be9785abc290b8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cd7fc043_7241b667",
        "filename": "services/network/public/interfaces/data_pipe_getter.mojom",
        "patchSetId": 1
      },
      "lineNbr": 19,
      "author": {
        "id": 1000128
      },
      "writtenOn": "2017-12-19T06:54:09Z",
      "side": 1,
      "message": "It\u0027s probably OK to not support it. However, the current non-NetworkService service worker implementation supports simultaneous reads in one case: if the service worker didn\u0027t call respondWith() then the browser falls back to network which means consuming the request body, but the service worker can still simultaneously read the request body.\n\nI think it\u0027d be OK to break this behavior in NetworkService service worker. Recent spec discussion has leaned toward explicitly not supporting this case.",
      "parentUuid": "595fbb5e_bda83c8e",
      "range": {
        "startLine": 19,
        "startChar": 41,
        "endLine": 19,
        "endChar": 52
      },
      "revId": "0fe79cab11315a2d9b2fa1a696be9785abc290b8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}