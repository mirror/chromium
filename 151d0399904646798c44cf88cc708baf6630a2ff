{
  "comments": [
    {
      "key": {
        "uuid": "d87bea3f_dd636364",
        "filename": "remoting/client/audio/audio_player_buffer.cc",
        "patchSetId": 8
      },
      "lineNbr": 99,
      "author": {
        "id": 1152109
      },
      "writtenOn": "2017-08-29T19:18:48Z",
      "side": 1,
      "message": "Not a big concern but I just noticed the parameter order doesn\u0027t quite match the order of AsynGetAudioFrame :)",
      "range": {
        "startLine": 99,
        "startChar": 28,
        "endLine": 99,
        "endChar": 57
      },
      "revId": "151d0399904646798c44cf88cc708baf6630a2ff",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1ce6e618_25d6ceb8",
        "filename": "remoting/client/audio/audio_player_buffer.cc",
        "patchSetId": 8
      },
      "lineNbr": 164,
      "author": {
        "id": 1152109
      },
      "writtenOn": "2017-08-29T19:18:48Z",
      "side": 1,
      "message": "FYI you could also use std::unique_ptr\u003cAudioFrameRequest\u003e\u0026 ... \u003d ...front();",
      "range": {
        "startLine": 164,
        "startChar": 4,
        "endLine": 164,
        "endChar": 22
      },
      "revId": "151d0399904646798c44cf88cc708baf6630a2ff",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "188b6ea0_fd341225",
        "filename": "remoting/client/audio/audio_player_buffer.cc",
        "patchSetId": 8
      },
      "lineNbr": 166,
      "author": {
        "id": 1152109
      },
      "writtenOn": "2017-08-29T19:18:48Z",
      "side": 1,
      "message": "up to?",
      "range": {
        "startLine": 166,
        "startChar": 55,
        "endLine": 166,
        "endChar": 59
      },
      "revId": "151d0399904646798c44cf88cc708baf6630a2ff",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dd690d5c_73ca58c6",
        "filename": "remoting/client/audio/audio_player_buffer.h",
        "patchSetId": 8
      },
      "lineNbr": 8,
      "author": {
        "id": 1152109
      },
      "writtenOn": "2017-08-29T19:18:48Z",
      "side": 1,
      "message": "Looks like the c... includes are generally considered as C++ style includes so you could just remove the newline below.\n\nSee this example:\nhttps://cs.chromium.org/chromium/src/remoting/host/client_session.h?l\u003d8\u0026rcl\u003dfc9b14e330b974af7651695a76f52b38b183d35b",
      "range": {
        "startLine": 8,
        "startChar": 0,
        "endLine": 8,
        "endChar": 18
      },
      "revId": "151d0399904646798c44cf88cc708baf6630a2ff",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "550ad237_c4870896",
        "filename": "remoting/client/audio/audio_player_buffer.h",
        "patchSetId": 8
      },
      "lineNbr": 22,
      "author": {
        "id": 1152109
      },
      "writtenOn": "2017-08-29T19:18:48Z",
      "side": 1,
      "message": "I think in C++ you can do:\n\n  struct AudioFrameRequest;\n\nBut if this is only used by AudioPlayerBuffer, will it make more sense to make it a private nested class of AudioPlayerBuffer?\n\nForward declare it in AudioPlayerBuffer like:\n\n private:\n  struct AudioFrameRequest;\n\nThen you define it in cc like:\n\n  struct AudioPlayerBuffer::AudioFrameRequest {...}\n\nAnd implement like:\n\n  AudioPlayerBuffer::AudioFrameRequest::AudioFrameRequest() {...}",
      "range": {
        "startLine": 22,
        "startChar": 0,
        "endLine": 22,
        "endChar": 51
      },
      "revId": "151d0399904646798c44cf88cc708baf6630a2ff",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}