{
  "comments": [
    {
      "key": {
        "uuid": "06b34ad0_45b3544f",
        "filename": "/COMMIT_MSG",
        "patchSetId": 9
      },
      "lineNbr": 9,
      "author": {
        "id": 1001040
      },
      "writtenOn": "2017-10-23T18:28:10Z",
      "side": 1,
      "message": "It\u0027d be helpful to say what CTAP is here. :)\n\nAlso, you list 5 requirements. Stack overflow? ;)",
      "revId": "558ee5e1fa8e3a2153a6e3f5149cddcde5bbce07",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9aef022f_4e2f2598",
        "filename": "/COMMIT_MSG",
        "patchSetId": 9
      },
      "lineNbr": 9,
      "author": {
        "id": 1247602
      },
      "writtenOn": "2017-10-24T00:36:54Z",
      "side": 1,
      "message": "I referred to the RFC and FIDO 2.0 specs! :) But now I deleted the 5th requirement (CBOR must have at most 4 nesting layers) since it is CTAP specific requirement.",
      "parentUuid": "06b34ad0_45b3544f",
      "revId": "558ee5e1fa8e3a2153a6e3f5149cddcde5bbce07",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d84b72d9_b0110ab6",
        "filename": "/COMMIT_MSG",
        "patchSetId": 9
      },
      "lineNbr": 28,
      "author": {
        "id": 1001040
      },
      "writtenOn": "2017-10-23T18:28:10Z",
      "side": 1,
      "message": "So we\u0027re trying to stop CBOR decoders from being DoS\u0027d by CBOR strings we send. Is that right?\n\nIf so, my instinct is to argue that (a) we should simply refuse to serialize anything that needs more than 4 levels, bumping a hard failure to our caller; and (b) it\u0027s mostly the CBOR decoder\u0027s responsibility to protect itself (they can\u0027t count on all encoders being as polite as us).",
      "revId": "558ee5e1fa8e3a2153a6e3f5149cddcde5bbce07",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c8f690a3_0b9857f0",
        "filename": "/COMMIT_MSG",
        "patchSetId": 9
      },
      "lineNbr": 28,
      "author": {
        "id": 1003152
      },
      "writtenOn": "2017-10-23T19:08:21Z",
      "side": 1,
      "message": "So the decoder is usually some embedded system we talk to over USB/BLE, hence the mere \"promise\".\n\nWhat do you think about the other concern, though, i.e. preventing a stack overflow in Chrome? Are there any steps we need to take there?",
      "parentUuid": "d84b72d9_b0110ab6",
      "revId": "558ee5e1fa8e3a2153a6e3f5149cddcde5bbce07",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "af9cf0ef_bcae0946",
        "filename": "/COMMIT_MSG",
        "patchSetId": 9
      },
      "lineNbr": 28,
      "author": {
        "id": 1001040
      },
      "writtenOn": "2017-10-23T21:23:19Z",
      "side": 1,
      "message": "\u003e What do you think about the other concern, though, i.e. preventing a stack overflow in Chrome? Are there any steps we need to take there?\n\nYou mean during encoding? I think we should keep a count, and fail and return an error to the caller when nesting \u003e 4 levels.",
      "parentUuid": "c8f690a3_0b9857f0",
      "revId": "558ee5e1fa8e3a2153a6e3f5149cddcde5bbce07",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7fc3c3ec_c771119b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 9
      },
      "lineNbr": 28,
      "author": {
        "id": 1003152
      },
      "writtenOn": "2017-10-23T22:21:25Z",
      "side": 1,
      "message": "Sorry for the confusion.\n\nFor a second, forget that we ever had this the magical threshold of 4 for CBOR (which is the case for non-canonical CBOR).\n\nWe are also worried, in general, about exhausting Chrome\u0027s own stack, given the recursive nature of the encoder. I\u0027m unsure how, if at all, we should mitigate this.",
      "parentUuid": "af9cf0ef_bcae0946",
      "revId": "558ee5e1fa8e3a2153a6e3f5149cddcde5bbce07",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bc388b83_b43bb5f8",
        "filename": "/COMMIT_MSG",
        "patchSetId": 9
      },
      "lineNbr": 28,
      "author": {
        "id": 1001040
      },
      "writtenOn": "2017-10-23T22:43:09Z",
      "side": 1,
      "message": "There are a few approaches:\n\n1. Refuse to encode objects that you don\u0027t fully control, and for which you therefore can know the recursion depth is acceptable\n\n2. Set a recursion limit, and stop encoding past that limit\n\n3. Perform the encoding in a separate, non-critical process, possibly also making use of a job object/resource limits/other platform-relevant limit\n\nI have been suggesting (2), since it\u0027s easy to implement and appears to have been anticipated by the CBOR designers, and because (1) and (3) don\u0027t seem to be applicable in this context.\n\n((3) is a more canonical Chromium approach, because it solves a wider range of security concerns. But for as long as stack exhaustion DoS is our only concern, (2) should be sufficient.)",
      "parentUuid": "7fc3c3ec_c771119b",
      "revId": "558ee5e1fa8e3a2153a6e3f5149cddcde5bbce07",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "612cb0d1_0f3bb370",
        "filename": "/COMMIT_MSG",
        "patchSetId": 9
      },
      "lineNbr": 28,
      "author": {
        "id": 1247602
      },
      "writtenOn": "2017-10-24T00:36:54Z",
      "side": 1,
      "message": "Thanks for the advice! I also went for the second option. More specifically, I added a parameter \"maxNestingLevel\"to exposed CBORWriter function Write() to prevent any Dos abuse. Currently, the default value is set to 512. Please let me know if you think this should be changed!\n\nSo now, CBORWriter class is a generic CBOR encoder and it is completely up to the caller to determine what layer size should be enforced. As an additional interface for caller to verify that the layer size requirement was met, the return value of CBORWriter::Write() was changed from std::vector\u003cuint8_t\u003e to std::pair\u003cstd::vector\u003cuint8_t\u003e, bool\u003e.",
      "parentUuid": "bc388b83_b43bb5f8",
      "revId": "558ee5e1fa8e3a2153a6e3f5149cddcde5bbce07",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a7348cc5_5a37ae2e",
        "filename": "content/browser/webauth/cbor/cbor_writer.h",
        "patchSetId": 9
      },
      "lineNbr": 21,
      "author": {
        "id": 1003152
      },
      "writtenOn": "2017-10-23T09:25:18Z",
      "side": 1,
      "message": "nit: Please re-wrap this (and some other comments too) to avoid unnecessary line wraps and minimize the total vertical extent of the code.",
      "revId": "558ee5e1fa8e3a2153a6e3f5149cddcde5bbce07",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b03c71b5_992d2b91",
        "filename": "content/browser/webauth/cbor/cbor_writer.h",
        "patchSetId": 9
      },
      "lineNbr": 21,
      "author": {
        "id": 1247602
      },
      "writtenOn": "2017-10-24T00:36:54Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a7348cc5_5a37ae2e",
      "revId": "558ee5e1fa8e3a2153a6e3f5149cddcde5bbce07",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "94f7c2d5_3fb69139",
        "filename": "content/browser/webauth/cbor/cbor_writer.h",
        "patchSetId": 9
      },
      "lineNbr": 39,
      "author": {
        "id": 1003152
      },
      "writtenOn": "2017-10-23T09:25:18Z",
      "side": 1,
      "message": "nit: This format is somewhat unusual for enumerations. Consider:\n\n 1) All major ...\n\n 2) Keys ...",
      "revId": "558ee5e1fa8e3a2153a6e3f5149cddcde5bbce07",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8a7ca1c6_11227ad7",
        "filename": "content/browser/webauth/cbor/cbor_writer.h",
        "patchSetId": 9
      },
      "lineNbr": 39,
      "author": {
        "id": 1247602
      },
      "writtenOn": "2017-10-24T00:36:54Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "94f7c2d5_3fb69139",
      "revId": "558ee5e1fa8e3a2153a6e3f5149cddcde5bbce07",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ca74b24e_75c2e55c",
        "filename": "content/browser/webauth/cbor/cbor_writer.h",
        "patchSetId": 9
      },
      "lineNbr": 128,
      "author": {
        "id": 1003152
      },
      "writtenOn": "2017-10-23T09:25:18Z",
      "side": 1,
      "message": "Can we make the nested container an array to clarify beyond doubt that both count?\n\n  //     {\"a\": [1, 2, 3, 4, 5]}",
      "range": {
        "startLine": 126,
        "startChar": 9,
        "endLine": 128,
        "endChar": 24
      },
      "revId": "558ee5e1fa8e3a2153a6e3f5149cddcde5bbce07",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bac94916_144ad99a",
        "filename": "content/browser/webauth/cbor/cbor_writer.h",
        "patchSetId": 9
      },
      "lineNbr": 128,
      "author": {
        "id": 1247602
      },
      "writtenOn": "2017-10-24T00:36:54Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ca74b24e_75c2e55c",
      "range": {
        "startLine": 126,
        "startChar": 9,
        "endLine": 128,
        "endChar": 24
      },
      "revId": "558ee5e1fa8e3a2153a6e3f5149cddcde5bbce07",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}