{
  "comments": [
    {
      "key": {
        "uuid": "44708e98_e561397b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 33
      },
      "lineNbr": 20,
      "author": {
        "id": 1001500
      },
      "writtenOn": "2017-08-02T23:08:34Z",
      "side": 1,
      "message": "nit: s/not/no/?",
      "range": {
        "startLine": 20,
        "startChar": 50,
        "endLine": 20,
        "endChar": 53
      },
      "revId": "412161926908cf7093ac11e019d7e4a847b8fb96",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "20629ce4_d3001498",
        "filename": "/COMMIT_MSG",
        "patchSetId": 33
      },
      "lineNbr": 20,
      "author": {
        "id": 1003152
      },
      "writtenOn": "2017-08-03T12:19:38Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "44708e98_e561397b",
      "range": {
        "startLine": 20,
        "startChar": 50,
        "endLine": 20,
        "endChar": 53
      },
      "revId": "412161926908cf7093ac11e019d7e4a847b8fb96",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "73b4e757_fac4e6c9",
        "filename": "/COMMIT_MSG",
        "patchSetId": 33
      },
      "lineNbr": 27,
      "author": {
        "id": 1001500
      },
      "writtenOn": "2017-08-02T23:08:34Z",
      "side": 1,
      "message": "s/is/be/",
      "range": {
        "startLine": 27,
        "startChar": 33,
        "endLine": 27,
        "endChar": 35
      },
      "revId": "412161926908cf7093ac11e019d7e4a847b8fb96",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f11233c2_b5c5ba09",
        "filename": "/COMMIT_MSG",
        "patchSetId": 33
      },
      "lineNbr": 27,
      "author": {
        "id": 1003152
      },
      "writtenOn": "2017-08-03T12:19:38Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "73b4e757_fac4e6c9",
      "range": {
        "startLine": 27,
        "startChar": 33,
        "endLine": 27,
        "endChar": 35
      },
      "revId": "412161926908cf7093ac11e019d7e4a847b8fb96",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "36258b85_c0d1fdaf",
        "filename": "/COMMIT_MSG",
        "patchSetId": 33
      },
      "lineNbr": 38,
      "author": {
        "id": 1001500
      },
      "writtenOn": "2017-08-02T23:08:34Z",
      "side": 1,
      "message": "allow?",
      "range": {
        "startLine": 38,
        "startChar": 21,
        "endLine": 38,
        "endChar": 24
      },
      "revId": "412161926908cf7093ac11e019d7e4a847b8fb96",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "49413739_82561a34",
        "filename": "/COMMIT_MSG",
        "patchSetId": 33
      },
      "lineNbr": 38,
      "author": {
        "id": 1003152
      },
      "writtenOn": "2017-08-03T12:19:38Z",
      "side": 1,
      "message": "Done. Sorry, I forgot to proofread.",
      "parentUuid": "36258b85_c0d1fdaf",
      "range": {
        "startLine": 38,
        "startChar": 21,
        "endLine": 38,
        "endChar": 24
      },
      "revId": "412161926908cf7093ac11e019d7e4a847b8fb96",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c46e3e6c_6290172e",
        "filename": "content/browser/frame_host/render_frame_host_impl.cc",
        "patchSetId": 33
      },
      "lineNbr": 2886,
      "author": {
        "id": 1003152
      },
      "writtenOn": "2017-08-02T15:59:30Z",
      "side": 1,
      "message": "Because I could not figure out how to set up |child_identity| here and service_manifests in GN files for the unit test target so that the |connector-\u003eFilterInterfaces()| call below would not reject the interface request.\n\nBypassing the whole thing if |connector| is nullptr would work, but that makes for a weird security check. :-)",
      "revId": "412161926908cf7093ac11e019d7e4a847b8fb96",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "15e82575_2da400eb",
        "filename": "content/browser/frame_host/render_frame_host_impl.cc",
        "patchSetId": 33
      },
      "lineNbr": 2886,
      "author": {
        "id": 1002808
      },
      "writtenOn": "2017-08-02T16:56:47Z",
      "side": 1,
      "message": "Ah, right. It\u0027s kind of painful to try and correctly mock out the service environment in a unit test. I think it\u0027s reasonable to bypass this filtering in a test environment.\n\nEven if you did something to make it work, it would either be hard to maintain (i.e. would have to replicate a large chunk of the renderer manifest within the unittest manifest) or it would be just as cheesy as bypassing on a null connector (i.e. you would add a wildcard capability to the unittest).",
      "parentUuid": "c46e3e6c_6290172e",
      "revId": "412161926908cf7093ac11e019d7e4a847b8fb96",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6f51e843_206c3926",
        "filename": "content/browser/frame_host/render_frame_host_interface_provider_unittest.cc",
        "patchSetId": 33
      },
      "lineNbr": 134,
      "author": {
        "id": 1003152
      },
      "writtenOn": "2017-08-02T15:59:30Z",
      "side": 1,
      "message": "This line is failing as the InterfaceRequest is never delivered to the registered binder.",
      "revId": "412161926908cf7093ac11e019d7e4a847b8fb96",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cbb1f098_df230ff7",
        "filename": "content/common/content_message_generator.h",
        "patchSetId": 33
      },
      "lineNbr": 24,
      "author": {
        "id": 1001500
      },
      "writtenOn": "2017-08-02T23:08:34Z",
      "side": 1,
      "message": "Why is this include needed? Especially since it is after the frame_messages.h is already included, which will declare the params struct.",
      "revId": "412161926908cf7093ac11e019d7e4a847b8fb96",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b3e6c13f_24838851",
        "filename": "content/common/content_message_generator.h",
        "patchSetId": 33
      },
      "lineNbr": 24,
      "author": {
        "id": 1003152
      },
      "writtenOn": "2017-08-03T12:19:38Z",
      "side": 1,
      "message": "No longer needed, I was playing around with things here and forgot to remove it.",
      "parentUuid": "cbb1f098_df230ff7",
      "revId": "412161926908cf7093ac11e019d7e4a847b8fb96",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f5e59b52_fe9dae2e",
        "filename": "content/common/frame.mojom",
        "patchSetId": 33
      },
      "lineNbr": 106,
      "author": {
        "id": 1001500
      },
      "writtenOn": "2017-08-02T23:08:34Z",
      "side": 1,
      "message": "Why do we have this as a separate method call? It feels like any setup needed for the initial empty document should be done as part of CreateFrame in FrameFactory.",
      "range": {
        "startLine": 106,
        "startChar": 2,
        "endLine": 106,
        "endChar": 46
      },
      "revId": "412161926908cf7093ac11e019d7e4a847b8fb96",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0f0b2940_c1e578c7",
        "filename": "content/common/frame.mojom",
        "patchSetId": 33
      },
      "lineNbr": 106,
      "author": {
        "id": 1003152
      },
      "writtenOn": "2017-08-03T12:19:38Z",
      "side": 1,
      "message": "Note that FrameFactory::CreateFrame merely creates the `Frame` Mojo interface, not the actual RenderFrameImpl itself. It is also not synchronized with the actual creation/initialization of the RFI, while there are already some interface requests issued against the InterfaceProvider during RFI::Init.\n\nI\u0027m not sure if we have infrastructure to queue these requests on the renderer side if the browser sends down the InterfaceProviderPtr. Ken?",
      "parentUuid": "f5e59b52_fe9dae2e",
      "range": {
        "startLine": 106,
        "startChar": 2,
        "endLine": 106,
        "endChar": 46
      },
      "revId": "412161926908cf7093ac11e019d7e4a847b8fb96",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ccb7da9d_e8174275",
        "filename": "content/common/frame.mojom",
        "patchSetId": 33
      },
      "lineNbr": 106,
      "author": {
        "id": 1002808
      },
      "writtenOn": "2017-08-03T17:12:22Z",
      "side": 1,
      "message": "There\u0027s a way to do that (secret: we can actually fuse pipes together) but I recommend against using it for this. The feature adds complexity to Mojo and I\u0027m still on the fence about whether or not we should remove it.\n\nIn any case, why does the empty frame actually need a functioning interface provider? Do we care about any of its interface requests? If not you can just drop the request side of the pipe when setting up the interface provider in the renderer, so all interface requests will safely be routed into the abyss.",
      "parentUuid": "0f0b2940_c1e578c7",
      "range": {
        "startLine": 106,
        "startChar": 2,
        "endLine": 106,
        "endChar": 46
      },
      "revId": "412161926908cf7093ac11e019d7e4a847b8fb96",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e63c20b3_3a4454c6",
        "filename": "content/common/frame.mojom",
        "patchSetId": 33
      },
      "lineNbr": 106,
      "author": {
        "id": 1003152
      },
      "writtenOn": "2017-08-03T18:59:34Z",
      "side": 1,
      "message": "We need it for the scenario where an \u003ciframe\u003e is dynamically inserted, and then before it would commit a real load, the parent uses document.write() to write a \u003cscript\u003e into it that calls Web APIs backed by Mojo.\n\nIn this case, the message loop is not pumped between CreateChildFrame and the invocations of said Web APIs from the newly created child.",
      "parentUuid": "ccb7da9d_e8174275",
      "range": {
        "startLine": 106,
        "startChar": 2,
        "endLine": 106,
        "endChar": 46
      },
      "revId": "412161926908cf7093ac11e019d7e4a847b8fb96",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0d5488e2_9f892cfb",
        "filename": "content/common/frame.mojom",
        "patchSetId": 33
      },
      "lineNbr": 106,
      "author": {
        "id": 1003152
      },
      "writtenOn": "2017-08-03T19:01:56Z",
      "side": 1,
      "message": "I\u0027d also like to avoid mixing push/pull approaches here, i.e. that the browser side sends an IPPtr into a newly created frame, but on commit the frame sends an IPRequest to the browser side.",
      "parentUuid": "e63c20b3_3a4454c6",
      "range": {
        "startLine": 106,
        "startChar": 2,
        "endLine": 106,
        "endChar": 46
      },
      "revId": "412161926908cf7093ac11e019d7e4a847b8fb96",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2d7034fe_9d9cd4df",
        "filename": "content/common/frame.mojom",
        "patchSetId": 33
      },
      "lineNbr": 106,
      "author": {
        "id": 1002808
      },
      "writtenOn": "2017-08-03T19:03:58Z",
      "side": 1,
      "message": "Ah right, makes sense. I think what I\u0027d really like is for the empty document to share the InterfaceProvider its creator is using, but that\u0027s not quite feasible right now given how things are arranged on the browser side.\n\nThis message seems OK to me based on the rationale here. nasko@?",
      "parentUuid": "0d5488e2_9f892cfb",
      "range": {
        "startLine": 106,
        "startChar": 2,
        "endLine": 106,
        "endChar": 46
      },
      "revId": "412161926908cf7093ac11e019d7e4a847b8fb96",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "97506b7f_b7390c89",
        "filename": "content/common/frame.mojom",
        "patchSetId": 33
      },
      "lineNbr": 106,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-08-03T19:09:42Z",
      "side": 1,
      "message": "Why can\u0027t we just send this InterfaceProvider in the messages that create new frames?",
      "parentUuid": "2d7034fe_9d9cd4df",
      "range": {
        "startLine": 106,
        "startChar": 2,
        "endLine": 106,
        "endChar": 46
      },
      "revId": "412161926908cf7093ac11e019d7e4a847b8fb96",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0efa2029_ad49bf3c",
        "filename": "content/common/frame.mojom",
        "patchSetId": 33
      },
      "lineNbr": 106,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-08-03T19:12:04Z",
      "side": 1,
      "message": "To expand on this, with PlzNavigate, the browser will be telling the renderer where to navigate anyway, so it will be a consistent push model.",
      "parentUuid": "97506b7f_b7390c89",
      "range": {
        "startLine": 106,
        "startChar": 2,
        "endLine": 106,
        "endChar": 46
      },
      "revId": "412161926908cf7093ac11e019d7e4a847b8fb96",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7bf939dd_17193322",
        "filename": "content/common/frame.mojom",
        "patchSetId": 33
      },
      "lineNbr": 106,
      "author": {
        "id": 1003152
      },
      "writtenOn": "2017-08-03T19:36:51Z",
      "side": 1,
      "message": "Hmm, I don\u0027t see how that will work for child frames created by the renderer, in the edge case scenario where the parent immediate calls document.write on the subframe? Could you please elaborate?\n\nIn my naive view, it looks like the renderer would need to `pull` the InterfaceProvider with the response to the sync FrameHostMsg_CreateChildFrame message, which would again mix pull/push semantics.\n\nIn addition, my understanding is that Mojo/IPC interop does not currently support adding InterfaceRequests to legacy IPC like FrameHostMsg_CreateChildFrame, and Mojofying that seems tricky (?) as it is handled on the IO thread.",
      "parentUuid": "0efa2029_ad49bf3c",
      "range": {
        "startLine": 106,
        "startChar": 2,
        "endLine": 106,
        "endChar": 46
      },
      "revId": "412161926908cf7093ac11e019d7e4a847b8fb96",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ac121823_016e37bc",
        "filename": "content/common/frame.mojom",
        "patchSetId": 33
      },
      "lineNbr": 106,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-08-03T20:51:16Z",
      "side": 1,
      "message": "This would have to pass a raw message pipe handle (for now) if we don\u0027t mojofy it.\n\nSemantic-wise, I never really thought of it as \u0027pull\u0027, though I agree that\u0027s certainly one way to view it. However, using those semantics, the renderer already \u0027pulls\u0027 the new routing ID from the browser process, and I think pulling a new InterfaceProvider along with it is a pretty analogous operation.",
      "parentUuid": "7bf939dd_17193322",
      "range": {
        "startLine": 106,
        "startChar": 2,
        "endLine": 106,
        "endChar": 46
      },
      "revId": "412161926908cf7093ac11e019d7e4a847b8fb96",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9881c208_d2e525f6",
        "filename": "content/common/frame.mojom",
        "patchSetId": 33
      },
      "lineNbr": 106,
      "author": {
        "id": 1003152
      },
      "writtenOn": "2017-08-03T21:09:56Z",
      "side": 1,
      "message": "In contrast, however, the routing ID never changes, and is never `pushed`, so the semantics are clear there.",
      "parentUuid": "ac121823_016e37bc",
      "range": {
        "startLine": 106,
        "startChar": 2,
        "endLine": 106,
        "endChar": 46
      },
      "revId": "412161926908cf7093ac11e019d7e4a847b8fb96",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8e8840ab_cbe47c60",
        "filename": "content/common/frame.mojom",
        "patchSetId": 33
      },
      "lineNbr": 106,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-08-03T21:26:12Z",
      "side": 1,
      "message": "For now \u003d)\n\nThere\u0027s a non-trivial chance that this will change in the next quarter.",
      "parentUuid": "9881c208_d2e525f6",
      "range": {
        "startLine": 106,
        "startChar": 2,
        "endLine": 106,
        "endChar": 46
      },
      "revId": "412161926908cf7093ac11e019d7e4a847b8fb96",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8b9bc4c1_daa27bf6",
        "filename": "content/common/frame.mojom",
        "patchSetId": 33
      },
      "lineNbr": 106,
      "author": {
        "id": 1001500
      },
      "writtenOn": "2017-08-03T23:38:14Z",
      "side": 1,
      "message": "Ok, I was mistaken with CreateFrame API above, as it is the one that the browser process uses to create frames in the renderer process. I meant the opposite direction - when creating a RenderFrameImpl, we send sync IPC to the browser process to get the routing ID, which is what I mistook the CreateFrame for. It is actually FrameHostMsg_CreateChildFrame and it is still old IPC. I think converting that one to Mojo and passing it the InterfaceProvider as part of the parameters it the better pattern to use here. \n\nI think the creation of the frame browser side and the establishment of the Mojo channel should be done all at once. It will account properly for the initial empty document state and we don\u0027t need a separate call of that case. In all other cases, the frame creation will be driven by the browser process, so sending the pipe down to the renderer makes sense in those.",
      "parentUuid": "8e8840ab_cbe47c60",
      "range": {
        "startLine": 106,
        "startChar": 2,
        "endLine": 106,
        "endChar": 46
      },
      "revId": "412161926908cf7093ac11e019d7e4a847b8fb96",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "233719e0_3538667d",
        "filename": "content/common/frame.mojom",
        "patchSetId": 33
      },
      "lineNbr": 116,
      "author": {
        "id": 1001500
      },
      "writtenOn": "2017-08-02T23:08:34Z",
      "side": 1,
      "message": "I find the name \"request\" to be a bit misleading, given that the type is InterfaceProvider. Not sure if this is to keep it consistent with other APIs that make Mojo interface requests.",
      "range": {
        "startLine": 116,
        "startChar": 48,
        "endLine": 116,
        "endChar": 55
      },
      "revId": "412161926908cf7093ac11e019d7e4a847b8fb96",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f518f64d_62650b23",
        "filename": "content/common/frame.mojom",
        "patchSetId": 33
      },
      "lineNbr": 116,
      "author": {
        "id": 1003152
      },
      "writtenOn": "2017-08-03T12:19:38Z",
      "side": 1,
      "message": "The other popular term would be |interfaces|. Does that sound better?",
      "parentUuid": "233719e0_3538667d",
      "range": {
        "startLine": 116,
        "startChar": 48,
        "endLine": 116,
        "endChar": 55
      },
      "revId": "412161926908cf7093ac11e019d7e4a847b8fb96",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3085f0e6_46a7b931",
        "filename": "content/common/frame.mojom",
        "patchSetId": 33
      },
      "lineNbr": 116,
      "author": {
        "id": 1001500
      },
      "writtenOn": "2017-08-03T23:38:14Z",
      "side": 1,
      "message": "interface_request? :)",
      "parentUuid": "f518f64d_62650b23",
      "range": {
        "startLine": 116,
        "startChar": 48,
        "endLine": 116,
        "endChar": 55
      },
      "revId": "412161926908cf7093ac11e019d7e4a847b8fb96",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "967525c7_3b8bd462",
        "filename": "content/common/frame_messages.typemap",
        "patchSetId": 33
      },
      "lineNbr": 8,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-08-03T19:09:42Z",
      "side": 1,
      "message": "Why unique_ptr? It seems like it\u0027s just adding an indirection.",
      "revId": "412161926908cf7093ac11e019d7e4a847b8fb96",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8379bc34_985b9492",
        "filename": "content/common/frame_messages.typemap",
        "patchSetId": 33
      },
      "lineNbr": 8,
      "author": {
        "id": 1003152
      },
      "writtenOn": "2017-08-03T19:36:51Z",
      "side": 1,
      "message": "This struct is huge, so I wanted to save some copies and/or member-wise moves.\n\nWhile in most places we can pass it by const\u0026, the RFHI implementation wants to modify the incoming parameters in place...\n\nMaking it `move_only` would solve this, but would force member-wise moves in all other places, making those places less efficient.\n\nUsing the naked type also makes it impossible to use this type as a Mojo struct member (because of the IPC macro multiple-inclusion-but-at-most-once-per-translation-unit trickery).",
      "parentUuid": "967525c7_3b8bd462",
      "revId": "412161926908cf7093ac11e019d7e4a847b8fb96",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d69dfbc4_920735d3",
        "filename": "content/common/frame_messages.typemap",
        "patchSetId": 33
      },
      "lineNbr": 8,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-08-03T20:51:16Z",
      "side": 1,
      "message": "Looking at how it\u0027s used (https://cs.chromium.org/chromium/src/content/browser/frame_host/render_frame_host_impl.cc?l\u003d1453\u0026gs\u003dcpp%253Acontent%253A%253Aclass-RenderFrameHostImpl%253A%253AOnDidCommitProvisionalLoad(const%2BIPC%253A%253AMessage%2B%2526)%253A%253Avalidated_params%2540chromium%252F..%252F..%252Fcontent%252Fbrowser%252Fframe_host%252Frender_frame_host_impl.cc%253A60405%257Cdef\u0026gsn\u003dvalidated_params\u0026ct\u003dxref_usages), it looks like there\u0027s only one thing modifying it, and that can go away once the legacy non-PlzNavigate path is deleted.",
      "parentUuid": "8379bc34_985b9492",
      "revId": "412161926908cf7093ac11e019d7e4a847b8fb96",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "895d0cf2_5123e2a0",
        "filename": "content/common/frame_messages.typemap",
        "patchSetId": 33
      },
      "lineNbr": 8,
      "author": {
        "id": 1003152
      },
      "writtenOn": "2017-08-03T21:09:56Z",
      "side": 1,
      "message": "Right. Until then, would you rather we made a copy here and got rid of unique_ptr?",
      "parentUuid": "d69dfbc4_920735d3",
      "revId": "412161926908cf7093ac11e019d7e4a847b8fb96",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "83928cb4_bd90e777",
        "filename": "content/common/frame_messages.typemap",
        "patchSetId": 33
      },
      "lineNbr": 8,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-08-03T21:26:12Z",
      "side": 1,
      "message": "I guess the old path won\u0027t be removed until M63, so this is fine for now. I\u0027ll make a mental note to revisit at that time...",
      "parentUuid": "895d0cf2_5123e2a0",
      "revId": "412161926908cf7093ac11e019d7e4a847b8fb96",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f3698c6d_3f10279e",
        "filename": "content/common/frame_messages_forward.h",
        "patchSetId": 33
      },
      "lineNbr": 8,
      "author": {
        "id": 1001500
      },
      "writtenOn": "2017-08-02T23:08:34Z",
      "side": 1,
      "message": "nit: Please spell out the full word.",
      "range": {
        "startLine": 8,
        "startChar": 3,
        "endLine": 8,
        "endChar": 6
      },
      "revId": "412161926908cf7093ac11e019d7e4a847b8fb96",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5f81742b_8ce26aad",
        "filename": "content/common/frame_messages_forward.h",
        "patchSetId": 33
      },
      "lineNbr": 8,
      "author": {
        "id": 1003152
      },
      "writtenOn": "2017-08-03T12:19:38Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f3698c6d_3f10279e",
      "range": {
        "startLine": 8,
        "startChar": 3,
        "endLine": 8,
        "endChar": 6
      },
      "revId": "412161926908cf7093ac11e019d7e4a847b8fb96",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c6d52d6d_901da859",
        "filename": "content/renderer/media/media_factory.h",
        "patchSetId": 33
      },
      "lineNbr": 141,
      "author": {
        "id": 1001500
      },
      "writtenOn": "2017-08-02T23:08:34Z",
      "side": 1,
      "message": "nit: s/is it might/it can/?",
      "range": {
        "startLine": 141,
        "startChar": 32,
        "endLine": 141,
        "endChar": 34
      },
      "revId": "412161926908cf7093ac11e019d7e4a847b8fb96",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8374033f_d08e6ae4",
        "filename": "content/renderer/media/media_factory.h",
        "patchSetId": 33
      },
      "lineNbr": 141,
      "author": {
        "id": 1003152
      },
      "writtenOn": "2017-08-03T12:19:38Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c6d52d6d_901da859",
      "range": {
        "startLine": 141,
        "startChar": 32,
        "endLine": 141,
        "endChar": 34
      },
      "revId": "412161926908cf7093ac11e019d7e4a847b8fb96",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}