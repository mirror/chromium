{
  "comments": [
    {
      "key": {
        "uuid": "7df019f7_245835d0",
        "filename": "third_party/WebKit/Source/platform/RuntimeEnabledFeatures.json5",
        "patchSetId": 7
      },
      "lineNbr": 160,
      "author": {
        "id": 1001472
      },
      "writtenOn": "2017-07-10T02:43:13Z",
      "side": 1,
      "message": "Are we starting with stable but needs this runtime flag?",
      "revId": "ec5bc23195c9c7b5738c5d3e49f4a5bf35a8ed86",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5b870485_282b2e6a",
        "filename": "third_party/WebKit/Source/platform/loader/fetch/ClientHintsPreferences.cpp",
        "patchSetId": 7
      },
      "lineNbr": 36,
      "author": {
        "id": 1114080
      },
      "writtenOn": "2017-07-10T02:30:29Z",
      "side": 1,
      "message": "enabled_types_{}\n\n(And I prefer having this initialization in the header, like\n\n  bool enabled_types_[kWebClientHintsTypeNumValues] \u003d {};\n\n).",
      "revId": "ec5bc23195c9c7b5738c5d3e49f4a5bf35a8ed86",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b198b7fc_8c5cb6fb",
        "filename": "third_party/WebKit/Source/platform/loader/fetch/ClientHintsPreferences.h",
        "patchSetId": 7
      },
      "lineNbr": 36,
      "author": {
        "id": 1002864
      },
      "writtenOn": "2017-07-10T03:34:59Z",
      "side": 1,
      "message": "prefernces -\u003e preferences",
      "revId": "ec5bc23195c9c7b5738c5d3e49f4a5bf35a8ed86",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a391896a_b2f7eb45",
        "filename": "third_party/WebKit/Source/platform/loader/fetch/ClientHintsPreferences.h",
        "patchSetId": 7
      },
      "lineNbr": 49,
      "author": {
        "id": 1001472
      },
      "writtenOn": "2017-07-10T02:43:13Z",
      "side": 1,
      "message": "Is this a test-only method? Could this be SetShouldSentForTesting() ?\n\nAlso if it always takes true we can omit the parameter",
      "revId": "ec5bc23195c9c7b5738c5d3e49f4a5bf35a8ed86",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a1262396_8bb65b48",
        "filename": "third_party/WebKit/Source/platform/loader/fetch/ClientHintsPreferencesTest.cpp",
        "patchSetId": 7
      },
      "lineNbr": 56,
      "author": {
        "id": 1114080
      },
      "writtenOn": "2017-07-10T02:30:29Z",
      "side": 1,
      "message": "\u003d {};",
      "range": {
        "startLine": 56,
        "startChar": 56,
        "endLine": 56,
        "endChar": 61
      },
      "revId": "ec5bc23195c9c7b5738c5d3e49f4a5bf35a8ed86",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ce0238a5_ec46f5b8",
        "filename": "third_party/WebKit/Source/platform/loader/fetch/ResourceLoader.cpp",
        "patchSetId": 7
      },
      "lineNbr": 480,
      "author": {
        "id": 1114080
      },
      "writtenOn": "2017-07-10T02:30:29Z",
      "side": 1,
      "message": "\u003d {};",
      "revId": "ec5bc23195c9c7b5738c5d3e49f4a5bf35a8ed86",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "58034574_e4817c76",
        "filename": "third_party/WebKit/public/platform/WebClientHintsType.h",
        "patchSetId": 7
      },
      "lineNbr": 2,
      "author": {
        "id": 1114080
      },
      "writtenOn": "2017-07-10T02:30:29Z",
      "side": 1,
      "message": "Please use the correct license.",
      "revId": "ec5bc23195c9c7b5738c5d3e49f4a5bf35a8ed86",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "72169394_0fbf3708",
        "filename": "third_party/WebKit/public/platform/WebClientHintsType.h",
        "patchSetId": 7
      },
      "lineNbr": 29,
      "author": {
        "id": 1001472
      },
      "writtenOn": "2017-07-10T02:43:13Z",
      "side": 1,
      "message": "Please use the new, shorter copyright format.",
      "revId": "ec5bc23195c9c7b5738c5d3e49f4a5bf35a8ed86",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6ccd8706_34930da2",
        "filename": "third_party/WebKit/public/platform/WebClientHintsType.h",
        "patchSetId": 7
      },
      "lineNbr": 39,
      "author": {
        "id": 1002864
      },
      "writtenOn": "2017-07-10T03:34:59Z",
      "side": 1,
      "message": "Have you changed RAM to Ram to follow the style guide at https://google.github.io/styleguide/cppguide.html#Type_Names? Then it\u0027s fine but how about changing also DPR to Dpr for consistency?",
      "revId": "ec5bc23195c9c7b5738c5d3e49f4a5bf35a8ed86",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5d1a7d03_1a49b46c",
        "filename": "third_party/WebKit/public/platform/WebClientHintsType.h",
        "patchSetId": 7
      },
      "lineNbr": 44,
      "author": {
        "id": 1001472
      },
      "writtenOn": "2017-07-10T02:43:13Z",
      "side": 1,
      "message": "nit: optional, but I prefer not having num-of- type constant a part of the enum itself, as having unused value confuses switch/case warnings etc. (Some code instead have kLast \u003d ... type of enum value and uses static_cast\u003cint\u003e(kLast + 1) constant for enum size)",
      "revId": "ec5bc23195c9c7b5738c5d3e49f4a5bf35a8ed86",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}