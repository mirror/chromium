{
  "comments": [
    {
      "key": {
        "uuid": "51aa4b6a_3cb10d58",
        "filename": "chrome/browser/ui/browser_commands.cc",
        "patchSetId": 3
      },
      "lineNbr": 681,
      "author": {
        "id": 1000805
      },
      "writtenOn": "2017-07-21T06:37:55Z",
      "side": 1,
      "message": "Maybe this should reveal too?  (Though I dunno if you can trigger it directly via shortcut)",
      "revId": "f7a42bf9bd55f284cea6205cbf9cb2e579722647",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b72852ec_a5321222",
        "filename": "chrome/browser/ui/browser_commands.cc",
        "patchSetId": 3
      },
      "lineNbr": 681,
      "author": {
        "id": 1125479
      },
      "writtenOn": "2017-07-21T20:16:11Z",
      "side": 1,
      "message": "No, you can\u0027t trigger this via a shortcut, so I think we don\u0027t need to reveal the tabstrip as it would already be revealed via mouse cursor.",
      "parentUuid": "51aa4b6a_3cb10d58",
      "revId": "f7a42bf9bd55f284cea6205cbf9cb2e579722647",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2027f0bf_30c1751d",
        "filename": "chrome/browser/ui/cocoa/browser_window_cocoa.mm",
        "patchSetId": 3
      },
      "lineNbr": 328,
      "author": {
        "id": 1000805
      },
      "writtenOn": "2017-07-21T06:37:55Z",
      "side": 1,
      "message": "Honestly, I\u0027d think we\u0027d want some kind of implementation on Mac, since it has a top toolbar that animates down from offscreen when in fullscreen mode, doesn\u0027t it?",
      "revId": "f7a42bf9bd55f284cea6205cbf9cb2e579722647",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6386c3e4_b37b01f6",
        "filename": "chrome/browser/ui/cocoa/browser_window_cocoa.mm",
        "patchSetId": 3
      },
      "lineNbr": 328,
      "author": {
        "id": 1125479
      },
      "writtenOn": "2017-07-21T20:16:11Z",
      "side": 1,
      "message": "Sorry, I don\u0027t know anything about Macs. \nI checked this file to see if the ImmersiveRevealedLock was used anywhere here, and I couldn\u0027t find any. Maybe +tapted@ can advise?",
      "parentUuid": "2027f0bf_30c1751d",
      "revId": "f7a42bf9bd55f284cea6205cbf9cb2e579722647",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f2963930_e0fccc79",
        "filename": "chrome/browser/ui/cocoa/browser_window_cocoa.mm",
        "patchSetId": 3
      },
      "lineNbr": 328,
      "author": {
        "id": 1000805
      },
      "writtenOn": "2017-07-22T04:19:47Z",
      "side": 1,
      "message": "I don\u0027t think we have an \"immersive fullscreen\" called by that name on Mac, but we have something that can reveal tabstrips via animation, I thought.",
      "parentUuid": "6386c3e4_b37b01f6",
      "revId": "f7a42bf9bd55f284cea6205cbf9cb2e579722647",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6517d64f_6b28df50",
        "filename": "chrome/browser/ui/views/frame/browser_non_client_frame_view_ash_browsertest.cc",
        "patchSetId": 3
      },
      "lineNbr": 382,
      "author": {
        "id": 1000805
      },
      "writtenOn": "2017-07-21T06:37:55Z",
      "side": 1,
      "message": "Nit: Can we use WaitableEvent in place of spinning a runloop?",
      "revId": "f7a42bf9bd55f284cea6205cbf9cb2e579722647",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "967831d6_5a453f07",
        "filename": "chrome/browser/ui/views/frame/browser_non_client_frame_view_ash_browsertest.cc",
        "patchSetId": 3
      },
      "lineNbr": 382,
      "author": {
        "id": 1125479
      },
      "writtenOn": "2017-07-21T20:16:11Z",
      "side": 1,
      "message": "It seems that WaitableEvent is used when one thread wants to wait for something happening on another thread. In our case here everything is happening on the UI thread, so we cannot really put it to sleep. Is my understanding wrong?",
      "parentUuid": "6517d64f_6b28df50",
      "revId": "f7a42bf9bd55f284cea6205cbf9cb2e579722647",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "92019619_2707229b",
        "filename": "chrome/browser/ui/views/frame/browser_non_client_frame_view_ash_browsertest.cc",
        "patchSetId": 3
      },
      "lineNbr": 382,
      "author": {
        "id": 1000805
      },
      "writtenOn": "2017-07-22T04:19:47Z",
      "side": 1,
      "message": "I thought about this more deeply.\n\nI think the OnImmersiveRevealXXX() functions aren\u0027t actually helping us.  They basically assert that, if you actually got the callback, the state is what you expect.  But presumably the likely way for all this to fail is to not get the callbacks at all, because the reveal didn\u0027t get triggered correctly.  In that case, the test just hangs.\n\nI think the safer pattern is to eliminate all the RunLoops and WaitUntil functions.  Instead, do something like this:\n\n  void OnImmersiveRevealStarted() override {\n    EXPECT_FALSE(reveal_started_);\n    EXPECT_FALSE(reveal_ended_);\n    reveal_started_ \u003d true;\n    EXPECT_TRUE(browser_view()-\u003eimmersive_mode_controller()-\u003eIsRevealed());\n    EXPECT_EQ(expected_index_,\n              browser()-\u003etab_strip_model()-\u003eactive_index());\n  }\n\n  void OnImmersiveRevealEnded() override {\n    EXPECT_TRUE(reveal_started_);\n    EXPECT_FALSE(reveal_ended_);\n    reveal_started_ \u003d false;\n    reveal_ended_ \u003d true;\n    EXPECT_FALSE(browser_view()-\u003eimmersive_mode_controller()-\u003eIsRevealed());\n  }\n\n  void RunTest(int command, int expected_index) {\n    reveal_started_ \u003d reveal_ended_ \u003d false;\n    expected_index_ \u003d expected_index;\n    browser()-\u003ecommand_controller()-\u003ecommand_updater()-\u003eExecuteCommand(\n        command);\n    base::RunLoop().RunUntilIdle();\n    EXPECT_TRUE(reveal_ended_);\n  }\n\n  int expected_index_;  // The tab that should be active while RunTest() runs.\n  ...\n\nIN_PROC_BROWSER_TEST_F(ImmersiveModeBrowserViewTest,\n                       TabNavigationAcceleratorsFullscreenBrowser) {\n  ...\n  struct TestData { int command; int expected_index; }\n  constexpr TestData test_data[] \u003d {{IDC_SELECT_LAST_TAB, 3}, ...};\n  for (auto datum : test_data)\n    RunTest(datum.command, datum.expected_index);\n}\n\nThis is less likely to be flaky/hang on error, and is less repetitive to boot.",
      "parentUuid": "967831d6_5a453f07",
      "revId": "f7a42bf9bd55f284cea6205cbf9cb2e579722647",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bdd9aac7_f01086b0",
        "filename": "chrome/browser/ui/views/frame/browser_non_client_frame_view_ash_browsertest.cc",
        "patchSetId": 3
      },
      "lineNbr": 418,
      "author": {
        "id": 1000805
      },
      "writtenOn": "2017-07-21T06:37:55Z",
      "side": 1,
      "message": "It feels strange that this EXPECT is after WaitUntilRevealEnds().  Would it not pass before then?",
      "revId": "f7a42bf9bd55f284cea6205cbf9cb2e579722647",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8ba25c52_878add86",
        "filename": "chrome/browser/ui/views/frame/browser_non_client_frame_view_ash_browsertest.cc",
        "patchSetId": 3
      },
      "lineNbr": 418,
      "author": {
        "id": 1125479
      },
      "writtenOn": "2017-07-21T20:16:11Z",
      "side": 1,
      "message": "This tests that we\u0027re in fullscreen mode, regardless of the status of the tabstrip whether it\u0027s revealed or not.\n\nI changed the order and added another EXPECT for the revealed state. Done.",
      "parentUuid": "bdd9aac7_f01086b0",
      "revId": "f7a42bf9bd55f284cea6205cbf9cb2e579722647",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "098a6b52_eb7efb3a",
        "filename": "chrome/browser/ui/views/frame/browser_view.cc",
        "patchSetId": 3
      },
      "lineNbr": 194,
      "author": {
        "id": 1000805
      },
      "writtenOn": "2017-07-21T06:37:55Z",
      "side": 1,
      "message": "Nit: Could probably just use a do-nothing lambda for this.",
      "revId": "f7a42bf9bd55f284cea6205cbf9cb2e579722647",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a2289d7b_d4776b2b",
        "filename": "chrome/browser/ui/views/frame/browser_view.cc",
        "patchSetId": 3
      },
      "lineNbr": 194,
      "author": {
        "id": 1125479
      },
      "writtenOn": "2017-07-21T20:16:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "098a6b52_eb7efb3a",
      "revId": "f7a42bf9bd55f284cea6205cbf9cb2e579722647",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "32e31e11_0cbe4fc6",
        "filename": "chrome/browser/ui/views/frame/browser_view.cc",
        "patchSetId": 3
      },
      "lineNbr": 822,
      "author": {
        "id": 1000805
      },
      "writtenOn": "2017-07-21T06:37:55Z",
      "side": 1,
      "message": "Nit: Prefer \u003d to () for this; see https://www.chromium.org/developers/coding-style/cpp-dos-and-donts#TOC-Variable-initialization .",
      "revId": "f7a42bf9bd55f284cea6205cbf9cb2e579722647",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4c0adec8_d7e656b7",
        "filename": "chrome/browser/ui/views/frame/browser_view.cc",
        "patchSetId": 3
      },
      "lineNbr": 822,
      "author": {
        "id": 1125479
      },
      "writtenOn": "2017-07-21T20:16:11Z",
      "side": 1,
      "message": "unique_ptr ctor is marked explicit so I had to use base::WrapUnique instead.",
      "parentUuid": "32e31e11_0cbe4fc6",
      "revId": "f7a42bf9bd55f284cea6205cbf9cb2e579722647",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "61057f37_30036ce5",
        "filename": "chrome/browser/ui/views/frame/browser_view.cc",
        "patchSetId": 3
      },
      "lineNbr": 822,
      "author": {
        "id": 1000805
      },
      "writtenOn": "2017-07-22T04:19:47Z",
      "side": 1,
      "message": "I see.  In that case () might have been better in the end.  I don\u0027t care much, use whatever you think is better :)",
      "parentUuid": "4c0adec8_d7e656b7",
      "revId": "f7a42bf9bd55f284cea6205cbf9cb2e579722647",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "00c91637_4fa08af2",
        "filename": "chrome/browser/ui/views/frame/browser_view.cc",
        "patchSetId": 3
      },
      "lineNbr": 827,
      "author": {
        "id": 1000805
      },
      "writtenOn": "2017-07-21T06:37:55Z",
      "side": 1,
      "message": "Is there something we can do to make sure that in tests this runs near-instantly?  Or are delayed tasks already run with no delay in tests?  (I saw that proposal somewhere but I don\u0027t know if it was implemented.)\n\nI\u0027d hate to have every invocation of the browsertest for this take an extra four seconds to complete; that\u0027s a lot of waiting across all bots on all CLs.",
      "revId": "f7a42bf9bd55f284cea6205cbf9cb2e579722647",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "900c5ed0_98dbb2f2",
        "filename": "chrome/browser/ui/views/frame/browser_view.cc",
        "patchSetId": 3
      },
      "lineNbr": 827,
      "author": {
        "id": 1125479
      },
      "writtenOn": "2017-07-21T20:16:11Z",
      "side": 1,
      "message": "The ash::ImmersiveFullscreenControllerTestApi::SetupForTest() (which we call in PreRunTestOnMainThread() should disable all revealer animations).\n\nI also added a way to turn off the revealer delay and added waiter to wait for the reveal start.",
      "parentUuid": "00c91637_4fa08af2",
      "revId": "f7a42bf9bd55f284cea6205cbf9cb2e579722647",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}