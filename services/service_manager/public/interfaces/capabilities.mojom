// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module service_manager.mojom;

// Capabilities ----------------------------------------------------------------
//
// Services expose interfaces and capability classes to one another.
//
// In a CapabilitySpec, an interface is represented by its fully qualified name,
// which is serialized based on the interface name and module path:
// module::InterfaceName.
//
// A class is an alias to something, either a set of interface names granted
// with that class, or some behavior specific to the application that provides
// it.

// Defines a collection of interfaces. We don't represent this as a bare array
// in-situ in mojom because we rely on type maps to generate a set container in
// C++ which is unavailable for a bare array.
struct Interfaces {
  array<string> interfaces;
};

// Defines a collection of classes. See note above about not just using a bare
// array.
struct Classes {
  array<string> classes;
};

// Describes the capabilities offered and requested by an service.
// This struct is populated from the service manifest.
struct CapabilitySpec {
  // The classes offered by this service, and for each class an array of
  // interfaces. If no interfaces are granted with a class, the array will be
  // empty.
  // A map of class name -> array of interfaces. The array can be empty,
  // non-empty, or ["*"], which means allow access to all interfaces.
  map<string, Interfaces> provided;

  // The services this service needs to speak to, and the classes it requires.
  // A map of service name -> collection of required classes. "*" is also
  // supported as the key, which supplies a set of classes required from all
  // services in addition to specific ones specified.
  map<string, Classes> required;
};
