// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module network.mojom;

import "mojo/common/read_only_buffer.mojom";
import "net/interfaces/ip_endpoint.mojom";

// UDPSocket and UDPSocketReceiver represent a UDP socket and its client. The
// typical flow of using the interfaces is:
// - Acquire a UDPSocket interface pointer and a UDPSocketReceiver interface
//   request. The UDPSocket will be bound to a local address upon success.
// - (optional) Set options.
// - Send / request to receive datagrams. Received datagrams will be delivered
//   to the bound receiver's OnReceived() call.
interface UDPSocket {
  // Sets the OS send buffer size (in bytes) for the socket. This is the
  // SO_SNDBUF socket option. Returns net::OK upon success, and a net error
  // code upon failure.
  SetSendBufferSize(uint32 size) => (int32 result);

  // Sets the OS receive buffer size (in bytes) for the socket. This is the
  // SO_RCVBUF socket option. Returns net::OK upon success, and a net error
  // code upon failure.
  SetReceiveBufferSize(uint32 size) => (int32 result);

  // Negotiates the maximum number of pending SendTo() requests. If
  // |max_num_pending_datagrams| is set to 0, this method queries the current
  // settings.
  //
  // The service stores SendTo() requests in a queue while they are waiting to
  // be executed (i.e., while they are waiting to be placed in the OS send
  // buffer and sent out). This method negotiates how many requests (not bytes)
  // this queue is able to store. If the queue is full, the service fails new
  // requests directly with error code ERR_INSUFFICIENT_RESOURCES and discards
  // those datagrams. If the client wants to avoid such failures, it needs to
  // keep track of how many SendTo() calls are pending and make sure the number
  // doesn't exceed the result of this method. Any compatible implementation
  // must allow at least two pending SendTo() requests (one in the send request
  // queue and one that is executed but is inflight).
  NegotiateMaxPendingSendRequests(uint32 max_num_pending_datagrams)
      => (uint32 max_num_pending_datagrams);

  // Notifies that the receiver is ready to accept |number| of datagrams.
  // Correspondingly, OnReceived() of the UDPSocketReceiver interface will be
  // called |number| times (errors also count), unless the connection is closed
  // before that. The implementation may return net::ERR_INSUFFICIENT_RESOURCES
  // in an OnReceived() callback if the service doesn't have enough resource to
  // complete the operation.
  //
  // It is allowed to call this method again before the previous request is
  // completely satisfied. For example:
  //   service->ReceiveMore(3);
  //   ...
  //   // OnReceived() is called.
  //   // OnReceived() is called.
  //   ...
  //   service->ReceiveMore(3);
  //   // The client expects 4 more calls to OnReceived().
  //
  // Please note that how ReceiveMore() is used will affect performance
  // significantly. For example:
  //   // Approach 1:
  //   service->ReceiveMore(3);
  //   // OnReceived() is called.
  //   // OnReceived() is called.
  //   // OnReceived() is called.
  //
  //   // Approach 2:
  //   service->ReceiveMore(1);
  //   // OnReceived() is called.
  //   service->ReceiveMore(1);
  //   // OnReceived() is called.
  //   service->ReceiveMore(1);
  //   // OnReceived() is called.
  //
  // It is very likely that approach 1 will perform better than approach 2,
  // because in approach 2 getting every datagram takes at least the time of a
  // round trip to the service side.
  // Note that using a number too high could result in high memory usage, as a
  // lot of datagrams could end up queued in the Mojo buffer.
  // TODO(xunjieli): Allow consumer to configure underlying read buffer size.
  // This is currently set to be 128KB, which is likely to be too big.
  ReceiveMore(uint32 num_additional_datagrams);

  // Sends data to the specified destination. |dest_addr| is allowed to be null
  // if a remote address has been specified when acquiring the interface ptr.
  // Upon successfully handing the data to the OS, |result| is a non-negative
  // number indicating how many bytes have been written. Otherwise, it is a
  // network error code, including (but not limited to):
  // - net::ERR_INSUFFICIENT_RESOURCES (-12): The service doesn't have
  //   sufficient resource to complete the operation. When this happens, the
  //   requests will be failed quickly (which might happen before the completion
  //   of requests that were sent earlier).
  SendTo(net.interfaces.IPEndPoint dest_addr,
         mojo.common.mojom.ReadOnlyBuffer data) => (int32 result);
};

interface UDPSocketReceiver {
  // On success, |result| is a non-negative number indicating how many bytes
  // have been received from |src_addr|. On failure, |result| is a network error
  // code and |data| is null. |result| is never 0.
  OnReceived(int32 result,
             net.interfaces.IPEndPoint src_addr,
             mojo.common.mojom.ReadOnlyBuffer? data);
};
