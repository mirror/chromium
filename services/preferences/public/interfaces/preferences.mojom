// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module prefs.mojom;

import "mojo/common/values.mojom";
import "services/preferences/public/interfaces/preferences_configuration.mojom";

const string kServiceName = "preferences";

// Used for the creation of a PreferencesService and to ensure that the
// PreferencesServiceClient is bound at creation time.
interface PreferencesServiceFactory {
  // Creates a PreferencesService bound to the provided |observer|.
  Create(PreferencesServiceClient observer, PreferencesService& service);
};

// Used to subscribe to preference changes within PreferenceManager. After
// requesting to observe, the current values for all requested keys are sent.
interface PreferencesServiceClient {
  OnPreferencesChanged(mojo.common.mojom.DictionaryValue preferences);
};

// Manages actual read/write of preference data. Accepts observers who subscribe
// to preferences, notifying them of changes.
interface PreferencesService {
  SetPreferences(mojo.common.mojom.DictionaryValue preferences);
  Subscribe(array<string> preferences);
};

const string kPrefStoreServiceName = "preferences2";

// The know pref store types.
//
// Should be kept in sync with PrefValueStore::PrefStoreType.
enum PrefStoreType {
  MANAGED,
  SUPERVISED_USER,
  EXTENSION,
  COMMAND_LINE,
  USER,
  RECOMMENDED,
  DEFAULT,
};

// Allows observing changes to prefs stored in a |PrefStore|.
interface PrefStoreObserver {
  // The preference with the given |key| has changed. If |value| is null then
  // the preference was deleted.
  OnPrefChanged(string key, mojo.common.mojom.Value? value);

  // The PrefStore has been initialized (asynchronously).
  OnInitializationCompleted(bool succeeded);
};

// Captures the connections to a PrefStore by supplying the initial state of the
// store and a handle to receive notifications on.
struct PrefStoreConnection {
  // Handle to receive updates on.
  PrefStoreObserver& observer;

  // Initial values of the PrefStore. These will not be communicated through
  // OnPrefChanged.
  mojo.common.mojom.DictionaryValue initial_prefs;

  // Is the PrefStore initialized? If not it should not be used before
  // OnInitializationCompleted has been called.
  bool is_initialized;
};

// Manages actual read of preference data. Accepts observers who subscribe to
// preferences, notifying them of changes.
interface PrefStore {
  // Add an observer of changes. This current values of all prefs will not be
  // communicated through a call to |observer| but instead be returned in
  // |initial_prefs|.
  AddObserver() => (PrefStoreConnection connection);
};

// Manages a registry of all pref stores. Registered pref stores can be
// connected to through the |PrefStoreConnector| interface.
interface PrefStoreRegistry {
  // Register a pref store.
  Register(PrefStoreType type, PrefStore pref_store);
};

// Allows connections to pref stores registered with |PrefStoreRegistry|.
interface PrefStoreConnector {
  // Connect to all registered pref stores, retrieving the current values of all
  // prefs in each store and an |observer| interfaces through which updates can
  // be received.
  Connect() => (map<PrefStoreType, PrefStoreConnection> connections);
};

// An interface providing mutation access to a PersistentPrefStore.
interface PersistentPrefStore {
  // Sets the value for |key|. A null |value| indicates a delete. |flags| is a
  // bitmask of WritablePrefStore::PrefWriteFlags.
  SetValue(string key, mojo.common.mojom.Value? value, uint32 flags);

  // These mirror the C++ PersistentPrefStore methods.
  CommitPendingWrite();
  SchedulePendingLossyWrites();
  ClearMutableValues();
};

// A connector that provides a way to connect to a PersistentPrefStore.
interface PersistentPrefStoreConnector {
  enum ReadError {
    NONE = 0,
    JSON_PARSE = 1,
    JSON_TYPE = 2,
    ACCESS_DENIED = 3,
    FILE_OTHER = 4,
    FILE_LOCKED = 5,
    NO_FILE = 6,
    JSON_REPEAT = 7,
    // OTHER = 8,  // Deprecated.
    FILE_NOT_SPECIFIED = 9,
    ASYNCHRONOUS_TASK_INCOMPLETE = 10,
  };

  // Connects to the PersistentPrefStore.
  // A null |preferences| indicates that the pref service failed to load prefs.
  // |pref_store| provides write access; |observer| is used to observe writes
  // instigated by other clients.
  [Sync]
  Connect() => (
      ReadError read_error,
      bool read_only,
      mojo.common.mojom.DictionaryValue? preferences,
      PersistentPrefStore? pref_store,
      PrefStoreObserver&? observer);
};

interface PrefServiceControl {
  // Initializes the pref service. This must be called before the service can
  // be used.
  Init(PersistentPrefStoreConfiguration configuration);
};
