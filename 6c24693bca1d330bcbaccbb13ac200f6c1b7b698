{
  "comments": [
    {
      "key": {
        "uuid": "84dd30a1_227da1ba",
        "filename": "content/browser/webauth/authenticator_impl.cc",
        "patchSetId": 1
      },
      "lineNbr": 195,
      "author": {
        "id": 1179305
      },
      "writtenOn": "2017-12-15T09:57:10Z",
      "side": 1,
      "message": "Is the cleanup not needed here anymore?",
      "revId": "6c24693bca1d330bcbaccbb13ac200f6c1b7b698",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "40e43162_fc61775a",
        "filename": "content/browser/webauth/authenticator_impl.cc",
        "patchSetId": 1
      },
      "lineNbr": 195,
      "author": {
        "id": 1128380
      },
      "writtenOn": "2017-12-15T22:18:29Z",
      "side": 1,
      "message": "Woops, thank you.",
      "parentUuid": "84dd30a1_227da1ba",
      "revId": "6c24693bca1d330bcbaccbb13ac200f6c1b7b698",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0307258d_29dba666",
        "filename": "content/browser/webauth/collected_client_data.h",
        "patchSetId": 1
      },
      "lineNbr": 19,
      "author": {
        "id": 1179305
      },
      "writtenOn": "2017-12-15T09:57:10Z",
      "side": 1,
      "message": "I have seen (and used) `static constexpr const char foo[] \u003d ....` for constant strings in the past. However, if I understand https://stackoverflow.com/a/14117121 and http://en.cppreference.com/w/cpp/language/storage_duration#Storage_duration correctly, both the `static` and `const` are actually not needed here. I am actually not sure what they style-guide dictates here, do you happen to know this?",
      "range": {
        "startLine": 19,
        "startChar": 0,
        "endLine": 19,
        "endChar": 28
      },
      "revId": "6c24693bca1d330bcbaccbb13ac200f6c1b7b698",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c9790e44_b896e7ed",
        "filename": "content/browser/webauth/collected_client_data.h",
        "patchSetId": 1
      },
      "lineNbr": 19,
      "author": {
        "id": 1179305
      },
      "writtenOn": "2017-12-15T12:21:57Z",
      "side": 1,
      "message": "So I did some more research, both `static constexpr const char` and `constexpr char` are equivalent in this case. Given that shorter is better in general, I like your version better.\n\nHowever, both of these versions result in internal linkage, meaning each compilation unit using these strings gets its own copy, resulting in multiple occurrences of this string in the binary. In order to avoid this you should declare your string as `extern const char kCreateType[];` followed by a `const char kCreateType[] \u003d \"webauthn.create\";` in the cc file. This is a bit cumbersome, but C++17 will improve it. There you can simply say `inline constexpr char kCreateType[] \u003d \"webauthn.create\";` to achieve the same effect. For more reading on this topic check out http://go/totw/140 (unfortunately Google only).",
      "parentUuid": "0307258d_29dba666",
      "range": {
        "startLine": 19,
        "startChar": 0,
        "endLine": 19,
        "endChar": 28
      },
      "revId": "6c24693bca1d330bcbaccbb13ac200f6c1b7b698",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a484dda0_a0bc5ad4",
        "filename": "content/browser/webauth/collected_client_data.h",
        "patchSetId": 1
      },
      "lineNbr": 19,
      "author": {
        "id": 1128380
      },
      "writtenOn": "2017-12-15T22:18:29Z",
      "side": 1,
      "message": "I feel like this changes every time I try to declare a constant :-) Thanks for doing the research!",
      "parentUuid": "c9790e44_b896e7ed",
      "range": {
        "startLine": 19,
        "startChar": 0,
        "endLine": 19,
        "endChar": 28
      },
      "revId": "6c24693bca1d330bcbaccbb13ac200f6c1b7b698",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "53b48c87_759dff58",
        "filename": "content/browser/webauth/collected_client_data.h",
        "patchSetId": 1
      },
      "lineNbr": 19,
      "author": {
        "id": 1128380
      },
      "writtenOn": "2017-12-16T00:22:48Z",
      "side": 1,
      "message": "Hm, I use this in authenticator_impl_unittest. Declaring it as an \"extern const...\" means that I\u0027d have to include the .cc file for the test, which seems worse than having the string copied.",
      "parentUuid": "a484dda0_a0bc5ad4",
      "range": {
        "startLine": 19,
        "startChar": 0,
        "endLine": 19,
        "endChar": 28
      },
      "revId": "6c24693bca1d330bcbaccbb13ac200f6c1b7b698",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "17bf41c2_5f970ea2",
        "filename": "content/browser/webauth/collected_client_data.h",
        "patchSetId": 1
      },
      "lineNbr": 19,
      "author": {
        "id": 1179305
      },
      "writtenOn": "2017-12-18T13:34:43Z",
      "side": 1,
      "message": "Are you sure about this? Wouldn\u0027t including collected_client_data.h be enough? It should find the strings during the linking stage.",
      "parentUuid": "53b48c87_759dff58",
      "range": {
        "startLine": 19,
        "startChar": 0,
        "endLine": 19,
        "endChar": 28
      },
      "revId": "6c24693bca1d330bcbaccbb13ac200f6c1b7b698",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "164aa61c_1e9796c7",
        "filename": "content/browser/webauth/collected_client_data.h",
        "patchSetId": 1
      },
      "lineNbr": 19,
      "author": {
        "id": 1128380
      },
      "writtenOn": "2017-12-21T05:04:27Z",
      "side": 1,
      "message": "Noting that offline we figured out that it required CONTENT_EXPORT. Thanks",
      "parentUuid": "17bf41c2_5f970ea2",
      "range": {
        "startLine": 19,
        "startChar": 0,
        "endLine": 19,
        "endChar": 28
      },
      "revId": "6c24693bca1d330bcbaccbb13ac200f6c1b7b698",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "25450864_a6f93fa7",
        "filename": "device/u2f/attestation_object.cc",
        "patchSetId": 1
      },
      "lineNbr": 39,
      "author": {
        "id": 1179305
      },
      "writtenOn": "2017-12-15T09:57:10Z",
      "side": 1,
      "message": "Can be simplified to `return cbor.value_or(std::vector\u003cuint8_t\u003e());`, at which point you could inline `cbor`.",
      "range": {
        "startLine": 36,
        "startChar": 2,
        "endLine": 39,
        "endChar": 32
      },
      "revId": "6c24693bca1d330bcbaccbb13ac200f6c1b7b698",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "da2b0f8b_be9af3e0",
        "filename": "device/u2f/attestation_object.cc",
        "patchSetId": 1
      },
      "lineNbr": 39,
      "author": {
        "id": 1128380
      },
      "writtenOn": "2017-12-15T22:18:29Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "25450864_a6f93fa7",
      "range": {
        "startLine": 36,
        "startChar": 2,
        "endLine": 39,
        "endChar": 32
      },
      "revId": "6c24693bca1d330bcbaccbb13ac200f6c1b7b698",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "149cb1e6_3eafde41",
        "filename": "device/u2f/attested_credential_data.h",
        "patchSetId": 1
      },
      "lineNbr": 27,
      "author": {
        "id": 1179305
      },
      "writtenOn": "2017-12-15T09:57:10Z",
      "side": 1,
      "message": "What is the reason that the destructor is virtual and the Create method returns a unique_ptr instead of simply an instance of the object? Are there currently derived classes of this or do we plan to have them in the future?",
      "range": {
        "startLine": 25,
        "startChar": 0,
        "endLine": 27,
        "endChar": 48
      },
      "revId": "6c24693bca1d330bcbaccbb13ac200f6c1b7b698",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "922bfb53_08ebb082",
        "filename": "device/u2f/attested_credential_data.h",
        "patchSetId": 1
      },
      "lineNbr": 27,
      "author": {
        "id": 1128380
      },
      "writtenOn": "2017-12-15T22:18:29Z",
      "side": 1,
      "message": "Hm. No, there won\u0027t be any derived classes. It was a unique_ptr simply to avoid copies. Should it just be an instance and passed by const ref? The other thing is it holds unique_ptr\u003cPublicKey\u003e.",
      "parentUuid": "149cb1e6_3eafde41",
      "range": {
        "startLine": 25,
        "startChar": 0,
        "endLine": 27,
        "endChar": 48
      },
      "revId": "6c24693bca1d330bcbaccbb13ac200f6c1b7b698",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0a35bd3c_1ae6246e",
        "filename": "device/u2f/attested_credential_data.h",
        "patchSetId": 1
      },
      "lineNbr": 27,
      "author": {
        "id": 1179305
      },
      "writtenOn": "2017-12-18T13:34:43Z",
      "side": 1,
      "message": "Using unique_ptrs to avoid copies shouldn\u0027t work, given that each unique_ptr owns the pointed to object. \"Copying\" a unique_ptr would always require an explicit deep copy of the underlying object.\n\nTo answer your question: If this operation could ever fail (e.g. you do some verification logic and want to be able to indicate errors) I would return a base::Optional\u003cAttestedCredentialData\u003e. In case it can\u0027t fail (which I think is the case here), I\u0027d simply return a AttestedCredentialData by value.",
      "parentUuid": "922bfb53_08ebb082",
      "range": {
        "startLine": 25,
        "startChar": 0,
        "endLine": 27,
        "endChar": 48
      },
      "revId": "6c24693bca1d330bcbaccbb13ac200f6c1b7b698",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6eb50c9f_a39aec6d",
        "filename": "device/u2f/attested_credential_data.h",
        "patchSetId": 1
      },
      "lineNbr": 27,
      "author": {
        "id": 1128380
      },
      "writtenOn": "2017-12-21T05:04:27Z",
      "side": 1,
      "message": "Ah, I misspoke. By \u0027avoiding copies\u0027 I simply meant that I using unique_ptr to pass around the  pointer rather than invoking a copy by passing by value. But, moving on!\nCan you see if I\u0027m on the right track for using it by value? I tried to have a copy constructor to deep copy the ECPublicKey unique_ptr, but I\u0027m not quiiite doing it right, it seems:\n\n../../device/u2f/attested_credential_data.h:48:36: note: copy constructor of \u0027AttestedCredentialData\u0027 is implicitly deleted because field \u0027public_key_\u0027 has a deleted copy constructor\n  const std::unique_ptr\u003cPublicKey\u003e public_key_;\n                                   ^\n../../buildtools/third_party/libc++/trunk/include/memory:2388:3: note: copy constructor is implicitly deleted because \u0027unique_ptr\u003cdevice::PublicKey, std::__1::default_delete\u003cdevice::PublicKey\u003e \u003e\u0027 has a user-declared move constructor\n  unique_ptr(unique_ptr\u0026\u0026 __u) noexcept",
      "parentUuid": "0a35bd3c_1ae6246e",
      "range": {
        "startLine": 25,
        "startChar": 0,
        "endLine": 27,
        "endChar": 48
      },
      "revId": "6c24693bca1d330bcbaccbb13ac200f6c1b7b698",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a6bf7497_8468bd15",
        "filename": "device/u2f/attested_credential_data.h",
        "patchSetId": 1
      },
      "lineNbr": 27,
      "author": {
        "id": 1179305
      },
      "writtenOn": "2017-12-21T11:53:02Z",
      "side": 1,
      "message": "As you realized the compiler can\u0027t generate a copy constructor, because you have a unique_ptr member variable which can\u0027t be copied.\n\nThe only way to make a deep copy is for PublicKey to implement a `Clone` method or similar, that each subclass overrides. Then you could add a `Clone` method to this class, which calls\n\n  AttestedCredentialData(aaguid_, credential_id_length_, credential_id_, public_key_-\u003eClone());\n\nhowever, this seems overly complicated, and I suggest you simply add a move constructor and move assignment operator in order to get the following code to compile:\n\n  auto data \u003d AttestedCredentialData::CreateFromU2fRegisterResponse(....)",
      "parentUuid": "6eb50c9f_a39aec6d",
      "range": {
        "startLine": 25,
        "startChar": 0,
        "endLine": 27,
        "endChar": 48
      },
      "revId": "6c24693bca1d330bcbaccbb13ac200f6c1b7b698",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cc30f252_ed34aaf3",
        "filename": "device/u2f/u2f_register.cc",
        "patchSetId": 1
      },
      "lineNbr": 128,
      "author": {
        "id": 1179305
      },
      "writtenOn": "2017-12-15T09:57:10Z",
      "side": 1,
      "message": "not necessary, `response` is initialized to nullptr",
      "range": {
        "startLine": 128,
        "startChar": 0,
        "endLine": 128,
        "endChar": 27
      },
      "revId": "6c24693bca1d330bcbaccbb13ac200f6c1b7b698",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "be74d471_63dcd57c",
        "filename": "device/u2f/u2f_register.cc",
        "patchSetId": 1
      },
      "lineNbr": 128,
      "author": {
        "id": 1128380
      },
      "writtenOn": "2017-12-15T22:18:29Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "cc30f252_ed34aaf3",
      "range": {
        "startLine": 128,
        "startChar": 0,
        "endLine": 128,
        "endChar": 27
      },
      "revId": "6c24693bca1d330bcbaccbb13ac200f6c1b7b698",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ef72f3af_72112388",
        "filename": "device/u2f/u2f_register_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 64,
      "author": {
        "id": 1179305
      },
      "writtenOn": "2017-12-15T09:57:10Z",
      "side": 1,
      "message": "Can be made static const as well by using a lambda:\n\nstatic const std::vector\u003cuint8_t\u003e test_attested_data \u003d []() {\n  std::vector\u003cuint8_t\u003e data(std::begin(kTestAttestedCredentialDataPrefix),\n                            std::end(kTestAttestedCredentialDataPrefix));\n  data.insert(data.end(), std::begin(kTestECPublicKeyCBOR),\n              std::end(kTestECPublicKeyCBOR));\n  return data;\n}();",
      "range": {
        "startLine": 59,
        "startChar": 0,
        "endLine": 64,
        "endChar": 60
      },
      "revId": "6c24693bca1d330bcbaccbb13ac200f6c1b7b698",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1274ff4c_5205f85c",
        "filename": "device/u2f/u2f_register_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 77,
      "author": {
        "id": 1179305
      },
      "writtenOn": "2017-12-15T09:57:10Z",
      "side": 1,
      "message": "Same here.",
      "range": {
        "startLine": 69,
        "startChar": 0,
        "endLine": 77,
        "endChar": 59
      },
      "revId": "6c24693bca1d330bcbaccbb13ac200f6c1b7b698",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bcae745d_c4f8b844",
        "filename": "device/u2f/u2f_register_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 97,
      "author": {
        "id": 1179305
      },
      "writtenOn": "2017-12-15T09:57:10Z",
      "side": 1,
      "message": "And here.",
      "range": {
        "startLine": 82,
        "startChar": 0,
        "endLine": 97,
        "endChar": 66
      },
      "revId": "6c24693bca1d330bcbaccbb13ac200f6c1b7b698",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "844cac5c_2f9e88d4",
        "filename": "device/u2f/u2f_register_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 125,
      "author": {
        "id": 1179305
      },
      "writtenOn": "2017-12-15T09:57:10Z",
      "side": 1,
      "message": "Is there a reason why this is not a const reference?",
      "range": {
        "startLine": 125,
        "startChar": 2,
        "endLine": 125,
        "endChar": 11
      },
      "revId": "6c24693bca1d330bcbaccbb13ac200f6c1b7b698",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "14687d69_f67bef2b",
        "filename": "device/u2f/u2f_register_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 125,
      "author": {
        "id": 1128380
      },
      "writtenOn": "2017-12-15T22:18:29Z",
      "side": 1,
      "message": "Nope, no reason. I made it a const.",
      "parentUuid": "844cac5c_2f9e88d4",
      "range": {
        "startLine": 125,
        "startChar": 2,
        "endLine": 125,
        "endChar": 11
      },
      "revId": "6c24693bca1d330bcbaccbb13ac200f6c1b7b698",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8ef7f512_8ce954a0",
        "filename": "device/u2f/u2f_register_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 166,
      "author": {
        "id": 1179305
      },
      "writtenOn": "2017-12-15T09:57:10Z",
      "side": 1,
      "message": "Call to get() is not necessary, also applies below.",
      "range": {
        "startLine": 166,
        "startChar": 34,
        "endLine": 166,
        "endChar": 37
      },
      "revId": "6c24693bca1d330bcbaccbb13ac200f6c1b7b698",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0325d59d_90bb0b7d",
        "filename": "device/u2f/u2f_request.h",
        "patchSetId": 1
      },
      "lineNbr": 31,
      "author": {
        "id": 1179305
      },
      "writtenOn": "2017-12-15T09:57:10Z",
      "side": 1,
      "message": "Either make this a `base::StringPiece` or take a `std::string` by value. Taking a `std::string` by value is likely better.",
      "range": {
        "startLine": 31,
        "startChar": 13,
        "endLine": 31,
        "endChar": 31
      },
      "revId": "6c24693bca1d330bcbaccbb13ac200f6c1b7b698",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3a8e97be_afd4f0ee",
        "filename": "device/u2f/u2f_request_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 25,
      "author": {
        "id": 1179305
      },
      "writtenOn": "2017-12-15T09:57:10Z",
      "side": 1,
      "message": "Same here, make this a `std::string`, and then move it to the U2fRequest constructor.",
      "range": {
        "startLine": 25,
        "startChar": 17,
        "endLine": 25,
        "endChar": 52
      },
      "revId": "6c24693bca1d330bcbaccbb13ac200f6c1b7b698",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "847232b3_8e0eee53",
        "filename": "device/u2f/u2f_sign_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 269,
      "author": {
        "id": 1179305
      },
      "writtenOn": "2017-12-15T09:57:10Z",
      "side": 1,
      "message": "uncomment or remove.",
      "range": {
        "startLine": 267,
        "startChar": 1,
        "endLine": 269,
        "endChar": 40
      },
      "revId": "6c24693bca1d330bcbaccbb13ac200f6c1b7b698",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "15f5853d_4b14b306",
        "filename": "device/u2f/u2f_sign_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 269,
      "author": {
        "id": 1128380
      },
      "writtenOn": "2017-12-15T22:18:29Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "847232b3_8e0eee53",
      "range": {
        "startLine": 267,
        "startChar": 1,
        "endLine": 269,
        "endChar": 40
      },
      "revId": "6c24693bca1d330bcbaccbb13ac200f6c1b7b698",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}