{
  "comments": [
    {
      "key": {
        "uuid": "010836a3_812203f0",
        "filename": "services/device/generic_sensor/platform_sensor_fusion_algorithm.h",
        "patchSetId": 3
      },
      "lineNbr": 27,
      "author": {
        "id": 1113896
      },
      "writtenOn": "2017-08-01T20:39:32Z",
      "side": 1,
      "message": "Why not pass a pointer to the PlatformSensorFusion to this class so that we don\u0027t duplicate the whole vector?",
      "range": {
        "startLine": 26,
        "startChar": 0,
        "endLine": 27,
        "endChar": 72
      },
      "revId": "007df0a933cb76a9242cea2512c246445bf235c9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6446bb81_4e7d1e44",
        "filename": "services/device/generic_sensor/relative_orientation_euler_angles_fusion_algorithm_using_accelerometer.cc",
        "patchSetId": 3
      },
      "lineNbr": 50,
      "author": {
        "id": 1113896
      },
      "writtenOn": "2017-08-01T20:39:32Z",
      "side": 1,
      "message": "Would this be more readable as:\n\nSensorReading reading;\nif (!sensor_fusion_-\u003eGetLatestReading(0, \u0026reading))\n  return false;\n\ndouble acceleration_x \u003d reading.values[0].value();\ndouble acceleration_y \u003d reading.values[1].value();\ndouble acceleration_z \u003d reading.values[2].value();\n\nThis way we only need to allocate space to save the reading if we want to track it between calls to GetFusedData. GetLatestReading() can DCHECK if the provided sensor index is out of range. Once the union patch lands we could probably also get rid of these local variables and just use reading.accel.x, reading.accel.y and reading.accel.z below.",
      "range": {
        "startLine": 43,
        "startChar": 0,
        "endLine": 50,
        "endChar": 57
      },
      "revId": "007df0a933cb76a9242cea2512c246445bf235c9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}