{
  "comments": [
    {
      "key": {
        "uuid": "ab89c45b_039aa3dd",
        "filename": "chrome/common/page_load_metrics/page_load_metrics.mojom",
        "patchSetId": 2
      },
      "lineNbr": 114,
      "author": {
        "id": 1136769
      },
      "writtenOn": "2017-06-28T00:11:57Z",
      "side": 1,
      "message": "i think it\u0027d be better if we could figure out a way to use the typed enum here, for sure. a couple ideas:\n* consider moving the canonical definition of WebFeature to a mojom file (if we\u0027re lucky this could be done transparently, without having to update any existing users of WebFeature)\n* write a script that auto-generates the mojo type mapping code\n* check with the core mojo devs (rockot@ is a good person to ask) to see if there\u0027s a way to retain type safety here. maybe there\u0027s a lighter weight type mapping impl that doesn\u0027t require explicitly enumeriating all 2000 entries for example? seems unlikely but worth asking ken - maybe mojo team could add support for this to help us out.",
      "revId": "9a6e5fb86160160a5e5d90a4c4107db58867c633",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ced97718_8699a932",
        "filename": "chrome/common/page_load_metrics/page_load_metrics.mojom",
        "patchSetId": 2
      },
      "lineNbr": 114,
      "author": {
        "id": 1221384
      },
      "writtenOn": "2017-06-28T20:17:38Z",
      "side": 1,
      "message": "Agree.\n\nI definitely thought about the top two approaches:\nRe idea 1: WebFeature got updated on a very frequent basis. So moving WebFeature to a mojom file is going to be difficult. I can look into how to do the minimal moving around without changing the current UseCounter code. rockot@, do you have any insights of mojofying WebFeature without modifying code everywhere in Blink?\n\nRe idea 2: I could do that, but +1 for support from mojo team. If they are already making auto generated code for other part, I see opportunities to auto generate typemapping piece as well.",
      "parentUuid": "ab89c45b_039aa3dd",
      "revId": "9a6e5fb86160160a5e5d90a4c4107db58867c633",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0a3f227a_18e9ada8",
        "filename": "chrome/common/page_load_metrics/page_load_metrics.mojom",
        "patchSetId": 2
      },
      "lineNbr": 114,
      "author": {
        "id": 1002808
      },
      "writtenOn": "2017-06-28T20:25:01Z",
      "side": 1,
      "message": "Um, I do not think we want to write a script to generate this stuff. The script would have to:\n\n  - Parse a C++ enum definition\n  - Generate a mojom equivalent\n  - Generate EnumTraits\n\nIf you want to go in the other direction instead (parsing a mojom enum to generate a C++ enum)... well, that is already done by the mojom bindings generator.\n\nIn this case I think you\u0027re in luck because WebFeature is already an enum class, so you can get away with an alias and not have to update all uses of the existing type. I would just move the definition into mojom, and replace the existing definition with:\n\n  using WebFeature \u003d mojom::WebFeature;\n\nThere should be no issues with this AFAICT",
      "parentUuid": "ced97718_8699a932",
      "revId": "9a6e5fb86160160a5e5d90a4c4107db58867c633",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "be7d5b86_54a9eefa",
        "filename": "chrome/renderer/page_load_metrics/page_timing_metrics_sender.h",
        "patchSetId": 2
      },
      "lineNbr": 53,
      "author": {
        "id": 1136769
      },
      "writtenOn": "2017-06-28T00:11:57Z",
      "side": 1,
      "message": "let\u0027s add comments to explain these 2 members",
      "revId": "9a6e5fb86160160a5e5d90a4c4107db58867c633",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "614f5e1d_211ed6c8",
        "filename": "chrome/renderer/page_load_metrics/page_timing_metrics_sender.h",
        "patchSetId": 2
      },
      "lineNbr": 53,
      "author": {
        "id": 1221384
      },
      "writtenOn": "2017-06-28T20:17:38Z",
      "side": 1,
      "message": "Good call of always documenting things. Thanks",
      "parentUuid": "be7d5b86_54a9eefa",
      "revId": "9a6e5fb86160160a5e5d90a4c4107db58867c633",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a023532b_cd0f5046",
        "filename": "chrome/renderer/page_load_metrics/page_timing_metrics_sender.h",
        "patchSetId": 2
      },
      "lineNbr": 54,
      "author": {
        "id": 1136769
      },
      "writtenOn": "2017-06-28T00:11:57Z",
      "side": 1,
      "message": "nit: let\u0027s call this features_sent_ instead of features_recorded_ since this class\u0027s job isn\u0027t to record but rather to send.",
      "revId": "9a6e5fb86160160a5e5d90a4c4107db58867c633",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ddf85788_4c0d9319",
        "filename": "chrome/renderer/page_load_metrics/page_timing_metrics_sender.h",
        "patchSetId": 2
      },
      "lineNbr": 54,
      "author": {
        "id": 1221384
      },
      "writtenOn": "2017-06-28T20:17:38Z",
      "side": 1,
      "message": "Makes sense. Done. Thanks",
      "parentUuid": "a023532b_cd0f5046",
      "revId": "9a6e5fb86160160a5e5d90a4c4107db58867c633",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}