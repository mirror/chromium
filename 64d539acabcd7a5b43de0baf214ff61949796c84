{
  "comments": [
    {
      "key": {
        "uuid": "94822049_92ff0a51",
        "filename": "chrome/browser/net/predictor.cc",
        "patchSetId": 3
      },
      "lineNbr": 697,
      "author": {
        "id": 1194993
      },
      "writtenOn": "2017-12-19T18:53:58Z",
      "side": 1,
      "message": "Your change may prevent all pre-resolutions originated from the renderer process (link rel\u003d\"dns-prefetch\"), because we get only hostnames from the renderer and append \"http://\" prefix to make a GURL from it.\nWe probably can fix it by appending \"https://\" instead of \"http://\"",
      "range": {
        "startLine": 697,
        "startChar": 25,
        "endLine": 697,
        "endChar": 29
      },
      "revId": "64d539acabcd7a5b43de0baf214ff61949796c84",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8b632002_542b031a",
        "filename": "chrome/browser/net/predictor.cc",
        "patchSetId": 3
      },
      "lineNbr": 697,
      "author": {
        "id": 1127744
      },
      "writtenOn": "2017-12-20T05:53:43Z",
      "side": 1,
      "message": "Can you point me to the relevant code in blink?",
      "parentUuid": "94822049_92ff0a51",
      "range": {
        "startLine": 697,
        "startChar": 25,
        "endLine": 697,
        "endChar": 29
      },
      "revId": "64d539acabcd7a5b43de0baf214ff61949796c84",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e8258881_cc509a1f",
        "filename": "chrome/browser/net/predictor.cc",
        "patchSetId": 3
      },
      "lineNbr": 697,
      "author": {
        "id": 1194993
      },
      "writtenOn": "2017-12-20T11:03:16Z",
      "side": 1,
      "message": "It\u0027s the RendererDnsPrefetch class in blink\nhttps://cs.chromium.org/chromium/src/components/network_hints/renderer/renderer_dns_prefetch.h?type\u003dcs\n\nThe IPC NetworkHintsMsg_DNSPrefetch message is sent to the browser process from RendererDnsPrefetch::DnsPrefetchNames().\n\nI glanced at all callers of this API and it seems like all of them initially have a KURL but then they call KURL::Host() to get a hostname. It should be possible to change this API to accept GURLs instead of string hostnames.",
      "parentUuid": "8b632002_542b031a",
      "range": {
        "startLine": 697,
        "startChar": 25,
        "endLine": 697,
        "endChar": 29
      },
      "revId": "64d539acabcd7a5b43de0baf214ff61949796c84",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0a78703a_99c916e2",
        "filename": "chrome/browser/net/predictor.cc",
        "patchSetId": 3
      },
      "lineNbr": 697,
      "author": {
        "id": 1127744
      },
      "writtenOn": "2017-12-20T19:53:36Z",
      "side": 1,
      "message": "OK, makes sense. How about I do that in the next CL? Since this experiment is disabled by default, I think it\u0027s alright to submit this CL, and then cleanup the mojo code path in a separate CL?",
      "parentUuid": "e8258881_cc509a1f",
      "range": {
        "startLine": 697,
        "startChar": 25,
        "endLine": 697,
        "endChar": 29
      },
      "revId": "64d539acabcd7a5b43de0baf214ff61949796c84",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f784aae1_dc59e324",
        "filename": "chrome/browser/net/predictor.cc",
        "patchSetId": 3
      },
      "lineNbr": 697,
      "author": {
        "id": 1194993
      },
      "writtenOn": "2017-12-20T22:27:24Z",
      "side": 1,
      "message": "Yeah, I\u0027m fine with doing that in the next CL.",
      "parentUuid": "0a78703a_99c916e2",
      "range": {
        "startLine": 697,
        "startChar": 25,
        "endLine": 697,
        "endChar": 29
      },
      "revId": "64d539acabcd7a5b43de0baf214ff61949796c84",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "21216e79_5b7ba73f",
        "filename": "chrome/browser/net/predictor.cc",
        "patchSetId": 3
      },
      "lineNbr": 1018,
      "author": {
        "id": 1194993
      },
      "writtenOn": "2017-12-19T18:53:58Z",
      "side": 1,
      "message": "nit:\nI\u0027d put this check inside of the WouldLikelyProxyURL() function.\nBy the way, don\u0027t we already detect DataReductionProxy from there?",
      "range": {
        "startLine": 1018,
        "startChar": 14,
        "endLine": 1018,
        "endChar": 48
      },
      "revId": "64d539acabcd7a5b43de0baf214ff61949796c84",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bb0727a8_d2ee9b08",
        "filename": "chrome/browser/net/predictor.cc",
        "patchSetId": 3
      },
      "lineNbr": 1018,
      "author": {
        "id": 1127744
      },
      "writtenOn": "2017-12-20T05:53:43Z",
      "side": 1,
      "message": "Nope, DRPProxy is a special proxy. It does not show up in proxy service, but is added on-the-fly for each individual request.",
      "parentUuid": "21216e79_5b7ba73f",
      "range": {
        "startLine": 1018,
        "startChar": 14,
        "endLine": 1018,
        "endChar": 48
      },
      "revId": "64d539acabcd7a5b43de0baf214ff61949796c84",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cd11a683_0144358f",
        "filename": "chrome/browser/net/predictor.cc",
        "patchSetId": 3
      },
      "lineNbr": 1018,
      "author": {
        "id": 1194993
      },
      "writtenOn": "2017-12-20T11:03:16Z",
      "side": 1,
      "message": "Can you leave this message as a comment in code?\n\nShouldn\u0027t we disable preconnecting to HTTP URLs as well in this case? In case of \"normal\" proxy we open an additional socket in the proxy socket pool. https://cs.chromium.org/chromium/src/net/socket/client_socket_pool_manager.cc?rcl\u003d17c2f92c8702eb08b1fee51d74d839f038c18eec\u0026l\u003d234\nI\u0027m guessing that in the DRPProxy case we will preconnect to the actual host but the socket won\u0027t be used.\n\nNotice, that the LoadingPredictor implementation requires the host to be explicitly resolved before attempting to preconnect. Thus, preconnects are already disabled for your experiment.",
      "parentUuid": "bb0727a8_d2ee9b08",
      "range": {
        "startLine": 1018,
        "startChar": 14,
        "endLine": 1018,
        "endChar": 48
      },
      "revId": "64d539acabcd7a5b43de0baf214ff61949796c84",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bb7ecba3_70ae4dd4",
        "filename": "chrome/browser/net/predictor.cc",
        "patchSetId": 3
      },
      "lineNbr": 1018,
      "author": {
        "id": 1127744
      },
      "writtenOn": "2017-12-20T19:53:36Z",
      "side": 1,
      "message": "\u003e Can you leave this message as a comment in code?\n\nDone.\n\u003e \n\u003e Shouldn\u0027t we disable preconnecting to HTTP URLs as well in this case? In case of \"normal\" proxy we open an additional socket in the proxy socket pool. https://cs.chromium.org/chromium/src/net/socket/client_socket_pool_manager.cc?rcl\u003d17c2f92c8702eb08b1fee51d74d839f038c18eec\u0026l\u003d234\n\nIt does make sense to not preconnect to proxies that support HTTP2. It still makes sense to preconnect to HTTP proxies since Chrome can open up to 32 connections to an HTTP proxy at the same time. The number of parallel connections is limited to 1 for HTTP2 servers/proxies.\n\nCLs in https://bugs.chromium.org/p/chromium/issues/detail?id\u003d667471\u0026desc\u003d2 prevent Chrome from opening more than 1 preconnect to a proxy that supports request priorities (http2/quic).\n\n\u003e I\u0027m guessing that in the DRPProxy case we will preconnect to the actual host but the socket won\u0027t be used.\n\nCorrect, that was the original behavior before https://bugs.chromium.org/p/chromium/issues/detail?id\u003d667471\u0026desc\u003d2 was fixed.\n\u003e \n\u003e Notice, that the LoadingPredictor implementation requires the host to be explicitly resolved before attempting to preconnect. Thus, preconnects are already disabled for your experiment.",
      "parentUuid": "cd11a683_0144358f",
      "range": {
        "startLine": 1018,
        "startChar": 14,
        "endLine": 1018,
        "endChar": 48
      },
      "revId": "64d539acabcd7a5b43de0baf214ff61949796c84",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "efd49f8c_5b48b1f5",
        "filename": "chrome/browser/net/predictor.cc",
        "patchSetId": 3
      },
      "lineNbr": 1018,
      "author": {
        "id": 1194993
      },
      "writtenOn": "2017-12-20T22:27:24Z",
      "side": 1,
      "message": "Thanks for the explanation! I initially thought that the DRPProxy won\u0027t be resolved as a proxy during the preconnect and thus we will just ignore it.",
      "parentUuid": "bb7ecba3_70ae4dd4",
      "range": {
        "startLine": 1018,
        "startChar": 14,
        "endLine": 1018,
        "endChar": 48
      },
      "revId": "64d539acabcd7a5b43de0baf214ff61949796c84",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fcbbf011_28672673",
        "filename": "chrome/browser/net/predictor_browsertest.cc",
        "patchSetId": 3
      },
      "lineNbr": 847,
      "author": {
        "id": 1194993
      },
      "writtenOn": "2017-12-19T18:53:58Z",
      "side": 1,
      "message": "nit:\nThere is a big chunk of duplicated code across these tests. What about extract a common part into a test class method?",
      "range": {
        "startLine": 847,
        "startChar": 32,
        "endLine": 847,
        "endChar": 33
      },
      "revId": "64d539acabcd7a5b43de0baf214ff61949796c84",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f176fe9c_20a0fbf0",
        "filename": "chrome/browser/net/predictor_browsertest.cc",
        "patchSetId": 3
      },
      "lineNbr": 847,
      "author": {
        "id": 1127744
      },
      "writtenOn": "2017-12-20T05:53:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fcbbf011_28672673",
      "range": {
        "startLine": 847,
        "startChar": 32,
        "endLine": 847,
        "endChar": 33
      },
      "revId": "64d539acabcd7a5b43de0baf214ff61949796c84",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b9d8972c_d97aa12c",
        "filename": "chrome/browser/net/predictor_browsertest.cc",
        "patchSetId": 3
      },
      "lineNbr": 887,
      "author": {
        "id": 1194993
      },
      "writtenOn": "2017-12-19T18:53:58Z",
      "side": 1,
      "message": "Shouldn\u0027t we wait for all hosts being looked up?\n\n    WaitUntilHostsLookedUp(names);",
      "range": {
        "startLine": 887,
        "startChar": 36,
        "endLine": 887,
        "endChar": 45
      },
      "revId": "64d539acabcd7a5b43de0baf214ff61949796c84",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7855b4b9_b549a267",
        "filename": "chrome/browser/net/predictor_browsertest.cc",
        "patchSetId": 3
      },
      "lineNbr": 887,
      "author": {
        "id": 1127744
      },
      "writtenOn": "2017-12-20T05:53:43Z",
      "side": 1,
      "message": "I tried that, and it resulted in test timing out. May be because the predictor is not actually looking up all URLs in |names|? It only looks up the |https_url|.",
      "parentUuid": "b9d8972c_d97aa12c",
      "range": {
        "startLine": 887,
        "startChar": 36,
        "endLine": 887,
        "endChar": 45
      },
      "revId": "64d539acabcd7a5b43de0baf214ff61949796c84",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5d18ae02_f7b672e4",
        "filename": "chrome/browser/net/predictor_browsertest.cc",
        "patchSetId": 3
      },
      "lineNbr": 916,
      "author": {
        "id": 1194993
      },
      "writtenOn": "2017-12-19T18:53:58Z",
      "side": 1,
      "message": "ditto",
      "range": {
        "startLine": 916,
        "startChar": 14,
        "endLine": 916,
        "endChar": 35
      },
      "revId": "64d539acabcd7a5b43de0baf214ff61949796c84",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c434b5dc_46026bfd",
        "filename": "chrome/browser/net/predictor_browsertest.cc",
        "patchSetId": 3
      },
      "lineNbr": 916,
      "author": {
        "id": 1127744
      },
      "writtenOn": "2017-12-20T05:53:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5d18ae02_f7b672e4",
      "range": {
        "startLine": 916,
        "startChar": 14,
        "endLine": 916,
        "endChar": 35
      },
      "revId": "64d539acabcd7a5b43de0baf214ff61949796c84",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cd496f91_7b1a5e2a",
        "filename": "chrome/browser/predictors/loading_predictor.cc",
        "patchSetId": 3
      },
      "lineNbr": 371,
      "author": {
        "id": 1166490
      },
      "writtenOn": "2017-12-18T22:19:13Z",
      "side": 1,
      "message": "#include \"base/feature_list.h\"",
      "range": {
        "startLine": 371,
        "startChar": 12,
        "endLine": 371,
        "endChar": 23
      },
      "revId": "64d539acabcd7a5b43de0baf214ff61949796c84",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "463a12a1_271a11cc",
        "filename": "chrome/browser/predictors/loading_predictor.cc",
        "patchSetId": 3
      },
      "lineNbr": 371,
      "author": {
        "id": 1127744
      },
      "writtenOn": "2017-12-20T05:53:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "cd496f91_7b1a5e2a",
      "range": {
        "startLine": 371,
        "startChar": 12,
        "endLine": 371,
        "endChar": 23
      },
      "revId": "64d539acabcd7a5b43de0baf214ff61949796c84",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b811cd4a_a938a398",
        "filename": "chrome/browser/predictors/loading_predictor.cc",
        "patchSetId": 3
      },
      "lineNbr": 373,
      "author": {
        "id": 1194993
      },
      "writtenOn": "2017-12-19T18:53:58Z",
      "side": 1,
      "message": "It\u0027s not the only path how the pre-resolution can be triggered in the LoadingPredictor (it\u0027s an experimental feature that should replace net::Predictor eventually).\n\nA robust way to stop all pre-resolutions from the LoadingPredictor would be to add this check in PreconnectManager::TryToLaunchPreresolveJobs(). https://cs.chromium.org/chromium/src/chrome/browser/predictors/preconnect_manager.cc?rcl\u003d7526172345eee3dc448e4ae057d2720b424ca052\u0026l\u003d163\nAs a bonus we can get rid of UI version of WouldLikelyBeFetchedViaDataSaver.\n\n(There is the same caveat with renderer hints, see PreconnectManager::StartPreresolveHosts())",
      "range": {
        "startLine": 373,
        "startChar": 14,
        "endLine": 373,
        "endChar": 48
      },
      "revId": "64d539acabcd7a5b43de0baf214ff61949796c84",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1a461bbe_191accab",
        "filename": "chrome/browser/predictors/loading_predictor.cc",
        "patchSetId": 3
      },
      "lineNbr": 373,
      "author": {
        "id": 1127744
      },
      "writtenOn": "2017-12-20T05:53:43Z",
      "side": 1,
      "message": "\u003e It\u0027s not the only path how the pre-resolution can be triggered in the LoadingPredictor (it\u0027s an experimental feature that should replace net::Predictor eventually).\n\u003e \n\u003e A robust way to stop all pre-resolutions from the LoadingPredictor would be to add this check in PreconnectManager::TryToLaunchPreresolveJobs(). https://cs.chromium.org/chromium/src/chrome/browser/predictors/preconnect_manager.cc?rcl\u003d7526172345eee3dc448e4ae057d2720b424ca052\u0026l\u003d163\n\u003e As a bonus we can get rid of UI version of WouldLikelyBeFetchedViaDataSaver.\n\nDone.\n\u003e \n\u003e (There is the same caveat with renderer hints, see PreconnectManager::StartPreresolveHosts())\n\nI am not sure I understand this comment.",
      "parentUuid": "b811cd4a_a938a398",
      "range": {
        "startLine": 373,
        "startChar": 14,
        "endLine": 373,
        "endChar": 48
      },
      "revId": "64d539acabcd7a5b43de0baf214ff61949796c84",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "252b7b44_3d0d1368",
        "filename": "chrome/browser/predictors/loading_predictor.cc",
        "patchSetId": 3
      },
      "lineNbr": 373,
      "author": {
        "id": 1194993
      },
      "writtenOn": "2017-12-20T11:03:16Z",
      "side": 1,
      "message": "\u003e \u003e It\u0027s not the only path how the pre-resolution can be triggered in the LoadingPredictor (it\u0027s an experimental feature that should replace net::Predictor eventually).\n\u003e \u003e \n\u003e \u003e A robust way to stop all pre-resolutions from the LoadingPredictor would be to add this check in PreconnectManager::TryToLaunchPreresolveJobs(). https://cs.chromium.org/chromium/src/chrome/browser/predictors/preconnect_manager.cc?rcl\u003d7526172345eee3dc448e4ae057d2720b424ca052\u0026l\u003d163\n\u003e \u003e As a bonus we can get rid of UI version of WouldLikelyBeFetchedViaDataSaver.\n\u003e \n\u003e Done.\n\u003e\n\u003e \u003e \n\u003e \u003e (There is the same caveat with renderer hints, see PreconnectManager::StartPreresolveHosts())\n\u003e \n\u003e I am not sure I understand this comment.\n\nI meant that the LoadingPredictor also gets dns-prefetch hints from blink. They are dispatched in the browser process in ChromeRenderMessageFilter::OnDnsPrefetch()\nhttps://cs.chromium.org/chromium/src/chrome/browser/renderer_host/chrome_render_message_filter.cc?rcl\u003df404dd47d48903a78e558d5159220e1b8a1981d8\u0026l\u003d107\nWe get a renderer hint as a vector of hostname strings which we have to convert into GURLs, because underlying net-stack API accepts GURLs. To do that, we append \"http://\" prefix the same way as it done in the net::Predictor. Your experiment will discard all these URLs because they have an http scheme but in fact we don\u0027t know whether they were initially http or https.\n\nSorry for not being clear.",
      "parentUuid": "1a461bbe_191accab",
      "range": {
        "startLine": 373,
        "startChar": 14,
        "endLine": 373,
        "endChar": 48
      },
      "revId": "64d539acabcd7a5b43de0baf214ff61949796c84",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "577d6579_d59dbbaf",
        "filename": "chrome/browser/predictors/loading_predictor.cc",
        "patchSetId": 3
      },
      "lineNbr": 373,
      "author": {
        "id": 1127744
      },
      "writtenOn": "2017-12-20T19:53:36Z",
      "side": 1,
      "message": "ACK\u0027ed. Thanks a lot for the explanation. Please see my comment elsewhere about upgrading the mojo codepath in a separate CL.",
      "parentUuid": "252b7b44_3d0d1368",
      "range": {
        "startLine": 373,
        "startChar": 14,
        "endLine": 373,
        "endChar": 48
      },
      "revId": "64d539acabcd7a5b43de0baf214ff61949796c84",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}