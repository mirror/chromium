{
  "comments": [
    {
      "key": {
        "uuid": "702709c0_5913d1b9",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 25,
      "author": {
        "id": 1116053
      },
      "writtenOn": "2018-01-19T21:36:24Z",
      "side": 1,
      "message": "IS_MY_COMPONENT_IMPL\u003d1",
      "range": {
        "startLine": 25,
        "startChar": 37,
        "endLine": 25,
        "endChar": 39
      },
      "revId": "4de177d4bcc1dbaaa36149c80d5a7ab44f60d6f9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "60530bfc_f628b2d1",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 25,
      "author": {
        "id": 1002808
      },
      "writtenOn": "2018-01-19T21:40:40Z",
      "side": 1,
      "message": "Is this our style recommendation? I thought we had a preference one way or the other, but I couldn\u0027t find which. I went with this because it\u0027s prettier.\n\nFWIW they are equivalent. If you give a compliler -DFOO it\u0027s (unintuitively) the same as -DFOO\u003d1. Not to be confused with -DFOO\u003d",
      "parentUuid": "702709c0_5913d1b9",
      "range": {
        "startLine": 25,
        "startChar": 37,
        "endLine": 25,
        "endChar": 39
      },
      "revId": "4de177d4bcc1dbaaa36149c80d5a7ab44f60d6f9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ba332c22_ff5215af",
        "filename": "base/component_export.h",
        "patchSetId": 1
      },
      "lineNbr": 21,
      "author": {
        "id": 1116053
      },
      "writtenOn": "2018-01-19T21:58:10Z",
      "side": 1,
      "message": "nit: what if we have component(\"component\"), maybe this needs a trailing _ to avoid conflicting with the -D flag.",
      "range": {
        "startLine": 21,
        "startChar": 34,
        "endLine": 21,
        "endChar": 43
      },
      "revId": "4de177d4bcc1dbaaa36149c80d5a7ab44f60d6f9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "21b89b77_cdfde8c6",
        "filename": "base/component_export.h",
        "patchSetId": 1
      },
      "lineNbr": 21,
      "author": {
        "id": 1002808
      },
      "writtenOn": "2018-01-19T22:09:41Z",
      "side": 1,
      "message": "Good point. I\u0027d like there to be a public API for testing whether you are currently compiling within the component though, so an underscore seems inappropriate.\n\nI\u0027ve renamed to INSIDE_COMPONENT_IMPL, which should be reminiscent of INSIDE_BLINK used in many places. WDYT?",
      "parentUuid": "ba332c22_ff5215af",
      "range": {
        "startLine": 21,
        "startChar": 34,
        "endLine": 21,
        "endChar": 43
      },
      "revId": "4de177d4bcc1dbaaa36149c80d5a7ab44f60d6f9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4d6ac8f4_0e4b51cd",
        "filename": "base/component_export.h",
        "patchSetId": 1
      },
      "lineNbr": 29,
      "author": {
        "id": 1116053
      },
      "writtenOn": "2018-01-19T22:34:56Z",
      "side": 1,
      "message": "Can we write this as \n\n#define IS_COMPONENT_IMPL(component) IS_##component##_IMPL \u003d\u003d 1\n\ngiven the way that undefined symbols default to 0 when doing arithmetic inside #if s, e.g. if foo.c is\n\n#define IN_IMPL(name) IS_##name##_IMPL \u003d\u003d 1\n#if IN_IMPL(FOO)\nFOO is here.\n#endif\n\nthen\n\ngcc -E foo.c is empty\ngcc -DIS_FOO_IMPL -E foo.c contains FOO is here.",
      "range": {
        "startLine": 28,
        "startChar": 1,
        "endLine": 29,
        "endChar": 46
      },
      "revId": "4de177d4bcc1dbaaa36149c80d5a7ab44f60d6f9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b07915e6_8f2aad18",
        "filename": "base/component_export.h",
        "patchSetId": 1
      },
      "lineNbr": 29,
      "author": {
        "id": 1002808
      },
      "writtenOn": "2018-01-19T22:47:46Z",
      "side": 1,
      "message": "We could do that if this were only used by the public API for users wanting an #if block, but note that it\u0027s also used by the conditional thing above. And in that context (i.e. not an #if), this doesn\u0027t fly. Seems unnecessary to define two separate things in this case. WDYT?",
      "parentUuid": "4d6ac8f4_0e4b51cd",
      "range": {
        "startLine": 28,
        "startChar": 1,
        "endLine": 29,
        "endChar": 46
      },
      "revId": "4de177d4bcc1dbaaa36149c80d5a7ab44f60d6f9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "085550ed_fecd8c0f",
        "filename": "base/component_export.h",
        "patchSetId": 1
      },
      "lineNbr": 29,
      "author": {
        "id": 1116053
      },
      "writtenOn": "2018-01-19T22:58:07Z",
      "side": 1,
      "message": "Agreed.  I\u0027m still trying to get my head around this, thanks for patience.",
      "parentUuid": "b07915e6_8f2aad18",
      "range": {
        "startLine": 28,
        "startChar": 1,
        "endLine": 29,
        "endChar": 46
      },
      "revId": "4de177d4bcc1dbaaa36149c80d5a7ab44f60d6f9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "db940e0e_b5600bfa",
        "filename": "base/component_export.h",
        "patchSetId": 1
      },
      "lineNbr": 55,
      "author": {
        "id": 1116053
      },
      "writtenOn": "2018-01-19T21:36:24Z",
      "side": 1,
      "message": "I\u0027m surprised its this Gnarly.  What am I missing?",
      "revId": "4de177d4bcc1dbaaa36149c80d5a7ab44f60d6f9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2b9f32e4_5b8c4d7c",
        "filename": "base/component_export.h",
        "patchSetId": 1
      },
      "lineNbr": 55,
      "author": {
        "id": 1002808
      },
      "writtenOn": "2018-01-19T21:40:40Z",
      "side": 1,
      "message": "Needed for conditional expansion.\n\nYou can\u0027t do something more obvious like\n\n#define FOO\n  #if defined(X)\n    BAR\n  #else\n    BAZ\n  #endif",
      "parentUuid": "db940e0e_b5600bfa",
      "revId": "4de177d4bcc1dbaaa36149c80d5a7ab44f60d6f9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7e759b95_653cb612",
        "filename": "base/component_export.h",
        "patchSetId": 1
      },
      "lineNbr": 55,
      "author": {
        "id": 1002808
      },
      "writtenOn": "2018-01-19T21:41:54Z",
      "side": 1,
      "message": "There\u0027s also inconvenience around exactly how and when the preprocessor decides to attempt an expansion, which explains some of the layered indirections you see.",
      "parentUuid": "2b9f32e4_5b8c4d7c",
      "revId": "4de177d4bcc1dbaaa36149c80d5a7ab44f60d6f9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5aaac18f_fe9428e5",
        "filename": "ipc/BUILD.gn",
        "patchSetId": 1
      },
      "lineNbr": 82,
      "author": {
        "id": 1116053
      },
      "writtenOn": "2018-01-19T21:36:24Z",
      "side": 1,
      "message": "\u003d1",
      "range": {
        "startLine": 82,
        "startChar": 26,
        "endLine": 82,
        "endChar": 27
      },
      "revId": "4de177d4bcc1dbaaa36149c80d5a7ab44f60d6f9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}