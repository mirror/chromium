{
  "comments": [
    {
      "key": {
        "uuid": "22d3275f_646f06f5",
        "filename": "third_party/zlib/contrib/bench/zlib_bench.cc",
        "patchSetId": 12
      },
      "lineNbr": 55,
      "author": {
        "id": 1189229
      },
      "writtenOn": "2018-01-08T20:19:51Z",
      "side": 1,
      "message": "I\u0027m okay with this.\nAlthough, using string to store non-text data feels a bit odd.\nIt works. At the end of the day std::string is just storing the bytes. But I think a vector might feel more natural if we want to use a standard container.",
      "range": {
        "startLine": 55,
        "startChar": 46,
        "endLine": 55,
        "endChar": 57
      },
      "revId": "47698b33914c67af06100488d8a31636be8ad492",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bf4f67c7_16696141",
        "filename": "third_party/zlib/contrib/bench/zlib_bench.cc",
        "patchSetId": 12
      },
      "lineNbr": 85,
      "author": {
        "id": 1189229
      },
      "writtenOn": "2018-01-08T20:19:51Z",
      "side": 1,
      "message": "have_frequency will be zero-initialized and thus false.\nIt might help readability to explicitly initialize have_frequency \u003d false;",
      "range": {
        "startLine": 85,
        "startChar": 2,
        "endLine": 85,
        "endChar": 21
      },
      "revId": "47698b33914c67af06100488d8a31636be8ad492",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ad014993_2a5db921",
        "filename": "third_party/zlib/contrib/bench/zlib_bench.cc",
        "patchSetId": 12
      },
      "lineNbr": 93,
      "author": {
        "id": 1189229
      },
      "writtenOn": "2018-01-08T20:19:51Z",
      "side": 1,
      "message": "I feel like this can be made much easier (and accurate) if it were separate start/stop functions.\n\nRight now, this function runs once to initialize the frequency. Then it calls itself to run the non-initialization step and get the current time. If we leave this function as-is, we can make that more explicit. We don\u0027t need to call QueryPerformanceCounter(\u0026qpc) on the initialization step.\n\nBut I think even better than that would be to make separate start/stop functions. That way you can subtract the difference in the QuadPart before scaling up by clock frequency and then scaling down to get seconds. That scaling will introduce some error in the measurements.\n\nThis same idea applies to the non-win32 version below. If we separate start/stop (and pass the start time into stop) we don\u0027t have to scale until after we have the exact diff.",
      "range": {
        "startLine": 79,
        "startChar": 0,
        "endLine": 93,
        "endChar": 0
      },
      "revId": "47698b33914c67af06100488d8a31636be8ad492",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d6daeac4_09dfd69b",
        "filename": "third_party/zlib/contrib/bench/zlib_bench.cc",
        "patchSetId": 12
      },
      "lineNbr": 118,
      "author": {
        "id": 1189229
      },
      "writtenOn": "2018-01-08T20:19:51Z",
      "side": 1,
      "message": "Probably don\u0027t need the \"z_\" prefix here and below?",
      "range": {
        "startLine": 118,
        "startChar": 14,
        "endLine": 118,
        "endChar": 16
      },
      "revId": "47698b33914c67af06100488d8a31636be8ad492",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e5421da4_c201cff3",
        "filename": "third_party/zlib/contrib/bench/zlib_bench.cc",
        "patchSetId": 12
      },
      "lineNbr": 119,
      "author": {
        "id": 1189229
      },
      "writtenOn": "2018-01-08T20:19:51Z",
      "side": 1,
      "message": "It would help to convert these magic numbers into named constants.",
      "range": {
        "startLine": 119,
        "startChar": 35,
        "endLine": 119,
        "endChar": 44
      },
      "revId": "47698b33914c67af06100488d8a31636be8ad492",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a5f82070_d71ae099",
        "filename": "third_party/zlib/contrib/bench/zlib_bench.cc",
        "patchSetId": 12
      },
      "lineNbr": 138,
      "author": {
        "id": 1189229
      },
      "writtenOn": "2018-01-08T20:19:51Z",
      "side": 1,
      "message": "I\u0027m not sure I follow this. Perhaps the function should be named to indicate that it returns the window bits.\n\nBut even still, we\u0027re calling this to pass the returned value into inflateInit2() and deflateInit2(). MAX_WBITS is 15 for us [1] and both inflateInit2() [2] and deflateInit2() docs [3] say the value should be in the range 8..15.\n\nThat makes it seem like this would only work for kWrapperZLIB and would fail on the other wrappers?\n\n[1] https://cs.chromium.org/chromium/src/third_party/zlib/zconf.h?l\u003d273\u0026rcl\u003dc732605e7d88b7586e12e405cd56172edb1d3261\n[2] https://cs.chromium.org/chromium/src/third_party/freetype/src/src/gzip/zlib.h?l\u003d525\u0026rcl\u003d2c048a8a622e9f44f255aa3316026f124ac9ecbc\n[3] https://cs.chromium.org/chromium/src/third_party/freetype/src/src/gzip/zlib.h?l\u003d411\u0026rcl\u003d2c048a8a622e9f44f255aa3316026f124ac9ecbc",
      "range": {
        "startLine": 129,
        "startChar": 0,
        "endLine": 138,
        "endChar": 1
      },
      "revId": "47698b33914c67af06100488d8a31636be8ad492",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6eca1a72_bd94d670",
        "filename": "third_party/zlib/contrib/bench/zlib_bench.cc",
        "patchSetId": 12
      },
      "lineNbr": 171,
      "author": {
        "id": 1189229
      },
      "writtenOn": "2018-01-08T20:19:51Z",
      "side": 1,
      "message": "Doesn\u0027t next_in need to be initialized before calling deflateInit2? [1]\n\nWhen working on the fuzzers, I initialized like this [2].\n\n[1] https://cs.chromium.org/chromium/src/third_party/perl/c/include/zlib.h?l\u003d535\u0026rcl\u003dac0d98b5cee6c024b0cffeb4f8f45b6fc5ccdb78\n[2] https://cs.chromium.org/chromium/src/third_party/zlib/contrib/tests/fuzzers/deflate_fuzzer.cc?l\u003d26\u0026rcl\u003dfc7c852c03345b030676d54ce766284e1d2d4118",
      "range": {
        "startLine": 162,
        "startChar": 2,
        "endLine": 171,
        "endChar": 37
      },
      "revId": "47698b33914c67af06100488d8a31636be8ad492",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f947b305_09258690",
        "filename": "third_party/zlib/contrib/bench/zlib_bench.cc",
        "patchSetId": 12
      },
      "lineNbr": 199,
      "author": {
        "id": 1189229
      },
      "writtenOn": "2018-01-08T20:19:51Z",
      "side": 1,
      "message": "Same here. next_in and avail_in should be initialized before the call to inflateInit2 [1]. An example is here [2].\n\n[1] https://cs.chromium.org/chromium/src/third_party/zlib/zlib.h?l\u003d836\u0026rcl\u003de69ba31d63f9ffb09ebd1dc12bdd4dae6160a5eb\n[2] https://cs.chromium.org/chromium/src/third_party/zlib/contrib/tests/fuzzers/inflate_fuzzer.cc?l\u003d22\u0026rcl\u003de69ba31d63f9ffb09ebd1dc12bdd4dae6160a5eb",
      "range": {
        "startLine": 190,
        "startChar": 2,
        "endLine": 199,
        "endChar": 0
      },
      "revId": "47698b33914c67af06100488d8a31636be8ad492",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "42a03549_bee0549d",
        "filename": "third_party/zlib/contrib/bench/zlib_bench.cc",
        "patchSetId": 12
      },
      "lineNbr": 223,
      "author": {
        "id": 1189229
      },
      "writtenOn": "2018-01-08T20:19:51Z",
      "side": 1,
      "message": "Here, that timer is being initialized. I only know that because I looked at the timer code though. If this was named something like initialize_timer() it would make the code much cleaner. Or just separate start/stop and the start can always init.",
      "revId": "47698b33914c67af06100488d8a31636be8ad492",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b2769ad2_336aa805",
        "filename": "third_party/zlib/contrib/bench/zlib_bench.cc",
        "patchSetId": 12
      },
      "lineNbr": 255,
      "author": {
        "id": 1189229
      },
      "writtenOn": "2018-01-08T20:19:51Z",
      "side": 1,
      "message": "I\u0027m a bit confused where this magic number comes from.",
      "range": {
        "startLine": 255,
        "startChar": 23,
        "endLine": 255,
        "endChar": 31
      },
      "revId": "47698b33914c67af06100488d8a31636be8ad492",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5c3163e3_2d1470a6",
        "filename": "third_party/zlib/contrib/bench/zlib_bench.cc",
        "patchSetId": 12
      },
      "lineNbr": 296,
      "author": {
        "id": 1189229
      },
      "writtenOn": "2018-01-08T20:19:51Z",
      "side": 1,
      "message": "I think the default predicate is operator \u003c so you might not need these lambdas.",
      "range": {
        "startLine": 296,
        "startChar": 34,
        "endLine": 296,
        "endChar": 74
      },
      "revId": "47698b33914c67af06100488d8a31636be8ad492",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9592e95d_14649fdb",
        "filename": "third_party/zlib/contrib/bench/zlib_bench.cc",
        "patchSetId": 12
      },
      "lineNbr": 305,
      "author": {
        "id": 1189229
      },
      "writtenOn": "2018-01-08T20:19:51Z",
      "side": 1,
      "message": "I feel like operator \u003d would be easier to read here.",
      "range": {
        "startLine": 305,
        "startChar": 9,
        "endLine": 305,
        "endChar": 17
      },
      "revId": "47698b33914c67af06100488d8a31636be8ad492",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}