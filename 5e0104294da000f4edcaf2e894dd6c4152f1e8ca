{
  "comments": [
    {
      "key": {
        "uuid": "1fe5b62c_b967ca06",
        "filename": "ui/message_center/message_center_impl.cc",
        "patchSetId": 4
      },
      "lineNbr": 46,
      "author": {
        "id": 1115907
      },
      "writtenOn": "2018-02-01T03:04:11Z",
      "side": 0,
      "message": "+oshima,\n\nDo you think this DCHECK has value? As you can see, there are a lot of messages back and forth debating it, so Yoshiki and I are stuck. Its intent seems to be to keep MessageCenterObservers from modifying notifications while inside a MessageCenterObserver callback/method, because that might lead to surprising observer method callback ordering. I think it\u0027s outside the norm for classes that have ObserverLists to do this, and I\u0027m unaware of any past bugs that this would have caught. (I don\u0027t believe the tether notification bug mentioned earlier cared about the order of callbacks so much as it assumed MessageCenter::GetNotification(notification_id) would always return a non-null value.) I don\u0027t want to editorialize too much, but I know the context of the MessageCenter might not be the freshest in your mind, so let me know if you have any other questions.",
      "range": {
        "startLine": 46,
        "startChar": 4,
        "endLine": 46,
        "endChar": 40
      },
      "revId": "5e0104294da000f4edcaf2e894dd6c4152f1e8ca",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fc9835e3_5e35300a",
        "filename": "ui/message_center/message_center_impl.h",
        "patchSetId": 4
      },
      "lineNbr": 121,
      "author": {
        "id": 1000175
      },
      "writtenOn": "2018-01-11T01:18:06Z",
      "side": 0,
      "message": "Could you keep this flag? I want to prevent someone from modifying notifications while another modification. For example, someone had removed notifications in OnNotificationUpdated observer and it had caused a crash. I want to prohibit such a complex flow.",
      "range": {
        "startLine": 121,
        "startChar": 2,
        "endLine": 121,
        "endChar": 26
      },
      "revId": "5e0104294da000f4edcaf2e894dd6c4152f1e8ca",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0d00c5f9_2d8e19e5",
        "filename": "ui/message_center/message_center_impl.h",
        "patchSetId": 4
      },
      "lineNbr": 121,
      "author": {
        "id": 1115907
      },
      "writtenOn": "2018-01-11T17:52:29Z",
      "side": 0,
      "message": "Are you suggesting just DCHECKing when that happens?\n\n\u003e someone had removed notifications in OnNotificationUpdated observer and it had caused a crash. I want to prohibit such a complex flow.\n\nCan you point me at that example? Are you referring to the tether notification code?",
      "parentUuid": "fc9835e3_5e35300a",
      "range": {
        "startLine": 121,
        "startChar": 2,
        "endLine": 121,
        "endChar": 26
      },
      "revId": "5e0104294da000f4edcaf2e894dd6c4152f1e8ca",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b7b2dc87_95d901ba",
        "filename": "ui/message_center/message_center_impl.h",
        "patchSetId": 4
      },
      "lineNbr": 121,
      "author": {
        "id": 1000175
      },
      "writtenOn": "2018-01-12T03:20:34Z",
      "side": 0,
      "message": "Ah, yes. Sorry for lacking words. I meant:\n- keeping ScopedNotificationsIterationLock only if DCHECK_IS_ON()\n- keeping current DCHECK\n- replacing code checking the \"iterating\" flag with DHCEK (these code are in MessageCenterImpl::AddNotification, UpdateNotification, RemoveNotificaiton, SetNotificationIcon, SetNotificationImage and SetNotificationButtonIcon)\n\nI want to prevent someone from adding the code of manipulating notification in observers in feature. I think this kind of bug is easy to be added by mistake. This check with the \"iterating\" flag is inspired by views::View::iterating_;\n\nWhat I was referring in my previous comment is the tether notification code issue (http://crbug.com/762803), which you also mentioned in the description.",
      "parentUuid": "0d00c5f9_2d8e19e5",
      "range": {
        "startLine": 121,
        "startChar": 2,
        "endLine": 121,
        "endChar": 26
      },
      "revId": "5e0104294da000f4edcaf2e894dd6c4152f1e8ca",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b63460b4_4d91ac5e",
        "filename": "ui/message_center/message_center_impl.h",
        "patchSetId": 4
      },
      "lineNbr": 121,
      "author": {
        "id": 1115907
      },
      "writtenOn": "2018-01-12T18:20:18Z",
      "side": 0,
      "message": "I think ScopedNotificationsIterationLock is overzealous. For example, in RemoveNotification, the notification is first removed, then all observers are informed (by way of the notification\u0027s ID string). What is the danger here? An observer could add or remove notifications in the handler for that without breaking anything. The only thing passed to the observer is an ID; any and all code needs to be cognizant that GetVisibleNotificationById can return null. The observer list itself (that which you\u0027re iterating over) is resilient to being modified. The ID or the Notification object being used for the observer calls are copies and shouldn\u0027t be affected by deleting the notification from the NotificationList. Can you lay out a sequence of events that would cause a crash after this patch, but would be caught by your proposed DCHECK?\n\nIt\u0027s hard to see the details of the tether crash any more because the go/crash link is expired, but since the crash was in tether code I\u0027m pretty sure the bug was in tether code. I don\u0027t think khorimoto\u0027s explanations/theories are quite right, but it\u0027s hard to analyze since the stack is no longer accessible and all the relevant code is hard to dig up.",
      "parentUuid": "b7b2dc87_95d901ba",
      "range": {
        "startLine": 121,
        "startChar": 2,
        "endLine": 121,
        "endChar": 26
      },
      "revId": "5e0104294da000f4edcaf2e894dd6c4152f1e8ca",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}