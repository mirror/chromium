Overview

The Chrome documemtation is generated by a templating system written in HTML and
JavaScript. The inputs are the API definitions, which are in ../api/ and are
described in JSON, and static HTML files which are in static/.

Each page of the documentation is essentially a simple AJAX application. It
sucks in its dependencies via XMLHttpRequest and renders them into the final
documentation.

In order to facilitate indexing by search engines, we load these pages into
WebKit offline, and check the resulting flat files into source control.

The documentation is then served by an app engine server that is essentially a
caching proxy for Chrome's source control repository.

The key features of all of this are:

* Reference docs are generated automatically from source. It is impossible to
  have out-of-date reference docs.

* All docs are editable by anyone with commit access to Chrome. The server
  starts serving new docs automatically as soon as its cache expires.

* The docs branch with the code. developer.chrome.com/extensions/beta always
  shows the docs related to the code in the current Chrome beta, no matter what
  branch that currently is. Same for /stable, /dev and /trunk. There's no
  release process specific to docs that makes this happen; it's a natural
  consequence Chrome's source branching for each release.


Directory Layout

../api/
  Contains computer-readable definitions of all APIs in a JSON format.
template/
  Contains the HTML templates that are used at generation time.
static/
  Contains the static authored content if any for each documentation page.
apps/
  Contains the final rendered HTML for apps documentation.
extensions/
  Contains the final rendered HTML for extensions documentation.
js/
  Contains the JavaScript that drives the templates.
css/, images/
  Duh.
server/
  Contains the app engine server backing developer.chrome.com.


Editing Docs

*I want to document methods, events or parameters in the api itself:
=>Edit the JSON file for the api in ../api/. Usually you can just add or edit
the "description" property. This will appear automatically in the corresponding
doc page at .(apps|extensions)/<page>.html (where <page> is the name of the
apimodule ("tabs", etc..) that contains the change you are making.

*I want to edit static content for an API reference module:
=>Look in /static/<page>.html (for your module). If the file exists, edit it,
check you changes by viewing /(apps|extensions)/<page>.html. If the file doesn't
exist, add it.

*I want to edit a purely static page:
=>Follow the same steps for editing static content for an API page.

*I want to add a new page:
=> Copy template/page_shell.html to either apps/<page>.html or
extensions/<page>.html as necessary. If this page will document an API, <page>
should be the same name as the API. If there will be static content, add
static/<page>.html, too.


Building Docs

Changes to the extension docs must be checked into source control. Any changes
to any input sources require the docs to be regenerated.

To build the extension docs, run the build.py (or build.bat on Windows) script
in the ./build directory. This will regenerate the docs and report which, if
any, files have changed and need to be included in the changelist that changed
the dependent files.

Note that the build.py script depends on DumpRenderTree to run, so you must be
able to build DumpRenderTree to build extension_docs. The build.py script will
look in typical locations for the DumpRenderTree executable, but you may set
the path to DumpRenderTree explicitly with --dump-render-tree-path.


Debugging Broken Builds

If you encounter errors building your pages, you can debug it like so:

1. Get the URL starting with file:/// and including generator.html that the
   build script prints out as it is working.

2. Add --allow-file-access-from-files to Chrome's command line.

3. Load the URL from (1) into a **new incognito window**. Incognito is
   important due to caching issues with file URLs in Chrome. If you don't do
   this (or something similar) you are liable to see stale results.

4. There will typically be JavaScript errors in the console that you can
   debug.


Before You Whine

Work is underway on a newer system that will be easier to use, but with the
same advantages listed at the top of this page. See the server2/ directory.
