{
  "comments": [
    {
      "key": {
        "uuid": "d1bd6d4a_6ae48d03",
        "filename": "chrome/browser/metrics/extensions_metrics_provider.cc",
        "patchSetId": 10
      },
      "lineNbr": 220,
      "author": {
        "id": 1161815
      },
      "writtenOn": "2017-09-23T00:55:40Z",
      "side": 1,
      "message": "This would probably be cleaner with something like \n\nstruct {\n  disable_reason::DisableReason disable_reason;\n  ExtensionInstallProto::DisableReason proto_disable_reason;\n} disable_reason_map[] \u003d {\n  ....\n}\n\nfor (size_t i \u003d 0; i \u003c arraysize(disable_reason_map); i++) {\n  int mask \u003d static_cast\u003cint\u003e(disable_reasons_map[i].disable_reason);\n  if (disable_reasons \u0026 mask)) {\n    reasons.push_back(disable_reasons_map[i].proto_disable_reason);\n    disable_reasons \u0026\u003d ~mask;\n  }\n  DCHECK_EQ(disable_reason::DisableReason::DISABLE_NONE , disable_reasons);\n}\n\nAlso note the DCHECK, should ensure we are not ignoring some disable reasons (This is assuming that the deprecated ones are no longer in use).",
      "range": {
        "startLine": 220,
        "startChar": 7,
        "endLine": 220,
        "endChar": 13
      },
      "revId": "5c6c728d108f8c12d0299a345588ce1dbdbe9f0f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7fdf84ba_467934ca",
        "filename": "chrome/browser/metrics/extensions_metrics_provider.cc",
        "patchSetId": 10
      },
      "lineNbr": 220,
      "author": {
        "id": 1115745
      },
      "writtenOn": "2017-09-27T22:12:08Z",
      "side": 1,
      "message": "I like it!  Done with a few modifications (static-ify the map struct, use a range-based for loop, move the DCHECK_EQ outside the for loop).",
      "parentUuid": "d1bd6d4a_6ae48d03",
      "range": {
        "startLine": 220,
        "startChar": 7,
        "endLine": 220,
        "endChar": 13
      },
      "revId": "5c6c728d108f8c12d0299a345588ce1dbdbe9f0f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8f5e2d6f_4413b4c4",
        "filename": "chrome/browser/metrics/extensions_metrics_provider.cc",
        "patchSetId": 10
      },
      "lineNbr": 412,
      "author": {
        "id": 1001310
      },
      "writtenOn": "2017-09-22T20:30:10Z",
      "side": 1,
      "message": "nit: usually functions appear in the .cc in the same order as the .h",
      "revId": "5c6c728d108f8c12d0299a345588ce1dbdbe9f0f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a319ecba_4092e3de",
        "filename": "chrome/browser/metrics/extensions_metrics_provider.cc",
        "patchSetId": 10
      },
      "lineNbr": 412,
      "author": {
        "id": 1115745
      },
      "writtenOn": "2017-09-27T22:12:08Z",
      "side": 1,
      "message": "Done (by adding the ForTesting methods, we moved these to be private again and the order is correct).",
      "parentUuid": "8f5e2d6f_4413b4c4",
      "revId": "5c6c728d108f8c12d0299a345588ce1dbdbe9f0f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6bd1870f_7b62b8f7",
        "filename": "chrome/browser/metrics/extensions_metrics_provider.cc",
        "patchSetId": 10
      },
      "lineNbr": 453,
      "author": {
        "id": 1161815
      },
      "writtenOn": "2017-09-23T00:55:40Z",
      "side": 1,
      "message": "nit: move out of loop. Also, isn\u0027t there a proto equivalent of vector for a repeated field, which we can directly return and use?",
      "range": {
        "startLine": 453,
        "startChar": 7,
        "endLine": 453,
        "endChar": 24
      },
      "revId": "5c6c728d108f8c12d0299a345588ce1dbdbe9f0f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9814d395_c3ed0ceb",
        "filename": "chrome/browser/metrics/extensions_metrics_provider.cc",
        "patchSetId": 10
      },
      "lineNbr": 453,
      "author": {
        "id": 1001310
      },
      "writtenOn": "2017-09-23T05:22:31Z",
      "side": 1,
      "message": "\u003e nit: move out of loop.\nIt\u0027s not \"in\" the loop, it\u0027s the value being iterated over.  It\u0027ll only be evaluated once I think.\n\n\u003e Also, isn\u0027t there a proto equivalent of vector for a repeated field, which we can directly return and use?\nThere is, but it\u0027s pretty awkward to use.",
      "parentUuid": "6bd1870f_7b62b8f7",
      "range": {
        "startLine": 453,
        "startChar": 7,
        "endLine": 453,
        "endChar": 24
      },
      "revId": "5c6c728d108f8c12d0299a345588ce1dbdbe9f0f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a31195e1_33a1cad3",
        "filename": "chrome/browser/metrics/extensions_metrics_provider.cc",
        "patchSetId": 10
      },
      "lineNbr": 453,
      "author": {
        "id": 1161815
      },
      "writtenOn": "2017-09-25T18:45:31Z",
      "side": 1,
      "message": "\u003e \u003e nit: move out of loop.\n\u003e It\u0027s not \"in\" the loop, it\u0027s the value being iterated over.  It\u0027ll only be evaluated once I think.\nOh yeah, the range expression in a range-based for loop is only evaluated once- http://en.cppreference.com/w/cpp/language/range-for. Thanks.\n\n\u003e \u003e Also, isn\u0027t there a proto equivalent of vector for a repeated field, which we can directly return and use?\n\u003e There is, but it\u0027s pretty awkward to use.\nAcknowledged.",
      "parentUuid": "9814d395_c3ed0ceb",
      "range": {
        "startLine": 453,
        "startChar": 7,
        "endLine": 453,
        "endChar": 24
      },
      "revId": "5c6c728d108f8c12d0299a345588ce1dbdbe9f0f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ffc9f35a_cc99732e",
        "filename": "chrome/browser/metrics/extensions_metrics_provider.cc",
        "patchSetId": 10
      },
      "lineNbr": 453,
      "author": {
        "id": 1115745
      },
      "writtenOn": "2017-09-27T22:12:08Z",
      "side": 1,
      "message": "What Mark said. :)",
      "parentUuid": "a31195e1_33a1cad3",
      "range": {
        "startLine": 453,
        "startChar": 7,
        "endLine": 453,
        "endChar": 24
      },
      "revId": "5c6c728d108f8c12d0299a345588ce1dbdbe9f0f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5975830f_6fe6f410",
        "filename": "chrome/browser/metrics/extensions_metrics_provider.cc",
        "patchSetId": 10
      },
      "lineNbr": 458,
      "author": {
        "id": 1161815
      },
      "writtenOn": "2017-09-23T00:55:40Z",
      "side": 1,
      "message": "nit: Maybe change to-\nprefs-\u003eGetInstallTime(..) \u003e last_sample_time \nFind it easier to reason about.\n\nAlso, do we need \u003e\u003d?",
      "range": {
        "startLine": 458,
        "startChar": 19,
        "endLine": 458,
        "endChar": 33
      },
      "revId": "5c6c728d108f8c12d0299a345588ce1dbdbe9f0f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d033055d_aef4bfe5",
        "filename": "chrome/browser/metrics/extensions_metrics_provider.cc",
        "patchSetId": 10
      },
      "lineNbr": 458,
      "author": {
        "id": 1115745
      },
      "writtenOn": "2017-09-27T22:12:08Z",
      "side": 1,
      "message": "Good idea; that cleans it up quite a bit!\n\nRe \u003e\u003d vs \u003e, in practice, I doubt this will matter (since that would mean the time of the recording and the time of the extension installation match to the granularity of the clock).  Additionally, we\u0027d have no way of knowing whether or not the extension was *actually* installed in the current period (since it could have been installed instantaneously before or after).  \u003e\u003d seems a little more conservative (we\u0027ll throw out logs we\u0027re not sure about), so let\u0027s do that.",
      "parentUuid": "5975830f_6fe6f410",
      "range": {
        "startLine": 458,
        "startChar": 19,
        "endLine": 458,
        "endChar": 33
      },
      "revId": "5c6c728d108f8c12d0299a345588ce1dbdbe9f0f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7ee5dbe2_50fff307",
        "filename": "chrome/browser/metrics/extensions_metrics_provider.cc",
        "patchSetId": 10
      },
      "lineNbr": 469,
      "author": {
        "id": 1161815
      },
      "writtenOn": "2017-09-23T00:55:40Z",
      "side": 1,
      "message": "nit: inline below.",
      "range": {
        "startLine": 469,
        "startChar": 30,
        "endLine": 469,
        "endChar": 35
      },
      "revId": "5c6c728d108f8c12d0299a345588ce1dbdbe9f0f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e18be6c9_7eb6ad37",
        "filename": "chrome/browser/metrics/extensions_metrics_provider.cc",
        "patchSetId": 10
      },
      "lineNbr": 469,
      "author": {
        "id": 1115745
      },
      "writtenOn": "2017-09-27T22:12:08Z",
      "side": 1,
      "message": "Inlining this results in duplicating the call to ExtensionPrefs::Get() for each entry in the extension set.  It\u0027s cheap, but not free, so I\u0027d prefer to keep it cached here.",
      "parentUuid": "7ee5dbe2_50fff307",
      "range": {
        "startLine": 469,
        "startChar": 30,
        "endLine": 469,
        "endChar": 35
      },
      "revId": "5c6c728d108f8c12d0299a345588ce1dbdbe9f0f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "27ba5584_61537beb",
        "filename": "chrome/browser/metrics/extensions_metrics_provider.cc",
        "patchSetId": 10
      },
      "lineNbr": 470,
      "author": {
        "id": 1161815
      },
      "writtenOn": "2017-09-23T00:55:40Z",
      "side": 1,
      "message": "nit: move before installs.reserve(..).",
      "range": {
        "startLine": 470,
        "startChar": 37,
        "endLine": 470,
        "endChar": 45
      },
      "revId": "5c6c728d108f8c12d0299a345588ce1dbdbe9f0f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "30668ab7_51d9ab06",
        "filename": "chrome/browser/metrics/extensions_metrics_provider.cc",
        "patchSetId": 10
      },
      "lineNbr": 470,
      "author": {
        "id": 1115745
      },
      "writtenOn": "2017-09-27T22:12:08Z",
      "side": 1,
      "message": "Sure, done.",
      "parentUuid": "27ba5584_61537beb",
      "range": {
        "startLine": 470,
        "startChar": 37,
        "endLine": 470,
        "endChar": 45
      },
      "revId": "5c6c728d108f8c12d0299a345588ce1dbdbe9f0f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9296b8d3_fc1753fe",
        "filename": "chrome/browser/metrics/extensions_metrics_provider.h",
        "patchSetId": 10
      },
      "lineNbr": 66,
      "author": {
        "id": 1161815
      },
      "writtenOn": "2017-09-23T00:55:40Z",
      "side": 1,
      "message": "These are only protected static to facilitate testing I believe? A comment along these lines would be helpful. \n\nCan\u0027t we just expose these as free functions? If not, can we expose ForTesting free functions, which call into the actual functions in an anon namespace.",
      "revId": "5c6c728d108f8c12d0299a345588ce1dbdbe9f0f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "35a58880_9799d194",
        "filename": "chrome/browser/metrics/extensions_metrics_provider.h",
        "patchSetId": 10
      },
      "lineNbr": 66,
      "author": {
        "id": 1001310
      },
      "writtenOn": "2017-09-23T05:22:31Z",
      "side": 1,
      "message": "\u003e These are only protected static to facilitate testing I believe? A comment along these lines would be helpful. \n\nSee line 48.\n\n\u003e Can\u0027t we just expose these as free functions? If not, can we expose ForTesting free functions, which call into the actual functions in an anon namespace.\n\nDo we have an \"expose for testing\" annotation in C++?",
      "parentUuid": "9296b8d3_fc1753fe",
      "revId": "5c6c728d108f8c12d0299a345588ce1dbdbe9f0f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "15cc00b4_f77652d2",
        "filename": "chrome/browser/metrics/extensions_metrics_provider.h",
        "patchSetId": 10
      },
      "lineNbr": 66,
      "author": {
        "id": 1161815
      },
      "writtenOn": "2017-09-25T18:45:31Z",
      "side": 1,
      "message": "\u003e \u003e These are only protected static to facilitate testing I believe? A comment along these lines would be helpful. \n\u003e \n\u003e See line 48.\n\nThanks, I missed it.\n\n\u003e \u003e Can\u0027t we just expose these as free functions? If not, can we expose ForTesting free functions, which call into the actual functions in an anon namespace.\n\u003e \n\u003e Do we have an \"expose for testing\" annotation in C++?\n\nThere are PRESUBMIT checks for functions with \"ForTest\" in their name - https://cs.chromium.org/chromium/src/PRESUBMIT.py?type\u003dcs\u0026q\u003dForTest+file:PRESUBMIT\u0026sq\u003dpackage:chromium\u0026l\u003d533",
      "parentUuid": "35a58880_9799d194",
      "revId": "5c6c728d108f8c12d0299a345588ce1dbdbe9f0f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a2922c6d_aa79bfd6",
        "filename": "chrome/browser/metrics/extensions_metrics_provider.h",
        "patchSetId": 10
      },
      "lineNbr": 66,
      "author": {
        "id": 1115745
      },
      "writtenOn": "2017-09-27T22:12:08Z",
      "side": 1,
      "message": "Yeah, we use a bunch of different ways of exposing methods like this for testing, including protected:\u0027ing them, friending the tests, adding ForTesting() wrappers, and others.  If the ForTesting() is your preference, I can do that. :)\n\n(Ilya: I think this still compliant with your preferences, but let me know if that\u0027s not the case.)",
      "parentUuid": "15cc00b4_f77652d2",
      "revId": "5c6c728d108f8c12d0299a345588ce1dbdbe9f0f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "de395d2b_78a655e3",
        "filename": "chrome/browser/metrics/extensions_metrics_provider.h",
        "patchSetId": 10
      },
      "lineNbr": 66,
      "author": {
        "id": 1002410
      },
      "writtenOn": "2017-09-28T01:38:03Z",
      "side": 1,
      "message": "Yeah, I\u0027m fine with ForTesting() methods as well.  Thanks!",
      "parentUuid": "a2922c6d_aa79bfd6",
      "revId": "5c6c728d108f8c12d0299a345588ce1dbdbe9f0f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8afe4491_0585bcdb",
        "filename": "components/metrics/proto/extension_install.proto",
        "patchSetId": 10
      },
      "lineNbr": 18,
      "author": {
        "id": 1161815
      },
      "writtenOn": "2017-09-23T00:55:40Z",
      "side": 1,
      "message": "nit: Add comments recommending to keep this in sync with Manifest::Location, Manifest::Type etc. Here and elsewhere in the file.",
      "range": {
        "startLine": 18,
        "startChar": 7,
        "endLine": 18,
        "endChar": 11
      },
      "revId": "5c6c728d108f8c12d0299a345588ce1dbdbe9f0f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c47aba8d_3401c9d3",
        "filename": "components/metrics/proto/extension_install.proto",
        "patchSetId": 10
      },
      "lineNbr": 18,
      "author": {
        "id": 1001310
      },
      "writtenOn": "2017-09-23T05:22:31Z",
      "side": 1,
      "message": "\u003e nit: Add comments recommending to keep this in sync with Manifest::Location, Manifest::Type etc. Here and elsewhere in the file.\n\nI think it makes more sense to put the comments on those other files, not here.  No one will add something here that\u0027s not in those other files--it doesn\u0027t make sense.  But if someone adds something in those other files, they probably want to add it here as well.",
      "parentUuid": "8afe4491_0585bcdb",
      "range": {
        "startLine": 18,
        "startChar": 7,
        "endLine": 18,
        "endChar": 11
      },
      "revId": "5c6c728d108f8c12d0299a345588ce1dbdbe9f0f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "436e67db_e72b0eac",
        "filename": "components/metrics/proto/extension_install.proto",
        "patchSetId": 10
      },
      "lineNbr": 18,
      "author": {
        "id": 1161815
      },
      "writtenOn": "2017-09-25T18:45:31Z",
      "side": 1,
      "message": "SG.",
      "parentUuid": "c47aba8d_3401c9d3",
      "range": {
        "startLine": 18,
        "startChar": 7,
        "endLine": 18,
        "endChar": 11
      },
      "revId": "5c6c728d108f8c12d0299a345588ce1dbdbe9f0f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bc3f09fc_97f31546",
        "filename": "components/metrics/proto/extension_install.proto",
        "patchSetId": 10
      },
      "lineNbr": 18,
      "author": {
        "id": 1115745
      },
      "writtenOn": "2017-09-27T22:12:08Z",
      "side": 1,
      "message": "I don\u0027t really trust comments to prevent badness like this, because I find that frequently comments go unread unless someone is seeking information (said differently, they are educational, but not preventative).  Instead, I vastly prefer to break the compilation (which is better than DCHECK, since DCHECK only triggers if we have a test for that code path).  Towards that end, we can put static_asserts telling people to update the values in extensions_metrics_provider.cc, similar to what we have for disable reasons, but I don\u0027t think that actually adds any benefit over the current switch statement.  If someone adds a new manifest type or location, the switch statements in extensions_metrics_provider.cc will break for skipping that case (none of them have defaults), and in order to compile, the developer will have to add a new proto entry.  Do you think that either comments or static asserts will add any more clarity or protection?  If so, I can go ahead and add some, but wanted to check that you still think they\u0027ll help in addition to the compilation failures.",
      "parentUuid": "436e67db_e72b0eac",
      "range": {
        "startLine": 18,
        "startChar": 7,
        "endLine": 18,
        "endChar": 11
      },
      "revId": "5c6c728d108f8c12d0299a345588ce1dbdbe9f0f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "48353e82_ba01f4d4",
        "filename": "components/metrics/proto/extension_install.proto",
        "patchSetId": 10
      },
      "lineNbr": 32,
      "author": {
        "id": 1161815
      },
      "writtenOn": "2017-09-23T00:55:40Z",
      "side": 1,
      "message": "nit: Rename to INVALID_LOCATION like in Manifest::Location?",
      "range": {
        "startLine": 32,
        "startChar": 4,
        "endLine": 32,
        "endChar": 20
      },
      "revId": "5c6c728d108f8c12d0299a345588ce1dbdbe9f0f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eb622af8_404959c6",
        "filename": "components/metrics/proto/extension_install.proto",
        "patchSetId": 10
      },
      "lineNbr": 32,
      "author": {
        "id": 1001310
      },
      "writtenOn": "2017-09-23T05:22:31Z",
      "side": 1,
      "message": "\u003e nit: Rename to INVALID_LOCATION like in Manifest::Location?\n\nA typical logging best practice for enum histograms is to have an \"unknown\" entry first.  If you want an \"invalid\" entry, it should be in addition to an \"unknown\" entry.  If you\u0027re using \"invalid\" to mean \"unknown\", I think the logs should call it unknown.",
      "parentUuid": "48353e82_ba01f4d4",
      "range": {
        "startLine": 32,
        "startChar": 4,
        "endLine": 32,
        "endChar": 20
      },
      "revId": "5c6c728d108f8c12d0299a345588ce1dbdbe9f0f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3436398e_b2eea141",
        "filename": "components/metrics/proto/extension_install.proto",
        "patchSetId": 10
      },
      "lineNbr": 32,
      "author": {
        "id": 1161815
      },
      "writtenOn": "2017-09-25T18:45:31Z",
      "side": 1,
      "message": "Acknowledged.",
      "parentUuid": "eb622af8_404959c6",
      "range": {
        "startLine": 32,
        "startChar": 4,
        "endLine": 32,
        "endChar": 20
      },
      "revId": "5c6c728d108f8c12d0299a345588ce1dbdbe9f0f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "adced174_1619d962",
        "filename": "components/metrics/proto/extension_install.proto",
        "patchSetId": 10
      },
      "lineNbr": 32,
      "author": {
        "id": 1115745
      },
      "writtenOn": "2017-09-27T22:12:08Z",
      "side": 1,
      "message": "(Closing)",
      "parentUuid": "3436398e_b2eea141",
      "range": {
        "startLine": 32,
        "startChar": 4,
        "endLine": 32,
        "endChar": 20
      },
      "revId": "5c6c728d108f8c12d0299a345588ce1dbdbe9f0f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d70766e7_3e256531",
        "filename": "components/metrics/proto/extension_install.proto",
        "patchSetId": 10
      },
      "lineNbr": 137,
      "author": {
        "id": 1161815
      },
      "writtenOn": "2017-09-23T00:55:40Z",
      "side": 1,
      "message": "Add BLOCKED_BY_POLICY?",
      "range": {
        "startLine": 137,
        "startChar": 4,
        "endLine": 137,
        "endChar": 31
      },
      "revId": "5c6c728d108f8c12d0299a345588ce1dbdbe9f0f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "319f640c_a0199ae2",
        "filename": "components/metrics/proto/extension_install.proto",
        "patchSetId": 10
      },
      "lineNbr": 137,
      "author": {
        "id": 1115745
      },
      "writtenOn": "2017-09-27T22:12:08Z",
      "side": 1,
      "message": "Good catch; thanks.  In the future, this will be caught by the static assert for matching the last disable reason, but this landed between patch sets.\n\nFYI Mark and Ilya, this will require another internal CL - I\u0027ll get that up shortly.",
      "parentUuid": "d70766e7_3e256531",
      "range": {
        "startLine": 137,
        "startChar": 4,
        "endLine": 137,
        "endChar": 31
      },
      "revId": "5c6c728d108f8c12d0299a345588ce1dbdbe9f0f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "600b4322_eb3464c1",
        "filename": "components/metrics/proto/extension_install.proto",
        "patchSetId": 10
      },
      "lineNbr": 141,
      "author": {
        "id": 1161815
      },
      "writtenOn": "2017-09-23T00:55:40Z",
      "side": 1,
      "message": "Do we maintain the invariant that we don\u0027t have disabled extensions with just the DISABLE_NONE disabled reason?",
      "range": {
        "startLine": 140,
        "startChar": 53,
        "endLine": 141,
        "endChar": 31
      },
      "revId": "5c6c728d108f8c12d0299a345588ce1dbdbe9f0f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9a6f1928_4ce4e49f",
        "filename": "components/metrics/proto/extension_install.proto",
        "patchSetId": 10
      },
      "lineNbr": 141,
      "author": {
        "id": 1115745
      },
      "writtenOn": "2017-09-27T22:12:08Z",
      "side": 1,
      "message": "Yes, DISABLE_NONE \u003d\u003d 0 and 0 is considered enabled (e.g. https://cs.chromium.org/chromium/src/chrome/browser/extensions/extension_service.cc?sq\u003dpackage:chromium\u0026l\u003d1737)",
      "parentUuid": "600b4322_eb3464c1",
      "range": {
        "startLine": 140,
        "startChar": 53,
        "endLine": 141,
        "endChar": 31
      },
      "revId": "5c6c728d108f8c12d0299a345588ce1dbdbe9f0f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}