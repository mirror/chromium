{
  "comments": [
    {
      "key": {
        "uuid": "d1bd6d4a_6ae48d03",
        "filename": "chrome/browser/metrics/extensions_metrics_provider.cc",
        "patchSetId": 10
      },
      "lineNbr": 220,
      "author": {
        "id": 1161815
      },
      "writtenOn": "2017-09-23T00:55:40Z",
      "side": 1,
      "message": "This would probably be cleaner with something like \n\nstruct {\n  disable_reason::DisableReason disable_reason;\n  ExtensionInstallProto::DisableReason proto_disable_reason;\n} disable_reason_map[] \u003d {\n  ....\n}\n\nfor (size_t i \u003d 0; i \u003c arraysize(disable_reason_map); i++) {\n  int mask \u003d static_cast\u003cint\u003e(disable_reasons_map[i].disable_reason);\n  if (disable_reasons \u0026 mask)) {\n    reasons.push_back(disable_reasons_map[i].proto_disable_reason);\n    disable_reasons \u0026\u003d ~mask;\n  }\n  DCHECK_EQ(disable_reason::DisableReason::DISABLE_NONE , disable_reasons);\n}\n\nAlso note the DCHECK, should ensure we are not ignoring some disable reasons (This is assuming that the deprecated ones are no longer in use).",
      "range": {
        "startLine": 220,
        "startChar": 7,
        "endLine": 220,
        "endChar": 13
      },
      "revId": "5c6c728d108f8c12d0299a345588ce1dbdbe9f0f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8f5e2d6f_4413b4c4",
        "filename": "chrome/browser/metrics/extensions_metrics_provider.cc",
        "patchSetId": 10
      },
      "lineNbr": 412,
      "author": {
        "id": 1001310
      },
      "writtenOn": "2017-09-22T20:30:10Z",
      "side": 1,
      "message": "nit: usually functions appear in the .cc in the same order as the .h",
      "revId": "5c6c728d108f8c12d0299a345588ce1dbdbe9f0f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6bd1870f_7b62b8f7",
        "filename": "chrome/browser/metrics/extensions_metrics_provider.cc",
        "patchSetId": 10
      },
      "lineNbr": 453,
      "author": {
        "id": 1161815
      },
      "writtenOn": "2017-09-23T00:55:40Z",
      "side": 1,
      "message": "nit: move out of loop. Also, isn\u0027t there a proto equivalent of vector for a repeated field, which we can directly return and use?",
      "range": {
        "startLine": 453,
        "startChar": 7,
        "endLine": 453,
        "endChar": 24
      },
      "revId": "5c6c728d108f8c12d0299a345588ce1dbdbe9f0f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5975830f_6fe6f410",
        "filename": "chrome/browser/metrics/extensions_metrics_provider.cc",
        "patchSetId": 10
      },
      "lineNbr": 458,
      "author": {
        "id": 1161815
      },
      "writtenOn": "2017-09-23T00:55:40Z",
      "side": 1,
      "message": "nit: Maybe change to-\nprefs-\u003eGetInstallTime(..) \u003e last_sample_time \nFind it easier to reason about.\n\nAlso, do we need \u003e\u003d?",
      "range": {
        "startLine": 458,
        "startChar": 19,
        "endLine": 458,
        "endChar": 33
      },
      "revId": "5c6c728d108f8c12d0299a345588ce1dbdbe9f0f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7ee5dbe2_50fff307",
        "filename": "chrome/browser/metrics/extensions_metrics_provider.cc",
        "patchSetId": 10
      },
      "lineNbr": 469,
      "author": {
        "id": 1161815
      },
      "writtenOn": "2017-09-23T00:55:40Z",
      "side": 1,
      "message": "nit: inline below.",
      "range": {
        "startLine": 469,
        "startChar": 30,
        "endLine": 469,
        "endChar": 35
      },
      "revId": "5c6c728d108f8c12d0299a345588ce1dbdbe9f0f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "27ba5584_61537beb",
        "filename": "chrome/browser/metrics/extensions_metrics_provider.cc",
        "patchSetId": 10
      },
      "lineNbr": 470,
      "author": {
        "id": 1161815
      },
      "writtenOn": "2017-09-23T00:55:40Z",
      "side": 1,
      "message": "nit: move before installs.reserve(..).",
      "range": {
        "startLine": 470,
        "startChar": 37,
        "endLine": 470,
        "endChar": 45
      },
      "revId": "5c6c728d108f8c12d0299a345588ce1dbdbe9f0f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9296b8d3_fc1753fe",
        "filename": "chrome/browser/metrics/extensions_metrics_provider.h",
        "patchSetId": 10
      },
      "lineNbr": 66,
      "author": {
        "id": 1161815
      },
      "writtenOn": "2017-09-23T00:55:40Z",
      "side": 1,
      "message": "These are only protected static to facilitate testing I believe? A comment along these lines would be helpful. \n\nCan\u0027t we just expose these as free functions? If not, can we expose ForTesting free functions, which call into the actual functions in an anon namespace.",
      "revId": "5c6c728d108f8c12d0299a345588ce1dbdbe9f0f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8afe4491_0585bcdb",
        "filename": "components/metrics/proto/extension_install.proto",
        "patchSetId": 10
      },
      "lineNbr": 18,
      "author": {
        "id": 1161815
      },
      "writtenOn": "2017-09-23T00:55:40Z",
      "side": 1,
      "message": "nit: Add comments recommending to keep this in sync with Manifest::Location, Manifest::Type etc. Here and elsewhere in the file.",
      "range": {
        "startLine": 18,
        "startChar": 7,
        "endLine": 18,
        "endChar": 11
      },
      "revId": "5c6c728d108f8c12d0299a345588ce1dbdbe9f0f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "48353e82_ba01f4d4",
        "filename": "components/metrics/proto/extension_install.proto",
        "patchSetId": 10
      },
      "lineNbr": 32,
      "author": {
        "id": 1161815
      },
      "writtenOn": "2017-09-23T00:55:40Z",
      "side": 1,
      "message": "nit: Rename to INVALID_LOCATION like in Manifest::Location?",
      "range": {
        "startLine": 32,
        "startChar": 4,
        "endLine": 32,
        "endChar": 20
      },
      "revId": "5c6c728d108f8c12d0299a345588ce1dbdbe9f0f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d70766e7_3e256531",
        "filename": "components/metrics/proto/extension_install.proto",
        "patchSetId": 10
      },
      "lineNbr": 137,
      "author": {
        "id": 1161815
      },
      "writtenOn": "2017-09-23T00:55:40Z",
      "side": 1,
      "message": "Add BLOCKED_BY_POLICY?",
      "range": {
        "startLine": 137,
        "startChar": 4,
        "endLine": 137,
        "endChar": 31
      },
      "revId": "5c6c728d108f8c12d0299a345588ce1dbdbe9f0f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "600b4322_eb3464c1",
        "filename": "components/metrics/proto/extension_install.proto",
        "patchSetId": 10
      },
      "lineNbr": 141,
      "author": {
        "id": 1161815
      },
      "writtenOn": "2017-09-23T00:55:40Z",
      "side": 1,
      "message": "Do we maintain the invariant that we don\u0027t have disabled extensions with just the DISABLE_NONE disabled reason?",
      "range": {
        "startLine": 140,
        "startChar": 53,
        "endLine": 141,
        "endChar": 31
      },
      "revId": "5c6c728d108f8c12d0299a345588ce1dbdbe9f0f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}