{
  "comments": [
    {
      "key": {
        "uuid": "a9957d32_ce189b4b",
        "filename": "chrome/browser/content_settings/tab_specific_content_settings.cc",
        "patchSetId": 7
      },
      "lineNbr": 514,
      "author": {
        "id": 1000602
      },
      "writtenOn": "2017-11-27T02:31:33Z",
      "side": 1,
      "message": "Do we need to worry about JS here, as above?",
      "revId": "83c37044bbe694125fcd6480e3ef3b9089dbe54e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8e699815_e4b045e0",
        "filename": "chrome/browser/content_settings/tab_specific_content_settings.cc",
        "patchSetId": 7
      },
      "lineNbr": 514,
      "author": {
        "id": 1000128
      },
      "writtenOn": "2017-11-27T03:41:14Z",
      "side": 1,
      "message": "I expect it\u0027s not needed. It was needed in the service worker case because a SW can be spawned without any JavaScript triggering it, e.g., a push notification or a navigation. But a Shared Worker requires a JavaScript context calling `new SharedWorker()`, so I believe if JavaScript is disabled then it\u0027s impossible to try to spawn the shared worker and get to AllowSharedWorker().\n\nIt\u0027s probably worth adding comments to ChromeContentBrowserClient::AllowServiceWorker and AllowSharedWorker explaining why only the Service Worker case needs to check for JavaScript.",
      "parentUuid": "a9957d32_ce189b4b",
      "revId": "83c37044bbe694125fcd6480e3ef3b9089dbe54e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7b9de85a_55c77802",
        "filename": "chrome/browser/content_settings/tab_specific_content_settings.cc",
        "patchSetId": 7
      },
      "lineNbr": 514,
      "author": {
        "id": 1176519
      },
      "writtenOn": "2017-11-27T10:59:17Z",
      "side": 1,
      "message": "correct. Without JS already running in that origin, there\u0027s no shared worker",
      "parentUuid": "8e699815_e4b045e0",
      "revId": "83c37044bbe694125fcd6480e3ef3b9089dbe54e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "974d105d_5d055d8c",
        "filename": "content/public/browser/content_browser_client.h",
        "patchSetId": 7
      },
      "lineNbr": 401,
      "author": {
        "id": 1110029
      },
      "writtenOn": "2017-11-27T12:43:10Z",
      "side": 1,
      "message": "depending on how the discussions around module workers and allowing cross-origin scripts as workers (but still running in the origin of the tab that creates the worker) turn out, having just the worker_url and main_frame_url might not be enough to make a decision? At least you\u0027d need the url or origin of the frame that created the worker as well I imagine? But then a lot of the other shared worker code will probably need updating if cross-origin scripts for module workers actually ends up being supported.",
      "revId": "83c37044bbe694125fcd6480e3ef3b9089dbe54e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}