{
  "comments": [
    {
      "key": {
        "uuid": "a7aba885_dbc165bf",
        "filename": "third_party/WebKit/Source/platform/graphics/OffscreenCanvasFrameDispatcherImpl.cpp",
        "patchSetId": 5
      },
      "lineNbr": 186,
      "author": {
        "id": 1115939
      },
      "writtenOn": "2017-10-30T16:35:53Z",
      "side": 1,
      "message": "This is not a sufficient condition. IsGpuCompositingEnabled() \u0026\u0026 IsTextureBacked() does not guarantee that |image| was not rendered with swiftshader.  If we try to mailbox a swiftshader texture, it will fail to composite (not sure if it crashes or draws blank, but it won\u0027t work). Today this scenario is highly unlikely, but soon swiftshader will support WebGL2.  When that happens, there will be a bunch of GPUs that are not blacklisted for GPU compositing which will fall back to swiftshader for WebGL2.",
      "range": {
        "startLine": 186,
        "startChar": 26,
        "endLine": 186,
        "endChar": 49
      },
      "revId": "10734b6e450261cc955dd0ac631f0225515e8a80",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6671ddec_ca7ecaf2",
        "filename": "third_party/WebKit/Source/platform/graphics/OffscreenCanvasFrameDispatcherImpl.cpp",
        "patchSetId": 5
      },
      "lineNbr": 186,
      "author": {
        "id": 1000887
      },
      "writtenOn": "2017-10-31T16:19:02Z",
      "side": 1,
      "message": "So it\u0027s also the case that gpu compositing is never enabled with swiftshader. I\u0027m not sure if this should rely on that though.. it\u0027s not something I ever see changing. wdyt?",
      "parentUuid": "a7aba885_dbc165bf",
      "range": {
        "startLine": 186,
        "startChar": 26,
        "endLine": 186,
        "endChar": 49
      },
      "revId": "10734b6e450261cc955dd0ac631f0225515e8a80",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "323258a9_83bec4ef",
        "filename": "third_party/WebKit/Source/platform/graphics/OffscreenCanvasFrameDispatcherImpl.cpp",
        "patchSetId": 5
      },
      "lineNbr": 186,
      "author": {
        "id": 1003154
      },
      "writtenOn": "2017-10-31T17:25:42Z",
      "side": 1,
      "message": "To be more accurate, we use SwiftShader in two ways. One is --use-gl\u003dswiftshader, which treats SwiftShader as a GL backend, so everything still goes down the GPU accelerated path, only it\u0027s super slow because it runs on a software renderer. In this path, Chrome in general isn\u0027t aware it\u0027s running on top of SwiftShader so it doesn\u0027t optimize around it.\n\nThe other way is when WebGL is blacklisted, or GPU is disabled, then we also turn on SwiftShader. In this path, Chrome is very aware of we turn on SwiftShader, so we turn off GPU compositing.\n\nConclusion: as of today, it\u0027s safe to assume we don\u0027t have to worry about SwiftShader rendered WebGL image running with GPU compositing.",
      "parentUuid": "6671ddec_ca7ecaf2",
      "range": {
        "startLine": 186,
        "startChar": 26,
        "endLine": 186,
        "endChar": 49
      },
      "revId": "10734b6e450261cc955dd0ac631f0225515e8a80",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b277ab33_cf830382",
        "filename": "third_party/WebKit/Source/platform/graphics/gpu/SharedGpuContext.cpp",
        "patchSetId": 5
      },
      "lineNbr": 82,
      "author": {
        "id": 1000887
      },
      "writtenOn": "2017-10-27T22:11:33Z",
      "side": 1,
      "message": "This looks like a thread race if the SharedGpuContext is being used on multiple threads atm.",
      "revId": "10734b6e450261cc955dd0ac631f0225515e8a80",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}