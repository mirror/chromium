{
  "comments": [
    {
      "key": {
        "uuid": "ea619ae2_680d02d1",
        "filename": "chrome/gpu/gpu_arc_video_decode_accelerator.cc",
        "patchSetId": 25
      },
      "lineNbr": 5,
      "author": {
        "id": 1003166
      },
      "writtenOn": "2017-11-29T17:18:19Z",
      "side": 1,
      "message": "#include \u003cutility\u003e\n\nis still missing",
      "range": {
        "startLine": 5,
        "startChar": 1,
        "endLine": 5,
        "endChar": 8
      },
      "revId": "c1c2d282ff22d22391a2484327259e3675b216ac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "74b69efc_48ad129d",
        "filename": "chrome/gpu/gpu_arc_video_decode_accelerator.cc",
        "patchSetId": 25
      },
      "lineNbr": 5,
      "author": {
        "id": 1196199
      },
      "writtenOn": "2017-11-30T12:07:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ea619ae2_680d02d1",
      "range": {
        "startLine": 5,
        "startChar": 1,
        "endLine": 5,
        "endChar": 8
      },
      "revId": "c1c2d282ff22d22391a2484327259e3675b216ac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "37792859_42043ee4",
        "filename": "chrome/gpu/gpu_arc_video_decode_accelerator.cc",
        "patchSetId": 25
      },
      "lineNbr": 43,
      "author": {
        "id": 1001027
      },
      "writtenOn": "2017-11-30T08:27:34Z",
      "side": 1,
      "message": "I think we shouldn\u0027t need the anonymous namespace to be in chromeos::arc?",
      "revId": "c1c2d282ff22d22391a2484327259e3675b216ac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6a6cf708_be33630a",
        "filename": "chrome/gpu/gpu_arc_video_decode_accelerator.cc",
        "patchSetId": 25
      },
      "lineNbr": 43,
      "author": {
        "id": 1196199
      },
      "writtenOn": "2017-11-30T12:07:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "37792859_42043ee4",
      "revId": "c1c2d282ff22d22391a2484327259e3675b216ac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "13451dad_6fcdacdc",
        "filename": "chrome/gpu/gpu_arc_video_decode_accelerator.cc",
        "patchSetId": 25
      },
      "lineNbr": 83,
      "author": {
        "id": 1001027
      },
      "writtenOn": "2017-11-30T08:27:34Z",
      "side": 1,
      "message": "I think we have to define both move constructor and operator\u003d for movable types.\nhttps://cs.chromium.org/chromium/src/mojo/edk/embedder/scoped_platform_handle.h may be a good example.",
      "revId": "c1c2d282ff22d22391a2484327259e3675b216ac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f4e297a4_54712cef",
        "filename": "chrome/gpu/gpu_arc_video_decode_accelerator.cc",
        "patchSetId": 25
      },
      "lineNbr": 83,
      "author": {
        "id": 1196199
      },
      "writtenOn": "2017-11-30T12:07:13Z",
      "side": 1,
      "message": "Hmm, there is no code of assignment of ScopedBitstreamBuffer in this code.\nSo it seems to not be required.",
      "parentUuid": "13451dad_6fcdacdc",
      "revId": "c1c2d282ff22d22391a2484327259e3675b216ac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "84d680ef_d5869694",
        "filename": "chrome/gpu/gpu_arc_video_decode_accelerator.cc",
        "patchSetId": 25
      },
      "lineNbr": 92,
      "author": {
        "id": 1001027
      },
      "writtenOn": "2017-11-30T08:27:34Z",
      "side": 1,
      "message": "BitstreamBuffer does not have a move constructor, so perhaps copy?",
      "range": {
        "startLine": 92,
        "startChar": 55,
        "endLine": 92,
        "endChar": 57
      },
      "revId": "c1c2d282ff22d22391a2484327259e3675b216ac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ce3cd315_b46c2f4a",
        "filename": "chrome/gpu/gpu_arc_video_decode_accelerator.cc",
        "patchSetId": 25
      },
      "lineNbr": 92,
      "author": {
        "id": 1196199
      },
      "writtenOn": "2017-11-30T12:07:13Z",
      "side": 1,
      "message": "BitstreamBuffer has automatically generated copy assignment constructor. cf.) http://en.cppreference.com/w/cpp/language/copy_assignment.\nSo \"bitstream_buffer_ \u003d std::move(bitstream_buffer)\" becomes copy assignment constructor.\nIn my understanding, even if a class doesn\u0027t have move constructor, we can use its rvalue reference as an argument.\nFurthermore, in this case, this is only called in l.515, and media::BitstreamBuffer is rvalue there. So it seems natural to me to use rvalue reference argument here.\nIt is worth noting that const lvalue reference argument is possible here, since rvalue reference can implicitly translated to const lvalue reference.",
      "parentUuid": "84d680ef_d5869694",
      "range": {
        "startLine": 92,
        "startChar": 55,
        "endLine": 92,
        "endChar": 57
      },
      "revId": "c1c2d282ff22d22391a2484327259e3675b216ac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "75f29f85_8f0b7dca",
        "filename": "chrome/gpu/gpu_arc_video_decode_accelerator.cc",
        "patchSetId": 25
      },
      "lineNbr": 92,
      "author": {
        "id": 1196199
      },
      "writtenOn": "2017-12-05T07:22:02Z",
      "side": 1,
      "message": "I would like the argument here is rvalue reference so that ScopedBitstreamBuffer takes the ownership of |bitstream_buffer|.\nBut, by some reasons (I don\u0027t know why to be honest), rvalue reference argument like this is prohibited in Google C++ coding style guide.\nTherefore I changed this to const lvalue reference.",
      "parentUuid": "ce3cd315_b46c2f4a",
      "range": {
        "startLine": 92,
        "startChar": 55,
        "endLine": 92,
        "endChar": 57
      },
      "revId": "c1c2d282ff22d22391a2484327259e3675b216ac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b7d2c77e_2ac588fd",
        "filename": "chrome/gpu/gpu_arc_video_decode_accelerator.cc",
        "patchSetId": 25
      },
      "lineNbr": 92,
      "author": {
        "id": 1003166
      },
      "writtenOn": "2017-12-05T17:11:47Z",
      "side": 1,
      "message": "You can add a (maybe default?) move constructor to media::BitstreamBuffer. That way you can define this as\n\n ScopedBitstreamBuffer(media::BitstreamBuffer bitstream_buffer)\n   : bitstream_buffer_(std::move(bitstream_buffer)) {}\n\nThat would create zero copies :D (although the move constructor will be called twice: the price of flexibility). The compiler should be able to optimize most of that away, though.",
      "parentUuid": "75f29f85_8f0b7dca",
      "range": {
        "startLine": 92,
        "startChar": 55,
        "endLine": 92,
        "endChar": 57
      },
      "revId": "c1c2d282ff22d22391a2484327259e3675b216ac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bdd6072c_b265921d",
        "filename": "chrome/gpu/gpu_arc_video_decode_accelerator.cc",
        "patchSetId": 25
      },
      "lineNbr": 96,
      "author": {
        "id": 1001027
      },
      "writtenOn": "2017-11-30T08:27:34Z",
      "side": 1,
      "message": "Perhaps WARN_UNUSED_RESULT?",
      "range": {
        "startLine": 96,
        "startChar": 35,
        "endLine": 96,
        "endChar": 36
      },
      "revId": "c1c2d282ff22d22391a2484327259e3675b216ac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "def169d4_88c75308",
        "filename": "chrome/gpu/gpu_arc_video_decode_accelerator.cc",
        "patchSetId": 25
      },
      "lineNbr": 96,
      "author": {
        "id": 1196199
      },
      "writtenOn": "2017-11-30T12:07:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "bdd6072c_b265921d",
      "range": {
        "startLine": 96,
        "startChar": 35,
        "endLine": 96,
        "endChar": 36
      },
      "revId": "c1c2d282ff22d22391a2484327259e3675b216ac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "17cc3bc3_0ab0482b",
        "filename": "chrome/gpu/gpu_arc_video_decode_accelerator.cc",
        "patchSetId": 25
      },
      "lineNbr": 187,
      "author": {
        "id": 1001027
      },
      "writtenOn": "2017-11-30T08:27:34Z",
      "side": 1,
      "message": "Please add a comment explaining why this is a no-op.",
      "range": {
        "startLine": 187,
        "startChar": 2,
        "endLine": 187,
        "endChar": 12
      },
      "revId": "c1c2d282ff22d22391a2484327259e3675b216ac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b6ad5bf0_d9f73c2d",
        "filename": "chrome/gpu/gpu_arc_video_decode_accelerator.cc",
        "patchSetId": 25
      },
      "lineNbr": 187,
      "author": {
        "id": 1196199
      },
      "writtenOn": "2017-11-30T12:07:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "17cc3bc3_0ab0482b",
      "range": {
        "startLine": 187,
        "startChar": 2,
        "endLine": 187,
        "endChar": 12
      },
      "revId": "c1c2d282ff22d22391a2484327259e3675b216ac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "474ac78f_54ecac65",
        "filename": "chrome/gpu/gpu_arc_video_decode_accelerator.cc",
        "patchSetId": 25
      },
      "lineNbr": 516,
      "author": {
        "id": 1001027
      },
      "writtenOn": "2017-11-30T08:27:34Z",
      "side": 1,
      "message": "Perhaps consider removing, as SharedMemoryHandle does not have a move constructor?",
      "range": {
        "startLine": 516,
        "startChar": 47,
        "endLine": 516,
        "endChar": 57
      },
      "revId": "c1c2d282ff22d22391a2484327259e3675b216ac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4933bb9e_e411d1af",
        "filename": "chrome/gpu/gpu_arc_video_decode_accelerator.cc",
        "patchSetId": 25
      },
      "lineNbr": 516,
      "author": {
        "id": 1196199
      },
      "writtenOn": "2017-11-30T12:07:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "474ac78f_54ecac65",
      "range": {
        "startLine": 516,
        "startChar": 47,
        "endLine": 516,
        "endChar": 57
      },
      "revId": "c1c2d282ff22d22391a2484327259e3675b216ac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "69391d30_f59eb3a1",
        "filename": "chrome/gpu/gpu_arc_video_decode_accelerator.cc",
        "patchSetId": 25
      },
      "lineNbr": 538,
      "author": {
        "id": 1001027
      },
      "writtenOn": "2017-11-30T08:27:34Z",
      "side": 1,
      "message": "Could we iterate on int32_t to avoid casting from uint to int?",
      "range": {
        "startLine": 538,
        "startChar": 29,
        "endLine": 538,
        "endChar": 49
      },
      "revId": "c1c2d282ff22d22391a2484327259e3675b216ac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fff85a53_8f72a92a",
        "filename": "chrome/gpu/gpu_arc_video_decode_accelerator.cc",
        "patchSetId": 25
      },
      "lineNbr": 538,
      "author": {
        "id": 1196199
      },
      "writtenOn": "2017-11-30T12:07:13Z",
      "side": 1,
      "message": "That is exclusive.\nIf |id| is int32_t, a compailer warns the comparison in l.538, id \u003c count (int32_t vs. uint32_t).\nPerhaps, we should define private noname enum in GAVDA and moved the variables between l.46 and l.56 there? The type problem is resolved by that.",
      "parentUuid": "69391d30_f59eb3a1",
      "range": {
        "startLine": 538,
        "startChar": 29,
        "endLine": 538,
        "endChar": 49
      },
      "revId": "c1c2d282ff22d22391a2484327259e3675b216ac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6e00dfa2_eb522adb",
        "filename": "chrome/gpu/gpu_arc_video_decode_accelerator.cc",
        "patchSetId": 25
      },
      "lineNbr": 552,
      "author": {
        "id": 1001027
      },
      "writtenOn": "2017-11-30T08:27:34Z",
      "side": 1,
      "message": "I think OS_LINUX may be sufficient in this case?",
      "range": {
        "startLine": 552,
        "startChar": 4,
        "endLine": 552,
        "endChar": 23
      },
      "revId": "c1c2d282ff22d22391a2484327259e3675b216ac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "38e064a1_f4f0bbf8",
        "filename": "chrome/gpu/gpu_arc_video_decode_accelerator.cc",
        "patchSetId": 25
      },
      "lineNbr": 552,
      "author": {
        "id": 1196199
      },
      "writtenOn": "2017-11-30T12:07:13Z",
      "side": 1,
      "message": "That is correct.\nhttps://cs.chromium.org/chromium/src/ui/ozone/ozone.gni?q\u003dozone.gni\u0026sq\u003dpackage:chromium\u0026dr\u0026l\u003d66",
      "parentUuid": "6e00dfa2_eb522adb",
      "range": {
        "startLine": 552,
        "startChar": 4,
        "endLine": 552,
        "endChar": 23
      },
      "revId": "c1c2d282ff22d22391a2484327259e3675b216ac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f215e30c_89342c13",
        "filename": "chrome/gpu/gpu_arc_video_decode_accelerator.cc",
        "patchSetId": 25
      },
      "lineNbr": 561,
      "author": {
        "id": 1001027
      },
      "writtenOn": "2017-11-30T08:27:34Z",
      "side": 1,
      "message": "Could we use protected_output_handles_.size() ? Or, alternatively, we could not clear and resize it in AssignPictureBuffers in non-secure mode.",
      "range": {
        "startLine": 561,
        "startChar": 48,
        "endLine": 561,
        "endChar": 68
      },
      "revId": "c1c2d282ff22d22391a2484327259e3675b216ac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2607d443_a11adaa0",
        "filename": "chrome/gpu/gpu_arc_video_decode_accelerator.cc",
        "patchSetId": 25
      },
      "lineNbr": 561,
      "author": {
        "id": 1196199
      },
      "writtenOn": "2017-11-30T12:07:13Z",
      "side": 1,
      "message": "Well, it seems natural to resize protected_output_handles_ in AssignPictureBuffers only if secure mdoe.",
      "parentUuid": "f215e30c_89342c13",
      "range": {
        "startLine": 561,
        "startChar": 48,
        "endLine": 561,
        "endChar": 68
      },
      "revId": "c1c2d282ff22d22391a2484327259e3675b216ac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}