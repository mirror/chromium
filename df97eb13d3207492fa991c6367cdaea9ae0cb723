{
  "comments": [
    {
      "key": {
        "uuid": "d0df78aa_e4035b37",
        "filename": "chrome_elf/whitelist/whitelist_file.cc",
        "patchSetId": 7
      },
      "lineNbr": 227,
      "author": {
        "id": 1178124
      },
      "writtenOn": "2018-01-25T00:30:27Z",
      "side": 1,
      "message": "nit: delete is well-defined for nullptr, so remove this check and just blindly delete and zero below.",
      "revId": "df97eb13d3207492fa991c6367cdaea9ae0cb723",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3860a649_53e585de",
        "filename": "chrome_elf/whitelist/whitelist_file.cc",
        "patchSetId": 7
      },
      "lineNbr": 227,
      "author": {
        "id": 1122084
      },
      "writtenOn": "2018-01-25T20:23:46Z",
      "side": 1,
      "message": "Done.  Wasn\u0027t sure about that - good to know, thanks!",
      "parentUuid": "d0df78aa_e4035b37",
      "revId": "df97eb13d3207492fa991c6367cdaea9ae0cb723",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "617e0b57_7e0008d4",
        "filename": "chrome_elf/whitelist/whitelist_file_unittest.cc",
        "patchSetId": 7
      },
      "lineNbr": 173,
      "author": {
        "id": 1178124
      },
      "writtenOn": "2018-01-25T00:30:27Z",
      "side": 1,
      "message": "should this be in the test fixture\u0027s dtor or TearDown override?",
      "revId": "df97eb13d3207492fa991c6367cdaea9ae0cb723",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ea8c811e_be627638",
        "filename": "chrome_elf/whitelist/whitelist_file_unittest.cc",
        "patchSetId": 7
      },
      "lineNbr": 173,
      "author": {
        "id": 1122084
      },
      "writtenOn": "2018-01-25T20:23:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "617e0b57_7e0008d4",
      "revId": "df97eb13d3207492fa991c6367cdaea9ae0cb723",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "919e7b28_b719905f",
        "filename": "chrome_elf/whitelist/whitelist_log.cc",
        "patchSetId": 7
      },
      "lineNbr": 244,
      "author": {
        "id": 1178124
      },
      "writtenOn": "2018-01-25T00:30:27Z",
      "side": 1,
      "message": "should passing in nullptr for |event_handle| not close the hold handle (e.g., act as a \"unregister my old event\" call)?",
      "range": {
        "startLine": 244,
        "startChar": 36,
        "endLine": 244,
        "endChar": 48
      },
      "revId": "df97eb13d3207492fa991c6367cdaea9ae0cb723",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4caa6bd2_15a842a9",
        "filename": "chrome_elf/whitelist/whitelist_log.cc",
        "patchSetId": 7
      },
      "lineNbr": 244,
      "author": {
        "id": 1122084
      },
      "writtenOn": "2018-01-25T20:23:46Z",
      "side": 1,
      "message": "Yup, that\u0027s what it does.  If nullptr is passed in, the DuplicateHandle bit is bypassed, and if there is an existing handle held in g_notification_event, it is closed below (before overwriting the global with |temp| \u003d\u003d nullptr).",
      "parentUuid": "919e7b28_b719905f",
      "range": {
        "startLine": 244,
        "startChar": 36,
        "endLine": 244,
        "endChar": 48
      },
      "revId": "df97eb13d3207492fa991c6367cdaea9ae0cb723",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a8bd12a2_746429ba",
        "filename": "chrome_elf/whitelist/whitelist_log.cc",
        "patchSetId": 7
      },
      "lineNbr": 244,
      "author": {
        "id": 1178124
      },
      "writtenOn": "2018-01-26T00:22:06Z",
      "side": 1,
      "message": "oh, duh. ;-)",
      "parentUuid": "4caa6bd2_15a842a9",
      "range": {
        "startLine": 244,
        "startChar": 36,
        "endLine": 244,
        "endChar": 48
      },
      "revId": "df97eb13d3207492fa991c6367cdaea9ae0cb723",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8e1c3c1a_83e2cb2b",
        "filename": "chrome_elf/whitelist/whitelist_log.cc",
        "patchSetId": 7
      },
      "lineNbr": 248,
      "author": {
        "id": 1178124
      },
      "writtenOn": "2018-01-25T00:30:27Z",
      "side": 1,
      "message": "nit: false -\u003e FALSE since it\u0027s a win32 BOOL",
      "range": {
        "startLine": 248,
        "startChar": 64,
        "endLine": 248,
        "endChar": 69
      },
      "revId": "df97eb13d3207492fa991c6367cdaea9ae0cb723",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e0f4c630_91aba397",
        "filename": "chrome_elf/whitelist/whitelist_log.cc",
        "patchSetId": 7
      },
      "lineNbr": 248,
      "author": {
        "id": 1178124
      },
      "writtenOn": "2018-01-25T00:30:27Z",
      "side": 1,
      "message": "DUPLICATE_SAME_ACCESS",
      "range": {
        "startLine": 248,
        "startChar": 71,
        "endLine": 248,
        "endChar": 72
      },
      "revId": "df97eb13d3207492fa991c6367cdaea9ae0cb723",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "169c0762_15c362d0",
        "filename": "chrome_elf/whitelist/whitelist_log.cc",
        "patchSetId": 7
      },
      "lineNbr": 248,
      "author": {
        "id": 1178124
      },
      "writtenOn": "2018-01-25T00:30:27Z",
      "side": 1,
      "message": "0",
      "range": {
        "startLine": 248,
        "startChar": 41,
        "endLine": 248,
        "endChar": 62
      },
      "revId": "df97eb13d3207492fa991c6367cdaea9ae0cb723",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "aecf5211_e540d742",
        "filename": "chrome_elf/whitelist/whitelist_log.cc",
        "patchSetId": 7
      },
      "lineNbr": 248,
      "author": {
        "id": 1122084
      },
      "writtenOn": "2018-01-25T20:23:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "169c0762_15c362d0",
      "range": {
        "startLine": 248,
        "startChar": 41,
        "endLine": 248,
        "endChar": 62
      },
      "revId": "df97eb13d3207492fa991c6367cdaea9ae0cb723",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9c4efaa7_5b2bf8e4",
        "filename": "chrome_elf/whitelist/whitelist_log.cc",
        "patchSetId": 7
      },
      "lineNbr": 248,
      "author": {
        "id": 1122084
      },
      "writtenOn": "2018-01-25T20:23:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e0f4c630_91aba397",
      "range": {
        "startLine": 248,
        "startChar": 71,
        "endLine": 248,
        "endChar": 72
      },
      "revId": "df97eb13d3207492fa991c6367cdaea9ae0cb723",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8d2c7070_5f4b7563",
        "filename": "chrome_elf/whitelist/whitelist_log.cc",
        "patchSetId": 7
      },
      "lineNbr": 248,
      "author": {
        "id": 1122084
      },
      "writtenOn": "2018-01-25T20:23:46Z",
      "side": 1,
      "message": "Sure.  I\u0027ve received conflicting code review feedback on calls into system APIs.  I agree that FALSE is not the same as false.  I\u0027m often told to pass in \"nullptr\" instead of \"NULL\" (even though system APIs are documented to take in \"NULL\").  What is your full take on this Greg?",
      "parentUuid": "8e1c3c1a_83e2cb2b",
      "range": {
        "startLine": 248,
        "startChar": 64,
        "endLine": 248,
        "endChar": 69
      },
      "revId": "df97eb13d3207492fa991c6367cdaea9ae0cb723",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "89f9564a_96c8b0a8",
        "filename": "chrome_elf/whitelist/whitelist_log.cc",
        "patchSetId": 7
      },
      "lineNbr": 248,
      "author": {
        "id": 1178124
      },
      "writtenOn": "2018-01-26T00:22:06Z",
      "side": 1,
      "message": "i\u0027m all for NULL -\u003e nullptr, but i tend to use TRUE/FALSE when it comes to BOOL. maybe i\u0027m inconsistent... it\u0027s not a big deal either way, i suppose.",
      "parentUuid": "8d2c7070_5f4b7563",
      "range": {
        "startLine": 248,
        "startChar": 64,
        "endLine": 248,
        "endChar": 69
      },
      "revId": "df97eb13d3207492fa991c6367cdaea9ae0cb723",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d241b8fd_a4b73394",
        "filename": "chrome_elf/whitelist/whitelist_log.cc",
        "patchSetId": 7
      },
      "lineNbr": 248,
      "author": {
        "id": 1122084
      },
      "writtenOn": "2018-01-26T21:18:11Z",
      "side": 1,
      "message": "Thanks!  I\u0027m generally fine with either - I just always forget what is expected in our code.  :)",
      "parentUuid": "89f9564a_96c8b0a8",
      "range": {
        "startLine": 248,
        "startChar": 64,
        "endLine": 248,
        "endChar": 69
      },
      "revId": "df97eb13d3207492fa991c6367cdaea9ae0cb723",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1de93ab3_f5499bb7",
        "filename": "chrome_elf/whitelist/whitelist_log.cc",
        "patchSetId": 7
      },
      "lineNbr": 254,
      "author": {
        "id": 1178124
      },
      "writtenOn": "2018-01-25T00:30:27Z",
      "side": 1,
      "message": "move this out of the if{} body",
      "revId": "df97eb13d3207492fa991c6367cdaea9ae0cb723",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8b9eb306_790160c4",
        "filename": "chrome_elf/whitelist/whitelist_log.cc",
        "patchSetId": 7
      },
      "lineNbr": 254,
      "author": {
        "id": 1122084
      },
      "writtenOn": "2018-01-25T20:23:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1de93ab3_f5499bb7",
      "revId": "df97eb13d3207492fa991c6367cdaea9ae0cb723",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5b7da060_ed2299f3",
        "filename": "chrome_elf/whitelist/whitelist_log_unittest.cc",
        "patchSetId": 7
      },
      "lineNbr": 183,
      "author": {
        "id": 1178124
      },
      "writtenOn": "2018-01-25T00:30:27Z",
      "side": 1,
      "message": "how did this test pass given the bug on line 254 of whitelist_log.cc?",
      "revId": "df97eb13d3207492fa991c6367cdaea9ae0cb723",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "70ac8b18_5e7e8430",
        "filename": "chrome_elf/whitelist/whitelist_log_unittest.cc",
        "patchSetId": 7
      },
      "lineNbr": 183,
      "author": {
        "id": 1122084
      },
      "writtenOn": "2018-01-25T20:23:46Z",
      "side": 1,
      "message": "Good call.  It was passing because of how I\u0027m handling a wait timeout in NotificationHandler in the test.  It was still doing a DrainLog... even though the event wasn\u0027t being fired.  FAIL.\n\nI\u0027ve changed it that so there can\u0027t be a success if there\u0027s a timeout in NotificationHandler, waiting on the event.  There shouldn\u0027t be any race condition with a reasonable timeout used - if the event is working.",
      "parentUuid": "5b7da060_ed2299f3",
      "revId": "df97eb13d3207492fa991c6367cdaea9ae0cb723",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0d3cccdf_c86166da",
        "filename": "chrome_elf/whitelist/whitelist_packed_format.h",
        "patchSetId": 7
      },
      "lineNbr": 140,
      "author": {
        "id": 1178124
      },
      "writtenOn": "2018-01-25T00:30:27Z",
      "side": 1,
      "message": "why does this take an event rather than a fn ptr? we\u0027re in-proc, after all. is the difficulty that it could be invoked on any thread at any time, so posting a task from the callback wouldn\u0027t be doable?",
      "revId": "df97eb13d3207492fa991c6367cdaea9ae0cb723",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2625b98c_88f9c174",
        "filename": "chrome_elf/whitelist/whitelist_packed_format.h",
        "patchSetId": 7
      },
      "lineNbr": 140,
      "author": {
        "id": 1122084
      },
      "writtenOn": "2018-01-25T20:23:46Z",
      "side": 1,
      "message": "1. Safety related to shutdown races (or just bad code up in chrome.dll).  Eg:  chrome.dll will shutdown before the elf.  Using an event handle that is duplicated prevents any mayhem if I fire the event after chrome.dll closes its handle.  The OS ensures my elf handle is valid regardless of nobody else listening.  A function pointer, on the other hand, is bad news if the address becomes invalid for any reason.\n\nand just as important\n\n2. The cross-module heap boundary pushed me/us to define the DrainLog API to require the caller to manage and pass in their own buffer, which then simply receives some data written into it.  (Like win system apis.)  There\u0027s no point (efficiency) in adding a function call into chrome.dll... just to then need that registered module to manage its own resources and call DrainLog back in elf.  I also don\u0027t want to deal with blocking on a function call outside of the elf.... and certainly not in a hook of NtMapViewofSection.  IMO, much cleaner, safer and efficient to just commit to triggering a notification event when log(s) are available.  Note that I did consider a function pointer early on.",
      "parentUuid": "0d3cccdf_c86166da",
      "revId": "df97eb13d3207492fa991c6367cdaea9ae0cb723",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}