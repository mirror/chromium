{
  "comments": [
    {
      "key": {
        "uuid": "5e893384_67586fa6",
        "filename": "third_party/WebKit/Source/core/timing/PerformanceMark.h",
        "patchSetId": 16
      },
      "lineNbr": 52,
      "author": {
        "id": 1002854
      },
      "writtenOn": "2018-01-15T22:58:45Z",
      "side": 1,
      "message": "1. This function is way too big to be inline in a header.\n2. ScriptValue::V8ValueFor already implements this; any reason not to use that implementation?",
      "revId": "3e459b31297692b16721fb489eb370fdb8534629",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "55562130_499dead7",
        "filename": "third_party/WebKit/Source/core/timing/PerformanceMark.h",
        "patchSetId": 16
      },
      "lineNbr": 52,
      "author": {
        "id": 1002854
      },
      "writtenOn": "2018-01-15T23:06:33Z",
      "side": 1,
      "message": "Regarding 2, I see CustomEvent was modified to work the same way, probably for TraceWrapper reasons. We should probably clean this up, but it\u0027s understandable if you don\u0027t want to do that in this CL, then.",
      "parentUuid": "5e893384_67586fa6",
      "revId": "3e459b31297692b16721fb489eb370fdb8534629",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ade1b6d0_9e0fa017",
        "filename": "third_party/WebKit/Source/core/timing/PerformanceMark.h",
        "patchSetId": 16
      },
      "lineNbr": 52,
      "author": {
        "id": 1215729
      },
      "writtenOn": "2018-01-16T22:32:57Z",
      "side": 1,
      "message": "Done 1.",
      "parentUuid": "55562130_499dead7",
      "revId": "3e459b31297692b16721fb489eb370fdb8534629",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "56fcd497_0b969cda",
        "filename": "third_party/WebKit/Source/core/timing/PerformanceMark.h",
        "patchSetId": 16
      },
      "lineNbr": 52,
      "author": {
        "id": 1215729
      },
      "writtenOn": "2018-01-18T15:58:56Z",
      "side": 1,
      "message": "I will clean up 2 in https://bugs.chromium.org/p/chromium/issues/detail?id\u003d803478",
      "parentUuid": "ade1b6d0_9e0fa017",
      "revId": "3e459b31297692b16721fb489eb370fdb8534629",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c5a78ef5_3851209e",
        "filename": "third_party/WebKit/Source/core/timing/PerformanceMark.h",
        "patchSetId": 16
      },
      "lineNbr": 80,
      "author": {
        "id": 1002854
      },
      "writtenOn": "2018-01-16T14:47:37Z",
      "side": 1,
      "message": "no need to assign twice: remove one \"world_ \u003d\"",
      "revId": "3e459b31297692b16721fb489eb370fdb8534629",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "453923d6_9c07459c",
        "filename": "third_party/WebKit/Source/core/timing/PerformanceMark.h",
        "patchSetId": 16
      },
      "lineNbr": 80,
      "author": {
        "id": 1215729
      },
      "writtenOn": "2018-01-16T22:32:57Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c5a78ef5_3851209e",
      "revId": "3e459b31297692b16721fb489eb370fdb8534629",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a3cd5bc3_78c7c2f7",
        "filename": "third_party/WebKit/Source/core/timing/PerformanceMark.h",
        "patchSetId": 16
      },
      "lineNbr": 81,
      "author": {
        "id": 1002854
      },
      "writtenOn": "2018-01-16T14:47:37Z",
      "side": 1,
      "message": "super-nit: it might be easier to just give it a default value of null in the IDL, like CustomEventInit; then it will always be present and have a value, and you shouldn\u0027t need to handle empty, null and undefined separately",
      "revId": "3e459b31297692b16721fb489eb370fdb8534629",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "017354c3_987c8762",
        "filename": "third_party/WebKit/Source/core/timing/PerformanceMark.h",
        "patchSetId": 16
      },
      "lineNbr": 81,
      "author": {
        "id": 1116050
      },
      "writtenOn": "2018-01-16T16:02:14Z",
      "side": 1,
      "message": "You still need to handle null \u0026 undefined, right? Users could explicitly pass null or undefined? Or does undefined get replaced with the default value?",
      "parentUuid": "a3cd5bc3_78c7c2f7",
      "revId": "3e459b31297692b16721fb489eb370fdb8534629",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eaf53ce4_e6d583ec",
        "filename": "third_party/WebKit/Source/core/timing/PerformanceMark.h",
        "patchSetId": 16
      },
      "lineNbr": 81,
      "author": {
        "id": 1002854
      },
      "writtenOn": "2018-01-16T16:07:35Z",
      "side": 1,
      "message": "Per spec explicitly passing \"undefined\" ought to be treated as though the value were absent (i.e., use the default value).\n\nQuoth https://heycam.github.io/webidl/#es-dictionary:\n\n  4. Otherwise, if value is undefined but member has a default value, then:\n    1. Let idlValue be memberâ€™s default value.\n    2. Set the dictionary member on dict with key name key to the value idlValue. This dictionary member is considered to be present.\n\n(in no case is undefined as the value of a dictionary member passed on to the value conversion step; that only happens in step 3 if value is not undefined)",
      "parentUuid": "017354c3_987c8762",
      "revId": "3e459b31297692b16721fb489eb370fdb8534629",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f4606003_a24b90a5",
        "filename": "third_party/WebKit/Source/core/timing/PerformanceMark.h",
        "patchSetId": 16
      },
      "lineNbr": 81,
      "author": {
        "id": 1116050
      },
      "writtenOn": "2018-01-16T16:12:29Z",
      "side": 1,
      "message": "Thanks, makes sense.",
      "parentUuid": "eaf53ce4_e6d583ec",
      "revId": "3e459b31297692b16721fb489eb370fdb8534629",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "89445b2c_5c237bb5",
        "filename": "third_party/WebKit/Source/core/timing/PerformanceMark.h",
        "patchSetId": 16
      },
      "lineNbr": 81,
      "author": {
        "id": 1215729
      },
      "writtenOn": "2018-01-16T22:32:57Z",
      "side": 1,
      "message": "Yes, by setting default value we can reduce the conditions to just \"if (detail.IsNull())\"\n\nBut my concern is, when other components uses performanceMark, they may pass an arbitrary |detail| to performanceMark constructor, such as PerformanceObserverTest. Checking all three conditions seem more flexible in its usages?",
      "parentUuid": "f4606003_a24b90a5",
      "revId": "3e459b31297692b16721fb489eb370fdb8534629",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "13493722_3272d3b6",
        "filename": "third_party/WebKit/Source/core/timing/PerformanceMark.h",
        "patchSetId": 16
      },
      "lineNbr": 81,
      "author": {
        "id": 1002854
      },
      "writtenOn": "2018-01-16T23:19:31Z",
      "side": 1,
      "message": "OK, if you\u0027d like. (I\u0027d have been inclined to restrict those components to passing values we consider valid, but I don\u0027t feel strongly.)",
      "parentUuid": "89445b2c_5c237bb5",
      "revId": "3e459b31297692b16721fb489eb370fdb8534629",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "69a9d3b1_ef5fa5f6",
        "filename": "third_party/WebKit/Source/core/timing/PerformanceObserverTest.cpp",
        "patchSetId": 16
      },
      "lineNbr": 68,
      "author": {
        "id": 1001470
      },
      "writtenOn": "2018-01-16T01:28:21Z",
      "side": 1,
      "message": "nit: empty_value",
      "range": {
        "startLine": 68,
        "startChar": 14,
        "endLine": 68,
        "endChar": 24
      },
      "revId": "3e459b31297692b16721fb489eb370fdb8534629",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fc7c802f_42521af5",
        "filename": "third_party/WebKit/Source/core/timing/PerformanceObserverTest.cpp",
        "patchSetId": 16
      },
      "lineNbr": 68,
      "author": {
        "id": 1215729
      },
      "writtenOn": "2018-01-16T22:32:57Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "69a9d3b1_ef5fa5f6",
      "range": {
        "startLine": 68,
        "startChar": 14,
        "endLine": 68,
        "endChar": 24
      },
      "revId": "3e459b31297692b16721fb489eb370fdb8534629",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}