{
  "comments": [
    {
      "key": {
        "uuid": "03e72ccf_fdeae88d",
        "filename": "extensions/renderer/dispatcher.cc",
        "patchSetId": 1
      },
      "lineNbr": 694,
      "author": {
        "id": 1115745
      },
      "writtenOn": "2017-11-14T15:57:08Z",
      "side": 1,
      "message": "What\u0027s the plan to remove this?",
      "revId": "172967dd9bc231e53071af954126274ae7fbe310",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6a4f20c5_ce9ff465",
        "filename": "extensions/renderer/dispatcher.cc",
        "patchSetId": 1
      },
      "lineNbr": 694,
      "author": {
        "id": 1104639
      },
      "writtenOn": "2017-11-14T18:35:53Z",
      "side": 1,
      "message": "This CL is part of the work to remove it (and also all the other IDR_MOJO_.*_JS resources except the newly added IDR_MOJO_BINDINGS_JS).\n\nOther than that, I will need a few more CLs:\n- one CL to convert keep_alive.mojom;\n- one CL to convert mojoPrivate extensions API and its usage by the media router extension;\n- then I can remove the old JS bindings from the extensions system.",
      "parentUuid": "03e72ccf_fdeae88d",
      "revId": "172967dd9bc231e53071af954126274ae7fbe310",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "68785292_5ba335ee",
        "filename": "extensions/renderer/dispatcher.cc",
        "patchSetId": 1
      },
      "lineNbr": 694,
      "author": {
        "id": 1115745
      },
      "writtenOn": "2017-11-14T22:06:42Z",
      "side": 1,
      "message": "Thanks for the info!",
      "parentUuid": "6a4f20c5_ce9ff465",
      "revId": "172967dd9bc231e53071af954126274ae7fbe310",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f4a214d6_2d6d78f7",
        "filename": "extensions/renderer/resource_bundle_source_map.cc",
        "patchSetId": 1
      },
      "lineNbr": 65,
      "author": {
        "id": 1115745
      },
      "writtenOn": "2017-11-14T15:57:08Z",
      "side": 1,
      "message": "What\u0027s the performance overhead of this like?",
      "revId": "172967dd9bc231e53071af954126274ae7fbe310",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cb3919cd_1a4794ea",
        "filename": "extensions/renderer/resource_bundle_source_map.cc",
        "patchSetId": 1
      },
      "lineNbr": 65,
      "author": {
        "id": 1104639
      },
      "writtenOn": "2017-11-14T18:35:53Z",
      "side": 1,
      "message": "I wrote a testing CL to call ResourceBundleSourceMap::GetSource() for mojo_bindings.js, which is the only compressed resource and its uncompressed size is 159.2KB.\n\nThe testing CL is: https://chromium-review.googlesource.com/c/chromium/src/+/769163\n\nWith a Linux release build on my Z840, the test completed about 1600 GetSource() for mojo_bindings.js per second.\n\nI think that is acceptable, given that:\n- mojo_bindings.js is only used by two private extensions API: mimeHandlerPrivate and mojoPrivate.\n- Eventually we are going to move away from JS bindings for extensions.\n- WebUI is doing exactly the same thing of uncompressing mojo_bindings.js.\n\n\nWDYT? Thanks!",
      "parentUuid": "f4a214d6_2d6d78f7",
      "revId": "172967dd9bc231e53071af954126274ae7fbe310",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0ebe7934_94988aa4",
        "filename": "extensions/renderer/resource_bundle_source_map.cc",
        "patchSetId": 1
      },
      "lineNbr": 65,
      "author": {
        "id": 1115745
      },
      "writtenOn": "2017-11-14T22:06:42Z",
      "side": 1,
      "message": "It\u0027s not bad, but I wonder if we can make it better. :) (mostly because I\u0027m dubious of measurements on a z840 - it\u0027s hard to say what that would mean on a less beefy machine)  What if we add a `std::unique_ptr\u003cstd::string\u003e cached` field to ResourceBundleSourceMap::ResourceInfo, and then here, starting at line 58:\n\nResourceInfo\u0026 info \u003d resource_iter-\u003esecond;\nif (info.gzipped) {\n  if (!info.cached) {\n    info.cached.reset(new std::string());\n    uint32_t size \u003d compression::GetUncompressedSize(resource);\n    info.cached-\u003eresize(size);\n    if (!compression::GzipUncompress(resource, info.cached.get()))\n      return v8::Local\u003cv8::String\u003e();\n  }\n  resource \u003d base::StringPiece(info.cached);\n}\n\nreturn ConvertString(isolate, resource);\n\nWDYT?  Then we only perform the conversion once per process, and we can reuse the same string (even for v8 conversions, since the storage is constant).",
      "parentUuid": "cb3919cd_1a4794ea",
      "revId": "172967dd9bc231e53071af954126274ae7fbe310",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ac5acd55_9de5260d",
        "filename": "extensions/renderer/resource_bundle_source_map.h",
        "patchSetId": 1
      },
      "lineNbr": 30,
      "author": {
        "id": 1002808
      },
      "writtenOn": "2017-11-14T07:05:29Z",
      "side": 1,
      "message": "nit: Is it too much churn to update all these similar signatures to take a const Dispatcher::JsResourceInfo\u0026 instead of unrolled args?",
      "revId": "172967dd9bc231e53071af954126274ae7fbe310",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "44029682_b65d6d7b",
        "filename": "extensions/renderer/resource_bundle_source_map.h",
        "patchSetId": 1
      },
      "lineNbr": 30,
      "author": {
        "id": 1104639
      },
      "writtenOn": "2017-11-14T07:26:48Z",
      "side": 1,
      "message": "It is not too much work to make the change. However, most of the places don\u0027t need to store or pass JS resource info around as a single object. For example:\nhttps://cs.chromium.org/chromium/src/chrome/renderer/extensions/chrome_extensions_dispatcher_delegate.cc?rcl\u003d0dbac2beb9d5800b882314387d7fd449f14d4a2c\u0026l\u003d168\n\nThe typical usage is:\n source_map-\u003eRegisterSource(\"automation\", IDR_AUTOMATION_CUSTOM_BINDINGS_JS);\n\nWith a const JsResourceInfo\u0026 parameter, this line should be changed to:\n source_map-\u003eRegisterSource({\"automation\", IDR_AUTOMATION_CUSTOM_BINDINGS_JS});\n\nIt doesn\u0027t seem to be more clear or concise. Moreover, |source_map| internally doesn\u0027t use this JsResourceInfo type either. So I personally feel that it is okay to leave it as it is.\n\n(Dispatcher needs to use this JsResourceInfo type because it needs to pass info of multiple resources in a vector.)\n\nWDYT? Thanks!",
      "parentUuid": "ac5acd55_9de5260d",
      "revId": "172967dd9bc231e53071af954126274ae7fbe310",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}