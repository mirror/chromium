{
  "comments": [
    {
      "key": {
        "uuid": "554b6d7b_d0b3c5cd",
        "filename": "components/printing/common/print_messages.h",
        "patchSetId": 5
      },
      "lineNbr": 246,
      "author": {
        "id": 1001934
      },
      "writtenOn": "2017-09-20T08:08:11Z",
      "side": 1,
      "message": "What are we going to do with these params?\n\nThe doc_type param above is sent from the browser to the renderer. Does that mean this value is always going to be the same as the doc_type param?\n\nIf yes, then the browser already knows what to expect from this value. Does that mean this and the params added below are going to be read by the browser just to ensure correctness?\n\nIf no, when would the browser specify one type, and get a different type back from the renderer?",
      "revId": "84ef9e121f212f56d55218ec9cad9f8f154899bf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1f18b344_ae108ae3",
        "filename": "components/printing/common/print_messages.h",
        "patchSetId": 5
      },
      "lineNbr": 246,
      "author": {
        "id": 1002198
      },
      "writtenOn": "2017-09-20T18:40:33Z",
      "side": 1,
      "message": "Sorry, this becomes a bit confusing. The answer is no.\ndoc_type is the doc type regular html content should be printed in.\nprinted_doc_type is the actual printed out doc type.\n\ndoc_type is controlled by our feature flags, so it actually passes this feature to renderer.\nOnce oopif support is default, this field can go away.\n\nprinted_doc_type is returned by renderer. It is useful only for OOPIF support. For example, for regular web page, we return skia picture (or equivalent). For PDF file in a pdf plugin, we still return in pdf format. Browser doesn\u0027t always know about this if the content is in an iframe. So I am going to use this field to see whether the returned content needs to be sent for compositing/conversion.",
      "parentUuid": "554b6d7b_d0b3c5cd",
      "revId": "84ef9e121f212f56d55218ec9cad9f8f154899bf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3ad84376_5c44d963",
        "filename": "components/printing/common/print_messages.h",
        "patchSetId": 5
      },
      "lineNbr": 246,
      "author": {
        "id": 1001934
      },
      "writtenOn": "2017-09-20T22:56:20Z",
      "side": 1,
      "message": "Just to make sure we are in sync here, does this look correct?\n\nThe possible RenderFrame that we will printing are:\na) Webpage, no frames.\nb) Webpage, with sub-frames. (Some of the frames can even be PDFs.)\nc) PDF.\n\nThe end goal with OOPIF is:\na) Send SKP.\nb) Send multiple SKPs, one per frame. Sub-frame containing PDFs will send SKPs with an image of the viewable portion of the PDF in the frame. The print compositor can\u0027t mix SKPs with PDFs.\nc) Send PDF.",
      "parentUuid": "1f18b344_ae108ae3",
      "revId": "84ef9e121f212f56d55218ec9cad9f8f154899bf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3786558a_cbb33143",
        "filename": "components/printing/common/print_messages.h",
        "patchSetId": 5
      },
      "lineNbr": 246,
      "author": {
        "id": 1002198
      },
      "writtenOn": "2017-09-25T16:04:58Z",
      "side": 1,
      "message": "a) and c) are correct. b) is not decided yet since the final data structure for representing this is still in work. I think I may find another sleeker way to solve this. Let\u0027s hold this for now. thanks.",
      "parentUuid": "3ad84376_5c44d963",
      "revId": "84ef9e121f212f56d55218ec9cad9f8f154899bf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}