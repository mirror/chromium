{
  "comments": [
    {
      "key": {
        "uuid": "23c5f455_2458483e",
        "filename": "ui/base/models/list_selection_model.cc",
        "patchSetId": 12
      },
      "lineNbr": 145,
      "author": {
        "id": 1000763
      },
      "writtenOn": "2017-09-14T21:03:58Z",
      "side": 1,
      "message": "Why did you decide to make these early out? As you saw, the previous code DCHECKd.",
      "range": {
        "startLine": 145,
        "startChar": 6,
        "endLine": 145,
        "endChar": 16
      },
      "revId": "8a817ea155c0f9f7719d233f5c1ecc252a8daf47",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "91b47a78_460293ff",
        "filename": "ui/base/models/list_selection_model.cc",
        "patchSetId": 12
      },
      "lineNbr": 145,
      "author": {
        "id": 1002169
      },
      "writtenOn": "2017-09-18T21:17:02Z",
      "side": 1,
      "message": "Even though the old code DCHECKed, it was still correct in the (to \u003d\u003d from) case, and that\u0027s what I was trying to preserve: I was originally worried that, in a release build, we\u0027d lose sortedness due to a +\u003d length operation in the (to \u003d\u003d from) case. However, I was wrong about that: this implementation actually works fine without special-casing.\n\nI\u0027ve put the DCHECKs back (and deleted the relevant unit test coverage). Or, if you\u0027d like, I could remove the DCHECK (maybe hoist it to TabStripModel::MoveWebContentsAtImpl), and add more comprehensive unittests of these cases?",
      "parentUuid": "23c5f455_2458483e",
      "range": {
        "startLine": 145,
        "startChar": 6,
        "endLine": 145,
        "endChar": 16
      },
      "revId": "8a817ea155c0f9f7719d233f5c1ecc252a8daf47",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "940f3ff8_937e589d",
        "filename": "ui/base/models/list_selection_model.cc",
        "patchSetId": 12
      },
      "lineNbr": 145,
      "author": {
        "id": 1000763
      },
      "writtenOn": "2017-09-18T23:36:29Z",
      "side": 1,
      "message": "I\u0027m fine with what you have now.",
      "parentUuid": "91b47a78_460293ff",
      "range": {
        "startLine": 145,
        "startChar": 6,
        "endLine": 145,
        "endChar": 16
      },
      "revId": "8a817ea155c0f9f7719d233f5c1ecc252a8daf47",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e766b809_25ab1721",
        "filename": "ui/base/models/list_selection_model.cc",
        "patchSetId": 12
      },
      "lineNbr": 183,
      "author": {
        "id": 1002169
      },
      "writtenOn": "2017-09-14T18:23:39Z",
      "side": 1,
      "message": "In response to the feedback of \"This is most definitely not obvious\", I\u0027ve made the following changes:\n\n - Renamed TransformIndex to MoveToLowerIndexImpl.\n - Expanded MoveToLowerIndexImpl with comments.\n - Inlined the MoveToLowerIndex call that was inside the loop, which allows a better explaination for how things work.\n - Added the DCHECKs and comments about pivot_value, including a better description of why the std::rotate() call restores sortedness.",
      "range": {
        "startLine": 183,
        "startChar": 3,
        "endLine": 183,
        "endChar": 0
      },
      "revId": "8a817ea155c0f9f7719d233f5c1ecc252a8daf47",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "af8b4b65_53e727ff",
        "filename": "ui/base/models/list_selection_model.cc",
        "patchSetId": 12
      },
      "lineNbr": 183,
      "author": {
        "id": 1000763
      },
      "writtenOn": "2017-09-14T21:03:58Z",
      "side": 1,
      "message": "Thanks! I think this is much easier to read.",
      "parentUuid": "e766b809_25ab1721",
      "range": {
        "startLine": 183,
        "startChar": 3,
        "endLine": 183,
        "endChar": 0
      },
      "revId": "8a817ea155c0f9f7719d233f5c1ecc252a8daf47",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ae7d9473_f8dd7ef0",
        "filename": "ui/base/models/list_selection_model_unittest.cc",
        "patchSetId": 12
      },
      "lineNbr": 173,
      "author": {
        "id": 1000763
      },
      "writtenOn": "2017-09-14T21:03:58Z",
      "side": 1,
      "message": "Nice test coverage!",
      "range": {
        "startLine": 148,
        "startChar": 3,
        "endLine": 173,
        "endChar": 76
      },
      "revId": "8a817ea155c0f9f7719d233f5c1ecc252a8daf47",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c202391c_03a37971",
        "filename": "ui/base/models/table_model_observer.h",
        "patchSetId": 12
      },
      "lineNbr": 28,
      "author": {
        "id": 1000763
      },
      "writtenOn": "2017-09-14T21:03:58Z",
      "side": 1,
      "message": "has been",
      "range": {
        "startLine": 28,
        "startChar": 34,
        "endLine": 28,
        "endChar": 42
      },
      "revId": "8a817ea155c0f9f7719d233f5c1ecc252a8daf47",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2c92695e_51e6a82f",
        "filename": "ui/base/models/table_model_observer.h",
        "patchSetId": 12
      },
      "lineNbr": 28,
      "author": {
        "id": 1002169
      },
      "writtenOn": "2017-09-18T21:17:02Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c202391c_03a37971",
      "range": {
        "startLine": 28,
        "startChar": 34,
        "endLine": 28,
        "endChar": 42
      },
      "revId": "8a817ea155c0f9f7719d233f5c1ecc252a8daf47",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}