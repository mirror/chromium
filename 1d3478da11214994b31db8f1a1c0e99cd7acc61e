{
  "comments": [
    {
      "key": {
        "uuid": "18f4d823_fe87daac",
        "filename": "components/viz/client/client_layer_tree_frame_sink.cc",
        "patchSetId": 14
      },
      "lineNbr": 124,
      "author": {
        "id": 1000246
      },
      "writtenOn": "2017-07-25T18:15:12Z",
      "side": 1,
      "message": "This is debugging code? It should be replaced with a TODO(gklassen) perhaps pending the updating of SubmitCompositorFrame?\n\nAlso: will ClientLayerTreeFrameSink ever exist after the window* in HitTestDataProvider is destroyed?",
      "revId": "1d3478da11214994b31db8f1a1c0e99cd7acc61e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1fe6ea86_d8884a71",
        "filename": "components/viz/client/client_layer_tree_frame_sink.cc",
        "patchSetId": 14
      },
      "lineNbr": 124,
      "author": {
        "id": 1002647
      },
      "writtenOn": "2017-07-26T21:01:29Z",
      "side": 1,
      "message": "\u003e This is debugging code?\nYes, it will go away and get replaced with a TODO. IT helps verify things work as expected at this stage.",
      "parentUuid": "18f4d823_fe87daac",
      "revId": "1d3478da11214994b31db8f1a1c0e99cd7acc61e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dc6b2656_658f87bb",
        "filename": "components/viz/client/client_layer_tree_frame_sink.cc",
        "patchSetId": 14
      },
      "lineNbr": 124,
      "author": {
        "id": 1002647
      },
      "writtenOn": "2017-07-28T01:11:27Z",
      "side": 1,
      "message": "\u003e This is debugging code? It should be replaced with a TODO(gklassen)\nDone.",
      "parentUuid": "1fe6ea86_d8884a71",
      "revId": "1d3478da11214994b31db8f1a1c0e99cd7acc61e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fa21b1b7_6e26b452",
        "filename": "components/viz/client/client_layer_tree_frame_sink.h",
        "patchSetId": 14
      },
      "lineNbr": 18,
      "author": {
        "id": 1000246
      },
      "writtenOn": "2017-07-25T18:15:12Z",
      "side": 1,
      "message": "AFAIK: aura may depend on viz/client but viz client may not depend on aura.",
      "revId": "1d3478da11214994b31db8f1a1c0e99cd7acc61e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a45c59a3_a3049b91",
        "filename": "components/viz/client/client_layer_tree_frame_sink.h",
        "patchSetId": 14
      },
      "lineNbr": 18,
      "author": {
        "id": 1002647
      },
      "writtenOn": "2017-07-26T21:01:29Z",
      "side": 1,
      "message": "I guess there is no harm exposing a const accessor to the hit-test data provider.",
      "parentUuid": "fa21b1b7_6e26b452",
      "revId": "1d3478da11214994b31db8f1a1c0e99cd7acc61e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "283c369c_220cf3ca",
        "filename": "services/viz/hit_test/public/interfaces/hit_test_region_list.mojom",
        "patchSetId": 14
      },
      "lineNbr": 36,
      "author": {
        "id": 1000246
      },
      "writtenOn": "2017-07-25T18:15:12Z",
      "side": 1,
      "message": "This could be optional? How do we validate this when deserializing? What are the consequences of it presence? What happens if a renderer guesses this? One of the points of only shipping surface ids is that they are unguessable. This is conceivably guessable.",
      "revId": "1d3478da11214994b31db8f1a1c0e99cd7acc61e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "37675094_750a4b12",
        "filename": "services/viz/hit_test/public/interfaces/hit_test_region_list.mojom",
        "patchSetId": 14
      },
      "lineNbr": 36,
      "author": {
        "id": 1002647
      },
      "writtenOn": "2017-07-26T21:01:29Z",
      "side": 1,
      "message": "Would you not need a combination of window ID and surface ID and if so the guessability of the combination is same as guessability of the most secure of its parts?",
      "parentUuid": "283c369c_220cf3ca",
      "revId": "1d3478da11214994b31db8f1a1c0e99cd7acc61e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e29f20f2_6b541952",
        "filename": "services/viz/hit_test/public/interfaces/hit_test_region_list.mojom",
        "patchSetId": 14
      },
      "lineNbr": 36,
      "author": {
        "id": 1000246
      },
      "writtenOn": "2017-07-26T22:18:59Z",
      "side": 1,
      "message": "My intuition is no but we should ask security team. In particular: you need to validate that the window ID is correct for the surface ID (in a later CL?) so might as well look up the window ID based on the surface ID yes? And so don\u0027t need this here at all?\n\nConceivably I\u0027m not comprehending your intent with this field.",
      "parentUuid": "37675094_750a4b12",
      "revId": "1d3478da11214994b31db8f1a1c0e99cd7acc61e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d046c23d_f5ff4390",
        "filename": "services/viz/hit_test/public/interfaces/hit_test_region_list.mojom",
        "patchSetId": 14
      },
      "lineNbr": 36,
      "author": {
        "id": 1002647
      },
      "writtenOn": "2017-07-27T15:56:57Z",
      "side": 1,
      "message": "Yes, we\u0027ll chat offline.",
      "parentUuid": "e29f20f2_6b541952",
      "revId": "1d3478da11214994b31db8f1a1c0e99cd7acc61e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4fddf958_2b840cbd",
        "filename": "services/viz/hit_test/public/interfaces/hit_test_region_list.mojom",
        "patchSetId": 14
      },
      "lineNbr": 36,
      "author": {
        "id": 1002647
      },
      "writtenOn": "2017-07-28T01:11:27Z",
      "side": 1,
      "message": "So the proposal is to use surface ID when aura::Window is submitting its own compositor frames and to use frame_sink_id for local windows. This way we should not need window_id field.",
      "parentUuid": "d046c23d_f5ff4390",
      "revId": "1d3478da11214994b31db8f1a1c0e99cd7acc61e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6b61fed9_81180306",
        "filename": "ui/aura/mus/hit_test_data_provider_mus.cc",
        "patchSetId": 14
      },
      "lineNbr": 50,
      "author": {
        "id": 1000246
      },
      "writtenOn": "2017-07-25T18:15:12Z",
      "side": 1,
      "message": "Shouldn\u0027t some windows correspond to the client region? In which case, they must have kHitTestChildSurface and the child surface id set so that events go to the renderer?",
      "revId": "1d3478da11214994b31db8f1a1c0e99cd7acc61e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7f48423e_0ea57eaf",
        "filename": "ui/aura/mus/hit_test_data_provider_mus.cc",
        "patchSetId": 14
      },
      "lineNbr": 50,
      "author": {
        "id": 1002647
      },
      "writtenOn": "2017-07-26T21:01:29Z",
      "side": 1,
      "message": "Using presence of WindowPortMus::client_surface_embedder() as a signal to use kHitTestChildSurface. Does this seem right?",
      "parentUuid": "6b61fed9_81180306",
      "revId": "1d3478da11214994b31db8f1a1c0e99cd7acc61e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "31409e98_5114525a",
        "filename": "ui/aura/mus/hit_test_data_provider_mus.cc",
        "patchSetId": 14
      },
      "lineNbr": 50,
      "author": {
        "id": 1000246
      },
      "writtenOn": "2017-07-26T22:18:59Z",
      "side": 1,
      "message": "I think so.",
      "parentUuid": "7f48423e_0ea57eaf",
      "revId": "1d3478da11214994b31db8f1a1c0e99cd7acc61e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "86a11930_41b4a7b4",
        "filename": "ui/aura/mus/hit_test_data_provider_mus.cc",
        "patchSetId": 14
      },
      "lineNbr": 50,
      "author": {
        "id": 1002647
      },
      "writtenOn": "2017-07-27T15:56:57Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "31409e98_5114525a",
      "revId": "1d3478da11214994b31db8f1a1c0e99cd7acc61e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}