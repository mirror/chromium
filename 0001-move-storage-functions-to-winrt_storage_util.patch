From 1c1bdd42d17d629782166527f21b353422218b6f Mon Sep 17 00:00:00 2001
From: "junwei.fu@intel.com" <junwei.fu@intel.com>
Date: Wed, 18 Oct 2017 13:51:02 +0800
Subject: [PATCH] move storage functions to winrt_storage_util

---
 base/BUILD.gn                           |  3 ++
 base/win/core_winrt_util.cc             | 51 -----------------------
 base/win/core_winrt_util.h              | 10 -----
 base/win/core_winrt_util_unittest.cc    | 31 --------------
 base/win/winrt_storage_util.cc          | 74 +++++++++++++++++++++++++++++++++
 base/win/winrt_storage_util.h           | 34 +++++++++++++++
 base/win/winrt_storage_util_unittest.cc | 42 +++++++++++++++++++
 media/midi/midi_manager_winrt.cc        | 15 +++----
 8 files changed, 158 insertions(+), 102 deletions(-)
 create mode 100644 base/win/winrt_storage_util.cc
 create mode 100644 base/win/winrt_storage_util.h
 create mode 100644 base/win/winrt_storage_util_unittest.cc

diff --git a/base/BUILD.gn b/base/BUILD.gn
index aa113eb..4ac1372 100644
--- a/base/BUILD.gn
+++ b/base/BUILD.gn
@@ -1080,6 +1080,8 @@ jumbo_component("base") {
     "win/win_util.h",
     "win/windows_version.cc",
     "win/windows_version.h",
+    "win/winrt_storage_util.cc",
+    "win/winrt_storage_util.h",
     "win/wrapped_window_proc.cc",
     "win/wrapped_window_proc.h",
   ]
@@ -2285,6 +2287,7 @@ test("base_unittests") {
     "win/wait_chain_unittest.cc",
     "win/win_util_unittest.cc",
     "win/windows_version_unittest.cc",
+    "win/winrt_storage_util_unittest.cc",
     "win/wrapped_window_proc_unittest.cc",
   ]
 
diff --git a/base/win/core_winrt_util.cc b/base/win/core_winrt_util.cc
index f3d7ede..9ae2d35 100644
--- a/base/win/core_winrt_util.cc
+++ b/base/win/core_winrt_util.cc
@@ -4,13 +4,6 @@
 
 #include "base/win/core_winrt_util.h"
 
-#include <robuffer.h>
-#include <string.h>
-#include <wrl/client.h>
-
-#include "base/strings/string_util.h"
-#include "base/win/scoped_hstring.h"
-
 namespace {
 
 void* LoadComBaseFunction(const char* function_name) {
@@ -86,49 +79,5 @@ HRESULT RoActivateInstance(HSTRING class_id, IInspectable** instance) {
   return activate_instance_func(class_id, instance);
 }
 
-HRESULT GetPointerToBufferData(ABI::Windows::Storage::Streams::IBuffer* buffer,
-                               uint8_t** out) {
-  *out = nullptr;
-
-  Microsoft::WRL::ComPtr<Windows::Storage::Streams::IBufferByteAccess>
-      buffer_byte_access;
-  HRESULT hr = buffer->QueryInterface(IID_PPV_ARGS(&buffer_byte_access));
-  if (FAILED(hr))
-    return hr;
-
-  // Lifetime of the pointing buffer is controlled by the buffer object.
-  return buffer_byte_access->Buffer(out);
-}
-
-HRESULT CreateIBufferFromData(
-    const uint8_t* data,
-    UINT32 length,
-    ABI::Windows::Storage::Streams::IBuffer** buffer) {
-  Microsoft::WRL::ComPtr<ABI::Windows::Storage::Streams::IBufferFactory>
-      buffer_factory;
-  HRESULT hr = base::win::GetActivationFactory<
-      ABI::Windows::Storage::Streams::IBufferFactory,
-      RuntimeClass_Windows_Storage_Streams_Buffer>(&buffer_factory);
-  if (FAILED(hr))
-    return hr;
-
-  hr = buffer_factory->Create(length, buffer);
-  if (FAILED(hr))
-    return hr;
-
-  hr = (*buffer)->put_Length(length);
-  if (FAILED(hr))
-    return hr;
-
-  uint8_t* p_buffer_data;
-  hr = GetPointerToBufferData(*buffer, &p_buffer_data);
-  if (FAILED(hr))
-    return hr;
-
-  memcpy(p_buffer_data, data, length);
-
-  return S_OK;
-}
-
 }  // namespace win
 }  // namespace base
diff --git a/base/win/core_winrt_util.h b/base/win/core_winrt_util.h
index 651af5b..c86aed6 100644
--- a/base/win/core_winrt_util.h
+++ b/base/win/core_winrt_util.h
@@ -9,7 +9,6 @@
 #include <inspectable.h>
 #include <roapi.h>
 #include <windef.h>
-#include <windows.storage.streams.h>
 
 #include "base/base_export.h"
 #include "base/strings/string16.h"
@@ -38,15 +37,6 @@ BASE_EXPORT HRESULT RoGetActivationFactory(HSTRING class_id,
 BASE_EXPORT HRESULT RoActivateInstance(HSTRING class_id,
                                        IInspectable** instance);
 
-BASE_EXPORT HRESULT
-GetPointerToBufferData(ABI::Windows::Storage::Streams::IBuffer* buffer,
-                       uint8_t** out);
-
-BASE_EXPORT HRESULT
-CreateIBufferFromData(const uint8_t* data,
-                      UINT32 length,
-                      ABI::Windows::Storage::Streams::IBuffer** buffer);
-
 // Retrieves an activation factory for the type specified.
 template <typename InterfaceType, char16 const* runtime_class_id>
 HRESULT GetActivationFactory(InterfaceType** factory) {
diff --git a/base/win/core_winrt_util_unittest.cc b/base/win/core_winrt_util_unittest.cc
index 873a047..11d08b8 100644
--- a/base/win/core_winrt_util_unittest.cc
+++ b/base/win/core_winrt_util_unittest.cc
@@ -4,23 +4,14 @@
 
 #include "base/win/core_winrt_util.h"
 
-#include <string.h>
-#include <wrl/client.h>
-
-#include "base/strings/string_util.h"
 #include "base/win/com_init_util.h"
 #include "base/win/scoped_com_initializer.h"
-#include "base/win/scoped_hstring.h"
 #include "base/win/windows_version.h"
 #include "testing/gtest/include/gtest/gtest.h"
 
 namespace base {
 namespace win {
 
-namespace {
-const std::vector<uint8_t> KTestBufferData = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
-}
-
 TEST(CoreWinrtUtilTest, PreloadFunctions) {
   if (GetVersion() < VERSION_WIN8)
     EXPECT_FALSE(ResolveCoreWinRTDelayload());
@@ -39,27 +30,5 @@ TEST(CoreWinrtUtilTest, RoInitializeAndUninitialize) {
   AssertComApartmentType(ComApartmentType::NONE);
 }
 
-TEST(CoreWinrtUtilTest, CreateBufferFromData) {
-  ScopedCOMInitializer com_initializer(ScopedCOMInitializer::kMTA);
-
-  if (GetVersion() < VERSION_WIN8) {
-    EXPECT_FALSE(ScopedHString::ResolveCoreWinRTStringDelayload());
-    return;
-  }
-
-  EXPECT_TRUE(ScopedHString::ResolveCoreWinRTStringDelayload());
-
-  Microsoft::WRL::ComPtr<ABI::Windows::Storage::Streams::IBuffer> buffer;
-  ASSERT_HRESULT_SUCCEEDED(CreateIBufferFromData(
-      KTestBufferData.data(), KTestBufferData.size(), buffer.GetAddressOf()));
-  ASSERT_TRUE(buffer);
-
-  uint8_t* p_buffer_data;
-  ASSERT_HRESULT_SUCCEEDED(
-      GetPointerToBufferData(buffer.Get(), &p_buffer_data));
-  EXPECT_EQ(
-      0, memcmp(p_buffer_data, KTestBufferData.data(), KTestBufferData.size()));
-}
-
 }  // namespace win
 }  // namespace base
diff --git a/base/win/winrt_storage_util.cc b/base/win/winrt_storage_util.cc
new file mode 100644
index 0000000..6688a00
--- /dev/null
+++ b/base/win/winrt_storage_util.cc
@@ -0,0 +1,74 @@
+// Copyright 2017 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#include "base/win/winrt_storage_util.h"
+
+#include <robuffer.h>
+#include <string.h>
+#include <wrl/client.h>
+
+#include "base/strings/string_util.h"
+#include "base/win/core_winrt_util.h"
+#include "base/win/scoped_hstring.h"
+
+namespace base {
+namespace win {
+
+using IBuffer = ABI::Windows::Storage::Streams::IBuffer;
+
+HRESULT GetPointerToBufferData(Microsoft::WRL::ComPtr<IBuffer> buffer,
+                               uint8_t** out,
+                               UINT32* length) {
+  *out = nullptr;
+
+  Microsoft::WRL::ComPtr<Windows::Storage::Streams::IBufferByteAccess>
+      buffer_byte_access;
+  HRESULT hr = buffer->QueryInterface(IID_PPV_ARGS(&buffer_byte_access));
+  if (FAILED(hr))
+    return hr;
+
+  hr = buffer->get_Length(length);
+  if (FAILED(hr))
+    return hr;
+
+  // Lifetime of the pointing buffer is controlled by the buffer object.
+  return buffer_byte_access->Buffer(out);
+}
+
+HRESULT CreateIBufferFromData(const uint8_t* data,
+                              UINT32 length,
+                              Microsoft::WRL::ComPtr<IBuffer>* buffer) {
+  *buffer = nullptr;
+
+  Microsoft::WRL::ComPtr<ABI::Windows::Storage::Streams::IBufferFactory>
+      buffer_factory;
+  HRESULT hr = base::win::GetActivationFactory<
+      ABI::Windows::Storage::Streams::IBufferFactory,
+      RuntimeClass_Windows_Storage_Streams_Buffer>(&buffer_factory);
+  if (FAILED(hr))
+    return hr;
+
+  Microsoft::WRL::ComPtr<IBuffer> internal_buffer;
+  hr = buffer_factory->Create(length, internal_buffer.GetAddressOf());
+  if (FAILED(hr))
+    return hr;
+
+  hr = internal_buffer->put_Length(length);
+  if (FAILED(hr))
+    return hr;
+
+  uint8_t* p_buffer_data;
+  hr = GetPointerToBufferData(internal_buffer, &p_buffer_data, &length);
+  if (FAILED(hr))
+    return hr;
+
+  memcpy(p_buffer_data, data, length);
+
+  *buffer = std::move(internal_buffer);
+
+  return S_OK;
+}
+
+}  // namespace win
+}  // namespace base
diff --git a/base/win/winrt_storage_util.h b/base/win/winrt_storage_util.h
new file mode 100644
index 0000000..0061dbf
--- /dev/null
+++ b/base/win/winrt_storage_util.h
@@ -0,0 +1,34 @@
+// Copyright 2017 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#ifndef BASE_WIN_WINRT_STORAGE_UTIL_H_
+#define BASE_WIN_WINRT_STORAGE_UTIL_H_
+
+#include <stdint.h>
+#include <windows.storage.streams.h>
+#include <wrl/client.h>
+
+#include "base/base_export.h"
+
+namespace base {
+namespace win {
+
+// Gets an array of bytes in the |buffer|, |out| represents a array of
+// bytes used by byte stream read and write.
+BASE_EXPORT HRESULT GetPointerToBufferData(
+    Microsoft::WRL::ComPtr<ABI::Windows::Storage::Streams::IBuffer> buffer,
+    uint8_t** out,
+    UINT32* length);
+
+// Creates stream |buffer| from |data| that represents a array of bytes
+// and the |length| of bytes.
+BASE_EXPORT HRESULT CreateIBufferFromData(
+    const uint8_t* data,
+    UINT32 length,
+    Microsoft::WRL::ComPtr<ABI::Windows::Storage::Streams::IBuffer>* buffer);
+
+}  // namespace win
+}  // namespace base
+
+#endif  // BASE_WIN_WINRT_STORAGE_UTIL_H_
diff --git a/base/win/winrt_storage_util_unittest.cc b/base/win/winrt_storage_util_unittest.cc
new file mode 100644
index 0000000..530ab23
--- /dev/null
+++ b/base/win/winrt_storage_util_unittest.cc
@@ -0,0 +1,42 @@
+// Copyright 2017 The Chromium Authors. All rights reserved.
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#include "base/win/winrt_storage_util.h"
+
+#include <string.h>
+#include <wrl/client.h>
+
+#include "base/strings/string_util.h"
+#include "base/win/core_winrt_util.h"
+#include "base/win/scoped_com_initializer.h"
+#include "base/win/scoped_hstring.h"
+#include "testing/gtest/include/gtest/gtest.h"
+
+namespace base {
+namespace win {
+
+TEST(WinrtStorageUtilTest, CreateBufferFromData) {
+  ScopedCOMInitializer com_initializer(ScopedCOMInitializer::kMTA);
+
+  if (!ResolveCoreWinRTDelayload() ||
+      !ScopedHString::ResolveCoreWinRTStringDelayload()) {
+    return;
+  }
+
+  const std::vector<uint8_t> data = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
+  Microsoft::WRL::ComPtr<ABI::Windows::Storage::Streams::IBuffer> buffer;
+  ASSERT_HRESULT_SUCCEEDED(
+      CreateIBufferFromData(data.data(), data.size(), &buffer));
+
+  uint8_t* p_buffer_data;
+  uint32_t length;
+  ASSERT_HRESULT_SUCCEEDED(
+      GetPointerToBufferData(buffer.Get(), &p_buffer_data, &length));
+
+  ASSERT_EQ(data.size(), length);
+  EXPECT_EQ(0, memcmp(p_buffer_data, data.data(), data.size()));
+}
+
+}  // namespace win
+}  // namespace base
diff --git a/media/midi/midi_manager_winrt.cc b/media/midi/midi_manager_winrt.cc
index 453c2d6..c6a65d5 100644
--- a/media/midi/midi_manager_winrt.cc
+++ b/media/midi/midi_manager_winrt.cc
@@ -32,6 +32,7 @@
 #include "base/timer/timer.h"
 #include "base/win/core_winrt_util.h"
 #include "base/win/scoped_hstring.h"
+#include "base/win/winrt_storage_util.h"
 #include "media/midi/midi_scheduler.h"
 
 namespace midi {
@@ -668,17 +669,11 @@ class MidiManagerWinrt::MidiInPortManager final
               }
 
               uint8_t* p_buffer_data = nullptr;
-              hr = base::win::GetPointerToBufferData(buffer.Get(),
-                                                     &p_buffer_data);
-              if (FAILED(hr))
-                return hr;
-
               uint32_t data_length = 0;
-              hr = buffer->get_Length(&data_length);
-              if (FAILED(hr)) {
-                VLOG(1) << "get_Length failed: " << PrintHr(hr);
+              hr = base::win::GetPointerToBufferData(
+                  buffer.Get(), &p_buffer_data, &data_length);
+              if (FAILED(hr))
                 return hr;
-              }
 
               std::vector<uint8_t> data(p_buffer_data,
                                         p_buffer_data + data_length);
@@ -869,7 +864,7 @@ void MidiManagerWinrt::SendOnComThread(uint32_t port_index,
 
   WRL::ComPtr<IBuffer> buffer;
   HRESULT hr = base::win::CreateIBufferFromData(
-      data.data(), static_cast<UINT32>(data.size()), buffer.GetAddressOf());
+      data.data(), static_cast<UINT32>(data.size()), &buffer);
   if (FAILED(hr)) {
     VLOG(1) << "CreateIBufferFromData failed: " << PrintHr(hr);
     return;
-- 
1.9.1

