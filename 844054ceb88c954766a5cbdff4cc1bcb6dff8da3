{
  "comments": [
    {
      "key": {
        "uuid": "fc4bb66f_0ee9d46c",
        "filename": "third_party/leveldatabase/env_chromium.cc",
        "patchSetId": 3
      },
      "lineNbr": 51,
      "author": {
        "id": 1163599
      },
      "writtenOn": "2017-09-09T02:35:36Z",
      "side": 1,
      "message": "I am fairly sure this is a semaphore [1]. How about using that name? \n\nFWIW, codesearching didn\u0027t find a semaphore in //base, but did fine one in V8. Their semaphore only has blocking acquire, so it doesn\u0027t seem applicable here.\n\n[1] https://en.wikipedia.org/wiki/Semaphore_(programming)",
      "revId": "844054ceb88c954766a5cbdff4cc1bcb6dff8da3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "edf434ad_bde514a0",
        "filename": "third_party/leveldatabase/env_chromium.cc",
        "patchSetId": 3
      },
      "lineNbr": 51,
      "author": {
        "id": 1115884
      },
      "writtenOn": "2017-09-12T17:10:35Z",
      "side": 1,
      "message": "Agreed. I used Limiter since that\u0027s what Sanjay called it in leveldb, but do a gree with you.",
      "parentUuid": "fc4bb66f_0ee9d46c",
      "revId": "844054ceb88c954766a5cbdff4cc1bcb6dff8da3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "17d55b98_4ea8fbb8",
        "filename": "third_party/leveldatabase/env_chromium.cc",
        "patchSetId": 3
      },
      "lineNbr": 51,
      "author": {
        "id": 1163599
      },
      "writtenOn": "2017-09-12T19:51:25Z",
      "side": 1,
      "message": "Thank you for explaining!",
      "parentUuid": "edf434ad_bde514a0",
      "revId": "844054ceb88c954766a5cbdff4cc1bcb6dff8da3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dbb2b5ca_87e92557",
        "filename": "third_party/leveldatabase/env_chromium.cc",
        "patchSetId": 3
      },
      "lineNbr": 58,
      "author": {
        "id": 1163599
      },
      "writtenOn": "2017-09-09T02:35:36Z",
      "side": 1,
      "message": "nit: The pattern I\u0027ve seen before for this kind of method suggests \"TryAquire\".",
      "revId": "844054ceb88c954766a5cbdff4cc1bcb6dff8da3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1d1eef52_d68ac049",
        "filename": "third_party/leveldatabase/env_chromium.cc",
        "patchSetId": 3
      },
      "lineNbr": 58,
      "author": {
        "id": 1115884
      },
      "writtenOn": "2017-09-12T17:10:35Z",
      "side": 1,
      "message": "Isn\u0027t that only when there\u0027s a timeout value - ie when the acquisition can fail?",
      "parentUuid": "dbb2b5ca_87e92557",
      "revId": "844054ceb88c954766a5cbdff4cc1bcb6dff8da3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "710fb87e_8bcb4489",
        "filename": "third_party/leveldatabase/env_chromium.cc",
        "patchSetId": 3
      },
      "lineNbr": 58,
      "author": {
        "id": 1163599
      },
      "writtenOn": "2017-09-12T19:51:25Z",
      "side": 1,
      "message": "I don\u0027t think so. The examples I was thinking of are pthread_mutex_trylock [1] and std::mutex::try_lock [2].\n\n[1] http://pubs.opengroup.org/onlinepubs/009604499/functions/pthread_mutex_lock.html\n[2] http://en.cppreference.com/w/cpp/thread/mutex/try_lock",
      "parentUuid": "1d1eef52_d68ac049",
      "revId": "844054ceb88c954766a5cbdff4cc1bcb6dff8da3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9d436789_5454f42d",
        "filename": "third_party/leveldatabase/env_chromium.cc",
        "patchSetId": 3
      },
      "lineNbr": 61,
      "author": {
        "id": 1163599
      },
      "writtenOn": "2017-09-09T02:35:36Z",
      "side": 1,
      "message": "You could build a non-blocking implementation on top of atomics. \n\n1) Atomically decrement available_ and store result\n2) If the result is \u003e\u003d 0, return true\n3) Atomically increment available_ and return false\n\nOTOH if this isn\u0027t used often, a mutex is fine. I\u0027m happy to discuss the atomics implementation more, if you think it\u0027s worthwhile.",
      "revId": "844054ceb88c954766a5cbdff4cc1bcb6dff8da3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "767a3a21_7dab0d18",
        "filename": "third_party/leveldatabase/env_chromium.cc",
        "patchSetId": 3
      },
      "lineNbr": 61,
      "author": {
        "id": 1115884
      },
      "writtenOn": "2017-09-12T17:10:35Z",
      "side": 1,
      "message": "This will only happen when the open file limit has been reached - so rarely.",
      "parentUuid": "9d436789_5454f42d",
      "revId": "844054ceb88c954766a5cbdff4cc1bcb6dff8da3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "638b1e34_4a9aa5bb",
        "filename": "third_party/leveldatabase/env_chromium.cc",
        "patchSetId": 3
      },
      "lineNbr": 85,
      "author": {
        "id": 1163599
      },
      "writtenOn": "2017-09-09T02:35:36Z",
      "side": 1,
      "message": "nit: Would it make sense to DCHECK v is non-negative?",
      "revId": "844054ceb88c954766a5cbdff4cc1bcb6dff8da3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cf4efa12_a97dc10e",
        "filename": "third_party/leveldatabase/env_chromium.cc",
        "patchSetId": 3
      },
      "lineNbr": 85,
      "author": {
        "id": 1115884
      },
      "writtenOn": "2017-09-12T17:10:35Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "638b1e34_4a9aa5bb",
      "revId": "844054ceb88c954766a5cbdff4cc1bcb6dff8da3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d6607a9f_359f3c70",
        "filename": "third_party/leveldatabase/env_chromium.cc",
        "patchSetId": 3
      },
      "lineNbr": 88,
      "author": {
        "id": 1163599
      },
      "writtenOn": "2017-09-09T02:35:36Z",
      "side": 1,
      "message": "nit: Can we call this mutex_?\n\n(If mu_ is a convention, please let me know, I\u0027d be happy to learn \u0026 adjust.)",
      "revId": "844054ceb88c954766a5cbdff4cc1bcb6dff8da3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c2d0516a_e0e291f0",
        "filename": "third_party/leveldatabase/env_chromium.cc",
        "patchSetId": 3
      },
      "lineNbr": 88,
      "author": {
        "id": 1115884
      },
      "writtenOn": "2017-09-12T17:10:35Z",
      "side": 1,
      "message": "Done. We do use mu_ elsewhere in env_chromium so should probably fix that during  https://bugs.chromium.org/p/chromium/issues/detail?id\u003d762598",
      "parentUuid": "d6607a9f_359f3c70",
      "revId": "844054ceb88c954766a5cbdff4cc1bcb6dff8da3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "173f4845_12b93603",
        "filename": "third_party/leveldatabase/env_chromium.cc",
        "patchSetId": 3
      },
      "lineNbr": 89,
      "author": {
        "id": 1163599
      },
      "writtenOn": "2017-09-09T02:35:36Z",
      "side": 1,
      "message": "nit: I think this is typically called available_.",
      "revId": "844054ceb88c954766a5cbdff4cc1bcb6dff8da3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3f47f1dd_eab06221",
        "filename": "third_party/leveldatabase/env_chromium.cc",
        "patchSetId": 3
      },
      "lineNbr": 89,
      "author": {
        "id": 1115884
      },
      "writtenOn": "2017-09-12T17:10:35Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "173f4845_12b93603",
      "revId": "844054ceb88c954766a5cbdff4cc1bcb6dff8da3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a080c61c_c1aabce6",
        "filename": "third_party/leveldatabase/env_chromium.cc",
        "patchSetId": 3
      },
      "lineNbr": 327,
      "author": {
        "id": 1163599
      },
      "writtenOn": "2017-09-09T02:35:36Z",
      "side": 1,
      "message": "nit: I think uses_temporary_file_ / using_temporary_file_ would make the rest of the code easier to read. \"temporary_file_\" makes me think this\u0027d be a base::File.",
      "revId": "844054ceb88c954766a5cbdff4cc1bcb6dff8da3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2378ea0b_1af1b419",
        "filename": "third_party/leveldatabase/env_chromium.cc",
        "patchSetId": 3
      },
      "lineNbr": 327,
      "author": {
        "id": 1115884
      },
      "writtenOn": "2017-09-12T17:10:35Z",
      "side": 1,
      "message": "Agreed, but also \"temporary\" makes me think it\u0027ll be deleted after close. I decided to go with \"open_before_read_\". Not in love with that either. Any better suggestions?",
      "parentUuid": "a080c61c_c1aabce6",
      "revId": "844054ceb88c954766a5cbdff4cc1bcb6dff8da3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "975bb98e_96695f83",
        "filename": "third_party/leveldatabase/env_chromium.cc",
        "patchSetId": 3
      },
      "lineNbr": 327,
      "author": {
        "id": 1163599
      },
      "writtenOn": "2017-09-12T19:51:25Z",
      "side": 1,
      "message": "If you\u0027re OK with inverting the condition, owns_file_ / owns_fd_ / uses_dedicated_fd_ seem a bit clearer. open_before_read_ is significantly better than temporary_file_, so how about pick your favorite?",
      "parentUuid": "2378ea0b_1af1b419",
      "revId": "844054ceb88c954766a5cbdff4cc1bcb6dff8da3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9d577b9a_8be78e53",
        "filename": "third_party/leveldatabase/env_chromium.cc",
        "patchSetId": 3
      },
      "lineNbr": 453,
      "author": {
        "id": 1163599
      },
      "writtenOn": "2017-09-09T02:35:36Z",
      "side": 1,
      "message": "Will this method always be called from the same thread? If not, this might be a bit unsafe.\n\nIf we don\u0027t know future plans, I\u0027d suggest having MaxOpenFiles() be \"static int result \u003d ComputeMaxOpenFiles(); return result;\", and moving the here in a ComputeMaxOpenFiles() that always does the syscall.\n\nAlternatively, if MaxOpenFiles() isn\u0027t called often (right now it seems like it\u0027d be exactly once?), we could just forego the caching.",
      "revId": "844054ceb88c954766a5cbdff4cc1bcb6dff8da3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "93f8daa1_38064484",
        "filename": "third_party/leveldatabase/env_chromium.cc",
        "patchSetId": 3
      },
      "lineNbr": 453,
      "author": {
        "id": 1115884
      },
      "writtenOn": "2017-09-12T17:10:35Z",
      "side": 1,
      "message": "No, not always from the same thread, but contention would have only done the initialization multiple times right.\n\nBut, good point. I used a static (made cleaner by https://chromium-review.googlesource.com/656108).",
      "parentUuid": "9d577b9a_8be78e53",
      "revId": "844054ceb88c954766a5cbdff4cc1bcb6dff8da3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "346fa4d1_b79bc5d3",
        "filename": "third_party/leveldatabase/env_chromium.cc",
        "patchSetId": 3
      },
      "lineNbr": 453,
      "author": {
        "id": 1163599
      },
      "writtenOn": "2017-09-12T19:51:25Z",
      "side": 1,
      "message": "Thank you!\n\nI don\u0027t think this is an issue on any of the architectures that we currently target* but, according to my understanding of the memory model, you can\u0027t assume that the write will happen atomically. In theory, you could be reading partial results of a write (complete garbage) and return that. (Am I wrong? If so, please help me get better!)\n\n*All architectures I know of use some cache coherence protocol to synchronize cores\u0027 access to memory, so all synchronization happens at cache line granularity. As long as the static is naturally aligned, it won\u0027t cross a cache line.",
      "parentUuid": "93f8daa1_38064484",
      "revId": "844054ceb88c954766a5cbdff4cc1bcb6dff8da3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "abe248ec_0595ddc5",
        "filename": "third_party/leveldatabase/env_chromium.cc",
        "patchSetId": 3
      },
      "lineNbr": 1026,
      "author": {
        "id": 1163599
      },
      "writtenOn": "2017-09-09T02:35:36Z",
      "side": 1,
      "message": "nit: Do you think it\u0027s worth making the Fuchsia folks aware of this CL?\n\nIf so, scottmg@ and kmarshall@ might be interested.",
      "revId": "844054ceb88c954766a5cbdff4cc1bcb6dff8da3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "519febfa_98bc438c",
        "filename": "third_party/leveldatabase/env_chromium.cc",
        "patchSetId": 3
      },
      "lineNbr": 1026,
      "author": {
        "id": 1144260
      },
      "writtenOn": "2017-09-11T16:37:40Z",
      "side": 1,
      "message": "Thanks for noting. Fuchsia has a valid value for GetMaxFds() so using the OS_POSIX path is probably OK here for now.",
      "parentUuid": "abe248ec_0595ddc5",
      "revId": "844054ceb88c954766a5cbdff4cc1bcb6dff8da3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1bca6979_b64047ee",
        "filename": "third_party/leveldatabase/env_chromium.cc",
        "patchSetId": 3
      },
      "lineNbr": 1026,
      "author": {
        "id": 1115884
      },
      "writtenOn": "2017-09-12T17:10:35Z",
      "side": 1,
      "message": "I\u0027d like to stop logging this entirely. See https://bugs.chromium.org/p/chromium/issues/detail?id\u003d763968",
      "parentUuid": "519febfa_98bc438c",
      "revId": "844054ceb88c954766a5cbdff4cc1bcb6dff8da3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6d45ccfd_1d8a1cef",
        "filename": "third_party/leveldatabase/env_chromium_unittest.cc",
        "patchSetId": 3
      },
      "lineNbr": 234,
      "author": {
        "id": 1163599
      },
      "writtenOn": "2017-09-09T02:35:36Z",
      "side": 1,
      "message": "I think that \"the sum of the two limits\" does not apply here. Copy-paste typo from env_posix_test.cc?",
      "revId": "844054ceb88c954766a5cbdff4cc1bcb6dff8da3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0741f4e6_532a8659",
        "filename": "third_party/leveldatabase/env_chromium_unittest.cc",
        "patchSetId": 3
      },
      "lineNbr": 234,
      "author": {
        "id": 1115884
      },
      "writtenOn": "2017-09-12T17:10:35Z",
      "side": 1,
      "message": "Yep - thx.",
      "parentUuid": "6d45ccfd_1d8a1cef",
      "revId": "844054ceb88c954766a5cbdff4cc1bcb6dff8da3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}