{
  "comments": [
    {
      "key": {
        "uuid": "cd580ee3_4ab8bd35",
        "filename": "components/omnibox/browser/autocomplete_result.cc",
        "patchSetId": 2
      },
      "lineNbr": 127,
      "author": {
        "id": 1115920
      },
      "writtenOn": "2017-10-23T21:52:03Z",
      "side": 1,
      "message": "Update the comment on this method in the header file.",
      "revId": "cb2ea95482cb2077ea6a9dfe6a82a0f6e02eec91",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ec7b3ae7_ca379dfc",
        "filename": "components/omnibox/browser/autocomplete_result.cc",
        "patchSetId": 2
      },
      "lineNbr": 127,
      "author": {
        "id": 1105777
      },
      "writtenOn": "2017-10-24T00:51:10Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "cd580ee3_4ab8bd35",
      "revId": "cb2ea95482cb2077ea6a9dfe6a82a0f6e02eec91",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "61a64a80_4cead6bd",
        "filename": "components/omnibox/browser/autocomplete_result.cc",
        "patchSetId": 2
      },
      "lineNbr": 144,
      "author": {
        "id": 1115920
      },
      "writtenOn": "2017-10-23T21:52:03Z",
      "side": 1,
      "message": "This looks safe and correct and in the right place to me but I\u0027m not 100% confident. Can you run it past mpearson?",
      "revId": "cb2ea95482cb2077ea6a9dfe6a82a0f6e02eec91",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c3d02c24_e8855f7e",
        "filename": "components/omnibox/browser/autocomplete_result.cc",
        "patchSetId": 2
      },
      "lineNbr": 144,
      "author": {
        "id": 1001310
      },
      "writtenOn": "2017-10-23T22:20:52Z",
      "side": 1,
      "message": "This is a big chunk of code.  A helper function looks like it\u0027s in order.",
      "range": {
        "startLine": 144,
        "startChar": 3,
        "endLine": 144,
        "endChar": 47
      },
      "revId": "cb2ea95482cb2077ea6a9dfe6a82a0f6e02eec91",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8a9b3443_e904aa13",
        "filename": "components/omnibox/browser/autocomplete_result.cc",
        "patchSetId": 2
      },
      "lineNbr": 144,
      "author": {
        "id": 1105777
      },
      "writtenOn": "2017-10-24T00:51:10Z",
      "side": 1,
      "message": "Done. ;)",
      "parentUuid": "61a64a80_4cead6bd",
      "revId": "cb2ea95482cb2077ea6a9dfe6a82a0f6e02eec91",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "56b8ff1b_e5b89b1a",
        "filename": "components/omnibox/browser/autocomplete_result.cc",
        "patchSetId": 2
      },
      "lineNbr": 144,
      "author": {
        "id": 1105777
      },
      "writtenOn": "2017-10-24T00:51:10Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c3d02c24_e8855f7e",
      "range": {
        "startLine": 144,
        "startChar": 3,
        "endLine": 144,
        "endChar": 47
      },
      "revId": "cb2ea95482cb2077ea6a9dfe6a82a0f6e02eec91",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a2f6f3c_979726b7",
        "filename": "components/omnibox/browser/autocomplete_result.cc",
        "patchSetId": 2
      },
      "lineNbr": 145,
      "author": {
        "id": 1001310
      },
      "writtenOn": "2017-10-23T22:20:52Z",
      "side": 1,
      "message": "This behavior works on all platforms, which means that it changes behavior on Android which already has tail suggestions.  It will need to be evaled there if you actually intend to launch this behavior on Android.",
      "revId": "cb2ea95482cb2077ea6a9dfe6a82a0f6e02eec91",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f570f784_fa0f3f9e",
        "filename": "components/omnibox/browser/autocomplete_result.cc",
        "patchSetId": 2
      },
      "lineNbr": 145,
      "author": {
        "id": 1105777
      },
      "writtenOn": "2017-10-24T00:51:10Z",
      "side": 1,
      "message": "I would be most comfortable not changing Android\u0027s behavior. I hope you don\u0027t mind the #if. I didn\u0027t want to burden those platforms with a test.",
      "parentUuid": "1a2f6f3c_979726b7",
      "revId": "cb2ea95482cb2077ea6a9dfe6a82a0f6e02eec91",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a42d30f8_9c0240dc",
        "filename": "components/omnibox/browser/autocomplete_result.cc",
        "patchSetId": 2
      },
      "lineNbr": 146,
      "author": {
        "id": 1115920
      },
      "writtenOn": "2017-10-23T21:52:03Z",
      "side": 1,
      "message": "Could we shorten this block a bit with something like the following?\n\n    bool is_tail(const AutocompleteMatch\u0026 match) {\n      return match.type \u003d\u003d AutocompleteMatchType::SEARCH_SUGGEST_TAIL;\n    };\n    if (is_tail(matches_[0]) || is_tail(matches_[1]) {\n      matches_.erase(std::remove_if(std::next(matches_.begin()), \n                                    matches_.end(),\n                                    std::not1(std::ptr_fun(is_tail))));\n                     matches_.end());\n    } else {\n      matches_.erase(std::remove_if(std::next(matches_.begin()), \n                                    matches_.end(),\n                                    std::ptr_fun(is_tail)),\n                     matches_.end());\n    }",
      "revId": "cb2ea95482cb2077ea6a9dfe6a82a0f6e02eec91",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d5e191e5_7aefe85b",
        "filename": "components/omnibox/browser/autocomplete_result.cc",
        "patchSetId": 2
      },
      "lineNbr": 146,
      "author": {
        "id": 1001310
      },
      "writtenOn": "2017-10-23T22:13:18Z",
      "side": 1,
      "message": "This test doesn\u0027t look right to me.  You\u0027re nearly always going to get a what-you-typed match (generally at the top).  I think it\u0027s most likely this test would never pass.\n\nAm I wrong?  Did this work interactively?",
      "range": {
        "startLine": 146,
        "startChar": 73,
        "endLine": 146,
        "endChar": 0
      },
      "revId": "cb2ea95482cb2077ea6a9dfe6a82a0f6e02eec91",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ece3ce17_452a7e5f",
        "filename": "components/omnibox/browser/autocomplete_result.cc",
        "patchSetId": 2
      },
      "lineNbr": 146,
      "author": {
        "id": 1105777
      },
      "writtenOn": "2017-10-24T00:51:10Z",
      "side": 1,
      "message": "It was extensively tested on both Mac and Linux, and the unit tests put a simple default match first. Are you perhaps thinking that it\u0027s [0] *\u0026\u0026* [1] ?",
      "parentUuid": "d5e191e5_7aefe85b",
      "range": {
        "startLine": 146,
        "startChar": 73,
        "endLine": 146,
        "endChar": 0
      },
      "revId": "cb2ea95482cb2077ea6a9dfe6a82a0f6e02eec91",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0b76ebd4_3933969d",
        "filename": "components/omnibox/browser/autocomplete_result.cc",
        "patchSetId": 2
      },
      "lineNbr": 146,
      "author": {
        "id": 1105777
      },
      "writtenOn": "2017-10-24T00:51:10Z",
      "side": 1,
      "message": "Mine might be a couple lines longer (partly because I was making the formatter happy) but it\u0027s a lot more readable. I think we\u0027d get more mileage out of a short local definition for AutocompleteMatchType::SEARCH_SUGGEST_TAIL. Anyways, if you prefer this, I moved it via Mark\u0027s suggestion.\n\nbtw, ptr_fun will be deprecated this year.",
      "parentUuid": "a42d30f8_9c0240dc",
      "revId": "cb2ea95482cb2077ea6a9dfe6a82a0f6e02eec91",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8b3b7b45_8995ca91",
        "filename": "components/omnibox/browser/autocomplete_result.cc",
        "patchSetId": 2
      },
      "lineNbr": 146,
      "author": {
        "id": 1001310
      },
      "writtenOn": "2017-10-24T03:28:48Z",
      "side": 1,
      "message": "\u003e It was extensively tested on both Mac and Linux, and the unit tests put a simple default match first. Are you perhaps thinking that it\u0027s [0] *\u0026\u0026* [1] ?\n\nRight you are.  I was thinking it was *\u0026\u0026*.\n\nI\u0027m really nervous about this test and its ranking implications.  Most of the time a user is looking for an obscure page from their history by typing in the title, tail suggest will trigger.  If it triggers and happens to score higher than the page from the user\u0027s history, then we\u0027ll filter all non-tail suggestions.  This will kill the page from the user\u0027s history.\n\nI would suggest a stricter test, say, if tail suggest isn\u0027t \"enough\" of the dropdown, delete all tail suggest.  Never delete other types of suggestions.  Tail suggest, almost by definition, is guaranteed to be worse quality than any ordinary suggestions that match the input.  Thus, regardless of tail suggestion scores, it shouldn\u0027t cause the removal of ordinary suggestions.",
      "parentUuid": "ece3ce17_452a7e5f",
      "range": {
        "startLine": 146,
        "startChar": 73,
        "endLine": 146,
        "endChar": 0
      },
      "revId": "cb2ea95482cb2077ea6a9dfe6a82a0f6e02eec91",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0fde66c8_7da0abee",
        "filename": "components/omnibox/browser/autocomplete_result.cc",
        "patchSetId": 2
      },
      "lineNbr": 146,
      "author": {
        "id": 1105777
      },
      "writtenOn": "2017-10-24T04:00:08Z",
      "side": 1,
      "message": "What I\u0027m hearing is that tail suggestions shouldn\u0027t be scored so highly. If they\u0027re really that bad, perhaps we should attenuate the scores.\n\nI\u0027m not keen on the \"enough\" approach. From your description, it sounds like, if we have:\n\nWYT\ntail\ntail\ntail\nhistory\n\neven then, we shouldn\u0027t nuke it; it\u0027s too valuable.",
      "parentUuid": "8b3b7b45_8995ca91",
      "range": {
        "startLine": 146,
        "startChar": 73,
        "endLine": 146,
        "endChar": 0
      },
      "revId": "cb2ea95482cb2077ea6a9dfe6a82a0f6e02eec91",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ec9a4071_b60f728c",
        "filename": "components/omnibox/browser/autocomplete_result.cc",
        "patchSetId": 2
      },
      "lineNbr": 146,
      "author": {
        "id": 1115920
      },
      "writtenOn": "2017-10-24T15:47:50Z",
      "side": 1,
      "message": "Readability is truly in the eye of the beholder, then. :) To my eye, a short, semantically clear name like is_tail is more readable than two nearly identical inline definitions side-by-side. But no big deal, moving to a helper function greatly lessens my desire to have this block be terser.\n\n\u003e btw, ptr_fun will be deprecated this year.\n\nThanks, good to know.",
      "parentUuid": "0b76ebd4_3933969d",
      "revId": "cb2ea95482cb2077ea6a9dfe6a82a0f6e02eec91",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b269c3cf_bbfbec61",
        "filename": "components/omnibox/browser/autocomplete_result.cc",
        "patchSetId": 2
      },
      "lineNbr": 146,
      "author": {
        "id": 1105777
      },
      "writtenOn": "2017-10-24T17:07:53Z",
      "side": 1,
      "message": "Oh, is_tail (or below) is much better. I was referring to the 90\u0027s STL yuck required to support it.\n\nI was thinking that this (in a helper function) would be best:\n\n   if (matches_[0].type \u003d\u003d TAIL || matches_[1].type \u003d\u003d TAIL) {\n     ...",
      "parentUuid": "ec9a4071_b60f728c",
      "revId": "cb2ea95482cb2077ea6a9dfe6a82a0f6e02eec91",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b5d60d2f_44c98dd5",
        "filename": "components/omnibox/browser/autocomplete_result.cc",
        "patchSetId": 2
      },
      "lineNbr": 149,
      "author": {
        "id": 1001310
      },
      "writtenOn": "2017-10-23T22:20:52Z",
      "side": 1,
      "message": "Suppose a suggestion comes back from two sources A \u0026 B (e.g., search history and tail suggest).  Sort \u0026 dedup would put the higher scoring one first.  If that\u0027s tail suggest, that means it\u0027ll be rendered in the tail suggest UI, right?  If it\u0027s not, it won\u0027t be.\n\nThis means that as we turn on tail suggest, it could end up demoting the suggestion by:\n1. scoring higher than the duplicate\n2. hitting this code that decides not enough tail suggestions are displayed and that means filtering them all.\n\nI\u0027m okay with that.  It does mean we\u0027d need to be more careful with interpreting eval data.  (Please make a note of this in the doc that describes metrics to monitor).",
      "revId": "cb2ea95482cb2077ea6a9dfe6a82a0f6e02eec91",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "463a4fd9_bdc4f4cb",
        "filename": "components/omnibox/browser/autocomplete_result.cc",
        "patchSetId": 2
      },
      "lineNbr": 149,
      "author": {
        "id": 1105777
      },
      "writtenOn": "2017-10-24T00:51:10Z",
      "side": 1,
      "message": "I didn\u0027t understand this example or the phrase \"not enough tail suggestions\". It\u0027s particularly confusing since deuping is done up on line 133.",
      "parentUuid": "b5d60d2f_44c98dd5",
      "revId": "cb2ea95482cb2077ea6a9dfe6a82a0f6e02eec91",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a343fb81_1344d7ee",
        "filename": "components/omnibox/browser/autocomplete_result.cc",
        "patchSetId": 2
      },
      "lineNbr": 149,
      "author": {
        "id": 1001310
      },
      "writtenOn": "2017-10-24T03:28:48Z",
      "side": 1,
      "message": "\u003e I didn\u0027t understand this example or the phrase \"not enough tail suggestions\". It\u0027s particularly confusing since deuping is done up on line 133.\n\nSuppose the input is \"X Y Z\".\nSearch history returns the  suggestion \"X Y Z A\" with score 1000.\nTail suggest returns the suggestion \"X Y Z A\" with score of 1100.\nThey get marked as dups.\nThe tail suggest one becomes the canonical.\nThen this filtering code activates.\nSuppose it finds some other non-tail suggestions and decides to filter tail suggestions.\nIt will filter \"X Y Z A\" because it\u0027s marked as a tail suggestion.\n\nThat\u0027s what I mean: if tail suggest triggers on a suggestion that is then removed, it\u0027s possible the net effect is deleting regular, useful suggestions.  We will need to keep an eye out for this when looking at eval data.",
      "parentUuid": "463a4fd9_bdc4f4cb",
      "revId": "cb2ea95482cb2077ea6a9dfe6a82a0f6e02eec91",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "09cb4828_5a123361",
        "filename": "components/omnibox/browser/autocomplete_result.cc",
        "patchSetId": 2
      },
      "lineNbr": 149,
      "author": {
        "id": 1105777
      },
      "writtenOn": "2017-10-24T04:00:08Z",
      "side": 1,
      "message": "That seems pretty subtle to me. Some things that I keep in mind: We either see all tail suggestions, or all non-tail suggestions. I\u0027ve only been able to generate a mixed response once, by manufacturing it. This code is strictly to guarantee uniform suggestions.\n\nI did suggest that we allow non-tail suggestions ahead of tail suggestions. AFAICT, that would have allowed your example. They were fairly adamant with their \u0027no\u0027, but you might want to chime in on the thread.",
      "parentUuid": "a343fb81_1344d7ee",
      "revId": "cb2ea95482cb2077ea6a9dfe6a82a0f6e02eec91",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5c8b9de6_46a45725",
        "filename": "components/omnibox/browser/autocomplete_result.cc",
        "patchSetId": 2
      },
      "lineNbr": 149,
      "author": {
        "id": 1115920
      },
      "writtenOn": "2017-10-24T15:47:50Z",
      "side": 1,
      "message": "These scenarios are all pretty unlikely but it\u0027d be comforting to know that we\u0027d do the right thing regardless.\n\nCan we cull tail suggestions before the deduping? We can do it regardless of whether there are \"enough\" or how they score or whether they\u0027re dupes of another suggestion. As I read it, the requirements were to only show tail suggestions if nothing else is available (except of course the what-you-typed match), so we could keep it simple.",
      "parentUuid": "09cb4828_5a123361",
      "revId": "cb2ea95482cb2077ea6a9dfe6a82a0f6e02eec91",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2220c2b7_e090676d",
        "filename": "components/omnibox/browser/autocomplete_result.cc",
        "patchSetId": 2
      },
      "lineNbr": 149,
      "author": {
        "id": 1105777
      },
      "writtenOn": "2017-10-24T17:07:53Z",
      "side": 1,
      "message": "My concern is that some poor local suggestion is going to (repeatedly) kick out tail suggestions and we\u0027ll wonder why our users aren\u0027t seeing them as often.\n\nIf local suggestions really are better, we should score them that way and make the whole issue go away.",
      "parentUuid": "5c8b9de6_46a45725",
      "revId": "cb2ea95482cb2077ea6a9dfe6a82a0f6e02eec91",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e9dd96e1_6662ae03",
        "filename": "components/omnibox/browser/autocomplete_result.cc",
        "patchSetId": 2
      },
      "lineNbr": 149,
      "author": {
        "id": 1115920
      },
      "writtenOn": "2017-10-24T17:16:17Z",
      "side": 1,
      "message": "I think it makes sense to treat local suggestions as inherently superior, yes. Tail suggestions are a great response to a case where literally nothing else matches. But if there\u0027s long input that actually matches something in the user\u0027s history or bookmarks, preferring that seems right to me.\n\nYour initial approach of getting rid of one or the other based on score also seemed reasonable but I hadn\u0027t considered the dedup scenario. If it\u0027s feasible to do the culling before deduping, the score-based approach might still make sense. But I\u0027d still lean towards the simpler approach of preferring local matches and not worrying about whether the server is scoring tail suggestions in a way that\u0027s effective for this purpose.",
      "parentUuid": "2220c2b7_e090676d",
      "revId": "cb2ea95482cb2077ea6a9dfe6a82a0f6e02eec91",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f62b344a_f47cef10",
        "filename": "components/omnibox/browser/autocomplete_result.cc",
        "patchSetId": 2
      },
      "lineNbr": 149,
      "author": {
        "id": 1001310
      },
      "writtenOn": "2017-10-24T17:58:43Z",
      "side": 1,
      "message": "\u003e I think it makes sense to treat local suggestions as inherently superior, yes. Tail suggestions are a great response to a case where literally nothing else matches. But if there\u0027s long input that actually matches something in the user\u0027s history or bookmarks, preferring that seems right to me.\n\u003e \n\u003e Your initial approach of getting rid of one or the other based on score also seemed reasonable but I hadn\u0027t considered the dedup scenario. If it\u0027s feasible to do the culling before deduping, the score-based approach might still make sense. But I\u0027d still lean towards the simpler approach of preferring local matches and not worrying about whether the server is scoring tail suggestions in a way that\u0027s effective for this purpose.\n\nThinking about this more, I think a good structure might be the same one we use in SearchProvider to enforce constraints.\n\nRoughly, it\u0027s\n1. Do normal processing; fill in list of search and nav suggestions\n2. Convert suggestions to AutocompleteMatches\n3. Check constraints.  If one fails, revise the input (e.g., delete a relevant score, remove a suggestion, whatever) then goto 2.\n\nIndeed, that code is SearchProvider is designed exactly to enforce what we think is sensible, protecting against inappropriate or otherwise bad server scores.  It seems to me that this is exactly the same type of situation here.\n\nThis should get rid of my worries about duplicates.\n\nTo rephrase, my suggestion here would conceptually be something like:\n1. at beginning of SortAndCull, make a copy of |matches_|, call it |orig_matches|\n.2 where this code is, instead say:\nif (dropdown has tail suggest and dropdown has something that is not tail suggest and not search-what-you-typed) { revise orig_matches to remove all tail suggest; set matches_ \u003d orig_matches; goto beginning of SortAndCull }\n\n(Obviously this is not a code structure; the idea should be obvious.  For an example of a good structure that does this, see SearchProvider: UpdateMatches, ConvertResultsToAutocompleteMatches, and EnforceConstraints.)",
      "parentUuid": "e9dd96e1_6662ae03",
      "revId": "cb2ea95482cb2077ea6a9dfe6a82a0f6e02eec91",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c88642ef_c05d409a",
        "filename": "components/omnibox/browser/autocomplete_result.cc",
        "patchSetId": 2
      },
      "lineNbr": 149,
      "author": {
        "id": 1105777
      },
      "writtenOn": "2017-10-24T21:10:52Z",
      "side": 1,
      "message": "But this has your issue with deduping. Since SortAndDedup is included in your loop, good local suggestions can be knocked out.\n\nInstead, shouldn\u0027t it be like this?\n\nfind best allowed_to_be_default match according to CompareWithDemoteByType\nif both tail and non-tail suggestions (besides the above), remove the tail suggestions\n// the rest as normal\nSortAndDedup(...\netc.\n\nAnd it has the advantage of skipping the copy and sort.",
      "parentUuid": "f62b344a_f47cef10",
      "revId": "cb2ea95482cb2077ea6a9dfe6a82a0f6e02eec91",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ae361eab_61c6d7b2",
        "filename": "components/omnibox/browser/autocomplete_result.cc",
        "patchSetId": 2
      },
      "lineNbr": 149,
      "author": {
        "id": 1001310
      },
      "writtenOn": "2017-10-24T22:27:34Z",
      "side": 1,
      "message": "\u003e But this has your issue with deduping.\nOh, right you are.\n\n\u003e Since SortAndDedup is included in your loop, good local suggestions can be knocked out.\n\u003e \n\u003e Instead, shouldn\u0027t it be like this?\n\u003e \n\u003e find best allowed_to_be_default match according to CompareWithDemoteByType\n\u003e if both tail and non-tail suggestions (besides the above), remove the tail suggestions\n\u003e // the rest as normal\n\u003e SortAndDedup(...\n\u003e etc.\n\u003e \n\u003e And it has the advantage of skipping the copy and sort.\n\nInitially, I think that sounds good to me.  (Disclaimer: I haven\u0027t yet thought\ndeeply about any problems that may arise.)\n\nAlso, please think about the CopyOldMatches() code.  This code preserves matches\nfrom the previous keystroke in order to keep the omnibox dropdown more stable.\nI think this new code might interact fine with it, but I\u0027m not sure and\nI\u0027d appreciate someone else thinking about this situation more.",
      "parentUuid": "c88642ef_c05d409a",
      "revId": "cb2ea95482cb2077ea6a9dfe6a82a0f6e02eec91",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "22f2886a_bd78903e",
        "filename": "components/omnibox/browser/autocomplete_result.cc",
        "patchSetId": 2
      },
      "lineNbr": 149,
      "author": {
        "id": 1105777
      },
      "writtenOn": "2017-10-27T06:32:04Z",
      "side": 1,
      "message": "\u003e Initially, I think that sounds good to me.  (Disclaimer: I haven\u0027t yet thought\n\u003e deeply about any problems that may arise.)\n\nThe primary thing that concerned me was the prediction of \"would be default\". As far as I can tell, it\u0027s a straightforward comparison, but I may have overlooked something.\n\n\u003e Also, please think about the CopyOldMatches() code.  This code preserves matches\n\u003e from the previous keystroke in order to keep the omnibox dropdown more stable.\n\u003e I think this new code might interact fine with it, but I\u0027m not sure and\n\u003e I\u0027d appreciate someone else thinking about this situation more.\n\nSo UpdateResults calls CopyOldMatches calls SortAndCull calls our tail culling code. All of the callers assume that the subroutines are going to remove matches. If this change breaks something, then I think it\u0027s fair to say that the old code made assumptions that it shouldn\u0027t have.",
      "parentUuid": "ae361eab_61c6d7b2",
      "revId": "cb2ea95482cb2077ea6a9dfe6a82a0f6e02eec91",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}