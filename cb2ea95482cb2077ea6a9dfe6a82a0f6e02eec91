{
  "comments": [
    {
      "key": {
        "uuid": "cd580ee3_4ab8bd35",
        "filename": "components/omnibox/browser/autocomplete_result.cc",
        "patchSetId": 2
      },
      "lineNbr": 127,
      "author": {
        "id": 1115920
      },
      "writtenOn": "2017-10-23T21:52:03Z",
      "side": 1,
      "message": "Update the comment on this method in the header file.",
      "revId": "cb2ea95482cb2077ea6a9dfe6a82a0f6e02eec91",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "61a64a80_4cead6bd",
        "filename": "components/omnibox/browser/autocomplete_result.cc",
        "patchSetId": 2
      },
      "lineNbr": 144,
      "author": {
        "id": 1115920
      },
      "writtenOn": "2017-10-23T21:52:03Z",
      "side": 1,
      "message": "This looks safe and correct and in the right place to me but I\u0027m not 100% confident. Can you run it past mpearson?",
      "revId": "cb2ea95482cb2077ea6a9dfe6a82a0f6e02eec91",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c3d02c24_e8855f7e",
        "filename": "components/omnibox/browser/autocomplete_result.cc",
        "patchSetId": 2
      },
      "lineNbr": 144,
      "author": {
        "id": 1001310
      },
      "writtenOn": "2017-10-23T22:20:52Z",
      "side": 1,
      "message": "This is a big chunk of code.  A helper function looks like it\u0027s in order.",
      "range": {
        "startLine": 144,
        "startChar": 3,
        "endLine": 144,
        "endChar": 47
      },
      "revId": "cb2ea95482cb2077ea6a9dfe6a82a0f6e02eec91",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1a2f6f3c_979726b7",
        "filename": "components/omnibox/browser/autocomplete_result.cc",
        "patchSetId": 2
      },
      "lineNbr": 145,
      "author": {
        "id": 1001310
      },
      "writtenOn": "2017-10-23T22:20:52Z",
      "side": 1,
      "message": "This behavior works on all platforms, which means that it changes behavior on Android which already has tail suggestions.  It will need to be evaled there if you actually intend to launch this behavior on Android.",
      "revId": "cb2ea95482cb2077ea6a9dfe6a82a0f6e02eec91",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a42d30f8_9c0240dc",
        "filename": "components/omnibox/browser/autocomplete_result.cc",
        "patchSetId": 2
      },
      "lineNbr": 146,
      "author": {
        "id": 1115920
      },
      "writtenOn": "2017-10-23T21:52:03Z",
      "side": 1,
      "message": "Could we shorten this block a bit with something like the following?\n\n    bool is_tail(const AutocompleteMatch\u0026 match) {\n      return match.type \u003d\u003d AutocompleteMatchType::SEARCH_SUGGEST_TAIL;\n    };\n    if (is_tail(matches_[0]) || is_tail(matches_[1]) {\n      matches_.erase(std::remove_if(std::next(matches_.begin()), \n                                    matches_.end(),\n                                    std::not1(std::ptr_fun(is_tail))));\n                     matches_.end());\n    } else {\n      matches_.erase(std::remove_if(std::next(matches_.begin()), \n                                    matches_.end(),\n                                    std::ptr_fun(is_tail)),\n                     matches_.end());\n    }",
      "revId": "cb2ea95482cb2077ea6a9dfe6a82a0f6e02eec91",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d5e191e5_7aefe85b",
        "filename": "components/omnibox/browser/autocomplete_result.cc",
        "patchSetId": 2
      },
      "lineNbr": 146,
      "author": {
        "id": 1001310
      },
      "writtenOn": "2017-10-23T22:13:18Z",
      "side": 1,
      "message": "This test doesn\u0027t look right to me.  You\u0027re nearly always going to get a what-you-typed match (generally at the top).  I think it\u0027s most likely this test would never pass.\n\nAm I wrong?  Did this work interactively?",
      "range": {
        "startLine": 146,
        "startChar": 73,
        "endLine": 146,
        "endChar": 0
      },
      "revId": "cb2ea95482cb2077ea6a9dfe6a82a0f6e02eec91",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b5d60d2f_44c98dd5",
        "filename": "components/omnibox/browser/autocomplete_result.cc",
        "patchSetId": 2
      },
      "lineNbr": 149,
      "author": {
        "id": 1001310
      },
      "writtenOn": "2017-10-23T22:20:52Z",
      "side": 1,
      "message": "Suppose a suggestion comes back from two sources A \u0026 B (e.g., search history and tail suggest).  Sort \u0026 dedup would put the higher scoring one first.  If that\u0027s tail suggest, that means it\u0027ll be rendered in the tail suggest UI, right?  If it\u0027s not, it won\u0027t be.\n\nThis means that as we turn on tail suggest, it could end up demoting the suggestion by:\n1. scoring higher than the duplicate\n2. hitting this code that decides not enough tail suggestions are displayed and that means filtering them all.\n\nI\u0027m okay with that.  It does mean we\u0027d need to be more careful with interpreting eval data.  (Please make a note of this in the doc that describes metrics to monitor).",
      "revId": "cb2ea95482cb2077ea6a9dfe6a82a0f6e02eec91",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}