{
  "comments": [
    {
      "key": {
        "uuid": "aa3f2392_5829cf4a",
        "filename": "chrome_elf/whitelist/DEPS",
        "patchSetId": 6
      },
      "lineNbr": 9,
      "author": {
        "id": 1178124
      },
      "writtenOn": "2017-10-07T21:30:34Z",
      "side": 1,
      "message": "could these two lines become\n  \"+chrome_elf/whitelist\",\n? is there a reason to do it file-by-file in this directory?",
      "revId": "e73eb23cedbe138500aa369316a5dd247b7c2cfb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "12f7a8ee_2d4fa6dd",
        "filename": "chrome_elf/whitelist/whitelist.cc",
        "patchSetId": 6
      },
      "lineNbr": 33,
      "author": {
        "id": 1178124
      },
      "writtenOn": "2017-10-07T21:30:34Z",
      "side": 1,
      "message": "?\n  if (rc !\u003d kImeSuccess)",
      "revId": "e73eb23cedbe138500aa369316a5dd247b7c2cfb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8c442d4e_57166e1c",
        "filename": "chrome_elf/whitelist/whitelist_ime.cc",
        "patchSetId": 6
      },
      "lineNbr": 46,
      "author": {
        "id": 1178124
      },
      "writtenOn": "2017-10-07T21:30:34Z",
      "side": 1,
      "message": "this should be \"std::wstring\u0026\u0026\" so that the caller is forced to move their string into this ctor (same for |path| below)",
      "revId": "e73eb23cedbe138500aa369316a5dd247b7c2cfb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c0f75ee3_75c98acd",
        "filename": "chrome_elf/whitelist/whitelist_ime.cc",
        "patchSetId": 6
      },
      "lineNbr": 54,
      "author": {
        "id": 1178124
      },
      "writtenOn": "2017-10-07T21:30:34Z",
      "side": 1,
      "message": "to be honest, i think it\u0027s fine to remove this line and let the language make its implicit dtor on its own.",
      "revId": "e73eb23cedbe138500aa369316a5dd247b7c2cfb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e0d54c08_3059e405",
        "filename": "chrome_elf/whitelist/whitelist_ime.cc",
        "patchSetId": 6
      },
      "lineNbr": 74,
      "author": {
        "id": 1178124
      },
      "writtenOn": "2017-10-07T21:30:34Z",
      "side": 1,
      "message": "nit: when i see \"list\" in the name of a variable, i think std::list. maybe GetImeVector?",
      "revId": "e73eb23cedbe138500aa369316a5dd247b7c2cfb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6b4fd679_e77480a3",
        "filename": "chrome_elf/whitelist/whitelist_ime.cc",
        "patchSetId": 6
      },
      "lineNbr": 101,
      "author": {
        "id": 1178124
      },
      "writtenOn": "2017-10-07T21:30:34Z",
      "side": 1,
      "message": "omit \".c_str()\"",
      "range": {
        "startLine": 101,
        "startChar": 21,
        "endLine": 101,
        "endChar": 29
      },
      "revId": "e73eb23cedbe138500aa369316a5dd247b7c2cfb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9286a396_3e9d7171",
        "filename": "chrome_elf/whitelist/whitelist_ime.cc",
        "patchSetId": 6
      },
      "lineNbr": 137,
      "author": {
        "id": 1178124
      },
      "writtenOn": "2017-10-07T21:30:34Z",
      "side": 1,
      "message": "include FILE_SHARE_DELETE so that this probe doesn\u0027t block a concurrent delete from another process.",
      "revId": "e73eb23cedbe138500aa369316a5dd247b7c2cfb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a18667a2_76fcccd3",
        "filename": "chrome_elf/whitelist/whitelist_ime.cc",
        "patchSetId": 6
      },
      "lineNbr": 137,
      "author": {
        "id": 1178124
      },
      "writtenOn": "2017-10-07T21:30:34Z",
      "side": 1,
      "message": "in the interest of requesting minimal rights, should this be FILE_READ_DATA rather than GENERIC_READ?",
      "range": {
        "startLine": 137,
        "startChar": 26,
        "endLine": 137,
        "endChar": 38
      },
      "revId": "e73eb23cedbe138500aa369316a5dd247b7c2cfb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "daa768a8_d60d58be",
        "filename": "chrome_elf/whitelist/whitelist_ime.cc",
        "patchSetId": 6
      },
      "lineNbr": 143,
      "author": {
        "id": 1178124
      },
      "writtenOn": "2017-10-07T21:30:34Z",
      "side": 1,
      "message": "i think \"\u0026buffer\" should either be just \"buffer\" or \"\u0026buffer[0]\". the latter is explicitly \"a pointer to the first element of the array\" while the former relies on the standard array-to-pointer conversion to mean the same. for whatever reason, i always write \u0026buffer[0], but i can go either way. \"\u0026buffer\", though, reads like \"a pointer to an array\" (i.e., BYTE**) to me.",
      "range": {
        "startLine": 143,
        "startChar": 24,
        "endLine": 143,
        "endChar": 31
      },
      "revId": "e73eb23cedbe138500aa369316a5dd247b7c2cfb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bc28743b_254501f8",
        "filename": "chrome_elf/whitelist/whitelist_ime.cc",
        "patchSetId": 6
      },
      "lineNbr": 143,
      "author": {
        "id": 1178124
      },
      "writtenOn": "2017-10-07T21:30:34Z",
      "side": 1,
      "message": "nit: NULL -\u003e nullptr throughout",
      "range": {
        "startLine": 143,
        "startChar": 51,
        "endLine": 143,
        "endChar": 55
      },
      "revId": "e73eb23cedbe138500aa369316a5dd247b7c2cfb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4751fba9_66c8ec9c",
        "filename": "chrome_elf/whitelist/whitelist_ime.cc",
        "patchSetId": 6
      },
      "lineNbr": 144,
      "author": {
        "id": 1178124
      },
      "writtenOn": "2017-10-07T21:30:34Z",
      "side": 1,
      "message": "how about making the body of this \"    read \u003d 0;\" so that the CloseHandle and return below are hit?",
      "revId": "e73eb23cedbe138500aa369316a5dd247b7c2cfb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ea361af4_805dadd7",
        "filename": "chrome_elf/whitelist/whitelist_ime.cc",
        "patchSetId": 6
      },
      "lineNbr": 233,
      "author": {
        "id": 1178124
      },
      "writtenOn": "2017-10-07T21:30:34Z",
      "side": 1,
      "message": "nit: make this a compile-time constant, e.g.:\n#if defined(_WIN64)\n  constexpr bool kSelf32 \u003d false;\n#else\n  constexpr bool kSelf32 \u003d true;\n#endif",
      "revId": "e73eb23cedbe138500aa369316a5dd247b7c2cfb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7a606a12_a5cbd195",
        "filename": "chrome_elf/whitelist/whitelist_ime.cc",
        "patchSetId": 6
      },
      "lineNbr": 245,
      "author": {
        "id": 1178124
      },
      "writtenOn": "2017-10-07T21:30:34Z",
      "side": 1,
      "message": "nit: do the wcslen computation once outside of the loop. alternatively, make a kGuidLength constant up near the definition of kMicrosoftImeGuids so that no call to wcslen is needed.",
      "range": {
        "startLine": 245,
        "startChar": 34,
        "endLine": 245,
        "endChar": 63
      },
      "revId": "e73eb23cedbe138500aa369316a5dd247b7c2cfb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d51ccb92_2b090fb1",
        "filename": "chrome_elf/whitelist/whitelist_ime.cc",
        "patchSetId": 6
      },
      "lineNbr": 246,
      "author": {
        "id": 1178124
      },
      "writtenOn": "2017-10-07T21:30:34Z",
      "side": 1,
      "message": "i\u0027m not sure it makes sense to assert on bogus data in the registry. do you really want Chrome to crash in this case?",
      "revId": "e73eb23cedbe138500aa369316a5dd247b7c2cfb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "56e55166_42bf387f",
        "filename": "chrome_elf/whitelist/whitelist_ime.cc",
        "patchSetId": 6
      },
      "lineNbr": 257,
      "author": {
        "id": 1178124
      },
      "writtenOn": "2017-10-07T21:30:34Z",
      "side": 1,
      "message": "here, too -- should Chrome crash if, for example, a DLL\u0027s registration was left behind when it was uninstalled?",
      "revId": "e73eb23cedbe138500aa369316a5dd247b7c2cfb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7610c434_35080de6",
        "filename": "chrome_elf/whitelist/whitelist_ime.cc",
        "patchSetId": 6
      },
      "lineNbr": 271,
      "author": {
        "id": 1178124
      },
      "writtenOn": "2017-10-07T21:30:34Z",
      "side": 1,
      "message": "should this ever happen? something in my brain is telling me that the registry redirection stuff should mean that 32-bit procs only see registration for 32-bit DLLs and vice-versa. apologies if this is a naive question.",
      "revId": "e73eb23cedbe138500aa369316a5dd247b7c2cfb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "75ff59a3_106443fa",
        "filename": "chrome_elf/whitelist/whitelist_ime.cc",
        "patchSetId": 6
      },
      "lineNbr": 275,
      "author": {
        "id": 1178124
      },
      "writtenOn": "2017-10-07T21:30:34Z",
      "side": 1,
      "message": "move the strings into the new instance:\n  ...-\u003eemplace_back(std::move(subkey_name), ..., std::move(dll_path));",
      "revId": "e73eb23cedbe138500aa369316a5dd247b7c2cfb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "369ac098_f90010ee",
        "filename": "chrome_elf/whitelist/whitelist_ime.h",
        "patchSetId": 6
      },
      "lineNbr": 10,
      "author": {
        "id": 1178124
      },
      "writtenOn": "2017-10-07T21:30:34Z",
      "side": 1,
      "message": "this looks like a good use for \"enum class\" (unless the integer values are significant -- are they?). how about:\nenum class IMEStatus {\n  kSuccess,\n  kErrorGeneric,\n  ...\n};\nnote that each value doesn\u0027t need a prefix (e.g., \"Ime\") for disambiguation when \"enum class\" is used.",
      "revId": "e73eb23cedbe138500aa369316a5dd247b7c2cfb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "69a4c796_944ad8c3",
        "filename": "chrome_elf/whitelist/whitelist_ime_unittest.cc",
        "patchSetId": 6
      },
      "lineNbr": 16,
      "author": {
        "id": 1178124
      },
      "writtenOn": "2017-10-07T21:30:34Z",
      "side": 1,
      "message": "nit: wrap this in the whitelist namespace so you can get rid of \"whitelist::\" everywhere below.",
      "revId": "e73eb23cedbe138500aa369316a5dd247b7c2cfb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5a4e8246_32c92c54",
        "filename": "chrome_elf/whitelist/whitelist_ime_unittest.cc",
        "patchSetId": 6
      },
      "lineNbr": 28,
      "author": {
        "id": 1178124
      },
      "writtenOn": "2017-10-07T21:30:34Z",
      "side": 1,
      "message": "nit: pull this line out of both sides of the if/else as:\n  ASSERT_TRUE(nt::SetTestingOverride(key, temp));\nand then you can nix the braces on the if/else. actually, i like this even more:\n  HKEY root \u003d (key \u003d\u003d nt::HKCU ? HKEY_CURRENT_USER : HKEY_LOCAL_MACHINE);\n  ASSERT_NO_FATAL_FAILURE(rom-\u003eOverrideRegistry(root, \u0026temp));\n  ASSERT_TRUE(nt::SetTestingOverride(key, temp));",
      "revId": "e73eb23cedbe138500aa369316a5dd247b7c2cfb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6f32e3ed_971b1685",
        "filename": "chrome_elf/whitelist/whitelist_ime_unittest.cc",
        "patchSetId": 6
      },
      "lineNbr": 37,
      "author": {
        "id": 1178124
      },
      "writtenOn": "2017-10-07T21:30:34Z",
      "side": 1,
      "message": "can these four lines be:\n  ASSERT_TRUE(nt::SetTestingOverride(key, base::string16()));",
      "revId": "e73eb23cedbe138500aa369316a5dd247b7c2cfb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bd24f020_723348ac",
        "filename": "chrome_elf/whitelist/whitelist_ime_unittest.cc",
        "patchSetId": 6
      },
      "lineNbr": 97,
      "author": {
        "id": 1178124
      },
      "writtenOn": "2017-10-07T21:30:34Z",
      "side": 1,
      "message": "nit: add braces when the conditional spans multiple lines",
      "revId": "e73eb23cedbe138500aa369316a5dd247b7c2cfb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "72e2926f_6ebe9570",
        "filename": "chrome_elf/whitelist/whitelist_ime_unittest.cc",
        "patchSetId": 6
      },
      "lineNbr": 114,
      "author": {
        "id": 1178124
      },
      "writtenOn": "2017-10-07T21:30:34Z",
      "side": 1,
      "message": "nit: inline the call to initIMEs here so that the log in case of failure shows \"InitIMEs()\" rather than \"status\".",
      "revId": "e73eb23cedbe138500aa369316a5dd247b7c2cfb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "465c7bda_36226f5d",
        "filename": "chrome_elf/whitelist/whitelist_ime_unittest.cc",
        "patchSetId": 6
      },
      "lineNbr": 138,
      "author": {
        "id": 1178124
      },
      "writtenOn": "2017-10-07T21:30:34Z",
      "side": 1,
      "message": "should this be ASSERT rather than EXPECT (i.e., is there any point in the test continuing if this fails)? if so, how about making RegisterFakeIme a void fn, use ASSERT_NO_FATAL_FAILURE here, and sprinkle ASSERT_FOO liberally within RegisterFakeIme in place of early returns?",
      "revId": "e73eb23cedbe138500aa369316a5dd247b7c2cfb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "56c1ecd0_31305c5c",
        "filename": "chrome_elf/whitelist/whitelist_ime_unittest.cc",
        "patchSetId": 6
      },
      "lineNbr": 139,
      "author": {
        "id": 1178124
      },
      "writtenOn": "2017-10-07T21:30:34Z",
      "side": 1,
      "message": "similar comments here w.r.t. EXPECT vs ASSERT.",
      "revId": "e73eb23cedbe138500aa369316a5dd247b7c2cfb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8d55e381_67996de1",
        "filename": "chrome_elf/whitelist/whitelist_ime_unittest.cc",
        "patchSetId": 6
      },
      "lineNbr": 144,
      "author": {
        "id": 1178124
      },
      "writtenOn": "2017-10-07T21:30:34Z",
      "side": 1,
      "message": "should this check the ime list now?",
      "revId": "e73eb23cedbe138500aa369316a5dd247b7c2cfb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}