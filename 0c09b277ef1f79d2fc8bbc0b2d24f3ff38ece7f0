{
  "comments": [
    {
      "key": {
        "uuid": "10d44942_341e4324",
        "filename": "/COMMIT_MSG",
        "patchSetId": 8
      },
      "lineNbr": 39,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-08-30T21:32:46Z",
      "side": 1,
      "message": "Proxy, right?  (Might want to slightly rephrase this, since the subframe isn\u0027t expecting an RFH to be there for its non-local parent.)",
      "range": {
        "startLine": 39,
        "startChar": 22,
        "endLine": 39,
        "endChar": 25
      },
      "revId": "0c09b277ef1f79d2fc8bbc0b2d24f3ff38ece7f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "feee8e9a_b5192b76",
        "filename": "/COMMIT_MSG",
        "patchSetId": 8
      },
      "lineNbr": 39,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-08-30T23:58:18Z",
      "side": 1,
      "message": "Done, I rephrased this.  I wanted to say that the subframe\u0027s message should reach F\u0027s current RenderFrame which is still in a.com, but yes, it has to be sent through a proxy.",
      "parentUuid": "10d44942_341e4324",
      "range": {
        "startLine": 39,
        "startChar": 22,
        "endLine": 39,
        "endChar": 25
      },
      "revId": "0c09b277ef1f79d2fc8bbc0b2d24f3ff38ece7f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a6fec0c1_d88a524a",
        "filename": "content/browser/frame_host/frame_tree.cc",
        "patchSetId": 8
      },
      "lineNbr": 260,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-08-30T16:43:09Z",
      "side": 1,
      "message": "I modified NodesExcept to always include |source|, since the traversal here is really its only use case.  In one of my earlier attempts, I tried directly creating the proxy in CreateProxiesForNewRenderFrameHost after this walk, but that doesn\u0027t work because the proxy has to be created at the right position in the tree.  An alternative to this would be to introduce a previous_sibling reference into CreateFrameProxy.  This would avoid modifying NodesExcept and allow us to do the new proxy creation outside of this walk (e.g., in CreateProxiesForNewRenderFrameHost), but would require changing CreateFrameProxy and always passing the previous sibling just to handle this case, which I felt was a bit more complex.",
      "revId": "0c09b277ef1f79d2fc8bbc0b2d24f3ff38ece7f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "201194dd_3ee1eaff",
        "filename": "content/browser/frame_host/frame_tree.cc",
        "patchSetId": 8
      },
      "lineNbr": 260,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-08-30T21:32:46Z",
      "side": 1,
      "message": "I\u0027m fine with modifying it, at least if we can give it a more sensible name now.  :)",
      "parentUuid": "a6fec0c1_d88a524a",
      "revId": "0c09b277ef1f79d2fc8bbc0b2d24f3ff38ece7f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0b902d33_694e44e6",
        "filename": "content/browser/frame_host/frame_tree.cc",
        "patchSetId": 8
      },
      "lineNbr": 264,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-08-30T21:32:46Z",
      "side": 1,
      "message": "nit: The",
      "range": {
        "startLine": 264,
        "startChar": 9,
        "endLine": 264,
        "endChar": 12
      },
      "revId": "0c09b277ef1f79d2fc8bbc0b2d24f3ff38ece7f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e5418c73_4c499b29",
        "filename": "content/browser/frame_host/frame_tree.cc",
        "patchSetId": 8
      },
      "lineNbr": 264,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-08-30T23:58:18Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0b902d33_694e44e6",
      "range": {
        "startLine": 264,
        "startChar": 9,
        "endLine": 264,
        "endChar": 12
      },
      "revId": "0c09b277ef1f79d2fc8bbc0b2d24f3ff38ece7f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "278488af_932534c7",
        "filename": "content/browser/frame_host/frame_tree.cc",
        "patchSetId": 8
      },
      "lineNbr": 272,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-08-30T16:43:09Z",
      "side": 1,
      "message": "This lets us avoid the extra proxy in cases where no other frames can reach this one, e.g. cross-process navigations in a tab without openers or subframes, as the race isn\u0027t possible in that case.",
      "revId": "0c09b277ef1f79d2fc8bbc0b2d24f3ff38ece7f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "34a95580_0a3d76df",
        "filename": "content/browser/frame_host/frame_tree.cc",
        "patchSetId": 8
      },
      "lineNbr": 272,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-08-30T21:32:46Z",
      "side": 1,
      "message": "What about the case where a single tab on A starts going to a slow URL on B, but then adds a subframe to B after starting the navigation (in which case the subframe might commit first)?  I just confirmed that causes a crash (ce95c7802b86bdad, though it hasn\u0027t been processed yet), but it seems like it would skip creating a proxy here.\n\nI would imagine it\u0027s simpler to just always create the proxy, but does that create a problem in some cases?",
      "parentUuid": "278488af_932534c7",
      "revId": "0c09b277ef1f79d2fc8bbc0b2d24f3ff38ece7f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7d1dbdb8_aba89a3f",
        "filename": "content/browser/frame_host/frame_tree.cc",
        "patchSetId": 8
      },
      "lineNbr": 272,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-08-30T23:58:18Z",
      "side": 1,
      "message": "Yup - you\u0027re right, nice catch!  I noticed that many tests fall under the single-tab case and thought this optimization might be useful in general, but with your example I agree it doesn\u0027t make sense.  I changed this to just always create the proxy now.",
      "parentUuid": "34a95580_0a3d76df",
      "revId": "0c09b277ef1f79d2fc8bbc0b2d24f3ff38ece7f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "deb22440_fef3cb15",
        "filename": "content/browser/frame_host/frame_tree.cc",
        "patchSetId": 8
      },
      "lineNbr": 272,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-08-31T15:25:36Z",
      "side": 1,
      "message": "OK, this actually turned out to break a bunch more tests.  I think I fixed them with the latest PS, but it required a couple more changes:\n\n* This didn\u0027t work for WebUI (e.g., WebUIWebViewBrowserTest.ExecuteScriptCode), which unfortunately depends on calling render_view_host-\u003eGetMainFrame() -- which is now invalid after the view was created inactive and before it transitions to active.  To address this, I\u0027ve disabled this when we\u0027re switching BrowsingInstances - I don\u0027t think the race would be possible in that case.  Right?\n\n* A bunch of WebNavigationApiTest.* ran into https://crbug.com/760403, failing because provisional frame\u0027s initial document\u0027s URL was about:blank instead of empty.  So I just fixed this now in DocumentInit by checking Parent() vs. Owner(), which should be correct with provisional frames also, but I\u0027ll need to check with Daniel on whether that\u0027s ok.  There\u0027s also a failing layout test, http/tests/inspector-protocol/page/page-lifecycleEvents.js, on the latest trybot run, and I\u0027ll need to see whether that\u0027s related.\n\n* Two tests, WebContentsImplBrowserTest.GetSizeForNewRenderView and BrowserTest.GetSizeForNewRenderView, weren\u0027t getting RenderViewCreated in their size-monitoring observers for a RVH transitioning to active.  I fixed the observers to monitor RenderFrameCreated for main frames instead.  It appears that the size itself is still wrong on Mac, so I still need to investigate that.\n\nThe change to not use a proxy when the current host is not live isn\u0027t required, but something I noticed that might make sense -- because following the logic for that case, we\u0027ll immediately run this code a little later (in GetFrameHostForNavigation or UpdateStateForNavigate):\n\n    if (!render_frame_host_-\u003eIsRenderFrameLive()) {\n      // ...\n      if (GetRenderFrameProxyHost(dest_site_instance.get())) {\n        navigation_rfh-\u003eSend(\n            new FrameMsg_SwapIn(navigation_rfh-\u003eGetRoutingID()));\n      }\n      CommitPending();\n\nwhich will destroy the proxy right after we create it and send the extra SwapIn.  Given this, I think creating the proxy isn\u0027t really necessary.  I noticed we follow this path on initial navigations in several tests.  If we still wanted to still do it for consistency though, I think we could.",
      "parentUuid": "7d1dbdb8_aba89a3f",
      "revId": "0c09b277ef1f79d2fc8bbc0b2d24f3ff38ece7f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e9297d5b_fb7d868f",
        "filename": "content/browser/frame_host/frame_tree.h",
        "patchSetId": 8
      },
      "lineNbr": 219,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-08-30T21:32:46Z",
      "side": 1,
      "message": "Maybe rename to NodesExceptSubtree, and rename node_to_skip to be something like node, now that we don\u0027t skip it?",
      "revId": "0c09b277ef1f79d2fc8bbc0b2d24f3ff38ece7f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "85ba042c_c3e82e88",
        "filename": "content/browser/frame_host/frame_tree.h",
        "patchSetId": 8
      },
      "lineNbr": 219,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-08-30T23:58:18Z",
      "side": 1,
      "message": "Good idea, done.  Also changed NodeIterator and NodeRange to use root_of_subtree_to_skip, since just |node| would\u0027ve been confusing there.",
      "parentUuid": "e9297d5b_fb7d868f",
      "revId": "0c09b277ef1f79d2fc8bbc0b2d24f3ff38ece7f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "aa3ab8e3_2e4c1f7c",
        "filename": "content/browser/frame_host/render_frame_host_manager.cc",
        "patchSetId": 8
      },
      "lineNbr": 1607,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-08-30T21:32:46Z",
      "side": 1,
      "message": "Side question: Is it possible for frames in the same tree to be in different BrowsingInstances?  I was under the impression we don\u0027t allow that.",
      "revId": "0c09b277ef1f79d2fc8bbc0b2d24f3ff38ece7f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d6041b36_8a368908",
        "filename": "content/browser/frame_host/render_frame_host_manager.cc",
        "patchSetId": 8
      },
      "lineNbr": 1607,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-08-30T23:58:18Z",
      "side": 1,
      "message": "I\u0027m curious about that myself: the BI check predated my time :), but I\u0027m not aware of any cases where we would allow it.  Let\u0027s clean this up in a separate CL.",
      "parentUuid": "aa3ab8e3_2e4c1f7c",
      "revId": "0c09b277ef1f79d2fc8bbc0b2d24f3ff38ece7f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a589c230_77a7bc51",
        "filename": "content/browser/frame_host/render_frame_host_manager_browsertest.cc",
        "patchSetId": 8
      },
      "lineNbr": 2592,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-08-30T16:43:09Z",
      "side": 1,
      "message": "This is https://crbug.com/760403. :(  I changed this to not block this CL on that bug, since the test isn\u0027t really about this behavior, and the bug doesn\u0027t seem like a major issue - we can change it back or introduce a new test along with the bug fix.  But let me know if you think it\u0027s worth fixing before this CL lands.",
      "revId": "0c09b277ef1f79d2fc8bbc0b2d24f3ff38ece7f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dc06a264_b265c54a",
        "filename": "content/browser/frame_host/render_frame_host_manager_browsertest.cc",
        "patchSetId": 8
      },
      "lineNbr": 2592,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-08-30T21:32:46Z",
      "side": 1,
      "message": "Yeah, we can solve it later in that bug.",
      "parentUuid": "a589c230_77a7bc51",
      "revId": "0c09b277ef1f79d2fc8bbc0b2d24f3ff38ece7f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fe7403af_6f8c21aa",
        "filename": "content/browser/site_per_process_browsertest.cc",
        "patchSetId": 8
      },
      "lineNbr": 5487,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-08-30T16:43:09Z",
      "side": 1,
      "message": "I think we just got lucky here before -- the test should\u0027ve really checked both process ID and routing ID.  This failed because routing IDs were now assigned in slightly different order in this test, causing them to be the same in the two processes.",
      "revId": "0c09b277ef1f79d2fc8bbc0b2d24f3ff38ece7f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8d5ae8f9_0dd26979",
        "filename": "content/browser/site_per_process_browsertest.cc",
        "patchSetId": 8
      },
      "lineNbr": 5487,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-08-30T21:32:46Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "fe7403af_6f8c21aa",
      "revId": "0c09b277ef1f79d2fc8bbc0b2d24f3ff38ece7f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "489606fa_43e2ccd4",
        "filename": "content/browser/site_per_process_browsertest.cc",
        "patchSetId": 8
      },
      "lineNbr": 11120,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-08-30T21:32:46Z",
      "side": 1,
      "message": "s/is/in/",
      "range": {
        "startLine": 11120,
        "startChar": 31,
        "endLine": 11120,
        "endChar": 33
      },
      "revId": "0c09b277ef1f79d2fc8bbc0b2d24f3ff38ece7f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3fc8e387_9e423da0",
        "filename": "content/browser/site_per_process_browsertest.cc",
        "patchSetId": 8
      },
      "lineNbr": 11120,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-08-30T23:58:18Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "489606fa_43e2ccd4",
      "range": {
        "startLine": 11120,
        "startChar": 31,
        "endLine": 11120,
        "endChar": 33
      },
      "revId": "0c09b277ef1f79d2fc8bbc0b2d24f3ff38ece7f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "359309ca_cda92a87",
        "filename": "content/renderer/render_frame_impl.cc",
        "patchSetId": 8
      },
      "lineNbr": 1029,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-08-30T21:32:46Z",
      "side": 1,
      "message": "Can we hit the same CHECK failure in this post-crash case?  For example, tab 1 on a.com opens tab 2 to b.com.  Tab 2 crashes.  The user starts navigating tab 1 to b.com/slow, which creates a local RenderFrame in the new b.com process.  Before it commits, they reload tab 2 to b.com, which needs an opener proxy in tab 1 until/if tab 1 commits.",
      "revId": "0c09b277ef1f79d2fc8bbc0b2d24f3ff38ece7f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9f4c6795_2f801da3",
        "filename": "content/renderer/render_frame_impl.cc",
        "patchSetId": 8
      },
      "lineNbr": 1029,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-08-30T23:58:18Z",
      "side": 1,
      "message": "Good question - I don\u0027t think so: if tab 1 opens tab 2 to b.com, that will create a proxy for tab 1 in b.com.  When tab 2 crashes, that proxy will become non-live, but the RFPH will still exist.  So, when the user navigates to b.com/slow in tab 1, that will utilize the remote-to-local path and not this one, and make the RFPH live before creating the RenderFrame.  When tab 2 is reloaded to b.com, it\u0027ll find that opener proxy.  I\u0027ve just verified that this works manually.\n\nI\u0027ve tried something like this before, but using b.com/slow in a subframe, so that it really needs the parent here rather than going through CreateMainFrame.  This also worked for the same reason: the RFPHs stay around after the crash and are reinitialized as needed.",
      "parentUuid": "359309ca_cda92a87",
      "revId": "0c09b277ef1f79d2fc8bbc0b2d24f3ff38ece7f0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}