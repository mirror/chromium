{
  "comments": [
    {
      "key": {
        "uuid": "fbb65591_b632a8b5",
        "filename": "cc/paint/display_item_list.cc",
        "patchSetId": 4
      },
      "lineNbr": 130,
      "author": {
        "id": 1115895
      },
      "writtenOn": "2017-06-28T18:17:10Z",
      "side": 1,
      "message": "This could probably just be identity here, since this is tracing.  It doesn\u0027t really make conceptual sense to ask for the total matrix at each op.  It\u0027s supposed to be the matrix on the canvas when you started rastering an entire recorded set of ops.",
      "revId": "3f8fd72f205d045cf320b14acefc48191a5fd506",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bb42a7fb_7a868fcd",
        "filename": "cc/paint/display_item_list.cc",
        "patchSetId": 4
      },
      "lineNbr": 130,
      "author": {
        "id": 1002513
      },
      "writtenOn": "2017-06-28T18:47:38Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fbb65591_b632a8b5",
      "revId": "3f8fd72f205d045cf320b14acefc48191a5fd506",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6d774506_10b90177",
        "filename": "cc/paint/display_item_list.h",
        "patchSetId": 4
      },
      "lineNbr": 56,
      "author": {
        "id": 1115895
      },
      "writtenOn": "2017-06-28T18:17:10Z",
      "side": 1,
      "message": "It\u0027s a little sad to me to have to push all this templating goop out another level, but I don\u0027t really have a better thought here.  It is nice to use this level of indirection to make sure offsets are always pushed, though.",
      "revId": "3f8fd72f205d045cf320b14acefc48191a5fd506",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c2609b43_acadea8c",
        "filename": "cc/paint/display_item_list.h",
        "patchSetId": 4
      },
      "lineNbr": 56,
      "author": {
        "id": 1002513
      },
      "writtenOn": "2017-06-28T18:47:38Z",
      "side": 1,
      "message": "Yeah I initially felt that it was a bit of a hack, but I do really like the property that DIL doesn\u0027t expose POB anymore, which means that there is no way to do anything with the rtree/pob unless you go through these functions.",
      "parentUuid": "6d774506_10b90177",
      "revId": "3f8fd72f205d045cf320b14acefc48191a5fd506",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d86990ad_e0517b20",
        "filename": "cc/paint/display_item_list.h",
        "patchSetId": 4
      },
      "lineNbr": 56,
      "author": {
        "id": 1000887
      },
      "writtenOn": "2017-06-28T19:58:54Z",
      "side": 1,
      "message": "High level thought is: we should remain unmarried to these being the same push\u003cT\u003e templates as POB too, so we can consider diverging and making higher level things here that generate more/less ops. (like deferred saves)\n\nI have a nagging feeling that we need *some* outer API and this seems as good as any other. The assumption is blink/ui continue building POBs not DILs though, right? IOW DIL would only appear at the root of the recording APIs? Can you add some comments on the top of the class explaining its role vs POB?",
      "parentUuid": "c2609b43_acadea8c",
      "revId": "3f8fd72f205d045cf320b14acefc48191a5fd506",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "93b8c6da_872631bb",
        "filename": "cc/paint/display_item_list.h",
        "patchSetId": 4
      },
      "lineNbr": 199,
      "author": {
        "id": 1115895
      },
      "writtenOn": "2017-06-28T18:17:10Z",
      "side": 1,
      "message": "typo: op \u003d\u003e ops?",
      "revId": "3f8fd72f205d045cf320b14acefc48191a5fd506",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4291c233_5cb101c0",
        "filename": "cc/paint/display_item_list.h",
        "patchSetId": 4
      },
      "lineNbr": 199,
      "author": {
        "id": 1002513
      },
      "writtenOn": "2017-06-28T18:47:38Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "93b8c6da_872631bb",
      "revId": "3f8fd72f205d045cf320b14acefc48191a5fd506",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0f098a13_e8fa942d",
        "filename": "cc/paint/paint_op_buffer.h",
        "patchSetId": 4
      },
      "lineNbr": 856,
      "author": {
        "id": 1115895
      },
      "writtenOn": "2017-06-28T18:17:10Z",
      "side": 1,
      "message": "I\u0027m not quite sure I understand why this function exists.  Are you trying to say that the only way to playback with offsets is via Iterator?",
      "revId": "3f8fd72f205d045cf320b14acefc48191a5fd506",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3fefc997_e92bc4d9",
        "filename": "cc/paint/paint_op_buffer.h",
        "patchSetId": 4
      },
      "lineNbr": 856,
      "author": {
        "id": 1002513
      },
      "writtenOn": "2017-06-28T18:47:38Z",
      "side": 1,
      "message": "This is my attempt at protecting access to the offset iteration. Both the Iterator ctor(with offsets) and PaintOpBuffer::Playback(with offsets) are private with only DisplayItemList and SolidColorAnalyzer as friends. This just means that outside code can only do full playback (no offsets). For testing, I could\u0027ve friended each test but this seemed better? Or maybe I can just friend PaintOpBufferOffsetsTest... I did that instead.",
      "parentUuid": "0f098a13_e8fa942d",
      "revId": "3f8fd72f205d045cf320b14acefc48191a5fd506",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a5de054b_1c0b19da",
        "filename": "cc/paint/paint_op_buffer.h",
        "patchSetId": 4
      },
      "lineNbr": 861,
      "author": {
        "id": 1115895
      },
      "writtenOn": "2017-06-28T18:17:10Z",
      "side": 1,
      "message": "Do you think it makes sense to have two iterators? One that handles offsets and one that doesn\u0027t? I think they behave pretty differently internally and having them both in the same Iterator seems like it might make it more complicated.",
      "revId": "3f8fd72f205d045cf320b14acefc48191a5fd506",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8a7923b3_47bc6288",
        "filename": "cc/paint/paint_op_buffer.h",
        "patchSetId": 4
      },
      "lineNbr": 861,
      "author": {
        "id": 1002513
      },
      "writtenOn": "2017-06-28T18:47:38Z",
      "side": 1,
      "message": "Hmm, it makes it a bit awkward for things like SolidColorAnalyzer that takes the offsets as a parameter. Then it would have to either create this Iterator or OffsetIterator depending on whether things are null or not. I\u0027d kind of prefer to leave it as is, unless you feel strongly about it.",
      "parentUuid": "a5de054b_1c0b19da",
      "revId": "3f8fd72f205d045cf320b14acefc48191a5fd506",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a2af6425_6a0212ec",
        "filename": "cc/paint/paint_op_buffer.h",
        "patchSetId": 4
      },
      "lineNbr": 861,
      "author": {
        "id": 1115895
      },
      "writtenOn": "2017-06-28T19:01:03Z",
      "side": 1,
      "message": "Does that case in SolidColorAnalyzer where the rect contains the entire rtree and you optimize by not using all the offsets happen often? \u003c_\u003c",
      "parentUuid": "8a7923b3_47bc6288",
      "revId": "3f8fd72f205d045cf320b14acefc48191a5fd506",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d293c1e2_8671484f",
        "filename": "cc/paint/paint_op_buffer.h",
        "patchSetId": 4
      },
      "lineNbr": 861,
      "author": {
        "id": 1002513
      },
      "writtenOn": "2017-06-28T19:51:09Z",
      "side": 1,
      "message": "The specific optimization may not be that common, but we also analyze the full layers if they have less than 10 ops and that\u0027s pretty common I think for pages with a lot of layers",
      "parentUuid": "a2af6425_6a0212ec",
      "revId": "3f8fd72f205d045cf320b14acefc48191a5fd506",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}