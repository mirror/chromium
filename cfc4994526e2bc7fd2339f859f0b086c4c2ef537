{
  "comments": [
    {
      "key": {
        "uuid": "65d03e45_ce8e1939",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 7,
      "author": {
        "id": 1119250
      },
      "writtenOn": "2017-11-13T10:17:08Z",
      "side": 1,
      "message": "Can we get a better patch description please?",
      "range": {
        "startLine": 7,
        "startChar": 15,
        "endLine": 7,
        "endChar": 21
      },
      "revId": "cfc4994526e2bc7fd2339f859f0b086c4c2ef537",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c324148f_f9345263",
        "filename": "headless/test/headless_render_browsertest.cc",
        "patchSetId": 3
      },
      "lineNbr": 146,
      "author": {
        "id": 1119250
      },
      "writtenOn": "2017-11-13T10:17:08Z",
      "side": 1,
      "message": "Why pos +1?  I\u0027d have thought the title element would contain the actual value.\n\nAlso lets introduce a gmock matcher for NodeValue\n\nMATCHER_P(NodeValue, expected, \"\") { return arg-\u003eGetNodeValue() \u003d\u003d expected; }\n\nSo we can\n\nEXPECT_THAT(dom, ElementsAre(NodeValue(\"JavaScript is on\")));",
      "range": {
        "startLine": 146,
        "startChar": 50,
        "endLine": 146,
        "endChar": 51
      },
      "revId": "cfc4994526e2bc7fd2339f859f0b086c4c2ef537",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "90e8d10d_abc27602",
        "filename": "headless/test/headless_render_browsertest.cc",
        "patchSetId": 3
      },
      "lineNbr": 146,
      "author": {
        "id": 1237241
      },
      "writtenOn": "2017-11-16T04:55:29Z",
      "side": 1,
      "message": "Text contents between \u003c\u003e...\u003c/\u003e is a separate node with different type. It\u0027s this way in most XML libraries too.\n\nAdded matcher.",
      "parentUuid": "c324148f_f9345263",
      "range": {
        "startLine": 146,
        "startChar": 50,
        "endLine": 146,
        "endChar": 51
      },
      "revId": "cfc4994526e2bc7fd2339f859f0b086c4c2ef537",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f574186f_aa0719d2",
        "filename": "headless/test/headless_render_browsertest.cc",
        "patchSetId": 3
      },
      "lineNbr": 153,
      "author": {
        "id": 1119250
      },
      "writtenOn": "2017-11-13T10:17:08Z",
      "side": 1,
      "message": "This test doesn\u0027t seem to disable js.",
      "range": {
        "startLine": 153,
        "startChar": 6,
        "endLine": 153,
        "endChar": 40
      },
      "revId": "cfc4994526e2bc7fd2339f859f0b086c4c2ef537",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "40294763_3c18e0e7",
        "filename": "headless/test/headless_render_browsertest.cc",
        "patchSetId": 3
      },
      "lineNbr": 153,
      "author": {
        "id": 1237241
      },
      "writtenOn": "2017-11-16T04:55:29Z",
      "side": 1,
      "message": "Oh, right. Fixed. Thanks!",
      "parentUuid": "f574186f_aa0719d2",
      "range": {
        "startLine": 153,
        "startChar": 6,
        "endLine": 153,
        "endChar": 40
      },
      "revId": "cfc4994526e2bc7fd2339f859f0b086c4c2ef537",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a8c5b896_f6c8c821",
        "filename": "headless/test/headless_render_browsertest.cc",
        "patchSetId": 3
      },
      "lineNbr": 168,
      "author": {
        "id": 1119250
      },
      "writtenOn": "2017-11-13T10:17:08Z",
      "side": 1,
      "message": "EXPECT_THAT(dom, ElementsAre(NodeValue(\"JavaScript is off\")));",
      "range": {
        "startLine": 168,
        "startChar": 16,
        "endLine": 168,
        "endChar": 17
      },
      "revId": "cfc4994526e2bc7fd2339f859f0b086c4c2ef537",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f1a79187_2a39f2ed",
        "filename": "headless/test/headless_render_browsertest.cc",
        "patchSetId": 3
      },
      "lineNbr": 168,
      "author": {
        "id": 1237241
      },
      "writtenOn": "2017-11-16T04:55:29Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a8c5b896_f6c8c821",
      "range": {
        "startLine": 168,
        "startChar": 16,
        "endLine": 168,
        "endChar": 17
      },
      "revId": "cfc4994526e2bc7fd2339f859f0b086c4c2ef537",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6a18c888_0552ff34",
        "filename": "headless/test/headless_render_browsertest.cc",
        "patchSetId": 3
      },
      "lineNbr": 199,
      "author": {
        "id": 1119250
      },
      "writtenOn": "2017-11-13T10:17:08Z",
      "side": 1,
      "message": "MATCHER_P(StringValue, expected, \"\") { return arg-\u003eGetType() \u003d\u003d base::Value::Type::STRING \u0026\u0026 arg-\u003eGetString() \u003d\u003d expected; }\n\nEXPECT_THAT(params.GetArgs(), ElementsAre(StringValue(\"Hello, Script!\")));",
      "range": {
        "startLine": 199,
        "startChar": 4,
        "endLine": 199,
        "endChar": 16
      },
      "revId": "cfc4994526e2bc7fd2339f859f0b086c4c2ef537",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7b5668ce_2626624c",
        "filename": "headless/test/headless_render_browsertest.cc",
        "patchSetId": 3
      },
      "lineNbr": 199,
      "author": {
        "id": 1237241
      },
      "writtenOn": "2017-11-16T04:55:29Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6a18c888_0552ff34",
      "range": {
        "startLine": 199,
        "startChar": 4,
        "endLine": 199,
        "endChar": 16
      },
      "revId": "cfc4994526e2bc7fd2339f859f0b086c4c2ef537",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "86068011_e973c600",
        "filename": "headless/test/headless_render_browsertest.cc",
        "patchSetId": 3
      },
      "lineNbr": 214,
      "author": {
        "id": 1119250
      },
      "writtenOn": "2017-11-13T10:17:08Z",
      "side": 1,
      "message": "I think we can make this more readable by using some more gtest features:\n\nusing testing::ElementsAre;\nusing testing::MatchesRegex;\nusing testing::StartsWith;\n\nEXPECT_THAT(messages_, \n            ElementsAre(StartsWith(\"Uncaught SyntaxError:\"),\n                        MatchesRegex(\"Uncaught ReferenceError:.*func1\"),\n                        MatchesRegex(\"Uncaught ReferenceError:.*func2\"),\n                        MatchesRegex(\"Uncaught ReferenceError:.*func3\")));",
      "range": {
        "startLine": 214,
        "startChar": 18,
        "endLine": 214,
        "endChar": 27
      },
      "revId": "cfc4994526e2bc7fd2339f859f0b086c4c2ef537",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b49acecd_cd3ae55c",
        "filename": "headless/test/headless_render_browsertest.cc",
        "patchSetId": 3
      },
      "lineNbr": 214,
      "author": {
        "id": 1237241
      },
      "writtenOn": "2017-11-16T04:55:29Z",
      "side": 1,
      "message": "Neat! I thought there might be something like that. Thanks!",
      "parentUuid": "86068011_e973c600",
      "range": {
        "startLine": 214,
        "startChar": 18,
        "endLine": 214,
        "endChar": 27
      },
      "revId": "cfc4994526e2bc7fd2339f859f0b086c4c2ef537",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}