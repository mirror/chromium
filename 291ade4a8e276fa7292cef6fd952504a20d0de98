{
  "comments": [
    {
      "key": {
        "uuid": "fef39416_a87e041c",
        "filename": "third_party/WebKit/Source/core/editing/EditingUtilities.cpp",
        "patchSetId": 11
      },
      "lineNbr": 127,
      "author": {
        "id": 1144165
      },
      "writtenOn": "2017-06-09T18:20:36Z",
      "side": 1,
      "message": "We should check |i + 1 \u003c length| here.",
      "revId": "291ade4a8e276fa7292cef6fd952504a20d0de98",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "77079da1_ef1a0591",
        "filename": "third_party/WebKit/Source/core/editing/EditingUtilities.cpp",
        "patchSetId": 11
      },
      "lineNbr": 127,
      "author": {
        "id": 1116039
      },
      "writtenOn": "2017-06-09T18:22:38Z",
      "side": 1,
      "message": "This check happens inside WTF::String.\n\nhttps://cs.chromium.org/chromium/src/third_party/WebKit/Source/platform/wtf/text/WTFString.h?q\u003doperator%5B%5D+package:%5Echromium$\u0026l\u003d149",
      "parentUuid": "fef39416_a87e041c",
      "revId": "291ade4a8e276fa7292cef6fd952504a20d0de98",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2aeb7ba3_89903699",
        "filename": "third_party/WebKit/Source/core/editing/EditingUtilities.cpp",
        "patchSetId": 11
      },
      "lineNbr": 127,
      "author": {
        "id": 1144165
      },
      "writtenOn": "2017-06-09T18:31:17Z",
      "side": 1,
      "message": "Didn\u0027t know about that...\n\nSomewhat off-topic: is it really good to implicitly handle out-of-bound access to an array? I\u0027ve never written any code in this pattern...",
      "parentUuid": "77079da1_ef1a0591",
      "revId": "291ade4a8e276fa7292cef6fd952504a20d0de98",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9a8cbbcf_f9cb9a2a",
        "filename": "third_party/WebKit/Source/core/editing/EditingUtilities.cpp",
        "patchSetId": 11
      },
      "lineNbr": 127,
      "author": {
        "id": 1116039
      },
      "writtenOn": "2017-06-09T18:38:35Z",
      "side": 1,
      "message": "For arbitrary out-of-bounds, perhaps not.  But I think any C++ string class should report null terminator at index \u003d\u003d length (including std::string).",
      "parentUuid": "2aeb7ba3_89903699",
      "revId": "291ade4a8e276fa7292cef6fd952504a20d0de98",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0b83b126_df94232f",
        "filename": "third_party/WebKit/Source/core/editing/EditingUtilities.cpp",
        "patchSetId": 11
      },
      "lineNbr": 127,
      "author": {
        "id": 1002258
      },
      "writtenOn": "2017-06-12T02:30:42Z",
      "side": 1,
      "message": "I am not fan of index \u003d\u003d size() access, but the spec allows[1]... :-\u003c\n\nExcerpt:\nIf pos \u003d\u003d size(), a reference to the character with value CharT() (the null character) is returned.\n\nFor the first (non-const) version, the behavior is undefined if this character is modified to any value other than charT().\n\n\u003d\u003d\u003d\u003d\nIn this case, we use |const String\u0026|, it is OK to return null-character.\n\n\n[1] http://en.cppreference.com/w/cpp/string/basic_string/operator_at",
      "parentUuid": "9a8cbbcf_f9cb9a2a",
      "revId": "291ade4a8e276fa7292cef6fd952504a20d0de98",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "070187ba_856d670c",
        "filename": "third_party/WebKit/Source/core/editing/EditingUtilities.cpp",
        "patchSetId": 11
      },
      "lineNbr": 127,
      "author": {
        "id": 1116039
      },
      "writtenOn": "2017-06-13T00:02:57Z",
      "side": 1,
      "message": "Added length check for the sake of being explicit.",
      "parentUuid": "0b83b126_df94232f",
      "revId": "291ade4a8e276fa7292cef6fd952504a20d0de98",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}