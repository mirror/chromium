{
  "comments": [
    {
      "key": {
        "uuid": "965c44b8_489698bf",
        "filename": "ash/shelf/shelf_controller.cc",
        "patchSetId": 1
      },
      "lineNbr": 252,
      "author": {
        "id": 1104639
      },
      "writtenOn": "2017-11-01T19:33:43Z",
      "side": 1,
      "message": "Hmm. It seems a little unfortunate to require users to explicitly use the Proxy type.",
      "revId": "dc2b62e9b9ac0db34891ea4675c9010daf3d0862",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "88a205b4_1b1a7219",
        "filename": "ash/shelf/shelf_controller.cc",
        "patchSetId": 1
      },
      "lineNbr": 252,
      "author": {
        "id": 1113896
      },
      "writtenOn": "2017-11-01T19:54:45Z",
      "side": 1,
      "message": "I was also disappointed to find that the compiler couldn\u0027t figure this out itself. Overall I think this is fine. Clients should either be using a FooPtr or FooProxy*. If they are using a Foo* then they should have a good reason for needing to support direct calls to an implementation as that implies different semantics.",
      "parentUuid": "965c44b8_489698bf",
      "revId": "dc2b62e9b9ac0db34891ea4675c9010daf3d0862",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "301c0fd2_25247e8f",
        "filename": "ash/shelf/shelf_controller.cc",
        "patchSetId": 1
      },
      "lineNbr": 252,
      "author": {
        "id": 1129011
      },
      "writtenOn": "2017-11-01T20:05:57Z",
      "side": 1,
      "message": "Drive by: can we use \u0027auto\u0027 instead of a specific type? That\u0027s C++14 feature, but Chrome switched to C++14 not long time ago.",
      "parentUuid": "88a205b4_1b1a7219",
      "revId": "dc2b62e9b9ac0db34891ea4675c9010daf3d0862",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b26de50d_5604a5e3",
        "filename": "ash/shelf/shelf_controller.cc",
        "patchSetId": 1
      },
      "lineNbr": 252,
      "author": {
        "id": 1113896
      },
      "writtenOn": "2017-11-01T20:39:57Z",
      "side": 1,
      "message": "I could have sworn there was a prohibition on using auto as a lambda function parameter type but I can\u0027t find it documented anywhere. I think that using auto* in this case is reasonable since it is comparable to the following which is allowed:\n\nfor (auto* observer : observers_)\n  observer-\u003eOnShelfItemAdded(index, item);",
      "parentUuid": "301c0fd2_25247e8f",
      "revId": "dc2b62e9b9ac0db34891ea4675c9010daf3d0862",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4088594b_bd91990e",
        "filename": "ash/shelf/shelf_controller.cc",
        "patchSetId": 1
      },
      "lineNbr": 252,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-11-01T21:19:26Z",
      "side": 1,
      "message": "AIUI, using generic lambdas is blocked on a clang bug: see https://chromium-review.googlesource.com/c/chromium/src/+/594468#message-f6f8ef63d31aaf53827b757ada748fea63df5623",
      "parentUuid": "b26de50d_5604a5e3",
      "revId": "dc2b62e9b9ac0db34891ea4675c9010daf3d0862",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "39ddc9e7_f2b72c91",
        "filename": "ash/shelf/shelf_controller.cc",
        "patchSetId": 1
      },
      "lineNbr": 252,
      "author": {
        "id": 1113896
      },
      "writtenOn": "2017-11-01T21:25:46Z",
      "side": 1,
      "message": "Am I right in thinking that doesn\u0027t apply in this case?",
      "parentUuid": "4088594b_bd91990e",
      "revId": "dc2b62e9b9ac0db34891ea4675c9010daf3d0862",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e8df2737_391dc06d",
        "filename": "ash/shelf/shelf_controller.cc",
        "patchSetId": 1
      },
      "lineNbr": 252,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-11-02T00:09:11Z",
      "side": 1,
      "message": "I think it doesn\u0027t apply here because ForAllPtrs isn\u0027t constexpr. However, that doesn\u0027t change the fact that generic lambdas are not yet allowed. I think it would be better to check with a C++ styleguide OWNER if you\u0027d like to proceed as is with generic lambdas.\n\nAlso, this requires that the caller of ForAllPtrs() use generic lambdas (or write *Proxy), right? So it seems like it\u0027d be very easy to not have the efficient pattern.",
      "parentUuid": "39ddc9e7_f2b72c91",
      "revId": "dc2b62e9b9ac0db34891ea4675c9010daf3d0862",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}