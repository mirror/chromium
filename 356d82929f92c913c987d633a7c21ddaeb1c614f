{
  "comments": [
    {
      "key": {
        "uuid": "2c497cd9_cbbef52d",
        "filename": "third_party/WebKit/Source/core/animation/CompositorMutatorImpl.cpp",
        "patchSetId": 29
      },
      "lineNbr": 60,
      "author": {
        "id": 1000279
      },
      "writtenOn": "2017-11-01T05:02:42Z",
      "side": 1,
      "message": "This can cause deadlock - we can\u0027t hold it while we are waiting for the worklet to complete a mutate.",
      "revId": "356d82929f92c913c987d633a7c21ddaeb1c614f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3c226443_b2d24fec",
        "filename": "third_party/WebKit/Source/core/animation/CompositorMutatorImpl.cpp",
        "patchSetId": 29
      },
      "lineNbr": 67,
      "author": {
        "id": 1001365
      },
      "writtenOn": "2017-10-31T21:56:14Z",
      "side": 1,
      "message": "This method is used by cc right? Since it\u0027s only observing rather than changing anything could we do this without a lock? i.e. observe a bool that gets updated when register / unregister is called. As far as I can tell it\u0027s an optimization to not call when not necessary so it should be fine if we get a wrong answer when it has just changed.",
      "revId": "356d82929f92c913c987d633a7c21ddaeb1c614f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ba4b5541_f6bec99c",
        "filename": "third_party/WebKit/Source/core/animation/CompositorMutatorImpl.cpp",
        "patchSetId": 29
      },
      "lineNbr": 67,
      "author": {
        "id": 1000279
      },
      "writtenOn": "2017-11-01T05:02:42Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "3c226443_b2d24fec",
      "revId": "356d82929f92c913c987d633a7c21ddaeb1c614f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "18d7e2fd_0ade7638",
        "filename": "third_party/WebKit/Source/core/animation/CompositorMutatorImpl.h",
        "patchSetId": 29
      },
      "lineNbr": 51,
      "author": {
        "id": 1001365
      },
      "writtenOn": "2017-10-31T21:56:14Z",
      "side": 1,
      "message": "Can we post messages to get the methods invoked on the same thread rather than locking?",
      "revId": "356d82929f92c913c987d633a7c21ddaeb1c614f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3efebac3_7d2f76ec",
        "filename": "third_party/WebKit/Source/core/animation/CompositorMutatorImpl.h",
        "patchSetId": 29
      },
      "lineNbr": 51,
      "author": {
        "id": 1000279
      },
      "writtenOn": "2017-11-01T05:02:42Z",
      "side": 1,
      "message": "Is there a pre-existing example of posting a task to the right scheduler for the compositor/impl thread?",
      "parentUuid": "18d7e2fd_0ade7638",
      "revId": "356d82929f92c913c987d633a7c21ddaeb1c614f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0d942559_5af93f68",
        "filename": "third_party/WebKit/Source/modules/animationworklet/AnimationWorkletProxyClientImpl.cpp",
        "patchSetId": 29
      },
      "lineNbr": 40,
      "author": {
        "id": 1125304
      },
      "writtenOn": "2017-10-31T21:16:45Z",
      "side": 1,
      "message": "Since you have switched to using a weak reference there is no cycle to break.\nPlease update this comment accordingly.",
      "range": {
        "startLine": 40,
        "startChar": 13,
        "endLine": 40,
        "endChar": 76
      },
      "revId": "356d82929f92c913c987d633a7c21ddaeb1c614f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9f2c3c3c_18e9b684",
        "filename": "third_party/WebKit/Source/modules/animationworklet/AnimationWorkletProxyClientImpl.cpp",
        "patchSetId": 29
      },
      "lineNbr": 40,
      "author": {
        "id": 1000279
      },
      "writtenOn": "2017-11-01T05:02:42Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0d942559_5af93f68",
      "range": {
        "startLine": 40,
        "startChar": 13,
        "endLine": 40,
        "endChar": 76
      },
      "revId": "356d82929f92c913c987d633a7c21ddaeb1c614f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "72e355ff_3a437eca",
        "filename": "third_party/WebKit/Source/modules/animationworklet/AnimationWorkletProxyClientImpl.cpp",
        "patchSetId": 29
      },
      "lineNbr": 58,
      "author": {
        "id": 1125304
      },
      "writtenOn": "2017-10-31T21:16:45Z",
      "side": 1,
      "message": "nit: I don\u0027t fully grok why this is needed. Can we just bind \nAnimationWorkletProxyClientImpl::MutateWithEvent directly and skip\nhaving this?\n\nThat way we can make MutateWithEvent private as well.",
      "range": {
        "startLine": 58,
        "startChar": 5,
        "endLine": 58,
        "endChar": 15
      },
      "revId": "356d82929f92c913c987d633a7c21ddaeb1c614f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "89f59f2c_1641249e",
        "filename": "third_party/WebKit/Source/modules/animationworklet/AnimationWorkletProxyClientImpl.cpp",
        "patchSetId": 29
      },
      "lineNbr": 58,
      "author": {
        "id": 1000279
      },
      "writtenOn": "2017-11-01T05:02:42Z",
      "side": 1,
      "message": "I don\u0027t see code presuming to pass \"this\" through bind equivalently to member invocation, but it appears a static function will do the job.",
      "parentUuid": "72e355ff_3a437eca",
      "range": {
        "startLine": 58,
        "startChar": 5,
        "endLine": 58,
        "endChar": 15
      },
      "revId": "356d82929f92c913c987d633a7c21ddaeb1c614f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5c2854f6_7d6ecfd1",
        "filename": "third_party/WebKit/Source/modules/animationworklet/AnimationWorkletProxyClientImpl.cpp",
        "patchSetId": 29
      },
      "lineNbr": 81,
      "author": {
        "id": 1125304
      },
      "writtenOn": "2017-10-31T21:16:45Z",
      "side": 1,
      "message": "I think we should be using CrossThreadBind instead of WTF:Bind here.\nThat has additional safeties around used of parameters across threads.\n\nBTW, there are some neat util functions that can be used for the first argument: \nWrapCrossThreadPersistent",
      "range": {
        "startLine": 81,
        "startChar": 12,
        "endLine": 81,
        "endChar": 33
      },
      "revId": "356d82929f92c913c987d633a7c21ddaeb1c614f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}