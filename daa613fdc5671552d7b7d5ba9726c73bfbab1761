{
  "comments": [
    {
      "key": {
        "uuid": "0896c403_0aeeea18",
        "filename": "content/browser/dom_storage/dom_storage_host.cc",
        "patchSetId": 5
      },
      "lineNbr": 35,
      "author": {
        "id": 1115965
      },
      "writtenOn": "2017-07-28T23:25:48Z",
      "side": 1,
      "message": "It\u0027s worth a comment here to describe that we only one to call namespace-\u003eOpenStorageArea() once for the process as a whole.",
      "revId": "daa613fdc5671552d7b7d5ba9726c73bfbab1761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d2ad45db_7645ac5e",
        "filename": "content/browser/dom_storage/dom_storage_host.cc",
        "patchSetId": 5
      },
      "lineNbr": 35,
      "author": {
        "id": 1125359
      },
      "writtenOn": "2017-07-29T01:23:35Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0896c403_0aeeea18",
      "revId": "daa613fdc5671552d7b7d5ba9726c73bfbab1761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "14fe6f63_135092f9",
        "filename": "content/browser/dom_storage/dom_storage_host.cc",
        "patchSetId": 5
      },
      "lineNbr": 106,
      "author": {
        "id": 1115965
      },
      "writtenOn": "2017-07-28T23:25:48Z",
      "side": 1,
      "message": "i think we might be able to do this with fewer code changes?\n\nbase::NullableString16 old_value;\nif (area-\u003ehas_keys_only())\n  old_value \u003d client_old_value;\n\n// and the rest can remain the same % old_value. vs -\u003e\n// wdyt?",
      "range": {
        "startLine": 106,
        "startChar": 25,
        "endLine": 106,
        "endChar": 34
      },
      "revId": "daa613fdc5671552d7b7d5ba9726c73bfbab1761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "36f761d0_cdcf321a",
        "filename": "content/browser/dom_storage/dom_storage_host.cc",
        "patchSetId": 5
      },
      "lineNbr": 106,
      "author": {
        "id": 1125359
      },
      "writtenOn": "2017-07-29T01:23:35Z",
      "side": 1,
      "message": "yeah that seems like the only way to tell if the old_value is correct. because of the race condition you mentioned below. Since I haven\u0027t updated DOMStorageArea yet, I will leave this value unused for now and use it in future CLs.",
      "parentUuid": "14fe6f63_135092f9",
      "range": {
        "startLine": 106,
        "startChar": 25,
        "endLine": 106,
        "endChar": 34
      },
      "revId": "daa613fdc5671552d7b7d5ba9726c73bfbab1761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a82e1e27_fe9736e4",
        "filename": "content/browser/dom_storage/dom_storage_host.cc",
        "patchSetId": 5
      },
      "lineNbr": 109,
      "author": {
        "id": 1115965
      },
      "writtenOn": "2017-07-28T23:25:48Z",
      "side": 1,
      "message": "I\u0027m not sure that\u0027s always true? I think there can be racey situations with messages in flight when the area is closed? Suppose we have this sequence of events...\n\nrendererA calls SetItem(k, valueA, ignoredClientOldValue)\nbrowsers sends mutationEventA(k, valueA, origOldValue)\nrendererA closes the connect\nrendererB calls SetItem(k, valueB, wrongClientOldValue)\nrendererB receives the mutationEventA(k, valueA, origOldValue) \u003c--- TOO LATE\nbrowser sends mutatuionEventB with (k, valueB, wrongClientOldValue) instead of valueA",
      "revId": "daa613fdc5671552d7b7d5ba9726c73bfbab1761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "289c7711_e8365279",
        "filename": "content/browser/dom_storage/dom_storage_host.cc",
        "patchSetId": 5
      },
      "lineNbr": 109,
      "author": {
        "id": 1125359
      },
      "writtenOn": "2017-07-29T01:23:35Z",
      "side": 1,
      "message": "um :( this means that we can never really set back to keys_only mode is at some point of time 2 renderers opened the database. Okay I will update the code for that.",
      "parentUuid": "a82e1e27_fe9736e4",
      "revId": "daa613fdc5671552d7b7d5ba9726c73bfbab1761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0f849a65_a1e4de9b",
        "filename": "content/browser/dom_storage/dom_storage_host.cc",
        "patchSetId": 5
      },
      "lineNbr": 109,
      "author": {
        "id": 1115965
      },
      "writtenOn": "2017-08-02T18:04:57Z",
      "side": 1,
      "message": "I think this means that the critieria for exactly when to switch keys_only on and off involves more than when the open count transitions between 1 and \u003e1. Once we know the only client has an up to date renderer side cache and no mutation events are inflight with potentially incorrect values, we can drop the browser side cache.\n\nHere\u0027s an idea about how to determine it\u0027s safe to drop it.\n\nWhen the count gets to 1, we want to drop the cache but we don\u0027t know it\u0027s safe yet. Once all messages in transit at this time are flush, it will be safe to do that. We can know when all messages have been flushed by sending a \u0027ping\u0027 to the rendered and waiting for a \u0027pong\u0027 in response.\n\n  when count is 1, send a message to the renderer\n  client-\u003eNotifyDroppingCache(drop_id)\n  the render replies by sending a message back\n  browser-\u003eContnueDroppingCache(drop_id)\n  upon receipt, if count is still 1 --\u003e drop it",
      "parentUuid": "289c7711_e8365279",
      "revId": "daa613fdc5671552d7b7d5ba9726c73bfbab1761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d35764af_dba458eb",
        "filename": "content/browser/dom_storage/dom_storage_host.cc",
        "patchSetId": 5
      },
      "lineNbr": 126,
      "author": {
        "id": 1115965
      },
      "writtenOn": "2017-07-28T23:25:48Z",
      "side": 1,
      "message": "ditto fewer code changes",
      "range": {
        "startLine": 126,
        "startChar": 17,
        "endLine": 126,
        "endChar": 26
      },
      "revId": "daa613fdc5671552d7b7d5ba9726c73bfbab1761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "161d852c_7773fcfa",
        "filename": "content/browser/dom_storage/dom_storage_host.cc",
        "patchSetId": 5
      },
      "lineNbr": 126,
      "author": {
        "id": 1125359
      },
      "writtenOn": "2017-07-29T01:23:35Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d35764af_dba458eb",
      "range": {
        "startLine": 126,
        "startChar": 17,
        "endLine": 126,
        "endChar": 26
      },
      "revId": "daa613fdc5671552d7b7d5ba9726c73bfbab1761",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}