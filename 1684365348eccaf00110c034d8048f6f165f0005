{
  "comments": [
    {
      "key": {
        "uuid": "c349de16_5875c288",
        "filename": "android_webview/browser/aw_print_manager.cc",
        "patchSetId": 4
      },
      "lineNbr": 91,
      "author": {
        "id": 1002169
      },
      "writtenOn": "2017-08-29T18:02:30Z",
      "side": 1,
      "message": "This Send is only called when there\u0027s a message deserialization error, so I don\u0027t think it really matters except to the extent that it\u0027s browser process attack surface.\n\nHowever, to be pendantically correct, I think what we need here is to dispatch to a helper object that Send\u0027s to |render_frame_host|.\n\nAs far as I can tell, the whole reason that DELAY_REPLY is used here is so that we can send the reply_msg via the right object -- we don\u0027t actually need to do an async reply.\n\nSo my recommendation here is to create a frame-scoped temporary helper class like this:\n\nstruct FrameDispatchHelper {\n  AwPrintManager manager;  // We are its friend.\n  RenderFrameHost* render_frame_host;\n\n  bool Send(IPC::Message* msg) { render_frame_host-\u003eSend(msg); }\n  \n  void OnScriptedPrint(...);\n  void OnGetDefaultPrintSettings(...);\n}\n\nThen, back in your OnMessageReceived function, have something like:\n\nbool AwPrintManager::OnMessageReceived(\n    const IPC::Message\u0026 message,\n    content::RenderFrameHost* render_frame_host) {\n  bool handled \u003d true;\n  FrameDispatchHelper helper \u003d {this, render_frame_host};\n  IPC_BEGIN_MESSAGE_MAP(AwPrintManager, message) /* no WITH_PARAM */\n    IPC_MESSAGE_FORWARD_DELAY_REPLY(PrintHostMsg_GetDefaultPrintSettings, \n        \u0026helper, FrameDispatchHelper::OnGetDefaultPrintSettings)\n...\n\n\nYou might be able to drop the DELAY_REPLY too, since it seems like the reply is actually always sent immediately.\n\nHere\u0027s an example of this pattern used elsewhere: https://cs.chromium.org/chromium/src/media/gpu/ipc/service/media_gpu_channel.cc?type\u003dcs\u0026q\u003dDispatchHelper\u0026sq\u003dpackage:chromium\u0026l\u003d98",
      "revId": "1684365348eccaf00110c034d8048f6f165f0005",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "92bed8e6_913b8e5f",
        "filename": "android_webview/browser/aw_print_manager.cc",
        "patchSetId": 4
      },
      "lineNbr": 91,
      "author": {
        "id": 1130134
      },
      "writtenOn": "2017-08-30T21:41:37Z",
      "side": 1,
      "message": "Thanks for digging into this and providing a snippet with an example - much appreciated.\n\nDone.\n\nPS. As you\u0027ve noticed, after this CL there is only one remaining place that uses the IPC_MESSAGE_HANDLER_WITH_PARAM_DELAY_REPLY macro (in ResourceDispatcherHostImpl::OnMessageReceived).  FWIW, this usage seems okay to me (i.e. calls Send on the right object) so I am not going to touch it.",
      "parentUuid": "c349de16_5875c288",
      "revId": "1684365348eccaf00110c034d8048f6f165f0005",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4c323a4c_31744f25",
        "filename": "chrome/browser/plugins/plugin_observer.cc",
        "patchSetId": 4
      },
      "lineNbr": 140,
      "author": {
        "id": 1002169
      },
      "writtenOn": "2017-08-29T18:37:26Z",
      "side": 1,
      "message": "Yikes. These cases really ought to take a render_process_id, and call RPH::Send() via that.\n\nOf course, that bug exists both before and after your CL, but it\u0027s hard to just walk past an routing id mismatch bug.\n\nShould we go ahead and convert now, or just let it be and wait for mojofication to solve it?",
      "range": {
        "startLine": 140,
        "startChar": 26,
        "endLine": 140,
        "endChar": 34
      },
      "revId": "1684365348eccaf00110c034d8048f6f165f0005",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "db885860_aa1b89b4",
        "filename": "chrome/browser/plugins/plugin_observer.cc",
        "patchSetId": 4
      },
      "lineNbr": 140,
      "author": {
        "id": 1130134
      },
      "writtenOn": "2017-08-30T21:41:37Z",
      "side": 1,
      "message": "I\u0027ve started to make changes to fix this, but they kept getting bigger and bigger, so I\u0027ve opened https://crbug.com/760637 to track this (and unblock the current CL under review).  I think the fix shouldn\u0027t be too difficult (just propagate process_id from the sender/RFH and use it when sending new IPCs + make the process_id part of map key).\n\nAnd yes - I\u0027ve added an IOU^H^H^HTODO comment above... :-P\n\nPS. I have a draft of a fix here: https://chromium-review.googlesource.com/644507",
      "parentUuid": "4c323a4c_31744f25",
      "range": {
        "startLine": 140,
        "startChar": 26,
        "endLine": 140,
        "endChar": 34
      },
      "revId": "1684365348eccaf00110c034d8048f6f165f0005",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b94e2240_b247000d",
        "filename": "components/guest_view/browser/guest_view_base.cc",
        "patchSetId": 4
      },
      "lineNbr": 440,
      "author": {
        "id": 1130134
      },
      "writtenOn": "2017-08-30T21:41:37Z",
      "side": 1,
      "message": "I\u0027ve looked at the changes above again, and it seems okay, because this is a control (i.e. non-routed) message.  OTOH, I notice that the |element_instance_id_| ultimately comes via GuestViewHostMsg_AttachToEmbedderFrame IPC that is sent via RenderFrame (and it is not immediately obvious that sending a reply via RenderViewHost will get back to the same process).\n\nStill - since the problem wil go away when the browser plugin goes away, I think it is fine to let it be.",
      "range": {
        "startLine": 439,
        "startChar": 0,
        "endLine": 440,
        "endChar": 60
      },
      "revId": "1684365348eccaf00110c034d8048f6f165f0005",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}