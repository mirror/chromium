{
  "comments": [
    {
      "key": {
        "uuid": "39f0628f_89ba8294",
        "filename": "android_webview/browser/aw_media_url_interceptor.cc",
        "patchSetId": 2
      },
      "lineNbr": 31,
      "author": {
        "id": 1160859
      },
      "writtenOn": "2017-11-14T19:19:28Z",
      "side": 1,
      "message": "size_t might contain a value greater than max int64_t on 64-bit platforms.\n\ncan size be changed to size_t in the function?\n\nalternatively you will have to test that no overflow is occurring using base::IsValueInRangeForNumericType",
      "range": {
        "startLine": 31,
        "startChar": 24,
        "endLine": 31,
        "endChar": 31
      },
      "revId": "84ed42472779157039ad552506980e691acfae97",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c54c4e4d_cf4ae807",
        "filename": "android_webview/browser/aw_media_url_interceptor.cc",
        "patchSetId": 2
      },
      "lineNbr": 31,
      "author": {
        "id": 1144344
      },
      "writtenOn": "2017-11-14T20:32:57Z",
      "side": 1,
      "message": "Does casting really fix the test? In the failed case, size_t is uint32_t, so casting it to int64_t would still make it 4294967295.",
      "range": {
        "startLine": 31,
        "startChar": 12,
        "endLine": 31,
        "endChar": 23
      },
      "revId": "84ed42472779157039ad552506980e691acfae97",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "506aa380_3f4d7e28",
        "filename": "android_webview/browser/aw_media_url_interceptor.cc",
        "patchSetId": 2
      },
      "lineNbr": 31,
      "author": {
        "id": 1116054
      },
      "writtenOn": "2017-11-14T22:07:32Z",
      "side": 1,
      "message": "Oh yes, of course, sorry my bad (signed vs unsigned..), thanks for noticing. In that case it\u0027s probably better to change the signature and use a different \u0027sentinel\u0027 value for size in tests (like max value instead of -1). I\u0027ll upload a follow-up patch.",
      "parentUuid": "39f0628f_89ba8294",
      "range": {
        "startLine": 31,
        "startChar": 24,
        "endLine": 31,
        "endChar": 31
      },
      "revId": "84ed42472779157039ad552506980e691acfae97",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8d23dc4c_10a3eaee",
        "filename": "android_webview/browser/aw_media_url_interceptor.cc",
        "patchSetId": 2
      },
      "lineNbr": 31,
      "author": {
        "id": 1116054
      },
      "writtenOn": "2017-11-14T22:07:32Z",
      "side": 1,
      "message": "My reasoning here was that in the test size is initialized to -1 (as int64_t) which is all bits 1 in 2-complement representation. Pointer dereference assignment *(int64_t*) \u003d size_t would \u0027erase\u0027 part of it because region.size is zero (and unit32_t) yielding the unsigned max value for 32 bits (4294967295).\n\nHaven\u0027t tested it properly though, I\u0027ve run it on my phone, but then realized that the phone is 64bit...",
      "parentUuid": "c54c4e4d_cf4ae807",
      "range": {
        "startLine": 31,
        "startChar": 12,
        "endLine": 31,
        "endChar": 23
      },
      "revId": "84ed42472779157039ad552506980e691acfae97",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "545e165f_63c2c3d7",
        "filename": "android_webview/browser/aw_media_url_interceptor.cc",
        "patchSetId": 2
      },
      "lineNbr": 31,
      "author": {
        "id": 1144344
      },
      "writtenOn": "2017-11-14T22:46:46Z",
      "side": 1,
      "message": "*size \u003d static_cast\u003cint32_t\u003e(region.size)\n\nshould fix the test because signed to signed assignment would have sign extension, but I guess we are not going to use this approach.",
      "parentUuid": "8d23dc4c_10a3eaee",
      "range": {
        "startLine": 31,
        "startChar": 12,
        "endLine": 31,
        "endChar": 23
      },
      "revId": "84ed42472779157039ad552506980e691acfae97",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4081c989_20b528e7",
        "filename": "android_webview/browser/aw_media_url_interceptor.cc",
        "patchSetId": 2
      },
      "lineNbr": 31,
      "author": {
        "id": 1116054
      },
      "writtenOn": "2017-11-16T18:46:30Z",
      "side": 1,
      "message": "Actually, looking further into this issue, it looks like you are right Wei-Yin that the casting to int64_t wouldn\u0027t help. It appears the Android API can actually return negative values in ApkAssets.java (in /base) which we try to assign to region.size (which is size_t). I\u0027ve commented in more details on the bug crbug.com/784572..",
      "parentUuid": "545e165f_63c2c3d7",
      "range": {
        "startLine": 31,
        "startChar": 12,
        "endLine": 31,
        "endChar": 23
      },
      "revId": "84ed42472779157039ad552506980e691acfae97",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}