{
  "comments": [
    {
      "key": {
        "uuid": "048bd34b_cfc0fa71",
        "filename": "chrome/browser/extensions/api/messaging/native_message_process_host.cc",
        "patchSetId": 1
      },
      "lineNbr": 213,
      "author": {
        "id": 1116023
      },
      "writtenOn": "2017-07-12T21:20:50Z",
      "side": 1,
      "message": "As far as I can tell (with codesearch broken :-( ) this creates non-persistent watcher. See FileDescriptorWatcher::Controller::Watcher::StartWatching() . It passes persistent\u003dfalse when calling MessageLoopForIO::WatchFileDescriptor().\nThat\u0027s why we need to create a new watcher every time.",
      "range": {
        "startLine": 213,
        "startChar": 22,
        "endLine": 213,
        "endChar": 66
      },
      "revId": "d36cce4713952e0a594bffb56aa76df51f6eeab4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4d8a0c1a_6399fd6c",
        "filename": "chrome/browser/extensions/api/messaging/native_message_process_host.cc",
        "patchSetId": 1
      },
      "lineNbr": 213,
      "author": {
        "id": 1116023
      },
      "writtenOn": "2017-07-12T21:25:47Z",
      "side": 1,
      "message": "I was wrong, looks like FileDescriptorWatcher call StartWatching() repeatedly.",
      "parentUuid": "048bd34b_cfc0fa71",
      "range": {
        "startLine": 213,
        "startChar": 22,
        "endLine": 213,
        "endChar": 66
      },
      "revId": "d36cce4713952e0a594bffb56aa76df51f6eeab4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d018a181_9a827aa0",
        "filename": "chrome/browser/extensions/api/messaging/native_message_process_host.cc",
        "patchSetId": 1
      },
      "lineNbr": 213,
      "author": {
        "id": 1001385
      },
      "writtenOn": "2017-07-12T21:27:31Z",
      "side": 1,
      "message": "From the caller\u0027s PoV the WatchReadable/Writable() is persistent - the FdWatcher has to implement that via a series of one-off non-persistent watches in order to avoid the watch thread \"spinning\", seeing an FD is readable until the calling thread wakes up and reads from it.\n\nThere\u0027s basically a horrific ping-pong of event-\u003ewatch-\u003eevent-\u003ewatch... tasks posted between the caller and IO threads, to maintain synchronization.",
      "parentUuid": "048bd34b_cfc0fa71",
      "range": {
        "startLine": 213,
        "startChar": 22,
        "endLine": 213,
        "endChar": 66
      },
      "revId": "d36cce4713952e0a594bffb56aa76df51f6eeab4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}