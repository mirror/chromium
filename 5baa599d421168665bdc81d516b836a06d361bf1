{
  "comments": [
    {
      "key": {
        "uuid": "28e67379_551fbb36",
        "filename": "chrome/browser/ui/browser.h",
        "patchSetId": 1
      },
      "lineNbr": 520,
      "author": {
        "id": 1000805
      },
      "writtenOn": "2017-06-14T21:03:40Z",
      "side": 1,
      "message": "Nit: Note what |contents| gets used for.\n\nIt might make sense to pass a TabDialogs* instead since that\u0027s what the implementation actually depends on.",
      "revId": "5baa599d421168665bdc81d516b836a06d361bf1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "714ea15f_ae43e261",
        "filename": "chrome/browser/ui/tab_dialogs.h",
        "patchSetId": 1
      },
      "lineNbr": 53,
      "author": {
        "id": 1000805
      },
      "writtenOn": "2017-06-14T21:03:40Z",
      "side": 1,
      "message": "Nit: Should this be const?  (Same applies to most other methods on this object.)\n\nAlso wondering whether some API like ShowDialog(enum DialogType) would allow condensing these functions and doing maintenance more easily, but maybe not.",
      "revId": "5baa599d421168665bdc81d516b836a06d361bf1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "260d5b44_8b921a0e",
        "filename": "chrome/browser/ui/views/first_run_bubble.cc",
        "patchSetId": 1
      },
      "lineNbr": 103,
      "author": {
        "id": 1000805
      },
      "writtenOn": "2017-06-14T21:03:40Z",
      "side": 1,
      "message": "I don\u0027t think you want to do this if |anchor_view| is non-null?  Though maybe it will just get overwritten in that case once someone tries to read the anchor back...",
      "revId": "5baa599d421168665bdc81d516b836a06d361bf1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "96004906_3cbfcc07",
        "filename": "chrome/browser/ui/views/first_run_bubble.h",
        "patchSetId": 1
      },
      "lineNbr": 26,
      "author": {
        "id": 1000805
      },
      "writtenOn": "2017-06-14T21:03:40Z",
      "side": 1,
      "message": "This should document why we\u0027d take both an anchor view and an anchor point: basically, that we expect only one to be non-null.\n\nThat said, I don\u0027t feel good about how LocationBarView exposes both GetInfoBarAnchorPoint() and GetSecurityBubbleAnchorView() today, and we anchor to one on Mac and the other on non-Mac.  I think ideally this class would expose only one of those (probably the latter), and it would be implemented on Mac and non-Mac, and we\u0027d call it everywhere and just pass that.\n\nWhat blocks doing things that way?",
      "revId": "5baa599d421168665bdc81d516b836a06d361bf1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7962e919_76bdb1db",
        "filename": "chrome/browser/ui/views/first_run_bubble.h",
        "patchSetId": 1
      },
      "lineNbr": 26,
      "author": {
        "id": 1002092
      },
      "writtenOn": "2017-06-15T23:33:15Z",
      "side": 1,
      "message": "elly mentioned this on irc.. I said \"The few use cases I can think where [an Anchor View*] might be better than a offset from the top-left or top-right of the window are when Chrome Sync kicks in and does “Something” — installs an extension, or changes your ‘show home button’ setting. Pretty obscure. (also I’m fairly certain those kinds of triggers do not currently cause bubbles to reposition themselves)\"\n\nThere might also be a use case for RTL - having a View can get a Rect and pick a corner based on that.\n\nmsw might know more history about this.\n\nThere is also an maybe-bad use case I\u0027ve seen in extension code where it uses RTTI on the anchor View* class name to infer something about how the bubble was invoked..\n\n\n\nAnd I think it\u0027s not only the complication of anchoring to a Cocoa browser that is making anchor view harder to use. a View* isn\u0027t enough. We currently have to combine it with BubbleDialogDelegateView::anchor_view_insets() and  GetLayoutConstant(LOCATION_BAR_BUBBLE_ANCHOR_VERTICAL_INSET) *and* (at least for some bubbles) still have code to fallback on when the View* is nullptr (e.g. fullscreen, or popups, that are missing some Views in the parent window).\n\n\nOf course, a Rect alone doesn\u0027t satisfy re anchoring (e.g. on parent window resize). But we dealt with that for Cocoa with a `KeepBubbleAnchored` method - https://cs.chromium.org/chromium/src/chrome/browser/ui/cocoa/bubble_anchor_helper_views.h?type\u003dcs\u0026q\u003dkeepbubbleanchored\u0026l\u003d22 it just fixes the offset from the top-left or top-right of the window based on bubble_-\u003earrow(). We could possibly port that to work with a Widget* parent window as well as NSWindow, and rely on that rather than BubbleDialogDelegateView::OnAnchorBoundsChanged()",
      "parentUuid": "96004906_3cbfcc07",
      "revId": "5baa599d421168665bdc81d516b836a06d361bf1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "db14aaea_76e69012",
        "filename": "chrome/browser/ui/views/location_bar/location_bar_view.cc",
        "patchSetId": 1
      },
      "lineNbr": 807,
      "author": {
        "id": 1002092
      },
      "writtenOn": "2017-06-14T22:55:59Z",
      "side": 1,
      "message": "I think this `ShowFirstRunBubbleInternal` member function should just be deleted. It\u0027s called _from_ Browser, but then it has to hunt again for a Browser* here. Browser::ShowFirstRunBubble() should just pass `this` to a thin per-platform wrapper around a call to FirstRunBubble::ShowBubble(..) in global methods.",
      "range": {
        "startLine": 807,
        "startChar": 29,
        "endLine": 807,
        "endChar": 55
      },
      "revId": "5baa599d421168665bdc81d516b836a06d361bf1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ff4826a4_8665ea19",
        "filename": "chrome/browser/ui/views/tab_dialogs_views.cc",
        "patchSetId": 1
      },
      "lineNbr": 50,
      "author": {
        "id": 1002092
      },
      "writtenOn": "2017-06-14T22:55:59Z",
      "side": 1,
      "message": "I don\u0027t think TabDialogs is the right place for the first run bubble. TabDialogs is for things tied to a specific WebContents - a new instance of TabDialogs is associated with each WebContents. But the first run bubble is tied to the Browser* -- after this line in each impl class we no longer need the web_contents_.\n\nbrowser_dialogs.h tends to be the place we put dialogs that are tied to a Browser*; the methods there typically take a Browser*.",
      "range": {
        "startLine": 50,
        "startChar": 29,
        "endLine": 50,
        "endChar": 55
      },
      "revId": "5baa599d421168665bdc81d516b836a06d361bf1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ba0968f8_9ced29ef",
        "filename": "chrome/browser/ui/views/tab_dialogs_views.cc",
        "patchSetId": 1
      },
      "lineNbr": 50,
      "author": {
        "id": 1002092
      },
      "writtenOn": "2017-06-15T11:27:50Z",
      "side": 1,
      "message": "I ran out of time today to play with this, but I think the setup we use for Permissions Prompts is closest to the pattern we should use for the first run bubble. See, e.g., https://cs.chromium.org/chromium/src/chrome/browser/ui/views/permission_bubble/permission_prompt_impl.h?type\u003dcs\u0026l\u003d43\n\nPermissionPromptImpl takes a Browser*, and we have files for showing views bubbles when that\u0027s either a BrowserWindowCocoa or a BrowserView.\n\nAnd.. in fact the anchor point is the same!\n\nPerhaps we can take the GetAnchorView/GetAnchorPoint member functions in those impl_foo.cc files  and make them global functions that take a Browser* and convert it into a views bubble anchor.",
      "parentUuid": "ff4826a4_8665ea19",
      "range": {
        "startLine": 50,
        "startChar": 29,
        "endLine": 50,
        "endChar": 55
      },
      "revId": "5baa599d421168665bdc81d516b836a06d361bf1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3f282b5b_1b9a81a4",
        "filename": "chrome/browser/ui/views/tab_dialogs_views.cc",
        "patchSetId": 1
      },
      "lineNbr": 55,
      "author": {
        "id": 1002092
      },
      "writtenOn": "2017-06-15T11:27:50Z",
      "side": 1,
      "message": "FirstRunBubble::ShowBubble(..) only needs a single Browser* argument. Args 2 and 3 three can be derived easily from the methods I mention above\n\nthe 4th arg is just browser-\u003ewindow()-\u003eGetNativeWindow()",
      "range": {
        "startLine": 55,
        "startChar": 18,
        "endLine": 55,
        "endChar": 28
      },
      "revId": "5baa599d421168665bdc81d516b836a06d361bf1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}