{
  "comments": [
    {
      "key": {
        "uuid": "0dfb8ede_729081e0",
        "filename": "third_party/WebKit/Source/modules/vr/VRDisplay.cpp",
        "patchSetId": 7
      },
      "lineNbr": 822,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2017-12-04T23:50:56Z",
      "side": 1,
      "message": "In practice, how long will these methods wait? I\u0027m wondering how much jank they will introduce to the main thread.",
      "revId": "ded446d76c6c6a5fc6d459dfa9b7e64c8701e627",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9779c0a5_b34370de",
        "filename": "third_party/WebKit/Source/modules/vr/VRDisplay.cpp",
        "patchSetId": 7
      },
      "lineNbr": 822,
      "author": {
        "id": 1187745
      },
      "writtenOn": "2017-12-04T23:58:34Z",
      "side": 1,
      "message": "Which main thread are you referring to here? The Renderer isn\u0027t supposed to start with a new frame at this point, so it\u0027s intentionally blocked here. This avoids overstuffed GPU buffers and corresponding unacceptable latency, and also was necessary to avoid unfortunate GPU scheduling effects where the new frame\u0027s rendering work was delaying completion of the previous one, see for example http://crbug.com/747159.\n\nThe average wait time here can range from zero to ~20ms for a GPU-bound WebVR page. I\u0027m working on a followup change to replace this with a GpuFence which doesn\u0027t require CPU-level synchronization, combined with heuristics to delay WebVR\u0027s animation start if it\u0027s likely to just be waiting at this step, and tracking the time needed is in preparation for that.",
      "parentUuid": "0dfb8ede_729081e0",
      "revId": "ded446d76c6c6a5fc6d459dfa9b7e64c8701e627",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9d16ab4e_2f41c3b9",
        "filename": "third_party/WebKit/Source/modules/vr/VRDisplay.cpp",
        "patchSetId": 7
      },
      "lineNbr": 822,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2017-12-05T00:42:22Z",
      "side": 1,
      "message": "This code runs on the main thread of the renderer process, right?\n\nI\u0027m worried about a scenario where the main thread cannot handle more high priority tasks (e.g., user input handling) while waiting on it. In general, it\u0027s not a good idea to synchronously block the main thread.",
      "parentUuid": "9779c0a5_b34370de",
      "revId": "ded446d76c6c6a5fc6d459dfa9b7e64c8701e627",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0541c7ab_543b2278",
        "filename": "third_party/WebKit/Source/modules/vr/VRDisplay.cpp",
        "patchSetId": 7
      },
      "lineNbr": 822,
      "author": {
        "id": 1187745
      },
      "writtenOn": "2017-12-05T00:59:56Z",
      "side": 1,
      "message": "This wait only happens for Android WebVR while the screen is being exclusively used for VR presentation, so the risk of collision with other tasks is greatly reduced. Other platforms (currently that\u0027s just Windows/OpenVR) don\u0027t do this wait.\n\nIn any case, I agree that this wait is unfortunate, but it\u0027s not new to this CL, just made more explicit by refactoring. This code runs as part of a WebVR 1.1 \"submitFrame\" API call triggered from JavaScript, and the API doesn\u0027t support doing an asynchronous wait at this stage. I\u0027m trying to reduce or (ideally) eliminate this wait time in followups along with using GPU server wait instead of CPU synchronization. Let me know if you want to discuss this further separately.",
      "parentUuid": "9d16ab4e_2f41c3b9",
      "revId": "ded446d76c6c6a5fc6d459dfa9b7e64c8701e627",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0c8e5c83_ff642a54",
        "filename": "third_party/WebKit/Source/modules/vr/VRDisplay.cpp",
        "patchSetId": 7
      },
      "lineNbr": 822,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2017-12-05T01:11:23Z",
      "side": 1,
      "message": "Sounds reasonable!",
      "parentUuid": "0541c7ab_543b2278",
      "revId": "ded446d76c6c6a5fc6d459dfa9b7e64c8701e627",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}