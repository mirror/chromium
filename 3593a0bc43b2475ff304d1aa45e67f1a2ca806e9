{
  "comments": [
    {
      "key": {
        "uuid": "7e7219f6_803dfddd",
        "filename": "third_party/WebKit/Source/core/layout/ng/inline/ng_physical_text_fragment.cc",
        "patchSetId": 2
      },
      "lineNbr": 11,
      "author": {
        "id": 1002487
      },
      "writtenOn": "2017-07-22T01:14:13Z",
      "side": 1,
      "message": "Does it make sense to only do this on-demand? That is, is it semi-rare that we need the visual overflow?",
      "revId": "3593a0bc43b2475ff304d1aa45e67f1a2ca806e9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "94d5ba62_b929a2b1",
        "filename": "third_party/WebKit/Source/core/layout/ng/inline/ng_physical_text_fragment.cc",
        "patchSetId": 2
      },
      "lineNbr": 11,
      "author": {
        "id": 1128431
      },
      "writtenOn": "2017-07-23T15:21:41Z",
      "side": 1,
      "message": "In legacy, we do this 1) after layout, and 2) after transform was changed.\n\nLegacy has a flag that indicates children is known not to have overflow, and use it to skip unnecessary computation. I\u0027m learning how it\u0027s set and how we use it, but we\u0027ll need to check |shape_result-\u003eBounds()| at least once after it was shaped.\n\nSo, yes and no, we should be able to minimize the computation using flags when it\u0027s known. But we need to compute at least once per full layout. I\u0027ll learn more, but wish to defer optimization a bit later, after I understand how it should work better.\n\nHow rare. We need visual overflow always. Paint relies on it. How often text can visual overflow is rather rare, but not too rare. For instance, the \"T\" in Times has visual overflow on left, so if a line starts with \"T\", the line has visual overflow. This is called \"optical alignment\", human\u0027s eye has optical illusion to some specific shapes, and fonts have overflows so that it looks like left/right edges are aligned. If we don\u0027t compute this, \"T\" maybe clipped when repaint occurs.",
      "parentUuid": "7e7219f6_803dfddd",
      "revId": "3593a0bc43b2475ff304d1aa45e67f1a2ca806e9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5e08580e_5544ca3b",
        "filename": "third_party/WebKit/Source/core/layout/ng/inline/ng_physical_text_fragment.cc",
        "patchSetId": 2
      },
      "lineNbr": 11,
      "author": {
        "id": 1002487
      },
      "writtenOn": "2017-07-25T05:43:26Z",
      "side": 1,
      "message": "The reason I asked that was: If we almost always need it, maybe we should calculate it in the algorithm and just have it as a simple getter here, so that we don\u0027t have computations both in the fragment implementation and in the algorithm. What do you think?",
      "parentUuid": "94d5ba62_b929a2b1",
      "revId": "3593a0bc43b2475ff304d1aa45e67f1a2ca806e9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "029e4956_12bc7c7c",
        "filename": "third_party/WebKit/Source/core/layout/ng/inline/ng_physical_text_fragment.cc",
        "patchSetId": 2
      },
      "lineNbr": 11,
      "author": {
        "id": 1128431
      },
      "writtenOn": "2017-07-25T06:16:10Z",
      "side": 1,
      "message": "I see the point, and it\u0027s good point. It\u0027s great to have this discussion here, thank you!\n\nThis should be called from layout algorithm, but we also need to re-compute after layout. The re-compute needs to run when transform changes, and we probably don\u0027t want to run full-layout on transform changes, right? Some discussion here:\nhttps://docs.google.com/document/d/1riJnuNT4Sw1UOLeUBtkmbngQF-JHO4nZnUUL1LpcmG0/edit?disco\u003dAAAAA9xU24I\nand some info in:\nhttps://crbug.com/674279#c17\n\nIn order to re-compute overflow after layout, legacy copies some layout code to LayoutBlock::RecalcOverflowAfterStyleChange(). I\u0027m hoping to reduce copying code this time, and to do this, PhysicalFragment should have this function.\n\nDoes this look reasonable?",
      "parentUuid": "5e08580e_5544ca3b",
      "revId": "3593a0bc43b2475ff304d1aa45e67f1a2ca806e9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bb9396ab_eb746344",
        "filename": "third_party/WebKit/Source/core/layout/ng/inline/ng_physical_text_fragment.h",
        "patchSetId": 2
      },
      "lineNbr": 76,
      "author": {
        "id": 1115899
      },
      "writtenOn": "2017-07-20T22:10:40Z",
      "side": 1,
      "message": "This can\u0027t be const, right?",
      "revId": "3593a0bc43b2475ff304d1aa45e67f1a2ca806e9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "637ef6fb_467e414f",
        "filename": "third_party/WebKit/Source/core/layout/ng/inline/ng_physical_text_fragment.h",
        "patchSetId": 2
      },
      "lineNbr": 76,
      "author": {
        "id": 1128431
      },
      "writtenOn": "2017-07-23T15:24:02Z",
      "side": 1,
      "message": "Right, assuming this function sets to NGPhysicalFragment, rather than return something. Probably we go the former way?",
      "parentUuid": "bb9396ab_eb746344",
      "revId": "3593a0bc43b2475ff304d1aa45e67f1a2ca806e9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "29d831ed_8458459f",
        "filename": "third_party/WebKit/Source/core/layout/ng/inline/ng_physical_text_fragment.h",
        "patchSetId": 2
      },
      "lineNbr": 76,
      "author": {
        "id": 1115899
      },
      "writtenOn": "2017-07-24T19:30:23Z",
      "side": 1,
      "message": "Right, it either needs to return something or (preferably) store the overflow somewhere.",
      "parentUuid": "637ef6fb_467e414f",
      "revId": "3593a0bc43b2475ff304d1aa45e67f1a2ca806e9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}