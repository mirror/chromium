{
  "comments": [
    {
      "key": {
        "uuid": "1fbcb0a3_2f40cb0b",
        "filename": "content/browser/media/android/media_player_renderer.cc",
        "patchSetId": 4
      },
      "lineNbr": 46,
      "author": {
        "id": 1150472
      },
      "writtenOn": "2017-10-12T01:41:01Z",
      "side": 1,
      "message": "nick@ to confirm: I don\u0027t think we can ever get a null web_contents here. The only reason why it would be null is if the RenderFrameHostDelegate is a InterstitialPageImpl, and I don\u0027t think a MediaPlayerRenderer would ever get created in that case (but are mojo services still exposed for frames owned by insterstitial pages?).",
      "range": {
        "startLine": 46,
        "startChar": 6,
        "endLine": 46,
        "endChar": 18
      },
      "revId": "8c1999eb35f1f7c4f5729c7d198cc2387cf8d602",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ea441ebd_9c12fa62",
        "filename": "content/browser/media/android/media_player_renderer.cc",
        "patchSetId": 4
      },
      "lineNbr": 46,
      "author": {
        "id": 1002169
      },
      "writtenOn": "2017-10-12T18:11:56Z",
      "side": 1,
      "message": "Interstitial pages are the only case where this would happen.\n\nMaking video work in an interstitial page is only important if we need it to. I don\u0027t think we do (maybe you could cause this to happen via devtools, if you can figure out a way to inspect the interstitial page ...). Checking for null is fine here, it prevents a browser crash in that case.",
      "parentUuid": "1fbcb0a3_2f40cb0b",
      "range": {
        "startLine": 46,
        "startChar": 6,
        "endLine": 46,
        "endChar": 18
      },
      "revId": "8c1999eb35f1f7c4f5729c7d198cc2387cf8d602",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c340a1ce_f70821ad",
        "filename": "content/browser/media/android/media_player_renderer.cc",
        "patchSetId": 4
      },
      "lineNbr": 46,
      "author": {
        "id": 1231235
      },
      "writtenOn": "2017-10-12T20:55:51Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "ea441ebd_9c12fa62",
      "range": {
        "startLine": 46,
        "startChar": 6,
        "endLine": 46,
        "endChar": 18
      },
      "revId": "8c1999eb35f1f7c4f5729c7d198cc2387cf8d602",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c1f8ff11_5286b182",
        "filename": "content/browser/media/android/media_player_renderer.cc",
        "patchSetId": 4
      },
      "lineNbr": 52,
      "author": {
        "id": 1150472
      },
      "writtenOn": "2017-10-12T01:41:01Z",
      "side": 1,
      "message": "Assuming that WebContents is never null (above comment), you could call MediaPlayerRendererWebContentsObserver::FromWebContents(web_contents)-\u003eAddMediaPlayerRenderer(this) directly here",
      "range": {
        "startLine": 48,
        "startChar": 0,
        "endLine": 52,
        "endChar": 5
      },
      "revId": "8c1999eb35f1f7c4f5729c7d198cc2387cf8d602",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5df99b7f_c3f7649c",
        "filename": "content/browser/media/android/media_player_renderer.cc",
        "patchSetId": 4
      },
      "lineNbr": 52,
      "author": {
        "id": 1231235
      },
      "writtenOn": "2017-10-12T20:55:51Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "c1f8ff11_5286b182",
      "range": {
        "startLine": 48,
        "startChar": 0,
        "endLine": 52,
        "endChar": 5
      },
      "revId": "8c1999eb35f1f7c4f5729c7d198cc2387cf8d602",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "07327bf6_6c0b6a6b",
        "filename": "content/browser/media/android/media_player_renderer.cc",
        "patchSetId": 4
      },
      "lineNbr": 60,
      "author": {
        "id": 1150472
      },
      "writtenOn": "2017-10-12T01:41:01Z",
      "side": 1,
      "message": "If you get the WCO by using MediaPlayerRendererWebContentsObserver::FromWebContents(web_contents) again here, you don\u0027t have to keep |web_contents_observer_| or MediaPlayerRenderer::OnWebContentsDestroyed() (because FromWebContents() will return nullptr if the WC has already been destroyed).",
      "range": {
        "startLine": 58,
        "startChar": 2,
        "endLine": 60,
        "endChar": 3
      },
      "revId": "8c1999eb35f1f7c4f5729c7d198cc2387cf8d602",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f717d20c_da469f55",
        "filename": "content/browser/media/android/media_player_renderer.cc",
        "patchSetId": 4
      },
      "lineNbr": 60,
      "author": {
        "id": 1231235
      },
      "writtenOn": "2017-10-12T17:25:49Z",
      "side": 1,
      "message": "I\u0027m a bit skeptical of this, since if I send a ptr to a deleted WebContents to ::FromWebContents, I\u0027m pretty sure it\u0027s going to deref it: https://cs.chromium.org/chromium/src/content/public/browser/web_contents_user_data.h?type\u003dcs\u0026q\u003dFromWebContents\u0026l\u003d45",
      "parentUuid": "07327bf6_6c0b6a6b",
      "range": {
        "startLine": 58,
        "startChar": 2,
        "endLine": 60,
        "endChar": 3
      },
      "revId": "8c1999eb35f1f7c4f5729c7d198cc2387cf8d602",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "33f50de2_9115e68c",
        "filename": "content/browser/media/android/media_player_renderer.cc",
        "patchSetId": 4
      },
      "lineNbr": 60,
      "author": {
        "id": 1002169
      },
      "writtenOn": "2017-10-12T18:11:56Z",
      "side": 1,
      "message": "I\u0027m not sure I follow the scenario here, but if you have a pointer to a deleted WebContents, you\u0027ve already lost.\n\nwouldn\u0027t you just null out the web_contents pointer in OnWebContentsDestroyed?",
      "parentUuid": "f717d20c_da469f55",
      "range": {
        "startLine": 58,
        "startChar": 2,
        "endLine": 60,
        "endChar": 3
      },
      "revId": "8c1999eb35f1f7c4f5729c7d198cc2387cf8d602",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c727a808_5f1f4710",
        "filename": "content/browser/media/android/media_player_renderer.cc",
        "patchSetId": 4
      },
      "lineNbr": 60,
      "author": {
        "id": 1002169
      },
      "writtenOn": "2017-10-12T18:21:21Z",
      "side": 1,
      "message": "on second thought, I think I\u0027m with Tommy here. If you\u0027ve got to retain a pointer (either to the WC or the WCO), it might as well be to the WCO if that suffices.\n\nThe alternative is to synchronously delete MediaPlayerRenderer when OnWebContentsDestroyed occurs. Is that an option? (I don\u0027t recall what the lifetime of this class is at all, but it seems like having media players not outlive a tab -- or better, their RFH -- would be a good thing?)",
      "parentUuid": "33f50de2_9115e68c",
      "range": {
        "startLine": 58,
        "startChar": 2,
        "endLine": 60,
        "endChar": 3
      },
      "revId": "8c1999eb35f1f7c4f5729c7d198cc2387cf8d602",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d2cf40d3_13583a60",
        "filename": "content/browser/media/android/media_player_renderer.cc",
        "patchSetId": 4
      },
      "lineNbr": 60,
      "author": {
        "id": 1150472
      },
      "writtenOn": "2017-10-12T18:40:52Z",
      "side": 1,
      "message": "My bad, you are absolutely right Tommy! I don\u0027t know why I thought it was implemented as a map\u003cWebContents*, UserData\u003e.\n\nYes, we can delete the MPR here. The only thing I am worried about is the MPR\u0027s normal deletion being reported as an error in WMPI. When the WebContents destroyed event is raised, will the frames in the Renderer process already have been destroyed? Otherwise, there might be a small window of time where the MPRClient in WMPI might run into a \"Mojo connection error\", report an error and skew our UMAs.",
      "parentUuid": "c727a808_5f1f4710",
      "range": {
        "startLine": 58,
        "startChar": 2,
        "endLine": 60,
        "endChar": 3
      },
      "revId": "8c1999eb35f1f7c4f5729c7d198cc2387cf8d602",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8f9ab4c5_166d6121",
        "filename": "content/browser/media/android/media_player_renderer.cc",
        "patchSetId": 4
      },
      "lineNbr": 60,
      "author": {
        "id": 1231235
      },
      "writtenOn": "2017-10-12T20:55:51Z",
      "side": 1,
      "message": "So, given the above concern should we just leave as is for now? Either way, we\u0027ll need the code here to detach when the MPR is deleted before the WC, so I\u0027m not sure exactly what the advantage of deleting on WCDestroyed is",
      "parentUuid": "d2cf40d3_13583a60",
      "range": {
        "startLine": 58,
        "startChar": 2,
        "endLine": 60,
        "endChar": 3
      },
      "revId": "8c1999eb35f1f7c4f5729c7d198cc2387cf8d602",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1097524f_4523e368",
        "filename": "content/browser/media/android/media_player_renderer.cc",
        "patchSetId": 4
      },
      "lineNbr": 60,
      "author": {
        "id": 1150472
      },
      "writtenOn": "2017-10-12T22:07:01Z",
      "side": 1,
      "message": "Yes you can leave it as is. I might change it myself eventually.",
      "parentUuid": "8f9ab4c5_166d6121",
      "range": {
        "startLine": 58,
        "startChar": 2,
        "endLine": 60,
        "endChar": 3
      },
      "revId": "8c1999eb35f1f7c4f5729c7d198cc2387cf8d602",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "df06bc26_e4a57de0",
        "filename": "content/browser/media/android/media_player_renderer.cc",
        "patchSetId": 4
      },
      "lineNbr": 196,
      "author": {
        "id": 1115974
      },
      "writtenOn": "2017-10-12T08:44:28Z",
      "side": 1,
      "message": "style: no { } when the body is a one-liner (applies to other places)",
      "revId": "8c1999eb35f1f7c4f5729c7d198cc2387cf8d602",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eaeda11d_0b3e7179",
        "filename": "content/browser/media/android/media_player_renderer.cc",
        "patchSetId": 4
      },
      "lineNbr": 196,
      "author": {
        "id": 1231235
      },
      "writtenOn": "2017-10-12T17:25:49Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "df06bc26_e4a57de0",
      "revId": "8c1999eb35f1f7c4f5729c7d198cc2387cf8d602",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3452179c_08ed1d2f",
        "filename": "content/browser/media/android/media_player_renderer.cc",
        "patchSetId": 4
      },
      "lineNbr": 307,
      "author": {
        "id": 1115974
      },
      "writtenOn": "2017-10-12T08:44:28Z",
      "side": 1,
      "message": "Would it make sense to have a `UpdateVolume()` method that will call `SetVolume()` on the `media_player_` based on `volume_` and `web_contents_muted_`? It sounds a bit weird to call `SetVolume(volume_)` otherwise.",
      "revId": "8c1999eb35f1f7c4f5729c7d198cc2387cf8d602",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4aad1d07_1cd622db",
        "filename": "content/browser/media/android/media_player_renderer.cc",
        "patchSetId": 4
      },
      "lineNbr": 307,
      "author": {
        "id": 1231235
      },
      "writtenOn": "2017-10-12T17:25:49Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3452179c_08ed1d2f",
      "revId": "8c1999eb35f1f7c4f5729c7d198cc2387cf8d602",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "360ac7e1_9326b572",
        "filename": "content/browser/media/android/media_player_renderer_web_contents_observer.cc",
        "patchSetId": 4
      },
      "lineNbr": 25,
      "author": {
        "id": 1115974
      },
      "writtenOn": "2017-10-12T08:44:28Z",
      "side": 1,
      "message": "FWIW, even if it is slightly slower, I would add an explicit `find()` call in a DCHECK instead of getting the returned value as the DCHECK() would only be compiled in debug builds but we would have to trust the compiler to not create the `insert_result` object.",
      "revId": "8c1999eb35f1f7c4f5729c7d198cc2387cf8d602",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ec67251b_a7cf68a1",
        "filename": "content/browser/media/android/media_player_renderer_web_contents_observer.cc",
        "patchSetId": 4
      },
      "lineNbr": 25,
      "author": {
        "id": 1231235
      },
      "writtenOn": "2017-10-12T17:25:49Z",
      "side": 1,
      "message": "Well the thing that\u0027s really being checked is that the insert didn\u0027t fail, which can happen if the value already exists in the set. A find DCHECK wouldn\u0027t catch that case, but I can see the issue with potentially creating the std::pair on prod builds. I could do `bool insert_result \u003d players_.insert(player).second`, which would only keep a bool instead of a pair (if anything at all), WDYT?",
      "parentUuid": "360ac7e1_9326b572",
      "revId": "8c1999eb35f1f7c4f5729c7d198cc2387cf8d602",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "703dbdab_d9f04747",
        "filename": "content/browser/media/android/media_player_renderer_web_contents_observer.cc",
        "patchSetId": 4
      },
      "lineNbr": 25,
      "author": {
        "id": 1115974
      },
      "writtenOn": "2017-10-13T16:57:26Z",
      "side": 1,
      "message": "Wouldn\u0027t you be able to catch in advance that the insertion wouldn\u0027t work because it already exist if the `find()` returns something?",
      "parentUuid": "ec67251b_a7cf68a1",
      "revId": "8c1999eb35f1f7c4f5729c7d198cc2387cf8d602",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "10efb37f_3a2fb07b",
        "filename": "content/browser/media/android/media_player_renderer_web_contents_observer.cc",
        "patchSetId": 4
      },
      "lineNbr": 38,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2017-10-12T06:02:15Z",
      "side": 1,
      "message": "nit: This can be simplified to:\n\n  for (MediaPlayerRenderer* player : players_)\n    player-\u003eOnUpdateAudioMutingState(muted);",
      "range": {
        "startLine": 37,
        "startChar": 2,
        "endLine": 38,
        "endChar": 38
      },
      "revId": "8c1999eb35f1f7c4f5729c7d198cc2387cf8d602",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bc19e9d0_860d23c1",
        "filename": "content/browser/media/android/media_player_renderer_web_contents_observer.cc",
        "patchSetId": 4
      },
      "lineNbr": 38,
      "author": {
        "id": 1231235
      },
      "writtenOn": "2017-10-12T17:25:49Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "10efb37f_3a2fb07b",
      "range": {
        "startLine": 37,
        "startChar": 2,
        "endLine": 38,
        "endChar": 38
      },
      "revId": "8c1999eb35f1f7c4f5729c7d198cc2387cf8d602",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a40ecbb6_50d61d86",
        "filename": "content/browser/media/android/media_player_renderer_web_contents_observer.cc",
        "patchSetId": 4
      },
      "lineNbr": 48,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2017-10-12T06:02:15Z",
      "side": 1,
      "message": "If you switch to base::flat_set, iterators are invalidated on mutations. So, this should become:\n\n  for (MediaPlayerRenderer* player : players_)\n    player-\u003eOnWebContentsDestroyed();\n  players_.clear();",
      "range": {
        "startLine": 44,
        "startChar": 1,
        "endLine": 48,
        "endChar": 3
      },
      "revId": "8c1999eb35f1f7c4f5729c7d198cc2387cf8d602",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f21b37ea_c530b8a2",
        "filename": "content/browser/media/android/media_player_renderer_web_contents_observer.cc",
        "patchSetId": 4
      },
      "lineNbr": 48,
      "author": {
        "id": 1231235
      },
      "writtenOn": "2017-10-12T17:25:49Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a40ecbb6_50d61d86",
      "range": {
        "startLine": 44,
        "startChar": 1,
        "endLine": 48,
        "endChar": 3
      },
      "revId": "8c1999eb35f1f7c4f5729c7d198cc2387cf8d602",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "71099716_c91dd7e1",
        "filename": "content/browser/media/android/media_player_renderer_web_contents_observer.h",
        "patchSetId": 4
      },
      "lineNbr": 34,
      "author": {
        "id": 1150472
      },
      "writtenOn": "2017-10-12T01:41:01Z",
      "side": 1,
      "message": "I am not sure what the guidance is for std::set vs base::flat_set. Someone else to chime in?",
      "range": {
        "startLine": 34,
        "startChar": 2,
        "endLine": 34,
        "endChar": 10
      },
      "revId": "8c1999eb35f1f7c4f5729c7d198cc2387cf8d602",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e75d64d2_f3ad0656",
        "filename": "content/browser/media/android/media_player_renderer_web_contents_observer.h",
        "patchSetId": 4
      },
      "lineNbr": 34,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2017-10-12T06:02:15Z",
      "side": 1,
      "message": "Based on the access pattern (in the .cc file), the operations you are using are: 1) insert element; 2) erase element; 3) iterate over all elements (but ordering does not matter).\n\n#1 and #2 do not occur frequently (e.g., in a call stack originating from any kind of tight loop). Therefore, you do not care much about their runtime complexity, assuming there are fewer than hundreds of elements in this set. FWIW, O(N) inserts/deletes when using std::vector are likely to perform *faster* than the O(lg N) inserts/deletes with std::set.\n\nTherefore, you want std::vector. So, use base::flat_set since it is a std::vector with a \"std::set-like\" interface on top.\n\nDocumentation/Advice: https://cs.chromium.org/chromium/src/base/containers/README.md",
      "parentUuid": "71099716_c91dd7e1",
      "range": {
        "startLine": 34,
        "startChar": 2,
        "endLine": 34,
        "endChar": 10
      },
      "revId": "8c1999eb35f1f7c4f5729c7d198cc2387cf8d602",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "caa31256_62df41d0",
        "filename": "content/browser/media/android/media_player_renderer_web_contents_observer.h",
        "patchSetId": 4
      },
      "lineNbr": 34,
      "author": {
        "id": 1231235
      },
      "writtenOn": "2017-10-12T17:25:49Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e75d64d2_f3ad0656",
      "range": {
        "startLine": 34,
        "startChar": 2,
        "endLine": 34,
        "endChar": 10
      },
      "revId": "8c1999eb35f1f7c4f5729c7d198cc2387cf8d602",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}