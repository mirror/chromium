{
  "comments": [
    {
      "key": {
        "uuid": "969d2571_fcfeb366",
        "filename": "chrome/android/java/src/org/chromium/chrome/browser/notifications/channels/SiteChannelsManager.java",
        "patchSetId": 5
      },
      "lineNbr": 113,
      "author": {
        "id": 1002032
      },
      "writtenOn": "2017-07-13T13:16:46Z",
      "side": 1,
      "message": "I\u0027m not entirely comfortable asserting here - we get this data from Android, so we should probably just silently fail rather than crashing Chrome if data corruption or something occurs. Maybe we should check in getSiteChannels() instead?",
      "revId": "a5498dce162145a93f78e6e3522bfbb945e5360e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dd676a4b_454123e7",
        "filename": "chrome/android/java/src/org/chromium/chrome/browser/notifications/channels/SiteChannelsManager.java",
        "patchSetId": 5
      },
      "lineNbr": 127,
      "author": {
        "id": 1002032
      },
      "writtenOn": "2017-07-13T13:16:46Z",
      "side": 1,
      "message": "Since we only care about two parts, what about:\n\nreturn channelId.substring(ChannelDefinitions.CHANNEL_ID_PREFIX_SITES.length()).contains(CHANNEL_ID_SEPARATOR);\n\nThat avoids creating the new strings.",
      "revId": "a5498dce162145a93f78e6e3522bfbb945e5360e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1b9b3153_01c9acdd",
        "filename": "chrome/android/java/src/org/chromium/chrome/browser/notifications/channels/SiteChannelsManager.java",
        "patchSetId": 5
      },
      "lineNbr": 162,
      "author": {
        "id": 1002032
      },
      "writtenOn": "2017-07-13T13:16:46Z",
      "side": 1,
      "message": "What\u0027s the long term plan for this?",
      "revId": "a5498dce162145a93f78e6e3522bfbb945e5360e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bb2d5b10_8ef1fd47",
        "filename": "chrome/android/javatests/src/org/chromium/chrome/browser/notifications/channels/ChannelsInitializerTest.java",
        "patchSetId": 5
      },
      "lineNbr": 233,
      "author": {
        "id": 1002032
      },
      "writtenOn": "2017-07-13T13:16:46Z",
      "side": 1,
      "message": "nit: probably best to use something that looks like a timestamp, like 621046800000",
      "revId": "a5498dce162145a93f78e6e3522bfbb945e5360e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f7e81a9e_cdc3c285",
        "filename": "chrome/browser/notifications/notification_channels_provider_android.cc",
        "patchSetId": 5
      },
      "lineNbr": 34,
      "author": {
        "id": 1002032
      },
      "writtenOn": "2017-07-13T13:16:46Z",
      "side": 1,
      "message": "This should come after the anonymous namespace. Files always lead with includes, then using declarations, then the anonymous namespace, then the rest.",
      "revId": "a5498dce162145a93f78e6e3522bfbb945e5360e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "da94403f_ba1e388a",
        "filename": "chrome/browser/notifications/notification_channels_provider_android.cc",
        "patchSetId": 5
      },
      "lineNbr": 89,
      "author": {
        "id": 1002032
      },
      "writtenOn": "2017-07-13T13:16:46Z",
      "side": 1,
      "message": "This should be push_back().\n\nemplace_back() actually constructs a NotificationChannel in-place based on the arguments. What\u0027s happening now conceptually is:\n\nNotificationChannel temp \u003d GetChannelFromJobject(..);\nchannels.push_back(NotificationChannel(temp));\n\nI.e. an unintentional copy.",
      "revId": "a5498dce162145a93f78e6e3522bfbb945e5360e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "aa1f8797_56d539e8",
        "filename": "chrome/browser/notifications/notification_channels_provider_android.cc",
        "patchSetId": 5
      },
      "lineNbr": 180,
      "author": {
        "id": 1002032
      },
      "writtenOn": "2017-07-13T13:16:46Z",
      "side": 1,
      "message": "const auto\u0026 - without the reference |channel| will contain a copy of the NotificationChannel objects instead",
      "revId": "a5498dce162145a93f78e6e3522bfbb945e5360e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b94a6386_b0c6498c",
        "filename": "chrome/browser/notifications/notification_channels_provider_android.cc",
        "patchSetId": 5
      },
      "lineNbr": 194,
      "author": {
        "id": 1002032
      },
      "writtenOn": "2017-07-13T13:16:46Z",
      "side": 1,
      "message": "std::move(updated_channels_map), otherwise this would copy too",
      "revId": "a5498dce162145a93f78e6e3522bfbb945e5360e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d6b83ace_c8fd985f",
        "filename": "chrome/browser/notifications/notification_channels_provider_android.cc",
        "patchSetId": 5
      },
      "lineNbr": 230,
      "author": {
        "id": 1002032
      },
      "writtenOn": "2017-07-13T13:16:46Z",
      "side": 1,
      "message": "Since CreateChannelIfRequired() also calls InitCachedChannels(), maybe nicer to just have a single call above this switch?",
      "revId": "a5498dce162145a93f78e6e3522bfbb945e5360e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f94e0cbd_591ccb32",
        "filename": "chrome/browser/notifications/notification_channels_provider_android.cc",
        "patchSetId": 5
      },
      "lineNbr": 234,
      "author": {
        "id": 1002032
      },
      "writtenOn": "2017-07-13T13:16:46Z",
      "side": 1,
      "message": "nit: no {}",
      "revId": "a5498dce162145a93f78e6e3522bfbb945e5360e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d39627e4_f7b1e567",
        "filename": "chrome/browser/notifications/notification_channels_provider_android.cc",
        "patchSetId": 5
      },
      "lineNbr": 235,
      "author": {
        "id": 1002032
      },
      "writtenOn": "2017-07-13T13:16:46Z",
      "side": 1,
      "message": "nit: you can erase by iterator (|channel_to_delete|), which may avoid the lookup.",
      "revId": "a5498dce162145a93f78e6e3522bfbb945e5360e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f649c6f1_20a8ddbb",
        "filename": "chrome/browser/notifications/notification_channels_provider_android.cc",
        "patchSetId": 5
      },
      "lineNbr": 279,
      "author": {
        "id": 1002032
      },
      "writtenOn": "2017-07-13T13:16:46Z",
      "side": 1,
      "message": "nit: no {}",
      "revId": "a5498dce162145a93f78e6e3522bfbb945e5360e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6e36afeb_df9c569d",
        "filename": "chrome/browser/notifications/notification_channels_provider_android.cc",
        "patchSetId": 5
      },
      "lineNbr": 285,
      "author": {
        "id": 1002032
      },
      "writtenOn": "2017-07-13T13:16:46Z",
      "side": 1,
      "message": "You could make this slightly simpler by removing the local:\n\nreturn base::Time::FromInternalValue(..)",
      "revId": "a5498dce162145a93f78e6e3522bfbb945e5360e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f5f8b7c7_a405d486",
        "filename": "chrome/browser/notifications/notification_channels_provider_android.cc",
        "patchSetId": 5
      },
      "lineNbr": 304,
      "author": {
        "id": 1002032
      },
      "writtenOn": "2017-07-13T13:16:46Z",
      "side": 1,
      "message": "nit: std::move(channel)",
      "revId": "a5498dce162145a93f78e6e3522bfbb945e5360e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d9b02308_f3b2619b",
        "filename": "chrome/browser/notifications/notification_channels_provider_android.cc",
        "patchSetId": 5
      },
      "lineNbr": 312,
      "author": {
        "id": 1002032
      },
      "writtenOn": "2017-07-13T13:16:46Z",
      "side": 1,
      "message": "The reason that we prefer DCHECK_EQ() and co. over a regular DCHECK() is that it\u0027ll actually output the following (line 313) for you.",
      "revId": "a5498dce162145a93f78e6e3522bfbb945e5360e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "31729c52_7d10f5a9",
        "filename": "chrome/browser/notifications/notification_channels_provider_android.cc",
        "patchSetId": 5
      },
      "lineNbr": 320,
      "author": {
        "id": 1002032
      },
      "writtenOn": "2017-07-13T13:16:46Z",
      "side": 1,
      "message": "DCHECK_EQ()",
      "revId": "a5498dce162145a93f78e6e3522bfbb945e5360e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "db4041b6_bf9df9a9",
        "filename": "chrome/browser/notifications/notification_channels_provider_android.cc",
        "patchSetId": 5
      },
      "lineNbr": 323,
      "author": {
        "id": 1002032
      },
      "writtenOn": "2017-07-13T13:16:46Z",
      "side": 1,
      "message": "Dito re: copies",
      "revId": "a5498dce162145a93f78e6e3522bfbb945e5360e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fe8b5463_82f6bff8",
        "filename": "chrome/browser/notifications/notification_channels_provider_android.h",
        "patchSetId": 5
      },
      "lineNbr": 10,
      "author": {
        "id": 1002032
      },
      "writtenOn": "2017-07-13T13:16:46Z",
      "side": 1,
      "message": "#include \u003cmap\u003e",
      "revId": "a5498dce162145a93f78e6e3522bfbb945e5360e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7fa30d04_885deb2d",
        "filename": "chrome/browser/notifications/notification_channels_provider_android.h",
        "patchSetId": 5
      },
      "lineNbr": 29,
      "author": {
        "id": 1002032
      },
      "writtenOn": "2017-07-13T13:16:46Z",
      "side": 1,
      "message": "Each of these std::string arguments should be const\u0026. Right now the compiler will make a copy of each string (with a heap allocation) on call, which is expensive.",
      "revId": "a5498dce162145a93f78e6e3522bfbb945e5360e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3a6d08a5_fac7cefe",
        "filename": "chrome/browser/notifications/notification_channels_provider_android.h",
        "patchSetId": 5
      },
      "lineNbr": 37,
      "author": {
        "id": 1002032
      },
      "writtenOn": "2017-07-13T13:16:46Z",
      "side": 1,
      "message": "Why do we store the timestamp as a string and not as a base::Time? We should treat it as a base::Time until the very last pieces where it\u0027ll become a string.",
      "revId": "a5498dce162145a93f78e6e3522bfbb945e5360e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a79e99e8_cc8d8987",
        "filename": "chrome/browser/notifications/notification_channels_provider_android_unittest.cc",
        "patchSetId": 5
      },
      "lineNbr": 49,
      "author": {
        "id": 1002032
      },
      "writtenOn": "2017-07-13T13:16:46Z",
      "side": 1,
      "message": "DCHECK_NE",
      "revId": "a5498dce162145a93f78e6e3522bfbb945e5360e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9de000ea_e1ced479",
        "filename": "chrome/browser/notifications/notification_channels_provider_android_unittest.cc",
        "patchSetId": 5
      },
      "lineNbr": 55,
      "author": {
        "id": 1002032
      },
      "writtenOn": "2017-07-13T13:16:46Z",
      "side": 1,
      "message": "This should probably use std::find().\n\nauto iter \u003d std::find(\n    channels_.begin(), channels_.end(),\n    [\u0026origin](const std::pair\u003cstd::string, NotificationChannel\u003e\u0026 pair) {\n      return pair.second.origin \u003d\u003d origin;\n    });\n\nDCHECK(iter !\u003d std::end(channels_));\niter-\u003esecond.status \u003d status;\n\nUnfortunately we can\u0027t use DCHECK_NE() on iterators yet :(.",
      "revId": "a5498dce162145a93f78e6e3522bfbb945e5360e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d2685518_7ae65047",
        "filename": "chrome/browser/notifications/notification_channels_provider_android_unittest.cc",
        "patchSetId": 5
      },
      "lineNbr": 118,
      "author": {
        "id": 1002032
      },
      "writtenOn": "2017-07-13T13:16:46Z",
      "side": 1,
      "message": "nit: prefer to avoid overloading",
      "revId": "a5498dce162145a93f78e6e3522bfbb945e5360e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}