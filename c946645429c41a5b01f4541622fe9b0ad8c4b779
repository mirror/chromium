{
  "comments": [
    {
      "key": {
        "uuid": "f37ae29d_682255f1",
        "filename": "base/metrics/persistent_histogram_allocator.cc",
        "patchSetId": 1
      },
      "lineNbr": 542,
      "author": {
        "id": 1001534
      },
      "writtenOn": "2017-08-08T15:07:58Z",
      "side": 1,
      "message": "Don\u0027t need to cast for the conditional, I\u0027d say cast inline for the return value.",
      "revId": "c946645429c41a5b01f4541622fe9b0ad8c4b779",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2ce7bb6e_b332d053",
        "filename": "base/metrics/persistent_histogram_allocator.cc",
        "patchSetId": 1
      },
      "lineNbr": 542,
      "author": {
        "id": 1117419
      },
      "writtenOn": "2017-08-08T15:40:20Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f37ae29d_682255f1",
      "revId": "c946645429c41a5b01f4541622fe9b0ad8c4b779",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d49fa80c_81eae7ea",
        "filename": "base/metrics/persistent_histogram_allocator.cc",
        "patchSetId": 1
      },
      "lineNbr": 543,
      "author": {
        "id": 1001534
      },
      "writtenOn": "2017-08-08T13:56:40Z",
      "side": 1,
      "message": "I thought we\u0027d agreed a LazyInstance\u003cHistogramBase\u003e would result in essentially the same logic but re-using existing subtle:: code instead of rolling your own)?",
      "revId": "c946645429c41a5b01f4541622fe9b0ad8c4b779",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "42375b0e_926fdaf1",
        "filename": "base/metrics/persistent_histogram_allocator.cc",
        "patchSetId": 1
      },
      "lineNbr": 543,
      "author": {
        "id": 1117419
      },
      "writtenOn": "2017-08-08T14:07:25Z",
      "side": 1,
      "message": "We did agree but then I remembered the other reason why it\u0027s infeasible.  From the bug:\n\nBut I just remembered the other reason I abandoned trying to use LazyInstance...  If it is \"under construction\", LazyInstance yields the CPU until construction is finished.  I need to return nullptr because this method has to deal with being called recursively.",
      "parentUuid": "d49fa80c_81eae7ea",
      "revId": "c946645429c41a5b01f4541622fe9b0ad8c4b779",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "563db38f_a34af2b7",
        "filename": "base/metrics/persistent_histogram_allocator.cc",
        "patchSetId": 1
      },
      "lineNbr": 543,
      "author": {
        "id": 1001534
      },
      "writtenOn": "2017-08-08T15:07:58Z",
      "side": 1,
      "message": "Having to support recursion in a GetOrCreate*() method is weird... why is it re-entered? And why doesn\u0027t the re-entrant call care to get a real value..?",
      "parentUuid": "42375b0e_926fdaf1",
      "revId": "c946645429c41a5b01f4541622fe9b0ad8c4b779",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e89128ff_62d04889",
        "filename": "base/metrics/persistent_histogram_allocator.cc",
        "patchSetId": 1
      },
      "lineNbr": 543,
      "author": {
        "id": 1117419
      },
      "writtenOn": "2017-08-08T15:40:20Z",
      "side": 1,
      "message": "Creating a histogram to store the result itself generates a result.  When trying to store the result, this method again gets called.",
      "parentUuid": "563db38f_a34af2b7",
      "revId": "c946645429c41a5b01f4541622fe9b0ad8c4b779",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a1fe6209_c6841e4e",
        "filename": "base/metrics/persistent_histogram_allocator.cc",
        "patchSetId": 1
      },
      "lineNbr": 550,
      "author": {
        "id": 1001534
      },
      "writtenOn": "2017-08-08T13:56:40Z",
      "side": 1,
      "message": "This didn\u0027t use to return nullptr when racing to create (fixed when using LazyInstance)",
      "revId": "c946645429c41a5b01f4541622fe9b0ad8c4b779",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2f7151a0_f5577192",
        "filename": "base/metrics/persistent_histogram_allocator.cc",
        "patchSetId": 1
      },
      "lineNbr": 550,
      "author": {
        "id": 1117419
      },
      "writtenOn": "2017-08-08T14:07:25Z",
      "side": 1,
      "message": "The code could yield the CPU while waiting but it\u0027s not important.  There is a tiny chance we lose one creation result from a report of thousands.",
      "parentUuid": "a1fe6209_c6841e4e",
      "revId": "c946645429c41a5b01f4541622fe9b0ad8c4b779",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3eed28a4_c22e8891",
        "filename": "base/metrics/persistent_histogram_allocator.cc",
        "patchSetId": 1
      },
      "lineNbr": 550,
      "author": {
        "id": 1001534
      },
      "writtenOn": "2017-08-08T15:07:58Z",
      "side": 1,
      "message": "Feels like this loss could be biased though (e.g. a specific error case on startup never being caught while all other reported enums make it through, skewing a given histogram). This was also a problem before though but just mentioning FWIW..",
      "parentUuid": "2f7151a0_f5577192",
      "revId": "c946645429c41a5b01f4541622fe9b0ad8c4b779",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "812f7804_98d06f4a",
        "filename": "base/metrics/persistent_histogram_allocator.cc",
        "patchSetId": 1
      },
      "lineNbr": 550,
      "author": {
        "id": 1117419
      },
      "writtenOn": "2017-08-08T15:40:20Z",
      "side": 1,
      "message": "During normal use, the first histograms are created while the Browser is single-threaded so it doesn\u0027t happen in practice.",
      "parentUuid": "3eed28a4_c22e8891",
      "revId": "c946645429c41a5b01f4541622fe9b0ad8c4b779",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}