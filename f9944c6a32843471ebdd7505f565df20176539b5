{
  "comments": [
    {
      "key": {
        "uuid": "0cfffd4f_51a5c77d",
        "filename": "net/http/http_network_transaction.cc",
        "patchSetId": 1
      },
      "lineNbr": 128,
      "author": {
        "id": 1001604
      },
      "writtenOn": "2017-08-03T21:55:46Z",
      "side": 1,
      "message": ":-P",
      "revId": "f9944c6a32843471ebdd7505f565df20176539b5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "52f01ffd_74a198bd",
        "filename": "net/http/http_network_transaction.cc",
        "patchSetId": 1
      },
      "lineNbr": 131,
      "author": {
        "id": 1001604
      },
      "writtenOn": "2017-08-03T21:55:46Z",
      "side": 1,
      "message": "Huh, I hadn\u0027t thought about the proxy. I guess the proxy just gets a CONNECT so it\u0027s even idempotent. Although when ERR_EARLY_DATA_REJECTED flips it back to false we\u0027ll need to be able to tell which it was from.",
      "revId": "f9944c6a32843471ebdd7505f565df20176539b5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "16135f95_a6437185",
        "filename": "net/http/http_network_transaction.cc",
        "patchSetId": 1
      },
      "lineNbr": 1643,
      "author": {
        "id": 1001604
      },
      "writtenOn": "2017-08-03T21:55:46Z",
      "side": 1,
      "message": "Nit: Disable\n\nBut this does not actually disable it. Using the per-connection SSLConfigs is basically always wrong unless you change other code with them. Remember we have socket pooling and HTTP2 pooling here. All parameters that vary *must* be accounted for in the pooling logic, otherwise things will get mixed up.\n\nThe easiest case is to incorporate the boolean into the group name down in the socket pooling, but this does not work here as it will bifurcate the socket pools between 0-RTT and non-0-RTT. You will need to instead have both the socket and HTTP2 pools be aware that both sockets (HTTP/1.1) and SpdySessions (HTTP/2) start out as 0-RTT and predictive and then transition to 1-RTT somewhere during their lifespan. Both those bits of logic must then be aware that some requests allow early data and some do not. Those that allow early data may match with either kind of pooled object. Those that don\u0027t must wait until they transition.\n\nAll this, of course, will need tests for all the interesting cases. Actually, you will almost certainly need to integrate this into the SocketDataProvider and mock socket stuff to test this fully.",
      "range": {
        "startLine": 1643,
        "startChar": 5,
        "endLine": 1643,
        "endChar": 13
      },
      "revId": "f9944c6a32843471ebdd7505f565df20176539b5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "63611065_d8cee924",
        "filename": "net/http/http_network_transaction.cc",
        "patchSetId": 1
      },
      "lineNbr": 1643,
      "author": {
        "id": 1001604
      },
      "writtenOn": "2017-08-03T21:56:55Z",
      "side": 1,
      "message": "(This is the socket pool integration I was asking about earlier.)",
      "parentUuid": "16135f95_a6437185",
      "range": {
        "startLine": 1643,
        "startChar": 5,
        "endLine": 1643,
        "endChar": 13
      },
      "revId": "f9944c6a32843471ebdd7505f565df20176539b5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "490c930c_15b9e345",
        "filename": "net/http/http_network_transaction.cc",
        "patchSetId": 1
      },
      "lineNbr": 1645,
      "author": {
        "id": 1001604
      },
      "writtenOn": "2017-08-03T21:55:46Z",
      "side": 1,
      "message": "I guess being conservative works too. In theory only one of the two actually bounced.\n\nDo you think this should be in the ERR_EARLY_DATA_REJECTED handler above? If QUIC bounced, we may as well not use TLS 0-RTT. (That\u0027s an argument for ERR_SSL_EARLY_DATA_REJECTED and QUIC getting a different one.)",
      "revId": "f9944c6a32843471ebdd7505f565df20176539b5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "54f22923_0751a197",
        "filename": "net/socket/ssl_client_socket_impl.cc",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1001604
      },
      "writtenOn": "2017-08-03T21:59:04Z",
      "side": 1,
      "message": "Oh, this also should be eagerly driving the full handshake to avoid a deadlock. Probably can get away with doing that separately, but add a TODO and bug for it that blocks the main bug so we do not forget.",
      "revId": "f9944c6a32843471ebdd7505f565df20176539b5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f3e26950_c820c429",
        "filename": "net/socket/ssl_client_socket_impl.cc",
        "patchSetId": 1
      },
      "lineNbr": 358,
      "author": {
        "id": 1001604
      },
      "writtenOn": "2017-08-03T21:55:46Z",
      "side": 1,
      "message": "Stray change?",
      "revId": "f9944c6a32843471ebdd7505f565df20176539b5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9ce8731c_4965da64",
        "filename": "net/socket/ssl_client_socket_impl.cc",
        "patchSetId": 1
      },
      "lineNbr": 1121,
      "author": {
        "id": 1001604
      },
      "writtenOn": "2017-08-03T21:55:46Z",
      "side": 1,
      "message": "This shouldn\u0027t be down here in the connect_error_details_ logic. You lose the net_log_.AddEvent and everything else. Simplest would just be to map it to a //net error code in the actual error mapping and route it up.",
      "revId": "f9944c6a32843471ebdd7505f565df20176539b5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "13b37395_0d798c66",
        "filename": "net/ssl/ssl_config.h",
        "patchSetId": 1
      },
      "lineNbr": 108,
      "author": {
        "id": 1001604
      },
      "writtenOn": "2017-08-03T21:55:46Z",
      "side": 1,
      "message": "Say something about the caller obligations when setting this on.",
      "revId": "f9944c6a32843471ebdd7505f565df20176539b5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "32885f1b_a2777d55",
        "filename": "net/ssl/ssl_server_config.h",
        "patchSetId": 1
      },
      "lineNbr": 39,
      "author": {
        "id": 1001604
      },
      "writtenOn": "2017-08-03T21:55:46Z",
      "side": 1,
      "message": "Say something about caller obligations when setting this on.",
      "revId": "f9944c6a32843471ebdd7505f565df20176539b5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e616275e_ec514dab",
        "filename": "net/test/embedded_test_server/embedded_test_server.cc",
        "patchSetId": 1
      },
      "lineNbr": 258,
      "author": {
        "id": 1001604
      },
      "writtenOn": "2017-08-03T21:55:46Z",
      "side": 1,
      "message": "Comment maybe? Probably also worth documenting one way or another. Among other things, this is a UAF if there are any open sockets, so it probably should CHECK or DCHECK something.",
      "revId": "f9944c6a32843471ebdd7505f565df20176539b5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9480bd9e_cf00d198",
        "filename": "net/url_request/url_request_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 11411,
      "author": {
        "id": 1001604
      },
      "writtenOn": "2017-08-03T21:55:46Z",
      "side": 1,
      "message": "TLSEarlyDataTest",
      "revId": "f9944c6a32843471ebdd7505f565df20176539b5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2711f11c_a89c7969",
        "filename": "net/url_request/url_request_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 11414,
      "author": {
        "id": 1001604
      },
      "writtenOn": "2017-08-03T21:55:46Z",
      "side": 1,
      "message": "(I guess when we\u0027ve gotten per-URLRequestContext session caches this call can just get removed.)",
      "revId": "f9944c6a32843471ebdd7505f565df20176539b5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "029d92e9_573282b7",
        "filename": "net/url_request/url_request_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 11453,
      "author": {
        "id": 1001604
      },
      "writtenOn": "2017-08-03T21:55:46Z",
      "side": 1,
      "message": "This test doesn\u0027t assert that the first request was received over early data. There\u0027s loads of ways the test could just flakily pass. Perhaps have EmbeddedTestServer set a bool on HttpRequest and then set a header based on it?\n\nUnit tests at the SSLClientSocketImpl level would also be useful. (I think it\u0027s fine to test HttpNetworkTransaction by way of URLRequest, though it\u0027d be nice if we found a way to assert in the later tests that the retry did indeed happen...)",
      "revId": "f9944c6a32843471ebdd7505f565df20176539b5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "365cf3d6_892bc4ec",
        "filename": "net/url_request/url_request_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 11499,
      "author": {
        "id": 1001604
      },
      "writtenOn": "2017-08-03T21:55:46Z",
      "side": 1,
      "message": "Could you stash the old certificate in a variable somewhere and check that they\u0027re not the same? (I think all these ASSERTs can also be EXPECTs throughout but I don\u0027t hugely care.)",
      "revId": "f9944c6a32843471ebdd7505f565df20176539b5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "26587f35_fa5251a4",
        "filename": "net/url_request/url_request_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 11531,
      "author": {
        "id": 1001604
      },
      "writtenOn": "2017-08-03T21:55:46Z",
      "side": 1,
      "message": "I think you probably meant TLS1_2 here.",
      "revId": "f9944c6a32843471ebdd7505f565df20176539b5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "25ee960f_d455ea54",
        "filename": "net/url_request/url_request_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 11548,
      "author": {
        "id": 1001604
      },
      "writtenOn": "2017-08-03T21:55:46Z",
      "side": 1,
      "message": "Check the version is TLS 1.2.",
      "revId": "f9944c6a32843471ebdd7505f565df20176539b5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}