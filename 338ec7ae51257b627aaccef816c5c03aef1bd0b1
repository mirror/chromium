{
  "comments": [
    {
      "key": {
        "uuid": "98848066_1eca9073",
        "filename": "chrome/browser/loader/chrome_resource_dispatcher_host_delegate.cc",
        "patchSetId": 10
      },
      "lineNbr": 995,
      "author": {
        "id": 1115999
      },
      "writtenOn": "2017-08-30T06:03:32Z",
      "side": 1,
      "message": "So you are setting this bit in chrome...",
      "revId": "338ec7ae51257b627aaccef816c5c03aef1bd0b1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5222d3d5_36573f3a",
        "filename": "components/data_reduction_proxy/content/browser/content_lofi_decider.cc",
        "patchSetId": 10
      },
      "lineNbr": 179,
      "author": {
        "id": 1115999
      },
      "writtenOn": "2017-08-30T06:03:32Z",
      "side": 1,
      "message": "to read it in your component content does not depend on.\n\nIt seems this kind of a bit should be this component\u0027s business and hence be opaque to content/. Consider exposing embedder-specific opaque data on the request or reserve a range for the embedder-specific preview bits.\n\nAlso, I am not sure how this kind of the logic is going to map to the network servicification.\n\n+John: fyi",
      "revId": "338ec7ae51257b627aaccef816c5c03aef1bd0b1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5b28ad94_f8a2883e",
        "filename": "components/data_reduction_proxy/content/browser/content_lofi_decider.cc",
        "patchSetId": 10
      },
      "lineNbr": 179,
      "author": {
        "id": 1002532
      },
      "writtenOn": "2017-08-30T15:20:02Z",
      "side": 1,
      "message": "I\u0027m surprised that content has knowledge about this feature.\n\nWhy was this done? e.g. why can\u0027t the component keep track of this state itself?",
      "parentUuid": "5222d3d5_36573f3a",
      "revId": "338ec7ae51257b627aaccef816c5c03aef1bd0b1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "313a6416_2f82b609",
        "filename": "components/data_reduction_proxy/content/browser/content_lofi_decider.cc",
        "patchSetId": 10
      },
      "lineNbr": 179,
      "author": {
        "id": 1166490
      },
      "writtenOn": "2017-08-30T17:12:56Z",
      "side": 1,
      "message": "I agree. It may make it more complicated for our related components, but leaves content/ simpler which is preferable. Typically, PreviewsState is reserved for features that blink must know about. Raj, see how offline previews is implemented; it has a PreviewsType, but not a PreviewsState, which is the approach you should likely take here. Instead of asking the PreviewsBlacklist in GetPreviewsState, you can probably plumb a reference to PreviewsDecider into DRPIOData, and then access the client blacklist through that in the NetworkDelegate. I think the current component layering has DRP depending on previews, so this should be fine.\n\nAlternatively, we are consistently coupling DRP and previews more and more, so you could add a new NetworkDelegate for previews if you wish. Client side lofi and amp previews should both be moved out of DRP and into previews, or at some point we should flatten the two components. For this problem, you may just wish to open a bug if there isn\u0027t one, as this would require some heavy refactoring. To clarify, we\u0027ve named our components D_R_P and previews, but the two components amount to data_saver and previews_blacklist, which may be fine in the long run, but we should debate within the team how we want to move forward (i.e., rename the components as previously implied or rename d_r_p to data_saver and move previews_blacklist within it in its own directory).",
      "parentUuid": "5b28ad94_f8a2883e",
      "revId": "338ec7ae51257b627aaccef816c5c03aef1bd0b1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8bb69ad0_db1156ed",
        "filename": "components/data_reduction_proxy/content/browser/content_lofi_decider.cc",
        "patchSetId": 10
      },
      "lineNbr": 179,
      "author": {
        "id": 1163595
      },
      "writtenOn": "2017-08-31T18:37:29Z",
      "side": 1,
      "message": "Ack. Will do.\nYes. There are some refactors that can be done.",
      "parentUuid": "313a6416_2f82b609",
      "revId": "338ec7ae51257b627aaccef816c5c03aef1bd0b1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "60a69d4c_d92b36ce",
        "filename": "third_party/WebKit/public/platform/WebURLRequest.h",
        "patchSetId": 10
      },
      "lineNbr": 169,
      "author": {
        "id": 1115999
      },
      "writtenOn": "2017-08-30T06:03:32Z",
      "side": 1,
      "message": "There is no point in exposing it to core/ for the sake of compile-type enum assert, simply skip this bit there and don\u0027t modify WebURLRequest.",
      "revId": "338ec7ae51257b627aaccef816c5c03aef1bd0b1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "df2acf23_241c2e39",
        "filename": "third_party/WebKit/public/platform/WebURLRequest.h",
        "patchSetId": 10
      },
      "lineNbr": 169,
      "author": {
        "id": 1163595
      },
      "writtenOn": "2017-08-31T18:37:29Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "60a69d4c_d92b36ce",
      "revId": "338ec7ae51257b627aaccef816c5c03aef1bd0b1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}