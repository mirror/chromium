{
  "comments": [
    {
      "key": {
        "uuid": "41386cef_947a8635",
        "filename": "content/public/common/simple_url_loader.cc",
        "patchSetId": 8
      },
      "lineNbr": 352,
      "author": {
        "id": 1001809
      },
      "writtenOn": "2017-10-13T21:40:13Z",
      "side": 1,
      "message": "nit: I think \"fiIe\" has an I in place of the l?",
      "range": {
        "startLine": 352,
        "startChar": 10,
        "endLine": 352,
        "endChar": 11
      },
      "revId": "edaeba00f6d44e2d3c95d23e0c7ae232cacbeb6b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "20f65c5b_fdb30fed",
        "filename": "content/public/common/simple_url_loader.cc",
        "patchSetId": 8
      },
      "lineNbr": 352,
      "author": {
        "id": 1115968
      },
      "writtenOn": "2017-10-13T22:35:58Z",
      "side": 1,
      "message": "Am I missing something?  Looks right to me, both in \"FileWriter\" and \"file\".  Ctrl-F file seems to confirm its spelled right.  Or is there some other file I\u0027m missing?",
      "parentUuid": "41386cef_947a8635",
      "range": {
        "startLine": 352,
        "startChar": 10,
        "endLine": 352,
        "endChar": 11
      },
      "revId": "edaeba00f6d44e2d3c95d23e0c7ae232cacbeb6b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "da9d1d90_3a13c1f1",
        "filename": "content/public/common/simple_url_loader.cc",
        "patchSetId": 8
      },
      "lineNbr": 352,
      "author": {
        "id": 1001809
      },
      "writtenOn": "2017-10-14T16:36:35Z",
      "side": 1,
      "message": "Huh.  Now it looks fine.  Cosmic ray maybe?  Sorry about the spam, in any case.",
      "parentUuid": "20f65c5b_fdb30fed",
      "range": {
        "startLine": 352,
        "startChar": 10,
        "endLine": 352,
        "endChar": 11
      },
      "revId": "edaeba00f6d44e2d3c95d23e0c7ae232cacbeb6b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "18818e28_4f6efe3c",
        "filename": "content/public/common/simple_url_loader.cc",
        "patchSetId": 8
      },
      "lineNbr": 516,
      "author": {
        "id": 1001809
      },
      "writtenOn": "2017-10-13T21:40:13Z",
      "side": 1,
      "message": "nit, suggestion: file_exists_?  (Just because if it\u0027s created and then destroyed, technically it still *has* been created.)",
      "range": {
        "startLine": 516,
        "startChar": 9,
        "endLine": 516,
        "endChar": 22
      },
      "revId": "edaeba00f6d44e2d3c95d23e0c7ae232cacbeb6b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1ff97105_77dcf84d",
        "filename": "content/public/common/simple_url_loader.cc",
        "patchSetId": 8
      },
      "lineNbr": 516,
      "author": {
        "id": 1115968
      },
      "writtenOn": "2017-10-13T22:35:58Z",
      "side": 1,
      "message": "But it doesn\u0027t delete any previously created file (Or if something else created a file, we don\u0027t delete the file) - paranoia about that is the reason this bool exists.  Maybe just owns_file_, which I had before, but then I removed it before re-adding a bool that does the same thing?",
      "parentUuid": "18818e28_4f6efe3c",
      "range": {
        "startLine": 516,
        "startChar": 9,
        "endLine": 516,
        "endChar": 22
      },
      "revId": "edaeba00f6d44e2d3c95d23e0c7ae232cacbeb6b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ec151fc_89d0710f",
        "filename": "content/public/common/simple_url_loader.cc",
        "patchSetId": 8
      },
      "lineNbr": 602,
      "author": {
        "id": 1001809
      },
      "writtenOn": "2017-10-13T21:40:13Z",
      "side": 1,
      "message": "nit, suggestion: StartRequest to more clearly distinguish granularity from the PrepareToStart() method?  If you make this name change you could just change PrepareToStart() over to Start(), which I\u0027d like better because I wouldn\u0027t naively expect the request to have started upon return from a PrepareTo* method.",
      "range": {
        "startLine": 602,
        "startChar": 7,
        "endLine": 602,
        "endChar": 20
      },
      "revId": "edaeba00f6d44e2d3c95d23e0c7ae232cacbeb6b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f962b790_623abe9f",
        "filename": "content/public/common/simple_url_loader.cc",
        "patchSetId": 8
      },
      "lineNbr": 602,
      "author": {
        "id": 1115968
      },
      "writtenOn": "2017-10-13T22:35:58Z",
      "side": 1,
      "message": "Done.  I agree the naming was pretty confusing.",
      "parentUuid": "9ec151fc_89d0710f",
      "range": {
        "startLine": 602,
        "startChar": 7,
        "endLine": 602,
        "endChar": 20
      },
      "revId": "edaeba00f6d44e2d3c95d23e0c7ae232cacbeb6b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f4052393_01946db5",
        "filename": "content/public/common/simple_url_loader.cc",
        "patchSetId": 8
      },
      "lineNbr": 719,
      "author": {
        "id": 1001809
      },
      "writtenOn": "2017-10-13T21:40:13Z",
      "side": 1,
      "message": "I don\u0027t see the need for the callback having the ability to delete this to be part of the interface contract (either based on what you\u0027re currently doing or a random guess at future uses; it seems like PrepareToRetry will almost always be followed by retrying).  What drove putting this in?\n\n(To be clear, this is all implementation, and I don\u0027t care a lot about \"Best Possible Interface Contract\" that\u0027s completely contained within an implementation.  But this seems an unneeded complexity for the BodyHandler subclasses to have to be aware of/work around.)",
      "range": {
        "startLine": 719,
        "startChar": 15,
        "endLine": 719,
        "endChar": 18
      },
      "revId": "edaeba00f6d44e2d3c95d23e0c7ae232cacbeb6b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9c4cc002_99b7dd2a",
        "filename": "content/public/common/simple_url_loader.cc",
        "patchSetId": 8
      },
      "lineNbr": 719,
      "author": {
        "id": 1115968
      },
      "writtenOn": "2017-10-13T22:35:58Z",
      "side": 1,
      "message": "I was mostly thinking that when we retry, we discover the URLLoaderFactory is dead, invoke the client\u0027s callback, and then it destroys us...Though now that I think about it, I\u0027m not sure this case is handled properly.  I\u0027ll add a test where the new URLLoaderFactory dies before the retry (Normally, the old one would die, too, but the old one could give us a result before dying), and see how things work out.\n\nThat\u0027s the only case I was thinking about when I added the comment.",
      "parentUuid": "f4052393_01946db5",
      "range": {
        "startLine": 719,
        "startChar": 15,
        "endLine": 719,
        "endChar": 18
      },
      "revId": "edaeba00f6d44e2d3c95d23e0c7ae232cacbeb6b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9479013b_882d3c13",
        "filename": "content/public/common/simple_url_loader.cc",
        "patchSetId": 8
      },
      "lineNbr": 719,
      "author": {
        "id": 1001809
      },
      "writtenOn": "2017-10-14T16:36:35Z",
      "side": 1,
      "message": "Ooops, I missed that that could happen synchronously.  Sounds good.",
      "parentUuid": "9c4cc002_99b7dd2a",
      "range": {
        "startLine": 719,
        "startChar": 15,
        "endLine": 719,
        "endChar": 18
      },
      "revId": "edaeba00f6d44e2d3c95d23e0c7ae232cacbeb6b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b06680cd_4bccafb6",
        "filename": "content/public/common/simple_url_loader.cc",
        "patchSetId": 8
      },
      "lineNbr": 846,
      "author": {
        "id": 1001809
      },
      "writtenOn": "2017-10-13T21:40:13Z",
      "side": 1,
      "message": "This is probably just a style preference, but to me, since this at least looks like it is setting everything to what it\u0027ll look like upon construction, I\u0027d personally skip calling Initialize() in the constructor and just hoist all of this up into PrepareToRetry().  Up to you.",
      "range": {
        "startLine": 846,
        "startChar": 26,
        "endLine": 846,
        "endChar": 36
      },
      "revId": "edaeba00f6d44e2d3c95d23e0c7ae232cacbeb6b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "35c851d5_aae04baa",
        "filename": "content/public/common/simple_url_loader.cc",
        "patchSetId": 8
      },
      "lineNbr": 846,
      "author": {
        "id": 1115968
      },
      "writtenOn": "2017-10-13T22:35:58Z",
      "side": 1,
      "message": "So you\u0027re suggesting I duplicate values in Initialize() and in an initializer list?  That makes me nervous - I\u0027m concerned that a new value will be added, but it won\u0027t be set in both places.  With most of the initialization here, both on creation and on retry, I think that\u0027s at least a little less likely to happen.  Or am I misunderstanding you?",
      "parentUuid": "b06680cd_4bccafb6",
      "range": {
        "startLine": 846,
        "startChar": 26,
        "endLine": 846,
        "endChar": 36
      },
      "revId": "edaeba00f6d44e2d3c95d23e0c7ae232cacbeb6b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8f93eecf_eba8d0f0",
        "filename": "content/public/common/simple_url_loader.cc",
        "patchSetId": 8
      },
      "lineNbr": 846,
      "author": {
        "id": 1001809
      },
      "writtenOn": "2017-10-14T16:36:35Z",
      "side": 1,
      "message": "I certainly see your concern--I was reacting to these values all being the \"obvious\" values to initialize things to, and people pretty reflexively making sure to initialize variables in the constructor.  OTOH, initializing in the constructor and forgetting to put the same value into PrepareToRetry strikes me as a quite plausible future failure mode.  On the lightweight third hand, looking more closely I\u0027m also a bit uncomfortable about many values not being initialized in the constructor lists, but instead indirectly via function call; when someone goes digging for the initial values they\u0027re going to have a (bit) harder time finding them.  \n\nLet me float one other suggestion, then leave it up to you: If you put all the variables you need to reinitialize on retry into a nested structure with a constructor, you can re-initialize them in PrepareToRetry() simply by assigning a default initialized structure to the member.  That\u0027s only a single place for the values wanted, and those values are in the place people will naturally look for them (the constructor for the nested function).  It also provides a bit of conceptual separation between the per-request values and the per-SimpleURLLoader construction values.",
      "parentUuid": "35c851d5_aae04baa",
      "range": {
        "startLine": 846,
        "startChar": 26,
        "endLine": 846,
        "endChar": 36
      },
      "revId": "edaeba00f6d44e2d3c95d23e0c7ae232cacbeb6b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "be508654_e809afdf",
        "filename": "content/public/common/simple_url_loader.cc",
        "patchSetId": 8
      },
      "lineNbr": 912,
      "author": {
        "id": 1001809
      },
      "writtenOn": "2017-10-13T21:40:13Z",
      "side": 1,
      "message": "Is there a real gain to having this as a separate function rather than just wrapping StartInternal in the callback above?\n\n(If you take this suggestion, I\u0027ll do a followon suggestion of PrepareToRetry-\u003eRetry, for the same reason I\u0027m not ecstatic with the naming of PrepareToStart() above.  All of this up to you.)",
      "range": {
        "startLine": 912,
        "startChar": 5,
        "endLine": 912,
        "endChar": 24
      },
      "revId": "edaeba00f6d44e2d3c95d23e0c7ae232cacbeb6b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "83061e41_f3a14d3e",
        "filename": "content/public/common/simple_url_loader.cc",
        "patchSetId": 8
      },
      "lineNbr": 912,
      "author": {
        "id": 1115968
      },
      "writtenOn": "2017-10-13T22:35:58Z",
      "side": 1,
      "message": "There were a couple reasons - per style guide, StartInternal should take a const ResourceRequest\u0026, but I don\u0027t want to duplicate it.  It also seems a bit weird to pass pointers to class members back to ourselves.  Anyhow, I\u0027ve switched (And made StartInternal takes a const ResourceRequest*).",
      "parentUuid": "be508654_e809afdf",
      "range": {
        "startLine": 912,
        "startChar": 5,
        "endLine": 912,
        "endChar": 24
      },
      "revId": "edaeba00f6d44e2d3c95d23e0c7ae232cacbeb6b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6201a851_9a7508f5",
        "filename": "content/public/common/simple_url_loader.h",
        "patchSetId": 8
      },
      "lineNbr": 166,
      "author": {
        "id": 1001809
      },
      "writtenOn": "2017-10-13T21:40:13Z",
      "side": 1,
      "message": "Probably worth some verbiage about whether this can be called multiple times and if so what the effect would be?\n\nETA: A comment in the implementation (\"These variables are null if retrying is not enabled\") also implies that there are restrictions on when this function can be called, which should be documented?",
      "range": {
        "startLine": 166,
        "startChar": 10,
        "endLine": 166,
        "endChar": 14
      },
      "revId": "edaeba00f6d44e2d3c95d23e0c7ae232cacbeb6b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dbaf4b2c_616ab7ab",
        "filename": "content/public/common/simple_url_loader.h",
        "patchSetId": 8
      },
      "lineNbr": 166,
      "author": {
        "id": 1115968
      },
      "writtenOn": "2017-10-13T22:35:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6201a851_9a7508f5",
      "range": {
        "startLine": 166,
        "startChar": 10,
        "endLine": 166,
        "endChar": 14
      },
      "revId": "edaeba00f6d44e2d3c95d23e0c7ae232cacbeb6b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}