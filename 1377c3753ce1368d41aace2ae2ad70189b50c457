{
  "comments": [
    {
      "key": {
        "uuid": "731a5c9e_6af14b51",
        "filename": "content/browser/renderer_host/render_process_host_impl.cc",
        "patchSetId": 13
      },
      "lineNbr": 1255,
      "author": {
        "id": 1000128
      },
      "writtenOn": "2017-12-13T08:13:01Z",
      "side": 1,
      "message": "not sure if this is the right terminology: \"StoragePartition for guests\" ?",
      "range": {
        "startLine": 1255,
        "startChar": 21,
        "endLine": 1255,
        "endChar": 48
      },
      "revId": "1377c3753ce1368d41aace2ae2ad70189b50c457",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9c9bb589_ab9e6d5f",
        "filename": "content/browser/renderer_host/render_process_host_impl.cc",
        "patchSetId": 13
      },
      "lineNbr": 1255,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-12-13T23:56:16Z",
      "side": 1,
      "message": "sgtm; I\u0027d add \"(e.g., for the \u003cwebview\u003e tag)\" to the end of it to make it clear that this affects \u003cwebview\u003e.  (I think a \"guest\" can refer to things other than \u003cwebview\u003e, e.g. \u003cappview\u003e or \u003cextensionview\u003e or MimeHandlerView, though don\u0027t know if those cases matter at all here.)",
      "parentUuid": "731a5c9e_6af14b51",
      "range": {
        "startLine": 1255,
        "startChar": 21,
        "endLine": 1255,
        "endChar": 48
      },
      "revId": "1377c3753ce1368d41aace2ae2ad70189b50c457",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "00dc681b_77f68186",
        "filename": "content/browser/renderer_host/render_process_host_impl.cc",
        "patchSetId": 13
      },
      "lineNbr": 1259,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-12-13T23:56:16Z",
      "side": 1,
      "message": "nit: \"a process in the guest\u0027s StoragePartition\"",
      "range": {
        "startLine": 1259,
        "startChar": 47,
        "endLine": 1259,
        "endChar": 69
      },
      "revId": "1377c3753ce1368d41aace2ae2ad70189b50c457",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bfa66b90_2cc3ccee",
        "filename": "content/browser/service_worker/service_worker_process_manager.cc",
        "patchSetId": 13
      },
      "lineNbr": 219,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-12-13T23:56:16Z",
      "side": 1,
      "message": "I made a note on https://crbug.com/752667 that fixing it should just allow the SW here to automatically reuse the existing \u003cwebview\u003e process.  Don\u0027t know if it\u0027s worth mentioning in a comment/TODO that in the \u003cwebview\u003e case, this will always create a new process until 752667 is fixed.",
      "revId": "1377c3753ce1368d41aace2ae2ad70189b50c457",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "52315cf4_7dad6f95",
        "filename": "content/browser/service_worker/service_worker_process_manager_unittest.cc",
        "patchSetId": 13
      },
      "lineNbr": 319,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-12-13T23:56:16Z",
      "side": 1,
      "message": "nit: I\u0027d use kGuestScheme and perhaps add a path so this is closer to what\u0027s used in reality, something like \nconst GURL kSiteUrl(std::string(kGuestScheme).append(\"://someapp/somepath\"));\n\nAlso, maybe kGuestSiteUrl for clarity?",
      "range": {
        "startLine": 319,
        "startChar": 30,
        "endLine": 319,
        "endChar": 48
      },
      "revId": "1377c3753ce1368d41aace2ae2ad70189b50c457",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a998abb4_17a51b79",
        "filename": "content/browser/service_worker/service_worker_process_manager_unittest.cc",
        "patchSetId": 13
      },
      "lineNbr": 346,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-12-13T23:56:16Z",
      "side": 1,
      "message": "Just a note that since GetStoragePartition() translates guest site URLs in extensions/, a content/ test won\u0027t see that, and I think this will just return the default StoragePartition.  That means you\u0027ll annotate the default StoragePartition rather than one created specifically for a \u003cwebview\u003e, but I think that might be still ok for this test.  (if you wanted a non-default SP, StoragePartitionContentBrowserClient which you used in a previous PS could simulate it, though you\u0027d need to move it to a common location to use here.)",
      "range": {
        "startLine": 345,
        "startChar": 41,
        "endLine": 346,
        "endChar": 54
      },
      "revId": "1377c3753ce1368d41aace2ae2ad70189b50c457",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d5457d29_69fec95c",
        "filename": "content/browser/service_worker/service_worker_process_manager_unittest.cc",
        "patchSetId": 13
      },
      "lineNbr": 347,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-12-13T23:56:16Z",
      "side": 1,
      "message": "Hmm, doing this won\u0027t hit the path that checks the is_for_guests_only bit and stashes the site URL if it\u0027s true, right?\n\nWould it still work to replace this call with just site_instance-\u003eGetProcess() (and add a comment about rationale)?\n\nGetProcess() calls RPHI::GetProcessHostForSiteInstance(), which will compute is_for_guests_only as true because the site URL has a chrome-guest: scheme, so when CreateRenderProcessHost() is eventually reached, your new code should call set_storage_partition() for you.  You could then also use site_instance-\u003eGetProcess()-\u003eGetStoragePartition() for process_manager_ below.\n\nAnd as a bonus, you can then verify that site_instance-\u003eGetProcess()-\u003eGetStoragePartition()-\u003esite_for_service_worker() is equal to kSiteUrl.",
      "range": {
        "startLine": 347,
        "startChar": 0,
        "endLine": 347,
        "endChar": 78
      },
      "revId": "1377c3753ce1368d41aace2ae2ad70189b50c457",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d1a02aaf_7b9b0d12",
        "filename": "content/browser/service_worker/service_worker_process_manager_unittest.cc",
        "patchSetId": 13
      },
      "lineNbr": 347,
      "author": {
        "id": 1000128
      },
      "writtenOn": "2017-12-14T06:41:07Z",
      "side": 1,
      "message": "Thanks for the comments on this test, those are good points. I tried some things and think we\u0027re very limited in content unittests:\n* MockRenderProcessHost always thinks it\u0027s in the default storage partition. So we can\u0027t test the storage partition of the returned process.\n* The code path that stashes the site URL cannot be hit in this test, since we\u0027re using a RenderProcessHostFactory so we early return in RenderProcessHostImpl::CreateRenderProcessHost.\n\nI\u0027m not too clear why MockRenderProcessHost is allergic to StoragePartition.\n\nUsing RenderProcessHostImpl instead of the Mock seems to break since rph-\u003eInit() will crash.\n\nI\u0027ve modified the unit test to simply check the |site_instance| parameter passed to CreateRenderProcessHost (i.e., it tests that ServiceWorkerProcessManager uses the stashed site URL when it\u0027s available).\n\nIt seems like a real test will need to be a browser_test that tests a Chrome App that uses \u003cwebview\u003e and starts up a service worker. Could we convert something like the app in the bug report to a browser test?",
      "parentUuid": "d5457d29_69fec95c",
      "range": {
        "startLine": 347,
        "startChar": 0,
        "endLine": 347,
        "endChar": 78
      },
      "revId": "1377c3753ce1368d41aace2ae2ad70189b50c457",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b3613509_82fcabb4",
        "filename": "content/browser/service_worker/service_worker_process_manager_unittest.cc",
        "patchSetId": 13
      },
      "lineNbr": 358,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-12-13T23:56:16Z",
      "side": 1,
      "message": "I\u0027m guessing this holds only because the test ends up using the default SP, so it doesn\u0027t hit 752667 -- otherwise, I think the SW would create a new process, since AddFrameWithSite has no effect for non-default SPs.",
      "revId": "1377c3753ce1368d41aace2ae2ad70189b50c457",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f52f112a_2910a93f",
        "filename": "content/browser/storage_partition_impl.h",
        "patchSetId": 13
      },
      "lineNbr": 154,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-12-13T23:56:16Z",
      "side": 1,
      "message": "nit: mentioning \u003cwebview\u003e explicitly might be clearer, e.g. \"for a guest (e.g., for a \u003cwebview\u003e tag)\"",
      "range": {
        "startLine": 154,
        "startChar": 39,
        "endLine": 154,
        "endChar": 45
      },
      "revId": "1377c3753ce1368d41aace2ae2ad70189b50c457",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9dcc20c7_0efb71f9",
        "filename": "content/browser/storage_partition_impl.h",
        "patchSetId": 13
      },
      "lineNbr": 154,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-12-13T23:56:16Z",
      "side": 1,
      "message": "Let\u0027s say \"this is the site URL\" here.  (Site URL is in a special format expected by SiteInstance, it\u0027s important to note that this isn\u0027t just a regular URL.)",
      "range": {
        "startLine": 154,
        "startChar": 47,
        "endLine": 154,
        "endChar": 58
      },
      "revId": "1377c3753ce1368d41aace2ae2ad70189b50c457",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4f63b25f_f55a52e8",
        "filename": "content/browser/storage_partition_impl.h",
        "patchSetId": 13
      },
      "lineNbr": 154,
      "author": {
        "id": 1000128
      },
      "writtenOn": "2017-12-14T06:41:07Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9dcc20c7_0efb71f9",
      "range": {
        "startLine": 154,
        "startChar": 47,
        "endLine": 154,
        "endChar": 58
      },
      "revId": "1377c3753ce1368d41aace2ae2ad70189b50c457",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d7b8f3df_fe5b5f16",
        "filename": "content/browser/storage_partition_impl.h",
        "patchSetId": 13
      },
      "lineNbr": 158,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-12-13T23:56:16Z",
      "side": 1,
      "message": "I\u0027d add \" to ensure that the ServiceWorker stays in this StoragePartition\"",
      "range": {
        "startLine": 158,
        "startChar": 8,
        "endLine": 158,
        "endChar": 9
      },
      "revId": "1377c3753ce1368d41aace2ae2ad70189b50c457",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b712773d_eb086193",
        "filename": "content/browser/storage_partition_impl.h",
        "patchSetId": 13
      },
      "lineNbr": 158,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-12-13T23:56:16Z",
      "side": 1,
      "message": "similarly, s/URL/site URL/",
      "range": {
        "startLine": 158,
        "startChar": 5,
        "endLine": 158,
        "endChar": 8
      },
      "revId": "1377c3753ce1368d41aace2ae2ad70189b50c457",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "97da1073_2995567f",
        "filename": "content/browser/storage_partition_impl.h",
        "patchSetId": 13
      },
      "lineNbr": 158,
      "author": {
        "id": 1000128
      },
      "writtenOn": "2017-12-14T06:41:07Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b712773d_eb086193",
      "range": {
        "startLine": 158,
        "startChar": 5,
        "endLine": 158,
        "endChar": 8
      },
      "revId": "1377c3753ce1368d41aace2ae2ad70189b50c457",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8d653658_7907affd",
        "filename": "content/browser/storage_partition_impl.h",
        "patchSetId": 13
      },
      "lineNbr": 158,
      "author": {
        "id": 1000128
      },
      "writtenOn": "2017-12-14T06:41:07Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d7b8f3df_fe5b5f16",
      "range": {
        "startLine": 158,
        "startChar": 8,
        "endLine": 158,
        "endChar": 9
      },
      "revId": "1377c3753ce1368d41aace2ae2ad70189b50c457",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}