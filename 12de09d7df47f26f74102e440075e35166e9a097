{
  "comments": [
    {
      "key": {
        "uuid": "ad2ead52_9f41a5db",
        "filename": "cc/surfaces/surface.cc",
        "patchSetId": 14
      },
      "lineNbr": 64,
      "author": {
        "id": 1002513
      },
      "writtenOn": "2017-07-05T19:57:29Z",
      "side": 1,
      "message": "What are the expected counts here? Each insert is O(n) where n is the size of the container, so this is O(n^2) where n is GetPendingFrame().metadata.activation_dependencies.size()\n\nIf we\u0027re guaranteed uniqueness (or we\u0027re guaranteed a small size), then maybe it\u0027s better to just construct a vector and do a find in it. Or maybe line 74 can be a std::find_if(..., [\u0026surface_id](const SurfaceId\u0026 id) { surface_id.frame_sink_id() \u003d\u003d id.frame_sink_id(); }); or something similar",
      "revId": "12de09d7df47f26f74102e440075e35166e9a097",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "46509be7_f338d6cb",
        "filename": "cc/surfaces/surface.cc",
        "patchSetId": 14
      },
      "lineNbr": 264,
      "author": {
        "id": 1002513
      },
      "writtenOn": "2017-07-05T19:57:29Z",
      "side": 1,
      "message": "similar comment here.. single insertion is fine, but there are typically faster containers for this (like a vector), and then building a flat set out of a vector is faster if that\u0027s the desired final container.",
      "revId": "12de09d7df47f26f74102e440075e35166e9a097",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c59d80b7_b677c8bc",
        "filename": "cc/surfaces/surface.h",
        "patchSetId": 14
      },
      "lineNbr": 137,
      "author": {
        "id": 1002513
      },
      "writtenOn": "2017-07-05T19:57:29Z",
      "side": 1,
      "message": "Can you leave a comment on the differences between activation and late activation dependencies",
      "range": {
        "startLine": 137,
        "startChar": 23,
        "endLine": 137,
        "endChar": 32
      },
      "revId": "12de09d7df47f26f74102e440075e35166e9a097",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a81db688_accdc7bf",
        "filename": "cc/surfaces/surface.h",
        "patchSetId": 14
      },
      "lineNbr": 163,
      "author": {
        "id": 1002513
      },
      "writtenOn": "2017-07-05T19:57:29Z",
      "side": 1,
      "message": "Comment pls",
      "revId": "12de09d7df47f26f74102e440075e35166e9a097",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a5d7dd46_84da743b",
        "filename": "cc/surfaces/surface_dependency_deadline.h",
        "patchSetId": 14
      },
      "lineNbr": 34,
      "author": {
        "id": 1002513
      },
      "writtenOn": "2017-07-05T19:57:29Z",
      "side": 1,
      "message": "You state the assumptions and return values, but can you also add a sentence saying what this function does?",
      "revId": "12de09d7df47f26f74102e440075e35166e9a097",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}