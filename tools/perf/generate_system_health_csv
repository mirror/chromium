#!/usr/bin/env python
# Copyright 2016 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import csv
import os
import sys

from core import path_util
sys.path.insert(1, path_util.GetTelemetryDir())  # To resolve telemetry imports

import page_sets
from page_sets.system_health import expectations

def IterAllSystemHealthStories():
  for s in page_sets.SystemHealthStorySet(platform='desktop'):
    yield s
  for s in page_sets.SystemHealthStorySet(platform='mobile'):
    if len(s.SUPPORTED_PLATFORMS) < 2:
      yield s

SYSTEM_HEALTH_CSV = os.path.join(os.path.dirname(__file__),
                                 'system_health_stories.csv')

def PopulateExpectations():
  print "DEBUG: In Populate ..."
  disables = {}
  sys_health_exp = [
      expectations.SystemHealthDesktopCommonExpectations().AsDict()['stories'],
      expectations.SystemHealthDesktopMemoryExpectations().AsDict()['stories'],
      expectations.SystemHealthMobileCommonExpectations().AsDict()['stories'],
      expectations.SystemHealthMobileMemoryExpectations().AsDict()['stories'],]
  for exp in sys_health_exp:
    sys_keys = exp.keys()
    print "Unordered: %s" % sys_keys
    sys_keys.sort()
    print "Ordered: %s" % sys_keys

    for story in sys_keys:
      print "DEBUG: Disabled Story: %s" % story
      for conditions, reason in exp[story]:
        conditions_str = ", ".join(map(str, conditions))
        if story in disables:
          print "DEBUG: The story %s is a key already" % story
          if disables[story] != conditions_str:
            disables[story] += ", " + conditions_str
            "DEBUG: We had to add to the platforms %s" % disables[story]
          else:
            print "DEBUG: Condition %s exists for story %s" % (conditions_str, story)
        else:
          print "DEBUG: New Story %s in disables" % story
          disables[story] = conditions_str
       
        print "DEBUG: Condition: %s" % disables[story]
        print "DEBUG: Reason: %s" % reason

  return disables    

def main():
  print "DEBUG: Begin Main ..."
  system_health_stories = list(IterAllSystemHealthStories())
  espn = PopulateExpectations()
  system_health_stories.sort(key=lambda s: s.name)
  with open(SYSTEM_HEALTH_CSV, 'w') as f:
    csv_writer = csv.writer(f)
    csv_writer.writerow([
        'Story name', 'Platform', 'Description', 'Disabled Platforms'])
    count = 1
    for s in system_health_stories:
      p = s.SUPPORTED_PLATFORMS
      if len(p) == 2:
        p = 'all'
      else:
        p = list(p)[0]
      if s.name in espn:
        print "DEBUG: espn[s.name]: %s" % espn[s.name]
        csv_writer.writerow([s.name, p, s.GetStoryDescription(), espn[s.name]])
      else:
        csv_writer.writerow([s.name, p, s.GetStoryDescription(), " "])
  return 0


if __name__ == '__main__':
  print "DEBUG: In gen_sys_hlt_csv ..."
  sys.exit(main())
