#!/usr/bin/env python
# Copyright 2017 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import optparse
import os
import sys

from core import path_util
from core import benchmark_finders

from py_utils import cloud_storage


def GetAllStorySets():
  story_sets = []
  benchmarks_to_skip = [
      'skpicture_printer_ct',
      'screenshot_ct',
      'repaint_ct',
      'rasterize_and_record_micro_ct',
      'multipage_skpicture_printer_ct',
      'loading.cluster_telemetry',
      'skpicture_printer',
      'cros_tab_switching.typical_24',
      'multipage_skpicture_printer']

  for benchmark in benchmark_finders.GetAllBenchmarks():
    if benchmark.Name() in benchmarks_to_skip:
      continue

    parser = optparse.OptionParser()
    benchmark.AddBenchmarkCommandLineArgs(parser)
    options, _ = parser.parse_args([])
    story_sets.append(benchmark().CreateStorySet(options))
  return story_sets


def GetMissingArchivesInCloudStorage(archive_infos):
  cloud_storage_paths = set()
  missing_archives = []
  for wpr_archive_info in archive_infos:
    bucket = wpr_archive_info._bucket
    story_archives = wpr_archive_info._data['archives']
    for story in story_archives:
      for _, archive_path in story_archives[story].iteritems():
        archive_path = os.path.join(wpr_archive_info._base_dir,
            archive_path)
        hash_path = archive_path + '.sha1'
        if not os.path.exists(hash_path):
          missing_archives.append(archive_path)
          continue
        remote_path = cloud_storage.ReadHash(hash_path)
        cloud_storage_paths.add((bucket, remote_path))
  for (bucket, remote_path) in cloud_storage_paths:
    if not cloud_storage.Exists(bucket, remote_path):
      missing_archives.append(archive_path)
  return missing_archives


def main():
  archive_infos = []
  for s in GetAllStorySets():
    if not s.wpr_archive_info:
      continue
    archive_infos.append(s.wpr_archive_info)

  missing_archives = GetMissingArchivesInCloudStorage(archive_infos)
  assert not missing_archives, (
        'Archives not checked in cloud storage properly: %s' %
        '\n'.join(missing_archives))


if __name__ == '__main__':
  sys.exit(main())
