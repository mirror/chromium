# -*- python -*-
# ex: set syntax=python:

# Copyright (c) 2006-2008 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

# This is the buildmaster config file for the 'chromium' bot. It must
# be installed as 'master.cfg' in your buildmaster's base directory
# (although the filename can be changed with the --basedir option to
# 'mktap buildbot master').

# It has one job: define a dictionary named BuildmasterConfig. This
# dictionary has a variety of keys to control different aspects of the
# buildmaster. They are documented in docs/config.xhtml .

# This file follows this naming convention:
# Factories: f_chromium_[dbg/rel]_[type]
# Builders:  b_chromium_[dbg/rel]_[os]_[type]
# BuildDir:  chromium-[dbg/rel]-[os]-[type]
#
# os = xp/vista/linux/mac
# type = perf/tests/full/jsc/webkit_latest/purify

from buildbot import locks
from buildbot.buildslave import BuildSlave
from buildbot.steps import shell
from buildbot.scheduler import Dependent
from buildbot.scheduler import Nightly
from buildbot.scheduler import Scheduler
from buildbot.scheduler import Triggerable

# Reload all the python files under master and common
import master
reload(master)
import common
reload(common)

# These modules come from scripts/master, which must be in the PYTHONPATH.
import chromium_changes
import chromium_step
import master_utils

# These modules come from scripts/common, which must be in the PYTHONPATH.
import chromium_config as config
import chromium_utils

ActiveMaster = config.Master.ChromiumFYI

# The default behavior of this master.cfg file is to run our production
# buildbot only when running on our production host.
PRODUCTION_BUILDBOT_MASTER = ActiveMaster.is_production_host

if PRODUCTION_BUILDBOT_MASTER:
  # Production defaults
  MASTER_HOST = ActiveMaster.master_host
  WEB_STATUS = True
  MAIL_NOTIFIER = False
  IRC_STATUS_BOT = False
  PB_LISTENER = False
else:
  MASTER_HOST = config.Master.Experimental.master_host
  WEB_STATUS = True
  MAIL_NOTIFIER = False
  IRC_STATUS_BOT = False
  PB_LISTENER = False

MASTER_PORT = ActiveMaster.master_port

# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

# 'slavePortnum' defines the TCP port to listen on. This must match the value
# configured into the buildslaves (with their --master option)
c['slavePortnum'] = ActiveMaster.slave_port


####### BUILDSLAVES

# the 'slaves' list defines the set of allowable buildslaves. Each element is a
# tuple of bot-name and bot-password. These correspond to values given to the
# buildslave's mktap invocation.
bot_password = config.Master.GetBotPassword()
print bot_password
if PRODUCTION_BUILDBOT_MASTER:
  c['slaves'] = [BuildSlave('chrome-xp-2-v8', bot_password),
                 BuildSlave('internal-sgk', bot_password)]

  for i in range(129,200):
    c['slaves'].append(BuildSlave('hae%d' % i, bot_password))
  for i in range (30,40):
    c['slaves'].append(BuildSlave('codf%d' % i, bot_password))
else:
  c['slaves'] = [BuildSlave('chromium-win-experimental', bot_password),
                 BuildSlave('chromium-mac-experimental', bot_password)]


####### CHANGESOURCES

# the 'change_source' list tells the buildmaster how it should find out about
# source code changes. Any class which implements IChangeSource can be added
# to this list: there are several in buildbot/changes/*.py to choose from.
def ChromeTreeFileSplitter(path):
  """split_file for the 'src' project in the trunk."""

  # List of projects we are interested in. The project names must exactly
  # match paths in the Subversion repository, relative to the 'path' URL
  # argument. master_utils.SplitPath() will use them as branch names to
  # kick off the Schedulers for different projects.
  projects = ['src']
  return master_utils.SplitPath(projects, path)

def V8FileSplitter(path):
  """split_file for v8 bleeding edge branch changes."""
  projects = ['bleeding_edge']
  return master_utils.SplitPath(projects, path)

def WebkitFileSplitter(path):
  """split_file for webkit.org repository."""
  projects = ['trunk']
  return master_utils.SplitPath(projects, path)


# Polls config.Master.trunk_url for changes
trunk_poller = chromium_changes.SVNPoller(svnurl = config.Master.trunk_url,
                                          split_file=ChromeTreeFileSplitter,
                                          pollinterval=10,
                                          svnbin=config.Master.svn_binary_path)

## Polls V8 bleeding edge branch.
v8_poller = chromium_changes.SVNPoller(
                svnurl = config.Master.v8_url + '/branches',
                split_file=V8FileSplitter,
                pollinterval=30,
                svnbin=config.Master.svn_binary_path)

## Polls webkit.org repository.
webkit_poller = chromium_changes.SVNPoller(
                    svnurl = config.Master.webkit_mirror_url,
                    split_file=WebkitFileSplitter,
                    pollinterval=30,
                    svnbin=config.Master.svn_binary_path)

c['change_source'] = [trunk_poller, v8_poller, webkit_poller]


####### SCHEDULERS

## configure the Schedulers

# Main scheduler for all changes in trunk.
s_chromium = Scheduler(name='chromium',
                       branch='src',
                       treeStableTimer=60,
                       builderNames=['XP Tests',
                                     'XP Tests (dbg)',
                                     'Chromium Vista 64',
                                     'Chromium Windows7',
                                     'Chromium XP (gears)',
                                     'XP Perf (v8-latest)',
                                     'Webkit (V8-Latest)',
                                     'Webkit (webkit.org)',
                                     'Webkit (scons)',
                                     'Webkit (armu)'])

# Scheduler to trigger when v8 bleeding edge is updated.'
s_chromium_rel_v8_branch = Scheduler(name='chromium_rel_v8_branch',
                                     branch='bleeding_edge',
                                     treeStableTimer=60,
                                     builderNames=['XP Perf (v8-latest)',
                                                   'Webkit (V8-Latest)'])

# Scheduler to trigger when webkit.org is updated.
s_webkit_rel_webkit_org = Scheduler(name='webkit_rel_webkit_org',
                                    branch='trunk',
                                    treeStableTimer=60,
                                    builderNames=['Webkit (webkit.org)'])

# Experimental Scheduler
s_chromium_experimental = Scheduler(name='experimental',
                                    branch='src',
                                    treeStableTimer=60,
                                    builderNames=['Chromium Win Experimental',
                                                  'Chromium Mac Experimental'])

if PRODUCTION_BUILDBOT_MASTER:
  c['schedulers'] = [s_chromium,
                     s_chromium_rel_v8_branch,
                     s_webkit_rel_webkit_org]
else:
  c['schedulers'] = [s_chromium_experimental]


  ####### BUILDERS

# buildbot/process/factory.py provides several BuildFactory classes you can
# start with, which implement build processes for common targets (GNU
# autoconf projects, CPAN perl modules, etc). The factory.BuildFactory is the
# base class, and is configured with a series of BuildSteps. When the build
# is run, the appropriate buildslave is told to execute each Step in turn.

# the first BuildStep is typically responsible for obtaining a copy of the
# sources. There are source-obtaining Steps in buildbot/process/step.py for
# CVS, SVN, and others.

builders = []

# ----------------------------------------------------------------------------
# FACTORIES

m = master_utils.MasterFactory('src/chrome',
                               config.Master.trunk_url_src,
                               config.Master.trunk_internal_url_src,
                               target_platform='win32')

m_webkit = master_utils.MasterFactory('src/webkit',
                                       config.Master.trunk_url_src,
                                       config.Master.trunk_internal_url_src,
                                       target_platform='win32')

m_linux = master_utils.MasterFactory('src/chrome',
                                     config.Master.trunk_url_src,
                                     config.Master.trunk_internal_url_src,
                                     target_platform='linux2')

m_mac = master_utils.MasterFactory('src/chrome',
                                   config.Master.trunk_url_src,
                                   config.Master.trunk_internal_url_src,
                                   target_platform='darwin')

# The identifier of the factory is the build configuration. If two factories
# are using the same build configuration, they should have the same identifier.

f_chromium_rel_tests = m.NewBuildFactory(identifier='chromium-rel',
                                         run_crash_handler=True,
                                         tests=['ui-single'])

f_chromium_dbg_tests = m.NewBuildFactory(identifier='chromium-dbg',
                                         target='Debug',
                                         run_crash_handler=True,
                                         tests=['ui-single'])

f_chromium_rel_vista = m.NewBuildFactory(identifier='chromium-rel-vista',
                         run_crash_handler=True,
                         check_deps=True,
                         tests=['selenium', 'unit', 'ui', 'test_shell',
                                'page_cycler', 'startup', 'tab_switching',
                                'memory', 'printing'])

f_chromium_rel_win7 = m.NewBuildFactory(identifier='chromium-rel-win7',
                        run_crash_handler=True,
                        check_deps=True,
                        tests=['selenium', 'unit', 'ui', 'test_shell',
                               'page_cycler', 'startup', 'tab_switching',
                               'memory', 'printing'])

f_chromium_rel_perf_xp_dual_v8 =  m.NewBuildFactory(identifier='chromium-rel',
    perf_id='chromium-rel-xp-dual-v8',
    show_perf_results=True,
    run_crash_handler=True,
    tests=['page_cycler', 'startup',
           'page_cycler_http',
           'tab_switching', 'memory'],
    gclient_custom_deps=[m_webkit.CUSTOM_DEPS_V8_LATEST])

f_chromium_rel_gears = m.NewGearsFactory(identifier='chromium-rel-gears',
                                         target='Debug')

f_webkit_rel_armu = m_webkit.NewBuildFactory(
    'webkit-rel-armu',
    solution='webkit_armu.sln',
    tests=['test_shell', 'webkit'],
    gclient_custom_deps=[m_webkit.CUSTOM_DEPS_V8_LATEST])

f_webkit_rel_v8 = m_webkit.NewBuildFactory(
    'webkit-rel-v8',
     archive_webkit_results=True,
     tests=['test_shell', 'webkit'],
     gclient_custom_deps=[m_webkit.CUSTOM_DEPS_V8_LATEST])

f_webkit_rel_webkit_org = m_webkit.NewBuildFactory(
    'webkit-rel-webkit_org',
    archive_webkit_results=True,
    tests=['test_shell', 'webkit'],
    gclient_custom_deps=m.CUSTOM_DEPS_WEBKIT_ORG)

f_webkit_dbg_scons = m_webkit.NewBuildFactory('webkit-dbg-scons',
                                              target='Hammer',
                                              tests=['test_shell', 'webkit'],
                                              options=['--build-tool=scons'])

f_chromium_win_experimental = m.NewBuildFactory(
    identifier='chromium-win-experimental',
    tests=[])

f_chromium_mac_experimental = m_mac.NewBuildFactory(
    identifier='chromium-mac-experimental',
    tests=[],
    build_dir='src/build',
    run_crash_handler=False,
    options=['--build-tool=xcode', '--', '-project', 'all.xcodeproj'])

# ----------------------------------------------------------------------------
# BUILDER DEFINITIONS

# The 'builders' list defines the Builders. Each one is configured with a
# dictionary, using the following keys:
#  name (required): the name used to describe this bilder
#  slavename (required): which slave to use, must appear in c['slaves']
#  builddir (required): which subdirectory to run the builder in
#  factory (required): a BuildFactory to define how the build is run
#  periodicBuildTime (optional): if set, force a build every N seconds
#  category (optional): it is not used in the normal 'buildbot' meaning. It is
#                       used by gatekeeper to determine which steps it should
#                       look for to close the tree.
#

b_chromium_rel_xp_tests = {'name': 'XP Tests',
  'slavename': 'hae177',
  'builddir': 'chromium-rel-xp-tests',
  'factory': f_chromium_rel_tests,
}

b_chromium_dbg_xp_tests = {'name': 'XP Tests (dbg)',
  'slavename': 'hae176',
  'builddir': 'chromium-dbg-xp-tests',
  'factory': f_chromium_dbg_tests,
}

b_chromium_rel_vista64 = {'name': 'Chromium Vista 64',
  'slavename': 'hae154',
  'builddir': 'chromium-rel-vista64',
  'factory': f_chromium_rel_vista,
}

b_chromium_rel_win7 = {'name': 'Chromium Windows7',
  'slavename': 'hae155',
  'builddir': 'chromium-rel-win7',
  'factory': f_chromium_rel_win7,
}

b_chromium_rel_xp_perf_dual_v8 = {'name': 'XP Perf (v8-latest)',
  'slavename': 'chrome-xp-2-v8',
  'builddir': 'chromium-rel-xp-perf-dual-v8',
  'factory': f_chromium_rel_perf_xp_dual_v8,
}

b_chromium_rel_xp_gears = {'name': 'Chromium XP (gears)',
  'slavename': 'hae169',
  'builddir': 'chromium-rel-xp-gears',
  'factory': f_chromium_rel_gears,
}

b_webkit_rel_v8 = {'name': 'Webkit (V8-Latest)',
  'slavename': 'hae179',
  'builddir': 'webkit-rel-v8',
  'factory': f_webkit_rel_v8,
}

b_webkit_rel_webkit_org = {'name': 'Webkit (webkit.org)',
  'slavename': 'hae193',
  'builddir': 'webkit-rel-webkit-org',
  'factory': f_webkit_rel_webkit_org,
}

b_webkit_rel_armu = {'name': 'Webkit (armu)',
  'slavename': 'hae170',
  'builddir': 'webkit-rel-armu',
  'factory': f_webkit_rel_armu,
  'category': 'builders_windows',
}

b_webkit_dbg_scons = {'name': 'Webkit (scons)',
  'slavename': 'hae149',
  'builddir': 'webkit-dbg-scons',
  'factory': f_webkit_dbg_scons,
}

b_chromium_win_experimental = {'name': 'Chromium Win Experimental',
  'slavename': 'chromium-win-experimental',
  'builddir': 'chromium-win-experimental',
  'factory': f_chromium_win_experimental,
}

b_chromium_mac_experimental = {'name': 'Chromium Mac Experimental',
  'slavename': 'chromium-mac-experimental',
  'builddir': 'chromium-mac-experimental',
  'factory': f_chromium_mac_experimental,
}

if PRODUCTION_BUILDBOT_MASTER:
  c['builders'] = [
    b_chromium_rel_xp_tests,
    b_chromium_dbg_xp_tests,
    b_chromium_rel_xp_perf_dual_v8,
    b_chromium_rel_xp_gears,
    b_webkit_rel_v8,
    b_webkit_rel_webkit_org,
    b_webkit_dbg_scons,
    b_chromium_rel_vista64,
    b_chromium_rel_win7,
    b_webkit_rel_armu,
  ]
else:
  c['builders'] = [b_chromium_win_experimental,
                   b_chromium_mac_experimental]


####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

if WEB_STATUS:
  #from buildbot.status.html import WebStatus
  from chromium_status import WebStatus
  c['status'].append(WebStatus(MASTER_PORT, allowForce=True))
  c['status'].append(WebStatus(ActiveMaster.master_port_alt, allowForce=False))

if MAIL_NOTIFIER:
  from buildbot.status import mail
  c['status'].append(mail.MailNotifier(
      fromaddr=('buildbot@%s' % config.Master.master_domain),
      mode='problem',
      relayhost=config.Master.smtp))

if IRC_STATUS_BOT:
  from buildbot.status import words
  # Patch our topic-observing bot in on top of the IRC factory.
  from chromium_status import IrcStatusChatterBot
  words.IrcStatusFactory.protocol = IrcStatusChatterBot
  c['status'].append(words.IRC(host=config.IRC.host,
                               nick=config.IRC.nickname,
                               channels=config.IRC.channels))

if PB_LISTENER:
  from buildbot.status import client
  c['status'].append(client.PBListener(9988))


####### DEBUGGING OPTIONS

# if you set 'debugPassword', then you can connect to the buildmaster with
# the diagnostic tool in contrib/debugclient.py . From this tool, you can
# manually force builds and inject changes, which may be useful for testing
# your buildmaster without actually commiting changes to your repository (or
# before you have a functioning 'sources' set up). The debug tool uses the
# same port number as the slaves do: 'slavePortnum'.

#c['debugPassword'] = 'debugpassword'

# if you set 'manhole', you can ssh into the buildmaster and get an
# interactive python shell, which may be useful for debugging buildbot
# internals. It is probably only useful for buildbot developers. You can also
# use an authorized_keys file, or plain telnet.
#from buildbot import manhole
#c['manhole'] = manhole.PasswordManhole('tcp:9999:interface=127.0.0.1',
#                                       'admin', 'password')


####### PROJECT IDENTITY

# the 'projectName' string will be used to describe the project that this
# buildbot is working on. For example, it is used as the title of the
# waterfall HTML page. The 'projectURL' string will be used to provide a link
# from buildbot HTML pages to your project's home page.

c['projectName'] = ActiveMaster.project_name
c['projectURL'] = config.Master.project_url

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.Waterfall page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = 'http://build.chromium.org/buildbot/waterfall/'

