{
  "comments": [
    {
      "key": {
        "uuid": "f3a74411_d50bfaf5",
        "filename": "third_party/WebKit/Source/core/editing/markers/DocumentMarkerController.cpp",
        "patchSetId": 3
      },
      "lineNbr": 609,
      "author": {
        "id": 1002258
      },
      "writtenOn": "2017-09-12T01:36:10Z",
      "side": 1,
      "message": "Can we introduce SuggetionMarkerListImpl GetSuggetionMakerList(const Node* node) in DocumentMarkerController to avoid adding suggestion marker list\nspecific member functions to DMC?",
      "revId": "1d19cdda0df0cb21a455263d76e090833821e9ce",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3904449e_bcae402e",
        "filename": "third_party/WebKit/Source/core/editing/markers/DocumentMarkerController.cpp",
        "patchSetId": 3
      },
      "lineNbr": 609,
      "author": {
        "id": 1229332
      },
      "writtenOn": "2017-09-12T03:42:49Z",
      "side": 1,
      "message": "It\u0027s preferable to expose the entire SuggestionMarkerListImpl object vs. adding type-specific methods to DMC?\n\nOn DocumentMarkerController, we already have:\n\n- RemoveSpellingMarkersUnderWords()\n- SetTextMatchMarkersActive() (one version for an EphemeralRange and one for an offset range within a Node)\n- LayoutRectsForTextMatchMarkers()\n- InvalidateRectsForAllTextMatchMarkers()\n- InvalidateRectsForTextMatchMarkersInNode()\n\nI think what you\u0027re proposing would be inconsistent with what we\u0027re currently doing.",
      "parentUuid": "f3a74411_d50bfaf5",
      "revId": "1d19cdda0df0cb21a455263d76e090833821e9ce",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cf275493_7c828266",
        "filename": "third_party/WebKit/Source/core/editing/markers/DocumentMarkerController.cpp",
        "patchSetId": 3
      },
      "lineNbr": 609,
      "author": {
        "id": 1002258
      },
      "writtenOn": "2017-09-12T05:45:57Z",
      "side": 1,
      "message": "So far we don\u0027t have many list type specific member, but now we have many,\nin my personal feeling though.\n\nTo avoid DMC as kitchen sink, and to prepare adding more list specific\nmembers, I would like to have GetXXLis().",
      "parentUuid": "3904449e_bcae402e",
      "revId": "1d19cdda0df0cb21a455263d76e090833821e9ce",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "444ee9b3_9dcc2baf",
        "filename": "third_party/WebKit/Source/core/editing/markers/DocumentMarkerController.cpp",
        "patchSetId": 3
      },
      "lineNbr": 609,
      "author": {
        "id": 1229332
      },
      "writtenOn": "2017-09-12T17:15:25Z",
      "side": 1,
      "message": "So the call site would do:\n\nlist \u003d GetSuggestionMarkerListImpl(node);\nlist-\u003eRemoveMarkerByTag(node, tag);\nlist-\u003eMarkInvalidationByDocumentMarker();\n\n?\n\nExposing the SuggestionMarkerListImpls lets callers do bad things (e.g. add markers without updating DMC::possibly_has_markers_, or without invalidating paint properly). This still seems like a bad idea to me. Also, if we wanted to have e.g. a suggestion marker-specific method that takes an EphemeralRange, all of the callers would have to iterate over the EphemeralRange themselves.",
      "parentUuid": "cf275493_7c828266",
      "revId": "1d19cdda0df0cb21a455263d76e090833821e9ce",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cd52b527_d7c2505d",
        "filename": "third_party/WebKit/Source/core/editing/markers/DocumentMarkerController.cpp",
        "patchSetId": 3
      },
      "lineNbr": 609,
      "author": {
        "id": 1002258
      },
      "writtenOn": "2017-09-13T06:07:06Z",
      "side": 1,
      "message": "We can do paint invalidation node in RemoveMarkerByTag(). It isn\u0027t\nspecific to DMC.\n\n* Idea 1\nWe have two classes: DMC and NodeMarkerMap.\n- DMC provides API and GetXXXList() which returns specific list impl\n- NodeMarkerMap is {MarkerMap makers_, and possibly_existing_marker_types_}\nand AddMarker() and RemoveMarker()\n\nXXXListImpl should have pointer to NodeMarkerMap.\n\n* Idea 2\nIntroduce stack allocated SuggetionMarkerController which provides\nSuggetionMarker specific functions.\n\nclass SuggetionMarkerController {\n STACK_ALLOCATED();\n\npublic:\n  SuggetionMarkeController(DocumentMarkerController*);\n\n  void AddSuggestionMakrer(...);\n  void RemoveMarkerByTag(...);\n\nprivatge:\n  // Using |controller_| to call updating MarkerMap + \n  // possibly_existing_marker_types_\n  DocumentMarkerController\u0026 controller_;\n};\n\n\nclass DocumentMarkerController {\n private:\n  // We may not make SMC as friend of DMC.\n  friend class SuggetionMarkerController;\n  ...\n};\n\nSo, SuggetionMarkerController is an extension of DMC.",
      "parentUuid": "444ee9b3_9dcc2baf",
      "revId": "1d19cdda0df0cb21a455263d76e090833821e9ce",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5fe33abf_52b416a0",
        "filename": "third_party/WebKit/Source/core/editing/markers/DocumentMarkerController.cpp",
        "patchSetId": 3
      },
      "lineNbr": 609,
      "author": {
        "id": 1144165
      },
      "writtenOn": "2017-09-13T21:21:10Z",
      "side": 1,
      "message": "I don\u0027t think we should expose list impls outside DMC -- that\u0027s breaking the encapsulation.\n\nHaving a bunch of XXXMarkerController classes seems a good idea to keep DMC clean without breaking the encapsulation. Not sure if we are making it stack_allocated, though.\n\nI\u0027m thinking about making it an owned member of DMC, like the relationship between TextIterator and TextIteratorTextNodeHandler:\n\nclass DMC {\n public:\n  SuggestionMarkerController\u0026 GetSuggestionMarkerController() {\n    return *suggestion_marker_controller_;\n  }\n private:\n  Member\u003cSuggestionMarkerController\u003e suggestion_marker_controller_;\n};\n\nIn this way we can also store some suggestion-specific states in SuggestionMarkerController. One of them can be whether we are doing a suggestion replacement (although we have done it in another way which is arguably better?)",
      "parentUuid": "cd52b527_d7c2505d",
      "revId": "1d19cdda0df0cb21a455263d76e090833821e9ce",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a77c0d61_2e5c0487",
        "filename": "third_party/WebKit/Source/core/editing/markers/DocumentMarkerController.cpp",
        "patchSetId": 3
      },
      "lineNbr": 609,
      "author": {
        "id": 1229332
      },
      "writtenOn": "2017-09-14T04:37:26Z",
      "side": 1,
      "message": "So how would I implement SuggestionMarkerController::RemoveMarkerByTag() without exposing the node map and SuggestionMarkerListImpls?",
      "parentUuid": "5fe33abf_52b416a0",
      "revId": "1d19cdda0df0cb21a455263d76e090833821e9ce",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5794f211_fd7eeb8a",
        "filename": "third_party/WebKit/Source/core/editing/markers/DocumentMarkerController.cpp",
        "patchSetId": 3
      },
      "lineNbr": 609,
      "author": {
        "id": 1002258
      },
      "writtenOn": "2017-09-14T05:59:30Z",
      "side": 1,
      "message": "Using newly introduce MarkerMap class providing AddInternal() and common RemoveXXX().\n\nDMC holds MarkerMap and provide API for common operation.\n\nStack allocated SuggetionMarkerController provides suggestion marker specific operations. Because of SMC holds MarkerMap pointer. We don\u0027t need\nlasting SMC in DMC as xiaochengh@ mentioned.\n\nSuggestionMarkerController::SuggetionMarkerController(\n  DMC* dmc) : marker_map(dmc-\u003eGetMarkerMap()) {}",
      "parentUuid": "a77c0d61_2e5c0487",
      "revId": "1d19cdda0df0cb21a455263d76e090833821e9ce",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "efc63e82_d3fc4047",
        "filename": "third_party/WebKit/Source/core/editing/markers/DocumentMarkerController.cpp",
        "patchSetId": 3
      },
      "lineNbr": 609,
      "author": {
        "id": 1229332
      },
      "writtenOn": "2017-09-14T20:26:09Z",
      "side": 1,
      "message": "This exposes the list impls to SuggestionMarkerController. If SuggestionMarkerController can get the SugggestionMarkerListImpl instance to call RemoveMarkerByTag(), it can also get the impls for all other marker types as well. Is this OK?",
      "parentUuid": "5794f211_fd7eeb8a",
      "revId": "1d19cdda0df0cb21a455263d76e090833821e9ce",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f3cb2c9a_13a179ee",
        "filename": "third_party/WebKit/Source/core/editing/markers/DocumentMarkerController.cpp",
        "patchSetId": 3
      },
      "lineNbr": 609,
      "author": {
        "id": 1144165
      },
      "writtenOn": "2017-09-14T21:15:04Z",
      "side": 1,
      "message": "Wait... What\u0027s the difference between adding SMC and categorizing the methods of DMC properly?\n\nSince all the marker data is still owned by DMC, SMC is nothing but a container of suggestion-specific methods manipulating the data in DMC. Then how is it different from adding a \"suggestion-specific\" section in DMC\u0027s methods?\n\nAs long as the data is owned by DMC, we will have encapsulation problems.\n\nI\u0027m OK with just adding another method to DMC, and discuss refactoring/cleanup later.",
      "parentUuid": "efc63e82_d3fc4047",
      "revId": "1d19cdda0df0cb21a455263d76e090833821e9ce",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a1ea26d7_e5687d4c",
        "filename": "third_party/WebKit/Source/core/editing/markers/DocumentMarkerController.cpp",
        "patchSetId": 3
      },
      "lineNbr": 609,
      "author": {
        "id": 1002258
      },
      "writtenOn": "2017-09-15T01:28:24Z",
      "side": 1,
      "message": "I\u0027m also OK to add SM specific member to DMC at this time since we failed\nto get consensus shortly.\n\nWe\u0027ll discussion on next week.",
      "parentUuid": "f3cb2c9a_13a179ee",
      "revId": "1d19cdda0df0cb21a455263d76e090833821e9ce",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8874c3f8_6a42a781",
        "filename": "third_party/WebKit/Source/core/editing/markers/DocumentMarkerController.cpp",
        "patchSetId": 3
      },
      "lineNbr": 614,
      "author": {
        "id": 1002258
      },
      "writtenOn": "2017-09-12T01:36:10Z",
      "side": 1,
      "message": "nit: Could you use early return style?\n\nif (!list-\u003eRemoveMarkerByTag(marker_tag))\n  return;\nnode-\u003eGetLayoutObject()-\u003eSetShouldDoFullPaintInvalidation(\n        PaintInvalidationReason::kDocumentMarker)",
      "revId": "1d19cdda0df0cb21a455263d76e090833821e9ce",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "919ad7ac_61918465",
        "filename": "third_party/WebKit/Source/core/editing/markers/DocumentMarkerController.cpp",
        "patchSetId": 3
      },
      "lineNbr": 614,
      "author": {
        "id": 1229332
      },
      "writtenOn": "2017-09-12T03:42:49Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "8874c3f8_6a42a781",
      "revId": "1d19cdda0df0cb21a455263d76e090833821e9ce",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4c88a81e_23ebfbdb",
        "filename": "third_party/WebKit/Source/core/editing/markers/DocumentMarkerController.cpp",
        "patchSetId": 3
      },
      "lineNbr": 615,
      "author": {
        "id": 1002258
      },
      "writtenOn": "2017-09-12T01:36:10Z",
      "side": 1,
      "message": "Since other call sites of |SetShouldDoFullPaintInvalidation()| checks\nexistence of associate layout object, we should check it here too.",
      "revId": "1d19cdda0df0cb21a455263d76e090833821e9ce",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1682ecd9_4e22568b",
        "filename": "third_party/WebKit/Source/core/editing/markers/DocumentMarkerController.cpp",
        "patchSetId": 3
      },
      "lineNbr": 615,
      "author": {
        "id": 1229332
      },
      "writtenOn": "2017-09-12T03:42:49Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "4c88a81e_23ebfbdb",
      "revId": "1d19cdda0df0cb21a455263d76e090833821e9ce",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5c4c5982_8975e04b",
        "filename": "third_party/WebKit/Source/core/editing/markers/DocumentMarkerController.cpp",
        "patchSetId": 3
      },
      "lineNbr": 616,
      "author": {
        "id": 1002258
      },
      "writtenOn": "2017-09-12T01:36:10Z",
      "side": 1,
      "message": "Could you introduce |MarkInvalidationByDocumentMarker(Node*)|,\nor better name, and all call sites in DMC to use this newly introduced\nfunction?\n\nSince LayoutObject is subject to change, I would like to reduce usage\nof LayoutObject in core/editing.",
      "revId": "1d19cdda0df0cb21a455263d76e090833821e9ce",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a6131499_b2f9fa28",
        "filename": "third_party/WebKit/Source/core/editing/markers/DocumentMarkerController.cpp",
        "patchSetId": 3
      },
      "lineNbr": 616,
      "author": {
        "id": 1229332
      },
      "writtenOn": "2017-09-12T03:42:49Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "5c4c5982_8975e04b",
      "revId": "1d19cdda0df0cb21a455263d76e090833821e9ce",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "82ac468d_1c58d80a",
        "filename": "third_party/WebKit/Source/core/editing/markers/DocumentMarkerController.h",
        "patchSetId": 3
      },
      "lineNbr": 88,
      "author": {
        "id": 1144165
      },
      "writtenOn": "2017-09-11T19:45:00Z",
      "side": 1,
      "message": "Is it already being used in the other patch? Where\u0027s the call site?",
      "revId": "1d19cdda0df0cb21a455263d76e090833821e9ce",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fa05635a_da0c499b",
        "filename": "third_party/WebKit/Source/core/editing/markers/DocumentMarkerController.h",
        "patchSetId": 3
      },
      "lineNbr": 88,
      "author": {
        "id": 1229332
      },
      "writtenOn": "2017-09-11T19:46:52Z",
      "side": 1,
      "message": "I haven\u0027t put up the patch that uses this yet; I should have it up in a few minutes.\n\nIf you\u0027re referring to the main SuggestionSpan CL:\nhttps://chromium-review.googlesource.com/c/chromium/src/+/627172,\n\nthat CL doesn\u0027t add support for misspelling suggestions yet, only regular \"easy correct\" suggestions.",
      "parentUuid": "82ac468d_1c58d80a",
      "revId": "1d19cdda0df0cb21a455263d76e090833821e9ce",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "216a59de_249ce5e9",
        "filename": "third_party/WebKit/Source/core/editing/markers/DocumentMarkerController.h",
        "patchSetId": 3
      },
      "lineNbr": 88,
      "author": {
        "id": 1229332
      },
      "writtenOn": "2017-09-11T20:04:56Z",
      "side": 1,
      "message": "The call site is here:\nhttps://chromium-review.googlesource.com/c/chromium/src/+/660691",
      "parentUuid": "fa05635a_da0c499b",
      "revId": "1d19cdda0df0cb21a455263d76e090833821e9ce",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}