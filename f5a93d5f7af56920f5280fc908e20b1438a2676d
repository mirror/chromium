{
  "comments": [
    {
      "key": {
        "uuid": "87be850a_15b486de",
        "filename": "chrome/test/data/extensions/api_test/webrequest/test_unload5.js",
        "patchSetId": 25
      },
      "lineNbr": 13,
      "author": {
        "id": 1002172
      },
      "writtenOn": "2017-12-04T14:07:57Z",
      "side": 1,
      "message": "can we modify getServerDomain(initiators.BROWSER_INITIATED, chrome.runtime.id, \u0027extension\u0027) generate this?",
      "range": {
        "startLine": 13,
        "startChar": 22,
        "endLine": 13,
        "endChar": 64
      },
      "revId": "f5a93d5f7af56920f5280fc908e20b1438a2676d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b85f23cd_ac2f0c66",
        "filename": "chrome/test/data/extensions/api_test/webrequest/test_unload5.js",
        "patchSetId": 25
      },
      "lineNbr": 13,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-12-04T15:34:38Z",
      "side": 1,
      "message": "\u003e can we modify getServerDomain(initiators.BROWSER_INITIATED, chrome.runtime.id, \u0027extension\u0027) generate this?\n\nThat doesn\u0027t sound right to me-- I don\u0027t think the request is BROWSER_INITIATED in this case?  (Devlin, what are your thoughts?)",
      "parentUuid": "87be850a_15b486de",
      "range": {
        "startLine": 13,
        "startChar": 22,
        "endLine": 13,
        "endChar": 64
      },
      "revId": "f5a93d5f7af56920f5280fc908e20b1438a2676d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b5a7d7d9_c09daa34",
        "filename": "chrome/test/data/extensions/api_test/webrequest/test_unload5.js",
        "patchSetId": 25
      },
      "lineNbr": 13,
      "author": {
        "id": 1115745
      },
      "writtenOn": "2017-12-04T21:35:17Z",
      "side": 1,
      "message": "correct, these should be web-initiated requests, not browser-initiated requests.",
      "parentUuid": "b85f23cd_ac2f0c66",
      "range": {
        "startLine": 13,
        "startChar": 22,
        "endLine": 13,
        "endChar": 64
      },
      "revId": "f5a93d5f7af56920f5280fc908e20b1438a2676d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e434f755_fd7c8943",
        "filename": "chrome/test/data/extensions/api_test/webrequest/test_unload5.js",
        "patchSetId": 25
      },
      "lineNbr": 13,
      "author": {
        "id": 1002169
      },
      "writtenOn": "2017-12-04T21:35:53Z",
      "side": 1,
      "message": "XHRs should never browser-initiated. Also, if we made it WEB_INITIATED, it appears that getServerDomain would append a port, which you don\u0027t want on a chrome-extension URL.",
      "parentUuid": "b85f23cd_ac2f0c66",
      "range": {
        "startLine": 13,
        "startChar": 22,
        "endLine": 13,
        "endChar": 64
      },
      "revId": "f5a93d5f7af56920f5280fc908e20b1438a2676d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "97df1916_7d1603aa",
        "filename": "chrome/test/data/extensions/api_test/webrequest/test_unload5.js",
        "patchSetId": 25
      },
      "lineNbr": 13,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-12-04T22:26:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e434f755_fd7c8943",
      "range": {
        "startLine": 13,
        "startChar": 22,
        "endLine": 13,
        "endChar": 64
      },
      "revId": "f5a93d5f7af56920f5280fc908e20b1438a2676d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "64a3094d_0b973c48",
        "filename": "chrome/test/data/extensions/api_test/webrequest/test_unload5.js",
        "patchSetId": 25
      },
      "lineNbr": 13,
      "author": {
        "id": 1002172
      },
      "writtenOn": "2017-12-05T09:53:01Z",
      "side": 1,
      "message": "Sorry, I misunderstood the comment at https://cs.chromium.org/chromium/src/chrome/test/data/extensions/api_test/webrequest/framework.js?q\u003dBROWSER_INITIATED\u0026dr\u003dCSs\n\nAnyway, my comment was for using getServerDomain to generate the string. Still using getServerDomain(initiators.WEB_INITIATED, chrome.runtime.id, \u0027extension\u0027) could be a choice?",
      "parentUuid": "97df1916_7d1603aa",
      "range": {
        "startLine": 13,
        "startChar": 22,
        "endLine": 13,
        "endChar": 64
      },
      "revId": "f5a93d5f7af56920f5280fc908e20b1438a2676d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1665edea_ea2bc283",
        "filename": "chrome/test/data/extensions/api_test/webrequest/test_unload5.js",
        "patchSetId": 25
      },
      "lineNbr": 13,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-12-05T22:27:59Z",
      "side": 1,
      "message": "\u003e Sorry, I misunderstood the comment at https://cs.chromium.org/chromium/src/chrome/test/data/extensions/api_test/webrequest/framework.js?q\u003dBROWSER_INITIATED\u0026dr\u003dCSs\n\u003e \n\u003e Anyway, my comment was for using getServerDomain to generate the string. Still using getServerDomain(initiators.WEB_INITIATED, chrome.runtime.id, \u0027extension\u0027) could be a choice?\n\nThanks, but I think Nick still has a point.  getServerDomain would append a port, which would do the wrong thing in this case.  This case also is not really a \"server\" domain or URL, so I\u0027m not sure that adding a special case for extensions is useful in general.  I think it\u0027s probably better to leave as is for now.",
      "parentUuid": "64a3094d_0b973c48",
      "range": {
        "startLine": 13,
        "startChar": 22,
        "endLine": 13,
        "endChar": 64
      },
      "revId": "f5a93d5f7af56920f5280fc908e20b1438a2676d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a76716a_96bdca64",
        "filename": "content/browser/loader/cross_site_document_blocking_browsertest.cc",
        "patchSetId": 25
      },
      "lineNbr": 157,
      "author": {
        "id": 1002169
      },
      "writtenOn": "2017-12-04T21:35:53Z",
      "side": 1,
      "message": "Nice.\n\nIt looks like our testserver impl only supports a single range, but I think the spec allows multiple ranges, like \"bytes\u003d1-24,26-100\" ?\n\nI\u0027d like to find an actual server with an html/json/xml resource that honors such requests, and see if there\u0027s any more protection we could offer.",
      "range": {
        "startLine": 157,
        "startChar": 54,
        "endLine": 157,
        "endChar": 66
      },
      "revId": "f5a93d5f7af56920f5280fc908e20b1438a2676d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dc8275b8_364e15be",
        "filename": "content/browser/loader/cross_site_document_blocking_browsertest.cc",
        "patchSetId": 25
      },
      "lineNbr": 157,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-12-04T22:26:37Z",
      "side": 1,
      "message": "\u003e Nice.\n\u003e \n\u003e It looks like our testserver impl only supports a single range, but I think the spec allows multiple ranges, like \"bytes\u003d1-24,26-100\" ?\n\u003e \n\u003e I\u0027d like to find an actual server with an html/json/xml resource that honors such requests, and see if there\u0027s any more protection we could offer.\n\nOh, that\u0027s fun.  Let\u0027s investigate multipart/byteranges MIME types after landing this.",
      "parentUuid": "9a76716a_96bdca64",
      "range": {
        "startLine": 157,
        "startChar": 54,
        "endLine": 157,
        "endChar": 66
      },
      "revId": "f5a93d5f7af56920f5280fc908e20b1438a2676d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5d3b233f_9ea70285",
        "filename": "content/browser/loader/cross_site_document_blocking_browsertest.cc",
        "patchSetId": 25
      },
      "lineNbr": 182,
      "author": {
        "id": 1002169
      },
      "writtenOn": "2017-12-04T21:35:53Z",
      "side": 1,
      "message": "This test has no way of failing, correct?",
      "revId": "f5a93d5f7af56920f5280fc908e20b1438a2676d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0fb88613_4331a71f",
        "filename": "content/browser/loader/cross_site_document_blocking_browsertest.cc",
        "patchSetId": 25
      },
      "lineNbr": 182,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-12-04T22:26:37Z",
      "side": 1,
      "message": "\u003e This test has no way of failing, correct?\n\nYeah.  This is copied from site_isolation_stats_gatherer_browsertest.cc.  I added a TODO, since I\u0027m not sure how to solve at the moment.",
      "parentUuid": "5d3b233f_9ea70285",
      "revId": "f5a93d5f7af56920f5280fc908e20b1438a2676d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8f747f92_4ad40272",
        "filename": "content/browser/loader/cross_site_document_resource_handler_unittest.cc",
        "patchSetId": 25
      },
      "lineNbr": 138,
      "author": {
        "id": 1002169
      },
      "writtenOn": "2017-12-04T21:35:53Z",
      "side": 1,
      "message": "s/expected_verdict/verdict/ -- or is that intentional?",
      "revId": "f5a93d5f7af56920f5280fc908e20b1438a2676d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "27308065_8138fcb6",
        "filename": "content/browser/loader/cross_site_document_resource_handler_unittest.cc",
        "patchSetId": 25
      },
      "lineNbr": 138,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-12-04T22:26:37Z",
      "side": 1,
      "message": "\u003e s/expected_verdict/verdict/ -- or is that intentional?\n\nIt was at the time, but it feels unnecessary, depending on how you read it.  I\u0027ve removed it.",
      "parentUuid": "8f747f92_4ad40272",
      "revId": "f5a93d5f7af56920f5280fc908e20b1438a2676d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6605b94e_74a20d88",
        "filename": "content/browser/loader/cross_site_document_resource_handler_unittest.cc",
        "patchSetId": 25
      },
      "lineNbr": 143,
      "author": {
        "id": 1002169
      },
      "writtenOn": "2017-12-04T21:35:53Z",
      "side": 1,
      "message": "verfiy -\u003e verify",
      "range": {
        "startLine": 143,
        "startChar": 14,
        "endLine": 143,
        "endChar": 20
      },
      "revId": "f5a93d5f7af56920f5280fc908e20b1438a2676d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9ffc7b6c_8e7f9488",
        "filename": "content/browser/loader/cross_site_document_resource_handler_unittest.cc",
        "patchSetId": 25
      },
      "lineNbr": 143,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-12-04T22:26:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6605b94e_74a20d88",
      "range": {
        "startLine": 143,
        "startChar": 14,
        "endLine": 143,
        "endChar": 20
      },
      "revId": "f5a93d5f7af56920f5280fc908e20b1438a2676d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ea7577dc_11605806",
        "filename": "content/browser/loader/cross_site_document_resource_handler_unittest.cc",
        "patchSetId": 25
      },
      "lineNbr": 394,
      "author": {
        "id": 1002169
      },
      "writtenOn": "2017-12-04T21:35:53Z",
      "side": 1,
      "message": "FTP doesn\u0027t support headers; I guess the idea here is to make a scenario that would fail if the ftp were changed to https?",
      "revId": "f5a93d5f7af56920f5280fc908e20b1438a2676d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "19572699_a5b910e4",
        "filename": "content/browser/loader/cross_site_document_resource_handler_unittest.cc",
        "patchSetId": 25
      },
      "lineNbr": 394,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-12-04T22:26:37Z",
      "side": 1,
      "message": "\u003e FTP doesn\u0027t support headers; I guess the idea here is to make a scenario that would fail if the ftp were changed to https?\n\nOops.  Agreed, this should omit.",
      "parentUuid": "ea7577dc_11605806",
      "revId": "f5a93d5f7af56920f5280fc908e20b1438a2676d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dbac357e_75e07b55",
        "filename": "content/browser/loader/cross_site_document_resource_handler_unittest.cc",
        "patchSetId": 25
      },
      "lineNbr": 558,
      "author": {
        "id": 1002169
      },
      "writtenOn": "2017-12-04T21:35:53Z",
      "side": 1,
      "message": "Is it intentional to OMIT the Origin header here from the request?",
      "revId": "f5a93d5f7af56920f5280fc908e20b1438a2676d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "036b7b22_8465227a",
        "filename": "content/browser/loader/cross_site_document_resource_handler_unittest.cc",
        "patchSetId": 25
      },
      "lineNbr": 558,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-12-04T22:26:37Z",
      "side": 1,
      "message": "\u003e Is it intentional to OMIT the Origin header here from the request?\n\nNope, thanks for catching.",
      "parentUuid": "dbac357e_75e07b55",
      "revId": "f5a93d5f7af56920f5280fc908e20b1438a2676d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c09717c2_69a20df5",
        "filename": "content/browser/loader/cross_site_document_resource_handler_unittest.cc",
        "patchSetId": 25
      },
      "lineNbr": 565,
      "author": {
        "id": 1002169
      },
      "writtenOn": "2017-12-04T21:35:53Z",
      "side": 1,
      "message": "What about file://, or content:// ?",
      "revId": "f5a93d5f7af56920f5280fc908e20b1438a2676d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "91c98400_f272c807",
        "filename": "content/browser/loader/cross_site_document_resource_handler_unittest.cc",
        "patchSetId": 25
      },
      "lineNbr": 565,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-12-04T22:26:37Z",
      "side": 1,
      "message": "\u003e What about file://, or content:// ?\n\nAdded a file:// test next to FTP.  (We might lock that down later if we add plumbing for allow_universal_access_from_files, but we can update the test.)\n\nNot focusing on Android just yet-- we can add a content:// test later.",
      "parentUuid": "c09717c2_69a20df5",
      "revId": "f5a93d5f7af56920f5280fc908e20b1438a2676d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "10515069_3fd13a7c",
        "filename": "content/renderer/fetchers/resource_fetcher_impl.cc",
        "patchSetId": 25
      },
      "lineNbr": 312,
      "author": {
        "id": 1002172
      },
      "writtenOn": "2017-12-04T14:07:57Z",
      "side": 1,
      "message": "Not yet.\nI\u0027ve taken over a task to move blink CORS code to content/renderer, and just decided to move them to browser process at one go-off.\nContent/renderer CORS is partially working behind a flag, but I will move it to browser process without stabilizing it because the final goal is having it in the Network Service.\n\nI think we can merge some logics in the future, but at this point, this CL will be a right direction. Let me invite you to discuss browser side CORS discussion. I will share a design doc soon, maybe in a few days.",
      "range": {
        "startLine": 312,
        "startChar": 30,
        "endLine": 312,
        "endChar": 34
      },
      "revId": "f5a93d5f7af56920f5280fc908e20b1438a2676d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "24baaf70_03a3afd1",
        "filename": "content/renderer/fetchers/resource_fetcher_impl.cc",
        "patchSetId": 25
      },
      "lineNbr": 312,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-12-04T15:34:38Z",
      "side": 1,
      "message": "\u003e Not yet.\n\u003e I\u0027ve taken over a task to move blink CORS code to content/renderer, and just decided to move them to browser process at one go-off.\n\u003e Content/renderer CORS is partially working behind a flag, but I will move it to browser process without stabilizing it because the final goal is having it in the Network Service.\n\u003e \n\u003e I think we can merge some logics in the future, but at this point, this CL will be a right direction. Let me invite you to discuss browser side CORS discussion. I will share a design doc soon, maybe in a few days.\n\nMoving it to the browser process will be great.  \n\nIn the meantime, I\u0027m mainly looking for a way to handle the Link Doctor case here, since (at least in tests) the request is made without an initiator and gets blocked.  Having it trigger an Access-Control-Allow-Origin response header would be one way to fix.",
      "parentUuid": "10515069_3fd13a7c",
      "range": {
        "startLine": 312,
        "startChar": 30,
        "endLine": 312,
        "endChar": 34
      },
      "revId": "f5a93d5f7af56920f5280fc908e20b1438a2676d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0a2d9099_c750c2ef",
        "filename": "content/renderer/fetchers/resource_fetcher_impl.cc",
        "patchSetId": 25
      },
      "lineNbr": 312,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-12-04T20:15:33Z",
      "side": 1,
      "message": "\u003e \u003e Not yet.\n\u003e \u003e I\u0027ve taken over a task to move blink CORS code to content/renderer, and just decided to move them to browser process at one go-off.\n\u003e \u003e Content/renderer CORS is partially working behind a flag, but I will move it to browser process without stabilizing it because the final goal is having it in the Network Service.\n\u003e \u003e \n\u003e \u003e I think we can merge some logics in the future, but at this point, this CL will be a right direction. Let me invite you to discuss browser side CORS discussion. I will share a design doc soon, maybe in a few days.\n\u003e \n\u003e Moving it to the browser process will be great.  \n\u003e \n\u003e In the meantime, I\u0027m mainly looking for a way to handle the Link Doctor case here, since (at least in tests) the request is made without an initiator and gets blocked.  Having it trigger an Access-Control-Allow-Origin response header would be one way to fix.\n\nI\u0027ve removed this change from resource_fetcher_impl.cc, since Nick and I agreed there\u0027s a reasonable alternative for LinkDoctor.",
      "parentUuid": "24baaf70_03a3afd1",
      "range": {
        "startLine": 312,
        "startChar": 30,
        "endLine": 312,
        "endChar": 34
      },
      "revId": "f5a93d5f7af56920f5280fc908e20b1438a2676d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "26ae3bdc_8ae203eb",
        "filename": "third_party/WebKit/Source/platform/loader/fetch/ResourceFetcher.cpp",
        "patchSetId": 25
      },
      "lineNbr": 618,
      "author": {
        "id": 1002172
      },
      "writtenOn": "2017-12-04T14:07:57Z",
      "side": 1,
      "message": "I\u0027m still not sure when and why this is needed here.\nMaybe better to handle this in FetchContext::PrepareRequest?\n\nCan you explain an example case? Content scripts of Chrome Extension?",
      "range": {
        "startLine": 618,
        "startChar": 0,
        "endLine": 618,
        "endChar": 48
      },
      "revId": "f5a93d5f7af56920f5280fc908e20b1438a2676d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "317fb8c8_aa12ab21",
        "filename": "third_party/WebKit/Source/platform/loader/fetch/ResourceFetcher.cpp",
        "patchSetId": 25
      },
      "lineNbr": 618,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-12-04T15:34:38Z",
      "side": 1,
      "message": "\u003e I\u0027m still not sure when and why this is needed here.\n\u003e Maybe better to handle this in FetchContext::PrepareRequest?\n\u003e \n\u003e Can you explain an example case? Content scripts of Chrome Extension?\n\nYes, this is for content scripts in extensions.  It\u0027s awkward that we can\u0027t really mention them directly here, but it\u0027s covered by the CrossOriginXHR.ContentScript browser_test.  (Also http/tests/xmlhttprequest/origin-whitelisting-*.html, but those tests will require some more test plumbing to fix and are disabled in --site-per-process for now.)",
      "parentUuid": "26ae3bdc_8ae203eb",
      "range": {
        "startLine": 618,
        "startChar": 0,
        "endLine": 618,
        "endChar": 48
      },
      "revId": "f5a93d5f7af56920f5280fc908e20b1438a2676d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a22ce0cd_8da4bd73",
        "filename": "third_party/WebKit/Source/platform/loader/fetch/ResourceFetcher.cpp",
        "patchSetId": 25
      },
      "lineNbr": 618,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-12-04T22:26:37Z",
      "side": 1,
      "message": "\u003e \u003e I\u0027m still not sure when and why this is needed here.\n\u003e \u003e Maybe better to handle this in FetchContext::PrepareRequest?\n\u003e \u003e \n\u003e \u003e Can you explain an example case? Content scripts of Chrome Extension?\n\u003e \n\u003e Yes, this is for content scripts in extensions.  It\u0027s awkward that we can\u0027t really mention them directly here, but it\u0027s covered by the CrossOriginXHR.ContentScript browser_test.  (Also http/tests/xmlhttprequest/origin-whitelisting-*.html, but those tests will require some more test plumbing to fix and are disabled in --site-per-process for now.)\n\nSee the discussion between dcheng@ and nick@ in patch 26 for more details.",
      "parentUuid": "317fb8c8_aa12ab21",
      "range": {
        "startLine": 618,
        "startChar": 0,
        "endLine": 618,
        "endChar": 48
      },
      "revId": "f5a93d5f7af56920f5280fc908e20b1438a2676d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}