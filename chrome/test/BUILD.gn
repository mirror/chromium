# Copyright 2014 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/config/features.gni")
import("//build/config/ui.gni")

# This target exists to reference other test executables to bring these files
# into the build.
group("test") {
  testonly = true
  deps = [
    "//chrome/test/perf",
  ]
}

# GYP version: chrome/chrome_tests_unit.gypi:test_support_common
source_set("test_support") {
  defines = []
  testonly = true

  sources = [
    "base/chrome_process_util.cc",
    "base/chrome_process_util.h",
    "base/chrome_process_util_mac.cc",
    "base/chrome_render_view_host_test_harness.cc",
    "base/chrome_render_view_host_test_harness.h",
    "base/chrome_test_launcher.cc",
    "base/chrome_test_launcher.h",
    "base/chrome_test_suite.cc",
    "base/chrome_test_suite.h",
    "base/chrome_unit_test_suite.cc",
    "base/chrome_unit_test_suite.h",
    "base/find_in_page_observer.cc",
    "base/find_in_page_observer.h",
    "base/history_index_restore_observer.cc",
    "base/history_index_restore_observer.h",
    "base/in_process_browser_test.cc",
    "base/in_process_browser_test.h",
    "base/profile_mock.cc",
    "base/profile_mock.h",
    "base/scoped_browser_locale.cc",
    "base/scoped_browser_locale.h",
    "base/scoped_testing_local_state.cc",
    "base/scoped_testing_local_state.h",
    "base/test_browser_window.cc",
    "base/test_browser_window.h",
    "base/test_launcher_utils.cc",
    "base/test_launcher_utils.h",
    "base/test_switches.cc",
    "base/test_switches.h",
    "base/testing_browser_process.cc",
    "base/testing_browser_process.h",
    "base/testing_browser_process_platform_part.h",
    "base/testing_browser_process_platform_part.cc",
    "base/testing_io_thread_state.cc",
    "base/testing_io_thread_state.h",
    "base/testing_pref_service_syncable.cc",
    "base/testing_pref_service_syncable.h",
    "base/testing_profile.cc",
    "base/testing_profile.h",
    "base/testing_profile_manager.cc",
    "base/testing_profile_manager.h",
    "base/tracing.cc",
    "base/tracing.h",
    "base/ui_test_utils.cc",
    "base/ui_test_utils.h",
    "logging/win/file_logger.cc",
    "logging/win/file_logger.h",
    "logging/win/log_file_printer.cc",
    "logging/win/log_file_printer.h",
    "logging/win/log_file_reader.cc",
    "logging/win/log_file_reader.h",
    "logging/win/mof_data_parser.cc",
    "logging/win/mof_data_parser.h",
    "logging/win/test_log_collector.cc",
    "logging/win/test_log_collector.h",
  ]

  # New deps should go in the non-iOS section below.
  public_deps = [
    "//content/test:test_support",
  ]
  deps = [
    "//base:prefs_test_support",
    "//base/test:test_support",
    "//chrome:resources",
    "//chrome:strings",
    "//chrome/app:test_support",

    #"//chrome/app/theme:theme_resources",
    "//chrome/browser:test_support",
    "//chrome/common:test_support",
    "//chrome/renderer:test_support",
    "//components/bookmarks/test",
    "//components/component_updater:test_support",
    "//components/gcm_driver:test_support",
    "//components/history/core/test:test",
    "//components/metrics:test_support",
    "//components/omnibox:test_support",
    "//components/ownership",
    "//components/password_manager/core/browser:test_support",
    "//components/pref_registry:test_support",
    "//components/search_engines:test_support",
    "//components/signin/core/browser:test_support",
    "//components/sync_driver:test_support",
    "//content/public/app:both",
    "//ui/gfx:test_support",
    "//net",
    "//net:test_support",
    "//skia",
    "//sql",
    "//sql:test_support",
    "//sync",
    "//testing/gmock",
    "//testing/gtest",
    "//third_party/zlib",
    "//ui/message_center:test_support",
  ]

  if (!is_ios) {
    deps += [
      "//chrome/plugin",
      "//chrome/renderer",
      "//chrome/utility",
      "//content/public/child",
      "//content/public/common",
      "//content/public/plugin",
      "//content/public/renderer",
      "//content/public/utility",
      "//components/autofill/core/browser:test_support",
      "//components/captive_portal:test_support",
      "//components/infobars/core",
      "//components/sessions:test_support",
      "//google_apis:test_support",
      "//ipc:test_support",
      "//media:test_support",
      "//ppapi:ppapi_shared",
      "//sql:test_support",
      "//third_party/leveldatabase",
      "//ui/base",
      "//ui/events:events_base",
      "//ui/gl",
    ]
  }

  if (enable_extensions) {
    deps += [
      "//chrome/common/extensions/api",
      "//extensions:test_support",
    ]
  }

  if (is_linux) {
    deps += [ "//crypto:platform" ]
  }
  if (is_win) {
    deps += [
      "//third_party/wtl",
      "//ui/snapshot:test_support",
    ]
    if (use_aura) {
      deps += [
        #'../win8/win8.gyp:test_registrar_constants',  TODO(GYP)
        #'../win8/win8.gyp:test_support_win8',  TODO(GYP)
      ]
    }
  }

  if (enable_plugins) {
    sources += [
      "ppapi/ppapi_test.cc",
      "ppapi/ppapi_test.h",
    ]
  }

  if (use_ash) {
    deps += [ "//ash:test_support" ]
  }
  if (toolkit_views) {
    deps += [ "//ui/views:test_support" ]
  }

  if (enable_background) {
    defines += [ "ENABLE_BACKGROUND=1" ]
  }

  if (enable_extensions) {
    deps += [
      "//chrome/common/extensions/api",
      "//extensions:test_support",
    ]
  }
}

source_set("test_support_unit") {
  testonly = true
  sources = [
    "../browser/sync/glue/session_sync_test_helper.cc",
    "../browser/sync/glue/session_sync_test_helper.h",
    "base/run_all_unittests.cc",
  ]

  deps = [
    ":test_support",
    "//base",
    "//chrome:resources",
    "//chrome:strings",
    "//chrome/browser",
    "//chrome/common",
    "//mojo/edk/system",
    "//mojo/environment:chromium",
  ]
}

if (!is_android) {
  gypi_values = exec_script("//build/gypi_to_gn.py",
                            [ rebase_path("../chrome_tests.gypi") ],
                            "scope",
                            [ "../chrome_tests.gypi" ])

  test("interactive_ui_tests") {
    sources = rebase_path(gypi_values.chrome_interactive_ui_test_sources,
                          ".",
                          "//chrome")

    defines = [ "HAS_OUT_OF_PROC_TEST_RUNNER" ]
    ldflags = []

    deps = [
      "//base/allocator",
      "//chrome/browser",
      "//chrome/browser/devtools",
      "//chrome/renderer",
      "//chrome/test:test_support",
      "//chrome:resources",
      "//chrome:strings",
      "//chrome:packed_extra_resources",
      "//chrome:packed_resources",
      "//content/app/resources",
      "//crypto:platform",
      "//google_apis:test_support",
      "//net",
      "//net:net_resources",
      "//net:test_support",
      "//pdf",

      #"//ppapi:ppapi_tests",  # TODO(GYP) this doesn't exist yet.
      "//skia",
      "//sync",
      "//testing/gmock",
      "//testing/gtest",
      "//third_party/hunspell",
      "//third_party/icu",
      "//third_party/libpng",
      "//third_party/npapi",
      "//third_party/zlib",
      "//ui/base:test_support",
      "//ui/web_dialogs:test_support",
    ]

    # Runtime dependencies
    datadeps = [
      "//third_party/mesa:osmesa",
    ]

    if (toolkit_views) {
      sources +=
          rebase_path(gypi_values.chrome_interactive_ui_test_views_sources,
                      ".",
                      "//chrome")
      deps += [
        "//ui/views",
        "//ui/views:test_support",
        "//ui/views/controls/webview:test_support",
      ]
      if (is_linux) {
        # TODO(gbillock): aura linux does not support the automation for
        # SendMouseMoveNotifyWhenDone
        sources -= [ "../browser/ui/views/toolbar/toolbar_button_test.cc" ]
      }
      if (is_mac) {
        sources -= [
          "../browser/ui/views/keyboard_access_browsertest.cc",
          "../browser/ui/views/message_center/web_notification_tray_browsertest.cc",
          "../browser/ui/views/panels/panel_view_browsertest.cc",
          "../browser/ui/views/toolbar/toolbar_button_test.cc",
        ]
      }
      if (is_chromeos) {
        sources -= [
          "../../ui/views/widget/desktop_aura/desktop_window_tree_host_x11_interactive_uitest.cc",
          "../../ui/views/widget/desktop_aura/x11_topmost_window_finder_interactive_uitest.cc",
        ]
      }
    }

    if (is_linux && !is_chromeos) {
      # Desktop linux.
      sources -= [
        # TODO(port): This times out. Attempts have been made to fix the
        # individual failures, but each time I disable a test from these
        # suites, it seems like one or another starts timing out too.
        "../browser/ui/views/keyboard_access_browsertest.cc",
      ]
    } else {
      # Everything but desktop Linux.
      sources += rebase_path(
              gypi_values.chrome_interactive_ui_test_non_desktop_linux_sources,
              ".",
              "//chrome")
    }

    if (is_chromeos) {
      sources +=
          rebase_path(gypi_values.chrome_interactive_ui_test_chromeos_sources,
                      ".",
                      "//chrome")
      sources += [ "../browser/notifications/login_state_notification_blocker_chromeos_browsertest.cc" ]
      sources -= [
        # Use only the _chromeos version on ChromeOS.
        "base/view_event_test_platform_part_ash.cc",
      ]

      deps += [
        "//ash/resources",
        "//chromeos",
      ]

      if (enable_nacl) {
        # TODO(GYP) this is also under a disable_nacl_untrusted==0 condition.
        deps += [
          # '../native_client/src/trusted/service_runtime/linux/nacl_bootstrap.gyp:nacl_helper_bootstrap',  TODO(GYP)
          # '../components/nacl.gyp:nacl_helper',  TODO(GYP)
          # '../components/nacl_nonsfi.gyp:nacl_helper_nonsfi',  TODO(GYP)
        ]
      }

      if (is_chrome_branded) {
        sources -= [
          # These tests are failing on official cros bots. crbug.com/431450.
          "../browser/ui/views/bookmarks/bookmark_bar_view_test.cc",
        ]
      }
    } else {
      # ChromeOS doesn't use panels, everybody else does.
      sources +=
          rebase_path(gypi_values.chrome_interactive_ui_test_panels_sources,
                      ".",
                      "//chrome")
      if (toolkit_views) {
        sources += rebase_path(
                gypi_values.chrome_interactive_ui_test_panels_views_sources,
                ".",
                "//chrome")
      }
    }

    if (!is_linux) {
      # Non-Linux platforms (Linux includes ChromeOS here).
      sources += rebase_path(
              gypi_values.chrome_interactive_ui_test_non_linux_and_chromeos_sources,
              ".",
              "//chrome")
    }

    if (is_win) {
      sources += rebase_path(gypi_values.chrome_interactive_ui_test_win_sources,
                             ".",
                             "//chrome")
      sources += [
        # TODO: It would be nice to have these pulled in automatically from
        # direct_dependent_settings in their various targets
        # (net.gyp:net_resources, etc.), but that causes errors in other
        # targets when resulting .res files get referenced multiple times.
        #"$root_gen_dir/chrome_version/other_version.rc",  TODO(GYP) what generates this?
        "$root_gen_dir/ui/resources/ui_unscaled_resources.rc",
      ]
      deps += [
        "//third_party/isimpledom",
        "//third_party/wtl",
        "//ui/resources",

        # 'chrome.gyp:chrome_version_resources'  TODO(GYP)
      ]
    }

    if (is_mac) {
      datadeps = [
        "//chrome",
      ]

      # TODO(mark): We really want this for all non-static library targets, but
      # when we tried to pull it up to the common.gypi level, it broke other
      # things like the ui and startup tests. *shrug*
      ldflags += [ "-Wl,-ObjC" ]
    } else {
      # Non-Mac.
      sources +=
          rebase_path(gypi_values.chrome_interactive_ui_test_non_mac_sources,
                      ".",
                      "//chrome")
    }

    if (cld_version == 0 || cld_version == 2) {
      # Interactive tests should use whatever CLD2 data access mode that the
      # application embedder is using.
      deps += [ "//third_party/cld_2:cld2_platform_impl" ]
    }

    if (use_x11) {
      configs += [ "//build/config/linux:xtst" ]
      datadeps += [ "//tools/xdisplaycheck" ]
    }

    if (enable_app_list) {
      sources +=
          rebase_path(gypi_values.chrome_interactive_ui_test_app_list_sources,
                      ".",
                      "//chrome")
    }

    if (use_ash) {
      sources += rebase_path(gypi_values.chrome_interactive_ui_test_ash_sources,
                             ".",
                             "//chrome")
      deps += [ "//ash:test_support" ]
    }

    if (enable_notifications) {
      sources += rebase_path(
              gypi_values.chrome_interactive_ui_test_notifications_sources,
              ".",
              "//chrome")

      # Non-ChromeOS notifications tests (ChromeOS does not use cross-platform
      # panels).
      if (!is_chromeos) {
        sources += [
          "../browser/notifications/notification_browsertest.cc",
          "../browser/notifications/platform_notification_service_browsertest.cc",
        ]
      }

      if (is_android) {
        sources -= [
          # Android does not use the message center-based Notification system.
          "../browser/notifications/message_center_notifications_browsertest.cc",

          # TODO(peter): Enable the Notification browser tests.
          "../browser/notifications/notification_browsertest.cc",
          "../browser/notifications/platform_notification_service_browsertest.cc",
        ]
      }
    }  # enable_notifications

    if (use_aura || is_chromeos) {
      sources -=
          [ "../../ui/views/corewm/desktop_capture_controller_unittest.cc" ]
    }
  }

  source_set("sync_integration_test_support") {
    testonly = true
    sources = rebase_path(gypi_values.test_support_sync_integration_sources,
                          ".",
                          "//chrome")
    public_deps = [ "//chrome/browser" ]
    deps = [
      ":test_support",
      "//base",
      "//chrome",
      "//components/invalidation",
      "//components/invalidation:test_support",
      "//net",
      "//skia",
      "//sync",
      "//sync:test_support_sync_testserver",
      "//sync:test_support_sync_fake_server",
      "//ui/app_list:test_support",
    ]

    if (is_mac) {
      sources -= [
        "../browser/sync/test/integration/dictionary_helper.cc",
        "../browser/sync/test/integration/dictionary_helper.h",
        "../browser/sync/test/integration/dictionary_load_observer.cc",
        "../browser/sync/test/integration/dictionary_load_observer.h",
      ]
    }
    if (!enable_app_list) {
      sources -= [
        "../browser/sync/test/integration/sync_app_list_helper.cc",
        "../browser/sync/test/integration/sync_app_list_helper.h",
      ]
    }
    if (!is_chromeos) {
      sources -= [
        "../browser/sync/test/integration/wifi_credentials_helper.cc",
        "../browser/sync/test/integration/wifi_credentials_helper.h",
      ]
    }
  }

  test("sync_integration_tests") {
    sources =
        rebase_path(gypi_values.sync_integration_tests_sources, ".", "//chrome")

    # TODO(phajdan.jr): Only temporary, to make transition easier.
    defines = [ "HAS_OUT_OF_PROC_TEST_RUNNER" ]

    deps = [
      ":sync_integration_test_support",
      ":test_support",
      "//base/allocator",
      "//chrome:packed_extra_resources",
      "//chrome:packed_resources",
      "//chrome:resources",
      "//chrome:strings",
      "//chrome/common",
      "//chrome/renderer",
      "//crypto:platform",
      "//sync",
      "//testing/gmock",
      "//testing/gtest",
      "//third_party/icu",
      "//third_party/leveldatabase",
      "//third_party/npapi",
      "//third_party/WebKit/public:blink",
    ]

    if (cld_version == 0 || cld_version == 2) {
      # Language detection is irrelevant to sync, so it can depend on any
      # implementation for CLD2. Dynamic is smaller, so go with dynamic.
      deps += [ "//third_party/cld_2:cld2_dynamic" ]
    }
    if (is_mac) {
      # Dictionary sync is disabled on Mac.
      sources -= [
        "../browser/sync/test/integration/multiple_client_dictionary_sync_test.cc",
        "../browser/sync/test/integration/single_client_dictionary_sync_test.cc",
        "../browser/sync/test/integration/two_client_dictionary_sync_test.cc",
      ]

      # The sync_integration_tests do not run on mac without this flag.
      # Search for comments about "xcode_settings" elsewhere in this file.
      ldflags = [ "-Wl,-ObjC" ]
    }
    if (is_win) {
      # TODO(GYP) figure out what these should map to.
      #sources += [
      #  '<(SHARED_INTERMEDIATE_DIR)/chrome_version/other_version.rc',
      #  '<(SHARED_INTERMEDIATE_DIR)/ui/resources/ui_unscaled_resources.rc',
      #]
      deps += [
        "//third_party/wtl",
        #'chrome_version_resources',  TODO(GYP)
      ]
    } else {
      sources -= [ "../app/chrome_version.rc.version" ]
    }
    if (!is_chromeos) {
      sources -= [
        "../browser/sync/test/integration/single_client_wifi_credentials_sync_test.cc",
        "../browser/sync/test/integration/two_client_wifi_credentials_sync_test.cc",
      ]
    }

    if (toolkit_views) {
      deps += [ "//ui/views" ]
    }
    if (enable_basic_printing || enable_print_preview) {
      deps += [ "//printing" ]
    }
    if (!enable_app_list) {
      sources -= [
        "../browser/sync/test/integration/single_client_app_list_sync_test.cc",
        "../browser/sync/test/integration/two_client_app_list_sync_test.cc",
      ]
    }
    if (!enable_supervised_users) {
      sources -= [ "../browser/sync/test/integration/single_client_supervised_user_settings_sync_test.cc" ]
    }
  }

  test("sync_performance_tests") {
    sources =
        rebase_path(gypi_values.sync_performance_tests_sources, ".", "//chrome")

    defines = [ "HAS_OUT_OF_PROC_TEST_RUNNER" ]

    deps = [
      ":sync_integration_test_support",
      "//base/allocator",
      "//crypto:platform",
      "//sync",
      "//testing/gmock",
      "//testing/gtest",
    ]

    if (cld_version == 0 || cld_version == 2) {
      # Language detection is irrelevant to sync, so it can depend on any
      # implementation for CLD2. Dynamic is smaller, so go with dynamic.
      deps += [ "//third_party/cld_2:cld2_dynamic" ]
    }

    if (is_mac) {
      # Dictionary sync is disabled on Mac.
      sources -= [ "../browser/sync/test/integration/performance/dictionary_sync_perf_test.cc" ]

      # The sync_performance_tests do not run on mac without this flag.
      # Search for comments about "xcode_settings" elsewhere in this file.
      ldflags = [ "-Wl,-ObjC" ]
    }
    if (is_win) {
      # TODO(GYP) figure out what these should map to.
      #sources += [
      #  '<(SHARED_INTERMEDIATE_DIR)/chrome_version/other_version.rc',
      #  '<(SHARED_INTERMEDIATE_DIR)/ui/resources/ui_unscaled_resources.rc',
      #]
      deps += [
        "//third_party/wtl",
        #'chrome_version_resources',  TODO(GYP)
      ]
    } else {
      sources -= [ "../app/chrome_version.rc.version" ]
    }

    if (toolkit_views) {
      deps += [ "//ui/views" ]
    }
  }

  # Executable to measure time to load libraries.
  test("load_library_perf_tests") {
    sources = [
      "../browser/load_library_perf_test.cc",
    ]

    deps = [
      "//base/test:test_support_perf",
      "//testing/gtest",
      "//testing/perf",
      "//third_party/widevine/cdm:version_h",
    ]

    # TODO(GYP) CDM adapter stuff.
    #if (enable_pepper_cdms) {
    #  deps += [
    #    "//media/cdm/ppapi:clearkeycdmadapter",
    #    "//ppapi:ppapi_cpp",
    #    "//third_party/widevine/cdm:adapter",
    #  ]
    #}
  }
}
