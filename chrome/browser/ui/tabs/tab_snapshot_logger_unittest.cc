// Copyright 2017 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include "chrome/browser/ui/tabs/tab_snapshot_logger.h"

#include <memory>

#include "base/macros.h"
#include "chrome/browser/engagement/site_engagement_service.h"
#include "chrome/browser/ui/browser.h"
#include "chrome/browser/ui/tabs/tab_activity_watcher.h"
#include "chrome/browser/ui/tabs/tab_event.pb.h"
#include "chrome/browser/ui/tabs/tab_strip_model.h"
#include "chrome/test/base/chrome_render_view_host_test_harness.h"
#include "chrome/test/base/test_browser_window.h"
#include "chrome/test/base/testing_profile.h"
#include "components/ukm/test_ukm_recorder.h"
#include "components/ukm/ukm_source.h"
#include "content/public/browser/web_contents.h"
#include "content/public/test/web_contents_tester.h"
#include "services/metrics/public/cpp/ukm_builders.h"
#include "services/metrics/public/cpp/ukm_source_id.h"
#include "services/metrics/public/interfaces/ukm_interface.mojom.h"
#include "testing/gtest/include/gtest/gtest.h"

using content::WebContentsTester;
using metrics::TabEvent;
using ukm::builders::TabManager_Tab;

using MetricMap = std::map<const char*, int64_t>;

namespace {

const char* kEntryName = TabManager_Tab::kEntryName;

const GURL kTestUrls[] = {
    GURL("https://example.com/"), GURL("https://example2.com/"),
    GURL("https://example3.com/"),
};

// The default metric values for a tab.
const MetricMap kBasicMetricValues(
    {{TabManager_Tab::kIsPinnedName, 0},
     {TabManager_Tab::kHasFormEntryName, 0},
     {TabManager_Tab::kContentTypeName, TabEvent::CONTENT_TYPE_TEXT_HTML},
     {TabManager_Tab::kSiteEngagementScoreName, 0}});

// A stub to pass to the TabActivityWatcher, effectively disabling automatic tab
// logging. Necessary so we can test a TabSnapshotLogger in isolation.
class StubTabSnapshotLogger : public TabSnapshotLogger {
 public:
  StubTabSnapshotLogger() = default;

 private:
  // TabSnapshotLogger:
  void LogBackgroundTab(ukm::SourceId ukm_source_id,
                        content::WebContents* web_contents) override {}

  DISALLOW_COPY_AND_ASSIGN(StubTabSnapshotLogger);
};

}  // namespace

// Tests UKM entries generated by the TabSnapshotLogger.
// Inherits from ChromeRenderViewHostTestHarness to use TestWebContents and
// Profile.
class TabSnapshotLoggerTest : public ChromeRenderViewHostTestHarness {
 protected:
  TabSnapshotLoggerTest() {
    TabActivityWatcher::GetInstance()->SetTabSnapshotLoggerForTest(
        std::make_unique<StubTabSnapshotLogger>());
  }

  ~TabSnapshotLoggerTest() override {
    TabActivityWatcher::GetInstance()->SetTabSnapshotLoggerForTest(nullptr);
  }

 protected:
  // Similar to WebContentsTester::NavigateAndCommit(), but will allow
  // overriding certain navigation properties later for testing.
  void NavigateAndCommit(content::WebContents* contents, const GURL& url) {
    WebContentsTester::For(contents)->NavigateAndCommit(url);
  }

  // Expects that the most recently added TabManager.Tab entry matches the
  // values.
  void ExpectEntry(const GURL& source_url, const MetricMap& expected_metrics) {
    const auto entries = ukm_recorder()->GetEntriesByName(kEntryName);
    ASSERT_GT(entries.size(), 0u);

    const auto* entry = entries.back();

    // Verify the entry is associated with the correct URL and all the expected
    // metrics are present and correct.
    ukm_recorder()->ExpectEntrySourceHasUrl(entry, source_url);
    for (const auto& metric : expected_metrics) {
      ukm::TestUkmRecorder::ExpectEntryMetric(entry, metric.first,
                                              metric.second);
    }
  }

  ukm::TestUkmRecorder* ukm_recorder() { return &ukm_recorder_; }
  TabSnapshotLogger* tab_snapshot_logger() { return &tab_snapshot_logger_; }

 private:
  ukm::TestAutoSetUkmRecorder ukm_recorder_;
  TabSnapshotLogger tab_snapshot_logger_;

  DISALLOW_COPY_AND_ASSIGN(TabSnapshotLoggerTest);
};

TEST_F(TabSnapshotLoggerTest, Basic) {
  Browser::CreateParams params(profile(), true);
  std::unique_ptr<Browser> browser =
      CreateBrowserWithTestWindowForParams(&params);
  content::WebContents* test_contents =
      WebContentsTester::CreateTestWebContents(profile(), nullptr);

  TabStripModel* tab_strip = browser->tab_strip_model();
  tab_strip->AppendWebContents(test_contents, false);

  // With no SourceId, logging does nothing.
  ukm::SourceId source_id = 0;
  tab_snapshot_logger()->LogBackgroundTab(source_id, test_contents);
  EXPECT_EQ(0u, ukm_recorder()->GetEntriesByName(kEntryName).size());

  // After navigating, we have a SourceId.
  NavigateAndCommit(test_contents, kTestUrls[0]);
  source_id = ukm_recorder()->GetSourceForUrl(kTestUrls[0])->id();
  tab_snapshot_logger()->LogBackgroundTab(source_id, test_contents);

  // Verify the TabManager.Tab entry has been logged.
  EXPECT_EQ(1u, ukm_recorder()->GetEntriesByName(kEntryName).size());
  ExpectEntry(kTestUrls[0], kBasicMetricValues);

  tab_strip->CloseAllTabs();
}

TEST_F(TabSnapshotLoggerTest, FeatureChanges) {
  Browser::CreateParams params(profile(), true);
  std::unique_ptr<Browser> browser =
      CreateBrowserWithTestWindowForParams(&params);
  TabStripModel* tab_strip = browser->tab_strip_model();

  content::WebContents* test_contents[] = {
      WebContentsTester::CreateTestWebContents(profile(), nullptr),
      WebContentsTester::CreateTestWebContents(profile(), nullptr),
  };

  tab_strip->AppendWebContents(test_contents[0], false);
  tab_strip->AppendWebContents(test_contents[1], false);

  NavigateAndCommit(test_contents[0], kTestUrls[0]);
  NavigateAndCommit(test_contents[1], kTestUrls[1]);

  // Log the background tab with default metrics.
  MetricMap expected_metrics(kBasicMetricValues);
  {
    SCOPED_TRACE("");
    tab_snapshot_logger()->LogBackgroundTab(
        ukm_recorder()->GetSourceForUrl(kTestUrls[1])->id(), test_contents[1]);
    EXPECT_EQ(1u, ukm_recorder()->GetEntriesByName(kEntryName).size());
    ExpectEntry(kTestUrls[1], expected_metrics);
  }

  // Change features for the same tab.
  tab_strip->SetTabPinned(1, true);
  expected_metrics[TabManager_Tab::kIsPinnedName] = 1;
  // Site engagement score should round down to the nearest 10.
  expected_metrics[TabManager_Tab::kSiteEngagementScoreName] = 40;
  SiteEngagementService::Get(profile())->ResetBaseScoreForURL(kTestUrls[1], 45);
  {
    SCOPED_TRACE("");
    tab_snapshot_logger()->LogBackgroundTab(
        ukm_recorder()->GetSourceForUrl(kTestUrls[1])->id(), test_contents[1]);
    EXPECT_EQ(2u, ukm_recorder()->GetEntriesByName(kEntryName).size());
    ExpectEntry(kTestUrls[1], expected_metrics);
  }

  // Navigate the tab to a new domain.
  NavigateAndCommit(test_contents[1], kTestUrls[2]);

  // Site engagement score for the new domain is 0.
  expected_metrics[TabManager_Tab::kSiteEngagementScoreName] = 0;
  {
    SCOPED_TRACE("");
    tab_snapshot_logger()->LogBackgroundTab(
        ukm_recorder()->GetSourceForUrl(kTestUrls[2])->id(), test_contents[1]);
    EXPECT_EQ(3u, ukm_recorder()->GetEntriesByName(kEntryName).size());
    ExpectEntry(kTestUrls[2], expected_metrics);
  }

  // The other tab still has the default metrics.
  {
    SCOPED_TRACE("");
    tab_snapshot_logger()->LogBackgroundTab(
        ukm_recorder()->GetSourceForUrl(kTestUrls[0])->id(), test_contents[0]);
    EXPECT_EQ(4u, ukm_recorder()->GetEntriesByName(kEntryName).size());
    ExpectEntry(kTestUrls[0], kBasicMetricValues);
  }

  tab_strip->CloseAllTabs();
}
