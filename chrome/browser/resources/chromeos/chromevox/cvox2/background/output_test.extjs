// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

GEN_INCLUDE(['../../testing/assert_additions.js']);
GEN_INCLUDE(['../../testing/chromevox_next_e2e_test_base.js']);

/**
 * Test fixture for output.js.
 * @constructor
 * @extends {ChromeVoxNextE2ETestBase}
 */
function OutputE2ETest() {
  ChromeVoxNextE2ETest.call(this);
}

OutputE2ETest.prototype = {
  __proto__: ChromeVoxNextE2ETest.prototype,

  /** @override */
  setUp: function() {
    window.Dir = AutomationUtil.Dir;
  }
};

TEST_F('OutputE2ETest', 'Links', function() {
  this.runWithLoadedTree('<a href="#">Click here</a>',
    function(root) {
      var el = root.firstChild.firstChild;
      var range = cursors.Range.fromNode(el);
      var o = new Output().withSpeechAndBraille(range, null, 'navigate');
      assertEqualsJSON({string_: 'Click hereLink', 'spans_': [
        // Attributes.
        {value: 'name', start: 0, end: 10},
        {value: 'role', start: 10, end: 14},

        // Link earcon (based on the role).
        {value: {}, start: 10, end: 14}
      ]}, o.toSpannable());
  });
});

TEST_F('OutputE2ETest', 'Checkbox', function() {
  this.runWithLoadedTree('<input type="checkbox">',
    function(root) {
      var el = root.firstChild.firstChild;
      var range = cursors.Range.fromNode(el);
      var o = new Output().withSpeechAndBraille(range, null, 'navigate');
      assertEqualsJSON({string_: 'Check boxnot checked', 'spans_': [
        // Attributes.
        {value: 'name', start: 0, end: 0},
        {value: 'role', start: 0, end: 9},
        {value: 'state', start: 9, end: 20},

        // Link earcon (based on the state).
        {value: {}, start: 9, end: 20}
      ]}, o.toSpannable());
  });
});

TEST_F('OutputE2ETest', 'InLineTextBoxValueGetsIgnored', function() {
  this.runWithLoadedTree('<p>OK',
    function(root) {
      var el = root.firstChild.firstChild.firstChild;
      assertEquals('inlineTextBox', el.role);
      var range = cursors.Range.fromNode(el);
      var o = new Output().withSpeechAndBraille(range, null, 'navigate');
      assertEqualsJSON({string_: 'OK', 'spans_': [
        // Attributes.
        {value: 'name', start: 0, end: 2}
      ]}, o.toSpannable());

      el = root.firstChild.firstChild;
      assertEquals('staticText', el.role);
      range = cursors.Range.fromNode(el);
      o = new Output().withSpeechAndBraille(range, null, 'navigate');
      assertEqualsJSON({string_: 'OK', 'spans_': [
        // Attributes.
        {value: 'value', start: 0, end: 2},

        // The name is an empty string.
        {value: 'name', start: 2, end: 2}
      ]}, o.toSpannable());
  });
});

TEST_F('OutputE2ETest', 'Headings', function() {
  this.runWithLoadedTree(
      '<h1>a</h1><h2>b</h2><h3>c</h3><h4>d</h4><h5>e</h5><h6>f</h6>',
    function(root) {
      var el = root.firstChild;
      var range = cursors.Range.fromNode(el);
      var o = new Output().withSpeechAndBraille(range, null, 'navigate');
      assertEqualsJSON({string_: 'Heading 1a', 'spans_': [
        // Attributes.
        {value: 'name', start: 9, end: 10}
      ]}, o.toSpannable());

      el = el.nextSibling;
      range = cursors.Range.fromNode(el);
      o = new Output().withSpeechAndBraille(range, null, 'navigate');
      assertEqualsJSON({string_: 'Heading 2b', 'spans_': [
        // Attributes.
        {value: 'name', start: 9, end: 10}
      ]}, o.toSpannable());

      el = el.nextSibling;
      range = cursors.Range.fromNode(el);
      o = new Output().withSpeechAndBraille(range, null, 'navigate');
      assertEqualsJSON({string_: 'Heading 3c', 'spans_': [
        // Attributes.
        {value: 'name', start: 9, end: 10}
      ]}, o.toSpannable());

      el = el.nextSibling;
      range = cursors.Range.fromNode(el);
      o = new Output().withSpeechAndBraille(range, null, 'navigate');
      assertEqualsJSON({string_: 'Heading 4d', 'spans_': [
        // Attributes.
        {value: 'name', start: 9, end: 10}
      ]}, o.toSpannable());

      el = el.nextSibling;
      range = cursors.Range.fromNode(el);
      o = new Output().withSpeechAndBraille(range, null, 'navigate');
      assertEqualsJSON({string_: 'Heading 5e', 'spans_': [
        // Attributes.
        {value: 'name', start: 9, end: 10}
      ]}, o.toSpannable());

      el = el.nextSibling;
      range = cursors.Range.fromNode(el);
      o = new Output().withSpeechAndBraille(range, null, 'navigate');
      assertEqualsJSON({string_: 'Heading 6f', 'spans_': [
        // Attributes.
        {value: 'name', start: 9, end: 10}
      ]}, o.toSpannable());
  });
});

TEST_F('OutputE2ETest', 'Audio', function() {
  this.runWithLoadedTree('<audio src="foo.mp3" controls></audio>',
    function(root) {
      var el = root.firstChild.firstChild.firstChild.firstChild;
      var range = cursors.Range.fromNode(el);
      var o = new Output().withSpeechAndBraille(range, null, 'navigate');
      assertEqualsJSON({string_: 'media control|Tool bar|||play|Button',
          spans_:
              // Entered container toolbar.

              // Button.
              [{value: 'name', start: 23, end: 23},
              {value: 'value', start: 24, end: 24},
              {value: 'description', start: 25, end: 29},
              {value: 'role', start: 30, end: 36},

              // Button earcon.
              {value: {}, start: 30, end: 36}]
          }, o.toSpannableForTest());

      el = el.nextSibling;
      var prevRange = range;
      range = cursors.Range.fromNode(el);
      var o = new Output().withSpeechAndBraille(range, prevRange, 'navigate');
      assertEqualsJSON({string_: '0, , slider|audio time scrubber',
          spans_:
              [{value: 'help', start: 12, end: 31}]
          }, o.toSpannableForTest());
  });
});
