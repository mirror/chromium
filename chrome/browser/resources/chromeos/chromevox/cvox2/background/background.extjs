// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Include test fixture.
GEN_INCLUDE(['../../testing/chromevox_e2e_test_base.js']);

/**
 * Test fixture for cvox2.Background.
 * @constructor
 * @extends {ChromeVoxE2ETest}
 */
function BackgroundTest() {}

BackgroundTest.prototype = {
  __proto__: ChromeVoxE2ETest.prototype,

  // This method is called without a |this| instance bound.
  /** @override */
  testGenCppIncludes: function() {
    ChromeVoxE2ETest.prototype.testGenCppIncludes.call(this);
    GEN('#include "base/command_line.h"');
    GEN('#include "chromeos/chromeos_switches.h"');
  },

  // This method is called without a |this| instance bound.
  /** @override */
  testGenPreamble: function() {
    GEN_BLOCK(function() {/*!
      CommandLine* command_line = CommandLine::ForCurrentProcess();
      command_line->AppendSwitch(chromeos::switches::kEnableChromeVoxNext);
    */});
    ChromeVoxE2ETest.prototype.testGenPreamble.call(this);
  },

  /** @override */
  setUp: function() {
    this.mockTts = new MockTts();
    cvox.ChromeVox.tts = this.mockTts;
  }
};

/**
 * Mock tts class.
 * @constructor
 * @extends {cvox.TtsInterface}
 */
var MockTts = function() {
};

MockTts.prototype = {
  /**
   * A list of predicate callbacks.
   * @type {!Array.<function(string) : boolean>}
   * @private
   */
  callbacks_: [],

  /**
   * A list of strings stored whenever there are no expectations.
   * @type {!Array.<string}
   * @private
   */
  idleUtterances_: [],

  /** @override */
  speak: function(textString, queueMode, properties) {
    this.process_(textString);
  },

  /**
   * Adds an expectation for the given string to be spoken. If satisfied,
   * |opt_callback| is called.
   * @param {string} expected
   * @param {function() : void=} opt_callback
   */
  expectSpeech: function(expected, opt_callback) {
    this.callbacks_.push(function(actual) {
      var match = actual.indexOf(expected) != -1;
      if (opt_callback && match)
        opt_callback();
      return match;
    });

    // Process any idleUtterances.
    this.idleUtterances_.forEach(this.process_, true);
  },

  /**
   * @param {string} textString Utterance to match against callbacks.
   * @param {boolean=} opt_manual True if called outside of tts.speak.
   * @private
   */
  process_: function(textString, opt_manual) {
    if (this.callbacks_.length == 0) {
      if (!opt_manual)
        this.idleUtterances_.push(textString);
      return;
    }

    var allUtterances = this.idleUtterances_.concat([textString]);
    var targetCallback = this.callbacks_.shift();
    if (allUtterances.some(targetCallback))
      this.idleUtterances_.length = 0;
    else
      this.callbacks_.unshift(targetCallback);
  },
};

/** Tests that ChromeVox classic is in this context. */
SYNC_TEST_F('BackgroundTest', 'ClassicNamespaces', function() {
  assertEquals('object', typeof(cvox));
  assertEquals('function', typeof(cvox.ChromeVoxBackground));
});

/** Tests that ChromeVox next is in this context. */
SYNC_TEST_F('BackgroundTest', 'NextNamespaces', function() {
  assertEquals('object', typeof(cvox2));
  assertEquals('function', typeof(cvox2.Background));
});

/** Tests that ChromeVox reads the desktop tree. */
TEST_F('BackgroundTest', 'DesktopFocus', function() {
  function findStatusTray(root) {
    if (root.role == chrome.automation.RoleType.button &&
        root.attributes.name &&
        root.attributes.name.indexOf('Status tray') != -1) {
      return root;
    }
    for (var i = 0; i < root.children().length; i++) {
      var found = findStatusTray(root.children()[i]);
      if (found)
        return found;
    }
    return null;
  }

  chrome.automation.getDesktop(function(root) {
    var testButton = findStatusTray(root);
    cvox.ChromeVox.tts.expectSpeech('Status tray', testDone);
    testButton.focus();
  });
});

/** Tests feedback once a page loads. */
TEST_F('BackgroundTest', 'InitialFeedback', function() {
  this.runWithDocument(function() {/*!
    <p>start
    <p>end
  */},
  function() {
    cvox.ChromeVox.tts.expectSpeech('start', function() {
      cvox2.global.backgroundObj.onGotCommand('nextLine');
    });
    cvox.ChromeVox.tts.expectSpeech('end', testDone);
  }.bind(this));
});
