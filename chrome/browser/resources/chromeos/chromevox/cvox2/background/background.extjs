// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Include test fixture.
GEN_INCLUDE(['../../testing/chromevox_e2e_test_base.js']);

/**
 * Test fixture for cvox2.Background.
 * @constructor
 * @extends {ChromeVoxE2ETest}
 */
function BackgroundTest() {}

BackgroundTest.prototype = {
  __proto__: ChromeVoxE2ETest.prototype,

  // This method is called without a |this| instance bound.
  /** @override */
  testGenCppIncludes: function() {
    ChromeVoxE2ETest.prototype.testGenCppIncludes.call(this);
    GEN('#include "base/command_line.h"');
    GEN('#include "chromeos/chromeos_switches.h"');
  },

  // This method is called without a |this| instance bound.
  /** @override */
  testGenPreamble: function() {
    GEN_BLOCK(function() {/*!
      CommandLine* command_line = CommandLine::ForCurrentProcess();
      command_line->AppendSwitch(chromeos::switches::kEnableChromeVoxNext);
    */});
    ChromeVoxE2ETest.prototype.testGenPreamble.call(this);
  },

  /** @override */
  setUp: function() {
    this.mockTts = new MockTts();
    cvox.ChromeVox.tts = this.mockTts;
  }
};

/**
 * Mock tts class.
 * @constructor
 * @extends {cvox.TtsInterface}
 */
var MockTts = function() {
};

MockTts.prototype = {
  /** Tracks all spoken text. @type {!Array.<string>} */
  utterances: [],

  /** @override */
  speak: function(textString, queueMode, properties) {
    this.utterances.push(textString);
  },

  /**
   * Checks to see if a string was spoken.
   * @param {string} textString The string to check.
   * @return {boolean} True if the string was spoken (possibly as part of a
   * larger utterance).
   */
  checkIfSubstringWasSpoken: function(textString) {
    return this.utterances.some(function(t) {
      return t.indexOf(textString) != -1;
    });
  }
};

/** Tests that ChromeVox classic is in this context. */
SYNC_TEST_F('BackgroundTest', 'ClassicNamespaces', function() {
  assertEquals('object', typeof(cvox));
  assertEquals('function', typeof(cvox.ChromeVoxBackground));
});

/** Tests that ChromeVox next is in this context. */
SYNC_TEST_F('BackgroundTest', 'NextNamespaces', function() {
  assertEquals('object', typeof(cvox2));
  assertEquals('function', typeof(cvox2.Background));
});

/** Tests that ChromeVox reads the desktop tree. */
TEST_F('BackgroundTest', 'DesktopFocus', function() {
  function findStatusTray(root) {
    if (root.role == chrome.automation.RoleType.button &&
        root.attributes.name &&
        root.attributes.name.indexOf('Status tray') != -1) {
      return root;
    }
    for (var i = 0; i < root.children().length; i++) {
      var found = findStatusTray(root.children()[i]);
      if (found)
        return found;
    }
    return null;
  }

  chrome.automation.getDesktop(function(root) {
    var testButton = findStatusTray(root);
    testButton.addEventListener(chrome.automation.EventType.focus,
        function(e) {
          var result =
              cvox.ChromeVox.tts.checkIfSubstringWasSpoken('Status tray');
          testDone([result, '']);
        },
        true);
    testButton.focus();
  });
});
