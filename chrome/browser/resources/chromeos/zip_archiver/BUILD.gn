# Copyright 2017 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

group("zip_archiver") {
  deps = [
    ":zip_archiver_css",
    ":zip_archiver_guest_manifest",
    ":zip_archiver_html",
    ":zip_archiver_icons",
    ":zip_archiver_js",
    ":zip_archiver_manifest",
    ":zip_archiver_root",
    "//chrome/browser/resources/chromeos/zip_archiver/strings:ziparchiver_strings",
  ]
}

zip_archiver_dir = "$root_out_dir/resources/chromeos/zip_archiver"

copy("zip_archiver_css") {
  sources = [
    "css/passphrase-dialog.css",
    "css/passphrase.css",
  ]

  outputs = [
    "$zip_archiver_dir/css/{{source_file_part}}",
  ]
}

copy("zip_archiver_html") {
  sources = [
    "html/compressor.html",
    "html/passphrase-dialog.html",
    "html/passphrase.html",
  ]

  outputs = [
    "$zip_archiver_dir/html/{{source_file_part}}",
  ]
}

copy("zip_archiver_icons") {
  sources = [
    "icons/icon128.png",
    "icons/icon16.png",
    "icons/icon32.png",
    "icons/icon64.png",
    "icons/icon96.png",
  ]

  outputs = [
    "$zip_archiver_dir/icons/{{source_file_part}}",
  ]
}

copy("zip_archiver_js") {
  sources = [
    "js/app.js",
    "js/background.js",
    "js/build-config.js",
    "js/compressor-foreground.js",
    "js/compressor.js",
    "js/decompressor.js",
    "js/main.js",
    "js/passphrase-dialog.js",
    "js/passphrase-manager.js",
    "js/request.js",
    "js/types.js",
    "js/unpacker.js",
    "js/volume.js",
  ]

  outputs = [
    "$zip_archiver_dir/js/{{source_file_part}}",
  ]
}

copy("zip_archiver_root") {
  pexe_dir = get_label_info(
          "//chrome/browser/resources/chromeos/zip_archiver/cpp:zip_archiver_pnacl(//build/toolchain/nacl:newlib_pnacl)",
          "root_out_dir")

  deps = [
    "//chrome/browser/resources/chromeos/zip_archiver/cpp:zip_archiver_pnacl(//build/toolchain/nacl:newlib_pnacl)",
  ]

  sources = [
    "$pexe_dir/zip_archiver_pnacl.pexe",
    "module.nmf",
  ]

  outputs = [
    "$zip_archiver_dir/{{source_file_part}}",
  ]
}

template("manifest") {
  version_file = "//chrome/VERSION"
  version_script = "//build/util/version.py"
  template_file = "manifest.json.jinja2"
  output_file = invoker.output_file
  key = "MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQCxGxJCOLUzHIYc812NFoBC1eV8PhOTuF6he3gSuqzxckUyrDLdl5++DAd1AkQkv6i8SSMWFvDKLg2b+zfCOwk6P7uu3tqNavXXy61Okaq5HKF3xhciNDl4zF6ZlegvE9AhJOTo2eCHVIMS0+YuK5hyno/+xMwN4byvsrOYXQnhcJeOHxkFb9TfVUb3SOBgl4pBZ7+EIMNntEvzY7mxjBzOgnCjBePvwnoMRyAqljCJarz2WSbUOLP3yoCuH9vPKj+0D6hF1woXmd6qBr0ln/7tHdbr1cYmkosfFuJO2y6d00FAJY/G5L6o8JAEBbWG5D0qELt+aBjkG0uos5gcR4ZPAgMBAAECggEBAK3aIjFJU25J6MjQiRvvY5a4O56bnUIb8SDZgAP6pbwZ7R2R9hiaN6AqVMOiptvgHDZAISYU/OerD4b3s0OCCkvYtlcxwh6iSZQ9BvIighFWrpZRqPHVjDktfQuNIS/dZiiy+9Yr0oFmD4jS45idCPgy+K0h6CEUX9GlPTEq24ElECDwQHVyB9LHdenleCdvldIEDxf6/D+zkc/PmCPlZPfwdppK6wgH2GvgqbxV+OoSnNp0XhNinjCN37P5yAo4xEi0UGOxOwkNGkJn0V5bYjH6/JHzmdVH74D40N4/Fcy0bC79oFGeiP0ZzW8AAArfIxbxStodWlBOCsTVtvi4RMECgYEA2pyZRThGx4OH8uXCC94LkdpVjKvLvbUlIVd2zk3UEFpWujgmAI+erkAaE1JSlcJpFNSlfonTX1vQuMgTOfnK7soy4677P1CMQH++GxjMWRIAQsMyx7vLtKOISr5/vQQKAyuFmxzt9xbMOmPzqWxwkuuiF74GtPgE5VXslhvsoyECgYEAz2U7L6YS4u2aMRK4DMDxcf/hZ3BxwHmUl5euknRNcaFJSdv6392y8w3t9Lz7sp8CK56GADXL1bmLrDgg2tlL82f60rtPd6IOoJk10uMmCnyjbZh7aJzuw1CTSs+dwi6qpGUB4YbJn8R2AN79SHxUb4dwVOh4lHeNa415Wka+a28CgYA3Vf5iDB22cO/fpxLYSCtrjvWqtu3KpmiwqOAU1pSAUy2y03WjHLeQ6f7vtx3adKx+rlj5z89mSuppa5OaUEVy7lG1WlyUqUHnLa6kU0GepjTUsW5QKpQktGRSbygMY1JZfRHDsq31ppqpiRVrZFyWg/iyw9IUytcKahaJ5KWgoQKBgFbgY/ugyNaQi3+1BK4rALktZAGNo8jp5SnfWzx0RaCs3GN5J80xNG4GTsCvjYwUebdF74IVBu7fi7e3x2OFlQBAdVxjJHXLx+7UXyyZBG1uKpOVRVTcMFRW42x6Le6S196HhVMwwDMR/BB/WIBNvJz/kjmvLBudPPtpxwTfD5M3AoGBALrrXX4QwqBiq4q09SPKoeOwlV35QETUhQaAKKag9aSrNMONcf77TXUBZ0d9Z+tabHLTGGa6E7q2BL82NdZSZvVeVWA+KaE4ezW2t5KyZqg14Cc0uY9Xys9VkFcVgMqsvtkUzDvAVJcmNAgcrMIEiapUR6LPrneLLXH1ikOt+hM8"
  action(target_name) {
    script = "tools/generate_manifest.py"
    inputs = [
      version_file,
      version_script,
    ]
    sources = [
      template_file,
    ]
    outputs = [
      output_file,
    ]
    args = [
      "--key=$key",
      "--version_file=" + rebase_path(version_file, root_build_dir),
      "--output_manifest=" + rebase_path(output_file, root_build_dir),
    ]
    if (defined(invoker.is_guest_manifest) && invoker.is_guest_manifest) {
      args += [ "--is_guest_manifest=1" ]
    }
    args += rebase_path(sources, root_build_dir)
  }
}

manifest("zip_archiver_manifest") {
  output_file = "$zip_archiver_dir/manifest.json"
}

manifest("zip_archiver_guest_manifest") {
  output_file = "$zip_archiver_dir/manifest_guest.json"
  is_guest_manifest = true
}
