#!/usr/bin/env python
# Copyright 2017 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import optparse
import base64
import hashlib
import re
import os
import sys


def ComputeIntegrity(input_path):
  hasher = hashlib.sha256()
  with open(input_path, 'r') as f:
    hasher.update(f.read())
  return base64.b64encode(hasher.digest())


def WriteHeader(input_path_integrity, output_path):
  with open(output_path, 'w') as f:
    f.write('// DO NOT MODIFY THIS FILE DIRECTLY!\n')
    f.write('// IT IS GENERATED BY generate_integrity_header.py\n')
    for (input_filename, integrity) in input_path_integrity:
      f.write('// FROM ' + input_filename + '\n')

      f.write('\n')

      define_name = re.sub('\W', '_', input_filename.upper())
      define_name = define_name + '_INTEGRITY'

      f.write('#define ' + define_name + ' "' + integrity + '"\n')

      f.write('\n')


def main():
  parser = optparse.OptionParser(
      description='Generate a C++ header containing a sha256 checksum of the '
      'input file.')
  parser.add_option('--output_path', help='Path to output header file.')
  options, input_paths = parser.parse_args(sys.argv)

  input_path_integrity = [(os.path.basename(path), ComputeIntegrity(path))
                          for path in input_paths]
  WriteHeader(input_path_integrity, options.output_path)

  return 0


if __name__ == '__main__':
  sys.exit(main())
