{
  "comments": [
    {
      "key": {
        "uuid": "530b507a_17717423",
        "filename": "chrome/browser/safe_browsing/chrome_password_protection_service.cc",
        "patchSetId": 4
      },
      "lineNbr": 441,
      "author": {
        "id": 1144209
      },
      "writtenOn": "2017-09-19T21:33:30Z",
      "side": 1,
      "message": "This implies the entire origin is whitelisted. For most cases, this should be fine. But imagining the dropbox case, this will whitelist the entire dropbox for a week.",
      "revId": "60e667c323436e7ef5c83b1b3115d090412a44f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "97d2b676_3db21e3b",
        "filename": "chrome/browser/safe_browsing/chrome_password_protection_service.cc",
        "patchSetId": 4
      },
      "lineNbr": 441,
      "author": {
        "id": 1144039
      },
      "writtenOn": "2017-09-20T22:39:37Z",
      "side": 1,
      "message": "Good point, do you know what would be a good alternative?",
      "parentUuid": "530b507a_17717423",
      "revId": "60e667c323436e7ef5c83b1b3115d090412a44f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f9b92fac_f4d97860",
        "filename": "chrome/browser/safe_browsing/chrome_password_protection_service.cc",
        "patchSetId": 4
      },
      "lineNbr": 441,
      "author": {
        "id": 1144209
      },
      "writtenOn": "2017-09-20T22:41:49Z",
      "side": 1,
      "message": "Let\u0027s just keep the original cache expression (i.e. without adding this line).",
      "parentUuid": "97d2b676_3db21e3b",
      "revId": "60e667c323436e7ef5c83b1b3115d090412a44f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "263b952b_c2432f73",
        "filename": "chrome/browser/safe_browsing/chrome_password_protection_service.cc",
        "patchSetId": 4
      },
      "lineNbr": 441,
      "author": {
        "id": 1144039
      },
      "writtenOn": "2017-09-21T00:34:24Z",
      "side": 1,
      "message": "If we do that, then cache_expression is NOT set at all in UpdateSecurityState().\nOn the other hand, we do not expect the cache expression to be empty. Correct?",
      "parentUuid": "f9b92fac_f4d97860",
      "revId": "60e667c323436e7ef5c83b1b3115d090412a44f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a34b2943_9cda82d8",
        "filename": "chrome/browser/safe_browsing/chrome_password_protection_service.cc",
        "patchSetId": 4
      },
      "lineNbr": 441,
      "author": {
        "id": 1144209
      },
      "writtenOn": "2017-09-21T01:01:52Z",
      "side": 1,
      "message": "Ah. I see. This is because in VerifyUpdateSeurityState unit test, there is no cached verdict before changing security state.  For regular cases, GetCachedVerdict in line 437 should propagate the correct cache_expression. \n\nLet\u0027s do following the circumvent this issue. \n \nif (verdict.cache_expression().empty())\n  verdict.set_cache_expression(\"/\");",
      "parentUuid": "263b952b_c2432f73",
      "revId": "60e667c323436e7ef5c83b1b3115d090412a44f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5fe9e46f_f8c1452f",
        "filename": "chrome/browser/safe_browsing/chrome_password_protection_service.cc",
        "patchSetId": 4
      },
      "lineNbr": 441,
      "author": {
        "id": 1144209
      },
      "writtenOn": "2017-09-21T01:38:32Z",
      "side": 1,
      "message": "Alternatively, remove verdict.set_cache_expression(\"/\");  and fix the VerifyUpdateSecurityState test case in c/b/safe_browsing/chrome_password_protection_service_unittest.cc by caching a verdict before updating security state.\n\nYou can copy\u0026paste the following code to replace the existing VerifyUpdateSecurityState test.\n\n\nTEST_F(ChromePasswordProtectionServiceTest, VerifyUpdateSecurityState) {\n  GURL url(\"http://password_reuse_url.com\");\n  NavigateAndCommit(url);\n  SBThreatType current_threat_type \u003d SB_THREAT_TYPE_UNUSED;\n  ASSERT_FALSE(service_-\u003eui_manager()-\u003eIsUrlWhitelistedOrPendingForWebContents(\n      url, false, web_contents()-\u003eGetController().GetLastCommittedEntry(),\n      web_contents(), false, \u0026current_threat_type));\n  EXPECT_EQ(SB_THREAT_TYPE_UNUSED, current_threat_type);\n\n  // Cache a verdict for this URL.\n  LoginReputationClientResponse verdict_proto;\n  verdict_proto.set_verdict_type(LoginReputationClientResponse::PHISHING);\n  verdict_proto.set_cache_duration_sec(600);\n  verdict_proto.set_cache_expression(\"password_reuse_url.com/\");\n  service_-\u003eCacheVerdict(url,\n                         LoginReputationClientRequest::PASSWORD_REUSE_EVENT,\n                         \u0026verdict_proto, base::Time::Now());\n\n  service_-\u003eUpdateSecurityState(SB_THREAT_TYPE_PASSWORD_REUSE, web_contents());\n  ASSERT_TRUE(service_-\u003eui_manager()-\u003eIsUrlWhitelistedOrPendingForWebContents(\n      url, false, web_contents()-\u003eGetController().GetLastCommittedEntry(),\n      web_contents(), false, \u0026current_threat_type));\n  EXPECT_EQ(SB_THREAT_TYPE_PASSWORD_REUSE, current_threat_type);\n\n  service_-\u003eUpdateSecurityState(safe_browsing::SB_THREAT_TYPE_SAFE,\n                                web_contents());\n  current_threat_type \u003d SB_THREAT_TYPE_UNUSED;\n  service_-\u003eui_manager()-\u003eIsUrlWhitelistedOrPendingForWebContents(\n      url, false, web_contents()-\u003eGetController().GetLastCommittedEntry(),\n      web_contents(), false, \u0026current_threat_type);\n  EXPECT_EQ(SB_THREAT_TYPE_UNUSED, current_threat_type);\n  LoginReputationClientResponse verdict;\n  EXPECT_EQ(\n      LoginReputationClientResponse::SAFE,\n      service_-\u003eGetCachedVerdict(\n          url, LoginReputationClientRequest::PASSWORD_REUSE_EVENT, \u0026verdict));\n}",
      "parentUuid": "a34b2943_9cda82d8",
      "revId": "60e667c323436e7ef5c83b1b3115d090412a44f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}