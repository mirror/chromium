{
  "comments": [
    {
      "key": {
        "uuid": "d3e1763a_6b46afc5",
        "filename": "content/browser/frame_host/render_frame_host_impl.cc",
        "patchSetId": 14
      },
      "lineNbr": 4256,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-08-11T19:41:32Z",
      "side": 1,
      "message": "Would it be possible to add a unit test for this for a more complex hierarchy than what\u0027s in CSSVisibilityChanged?",
      "revId": "1f7c0b755d4635b37bb8d8b1180c69829aab3787",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "07b672fd_e2219036",
        "filename": "content/browser/frame_host/render_frame_host_impl.cc",
        "patchSetId": 14
      },
      "lineNbr": 4256,
      "author": {
        "id": 1126745
      },
      "writtenOn": "2017-08-16T17:04:23Z",
      "side": 1,
      "message": "Not quite sure where the right place for that test would be, but I added a (browser) test which should do the job in site_per_process_browsertest.cc.",
      "parentUuid": "d3e1763a_6b46afc5",
      "revId": "1f7c0b755d4635b37bb8d8b1180c69829aab3787",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "78ea28b0_ed270709",
        "filename": "content/browser/frame_host/render_frame_host_impl.cc",
        "patchSetId": 14
      },
      "lineNbr": 4261,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-08-11T19:41:32Z",
      "side": 1,
      "message": "why not std::queue?",
      "revId": "1f7c0b755d4635b37bb8d8b1180c69829aab3787",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "abd7a3ac_1610fe73",
        "filename": "content/browser/frame_host/render_frame_host_impl.cc",
        "patchSetId": 14
      },
      "lineNbr": 4261,
      "author": {
        "id": 1126745
      },
      "writtenOn": "2017-08-16T17:04:23Z",
      "side": 1,
      "message": "Thanks for the suggestion. Changed to using std::queue instead.",
      "parentUuid": "78ea28b0_ed270709",
      "revId": "1f7c0b755d4635b37bb8d8b1180c69829aab3787",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fa808228_0c3ad420",
        "filename": "content/browser/frame_host/render_frame_host_impl.cc",
        "patchSetId": 14
      },
      "lineNbr": 4268,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-08-11T19:41:32Z",
      "side": 1,
      "message": "Sanity check: this doesn\u0027t run the callback on pending/speculative RFHs in child FrameTreeNodes, if they exist.  Is that ok for the usage in this CL?  Would the visibility be set at commit time?  \n\nRegardless, it might be good to mention the behavior for pending/speculative/pending delete RFHs explicitly in the comment for ForEachImmediateLocalRoot().",
      "revId": "1f7c0b755d4635b37bb8d8b1180c69829aab3787",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "031ab013_64287622",
        "filename": "content/browser/frame_host/render_frame_host_impl.cc",
        "patchSetId": 14
      },
      "lineNbr": 4268,
      "author": {
        "id": 1126745
      },
      "writtenOn": "2017-08-16T17:04:23Z",
      "side": 1,
      "message": "Thanks for pointing this out!\n\nI discussed this with Lucas offline and initially we were worried that calling render_frame_host-GetView()-\u003eHide()/Show() might causes issues if frame is speculative. The issue we were concerned about was that maybe the call to Show/Hide (which will lead to calling SetVisibilityForChildViews on current_frame_host() for the node associated with the speculative frame) might make the frame tree of a nested OOPIF incorrectly hidden.\n\nHowever, I just noticed that |frame_connector_| for the view of the speculative frame is nullptr until we call CommitPending(). That being said, there should not be a risk of propagating the visibility down the frame tree through the speculative frame.\n\nI also added some comments that RenderFrameHostImpl::SetVisibitilityForChildViews should not be called on a speculative or pending frame.",
      "parentUuid": "fa808228_0c3ad420",
      "revId": "1f7c0b755d4635b37bb8d8b1180c69829aab3787",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f4ffc91a_83b58fa2",
        "filename": "content/browser/frame_host/render_frame_host_impl.cc",
        "patchSetId": 14
      },
      "lineNbr": 4268,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-08-17T15:12:15Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "031ab013_64287622",
      "revId": "1f7c0b755d4635b37bb8d8b1180c69829aab3787",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b4790798_08e23c26",
        "filename": "content/browser/frame_host/render_frame_host_impl.h",
        "patchSetId": 14
      },
      "lineNbr": 649,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-08-11T19:41:32Z",
      "side": 1,
      "message": "Add a \"TODO(ekaramad):\" for revisiting this?  I\u0027d also mention that we should try to move this API out of RFH.",
      "revId": "1f7c0b755d4635b37bb8d8b1180c69829aab3787",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3ca301de_2237f1db",
        "filename": "content/browser/frame_host/render_frame_host_impl.h",
        "patchSetId": 14
      },
      "lineNbr": 649,
      "author": {
        "id": 1126745
      },
      "writtenOn": "2017-08-16T17:04:23Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b4790798_08e23c26",
      "revId": "1f7c0b755d4635b37bb8d8b1180c69829aab3787",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a19dca4_36ff37bb",
        "filename": "content/browser/frame_host/render_frame_host_impl.h",
        "patchSetId": 14
      },
      "lineNbr": 650,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-08-11T19:41:32Z",
      "side": 1,
      "message": "nit: s/an/and/",
      "revId": "1f7c0b755d4635b37bb8d8b1180c69829aab3787",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ea69f202_edd73943",
        "filename": "content/browser/frame_host/render_frame_host_impl.h",
        "patchSetId": 14
      },
      "lineNbr": 650,
      "author": {
        "id": 1126745
      },
      "writtenOn": "2017-08-16T17:04:23Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5a19dca4_36ff37bb",
      "revId": "1f7c0b755d4635b37bb8d8b1180c69829aab3787",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "366e4e7e_e5d78688",
        "filename": "content/browser/frame_host/render_frame_host_impl.h",
        "patchSetId": 14
      },
      "lineNbr": 653,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-08-11T19:41:32Z",
      "side": 1,
      "message": "I found the comment a bit hard to follow.  It might help to include an example or ascii art diagram showing precisely what would be done.  For example, given A1(B1,A2(A3(B2(C1))),A4(A5),D(D2)), calling this on A1 would run the callback on B1, B2, and D. (right?)",
      "revId": "1f7c0b755d4635b37bb8d8b1180c69829aab3787",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a2a5359b_4f966cab",
        "filename": "content/browser/frame_host/render_frame_host_impl.h",
        "patchSetId": 14
      },
      "lineNbr": 654,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-08-11T19:41:32Z",
      "side": 1,
      "message": "I\u0027m not a big fan of the name, since there\u0027s some confusion between the local root for this frame and local roots for its descendants (and this means the latter), but I can\u0027t think of anything better.  I was thinking along the lines of ForEachImmediateLocalRootUnderThisFrame or dropping \"local root\" altogether and using something like ForEachImmediateCrossProcessDescendant, but not sure if that\u0027s any clearer than the original name (which is at least concise).  I\u0027m not too worried about this though, since the right way seems to make this API based on enumerating RWHVs anyway, as you note in the comment.",
      "revId": "1f7c0b755d4635b37bb8d8b1180c69829aab3787",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e610fd7e_59addac7",
        "filename": "content/browser/frame_host/render_frame_host_impl.h",
        "patchSetId": 14
      },
      "lineNbr": 654,
      "author": {
        "id": 1126745
      },
      "writtenOn": "2017-08-16T17:04:23Z",
      "side": 1,
      "message": "Yes, good point and I see the confusion. We basically look for frames under this frame which are local roots and there are no local roots in the path between them and this frame in the frame tree. I think expressing this in terms of RWHVs is simpler if we can first officially coin a term for RWHV tree (if not done already) and then something like ForEachChildView() should be articulate enough.",
      "parentUuid": "a2a5359b_4f966cab",
      "revId": "1f7c0b755d4635b37bb8d8b1180c69829aab3787",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "598043af_870e7183",
        "filename": "content/browser/site_per_process_browsertest.cc",
        "patchSetId": 14
      },
      "lineNbr": 7329,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-08-11T19:41:32Z",
      "side": 1,
      "message": "nit: there\u0027s only one nested cross-origin frame in the test, so should \"all other RWHs\" just be \"the RWH\"?",
      "revId": "1f7c0b755d4635b37bb8d8b1180c69829aab3787",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e4969578_f6d99e6f",
        "filename": "content/browser/site_per_process_browsertest.cc",
        "patchSetId": 14
      },
      "lineNbr": 7329,
      "author": {
        "id": 1126745
      },
      "writtenOn": "2017-08-16T17:04:23Z",
      "side": 1,
      "message": "Thanks for pointing this out. I think it might be better to actually have a bunch of nested frames so I modified the test to properly reflect the comment.",
      "parentUuid": "598043af_870e7183",
      "revId": "1f7c0b755d4635b37bb8d8b1180c69829aab3787",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "187f0c52_50735448",
        "filename": "content/browser/site_per_process_browsertest.cc",
        "patchSetId": 14
      },
      "lineNbr": 7329,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-08-17T15:12:15Z",
      "side": 1,
      "message": "Ack, the added coverage here is great - thanks!",
      "parentUuid": "e4969578_f6d99e6f",
      "revId": "1f7c0b755d4635b37bb8d8b1180c69829aab3787",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5bf822a2_8413f911",
        "filename": "content/browser/site_per_process_browsertest.cc",
        "patchSetId": 14
      },
      "lineNbr": 7329,
      "author": {
        "id": 1126745
      },
      "writtenOn": "2017-08-18T18:59:26Z",
      "side": 1,
      "message": "Thanks!",
      "parentUuid": "187f0c52_50735448",
      "revId": "1f7c0b755d4635b37bb8d8b1180c69829aab3787",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a776c229_24d78f88",
        "filename": "content/browser/web_contents/web_contents_impl.cc",
        "patchSetId": 14
      },
      "lineNbr": 1501,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-08-11T19:41:32Z",
      "side": 1,
      "message": "The old path dealt with interstitials explicitly and did not recurse down into child nodes, but the new path doesn\u0027t.  Is that a problem?",
      "revId": "1f7c0b755d4635b37bb8d8b1180c69829aab3787",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "329be050_fa79cf9d",
        "filename": "content/browser/web_contents/web_contents_impl.cc",
        "patchSetId": 14
      },
      "lineNbr": 1501,
      "author": {
        "id": 1126745
      },
      "writtenOn": "2017-08-16T17:04:23Z",
      "side": 1,
      "message": "According to the definition of GetRenderWidgetHostViewsInTree() we only return \"GetRenderWidgetHostView()\" for an interstitial page. In such a case line 1501 should be sufficient.\n\nAs for line 1508 I am wondering if we can have OOPIFs on interstitial pages (if not then it will be fine since there won\u0027t be any local roots). If we do then I need to avoid calling 1508 when ShowingInterstitialPage() \u003d\u003d true. But then I am wondering again why would we not want to update visibility of an OOPIF even though it is (theoretically) in an interstitial page.",
      "parentUuid": "a776c229_24d78f88",
      "revId": "1f7c0b755d4635b37bb8d8b1180c69829aab3787",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d33b2e6f_e3b9ed5a",
        "filename": "content/browser/web_contents/web_contents_impl.cc",
        "patchSetId": 14
      },
      "lineNbr": 1501,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-08-17T15:12:15Z",
      "side": 1,
      "message": "So, looking closer, when an interstitial is active, GetRenderWidgetHostView() returns the RWHV of the interstitial in https://cs.chromium.org/chromium/src/content/browser/frame_host/render_frame_host_manager.cc?sq\u003dpackage:chromium\u0026l\u003d136.  I don\u0027t think we can have OOPIFs on interstitials today, but the problem is that SetVisibilityForChildViews(true) would affect OOPIFs on the real page under the interstitial.  E.g., with a SafeBrowsing interstitial triggered by a subframe load, I think the main frame and other subframes stay active under the warning, and then this will change visibility for just the OOPIFs (but not the main frame), which seems weird.  So I\u0027d exclude line 1508.\n\nYou have a good point that if the user clicks through the warning, the OOPIFs will need to have correct visibility, but I guess this should be handled at clickthrough time, along with the main frame\u0027s visibility, for consistency.  I have no idea whether we do this correctly today :), but in any case we could explore this in a followup.",
      "parentUuid": "329be050_fa79cf9d",
      "revId": "1f7c0b755d4635b37bb8d8b1180c69829aab3787",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "01daca06_62a70872",
        "filename": "content/browser/web_contents/web_contents_impl.cc",
        "patchSetId": 14
      },
      "lineNbr": 1501,
      "author": {
        "id": 1126745
      },
      "writtenOn": "2017-08-18T18:59:26Z",
      "side": 1,
      "message": "Thanks for the detailed explanation. IIUC, this discussion clarifies that the new API added with this patch is not exactly equivalent to walking the (virtual) RWHV tree. I think if we truly implement walking down the RWHV tree (in a followup API), the reasoning around the issue here should become clearer. Supposedly this problem would not have existed if a RWHVBase::Show/Hide could call its child views::Show/Hide and we could drop the line 1508 altogether.",
      "parentUuid": "d33b2e6f_e3b9ed5a",
      "revId": "1f7c0b755d4635b37bb8d8b1180c69829aab3787",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "23e722ab_bf79bf63",
        "filename": "content/browser/web_contents/web_contents_impl.cc",
        "patchSetId": 14
      },
      "lineNbr": 5988,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-08-11T19:41:32Z",
      "side": 1,
      "message": "Would it make sense to have SetVisibilityForChildFrames on RenderFrameHostImpl, which we can call on the appropriate RFH from both WCI::WasShown/WasHidden and from CPFP, to avoid duplicating the code from CPFP here?",
      "revId": "1f7c0b755d4635b37bb8d8b1180c69829aab3787",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5151271c_ace9e653",
        "filename": "content/browser/web_contents/web_contents_impl.cc",
        "patchSetId": 14
      },
      "lineNbr": 5988,
      "author": {
        "id": 1126745
      },
      "writtenOn": "2017-08-16T17:04:23Z",
      "side": 1,
      "message": "I like the idea. It should be easier to follow this way.\n\nNow that being said (and done), the only usages of ForEachImmediateLocalRoot will be in RenderFrameHostImpl and the test I added now to verify its correctness. I am wondering if the method should stay public. For a while (until addressing 754726) it can serve as a placeholder for traversing the RWHV tree. On the other hand we have not introduced any usage for it yet except for the visibility. WDYT? (also if we make the method private we might as well drop the unit-test-like browser test for it).",
      "parentUuid": "23e722ab_bf79bf63",
      "revId": "1f7c0b755d4635b37bb8d8b1180c69829aab3787",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c593512c_44586b44",
        "filename": "content/browser/web_contents/web_contents_impl.cc",
        "patchSetId": 14
      },
      "lineNbr": 5988,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-08-17T15:12:15Z",
      "side": 1,
      "message": "Given that there\u0027s no public usage, and that we want to revisit it/remove it from RFHI anyway, perhaps we can keep it private and expose it publicly only if/when needed in the future?  I would keep the test you already have though, which is awesome and can be adapted to whatever API we later have for RWHV traversal.  We can still expose ForEachImmediateLocalRoot to the test with FRIEND_TEST_ALL_PREFIXES.",
      "parentUuid": "5151271c_ace9e653",
      "revId": "1f7c0b755d4635b37bb8d8b1180c69829aab3787",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4c41bf2f_e4f878c1",
        "filename": "content/browser/web_contents/web_contents_impl.cc",
        "patchSetId": 14
      },
      "lineNbr": 5988,
      "author": {
        "id": 1126745
      },
      "writtenOn": "2017-08-18T18:59:26Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "c593512c_44586b44",
      "revId": "1f7c0b755d4635b37bb8d8b1180c69829aab3787",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}