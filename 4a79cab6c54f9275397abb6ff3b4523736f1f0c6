{
  "comments": [
    {
      "key": {
        "uuid": "dc26f9de_1d660f6b",
        "filename": "third_party/WebKit/Source/bindings/core/v8/V8GCController.cpp",
        "patchSetId": 3
      },
      "lineNbr": 219,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2018-01-19T01:29:34Z",
      "side": 1,
      "message": "main thread \u003d\u003e main world",
      "revId": "4a79cab6c54f9275397abb6ff3b4523736f1f0c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e9dfc387_2b666539",
        "filename": "third_party/WebKit/Source/bindings/core/v8/V8GCController.cpp",
        "patchSetId": 3
      },
      "lineNbr": 219,
      "author": {
        "id": 1002405
      },
      "writtenOn": "2018-01-19T10:11:42Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "dc26f9de_1d660f6b",
      "revId": "4a79cab6c54f9275397abb6ff3b4523736f1f0c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "98cd9022_d47f6cce",
        "filename": "third_party/WebKit/Source/platform/bindings/DOMDataStore.h",
        "patchSetId": 3
      },
      "lineNbr": 146,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2018-01-19T01:29:34Z",
      "side": 1,
      "message": "Can we make DOMDataStore inherit from TraceWrapperBase (instead of creating manually dispatched TraceWrappers)?",
      "revId": "4a79cab6c54f9275397abb6ff3b4523736f1f0c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0c13ba4a_8a565ade",
        "filename": "third_party/WebKit/Source/platform/bindings/DOMDataStore.h",
        "patchSetId": 3
      },
      "lineNbr": 146,
      "author": {
        "id": 1002405
      },
      "writtenOn": "2018-01-19T10:00:15Z",
      "side": 1,
      "message": "If DOMDataStore inherits from TraceWrapperBase, then it gets its own mark bit, right? i.e. it becomes a real node in GC graph.\n\nMarking DOMDataStore would mark all wrappers, which will cause memory leaks (see my reply in the other comment).",
      "parentUuid": "98cd9022_d47f6cce",
      "revId": "4a79cab6c54f9275397abb6ff3b4523736f1f0c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f9053c3e_8d2e9cf7",
        "filename": "third_party/WebKit/Source/platform/bindings/DOMWrapperWorld.h",
        "patchSetId": 3
      },
      "lineNbr": 98,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2018-01-19T01:29:34Z",
      "side": 1,
      "message": "Instead of making this a static method, can we make DOMWrapperMap inherit from TraceWrapperBase and use TraceWrapperBase::TraceWrappers?\n\nScriptWrappable::TraceWrappers can iterate all wrapper maps and call visitor-\u003eTraceWrappers(wrapper_map).\n\nIf we do this, can we probably remove Visit(DOMWrapperMap\u003cScriptWrappable\u003e*, ScriptWrappable*)? (I\u0027m not fully convinced why we need a special Visit method for DOMWrapperMap.)",
      "revId": "4a79cab6c54f9275397abb6ff3b4523736f1f0c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b21804b9_b63cf717",
        "filename": "third_party/WebKit/Source/platform/bindings/DOMWrapperWorld.h",
        "patchSetId": 3
      },
      "lineNbr": 98,
      "author": {
        "id": 1002405
      },
      "writtenOn": "2018-01-19T10:00:15Z",
      "side": 1,
      "message": "visitor-\u003eTraceWrappers(wrapper_map) would put wrapper_map into marking deque.\nLater when we get the wrapper_map from the marking deque and process it, we will have to mark all wrappers in the map, which is not what we want.\n\nWe want to mark only the wrappers corresponding to this script wrappable.",
      "parentUuid": "f9053c3e_8d2e9cf7",
      "revId": "4a79cab6c54f9275397abb6ff3b4523736f1f0c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3939282b_8821037b",
        "filename": "third_party/WebKit/Source/platform/bindings/DOMWrapperWorld.h",
        "patchSetId": 3
      },
      "lineNbr": 98,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2018-01-19T12:42:35Z",
      "side": 1,
      "message": "I got the situation.\n\nThen would it be an option to write it like this?\n\nvoid ScriptWrappable::TraceWrappers(Visitor* visitor) {\n  for (auto\u0026 wrapper_map : AllWorldsInCurrentThread()) {\n    visitor-\u003eTraceWrappers(wrapper_map-\u003eDOMDataStore().Get());\n  }\n}\n\nMy point is that we won\u0027t want to add a special TraceWrappers() method every time we want to trace a not-GarbageCollected class.",
      "parentUuid": "b21804b9_b63cf717",
      "revId": "4a79cab6c54f9275397abb6ff3b4523736f1f0c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f3692b18_90e90d3b",
        "filename": "third_party/WebKit/Source/platform/bindings/DOMWrapperWorld.h",
        "patchSetId": 3
      },
      "lineNbr": 98,
      "author": {
        "id": 1002405
      },
      "writtenOn": "2018-01-19T12:57:59Z",
      "side": 1,
      "message": "Is the name \"TraceWrappers\" problematic? If so I can rename it to something different like \"DispatchTraceWrappers\".\n\nI would like to avoid ScriptWrappable knowing internals of DOMWrapperWorld, DOMDataStore, DOMWrapperMap. Without helper methods on these classes. The code is going to look like:\n\nvoid ScriptWrappable::TraceWrappers(Visitor* visitor) {\n  for (DOMWrapperWorld* world : AllWorldsInCurrentThread()) {\n    DOMDataStore\u0026 data_store \u003d world-\u003eDomDataStore();\n    if (data_store.ContainsWrapper(this))\n       visitor-\u003eTraceWrappers(\u0026data_store.wrapper_map().value(), this);\n  }\n}\n\nSo the ScriptWrappable is going to know that DOMWrapperMap is part of DOMDataStore, which is part of DOMWrapperWorld.",
      "parentUuid": "3939282b_8821037b",
      "revId": "4a79cab6c54f9275397abb6ff3b4523736f1f0c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "80bafaee_41390e2d",
        "filename": "third_party/WebKit/Source/platform/bindings/DOMWrapperWorld.h",
        "patchSetId": 3
      },
      "lineNbr": 98,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2018-01-19T13:07:41Z",
      "side": 1,
      "message": "Then can we add a helper like DOMWrapperWorld::GetWrapper() so that ScriptWrappable can get a wrapper without knowing DOMDataStore etc?\n\nWe\u0027re already using the pattern in some places.\n\nvoid TraceWrappers(Visitor* visitor) {\n  visitor-\u003eTraceWrappers(GetSomePointer());\n}",
      "parentUuid": "f3692b18_90e90d3b",
      "revId": "4a79cab6c54f9275397abb6ff3b4523736f1f0c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "81169fd2_ed5f5676",
        "filename": "third_party/WebKit/Source/platform/bindings/DOMWrapperWorld.h",
        "patchSetId": 3
      },
      "lineNbr": 98,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2018-01-19T13:26:44Z",
      "side": 1,
      "message": "TraceWrappers should ideally always delegate to the component owning the pointers. In this case that is the worlds/storage.\n\nWe should not reach into other classes objects. (We sometimes did that because it was not possible for other reasons back then but we should really try to keep abstractions as clean as possible.)",
      "parentUuid": "80bafaee_41390e2d",
      "revId": "4a79cab6c54f9275397abb6ff3b4523736f1f0c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1f45d296_43d816f4",
        "filename": "third_party/WebKit/Source/platform/bindings/DOMWrapperWorld.h",
        "patchSetId": 3
      },
      "lineNbr": 98,
      "author": {
        "id": 1002405
      },
      "writtenOn": "2018-01-19T13:42:32Z",
      "side": 1,
      "message": "1) DOMWrapperWorld::GetWrapper() is more generic than TraceWrappers (DispatchTraceWrappes). So we will have to support cases when GetWrapper is called by other components and properly manage lifetime of the returned Wrapper.\n2) More importantly, what would be the type of DOMWrapperWorld::GetWrapper()? It is not v8::PersistentBase and not TraceWrapperV8Reference. It is the value part of v8::GlobalValueMap\u003cKeyType*, v8::Object, PersistentValueMapTraits\u003e. I think this where where all this complexity is coming from.\n\nIn any case, I still don\u0027t understand the problem with the current approach in the CL?\nDOMWrapperMap, DOMDataStore, and DOMWrapperWorld are not GarbageCollected, but they are already implicitly participating in tracing via MarkWrappersInAllWorlds, MarkWrapper methods.\nThis CL is only making the participation explicit, which I think is good.",
      "parentUuid": "81169fd2_ed5f5676",
      "revId": "4a79cab6c54f9275397abb6ff3b4523736f1f0c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e7e07b95_e7d28316",
        "filename": "third_party/WebKit/Source/platform/bindings/ScriptWrappable.cpp",
        "patchSetId": 3
      },
      "lineNbr": 44,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2018-01-18T17:40:53Z",
      "side": 1,
      "message": "I would be fine with landing this one already. The GC plugin is on the way (needs clang roll) and I already fixed all the issues it found.\n\nKentaro, wdyt?",
      "range": {
        "startLine": 44,
        "startChar": 11,
        "endLine": 44,
        "endChar": 24
      },
      "revId": "4a79cab6c54f9275397abb6ff3b4523736f1f0c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "00880af5_2d55a96d",
        "filename": "third_party/WebKit/Source/platform/bindings/ScriptWrappable.cpp",
        "patchSetId": 3
      },
      "lineNbr": 44,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2018-01-19T01:29:34Z",
      "side": 1,
      "message": "Sounds reasonable since it will take a few weeks to roll the clang plugin.\n\nJust help me understand: Before Ulan started this refactoring and Michael fixed the parent class tracing, how was main_world_wrapper_ traced?",
      "parentUuid": "e7e07b95_e7d28316",
      "range": {
        "startLine": 44,
        "startChar": 11,
        "endLine": 44,
        "endChar": 24
      },
      "revId": "4a79cab6c54f9275397abb6ff3b4523736f1f0c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ccb9a583_320ffbc2",
        "filename": "third_party/WebKit/Source/platform/bindings/ScriptWrappable.cpp",
        "patchSetId": 3
      },
      "lineNbr": 44,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2018-01-19T08:50:09Z",
      "side": 1,
      "message": "It was traced through ScriptWrappableVisitor::MarkWrappersInAllWorlds [1]. This one dispatched to the DOMWrapperWorld [2] which then also marked then passed the main world wrapper back to the visitor and passed the other ones directly to V8.\n\nThe problem here was that (a) ScriptWrappableVisitor hat internal knowledge on ScriptWrappable., (b) the DOMWrapper world bypassed the visitor for all but the main world. \n\nIn the new approach, ScriptWrappable is no different then other objects which allows us to remove a bunch of special casing.\n\n\n[1] https://cs.chromium.org/chromium/src/third_party/WebKit/Source/platform/bindings/ScriptWrappableVisitor.cpp?q\u003dMarkWrappersInAllWorlds\u0026l\u003d219\n[2] https://cs.chromium.org/chromium/src/third_party/WebKit/Source/platform/bindings/DOMWrapperWorld.cpp?l\u003d119",
      "parentUuid": "00880af5_2d55a96d",
      "range": {
        "startLine": 44,
        "startChar": 11,
        "endLine": 44,
        "endChar": 24
      },
      "revId": "4a79cab6c54f9275397abb6ff3b4523736f1f0c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "83c6cb80_218ff8e9",
        "filename": "third_party/WebKit/Source/platform/bindings/ScriptWrappable.cpp",
        "patchSetId": 3
      },
      "lineNbr": 44,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2018-01-19T09:09:49Z",
      "side": 1,
      "message": "Ah, thanks! Makes sense.",
      "parentUuid": "ccb9a583_320ffbc2",
      "range": {
        "startLine": 44,
        "startChar": 11,
        "endLine": 44,
        "endChar": 24
      },
      "revId": "4a79cab6c54f9275397abb6ff3b4523736f1f0c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3cd35ca0_4637a243",
        "filename": "third_party/WebKit/Source/platform/heap/TraceTraits.h",
        "patchSetId": 3
      },
      "lineNbr": 111,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2018-01-18T17:40:53Z",
      "side": 1,
      "message": "This should probably just be TraceWrappers but then it does not fit nicely into AdjustAnd*Mark*. Lets see what this looks like when we apply the same approach to Oilpan.",
      "range": {
        "startLine": 111,
        "startChar": 14,
        "endLine": 111,
        "endChar": 32
      },
      "revId": "4a79cab6c54f9275397abb6ff3b4523736f1f0c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}