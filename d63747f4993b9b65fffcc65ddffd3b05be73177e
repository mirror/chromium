{
  "comments": [
    {
      "key": {
        "uuid": "9d023add_14e42b6c",
        "filename": "content/browser/browser_main_loop.cc",
        "patchSetId": 52
      },
      "lineNbr": 1730,
      "author": {
        "id": 1148065
      },
      "writtenOn": "2017-10-05T22:56:18Z",
      "side": 1,
      "message": "Does this mean we startup tracing starts later, i.e. we get less data?",
      "revId": "d63747f4993b9b65fffcc65ddffd3b05be73177e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c22a3ecb_4c30aa44",
        "filename": "content/browser/browser_main_loop.cc",
        "patchSetId": 52
      },
      "lineNbr": 1730,
      "author": {
        "id": 1112474
      },
      "writtenOn": "2017-10-06T18:02:48Z",
      "side": 1,
      "message": "For startup tracing, we start logging chrome trace events locally earlier:\n\nhttps://cs.chromium.org/chromium/src/content/app/content_main_runner.cc?l\u003d556\n\nThat is not changed in this CL. What is changed is that collecting traces from other sources, e.g. ETW, Chrome OS system tracing, BattOr, start a little bit later because now they need Mojo to communicate with the tracing controller. I think that should be OK; wdyt?",
      "parentUuid": "9d023add_14e42b6c",
      "revId": "d63747f4993b9b65fffcc65ddffd3b05be73177e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "862a34b8_c38ef213",
        "filename": "content/browser/tracing/arc_tracing_agent_impl.cc",
        "patchSetId": 52
      },
      "lineNbr": 159,
      "author": {
        "id": 1148065
      },
      "writtenOn": "2017-10-05T22:56:18Z",
      "side": 1,
      "message": "Is it possible that ArcTracingAgentImpl::StopAndFlush or ArcTracingAgentImpl::OnArcTracingStopped is called at destruction, when the UI thread\u0027s message loop will not run after joining the IO thread, meaning this callback might sit on the message loop\u0027s queue and never run? or equivalently, this gets deleted before the callback is run?\nIf so, should we pick things up in the destructor?",
      "revId": "d63747f4993b9b65fffcc65ddffd3b05be73177e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "21b217ee_793e508d",
        "filename": "content/browser/tracing/arc_tracing_agent_impl.cc",
        "patchSetId": 52
      },
      "lineNbr": 159,
      "author": {
        "id": 1112474
      },
      "writtenOn": "2017-10-06T18:02:48Z",
      "side": 1,
      "message": "I don\u0027t think we call StopTracing (and so StopAndFlush) at destruction.",
      "parentUuid": "862a34b8_c38ef213",
      "revId": "d63747f4993b9b65fffcc65ddffd3b05be73177e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "af858625_62342e5b",
        "filename": "content/browser/tracing/arc_tracing_agent_impl.cc",
        "patchSetId": 52
      },
      "lineNbr": 159,
      "author": {
        "id": 1148065
      },
      "writtenOn": "2017-10-06T18:18:19Z",
      "side": 1,
      "message": "However, couldn\u0027t it still be true that OnTracingReaderStopped doesn\u0027t have a chance to run?\nI\u0027m particularly thinking of cases where we may want to trace shutdown. It sounds like if this doesn\u0027t run, then we would not record the data?",
      "parentUuid": "21b217ee_793e508d",
      "revId": "d63747f4993b9b65fffcc65ddffd3b05be73177e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "37c7e885_83a35faa",
        "filename": "content/browser/tracing/arc_tracing_agent_impl.cc",
        "patchSetId": 52
      },
      "lineNbr": 159,
      "author": {
        "id": 1112474
      },
      "writtenOn": "2017-10-06T19:34:50Z",
      "side": 1,
      "message": "Good point about tracing shutdown. I forgot about that. But note that shutdown tracing is only about chrome trace events. Shutdown trace file is created here:\n\nhttps://cs.chromium.org/chromium/src/content/browser/browser_shutdown_profile_dumper.cc?l\u003d40\n\nIt shortcuts the tracing controller and just talks to the local TraceLog in the browser process (TraceLog is the thing that collects chrome trace events in a singleton buffer). So, there will be no ARC, ETW, or BattOr traces in the shutdown trace.",
      "parentUuid": "af858625_62342e5b",
      "revId": "d63747f4993b9b65fffcc65ddffd3b05be73177e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "92682c34_bb5330ea",
        "filename": "content/browser/tracing/arc_tracing_agent_impl.cc",
        "patchSetId": 52
      },
      "lineNbr": 171,
      "author": {
        "id": 1148065
      },
      "writtenOn": "2017-10-05T22:56:18Z",
      "side": 1,
      "message": "Can we add a DCHECK that fd_watcher_ is null? Otherwise here we would destroy it on the wrong thread, which I believe would do the wrong thing (TLS lookups)",
      "revId": "d63747f4993b9b65fffcc65ddffd3b05be73177e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a7c9b4f0_31dec4ca",
        "filename": "content/browser/tracing/arc_tracing_agent_impl.cc",
        "patchSetId": 52
      },
      "lineNbr": 171,
      "author": {
        "id": 1112474
      },
      "writtenOn": "2017-10-06T18:02:48Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "92682c34_bb5330ea",
      "revId": "d63747f4993b9b65fffcc65ddffd3b05be73177e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cc10662a_67e8712c",
        "filename": "content/browser/tracing/arc_tracing_agent_impl.cc",
        "patchSetId": 52
      },
      "lineNbr": 231,
      "author": {
        "id": 1148065
      },
      "writtenOn": "2017-10-05T22:56:18Z",
      "side": 1,
      "message": "Did you mean BrowserThread::UI?",
      "revId": "d63747f4993b9b65fffcc65ddffd3b05be73177e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6a0a71db_85b0d59a",
        "filename": "content/browser/tracing/arc_tracing_agent_impl.cc",
        "patchSetId": 52
      },
      "lineNbr": 231,
      "author": {
        "id": 1112474
      },
      "writtenOn": "2017-10-06T18:02:48Z",
      "side": 1,
      "message": "I did not change this part but it looks like the original author meant BrowserThread::UI as you suggested. It\u0027s strange that this does not cause crashes. Maybe because DCHECKs are turned off in production and this part is not covered by tests to cause crash in CQ bots... Done.",
      "parentUuid": "cc10662a_67e8712c",
      "revId": "d63747f4993b9b65fffcc65ddffd3b05be73177e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5f335dda_c5aa16cf",
        "filename": "content/browser/tracing/arc_tracing_agent_impl.h",
        "patchSetId": 52
      },
      "lineNbr": 43,
      "author": {
        "id": 1148065
      },
      "writtenOn": "2017-10-05T22:56:18Z",
      "side": 1,
      "message": "Why not simply making the destructor public?\nIt is publicly accessible anyway, from the base class.",
      "revId": "d63747f4993b9b65fffcc65ddffd3b05be73177e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bfd805c6_a44e5873",
        "filename": "content/browser/tracing/arc_tracing_agent_impl.h",
        "patchSetId": 52
      },
      "lineNbr": 43,
      "author": {
        "id": 1112474
      },
      "writtenOn": "2017-10-06T18:02:48Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5f335dda_c5aa16cf",
      "revId": "d63747f4993b9b65fffcc65ddffd3b05be73177e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "372eeea3_4fe5f472",
        "filename": "content/browser/tracing/arc_tracing_agent_impl.h",
        "patchSetId": 52
      },
      "lineNbr": 62,
      "author": {
        "id": 1148065
      },
      "writtenOn": "2017-10-05T22:56:18Z",
      "side": 1,
      "message": "I have to say, using cc here is odd!\nIt\u0027s not a problem, since content already depends on cc/.",
      "revId": "d63747f4993b9b65fffcc65ddffd3b05be73177e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e1e76a29_b59e7cfa",
        "filename": "content/browser/tracing/arc_tracing_agent_impl.h",
        "patchSetId": 52
      },
      "lineNbr": 62,
      "author": {
        "id": 1112474
      },
      "writtenOn": "2017-10-06T18:02:48Z",
      "side": 1,
      "message": "Good point. Looks like //base is a better place for defining the RingBuffer. However, note that this existed before:\n\nhttps://cs.chromium.org/chromium/src/content/public/browser/arc_tracing_agent.cc?l\u003d121\n\nChanging this will not be in the scope of this CL. I would be happy to move RingBuffer from //cc/base to //base in a separate CL if you think that makes sense.",
      "parentUuid": "372eeea3_4fe5f472",
      "revId": "d63747f4993b9b65fffcc65ddffd3b05be73177e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "79dab6fa_a71fee00",
        "filename": "content/browser/tracing/arc_tracing_agent_impl.h",
        "patchSetId": 52
      },
      "lineNbr": 62,
      "author": {
        "id": 1148065
      },
      "writtenOn": "2017-10-06T18:18:19Z",
      "side": 1,
      "message": "SG, thanks!",
      "parentUuid": "e1e76a29_b59e7cfa",
      "revId": "d63747f4993b9b65fffcc65ddffd3b05be73177e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c8f4f68a_dd688f01",
        "filename": "content/browser/tracing/arc_tracing_agent_impl.h",
        "patchSetId": 52
      },
      "lineNbr": 95,
      "author": {
        "id": 1148065
      },
      "writtenOn": "2017-10-05T22:56:18Z",
      "side": 1,
      "message": "I don\u0027t understand the purpose of ArcTracingReader\u0027s weak_ptr_factory_. It is never explicitly invalidated, so it is only invalidated when deleted, according to this, on the UI thread after other threads are stopped. Since it is used to post tasks onto the IO thread, if the above is true, it serves no purpose (will never cancel tasks). If the above is not true, then it is unsafe.\n\nAs is, it is more confusing than anything. I think we should make it explicit that ArcTracingReader must outlive the IO thread, and then use Unretained when posting tasks, which is safe then.",
      "revId": "d63747f4993b9b65fffcc65ddffd3b05be73177e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5eed55cd_44b79ae7",
        "filename": "content/browser/tracing/arc_tracing_agent_impl.h",
        "patchSetId": 52
      },
      "lineNbr": 95,
      "author": {
        "id": 1112474
      },
      "writtenOn": "2017-10-06T18:02:48Z",
      "side": 1,
      "message": "Again, these all existed before in content/public/browser/arc_tracing_agent.{cc,h}. I feel safer if I don\u0027t make this change bigger than necessary and do this in a separate CL if you agree?",
      "parentUuid": "c8f4f68a_dd688f01",
      "revId": "d63747f4993b9b65fffcc65ddffd3b05be73177e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b775fb52_de54f494",
        "filename": "content/browser/tracing/arc_tracing_agent_impl.h",
        "patchSetId": 52
      },
      "lineNbr": 95,
      "author": {
        "id": 1148065
      },
      "writtenOn": "2017-10-06T18:18:19Z",
      "side": 1,
      "message": "Ok",
      "parentUuid": "5eed55cd_44b79ae7",
      "revId": "d63747f4993b9b65fffcc65ddffd3b05be73177e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "606b2409_2700d57f",
        "filename": "content/browser/tracing/etw_tracing_agent_win.cc",
        "patchSetId": 52
      },
      "lineNbr": 274,
      "author": {
        "id": 1148065
      },
      "writtenOn": "2017-10-05T22:56:18Z",
      "side": 1,
      "message": "What makes Unretained safe? Could you document?",
      "revId": "d63747f4993b9b65fffcc65ddffd3b05be73177e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7866684e_be7f7e75",
        "filename": "content/browser/tracing/etw_tracing_agent_win.cc",
        "patchSetId": 52
      },
      "lineNbr": 274,
      "author": {
        "id": 1112474
      },
      "writtenOn": "2017-10-06T18:02:48Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "606b2409_2700d57f",
      "revId": "d63747f4993b9b65fffcc65ddffd3b05be73177e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c19cdf05_72466c53",
        "filename": "content/browser/tracing/power_tracing_agent.cc",
        "patchSetId": 52
      },
      "lineNbr": 37,
      "author": {
        "id": 1148065
      },
      "writtenOn": "2017-10-05T22:56:18Z",
      "side": 1,
      "message": "Is this called on the UI thread? Could you add a DCHECK, that would clarify things, in particular relative to lifetime.\n\nIs this class guaranteed to outlive the IO thread? If not the Unretained used in this file are not safe.",
      "revId": "d63747f4993b9b65fffcc65ddffd3b05be73177e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4347cd9b_7408a7d9",
        "filename": "content/browser/tracing/power_tracing_agent.cc",
        "patchSetId": 52
      },
      "lineNbr": 37,
      "author": {
        "id": 1112474
      },
      "writtenOn": "2017-10-06T18:02:48Z",
      "side": 1,
      "message": "DCHECK is added.\n\nThis is owned by TracingControllerImpl which is owned by BrowserMainLoop. So, I think it is guaranteed to outlive the IO thread.",
      "parentUuid": "c19cdf05_72466c53",
      "revId": "d63747f4993b9b65fffcc65ddffd3b05be73177e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c4d96e06_9d77f157",
        "filename": "content/browser/tracing/power_tracing_agent.cc",
        "patchSetId": 52
      },
      "lineNbr": 38,
      "author": {
        "id": 1148065
      },
      "writtenOn": "2017-10-05T22:56:18Z",
      "side": 1,
      "message": "nit: typo Connecto-\u003eConnect",
      "revId": "d63747f4993b9b65fffcc65ddffd3b05be73177e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d384ea77_88dc2900",
        "filename": "content/browser/tracing/power_tracing_agent.cc",
        "patchSetId": 52
      },
      "lineNbr": 38,
      "author": {
        "id": 1112474
      },
      "writtenOn": "2017-10-06T18:02:48Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c4d96e06_9d77f157",
      "revId": "d63747f4993b9b65fffcc65ddffd3b05be73177e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "eb963091_672baa85",
        "filename": "content/browser/tracing/power_tracing_agent.cc",
        "patchSetId": 52
      },
      "lineNbr": 111,
      "author": {
        "id": 1148065
      },
      "writtenOn": "2017-10-05T22:56:18Z",
      "side": 1,
      "message": "I assume this function is called on the UI thread (?), or at least not the IO thread. This makes reading battor_agent_ a data race, since it is written on the IO thread. Should this test be moved to StopAndFlushOnIOThread?",
      "revId": "d63747f4993b9b65fffcc65ddffd3b05be73177e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a85111aa_ca7a86fa",
        "filename": "content/browser/tracing/power_tracing_agent.cc",
        "patchSetId": 52
      },
      "lineNbr": 111,
      "author": {
        "id": 1112474
      },
      "writtenOn": "2017-10-06T18:02:48Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "eb963091_672baa85",
      "revId": "d63747f4993b9b65fffcc65ddffd3b05be73177e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e42e92be_e6feafa0",
        "filename": "content/browser/tracing/power_tracing_agent.cc",
        "patchSetId": 52
      },
      "lineNbr": 132,
      "author": {
        "id": 1148065
      },
      "writtenOn": "2017-10-05T22:56:18Z",
      "side": 1,
      "message": "What guarantees safety wrt access to recorder_? It is written on both the UI (?) thread in StopAndFlush and here on the IO thread. In particular, is it possible that StopAndFlush is called again before OnStopTracingComplete is done running, in which case we\u0027d have a data race. Noting that \"done running\" from the pov of the UI thread is not a well-defined condition without synchronization.\n\nMaybe it would make sense to pass the recorder to StopAndFlushOnIOThread and set recorder_ there?",
      "revId": "d63747f4993b9b65fffcc65ddffd3b05be73177e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b69b6026_8f15478e",
        "filename": "content/browser/tracing/power_tracing_agent.cc",
        "patchSetId": 52
      },
      "lineNbr": 132,
      "author": {
        "id": 1112474
      },
      "writtenOn": "2017-10-06T18:02:48Z",
      "side": 1,
      "message": "Done.\n\nNote: the \"recorder_.reset()\" line in OnStopTracingComplete will post a task to the UI thread (guaranteed by mojo, because the recorder interface is bound on the UI thread) to tell the coordinator that tracing is stopped and the coordinator will not start another tracing before that. But passing the recorder to the IO thread makes things less confusing.",
      "parentUuid": "e42e92be_e6feafa0",
      "revId": "d63747f4993b9b65fffcc65ddffd3b05be73177e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f80f69cc_83f3ab7f",
        "filename": "content/browser/tracing/power_tracing_agent.cc",
        "patchSetId": 52
      },
      "lineNbr": 140,
      "author": {
        "id": 1148065
      },
      "writtenOn": "2017-10-05T22:56:18Z",
      "side": 1,
      "message": "Ditto, reading battor_agent_ here is a data race (I assume we\u0027re not on the IO thread).",
      "revId": "d63747f4993b9b65fffcc65ddffd3b05be73177e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d2ee5dbf_e832d033",
        "filename": "content/browser/tracing/power_tracing_agent.cc",
        "patchSetId": 52
      },
      "lineNbr": 140,
      "author": {
        "id": 1112474
      },
      "writtenOn": "2017-10-06T18:02:48Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f80f69cc_83f3ab7f",
      "revId": "d63747f4993b9b65fffcc65ddffd3b05be73177e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}