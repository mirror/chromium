{
  "comments": [
    {
      "key": {
        "uuid": "f80bd400_caa3c494",
        "filename": "third_party/WebKit/Source/bindings/core/v8/IDLTypeTraits.h",
        "patchSetId": 1
      },
      "lineNbr": 20,
      "author": {
        "id": 1002507
      },
      "writtenOn": "2018-01-10T07:57:24Z",
      "side": 1,
      "message": "As we\u0027re going to move these helpers into platform/wtf/TypeTraits.h, I\u0027m fine with this name.  However, just FYI, I don\u0027t want to introduce this short general name to the global \"blink\" namespace just in order for bindings.",
      "range": {
        "startLine": 20,
        "startChar": 7,
        "endLine": 20,
        "endChar": 16
      },
      "revId": "7939f0545aee02d7937e2bf2ec087accddc2b560",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "991bcfaa_79ea9910",
        "filename": "third_party/WebKit/Source/bindings/core/v8/IDLTypeTraits.h",
        "patchSetId": 1
      },
      "lineNbr": 48,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2018-01-10T02:20:26Z",
      "side": 1,
      "message": "This looks like a tricky way to recognize the existence of a tracing method.\n\nCan we use WTF::IsTraceable?\n\nhttps://cs.chromium.org/chromium/src/third_party/WebKit/Source/platform/wtf/TypeTraits.h?type\u003dcs\u0026q\u003dIsTraceable\u0026sq\u003dpackage:chromium\u0026l\u003d135",
      "revId": "7939f0545aee02d7937e2bf2ec087accddc2b560",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d16a40cb_c9d52416",
        "filename": "third_party/WebKit/Source/bindings/core/v8/IDLTypeTraits.h",
        "patchSetId": 1
      },
      "lineNbr": 48,
      "author": {
        "id": 1111977
      },
      "writtenOn": "2018-01-10T09:05:36Z",
      "side": 1,
      "message": "The problem with WTF::IsTraceable is that it basically checks for the existence of a Trace() method. That\u0027s true for types such as Vector, so WrapInVectorType breaks with nested types:\n\n    IDLSequence\u003cIDLSequence\u003cIDLUSVString\u003e\u003e\n\nends up becoming HeapVector\u003cVector\u003cString\u003e\u003e rather than Vector\u003cVector\u003cString\u003e\u003e",
      "parentUuid": "991bcfaa_79ea9910",
      "revId": "7939f0545aee02d7937e2bf2ec087accddc2b560",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b0e502e0_335a3d40",
        "filename": "third_party/WebKit/Source/bindings/core/v8/IDLTypeTraits.h",
        "patchSetId": 1
      },
      "lineNbr": 48,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2018-01-10T09:24:25Z",
      "side": 1,
      "message": "I guess it is not expected that WTF::IsTraceable returns true for Vector\u003cString\u003e because it is not traceable...\n\nWould it be possible to fix that issue (bonus points if you fix HashTable etc as well)?",
      "parentUuid": "d16a40cb_c9d52416",
      "revId": "7939f0545aee02d7937e2bf2ec087accddc2b560",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "206aeb07_d372dda3",
        "filename": "third_party/WebKit/Source/bindings/core/v8/IDLTypeTraits.h",
        "patchSetId": 1
      },
      "lineNbr": 55,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2018-01-10T02:20:26Z",
      "side": 1,
      "message": "These structs make sense but we won\u0027t need to limit the usage to IDL types.\n\nWould it make more sense to move the structs to e.g., platform/wtf/TypeTraits?",
      "revId": "7939f0545aee02d7937e2bf2ec087accddc2b560",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bba9abf5_64971b16",
        "filename": "third_party/WebKit/Source/bindings/core/v8/IDLTypeTraits.h",
        "patchSetId": 1
      },
      "lineNbr": 55,
      "author": {
        "id": 1111977
      },
      "writtenOn": "2018-01-10T09:05:36Z",
      "side": 1,
      "message": "Wouldn\u0027t that make wtf/ depend on bindings/?",
      "parentUuid": "206aeb07_d372dda3",
      "revId": "7939f0545aee02d7937e2bf2ec087accddc2b560",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "88f2fcb1_e22dc333",
        "filename": "third_party/WebKit/Source/bindings/core/v8/IDLTypeTraits.h",
        "patchSetId": 1
      },
      "lineNbr": 55,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2018-01-10T09:24:25Z",
      "side": 1,
      "message": "Ah, you\u0027re right. Let\u0027s keep the struct traits in bindings/.",
      "parentUuid": "bba9abf5_64971b16",
      "revId": "7939f0545aee02d7937e2bf2ec087accddc2b560",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c4cbc012_b022767a",
        "filename": "third_party/WebKit/Source/bindings/core/v8/IDLTypeTraits.h",
        "patchSetId": 1
      },
      "lineNbr": 55,
      "author": {
        "id": 1002507
      },
      "writtenOn": "2018-01-10T09:37:06Z",
      "side": 1,
      "message": "Can we write most of these utilities in platform/wtf/TypeTraits.h?\nThen, we can use it as\n\n    typename WrapInVectorType\u003cNativeValueTraits\u003cIDLType\u003e::ImplType\u003e::type\n\nI think it\u0027s good to have the following utilities in platform/wtf/TypeTraits.h.\n\n    T \u003d\u003e Member\u003cT\u003e or T itself\n    T \u003d\u003e HeapVector\u003cMember\u003cT\u003e\u003e or Vector\u003cT\u003e\n    T1, T2 \u003d\u003e HeapVector\u003cstd::pair\u003cT1, T2\u003e\u003e or Vector\u003cstd::pair\u003cT1, T2\u003e\u003e with optionally Member\u003cT\u003e.",
      "parentUuid": "88f2fcb1_e22dc333",
      "revId": "7939f0545aee02d7937e2bf2ec087accddc2b560",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eaa8a507_e3cd8ed7",
        "filename": "third_party/WebKit/Source/bindings/core/v8/IDLTypeTraits.h",
        "patchSetId": 1
      },
      "lineNbr": 55,
      "author": {
        "id": 1002507
      },
      "writtenOn": "2018-01-10T09:39:13Z",
      "side": 1,
      "message": "Just FYI, I\u0027m fine with platform/heap/TypeTraits.h if things depend on platform/heap/.  My point is that most of these utilities should be Oilpan-things.",
      "parentUuid": "c4cbc012_b022767a",
      "revId": "7939f0545aee02d7937e2bf2ec087accddc2b560",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "08b03434_5f97a25c",
        "filename": "third_party/WebKit/Source/bindings/core/v8/IDLTypes.h",
        "patchSetId": 1
      },
      "lineNbr": 68,
      "author": {
        "id": 1002507
      },
      "writtenOn": "2018-01-10T07:57:24Z",
      "side": 1,
      "message": "nit: What about writing this as follows?\n\n    using ImplType \u003d typename VectorOfPairOf\u003cString, Value\u003e::type;\n\nor PairVectorOf for example.  It seems unfortunate that we ends to expose AddMember and std::conditional, etc.  For example, HeapHashMap\u003cKey, Value\u003e automatically traces Key and Value as needed.  So, I think we can define the similar data structure as VectorOfPairOf\u003cString, Value\u003e::type.\n\nWe might want to rename WrapInVectorType to typename VectorOf\u003cT\u003e::type.",
      "revId": "7939f0545aee02d7937e2bf2ec087accddc2b560",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}