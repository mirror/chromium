{
  "comments": [
    {
      "key": {
        "uuid": "4b9ad008_d76949a2",
        "filename": "content/gpu/gpu_sandbox_hook_linux.cc",
        "patchSetId": 5
      },
      "lineNbr": 278,
      "author": {
        "id": 1196204
      },
      "writtenOn": "2018-01-11T07:04:02Z",
      "side": 0,
      "message": "This condition is not tested anymore in the new code, meaning vaapi support will be enabled regardless of the values of options.accelerated_video_encode_enabled and options.accelerated_video_decode_enabled. Previously the fact that the libraries have not been dlopened would make libva and vaapi_wrapper fail at init time. Now this is not the case anymore. Could you find a way to properly handle these flags again?",
      "revId": "5f4ce8d92827e65b4049af367de043f1f6b02c3d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c0f427f1_5e20e417",
        "filename": "content/gpu/gpu_sandbox_hook_linux.cc",
        "patchSetId": 5
      },
      "lineNbr": 278,
      "author": {
        "id": 1001815
      },
      "writtenOn": "2018-01-11T19:24:33Z",
      "side": 0,
      "message": "There\u0027s no need to test within vaapi_wrapper for these flags.  That\u0027s another advantage of removing this code letting it be done only when va-api is actually exercised. gpu_video_*_accelerator_host will use these flags and a vda/vea will be created only when the flags allow it.",
      "parentUuid": "4b9ad008_d76949a2",
      "revId": "5f4ce8d92827e65b4049af367de043f1f6b02c3d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "067fb44e_9221e0bb",
        "filename": "content/gpu/gpu_sandbox_hook_linux.cc",
        "patchSetId": 5
      },
      "lineNbr": 278,
      "author": {
        "id": 1196204
      },
      "writtenOn": "2018-01-12T02:51:43Z",
      "side": 0,
      "message": "Can you point me to where this check is done in e.g. gpu_video_decode_accelerator_host? I cannot find any relevant code after a quick look.",
      "parentUuid": "c0f427f1_5e20e417",
      "revId": "5f4ce8d92827e65b4049af367de043f1f6b02c3d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4b5b5e51_c66c7cfe",
        "filename": "content/gpu/gpu_sandbox_hook_linux.cc",
        "patchSetId": 5
      },
      "lineNbr": 278,
      "author": {
        "id": 1001815
      },
      "writtenOn": "2018-01-12T20:36:41Z",
      "side": 0,
      "message": "Ah, it is gpu_video_decoder_factory.cc:127 where gpu_preferences contains enable/disable of h/w decoder. Then gpu_utils.cc:57 handles the flags.  Not long ago an overhauling of the flags landed when most of the checks were standardized.  I am not too familiar with the newest code but I understand it as a natural evolution from when this didn\u0027t exist and it was handled in a similar way.  \n\nAs I am looking into this code again there are other possible optimizations in the sandbox code but I would prefer to make those changes on future patches if you agree.  \n\nFWIW, I also tested that scenario and s/w decoder kicks in as usual. (toggling the flags will force a UI restart).",
      "parentUuid": "067fb44e_9221e0bb",
      "revId": "5f4ce8d92827e65b4049af367de043f1f6b02c3d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d247f920_57f10788",
        "filename": "content/gpu/gpu_sandbox_hook_linux.cc",
        "patchSetId": 5
      },
      "lineNbr": 278,
      "author": {
        "id": 1196204
      },
      "writtenOn": "2018-01-15T09:04:05Z",
      "side": 0,
      "message": "Thanks for checking, and agreed on updating the remaining sandbox code in future patches. Having different flags with different names for the same thing is a tad confusing, so it would be welcome if it happened though.",
      "parentUuid": "4b5b5e51_c66c7cfe",
      "revId": "5f4ce8d92827e65b4049af367de043f1f6b02c3d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}