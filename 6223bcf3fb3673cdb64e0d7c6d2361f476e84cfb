{
  "comments": [
    {
      "key": {
        "uuid": "3f048691_b31169ab",
        "filename": "android_webview/javatests/src/org/chromium/android_webview/test/AwContentsClientShouldInterceptRequestTest.java",
        "patchSetId": 4
      },
      "lineNbr": 999,
      "author": {
        "id": 1167294
      },
      "writtenOn": "2017-10-04T20:31:41Z",
      "side": 1,
      "message": "Should this be a stronger assert? Can we use assertEquals() here (prefixing |data| with the proper prefix)?",
      "range": {
        "startLine": 999,
        "startChar": 8,
        "endLine": 999,
        "endChar": 89
      },
      "revId": "6223bcf3fb3673cdb64e0d7c6d2361f476e84cfb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "488b46cc_7c6ea253",
        "filename": "android_webview/javatests/src/org/chromium/android_webview/test/AwContentsClientShouldInterceptRequestTest.java",
        "patchSetId": 4
      },
      "lineNbr": 999,
      "author": {
        "id": 1002725
      },
      "writtenOn": "2017-10-04T20:36:35Z",
      "side": 1,
      "message": "\u003e Should this be a stronger assert? Can we use assertEquals() here (prefixing |data| with the proper prefix)?\n\ntoo brittle imo, imagine something trivial like whether mimetype comes before or after encoding, something like that",
      "parentUuid": "3f048691_b31169ab",
      "range": {
        "startLine": 999,
        "startChar": 8,
        "endLine": 999,
        "endChar": 89
      },
      "revId": "6223bcf3fb3673cdb64e0d7c6d2361f476e84cfb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d4534253_4f46f725",
        "filename": "android_webview/javatests/src/org/chromium/android_webview/test/AwContentsClientShouldInterceptRequestTest.java",
        "patchSetId": 4
      },
      "lineNbr": 999,
      "author": {
        "id": 1167294
      },
      "writtenOn": "2017-10-04T21:55:24Z",
      "side": 1,
      "message": "I think the RFC [1] says the order is actually important. But I understand your point about trivial changes.\n\nEven if format changes trivially, we should be aware. Such changes likely could break applications. We can relax the check if/when changes occur, but this gives us a heads up to look out for app breakages.\n\n[1] https://tools.ietf.org/html/rfc2397",
      "parentUuid": "488b46cc_7c6ea253",
      "range": {
        "startLine": 999,
        "startChar": 8,
        "endLine": 999,
        "endChar": 89
      },
      "revId": "6223bcf3fb3673cdb64e0d7c6d2361f476e84cfb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "237a3f3c_45fa8529",
        "filename": "android_webview/javatests/src/org/chromium/android_webview/test/AwContentsClientShouldInterceptRequestTest.java",
        "patchSetId": 4
      },
      "lineNbr": 999,
      "author": {
        "id": 1002725
      },
      "writtenOn": "2017-10-04T22:58:46Z",
      "side": 1,
      "message": "\u003e I think the RFC [1] says the order is actually important. But I understand your point about trivial changes.\n\u003e \n\u003e Even if format changes trivially, we should be aware. Such changes likely could break applications. We can relax the check if/when changes occur, but this gives us a heads up to look out for app breakages.\n\nI guess order was a bad example. but you can imagine a field appearing or disappearing, but they are equally valid data URLs, and apps should handle that. For those cases, I think this test is too brittle just to do a string match, because the worst thing for a refactor is finding out a bunch of random tests broke.\n\n\u003e \n\u003e [1] https://tools.ietf.org/html/rfc2397",
      "parentUuid": "d4534253_4f46f725",
      "range": {
        "startLine": 999,
        "startChar": 8,
        "endLine": 999,
        "endChar": 89
      },
      "revId": "6223bcf3fb3673cdb64e0d7c6d2361f476e84cfb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}