{
  "comments": [
    {
      "key": {
        "uuid": "9e4c0ed0_58cf3939",
        "filename": "chrome/browser/chromeos/policy/off_hours/device_off_hours_controller.h",
        "patchSetId": 5
      },
      "lineNbr": 150,
      "author": {
        "id": 1000101
      },
      "writtenOn": "2017-12-18T21:46:17Z",
      "side": 1,
      "message": "nit: const pointer",
      "revId": "969d0f9e53918ca5f027a816cd8129d351fa80c4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "33091f89_b45c61cb",
        "filename": "chrome/browser/chromeos/policy/off_hours/device_off_hours_controller.h",
        "patchSetId": 5
      },
      "lineNbr": 150,
      "author": {
        "id": 1000191
      },
      "writtenOn": "2017-12-18T22:23:17Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9e4c0ed0_58cf3939",
      "revId": "969d0f9e53918ca5f027a816cd8129d351fa80c4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d0349858_8278adca",
        "filename": "chrome/browser/chromeos/policy/off_hours/device_off_hours_controller_unittest.cc",
        "patchSetId": 5
      },
      "lineNbr": 115,
      "author": {
        "id": 1000101
      },
      "writtenOn": "2017-12-18T21:46:17Z",
      "side": 1,
      "message": "nit: std::make_unique\u003c...\u003e",
      "range": {
        "startLine": 115,
        "startChar": 8,
        "endLine": 115,
        "endChar": 24
      },
      "revId": "969d0f9e53918ca5f027a816cd8129d351fa80c4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cf00c4c2_21a24839",
        "filename": "chrome/browser/chromeos/policy/off_hours/device_off_hours_controller_unittest.cc",
        "patchSetId": 5
      },
      "lineNbr": 115,
      "author": {
        "id": 1000191
      },
      "writtenOn": "2017-12-18T22:23:17Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d0349858_8278adca",
      "range": {
        "startLine": 115,
        "startChar": 8,
        "endLine": 115,
        "endChar": 24
      },
      "revId": "969d0f9e53918ca5f027a816cd8129d351fa80c4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7b7a6357_758f0ad5",
        "filename": "chrome/browser/chromeos/settings/device_settings_service.h",
        "patchSetId": 5
      },
      "lineNbr": 88,
      "author": {
        "id": 1000101
      },
      "writtenOn": "2017-12-18T21:46:17Z",
      "side": 1,
      "message": "The impl code seems only notify on \"Store\" operation complete. If that is intended, prefer to rename this to DeviceSettingsStored and update comment.",
      "revId": "969d0f9e53918ca5f027a816cd8129d351fa80c4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0614f0d1_ecb7af46",
        "filename": "chrome/browser/chromeos/settings/device_settings_service.h",
        "patchSetId": 5
      },
      "lineNbr": 88,
      "author": {
        "id": 1000191
      },
      "writtenOn": "2017-12-18T22:23:17Z",
      "side": 1,
      "message": "It\u0027s confusing, but \u0027STORE_SUCCESS\u0027 is returned on Load or Store success (see enum Status above).",
      "parentUuid": "7b7a6357_758f0ad5",
      "revId": "969d0f9e53918ca5f027a816cd8129d351fa80c4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "beddb21f_3a9fe478",
        "filename": "chrome/browser/chromeos/settings/device_settings_service.h",
        "patchSetId": 5
      },
      "lineNbr": 88,
      "author": {
        "id": 1000101
      },
      "writtenOn": "2017-12-18T22:42:19Z",
      "side": 1,
      "message": "Ah, right. STORE_SUCCESS is an operation success for policy store, not the store operation is done successfully.\n\nNever mind then.",
      "parentUuid": "0614f0d1_ecb7af46",
      "revId": "969d0f9e53918ca5f027a816cd8129d351fa80c4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "826da6b6_0f2555fc",
        "filename": "chrome/browser/chromeos/settings/device_settings_service.h",
        "patchSetId": 5
      },
      "lineNbr": 132,
      "author": {
        "id": 1000101
      },
      "writtenOn": "2017-12-18T21:46:17Z",
      "side": 1,
      "message": "I might be paranoid but this could get abused. Normally, the settings are from policy blob and there is no way to change it since only DM server holds the private key to sign the policy blob. But this allows code to change arbitrary policy without the need to touch policy blob.\n\nIMHO, we should have an explicit/limited ApplyOffHoursPolicy method here for DeviceOffHoursController instead of this powerful api.",
      "revId": "969d0f9e53918ca5f027a816cd8129d351fa80c4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d72e6b83_5586ec38",
        "filename": "chrome/browser/chromeos/settings/device_settings_service.h",
        "patchSetId": 5
      },
      "lineNbr": 132,
      "author": {
        "id": 1000191
      },
      "writtenOn": "2017-12-18T22:23:17Z",
      "side": 1,
      "message": "Well, in order to do that, DeviceSettingsService pretty much needs to depend on the off_hours policy code and we shouldn\u0027t try to make this layering change.\n\nIn the associated issue, mnissler@ suggested that we should separate out policy from DeviceSettingsService, so that is the approach I was taking, but maybe this needs to be part of a larger / more thought out plan about where the policy code should live. I am happy to put this change on the backburner in the meanwhile.",
      "parentUuid": "826da6b6_0f2555fc",
      "revId": "969d0f9e53918ca5f027a816cd8129d351fa80c4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9cfbbe9b_d79a821a",
        "filename": "chrome/browser/chromeos/settings/device_settings_service.h",
        "patchSetId": 5
      },
      "lineNbr": 132,
      "author": {
        "id": 1000101
      },
      "writtenOn": "2017-12-18T22:42:19Z",
      "side": 1,
      "message": "Thanks for the clarification. Now this makes more sense.",
      "parentUuid": "d72e6b83_5586ec38",
      "revId": "969d0f9e53918ca5f027a816cd8129d351fa80c4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5b9aded9_8a19201c",
        "filename": "chrome/browser/chromeos/settings/device_settings_service.h",
        "patchSetId": 5
      },
      "lineNbr": 132,
      "author": {
        "id": 1126309
      },
      "writtenOn": "2017-12-19T13:47:08Z",
      "side": 1,
      "message": "I\u0027m also concerned about this exposure.\nPreviously, the fact that the policy blob received from server was modified here was hidden as an implementation detail; DeviceSettingsService was itself calling into DeviceOffHoursController and replacing the blob with its output.\nNow, this functionality of editing policy blobs is exposed as a public method, which means that any code becomes technically allowed to do that operation.\n\nMaybe the \"Delegate\" approach would work better? It would allow both to keep the implementation details private and to rid of policy dependency in the DeviceSettingsService class itself. WDYT?",
      "parentUuid": "9cfbbe9b_d79a821a",
      "revId": "969d0f9e53918ca5f027a816cd8129d351fa80c4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "765d809b_793243bc",
        "filename": "chrome/browser/chromeos/settings/device_settings_service.h",
        "patchSetId": 5
      },
      "lineNbr": 132,
      "author": {
        "id": 1000191
      },
      "writtenOn": "2017-12-19T18:07:39Z",
      "side": 1,
      "message": "Well, long term, if DeviceSettingsService and policy are implemented as separate services that can live in separate executables this will need to be exposed as a \"public\" mojo API (restricted of course, but similar exposure to this \"public\" API).\n\nWhat we need to decide is whether this is a separation that we want to allow. If not then I will just put this on the backburner and this code can live in src/chrome until/unless we move the policy code to a separate component.",
      "parentUuid": "5b9aded9_8a19201c",
      "revId": "969d0f9e53918ca5f027a816cd8129d351fa80c4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2795905a_96bbd40e",
        "filename": "chrome/browser/chromeos/settings/device_settings_service.h",
        "patchSetId": 5
      },
      "lineNbr": 132,
      "author": {
        "id": 1126309
      },
      "writtenOn": "2017-12-19T19:13:16Z",
      "side": 1,
      "message": "I\u0027m not quite getting the point about Servicification.\nEven in the service-based world, I\u0027d still think of the OffHoursController as an internal implementation detail of the Policy Service, because all policy consumers should just receive the result of its application (and 99% of them shouldn\u0027t even know about its existence, while the rest 1% that care just need a boolean flag |is_off_hours_mode|). Anyway, it sounds rather dangerous and undesirable to expose a public API that would allow any code in Chromium to touch the policy blob - this data should be under control of the policy service.\nAlthough I\u0027m hypothesizing here, as there\u0027s no concrete design for the Policy Service at the moment AFAIK.\n\nIf your argument is that DeviceSettingsService should rather be a thin wrapper around lower-level policy managing code (which can potentially be moved into a separate service) - then it\u0027s also good. Knowledge about policy-specific things like DeviceOffHours could be kept inside that lower layer. But for moving in this direction, this additional layer has to be introduced now?",
      "parentUuid": "765d809b_793243bc",
      "revId": "969d0f9e53918ca5f027a816cd8129d351fa80c4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4ad9202a_bd0fa762",
        "filename": "chrome/browser/chromeos/settings/device_settings_service.h",
        "patchSetId": 5
      },
      "lineNbr": 132,
      "author": {
        "id": 1000191
      },
      "writtenOn": "2017-12-19T19:25:51Z",
      "side": 1,
      "message": "DeviceSettingsService is *mostly* a wrapper around SessionManager. It happens to load a policy blob but seems moslty unwaware of that detail, excepet for the off hours code (at least based on the code dependencies).\n\nSo yes, it\u0027s a question of whether it should be part of a separate layer, maybe associated with other session manager services, or part of a TBD policy service.\n\nIt sounds like it needs to be part of the TBD policy service.\n\nThe challenge with that is the policy code is super complicated and not (as far as I can tell) very well componentized, so extracting that out is going to be a bit of work.\n\nThere is no urgency on this. There are some Ash dependencies on CrosSettings, which depends on DeviceSettingsService, that I was hoping to be able to address with a reasonable amount of effort, but it looks like this is going to be a larger effort so I will put it off.",
      "parentUuid": "2795905a_96bbd40e",
      "revId": "969d0f9e53918ca5f027a816cd8129d351fa80c4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bd3b984e_ca757349",
        "filename": "chrome/browser/ui/views/ash/chrome_browser_main_extra_parts_ash.cc",
        "patchSetId": 5
      },
      "lineNbr": 125,
      "author": {
        "id": 1000101
      },
      "writtenOn": "2017-12-18T21:46:17Z",
      "side": 1,
      "message": "nit: std::make_unique",
      "range": {
        "startLine": 125,
        "startChar": 6,
        "endLine": 125,
        "endChar": 22
      },
      "revId": "969d0f9e53918ca5f027a816cd8129d351fa80c4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fb4830d8_6461e202",
        "filename": "chrome/browser/ui/views/ash/chrome_browser_main_extra_parts_ash.cc",
        "patchSetId": 5
      },
      "lineNbr": 125,
      "author": {
        "id": 1000191
      },
      "writtenOn": "2017-12-18T22:23:17Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "bd3b984e_ca757349",
      "range": {
        "startLine": 125,
        "startChar": 6,
        "endLine": 125,
        "endChar": 22
      },
      "revId": "969d0f9e53918ca5f027a816cd8129d351fa80c4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}