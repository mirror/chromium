{
  "comments": [
    {
      "key": {
        "uuid": "42c7f9f9_55d9b512",
        "filename": "third_party/WebKit/Source/bindings/core/v8/V8ScriptRunnerTest.cpp",
        "patchSetId": 3
      },
      "lineNbr": 124,
      "author": {
        "id": 1002854
      },
      "writtenOn": "2017-12-01T15:31:53Z",
      "side": 1,
      "message": "nit: this might be more readable with a quick extraction of \"source_code.CacheHandler()\" to a variable:\n\nauto* cache \u003d source_code.CacheHandler();\nEXPECT_FALSE(cache-\u003eGetCachedMetadata(TagForParserCache(cache)));\n\n(here and above)",
      "revId": "d66967fc65a90eb02b18fdeac2d729cd6a4e4983",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6ab5a24a_75b9d821",
        "filename": "third_party/WebKit/Source/core/inspector/DevToolsHost.h",
        "patchSetId": 3
      },
      "lineNbr": 84,
      "author": {
        "id": 1002854
      },
      "writtenOn": "2017-12-01T15:31:53Z",
      "side": 1,
      "message": "Why the change to AtomicString? We don\u0027t seem to do anything that benefits from being in the atomic string table.",
      "revId": "d66967fc65a90eb02b18fdeac2d729cd6a4e4983",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "02a2faf2_48aba388",
        "filename": "third_party/WebKit/Source/core/inspector/DevToolsHost.h",
        "patchSetId": 3
      },
      "lineNbr": 84,
      "author": {
        "id": 1115924
      },
      "writtenOn": "2017-12-01T18:30:25Z",
      "side": 1,
      "message": "Because EvaluateScript() in the current codebase uses V8AtomicString().\n\n1. String\u0026 expression \u003d\u003e V8AtomicString(isolate, expression.Utf8().data())\n   (Convert String into byte array and then reconstruct V8 string with \"atomic\")\n2. String\u0026 expression \u003d\u003e V8String(isolate, expression)\n3. AtomicString\u0026 expression \u003d\u003e V8String(isolate, expression)\n\nThe current code \u003d\u003e 1.\nUsing String\u0026 here \u003d\u003e 2.\nThe current patchset of this CL \u003d\u003e 3.\n\nProbably we can keep this String\u0026 (\u003d\u003e 2.), but not so sure.\n\npfeldman@, you introduced V8AtomicString() in EvaluateScript() in\nhttps://codereview.chromium.org/1577153002.\nCan we simply change the behavior from 1. to 2.,\nor is there some background for requiring atomic strings?",
      "parentUuid": "6ab5a24a_75b9d821",
      "revId": "d66967fc65a90eb02b18fdeac2d729cd6a4e4983",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8748d8f4_4e3ff55a",
        "filename": "third_party/WebKit/Source/core/inspector/DevToolsHost.h",
        "patchSetId": 3
      },
      "lineNbr": 84,
      "author": {
        "id": 1002854
      },
      "writtenOn": "2017-12-01T18:41:07Z",
      "side": 1,
      "message": "There is two separate questions here: should the WTF string be atomic, and should the V8 string be internalized?\n\nV8AtomicString, confusingly, isn\u0027t really related to WTF::AtomicString. What it does is create an internalized V8 string (which is analogous to WTF::AtomicString, but has a separate table etc). Since we never do pointer-equality comparison or otherwise rely on the WTF atomic string table, there\u0027s no need for WTF::AtomicString here.\n\nOn the V8 side, I also doubt we want this to be internalized (it seems to me that most of the strings are not likely to be benefit from being in the V8 string table), so V8String is probably the better thing to do. V8AtomicString is mostly intended for things like property names that we expect to exist (or should exist) in the V8 atomic string table.",
      "parentUuid": "02a2faf2_48aba388",
      "revId": "d66967fc65a90eb02b18fdeac2d729cd6a4e4983",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}