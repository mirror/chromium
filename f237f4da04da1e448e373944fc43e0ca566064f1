{
  "comments": [
    {
      "key": {
        "uuid": "9866cd7f_5a4d310b",
        "filename": "third_party/WebKit/Source/core/editing/SelectionController.cpp",
        "patchSetId": 5
      },
      "lineNbr": 383,
      "author": {
        "id": 1229332
      },
      "writtenOn": "2017-08-30T21:39:57Z",
      "side": 1,
      "message": "Note: this doesn\u0027t catch the case in the test case I\u0027m adding; that case ends up hitting and failing the IsValidFor() check.",
      "revId": "f237f4da04da1e448e373944fc43e0ca566064f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f0350ebc_f936d125",
        "filename": "third_party/WebKit/Source/core/editing/SelectionController.cpp",
        "patchSetId": 5
      },
      "lineNbr": 397,
      "author": {
        "id": 1229332
      },
      "writtenOn": "2017-08-30T21:39:57Z",
      "side": 1,
      "message": "Do we handle the case where the frame is destroyed by the selectstart handler (is that possible)?",
      "revId": "f237f4da04da1e448e373944fc43e0ca566064f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "876428eb_a134e8f6",
        "filename": "third_party/WebKit/Source/core/editing/SelectionController.cpp",
        "patchSetId": 5
      },
      "lineNbr": 397,
      "author": {
        "id": 1229332
      },
      "writtenOn": "2017-08-30T21:51:31Z",
      "side": 1,
      "message": "I guess this must be handled properly since this code doesn\u0027t crash:\n\n\u003c!DOCTYPE html\u003e\n\u003cscript\u003e\nfunction closeFrame() {\n  const frame \u003d document.getElementById(\u0027frame\u0027)\n  frame.parentNode.removeChild(frame);\n}\n\u003c/script\u003e\n\n\u003cbody\u003e\n\u003ciframe id\u003d\"frame\" srcdoc\u003d\"\n\u003cscript\u003e\ndocument.designMode \u003d \u0027on\u0027;\ndocument.addEventListener(\u0027selectstart\u0027, parent.closeFrame);\n\u003c/script\u003e\nkwyjibo\"\u003e\n\u003c/frame\u003e\n\u003c/body\u003e\n\nIs it not actually possible to destroy a frame from JavaScript, only remove it from the DOM?",
      "parentUuid": "f0350ebc_f936d125",
      "revId": "f237f4da04da1e448e373944fc43e0ca566064f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "77f3888e_409c64e2",
        "filename": "third_party/WebKit/Source/core/editing/SelectionController.cpp",
        "patchSetId": 5
      },
      "lineNbr": 397,
      "author": {
        "id": 1144165
      },
      "writtenOn": "2017-08-30T23:36:10Z",
      "side": 1,
      "message": "What do you mean by \"is it not actually possible to destroy a frame from JavaScript, only remove it from the DOM\"?\n\nBy \"destroying the frame\", we mean detaching it from the DOM. I made a fiddle here: https://jsfiddle.net/qxqg89t6/\n\nInterestingly, it doesn\u0027t crash on Android Canary... So we probably don\u0027t need to add this test case?\n\nTo aborting when UpdateSelectionForMouseDownDispatchingSelectStart returns false, which includes the possibility that the frame is detached, is the right thing to do.",
      "parentUuid": "876428eb_a134e8f6",
      "revId": "f237f4da04da1e448e373944fc43e0ca566064f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2a63a17d_16af6a44",
        "filename": "third_party/WebKit/Source/core/editing/SelectionController.cpp",
        "patchSetId": 5
      },
      "lineNbr": 397,
      "author": {
        "id": 1229332
      },
      "writtenOn": "2017-08-30T23:43:13Z",
      "side": 1,
      "message": "In JavaScript, you can still refer to the frame after it\u0027s detached from the DOM. E.g. if you do:\n\nconst frame \u003d document.getElementById(\u0027frame\u0027)\nframe.parentNode.removeChild(frame);\n\nyou can still do \"console.log(frame)\" and see there\u0027s still a DOM tree associated with it. I guess it\u0027s not a frame anymore though, just a detached DOM fragment.",
      "parentUuid": "77f3888e_409c64e2",
      "revId": "f237f4da04da1e448e373944fc43e0ca566064f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}