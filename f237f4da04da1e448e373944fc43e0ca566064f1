{
  "comments": [
    {
      "key": {
        "uuid": "3bc83863_7ecd391c",
        "filename": "third_party/WebKit/Source/core/editing/SelectionController.cpp",
        "patchSetId": 5
      },
      "lineNbr": 301,
      "author": {
        "id": 1002258
      },
      "writtenOn": "2017-08-31T01:39:50Z",
      "side": 1,
      "message": "It seems all usage of |visible_pos| are ToPwa() or DeepEquiv().\nCould you change this to |PwA| to denote we don\u0027t care about DOM tree\nand style change in another patch?\n\nWe should not use VP after DOM change or style change, since it is no more\nvisible canonicalized position.",
      "revId": "f237f4da04da1e448e373944fc43e0ca566064f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2dc92947_0a9e67a4",
        "filename": "third_party/WebKit/Source/core/editing/SelectionController.cpp",
        "patchSetId": 5
      },
      "lineNbr": 301,
      "author": {
        "id": 1144165
      },
      "writtenOn": "2017-08-31T22:40:33Z",
      "side": 1,
      "message": "Sorry, I don\u0027t understand. In general, any usage of VP eventually boils down to using the (canonicalized) Position or PwA inside it.\n\nIn my understanding, whether to use VP depends on whether canonicalization is needed. For HandleSingleClick(), it seems that canonicalization is indeed needed, probably other than the last use site where TextSuggestionController is invoked? Besides, other than the last one, all usages of VP are valid (without being store across DOM/style changes).\n\nSo maybe the correct fix is not about VP, but rather, TextSuggestionController should get the position from FrameSelection instead of the stored VP?",
      "parentUuid": "3bc83863_7ecd391c",
      "revId": "f237f4da04da1e448e373944fc43e0ca566064f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "97f3461d_452546d1",
        "filename": "third_party/WebKit/Source/core/editing/SelectionController.cpp",
        "patchSetId": 5
      },
      "lineNbr": 301,
      "author": {
        "id": 1002258
      },
      "writtenOn": "2017-09-01T01:51:56Z",
      "side": 1,
      "message": "Sorry for confusion, I didn\u0027t say we don\u0027t need to use VP here.\nMy saying is\n\nconst PwAInFlatTree\u0026 visible_pos \u003d CreateVP().ToPositionWithAffinity();\n\nIn this way, we don\u0027t change current behavior even if it is unexpected, e.g.\nmoving VP from another position.\n\nFor usage of |visible_pos| at L398, recomputing |visible_pos| to hit\npoint may be minimum surprise for users, e.g.\n\n1. Tap word \"abc\" at (x1, y1)\n2. \"selectstart\" move \"abc\" somewhere\n3. Hit Test again for (x1, y1) and get \"xyz\" which was under \"abc\".\n\n398    frame_-\u003eGetTextSuggestionController().HandlePotentialMisspelledWordTap(\n399       visible_pos.DeepEquivalent());\n\n\nBail out when DOM tree or style change is the easiest solution for us,\nbut it may break some existing site.\n\nBecause event path is computed once before dispatch, it is not bad idea\nto follow this way.\n\nI propose\n\nconst VP\u0026 recomputed_vp \u003d CreateVP(visible_pos);\nif (recompute_vp !\u003d visible_pos) {\n  // Surrounding tree at hit point is changed, we stop processing\n  // about hit point.\n  return;\n}\n... call HandlePotentialMisspelledWordTap()",
      "parentUuid": "2dc92947_0a9e67a4",
      "revId": "f237f4da04da1e448e373944fc43e0ca566064f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "59a71aa5_4b4ab4bd",
        "filename": "third_party/WebKit/Source/core/editing/SelectionController.cpp",
        "patchSetId": 5
      },
      "lineNbr": 301,
      "author": {
        "id": 1229332
      },
      "writtenOn": "2017-09-01T05:21:57Z",
      "side": 1,
      "message": "As I\u0027ve already run into, there is no equality/inequality operator currently defined for VisiblePosition. So we would have to add one in order to write the code in this way.",
      "parentUuid": "97f3461d_452546d1",
      "revId": "f237f4da04da1e448e373944fc43e0ca566064f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9866cd7f_5a4d310b",
        "filename": "third_party/WebKit/Source/core/editing/SelectionController.cpp",
        "patchSetId": 5
      },
      "lineNbr": 383,
      "author": {
        "id": 1229332
      },
      "writtenOn": "2017-08-30T21:39:57Z",
      "side": 1,
      "message": "Note: this doesn\u0027t catch the case in the test case I\u0027m adding; that case ends up hitting and failing the IsValidFor() check.",
      "revId": "f237f4da04da1e448e373944fc43e0ca566064f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f0350ebc_f936d125",
        "filename": "third_party/WebKit/Source/core/editing/SelectionController.cpp",
        "patchSetId": 5
      },
      "lineNbr": 397,
      "author": {
        "id": 1229332
      },
      "writtenOn": "2017-08-30T21:39:57Z",
      "side": 1,
      "message": "Do we handle the case where the frame is destroyed by the selectstart handler (is that possible)?",
      "revId": "f237f4da04da1e448e373944fc43e0ca566064f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "876428eb_a134e8f6",
        "filename": "third_party/WebKit/Source/core/editing/SelectionController.cpp",
        "patchSetId": 5
      },
      "lineNbr": 397,
      "author": {
        "id": 1229332
      },
      "writtenOn": "2017-08-30T21:51:31Z",
      "side": 1,
      "message": "I guess this must be handled properly since this code doesn\u0027t crash:\n\n\u003c!DOCTYPE html\u003e\n\u003cscript\u003e\nfunction closeFrame() {\n  const frame \u003d document.getElementById(\u0027frame\u0027)\n  frame.parentNode.removeChild(frame);\n}\n\u003c/script\u003e\n\n\u003cbody\u003e\n\u003ciframe id\u003d\"frame\" srcdoc\u003d\"\n\u003cscript\u003e\ndocument.designMode \u003d \u0027on\u0027;\ndocument.addEventListener(\u0027selectstart\u0027, parent.closeFrame);\n\u003c/script\u003e\nkwyjibo\"\u003e\n\u003c/frame\u003e\n\u003c/body\u003e\n\nIs it not actually possible to destroy a frame from JavaScript, only remove it from the DOM?",
      "parentUuid": "f0350ebc_f936d125",
      "revId": "f237f4da04da1e448e373944fc43e0ca566064f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "77f3888e_409c64e2",
        "filename": "third_party/WebKit/Source/core/editing/SelectionController.cpp",
        "patchSetId": 5
      },
      "lineNbr": 397,
      "author": {
        "id": 1144165
      },
      "writtenOn": "2017-08-30T23:36:10Z",
      "side": 1,
      "message": "What do you mean by \"is it not actually possible to destroy a frame from JavaScript, only remove it from the DOM\"?\n\nBy \"destroying the frame\", we mean detaching it from the DOM. I made a fiddle here: https://jsfiddle.net/qxqg89t6/\n\nInterestingly, it doesn\u0027t crash on Android Canary... So we probably don\u0027t need to add this test case?\n\nTo aborting when UpdateSelectionForMouseDownDispatchingSelectStart returns false, which includes the possibility that the frame is detached, is the right thing to do.",
      "parentUuid": "876428eb_a134e8f6",
      "revId": "f237f4da04da1e448e373944fc43e0ca566064f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2a63a17d_16af6a44",
        "filename": "third_party/WebKit/Source/core/editing/SelectionController.cpp",
        "patchSetId": 5
      },
      "lineNbr": 397,
      "author": {
        "id": 1229332
      },
      "writtenOn": "2017-08-30T23:43:13Z",
      "side": 1,
      "message": "In JavaScript, you can still refer to the frame after it\u0027s detached from the DOM. E.g. if you do:\n\nconst frame \u003d document.getElementById(\u0027frame\u0027)\nframe.parentNode.removeChild(frame);\n\nyou can still do \"console.log(frame)\" and see there\u0027s still a DOM tree associated with it. I guess it\u0027s not a frame anymore though, just a detached DOM fragment.",
      "parentUuid": "77f3888e_409c64e2",
      "revId": "f237f4da04da1e448e373944fc43e0ca566064f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "39ded82f_0cfee61d",
        "filename": "third_party/WebKit/Source/core/editing/SelectionController.cpp",
        "patchSetId": 5
      },
      "lineNbr": 397,
      "author": {
        "id": 1144165
      },
      "writtenOn": "2017-08-30T23:54:09Z",
      "side": 1,
      "message": "That\u0027s as expected. A detached frame can still be accessed in JS, just like any other detached element.\n\nI\u0027m not sure if there\u0027s any way to force destroying any object in JS. The only way I know that an object can get destroyed is by GC.",
      "parentUuid": "2a63a17d_16af6a44",
      "revId": "f237f4da04da1e448e373944fc43e0ca566064f1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}