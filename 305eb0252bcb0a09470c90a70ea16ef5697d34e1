{
  "comments": [
    {
      "key": {
        "uuid": "e7a53b24_923e9ff6",
        "filename": "chrome/browser/extensions/extension_messages_apitest.cc",
        "patchSetId": 4
      },
      "lineNbr": 1421,
      "author": {
        "id": 1161815
      },
      "writtenOn": "2017-12-18T22:52:12Z",
      "side": 1,
      "message": "Can we directly respond with the tlsChannelId received (and wait on it) and prevent another round trip to the renderer?",
      "range": {
        "startLine": 1420,
        "startChar": 11,
        "endLine": 1421,
        "endChar": 55
      },
      "revId": "305eb0252bcb0a09470c90a70ea16ef5697d34e1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "16c57f54_d6decc07",
        "filename": "chrome/browser/extensions/extension_messages_apitest.cc",
        "patchSetId": 4
      },
      "lineNbr": 1421,
      "author": {
        "id": 1115745
      },
      "writtenOn": "2017-12-19T05:22:28Z",
      "side": 1,
      "message": "Hmm... not 100% sure I follow, but I don\u0027t think so.  We could reply to the message sender, but that\u0027s the app, so we would still have to get the message value in C++ somehow.  And I don\u0027t see an easy way we\u0027d be able to otherwise send it via test.sendMessage (since each of the other messages is already used).\n\nUnless I\u0027m missing something, I *think* this is the cleanest - but lemme know if you spot something simpler!",
      "parentUuid": "e7a53b24_923e9ff6",
      "range": {
        "startLine": 1420,
        "startChar": 11,
        "endLine": 1421,
        "endChar": 55
      },
      "revId": "305eb0252bcb0a09470c90a70ea16ef5697d34e1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "080c5f0e_78a0b6f0",
        "filename": "chrome/browser/extensions/extension_messages_apitest.cc",
        "patchSetId": 4
      },
      "lineNbr": 1421,
      "author": {
        "id": 1161815
      },
      "writtenOn": "2017-12-19T05:34:37Z",
      "side": 1,
      "message": "I meant instead of, \n\nwindow.receivedChannelId \u003d sender.tlsChannelId;\nchrome.test.sendMessage(\u0027received message\u0027);\n\ndo\n\nchrome.test.sendMessage(sender.tlsChannelId) \n\n\nThen in C++ instead of,\n\nExtensionTestMessageListener received_message_listener(\"received message\",\n                                                         false);\n\ndo,\n\nExtensionTestMessageListener received_message_listener(tls_channel_id, false);",
      "parentUuid": "16c57f54_d6decc07",
      "range": {
        "startLine": 1420,
        "startChar": 11,
        "endLine": 1421,
        "endChar": 55
      },
      "revId": "305eb0252bcb0a09470c90a70ea16ef5697d34e1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "62bdb6d2_7c4b24c1",
        "filename": "chrome/browser/extensions/extension_messages_apitest.cc",
        "patchSetId": 4
      },
      "lineNbr": 1421,
      "author": {
        "id": 1115745
      },
      "writtenOn": "2017-12-19T05:43:14Z",
      "side": 1,
      "message": "The disadvantage to doing that is that the test will timeout, rather than fail.  This makes it harder to diagnose, since you won\u0027t have the handy-dandy expect-equals logs that say \"expected foo, got bar\", but instead just see an opaque stack trace.  I\u0027d like to avoid that if possible.  (Admittedly, if a *different* message failed, like the \"on ready\" message, this will still timeout, but that\u0027s really not what this test is testing, and would [hopefully] affect many more tests as well).",
      "parentUuid": "080c5f0e_78a0b6f0",
      "range": {
        "startLine": 1420,
        "startChar": 11,
        "endLine": 1421,
        "endChar": 55
      },
      "revId": "305eb0252bcb0a09470c90a70ea16ef5697d34e1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3adb26c7_c4d712a6",
        "filename": "chrome/browser/extensions/extension_messages_apitest.cc",
        "patchSetId": 4
      },
      "lineNbr": 1421,
      "author": {
        "id": 1161815
      },
      "writtenOn": "2017-12-19T06:15:38Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "62bdb6d2_7c4b24c1",
      "range": {
        "startLine": 1420,
        "startChar": 11,
        "endLine": 1421,
        "endChar": 55
      },
      "revId": "305eb0252bcb0a09470c90a70ea16ef5697d34e1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "02dad88c_4733ee78",
        "filename": "extensions/browser/api/messaging/message_service.cc",
        "patchSetId": 4
      },
      "lineNbr": 824,
      "author": {
        "id": 1161815
      },
      "writtenOn": "2017-12-18T22:52:12Z",
      "side": 1,
      "message": "I am not that familiar with StoragePartitions and the messaging api. Do normal extension renderers have the default (profile) storage partition?\n\nCan this can also be a request from a web page to connect to an extension? Do normal renderers have a different storage partition?",
      "range": {
        "startLine": 824,
        "startChar": 8,
        "endLine": 824,
        "endChar": 22
      },
      "revId": "305eb0252bcb0a09470c90a70ea16ef5697d34e1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ef97f1d6_0c0ce983",
        "filename": "extensions/browser/api/messaging/message_service.cc",
        "patchSetId": 4
      },
      "lineNbr": 824,
      "author": {
        "id": 1115745
      },
      "writtenOn": "2017-12-19T05:22:28Z",
      "side": 1,
      "message": "Yes.  Normal extensions use the default storage partition for the BrowserContext, which is different than the storage partition for platform apps.  Additionally, platform apps are process-isolated, thus ensuring that (hopefully!) RenderProcessHost::GetStoragePartition() should always be correct.  I\u0027ve added a comment with some of this information (and a link to the bug).",
      "parentUuid": "02dad88c_4733ee78",
      "range": {
        "startLine": 824,
        "startChar": 8,
        "endLine": 824,
        "endChar": 22
      },
      "revId": "305eb0252bcb0a09470c90a70ea16ef5697d34e1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2c983d44_81d1cf31",
        "filename": "extensions/browser/api/messaging/message_service.cc",
        "patchSetId": 4
      },
      "lineNbr": 824,
      "author": {
        "id": 1161815
      },
      "writtenOn": "2017-12-19T05:34:37Z",
      "side": 1,
      "message": "Is this codepath also used for normal renderers (web pages) trying to connect to extensions? Does this change also change StoragePartition for them?",
      "parentUuid": "ef97f1d6_0c0ce983",
      "range": {
        "startLine": 824,
        "startChar": 8,
        "endLine": 824,
        "endChar": 22
      },
      "revId": "305eb0252bcb0a09470c90a70ea16ef5697d34e1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e38011c6_1e18f1f5",
        "filename": "extensions/browser/api/messaging/message_service.cc",
        "patchSetId": 4
      },
      "lineNbr": 824,
      "author": {
        "id": 1115745
      },
      "writtenOn": "2017-12-19T05:43:14Z",
      "side": 1,
      "message": "This should *not* change the value for web pages, since web pages (and extensions) all use the the \"default\" storage partition for the BrowserContext - at least, that\u0027s my understanding.  This is also (theoretically) tested in the existing TLS channel ID tests (in the same extension_messages_apitest.cc file).  Lemme know if you see a gap in the testing that you think this will affect.",
      "parentUuid": "2c983d44_81d1cf31",
      "range": {
        "startLine": 824,
        "startChar": 8,
        "endLine": 824,
        "endChar": 22
      },
      "revId": "305eb0252bcb0a09470c90a70ea16ef5697d34e1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4a3488e5_d1cb317b",
        "filename": "extensions/browser/api/messaging/message_service.cc",
        "patchSetId": 4
      },
      "lineNbr": 824,
      "author": {
        "id": 1161815
      },
      "writtenOn": "2017-12-19T06:15:38Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "e38011c6_1e18f1f5",
      "range": {
        "startLine": 824,
        "startChar": 8,
        "endLine": 824,
        "endChar": 22
      },
      "revId": "305eb0252bcb0a09470c90a70ea16ef5697d34e1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}