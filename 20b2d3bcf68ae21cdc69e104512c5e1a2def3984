{
  "comments": [
    {
      "key": {
        "uuid": "dd94fdf0_0bc18d36",
        "filename": "content/common/input/input_event_struct_traits.cc",
        "patchSetId": 2
      },
      "lineNbr": 91,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-06-28T06:20:21Z",
      "side": 1,
      "message": "The line between when to inline and not-inline is a bit blurry, but for simple getters, we usually just inline it (and it looks like this would qualify), since this usually results in smaller and more efficient code.",
      "range": {
        "startLine": 87,
        "startChar": 0,
        "endLine": 91,
        "endChar": 1
      },
      "revId": "20b2d3bcf68ae21cdc69e104512c5e1a2def3984",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9c782904_564d9d83",
        "filename": "content/common/input/input_event_struct_traits.cc",
        "patchSetId": 2
      },
      "lineNbr": 114,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-06-28T06:20:21Z",
      "side": 1,
      "message": "Even things like this can probably be inlined as well now.",
      "range": {
        "startLine": 114,
        "startChar": 2,
        "endLine": 114,
        "endChar": 73
      },
      "revId": "20b2d3bcf68ae21cdc69e104512c5e1a2def3984",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d68bd33e_2d6c8f0d",
        "filename": "content/common/input/input_event_struct_traits.cc",
        "patchSetId": 2
      },
      "lineNbr": 158,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-06-28T06:20:21Z",
      "side": 1,
      "message": "An alternate way of writing this that may require fewer static casts:\n\nauto key_event \u003d base::MakeUnique\u003cblink::WebKeyboardEvent\u003e(...);\n\nkey_event-\u003e... \u003d ...;\n\n(*out)-\u003eweb_event \u003d std::move(key_event);",
      "range": {
        "startLine": 154,
        "startChar": 0,
        "endLine": 158,
        "endChar": 71
      },
      "revId": "20b2d3bcf68ae21cdc69e104512c5e1a2def3984",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c2da4990_26e8a912",
        "filename": "content/common/input/input_event_struct_traits.cc",
        "patchSetId": 2
      },
      "lineNbr": 171,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-06-28T06:20:21Z",
      "side": 1,
      "message": "Prefer \u003d base::MakeUnique\u003cblink::WebGestureEvent(...)",
      "range": {
        "startLine": 171,
        "startChar": 21,
        "endLine": 171,
        "endChar": 54
      },
      "revId": "20b2d3bcf68ae21cdc69e104512c5e1a2def3984",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1f010dbe_0f187f4e",
        "filename": "content/common/input/input_event_struct_traits.cc",
        "patchSetId": 2
      },
      "lineNbr": 187,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-06-28T06:20:21Z",
      "side": 1,
      "message": "Nit: prefer to omit default cases",
      "range": {
        "startLine": 186,
        "startChar": 0,
        "endLine": 187,
        "endChar": 16
      },
      "revId": "20b2d3bcf68ae21cdc69e104512c5e1a2def3984",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "53bb1ed1_93bbcb63",
        "filename": "content/common/input/input_event_struct_traits.cc",
        "patchSetId": 2
      },
      "lineNbr": 428,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-06-28T06:20:21Z",
      "side": 1,
      "message": "Isn\u0027t this identical to reaching the NOTREACHED() case above?\n\nMaybe just return false there?\n\n(Also, line 427 can be omitted; there\u0027s no need to manually clean up state on deserialization failure)",
      "range": {
        "startLine": 428,
        "startChar": 0,
        "endLine": 428,
        "endChar": 17
      },
      "revId": "20b2d3bcf68ae21cdc69e104512c5e1a2def3984",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "70aa9ae2_bb7e26f2",
        "filename": "content/common/input/input_event_struct_traits.cc",
        "patchSetId": 2
      },
      "lineNbr": 436,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-06-28T06:20:21Z",
      "side": 1,
      "message": "Nit: https://chromium.googlesource.com/chromium/src/+/master/styleguide/c++/c++.md#Code-formatting says that function declaration order should match function definition order.",
      "range": {
        "startLine": 433,
        "startChar": 0,
        "endLine": 436,
        "endChar": 66
      },
      "revId": "20b2d3bcf68ae21cdc69e104512c5e1a2def3984",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bb39fa93_9c01c251",
        "filename": "content/common/input/input_event_struct_traits.cc",
        "patchSetId": 2
      },
      "lineNbr": 458,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-06-28T06:20:21Z",
      "side": 1,
      "message": "Consider just allocating directly into context, e.g.\n\ncontext-\u003egesture_data \u003d content::mojom::GestureData::New();\n\nThen alias it into gesture_data for convenience:\n\ncontent::mojom::GestureDataPtr\u0026 gesture_data \u003d context-\u003egesture_data;\n\n(This saves a move, which may or may not be cheap--it seems like this struct consists of a lot of PODs, which really can\u0027t be moved efficiently anyway)",
      "range": {
        "startLine": 457,
        "startChar": 4,
        "endLine": 458,
        "endChar": 43
      },
      "revId": "20b2d3bcf68ae21cdc69e104512c5e1a2def3984",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1c9700f2_1a4453bb",
        "filename": "content/common/input/input_event_struct_traits.cc",
        "patchSetId": 2
      },
      "lineNbr": 467,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-06-28T06:20:21Z",
      "side": 1,
      "message": "Nit: prefer to omit default if it\u0027s not needed (i.e. all cases are handled).\n\nEven if we don\u0027t want to handle all cases explicitly, it\u0027s often better to just list them with an explicit early break--this way, we get an automatic compiler warning if future values are added.",
      "range": {
        "startLine": 466,
        "startChar": 0,
        "endLine": 467,
        "endChar": 14
      },
      "revId": "20b2d3bcf68ae21cdc69e104512c5e1a2def3984",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f1d7790c_7af13b24",
        "filename": "content/common/input/input_event_struct_traits.cc",
        "patchSetId": 2
      },
      "lineNbr": 559,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-06-28T06:20:21Z",
      "side": 1,
      "message": "Consider a similar trick here if possible: New() into context-\u003etouch_data and then emplace directly into the vector there.",
      "range": {
        "startLine": 551,
        "startChar": 0,
        "endLine": 559,
        "endChar": 5
      },
      "revId": "20b2d3bcf68ae21cdc69e104512c5e1a2def3984",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "72df2aca_fcf89293",
        "filename": "content/common/input/input_event_struct_traits.cc",
        "patchSetId": 2
      },
      "lineNbr": 586,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-06-28T06:20:21Z",
      "side": 1,
      "message": "Perhaps here as well.\n\n(Alternatively, check if there\u0027s any significant codegen difference on the simpler case in WebGestureEvent: it\u0027s possible that since most of this is inlined, that the compiler is smart enough to realize that things can just be constructed directly in the final location.",
      "range": {
        "startLine": 579,
        "startChar": 0,
        "endLine": 586,
        "endChar": 38
      },
      "revId": "20b2d3bcf68ae21cdc69e104512c5e1a2def3984",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}