{
  "comments": [
    {
      "key": {
        "uuid": "e6de668f_9859417d",
        "filename": "content/browser/renderer_host/render_process_host_impl.cc",
        "patchSetId": 10
      },
      "lineNbr": 423,
      "author": {
        "id": 1000046
      },
      "writtenOn": "2017-10-04T19:35:49Z",
      "side": 1,
      "message": "I\u0027m confused...why are we probing manually here instead of calling VirtualAllocEx with NULL for lpAddress?  Also, why are we making the browser do this? It feels sorta odd to have the browser allocate address space in the child process?",
      "revId": "dfa97cc92e2e0ac1c7a29106964c170424990eb0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "37417835_dc5f47a4",
        "filename": "content/browser/renderer_host/render_process_host_impl.cc",
        "patchSetId": 10
      },
      "lineNbr": 423,
      "author": {
        "id": 1001213
      },
      "writtenOn": "2017-10-04T23:42:42Z",
      "side": 1,
      "message": "I adapted this from the NaCl code, which looked for the largest chunk of free address space. However, I think I am confused, not you - we can simply attempt to reserve the memory with VirtualAllocEx as you suggest.",
      "parentUuid": "e6de668f_9859417d",
      "revId": "dfa97cc92e2e0ac1c7a29106964c170424990eb0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8dd7180c_2ead3fcd",
        "filename": "content/browser/renderer_host/render_process_host_impl.cc",
        "patchSetId": 10
      },
      "lineNbr": 452,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2017-10-04T02:20:20Z",
      "side": 1,
      "message": "When is this called?",
      "revId": "dfa97cc92e2e0ac1c7a29106964c170424990eb0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "89b58845_6bac91fa",
        "filename": "content/browser/renderer_host/render_process_host_impl.cc",
        "patchSetId": 10
      },
      "lineNbr": 452,
      "author": {
        "id": 1001213
      },
      "writtenOn": "2017-10-04T02:36:51Z",
      "side": 1,
      "message": "This is only called on Windows:\n\nhttps://cs.chromium.org/chromium/src/content/common/sandbox_win.cc?rcl\u003d7eabc099a4dcbf647d1bffcf009df0fff6b5b33a\u0026l\u003d887\n\nIf you search PostSpawnTarget, you\u0027ll see the existing example of this technique in NaClBrowserHost.",
      "parentUuid": "8dd7180c_2ead3fcd",
      "revId": "dfa97cc92e2e0ac1c7a29106964c170424990eb0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2502bcc4_4bd67e76",
        "filename": "third_party/WebKit/Source/controller/BlinkInitializer.cpp",
        "patchSetId": 10
      },
      "lineNbr": 117,
      "author": {
        "id": 1000046
      },
      "writtenOn": "2017-10-04T19:35:49Z",
      "side": 1,
      "message": "I\u0027m assuming we\u0027re effectively doing this reserve twice because we are trying to move the reserve earlier in the child process lifespan? \n\nIf so...it feels like the better solution is to add a hook in the child process init code that lets you do this reserve earlier?\n\nThe probing is fairly expensive in and of itself since each VirtualQuery() call is a syscall transition. Walking a large fragmented address space can actually be noticeable to a human even on a toy program. And then the magic of trying to find a region of the same request size seems flaky...",
      "range": {
        "startLine": 117,
        "startChar": 0,
        "endLine": 117,
        "endChar": 70
      },
      "revId": "dfa97cc92e2e0ac1c7a29106964c170424990eb0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2b53bd91_7a98cea7",
        "filename": "third_party/WebKit/Source/controller/BlinkInitializer.cpp",
        "patchSetId": 10
      },
      "lineNbr": 117,
      "author": {
        "id": 1001040
      },
      "writtenOn": "2017-10-04T20:05:35Z",
      "side": 1,
      "message": "I agree with ajwong.",
      "parentUuid": "2502bcc4_4bd67e76",
      "range": {
        "startLine": 117,
        "startChar": 0,
        "endLine": 117,
        "endChar": 70
      },
      "revId": "dfa97cc92e2e0ac1c7a29106964c170424990eb0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "35ae665a_7e2ccd58",
        "filename": "third_party/WebKit/Source/controller/BlinkInitializer.cpp",
        "patchSetId": 10
      },
      "lineNbr": 117,
      "author": {
        "id": 1001213
      },
      "writtenOn": "2017-10-04T23:42:42Z",
      "side": 1,
      "message": "This approach was used by NaCl, but there we knew NaCl was the only thing in the child process. That\u0027s not true for renderers, so this magic scan is a little shaky. I could avoid this by sending a message from browser to renderer with the address and reservation size.\n\nIt would be great to avoid this - how can we make the reservation earlier in the process lifetime?",
      "parentUuid": "2b53bd91_7a98cea7",
      "range": {
        "startLine": 117,
        "startChar": 0,
        "endLine": 117,
        "endChar": 70
      },
      "revId": "dfa97cc92e2e0ac1c7a29106964c170424990eb0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "582c61fb_970c0fdc",
        "filename": "third_party/WebKit/Source/controller/BlinkInitializer.cpp",
        "patchSetId": 10
      },
      "lineNbr": 117,
      "author": {
        "id": 1001040
      },
      "writtenOn": "2017-10-05T01:28:16Z",
      "side": 1,
      "message": "Perhaps we could add some kind of `content::ChildProcess::InitializeAfterSpawning` method? I was surprised to see it appears we don\u0027t already have something like that. (I don\u0027t know if that\u0027s a good method name, but you get the idea.)\n\nThen, in `content::RenderProcess`\u0027s override, we could add this reservation code.",
      "parentUuid": "35ae665a_7e2ccd58",
      "range": {
        "startLine": 117,
        "startChar": 0,
        "endLine": 117,
        "endChar": 70
      },
      "revId": "dfa97cc92e2e0ac1c7a29106964c170424990eb0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}