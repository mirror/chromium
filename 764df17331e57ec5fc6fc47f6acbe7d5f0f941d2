{
  "comments": [
    {
      "key": {
        "uuid": "e7d63237_1a58a121",
        "filename": "third_party/WebKit/Source/core/dom/ComputedAccessibleNode.cpp",
        "patchSetId": 8
      },
      "lineNbr": 16,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2017-12-18T06:28:59Z",
      "side": 1,
      "message": "Instead of holding element, what about copying role_ and name_ in the constructor?",
      "revId": "764df17331e57ec5fc6fc47f6acbe7d5f0f941d2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1763b80b_743f5736",
        "filename": "third_party/WebKit/Source/core/dom/ComputedAccessibleNode.cpp",
        "patchSetId": 8
      },
      "lineNbr": 16,
      "author": {
        "id": 1002537
      },
      "writtenOn": "2017-12-18T06:34:02Z",
      "side": 1,
      "message": "We will need many more properties than role and name, so sadly that will not work.",
      "parentUuid": "e7d63237_1a58a121",
      "revId": "764df17331e57ec5fc6fc47f6acbe7d5f0f941d2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7fffd661_bcf476f5",
        "filename": "third_party/WebKit/Source/core/dom/ComputedAccessibleNode.cpp",
        "patchSetId": 8
      },
      "lineNbr": 16,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2017-12-18T07:03:24Z",
      "side": 1,
      "message": "Then how about passing element to ComputePromiseProperty()?\n\nI don\u0027t understand why ComputedAccessibleNode needs to keep Member\u003cElement\u003e.",
      "parentUuid": "1763b80b_743f5736",
      "revId": "764df17331e57ec5fc6fc47f6acbe7d5f0f941d2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "210b6481_5a7c3f9b",
        "filename": "third_party/WebKit/Source/core/dom/ComputedAccessibleNode.cpp",
        "patchSetId": 8
      },
      "lineNbr": 16,
      "author": {
        "id": 1256034
      },
      "writtenOn": "2017-12-19T02:11:02Z",
      "side": 1,
      "message": "At the moment, the Element is how we are getting the computedName/role.",
      "parentUuid": "7fffd661_bcf476f5",
      "revId": "764df17331e57ec5fc6fc47f6acbe7d5f0f941d2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9f77c5d6_3699ec7c",
        "filename": "third_party/WebKit/Source/core/dom/ComputedAccessibleNode.cpp",
        "patchSetId": 8
      },
      "lineNbr": 31,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2017-12-18T06:28:59Z",
      "side": 1,
      "message": "Do you want to resolve the promise at the first access and continue returning the resolved promise at the second or later access?",
      "revId": "764df17331e57ec5fc6fc47f6acbe7d5f0f941d2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c34fda60_0fce8c38",
        "filename": "third_party/WebKit/Source/core/dom/ComputedAccessibleNode.cpp",
        "patchSetId": 8
      },
      "lineNbr": 31,
      "author": {
        "id": 1002537
      },
      "writtenOn": "2017-12-18T06:34:02Z",
      "side": 1,
      "message": "We could use your advice here in particular. Essentially, the promise should return a reference which the caller could hold on to and get more properties later. But calling window.getComputedAccessibleNode() twice with the same element should also return the same object.",
      "parentUuid": "9f77c5d6_3699ec7c",
      "revId": "764df17331e57ec5fc6fc47f6acbe7d5f0f941d2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3f3c4ff2_f5e4a806",
        "filename": "third_party/WebKit/Source/core/dom/ComputedAccessibleNode.cpp",
        "patchSetId": 8
      },
      "lineNbr": 31,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2017-12-18T06:44:44Z",
      "side": 1,
      "message": "Makes sense. Would you add a test for the behavior?",
      "parentUuid": "c34fda60_0fce8c38",
      "revId": "764df17331e57ec5fc6fc47f6acbe7d5f0f941d2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "477925f2_b74e38b1",
        "filename": "third_party/WebKit/Source/core/dom/ComputedAccessibleNode.cpp",
        "patchSetId": 8
      },
      "lineNbr": 31,
      "author": {
        "id": 1002537
      },
      "writtenOn": "2017-12-18T06:55:21Z",
      "side": 1,
      "message": "Yes, the last test in aom-computed-accessible-node.html checks for this behaviour.",
      "parentUuid": "3f3c4ff2_f5e4a806",
      "revId": "764df17331e57ec5fc6fc47f6acbe7d5f0f941d2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d98af7d2_73a68adf",
        "filename": "third_party/WebKit/Source/core/dom/ComputedAccessibleNode.cpp",
        "patchSetId": 8
      },
      "lineNbr": 38,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2017-12-18T07:03:24Z",
      "side": 1,
      "message": "What happens if element-\u003ecomputeName() changes?\n\ni.e., my question is: Should ComputedAccessibleNode::name() return the cached name etc? Or should it return the current name of the element?",
      "revId": "764df17331e57ec5fc6fc47f6acbe7d5f0f941d2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "891fb911_7ca9b785",
        "filename": "third_party/WebKit/Source/core/dom/ComputedAccessibleNode.cpp",
        "patchSetId": 8
      },
      "lineNbr": 38,
      "author": {
        "id": 1256034
      },
      "writtenOn": "2017-12-19T02:11:02Z",
      "side": 1,
      "message": "Good point. I\u0027ve changed it so that if the role or name is requested from the ComputedAccessibleNode, it will in turn request it from the Element itself rather than storing the name/role as a member, and added a test for this case. This does mean that ComputedAccessibleNode needs to store the Element internally though.",
      "parentUuid": "d98af7d2_73a68adf",
      "revId": "764df17331e57ec5fc6fc47f6acbe7d5f0f941d2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b2e0e8f4_3a154bf8",
        "filename": "third_party/WebKit/Source/core/dom/Element.h",
        "patchSetId": 8
      },
      "lineNbr": 298,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2017-12-18T06:28:59Z",
      "side": 1,
      "message": "ComputedAccessibleNode\n\nBlink uses camelCase only for an IDL-exposed method.",
      "revId": "764df17331e57ec5fc6fc47f6acbe7d5f0f941d2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2e481298_dfbee7b0",
        "filename": "third_party/WebKit/Source/core/dom/Element.h",
        "patchSetId": 8
      },
      "lineNbr": 298,
      "author": {
        "id": 1256034
      },
      "writtenOn": "2017-12-19T02:11:02Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b2e0e8f4_3a154bf8",
      "revId": "764df17331e57ec5fc6fc47f6acbe7d5f0f941d2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "67b436fc_d4a46479",
        "filename": "third_party/WebKit/Source/core/frame/LocalDOMWindow.cpp",
        "patchSetId": 8
      },
      "lineNbr": 1110,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2017-12-18T06:28:59Z",
      "side": 1,
      "message": "elt \u003d\u003e element\n\nBlink prefers a fully qualified name.",
      "revId": "764df17331e57ec5fc6fc47f6acbe7d5f0f941d2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6a305f72_73f60760",
        "filename": "third_party/WebKit/Source/core/frame/LocalDOMWindow.cpp",
        "patchSetId": 8
      },
      "lineNbr": 1110,
      "author": {
        "id": 1256034
      },
      "writtenOn": "2017-12-19T02:11:02Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "67b436fc_d4a46479",
      "revId": "764df17331e57ec5fc6fc47f6acbe7d5f0f941d2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d642d117_b8dfb4af",
        "filename": "third_party/WebKit/Source/core/frame/Window.idl",
        "patchSetId": 8
      },
      "lineNbr": 179,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2017-12-18T06:28:59Z",
      "side": 1,
      "message": "Why do you want to add this method to Window, not Element?",
      "revId": "764df17331e57ec5fc6fc47f6acbe7d5f0f941d2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cae6f454_63642cc7",
        "filename": "third_party/WebKit/Source/core/frame/Window.idl",
        "patchSetId": 8
      },
      "lineNbr": 179,
      "author": {
        "id": 1002537
      },
      "writtenOn": "2017-12-18T06:34:02Z",
      "side": 1,
      "message": "This is an API design question - our thought is that it should be analogous to window.getComputedStyle(element).",
      "parentUuid": "d642d117_b8dfb4af",
      "revId": "764df17331e57ec5fc6fc47f6acbe7d5f0f941d2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}