{
  "comments": [
    {
      "key": {
        "uuid": "a40e7b8a_e4942171",
        "filename": "base/memory/protected_memory_cfi.h",
        "patchSetId": 6
      },
      "lineNbr": 48,
      "author": {
        "id": 1001040
      },
      "writtenOn": "2017-10-19T19:57:15Z",
      "side": 1,
      "message": "Nit: My own preference is to use full words, e.g. |FunctionType| and |function_|. But it\u0027s just a nit, not a blocker.",
      "revId": "b9b1dcce7d44002f978916ccb775f092ed375bfb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "684c9d95_8771e9fa",
        "filename": "base/memory/protected_memory_posix.cc",
        "patchSetId": 6
      },
      "lineNbr": 68,
      "author": {
        "id": 1001040
      },
      "writtenOn": "2017-10-19T19:57:15Z",
      "side": 1,
      "message": "It might? make sense to check for the errno value we expect (EFAULT, right?). And it might make sense? to not consider EINTR to be a successful check that the memory is read-only, which I think the current code does. See base/posix/eintr_wrapper.h for a potentially convenient way to factor out EINTR and allow you to focus just on EFAULT. Surprisingly, eintr_wrapper.h doesn\u0027t do anything about EAGAIN, which I think you might also want to handle?\n\nI\u0027m really in the edge-case weeds here, I realize. :)\n\nIt also might make sense to wrap everything in an #ifdef so that you don\u0027t do all the prep work in production builds, whose sole purpose is to support the DCHECK_EQ. I\u0027m not sure if the compiler is smart enough to realize that.",
      "revId": "b9b1dcce7d44002f978916ccb775f092ed375bfb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a7dfddbe_1ea44a95",
        "filename": "base/memory/protected_memory_posix.cc",
        "patchSetId": 6
      },
      "lineNbr": 68,
      "author": {
        "id": 1238767
      },
      "writtenOn": "2017-10-19T20:46:36Z",
      "side": 1,
      "message": "I hadn\u0027t considered EINTR/EAGAIN, that\u0027s a good one to handle.",
      "parentUuid": "684c9d95_8771e9fa",
      "revId": "b9b1dcce7d44002f978916ccb775f092ed375bfb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1899cc50_e6013905",
        "filename": "base/memory/protected_memory_posix.cc",
        "patchSetId": 6
      },
      "lineNbr": 81,
      "author": {
        "id": 1001040
      },
      "writtenOn": "2017-10-19T19:57:15Z",
      "side": 1,
      "message": "Same here: it\u0027s some not-quite-trivial work, potentially performed even in production, to support a DCHECK.",
      "revId": "b9b1dcce7d44002f978916ccb775f092ed375bfb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "405468d2_d0838c8c",
        "filename": "base/memory/protected_memory_posix.cc",
        "patchSetId": 6
      },
      "lineNbr": 81,
      "author": {
        "id": 1238767
      },
      "writtenOn": "2017-10-19T20:46:36Z",
      "side": 1,
      "message": "The #if !DCHECK_IS_ON() above will create an empty AssertMemoryIsReadOnly for production builds.",
      "parentUuid": "1899cc50_e6013905",
      "revId": "b9b1dcce7d44002f978916ccb775f092ed375bfb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}