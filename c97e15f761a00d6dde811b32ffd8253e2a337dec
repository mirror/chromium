{
  "comments": [
    {
      "key": {
        "uuid": "31f76c92_58278169",
        "filename": "chrome/browser/apps/guest_view/web_view_browsertest.cc",
        "patchSetId": 6
      },
      "lineNbr": 524,
      "author": {
        "id": 1113941
      },
      "writtenOn": "2017-11-27T08:17:24Z",
      "side": 1,
      "message": "Let\u0027s make a wrapper function with a similar signature as the old one that just returns the unique_ptr\u003cdevice::FakeGeolocationContext\u003e. That way we\u0027re preserving the usability of the test interface compared to what it was before.",
      "revId": "c97e15f761a00d6dde811b32ffd8253e2a337dec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ed945e32_8ae2eae4",
        "filename": "chrome/browser/apps/guest_view/web_view_browsertest.cc",
        "patchSetId": 6
      },
      "lineNbr": 524,
      "author": {
        "id": 1177311
      },
      "writtenOn": "2017-11-27T13:01:29Z",
      "side": 1,
      "message": "Yes, we should wrap it.\nConsidering there are still 2 another testing clients waiting to be converted. How about I do the wrap after finishing all of them? I\u0027m not sure the wrapping function is common to all of them.\n\nThis will be wrapped as a static member of FakeGeolocationContext like:\nstatic std::unique_ptr\u003cdevice::FakeGeolocationContext\u003e\nOverrideGeolocationForDevice(mojom::Geoposition position);\nright?",
      "parentUuid": "31f76c92_58278169",
      "revId": "c97e15f761a00d6dde811b32ffd8253e2a337dec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9ddada03_12feb7be",
        "filename": "chrome/browser/apps/guest_view/web_view_browsertest.cc",
        "patchSetId": 6
      },
      "lineNbr": 524,
      "author": {
        "id": 1177311
      },
      "writtenOn": "2017-11-27T13:03:41Z",
      "side": 1,
      "message": "static std::unique_ptr\u003cdevice::FakeGeolocationContext\u003e\nOverrideGeolocationForService(mojom::Geoposition position);\nand\nstatic std::unique_ptr\u003cdevice::FakeGeolocationContext\u003e\nOverrideGeolocationForConnector(mojom::Geoposition position);",
      "parentUuid": "ed945e32_8ae2eae4",
      "revId": "c97e15f761a00d6dde811b32ffd8253e2a337dec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e3bc7a36_d94b2037",
        "filename": "chrome/browser/apps/guest_view/web_view_browsertest.cc",
        "patchSetId": 6
      },
      "lineNbr": 524,
      "author": {
        "id": 1113941
      },
      "writtenOn": "2017-11-28T08:50:32Z",
      "side": 1,
      "message": "I think that you\u0027ve converted them all now, so we should be able to add this right?\n\nInstead of a mojom::Geoposition, can we have this just take in a (lat, long) pair like the previous signature did? It would be nice if these tests didn\u0027t have to grow at all as a result of this change, and that seems doable.",
      "parentUuid": "9ddada03_12feb7be",
      "revId": "c97e15f761a00d6dde811b32ffd8253e2a337dec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3b2ab777_3374d387",
        "filename": "chrome/browser/apps/guest_view/web_view_browsertest.cc",
        "patchSetId": 6
      },
      "lineNbr": 533,
      "author": {
        "id": 1113941
      },
      "writtenOn": "2017-11-27T08:17:24Z",
      "side": 1,
      "message": "Do we need to clear this override in the teardown of the tests, or no?",
      "range": {
        "startLine": 533,
        "startChar": 39,
        "endLine": 533,
        "endChar": 64
      },
      "revId": "c97e15f761a00d6dde811b32ffd8253e2a337dec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1eb87e27_54e51c50",
        "filename": "chrome/browser/apps/guest_view/web_view_browsertest.cc",
        "patchSetId": 6
      },
      "lineNbr": 533,
      "author": {
        "id": 1177311
      },
      "writtenOn": "2017-11-27T13:01:29Z",
      "side": 1,
      "message": "It is safe. The device::mojom::GeolocationContext::Name_ is the key, inside SetGlobalBinderForTesting() it always clear the old value on the key before set a new value.",
      "parentUuid": "3b2ab777_3374d387",
      "range": {
        "startLine": 533,
        "startChar": 39,
        "endLine": 533,
        "endChar": 64
      },
      "revId": "c97e15f761a00d6dde811b32ffd8253e2a337dec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "73d6165b_6fbb31d0",
        "filename": "chrome/browser/apps/guest_view/web_view_browsertest.cc",
        "patchSetId": 6
      },
      "lineNbr": 533,
      "author": {
        "id": 1113941
      },
      "writtenOn": "2017-11-28T08:50:32Z",
      "side": 1,
      "message": "What if some followup test wants to connect to the real impl (i.e., there\u0027s no followup call to SetGlobalBinderForTesting)? Will they get this override instead, or does the override implicitly get torn down as part of teardown? I imagine it\u0027s the latter, just want to be sure.",
      "parentUuid": "1eb87e27_54e51c50",
      "range": {
        "startLine": 533,
        "startChar": 39,
        "endLine": 533,
        "endChar": 64
      },
      "revId": "c97e15f761a00d6dde811b32ffd8253e2a337dec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8ad82cf6_b8266463",
        "filename": "chrome/browser/geolocation/geolocation_browsertest.cc",
        "patchSetId": 6
      },
      "lineNbr": 346,
      "author": {
        "id": 1177311
      },
      "writtenOn": "2017-11-24T13:35:30Z",
      "side": 1,
      "message": "The WebContentImpl tries to connect Device Service earlier than SetUpOnMainThread(), so we move the SetGlobalBinderForTesting() to constructor.",
      "range": {
        "startLine": 334,
        "startChar": 2,
        "endLine": 346,
        "endChar": 61
      },
      "revId": "c97e15f761a00d6dde811b32ffd8253e2a337dec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9267f975_7d8db12d",
        "filename": "chrome/browser/geolocation/geolocation_browsertest.cc",
        "patchSetId": 6
      },
      "lineNbr": 346,
      "author": {
        "id": 1113941
      },
      "writtenOn": "2017-11-28T08:50:32Z",
      "side": 1,
      "message": "This would be useful to have in a comment here.",
      "parentUuid": "8ad82cf6_b8266463",
      "range": {
        "startLine": 334,
        "startChar": 2,
        "endLine": 346,
        "endChar": 61
      },
      "revId": "c97e15f761a00d6dde811b32ffd8253e2a337dec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b0ecf51d_293d129e",
        "filename": "device/geolocation/public/cpp/fake_geolocation.h",
        "patchSetId": 6
      },
      "lineNbr": 20,
      "author": {
        "id": 1113941
      },
      "writtenOn": "2017-11-27T08:17:24Z",
      "side": 1,
      "message": "Please add a comment documenting this class\u0027 purpose and usage model. Actually, it would be great to add a simple service test of this class itself that both tests its correctness but also serves as an illustration of how to use this class to mock out geolocation.",
      "revId": "c97e15f761a00d6dde811b32ffd8253e2a337dec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9a19eacb_d73668eb",
        "filename": "device/geolocation/public/cpp/fake_geolocation.h",
        "patchSetId": 6
      },
      "lineNbr": 20,
      "author": {
        "id": 1177311
      },
      "writtenOn": "2017-11-27T13:01:29Z",
      "side": 1,
      "message": "Comments is added. Done.\nI\u0027m not sure is it a little bit overdone to test the testing-codes? And the GeolocationBrowserTests are quite complex that actually conversely test the correctness of the FakeGeolocation too.",
      "parentUuid": "b0ecf51d_293d129e",
      "revId": "c97e15f761a00d6dde811b32ffd8253e2a337dec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7bb391ca_d2a9600e",
        "filename": "device/geolocation/public/cpp/fake_geolocation.h",
        "patchSetId": 6
      },
      "lineNbr": 20,
      "author": {
        "id": 1113941
      },
      "writtenOn": "2017-11-28T08:50:32Z",
      "side": 1,
      "message": "I was thinking that if we make a utility function that does all the work for you by just taking in a (lat, long), then it would be useful to just have a simple test that calls that function, then requests geolocation and verifies that the returned geoposition has the specified (lat, long). In general I think in //services we should err on the side of \"over\" -- over-documentation, over-testing, etc. Reason being that we\u0027re hoping that these services will form the foundation of Chromium-based products for the next N years :).",
      "parentUuid": "9a19eacb_d73668eb",
      "revId": "c97e15f761a00d6dde811b32ffd8253e2a337dec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}