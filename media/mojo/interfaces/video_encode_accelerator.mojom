// Copyright 2017 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module media.mojom;

import "media/mojo/interfaces/media_types.mojom";
import "mojo/common/time.mojom";
import "ui/gfx/geometry/mojo/geometry.mojom";

// Equivalent to media::VideoEncodeAccelerator::Error
enum VideoEncodeAcceleratorError {
  // An operation was attempted during an incompatible encoder state.
  ILLEGAL_STATE_ERROR,
  // Invalid argument was passed to an API method.
  INVALID_ARGUMENT_ERROR,
  // A failure occurred at the GPU process or one of its dependencies. Examples
  // of such failures include GPU hardware failures, GPU driver failures, GPU
  // library failures, GPU process programming errors, and so on.
  PLATFORM_FAILURE_ERROR
};

interface VideoEncodeAccelerator {
  // Responded by VideoEncodeAcceleratorClient.RequireBitstreamBuffers().
  Initialize(VideoPixelFormat input_format,
             gfx.mojom.Size input_visible_size,
             VideoCodecProfile output_profile,
             uint32 initial_bitrate,
             VideoEncodeAcceleratorClient client);

  Encode(int32 buffer_id, VideoFrame frame, bool force_keyframe);

  // TODO(mcasas): Find a better name for this method after finishing the
  // transition from IPC to mojom, https://crbug.com/736517.
  UseOutputBitstreamBuffer(int32 buffer_id, handle<shared_buffer> buffer);

  RequestEncodingParametersChange(uint32 bitrate, uint32 framerate);
};

interface VideoEncodeAcceleratorClient {
  // Response to VideoEncodeAccelerator.Initialize().
  RequireBitstreamBuffers(uint32 input_count,
                          gfx.mojom.Size input_coded_size,
                          uint32 output_buffer_size);

  // TODO(mcasas): parse and decide if this is relevant in a post-IPC world.
  // Used to be kept around and bound to service-side VideoFrame lifetime.
  NotifyInputDone(int32 buffer_id);

  BitstreamBufferReady(int32 buffer_id, uint32 payload_size, bool key_frame,
                       mojo.common.mojom.TimeDelta timestamp);

  NotifyError(VideoEncodeAcceleratorError error);
};
