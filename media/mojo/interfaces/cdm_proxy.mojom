module media.mojom;

struct KeyInfo {
  // ID of the crypto session associated to this key information.
  uint32 crypto_session_id;
  // The key ID of the key.
  array<uint8> key_id;
  // Opaque key blob for
  array<uint8> key_blob;
  // Indicates whether this key/key_id is usable.
  // The caller sets this to false to invalidate a key.
  bool is_usable_key;
};

interface CdmProxy {
  enum Status {
    kOk,
    kFail,
  };

  enum Protocol {
    KIntelCSMEv10,  // Bedrock. v10 for OEMCrypto v10.
    kIntelPAVP,     // L2.
    kRsaHardware,
    kRsaSoftware,
  };

  Initialize() => (Status status, Protocol protocol, uint32 crypto_session_id);

  Process(uint32 function_id,
          uint32 crypto_session_id,
          array<uint8> input_data,
          uint32 expected_output_size) => (Status status, array<uint8> output);

  CreateMediaCryptoSessions(
      bool create_video_crypto_session,
      array<uint8> video_private_data,
      bool create_audio_crypto_session,
      array<uint8> audio_private_data) =>
          (Status status,
           uint32 video_crypto_session_id,
           uint32 audio_crypto_session_id,
           uint64 video_private_output_data,
           uint64 audio_private_output_data);

  SetKeyInfo(array<KeyInfo> key_infos);
};