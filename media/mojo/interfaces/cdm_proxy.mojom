module media.mojom;

// Key information structure containing data necessary to decrypt/decode media.
struct CdmProxyKeyInfo {
  // Crypto session for decryption.
  uint32 crypto_session_id;
  // ID of the key.
  array<uint8> key_id;
  // Opaque key blob for decrypting or decoding.
  array<uint8> key_blob;
  // Indicates whether this key/key_id is usable. The caller sets this to false
  // to invalidate a key.
  bool is_usable_key;
};

// In general, the interpretation of the method and callback parameters are
// protocol dependent.
interface CdmProxy {
  // See media/cdm/cdm_proxy.h.
  [Native]
  enum Status;

  // See media/cdm/cdm_proxy.h.
  [Native]
  enum Protocol;

  // See media/cdm/cdm_proxy.h.
  [Native]
  enum Function;

  // Intializes the proxy.
  // If the proxy created a crypto session, then the ID for the crypto
  // session is |crypto_session_id|.
  Initialize(CdmProxyClient client) => (Status status,
                                        Protocol protocol,
                                        uint32 crypto_session_id);

  // Processes data and updates proxy.
  // |function| specifies what type of function to use.
  // |crypto_session_id| is a value returned from Initialize() or
  // CreateMediaCryptoSessions().
  // |input_data| is the input data to be processed.
  // |expected_output_data_size| is the expected size of the output data.
  // Whether this value is used or not is protocol dependent.
  // Output data is passed back in |output_data|.
  Process(Function function,
          uint32 crypto_session_id,
          array<uint8> input_data,
          uint32 expected_output_data_size) => (Status status,
                                                array<uint8> output_data);

  // Creates a crypto session for handling media.
  // If extra data has to be passed to further setup the media crypto session,
  // pass the data as |input_data|.
  // |crypto_session_id| is the ID for the crypto session.
  // |output_data| is extra value, if any.
  CreateMediaCryptoSession(array<uint8> input_data) => (
      Status status, uint32 crypto_session_id, uint64 output_data);

  // Set the key information to the proxy for later use.
  SetKeyInfo(array<CdmProxyKeyInfo> key_infos);
};

// Client of CdmProxy.
interface CdmProxyClient {
  // Notifies the client that there has been a hardware reset.
  NotifyHardwareReset();
};