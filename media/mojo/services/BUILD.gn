# Copyright 2014 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//mojo/public/mojo_application.gni")

# Target naming conventions:
# - converters: C++/Mojo type converters.
# - proxy: C++ implementations supported by mojo services.
# - service: Mojo interface implementations.
# - unittests: Unit tests for a particular class/file.
# - test: Tests for a particular app, e.g. media.

source_set("converters") {
  sources = [
    "media_type_converters.cc",
    "media_type_converters.h",
  ]

  deps = [
    "//base",
    "//media",
    "//media/mojo/interfaces",
    "//mojo/common",
    "//mojo/converters/geometry",
    "//mojo/environment:chromium",
    "//mojo/public/c/system:for_component",
    "//mojo/services/geometry/public/interfaces",
    "//skia",
  ]
}

# media::Renderer implementation using mojo::MediaRenderer.
source_set("renderer_proxy") {
  sources = [
    "mojo_demuxer_stream_impl.cc",
    "mojo_demuxer_stream_impl.h",
    "mojo_renderer_factory.cc",
    "mojo_renderer_factory.h",
    "mojo_renderer_impl.cc",
    "mojo_renderer_impl.h",
  ]

  deps = [
    ":converters",
    "//base",
    "//media",
    "//media/mojo/interfaces",
    "//mojo/common",
    "//mojo/environment:chromium",
    "//mojo/public/c/system:for_component",
    "//mojo/public/cpp/application",
    "//mojo/public/interfaces/application",
  ]
}

# MediaRenderer service; without a specific config.
source_set("renderer_service_generic") {
  sources = [
    "demuxer_stream_provider_shim.cc",
    "demuxer_stream_provider_shim.h",
    "mojo_demuxer_stream_adapter.cc",
    "mojo_demuxer_stream_adapter.h",
    "mojo_renderer_service.cc",
    "mojo_renderer_service.h",
    "renderer_config.cc",
    "renderer_config.h",
  ]

  deps = [
    ":converters",
    "//base",
    "//media",
    "//media/mojo/interfaces",
    "//media:shared_memory_support",
    "//mojo/common",
  ]
}

# MediaRenderer service with a default config.
source_set("renderer_service") {
  sources = [
    "renderer_config_default.cc",
  ]

  deps = [
    ":renderer_service_generic",
    "//base",
    "//media",
    "//media:shared_memory_support",
  ]
}

test("media_mojo_unittests") {
  sources = [
    "media_type_converters_unittest.cc",
  ]

  deps = [
    ":converters",
    "//base",
    "//base/test:test_support",
    "//media",
    "//media/mojo/interfaces",
    "//mojo/edk/system",
    "//mojo/edk/test:run_all_unittests",
    "//mojo/environment:chromium",
    "//testing/gtest",
  ]
}

if (!is_component_build) {
  mojo_native_application("media") {
    sources = [
      "mojo_media_application.cc",
    ]

    deps = [
      ":renderer_service",
      "//mojo/application",
      "//mojo/public/c/system:for_shared_library",
    ]
  }

  # Not a 'test' because this is loaded via mojo_shell as an app.
  # To run the test:
  #   out/Debug/mojo_shell mojo:media_test
  # You can get "mojo_shell" using mojo/public/tools/download_shell_binary.py
  mojo_native_application("media_test") {
    testonly = true
    sources = [
      "media_renderer_apptest.cc",
    ]

    deps = [
      ":media",
      ":renderer_proxy",
      "//base",
      "//media",
      "//media/mojo/interfaces",
      "//media:shared_memory_support",
      "//mojo/application",
      "//mojo/application:test_support",
      "//mojo/common",
      "//mojo/environment:chromium",
      "//mojo/public/c/system:for_shared_library",
    ]
  }
}

group("services") {
  deps = [
    ":renderer_proxy",
  ]

  if (!is_component_build) {
    deps += [ ":media" ]
  }
}

group("tests") {
  testonly = true
  deps = [
    ":media_mojo_unittests",
  ]

  if (!is_component_build) {
    deps += [ ":media_test" ]
  }
}
