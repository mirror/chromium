// Copyright 2015 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef MEDIA_CDM_CDM_ADAPTER_H_
#define MEDIA_CDM_CDM_ADAPTER_H_

#include <string>
#include <vector>

#include "base/files/file_path.h"
#include "base/macros.h"
#include "base/memory/ref_counted.h"
#include "media/base/cdm_config.h"
#include "media/base/media_export.h"
#include "media/base/media_keys.h"

namespace media {

// Due to windows warning C4275 (should not export a class that inherits from
// a non-exported class), this class exists as a wrapper for CdmAdapterImpl.
class MEDIA_EXPORT CdmAdapter : public MediaKeys {
 public:
  CdmAdapter();

  // Load the CDM using |cdm_path| and initialize it using |key_system| and
  // |cdm_config|. Callbacks will be used for events generated by the CDM.
  // |promise| is resolved if the CDM is loaded and initialized correctly,
  // otherwise it is rejected.
  void Initialize(const std::string& key_system,
                  const base::FilePath& cdm_path,
                  const CdmConfig& cdm_config,
                  const SessionMessageCB& session_message_cb,
                  const SessionClosedCB& session_closed_cb,
                  const LegacySessionErrorCB& legacy_session_error_cb,
                  const SessionKeysChangeCB& session_keys_change_cb,
                  const SessionExpirationUpdateCB& session_expiration_update_cb,
                  scoped_ptr<SimpleCdmPromise> promise);

  // MediaKeys implementation.
  void SetServerCertificate(const std::vector<uint8_t>& certificate,
                            scoped_ptr<SimpleCdmPromise> promise) override;
  void CreateSessionAndGenerateRequest(
      SessionType session_type,
      EmeInitDataType init_data_type,
      const std::vector<uint8_t>& init_data,
      scoped_ptr<NewSessionCdmPromise> promise) override;
  void LoadSession(SessionType session_type,
                   const std::string& session_id,
                   scoped_ptr<NewSessionCdmPromise> promise) override;
  void UpdateSession(const std::string& session_id,
                     const std::vector<uint8_t>& response,
                     scoped_ptr<SimpleCdmPromise> promise) override;
  void CloseSession(const std::string& session_id,
                    scoped_ptr<SimpleCdmPromise> promise) override;
  void RemoveSession(const std::string& session_id,
                     scoped_ptr<SimpleCdmPromise> promise) override;
  CdmContext* GetCdmContext() override;

 private:
  ~CdmAdapter() final;

  scoped_refptr<MediaKeys> cdm_;
  DISALLOW_COPY_AND_ASSIGN(CdmAdapter);
};

}  // namespace media

#endif  // MEDIA_CDM_CDM_ADAPTER_H_
