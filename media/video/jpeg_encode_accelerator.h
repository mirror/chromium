// Copyright 2017 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef MEDIA_VIDEO_JPEG_ENCODE_ACCELERATOR_H_
#define MEDIA_VIDEO_JPEG_ENCODE_ACCELERATOR_H_

#include <stdint.h>

#include "media/base/bitstream_buffer.h"
#include "media/base/media_export.h"
#include "media/base/video_frame.h"

namespace media {

// JPEG encoder interface.
class MEDIA_EXPORT JpegEncodeAccelerator {
 public:
  // Callback for JPEG encoder initialization.
  typedef base::Callback<void(bool success)> InitCB;

  static const int32_t kInvalidBitstreamBufferId = -1;

  // Enumeration of encode errors generated by NotifyError callback.
  enum Error {
    // No error. Encode succeeded.
    NO_ERRORS,
    // Invalid argument was passed to an API method, e.g. the JPEG width/height
    // are too big for JEA.
    INVALID_ARGUMENT,
    // Input is unreadable, e.g. failed to map on another process.
    UNREADABLE_INPUT,
    // Failed to parse the incoming I420 image.
    PARSE_IMAGE_FAILED,
    // A fatal failure occurred in the GPU process layer or one of its
    // dependencies. Examples of such failures include hardware failures,
    // driver failures, library failures, browser programming errors, and so
    // on. Client is responsible for destroying JEA after receiving this.
    PLATFORM_FAILURE,
    // Largest used enum. This should be adjusted when new errors are added.
    LARGEST_ERROR_ENUM = PLATFORM_FAILURE,
  };

  class MEDIA_EXPORT Client {
   public:
    // Callback called after each successful Encode().
    // Parameters:
    //  |bitstream_buffer_id| is the |id_| of input BitstreamBuffer
    //  corresponding to Encode() call.
    //  |video_frame| is the encoded JPEG frame.
    virtual void VideoFrameReady(int video_frame_id) = 0;

    // Callback to notify errors. Client is responsible for destroying JEA when
    // receiving a fatal error, i.e. PLATFORM_FAILURE. For other errors, client
    // is informed about the buffer that failed to encode and may continue
    // using the same instance of JEA.
    // Parameters:
    //  |error| is the error code.
    //  |bitstream_buffer_id| is the |id_| of the input BitstreamBuffer that
    //  resulted in the recoverable error. For PLATFORM_FAILURE,
    //  |bitstream_buffer_id| may be kInvalidBitstreamBufferId if the error was
    //  not related to any particular frames being processed.
    virtual void NotifyError(int video_frame_id, Error error) = 0;

   protected:
    virtual ~Client() {}
  };

  // Destroys the encoder: all pending inputs are dropped immediately. This
  // call may asynchronously free system resources, but its client-visible
  // effects are synchronous. After destructor returns, no more callbacks
  // will be made on the client.
  virtual ~JpegEncodeAccelerator() = 0;

  // JPEG encoder functions.

  // Initializes the JPEG encoder. Should be called once per encoder
  // construction. This call is synchronous and returns true iff initialization
  // is successful.
  // Parameters:
  //  |client| is the Client interface for encode callback. The provided
  //  pointer must be valid until destructor is called.
  virtual bool Initialize(Client* client) = 0;

  // Async version of above Initialize(..) function. Executes the |init_cb|
  // upon completion.
  virtual void InitializeAsync(Client* client, InitCB init_cb) {}

  // Gets the maximum possible encoded result size.
  virtual size_t GetMaxCodedBufferSize(int width, int height) = 0;

  // Encodes the given video frame that contains one I420 picture. Client will
  // receive the encoded result in VideoFrameReady callback with the
  // corresponding |unique_id_| in given |video_frame_|, or NotifyError.
  // Parameters:
  //  |bitstream_buffer| contains the I420 frame to be encoded.
  //  |width| of the frame in |bitstream_buffer|
  //  |height| of the frame in |bitstream_buffer|
  virtual void Encode(const scoped_refptr<media::VideoFrame>& video_frame,
                      const BitstreamBuffer& bitstream_buffer) = 0;

  // Returns true when the JPEG encoder is supported. This can be called before
  // Initialize().
  virtual bool IsSupported() = 0;
};

}  // namespace media

#endif  // MEDIA_VIDEO_JPEG_ENCODE_ACCELERATOR_H_
