{
  "comments": [
    {
      "key": {
        "uuid": "639cb99e_ba487e70",
        "filename": "components/exo/shell_surface.cc",
        "patchSetId": 2
      },
      "lineNbr": 1010,
      "author": {
        "id": 1000539
      },
      "writtenOn": "2017-12-06T17:55:10Z",
      "side": 1,
      "message": "can we move this TODO to ClientControlledShellSurface somehow? ideally we\u0027d not have any references to derived classes in here..",
      "range": {
        "startLine": 1008,
        "startChar": 2,
        "endLine": 1010,
        "endChar": 39
      },
      "revId": "2933fb6674f8ee693dcb9146be5c84c1f2202ebb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "927e58e7_53e582a6",
        "filename": "components/exo/shell_surface.cc",
        "patchSetId": 2
      },
      "lineNbr": 1010,
      "author": {
        "id": 1148594
      },
      "writtenOn": "2017-12-06T19:31:54Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "639cb99e_ba487e70",
      "range": {
        "startLine": 1008,
        "startChar": 2,
        "endLine": 1010,
        "endChar": 39
      },
      "revId": "2933fb6674f8ee693dcb9146be5c84c1f2202ebb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "46543fa1_d379035b",
        "filename": "components/exo/shell_surface.cc",
        "patchSetId": 2
      },
      "lineNbr": 1043,
      "author": {
        "id": 1000539
      },
      "writtenOn": "2017-12-06T17:55:10Z",
      "side": 1,
      "message": "can derived classes just override OnMouseEvent instead of us having to add this virtual function? I\u0027d like to minimize the number of virtual functions that base class uses as that flow is always harder to follow compared to a virtual function called from outside but overridden by a derived class. if we can at least avoid calling virtual functions from within virtual functions would be nice.",
      "range": {
        "startLine": 1043,
        "startChar": 10,
        "endLine": 1043,
        "endChar": 24
      },
      "revId": "2933fb6674f8ee693dcb9146be5c84c1f2202ebb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "00a25e61_cf7b483b",
        "filename": "components/exo/shell_surface.cc",
        "patchSetId": 2
      },
      "lineNbr": 1043,
      "author": {
        "id": 1148594
      },
      "writtenOn": "2017-12-06T19:31:54Z",
      "side": 1,
      "message": "The derived classes would duplicate the boilerplate here. FWIW, this is consistent with views::View, which branches on the event type and dispatches to virtual handlers.",
      "parentUuid": "46543fa1_d379035b",
      "range": {
        "startLine": 1043,
        "startChar": 10,
        "endLine": 1043,
        "endChar": 24
      },
      "revId": "2933fb6674f8ee693dcb9146be5c84c1f2202ebb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "69a07409_e2ab8c7a",
        "filename": "components/exo/shell_surface.cc",
        "patchSetId": 2
      },
      "lineNbr": 1043,
      "author": {
        "id": 1000539
      },
      "writtenOn": "2017-12-07T20:26:19Z",
      "side": 1,
      "message": "Code duplication is imo sometimes preferred over complicated inheritance. And there are other ways to avoid code duplication here. Views code is really hard to follow as a result of it\u0027s extreme use of inheritance imo. I\u0027d like to avoid the same for exo classes.\n\nThis is fine for now but I\u0027d like to see us move towards a less complicated code reuse pattern between shell surface classes in the near future.",
      "parentUuid": "00a25e61_cf7b483b",
      "range": {
        "startLine": 1043,
        "startChar": 10,
        "endLine": 1043,
        "endChar": 24
      },
      "revId": "2933fb6674f8ee693dcb9146be5c84c1f2202ebb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2d142a78_b43972cb",
        "filename": "components/exo/shell_surface.cc",
        "patchSetId": 2
      },
      "lineNbr": 1075,
      "author": {
        "id": 1000539
      },
      "writtenOn": "2017-12-06T17:55:10Z",
      "side": 1,
      "message": "ditto: can we move this todo to ClientControlledShellSurface? maybe just add a ClientControlledShellSurface::OnGestureEvent that has this todo and calls ShellSurface::OnGestureEvent..",
      "range": {
        "startLine": 1074,
        "startChar": 2,
        "endLine": 1075,
        "endChar": 68
      },
      "revId": "2933fb6674f8ee693dcb9146be5c84c1f2202ebb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c0d14e34_73cb6c28",
        "filename": "components/exo/shell_surface.cc",
        "patchSetId": 2
      },
      "lineNbr": 1075,
      "author": {
        "id": 1148594
      },
      "writtenOn": "2017-12-06T19:31:54Z",
      "side": 1,
      "message": "The TODO is for this class. Removed the reference to ClientControlledShellSurface.",
      "parentUuid": "2d142a78_b43972cb",
      "range": {
        "startLine": 1074,
        "startChar": 2,
        "endLine": 1075,
        "endChar": 68
      },
      "revId": "2933fb6674f8ee693dcb9146be5c84c1f2202ebb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fedf2060_788e2303",
        "filename": "components/exo/shell_surface.h",
        "patchSetId": 2
      },
      "lineNbr": 69,
      "author": {
        "id": 1000539
      },
      "writtenOn": "2017-12-06T17:55:10Z",
      "side": 1,
      "message": "Is the value of container_ not enough for base shell surface class? I\u0027d like to keep all popup related logic in Xdg derived classes.",
      "revId": "2933fb6674f8ee693dcb9146be5c84c1f2202ebb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9d9e1bcd_2328d8b1",
        "filename": "components/exo/shell_surface.h",
        "patchSetId": 2
      },
      "lineNbr": 69,
      "author": {
        "id": 1148594
      },
      "writtenOn": "2017-12-06T19:31:54Z",
      "side": 1,
      "message": "I think an explicit flag is clearer and more flexible than requiring popups to be in a specific container. Shouldn\u0027t the popup logic be shared by wl_shell_surface::set_popup?",
      "parentUuid": "fedf2060_788e2303",
      "revId": "2933fb6674f8ee693dcb9146be5c84c1f2202ebb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "440a4fa5_2a240376",
        "filename": "components/exo/shell_surface.h",
        "patchSetId": 2
      },
      "lineNbr": 69,
      "author": {
        "id": 1000539
      },
      "writtenOn": "2017-12-07T20:26:19Z",
      "side": 1,
      "message": "Popup really means a lot more than what we implement today. We need to support grabs and proper dismissing of popup chains. I\u0027d rather not see any of that as part of the base shell surface class but in a derived XdgSurface class. So I\u0027d prefer if the concept didn\u0027t explicitly exist at this level but it was rather a \"is_not_movable\" here as that\u0027s all we care about. container_ value already kind of means this but it\u0027s fine to add something more explicit if you prefer.\n\nFyi, there are no plans to implement popups for wl_shell_surface today.",
      "parentUuid": "9d9e1bcd_2328d8b1",
      "revId": "2933fb6674f8ee693dcb9146be5c84c1f2202ebb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4435b0f6_f008880f",
        "filename": "components/exo/shell_surface.h",
        "patchSetId": 2
      },
      "lineNbr": 69,
      "author": {
        "id": 1148594
      },
      "writtenOn": "2017-12-07T21:17:06Z",
      "side": 1,
      "message": "Replaced with set_movement_disabled.",
      "parentUuid": "440a4fa5_2a240376",
      "revId": "2933fb6674f8ee693dcb9146be5c84c1f2202ebb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "13324cbf_83eced50",
        "filename": "components/exo/shell_surface.h",
        "patchSetId": 2
      },
      "lineNbr": 324,
      "author": {
        "id": 1000539
      },
      "writtenOn": "2017-12-06T17:55:10Z",
      "side": 1,
      "message": "hm, I don\u0027t think it makes sense with virtual functions that are private. can you make these public instead?",
      "revId": "2933fb6674f8ee693dcb9146be5c84c1f2202ebb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d4b7fdf3_6c3e15a0",
        "filename": "components/exo/shell_surface.h",
        "patchSetId": 2
      },
      "lineNbr": 324,
      "author": {
        "id": 1148594
      },
      "writtenOn": "2017-12-06T19:31:54Z",
      "side": 1,
      "message": "These are helper functions that can be overridden, i.e. they do not belong in the public API. They could be made protected, but I think visibility should be reduced unless the override needs to chain with the base version.",
      "parentUuid": "13324cbf_83eced50",
      "revId": "2933fb6674f8ee693dcb9146be5c84c1f2202ebb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c8846629_9b2a81e9",
        "filename": "components/exo/shell_surface.h",
        "patchSetId": 2
      },
      "lineNbr": 324,
      "author": {
        "id": 1000539
      },
      "writtenOn": "2017-12-07T20:26:19Z",
      "side": 1,
      "message": "I guess this pattern is fine for now. However, it\u0027s not a common pattern in chrome code afact and virtual functions are generally not used in exo except for abstract interfaces. it would be nice if we could avoid virtual functions here in the future but OK for now as I guess it makes it a bit easier to do this shell surface refactor.",
      "parentUuid": "d4b7fdf3_6c3e15a0",
      "revId": "2933fb6674f8ee693dcb9146be5c84c1f2202ebb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "358d011f_b1e26753",
        "filename": "components/exo/shell_surface.h",
        "patchSetId": 2
      },
      "lineNbr": 334,
      "author": {
        "id": 1000539
      },
      "writtenOn": "2017-12-06T17:55:10Z",
      "side": 1,
      "message": "CanAnimateWindowStateTransitions?",
      "revId": "2933fb6674f8ee693dcb9146be5c84c1f2202ebb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "af68041d_1bc091fe",
        "filename": "components/exo/shell_surface.h",
        "patchSetId": 2
      },
      "lineNbr": 334,
      "author": {
        "id": 1148594
      },
      "writtenOn": "2017-12-06T19:31:54Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "358d011f_b1e26753",
      "revId": "2933fb6674f8ee693dcb9146be5c84c1f2202ebb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}