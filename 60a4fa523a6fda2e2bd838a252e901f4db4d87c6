{
  "comments": [
    {
      "key": {
        "uuid": "bfbb9593_9126ee08",
        "filename": "/COMMIT_MSG",
        "patchSetId": 15
      },
      "lineNbr": 16,
      "author": {
        "id": 1001500
      },
      "writtenOn": "2017-11-30T18:22:02Z",
      "side": 1,
      "message": "nit: \"block it from reaching the renderer\"? It currently reads to me as though we want to tell the renderer to block it.",
      "range": {
        "startLine": 16,
        "startChar": 3,
        "endLine": 16,
        "endChar": 29
      },
      "revId": "60a4fa523a6fda2e2bd838a252e901f4db4d87c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dc9e133f_5633a2a6",
        "filename": "/COMMIT_MSG",
        "patchSetId": 15
      },
      "lineNbr": 23,
      "author": {
        "id": 1001500
      },
      "writtenOn": "2017-11-30T18:22:02Z",
      "side": 1,
      "message": "nit: Is it worthwhile pointing out that this is not the full work and we plan on improving on that?",
      "revId": "60a4fa523a6fda2e2bd838a252e901f4db4d87c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "aaf90b9b_21bf1da6",
        "filename": "chrome/browser/chrome_content_browser_client.cc",
        "patchSetId": 15
      },
      "lineNbr": 1236,
      "author": {
        "id": 1002169
      },
      "writtenOn": "2017-11-30T21:44:37Z",
      "side": 1,
      "message": "LinkDoctorBaseURL is https://www.googleapis.com/rpc, which is an interface to a lot of things besides just link doctor. The link doctorness of this particular request is given by the {\"method\": \"linkdoctor.fixurl.fixurl\", ...} in the JSON of the POST request body.\n\nI would reasonably expect this to be fixed by switching this request to be CORS enabled. googleapis certainly supports CORS.\n\nBecause this is currently the only caller of ResourceFetcherImpl, you could do this hackily, say in content/renderer/fetchers/resource_fetcher_impl.cc!ResourceFetcherImpl::SetMethod --\n\n  request_.fetch_request_mode \u003d network::mojom::FetchRequestMode::kCORS;",
      "revId": "60a4fa523a6fda2e2bd838a252e901f4db4d87c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "94cf47de_83557936",
        "filename": "chrome/browser/chrome_content_browser_client.cc",
        "patchSetId": 15
      },
      "lineNbr": 1236,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-12-01T01:17:30Z",
      "side": 1,
      "message": "\u003e LinkDoctorBaseURL is https://www.googleapis.com/rpc, which is an interface to a lot of things besides just link doctor. The link doctorness of this particular request is given by the {\"method\": \"linkdoctor.fixurl.fixurl\", ...} in the JSON of the POST request body.\n\u003e \n\u003e I would reasonably expect this to be fixed by switching this request to be CORS enabled. googleapis certainly supports CORS.\n\u003e \n\u003e Because this is currently the only caller of ResourceFetcherImpl, you could do this hackily, say in content/renderer/fetchers/resource_fetcher_impl.cc!ResourceFetcherImpl::SetMethod --\n\u003e \n\u003e   request_.fetch_request_mode \u003d network::mojom::FetchRequestMode::kCORS;\n\nThanks for the suggestion!  Fixed.  (I updated mock-link-doctor.json.mock-http-headers as well to have it return CORS.)",
      "parentUuid": "aaf90b9b_21bf1da6",
      "revId": "60a4fa523a6fda2e2bd838a252e901f4db4d87c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ec0fb01b_af6f9f5b",
        "filename": "chrome/browser/extensions/chrome_content_browser_client_extensions_part.cc",
        "patchSetId": 15
      },
      "lineNbr": 383,
      "author": {
        "id": 1002169
      },
      "writtenOn": "2017-11-30T21:44:37Z",
      "side": 1,
      "message": "Add a comment here explaining why.",
      "revId": "60a4fa523a6fda2e2bd838a252e901f4db4d87c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ff26e40a_defdd44e",
        "filename": "chrome/browser/extensions/chrome_content_browser_client_extensions_part.cc",
        "patchSetId": 15
      },
      "lineNbr": 383,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-12-01T01:17:30Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ec0fb01b_af6f9f5b",
      "revId": "60a4fa523a6fda2e2bd838a252e901f4db4d87c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba86f72e_73ea4a75",
        "filename": "content/browser/loader/cross_site_document_blocking_browsertest.cc",
        "patchSetId": 15
      },
      "lineNbr": 40,
      "author": {
        "id": 1002169
      },
      "writtenOn": "2017-11-30T21:44:37Z",
      "side": 1,
      "message": "+\u003d \"and standard ports\"",
      "revId": "60a4fa523a6fda2e2bd838a252e901f4db4d87c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "88561d7d_e4561c6b",
        "filename": "content/browser/loader/cross_site_document_blocking_browsertest.cc",
        "patchSetId": 15
      },
      "lineNbr": 40,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-12-01T01:17:30Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ba86f72e_73ea4a75",
      "revId": "60a4fa523a6fda2e2bd838a252e901f4db4d87c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b815a883_3320df0c",
        "filename": "content/browser/loader/cross_site_document_blocking_browsertest.cc",
        "patchSetId": 15
      },
      "lineNbr": 115,
      "author": {
        "id": 1002169
      },
      "writtenOn": "2017-11-30T21:44:37Z",
      "side": 1,
      "message": "LAMENT_TRUE\nASPIRE_FALSE",
      "revId": "60a4fa523a6fda2e2bd838a252e901f4db4d87c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d78a7e33_fdc194da",
        "filename": "content/browser/loader/cross_site_document_blocking_browsertest.cc",
        "patchSetId": 15
      },
      "lineNbr": 115,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-12-01T01:17:30Z",
      "side": 1,
      "message": "\u003e LAMENT_TRUE\n\u003e ASPIRE_FALSE\n\n:)",
      "parentUuid": "b815a883_3320df0c",
      "revId": "60a4fa523a6fda2e2bd838a252e901f4db4d87c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dbac3b54_f7b705a2",
        "filename": "content/browser/loader/cross_site_document_resource_handler.cc",
        "patchSetId": 15
      },
      "lineNbr": 31,
      "author": {
        "id": 1115968
      },
      "writtenOn": "2017-11-30T21:52:26Z",
      "side": 1,
      "message": "You can also unittest this class with a MockResourceLoader above and a TestResourceLoader as the next ResourceHandler.  Tests are a little complicated, but as simple as I could manage.  I recommend setting up unit tests, even for temporary code, because it gives us a lot more flexibility it testing corner cases.",
      "range": {
        "startLine": 31,
        "startChar": 39,
        "endLine": 31,
        "endChar": 56
      },
      "revId": "60a4fa523a6fda2e2bd838a252e901f4db4d87c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b470b9eb_02497761",
        "filename": "content/browser/loader/cross_site_document_resource_handler.cc",
        "patchSetId": 15
      },
      "lineNbr": 31,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-12-01T01:17:30Z",
      "side": 1,
      "message": "\u003e You can also unittest this class with a MockResourceLoader above and a TestResourceLoader as the next ResourceHandler.  Tests are a little complicated, but as simple as I could manage.  I recommend setting up unit tests, even for temporary code, because it gives us a lot more flexibility it testing corner cases.\n\nGood idea.  I\u0027ll add that in a new patchset.",
      "parentUuid": "dbac3b54_f7b705a2",
      "range": {
        "startLine": 31,
        "startChar": 39,
        "endLine": 31,
        "endChar": 56
      },
      "revId": "60a4fa523a6fda2e2bd838a252e901f4db4d87c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "298dfdd4_f5783e4b",
        "filename": "content/browser/loader/cross_site_document_resource_handler.cc",
        "patchSetId": 15
      },
      "lineNbr": 35,
      "author": {
        "id": 1115968
      },
      "writtenOn": "2017-11-30T21:42:58Z",
      "side": 1,
      "message": "Why pass the actual headers downstream when blocking?  This includes the set-cookie header, for instance.  I think it\u0027s much simpler to just cancel the response, to make sure nothing gets through.  Even creating a bogus ResourceResponse, other ResourceHandlers/ResourceThrottles may attach metadata, though we\u0027ll *probably* block it all if we avoid sending a response body.",
      "range": {
        "startLine": 35,
        "startChar": 17,
        "endLine": 35,
        "endChar": 34
      },
      "revId": "60a4fa523a6fda2e2bd838a252e901f4db4d87c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5e84e125_cca41f96",
        "filename": "content/browser/loader/cross_site_document_resource_handler.cc",
        "patchSetId": 15
      },
      "lineNbr": 35,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-11-30T21:59:41Z",
      "side": 1,
      "message": "\u003e Why pass the actual headers downstream when blocking?\n\nIn most ways, we want the renderer to behave the same as before, but without getting any sensitive data.  See below about failing the request.\n\n\u003e  This includes the set-cookie header, for instance.\n\nCookie headers are stripped out and not delivered to the renderer, as best we could determine.  (We should verify by checking the code for that, but they seemed to be omitted in the renderer process.)\n\n\u003e  I think it\u0027s much simpler to just cancel the response, to make sure nothing gets through.\n\nThis matters for showing the right message on XHR/fetch failure, for reacting correctly on img/script/style/etc.  There\u0027s also a substantial amount of fallout in the tests (see patchsets 1-6).  I think we want to send an empty response if possible.\n\n\u003e Even creating a bogus ResourceResponse, other ResourceHandlers/ResourceThrottles may attach metadata, though we\u0027ll *probably* block it all if we avoid sending a response body.\n\nI suppose there\u0027s some risk there, but it doesn\u0027t seem too bad.",
      "parentUuid": "298dfdd4_f5783e4b",
      "range": {
        "startLine": 35,
        "startChar": 17,
        "endLine": 35,
        "endChar": 34
      },
      "revId": "60a4fa523a6fda2e2bd838a252e901f4db4d87c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0a9fab13_ed3a90a7",
        "filename": "content/browser/loader/cross_site_document_resource_handler.cc",
        "patchSetId": 15
      },
      "lineNbr": 35,
      "author": {
        "id": 1115968
      },
      "writtenOn": "2017-11-30T22:11:11Z",
      "side": 1,
      "message": "If devtools is enabled, we may send bonus headers.  So for any testing of what we send, should have devtools open.\n\nNote:  I\u0027m not at all familiar with what we feed to the renderer when, so this could just be fine (Or we may not care, if devtools is open), but I\u0027m not sure that\u0027s the case.",
      "parentUuid": "5e84e125_cca41f96",
      "range": {
        "startLine": 35,
        "startChar": 17,
        "endLine": 35,
        "endChar": 34
      },
      "revId": "60a4fa523a6fda2e2bd838a252e901f4db4d87c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "deb62231_31fb48fa",
        "filename": "content/browser/loader/cross_site_document_resource_handler.cc",
        "patchSetId": 15
      },
      "lineNbr": 35,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-12-01T01:17:30Z",
      "side": 1,
      "message": "\u003e If devtools is enabled, we may send bonus headers.  So for any testing of what we send, should have devtools open.\n\u003e \n\u003e Note:  I\u0027m not at all familiar with what we feed to the renderer when, so this could just be fine (Or we may not care, if devtools is open), but I\u0027m not sure that\u0027s the case.\n\nI think we\u0027re ok with that (and are investigating separately).  But it\u0027s good to know, and we\u0027ll see what the implications are.",
      "parentUuid": "0a9fab13_ed3a90a7",
      "range": {
        "startLine": 35,
        "startChar": 17,
        "endLine": 35,
        "endChar": 34
      },
      "revId": "60a4fa523a6fda2e2bd838a252e901f4db4d87c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8a660d48_0775e28f",
        "filename": "content/browser/loader/cross_site_document_resource_handler.cc",
        "patchSetId": 15
      },
      "lineNbr": 49,
      "author": {
        "id": 1115968
      },
      "writtenOn": "2017-11-30T22:11:11Z",
      "side": 1,
      "message": "Detach() does this already.",
      "range": {
        "startLine": 49,
        "startChar": 25,
        "endLine": 49,
        "endChar": 28
      },
      "revId": "60a4fa523a6fda2e2bd838a252e901f4db4d87c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fcffd6ae_13e2e92a",
        "filename": "content/browser/loader/cross_site_document_resource_handler.cc",
        "patchSetId": 15
      },
      "lineNbr": 66,
      "author": {
        "id": 1115968
      },
      "writtenOn": "2017-11-30T21:42:58Z",
      "side": 1,
      "message": "The mime sniffer needs a buffer of at least net::kMaxBytesToSniff * 2 (2k)...But if we are blocking the response, why not just fail the request?\n\nFailing that, there\u0027s no reason we need to return a real buffer.  We can just create a junk one and pass it on up.  We\u0027ll still need to call next_handler_-\u003eOnWillRead, but we can throw away the return value.",
      "range": {
        "startLine": 66,
        "startChar": 18,
        "endLine": 66,
        "endChar": 0
      },
      "revId": "60a4fa523a6fda2e2bd838a252e901f4db4d87c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "50790ee7_9414feaa",
        "filename": "content/browser/loader/cross_site_document_resource_handler.cc",
        "patchSetId": 15
      },
      "lineNbr": 66,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-11-30T21:59:41Z",
      "side": 1,
      "message": "\u003e The mime sniffer needs a buffer of at least net::kMaxBytesToSniff * 2 (2k)...But if we are blocking the response, why not just fail the request?\n\nYep, this is only done once, when we know it will be blocked.  It\u0027s done so that we can send an empty response instead of failing it, which has consequences for how pages behave (see above).\n\n\u003e \n\u003e Failing that, there\u0027s no reason we need to return a real buffer.  We can just create a junk one and pass it on up.  We\u0027ll still need to call next_handler_-\u003eOnWillRead, but we can throw away the return value.\n\nYep, a separate buffer is worth doing, and something I\u0027m hoping to add to support the content sniffing. I can add the junk buffer first, whether we do the sniffing in this CL or a followup.",
      "parentUuid": "fcffd6ae_13e2e92a",
      "range": {
        "startLine": 66,
        "startChar": 18,
        "endLine": 66,
        "endChar": 0
      },
      "revId": "60a4fa523a6fda2e2bd838a252e901f4db4d87c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fb2e4325_03521339",
        "filename": "content/browser/loader/cross_site_document_resource_handler.cc",
        "patchSetId": 15
      },
      "lineNbr": 69,
      "author": {
        "id": 1115968
      },
      "writtenOn": "2017-11-30T21:42:58Z",
      "side": 1,
      "message": "Why wait for the response to complete?  If we\u0027re blocking the request, and don\u0027t want to bypass all the loader logic, we can just create a constroller subclass, call OnReadCompleted(0), and when the controller is resumed, call OnResponseCompleted with another bogus controller.  When that other bogus controller is resumed, we cancel the request using the real ResourceController, telling it not telling the renderer of completion (Since we just did that).",
      "range": {
        "startLine": 69,
        "startChar": 5,
        "endLine": 69,
        "endChar": 37
      },
      "revId": "60a4fa523a6fda2e2bd838a252e901f4db4d87c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f59e4d1c_3e4f182f",
        "filename": "content/browser/loader/cross_site_document_resource_handler.cc",
        "patchSetId": 15
      },
      "lineNbr": 69,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-11-30T21:59:41Z",
      "side": 1,
      "message": "\u003e Why wait for the response to complete?  If we\u0027re blocking the request, and don\u0027t want to bypass all the loader logic, we can just create a constroller subclass, call OnReadCompleted(0), and when the controller is resumed, call OnResponseCompleted with another bogus controller.  When that other bogus controller is resumed, we cancel the request using the real ResourceController, telling it not telling the renderer of completion (Since we just did that).\n\nI think the cancel in OnWillRead triggers this without waiting for the response to complete.  I do have an open question about how to trigger it in the Detach() case, and I think I had issues when calling OnResponseCompleted(0) after Detach(), but maybe I can try that again.",
      "parentUuid": "fb2e4325_03521339",
      "range": {
        "startLine": 69,
        "startChar": 5,
        "endLine": 69,
        "endChar": 37
      },
      "revId": "60a4fa523a6fda2e2bd838a252e901f4db4d87c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9c5ae93e_2c63aeb1",
        "filename": "content/browser/loader/cross_site_document_resource_handler.cc",
        "patchSetId": 15
      },
      "lineNbr": 77,
      "author": {
        "id": 1115968
      },
      "writtenOn": "2017-11-30T21:42:58Z",
      "side": 1,
      "message": "This gets us into indeterminant state.  We\u0027re reading from the ResourceLoader 1 byte at a time (Which seems bad, as it could have perf impact), but then we\u0027re telling the sender 0 bytes were read, which indicates completion.  We do this for each read, which violates the API contract.",
      "range": {
        "startLine": 77,
        "startChar": 15,
        "endLine": 77,
        "endChar": 17
      },
      "revId": "60a4fa523a6fda2e2bd838a252e901f4db4d87c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e59474f1_a7293598",
        "filename": "content/browser/loader/cross_site_document_resource_handler.cc",
        "patchSetId": 15
      },
      "lineNbr": 77,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-11-30T21:59:41Z",
      "side": 1,
      "message": "\u003e This gets us into indeterminant state.  We\u0027re reading from the ResourceLoader 1 byte at a time (Which seems bad, as it could have perf impact), but then we\u0027re telling the sender 0 bytes were read, which indicates completion.  We do this for each read, which violates the API contract.\n\nI think this is done at most once (only when should_block_response_ is true), since we\u0027ll cancel or detach the next time we get to OnWillRead.\n\nNon-blocked responses won\u0027t ever hit this case.",
      "parentUuid": "9c5ae93e_2c63aeb1",
      "range": {
        "startLine": 77,
        "startChar": 15,
        "endLine": 77,
        "endChar": 17
      },
      "revId": "60a4fa523a6fda2e2bd838a252e901f4db4d87c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b429a8f8_f328cb36",
        "filename": "content/browser/loader/cross_site_document_resource_handler.cc",
        "patchSetId": 15
      },
      "lineNbr": 77,
      "author": {
        "id": 1115968
      },
      "writtenOn": "2017-11-30T22:11:11Z",
      "side": 1,
      "message": "Oops, you\u0027re right - I completely missed the blocked_read_completed_ somehow.",
      "parentUuid": "e59474f1_a7293598",
      "range": {
        "startLine": 77,
        "startChar": 15,
        "endLine": 77,
        "endChar": 17
      },
      "revId": "60a4fa523a6fda2e2bd838a252e901f4db4d87c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1815cd72_13c9cb20",
        "filename": "content/browser/loader/cross_site_document_resource_handler.cc",
        "patchSetId": 15
      },
      "lineNbr": 105,
      "author": {
        "id": 1115968
      },
      "writtenOn": "2017-11-30T21:42:58Z",
      "side": 1,
      "message": "nit: braces around multi-line conditionals to match predominant style (x3)",
      "range": {
        "startLine": 105,
        "startChar": 11,
        "endLine": 105,
        "endChar": 16
      },
      "revId": "60a4fa523a6fda2e2bd838a252e901f4db4d87c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "70cc025a_e71147d1",
        "filename": "content/browser/loader/cross_site_document_resource_handler.cc",
        "patchSetId": 15
      },
      "lineNbr": 105,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-11-30T21:59:41Z",
      "side": 1,
      "message": "\u003e nit: braces around multi-line conditionals to match predominant style (x3)\n\nSure, will do in next patch.",
      "parentUuid": "1815cd72_13c9cb20",
      "range": {
        "startLine": 105,
        "startChar": 11,
        "endLine": 105,
        "endChar": 16
      },
      "revId": "60a4fa523a6fda2e2bd838a252e901f4db4d87c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0a75585f_20b6c10b",
        "filename": "content/browser/loader/cross_site_document_resource_handler.cc",
        "patchSetId": 15
      },
      "lineNbr": 130,
      "author": {
        "id": 1002169
      },
      "writtenOn": "2017-11-30T21:44:37Z",
      "side": 1,
      "message": "\"document\" here is not really accurate since our protection extends to JSON as well as HTML and XML.\n\nReally we are trying to block response bodies in the case where (a) there exists no mechanism by which this type of resource can be consumed opaquely in the target process, and (b) the request didn\u0027t use CORS.\n\nI\u0027m fine with \"cross site document\" since it\u0027s accurate to first approximation, and the term is well-rooted (at least in the parlance of our team) -- but since this is going to be something that ultimately we\u0027re forcing webdevs to think about, we might want to focus group the name some more.",
      "revId": "60a4fa523a6fda2e2bd838a252e901f4db4d87c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5c89f8c6_e95fd486",
        "filename": "content/browser/loader/cross_site_document_resource_handler.cc",
        "patchSetId": 15
      },
      "lineNbr": 162,
      "author": {
        "id": 1001500
      },
      "writtenOn": "2017-11-30T18:22:02Z",
      "side": 1,
      "message": "I would suggest adding a TRACE_EVENT macro here to capture this in chrome://tracing, which will make troubleshooting this in release builds much easier.",
      "revId": "60a4fa523a6fda2e2bd838a252e901f4db4d87c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d209c0ab_fc906fd6",
        "filename": "content/browser/loader/cross_site_document_resource_handler.cc",
        "patchSetId": 15
      },
      "lineNbr": 162,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-12-01T01:17:30Z",
      "side": 1,
      "message": "\u003e I would suggest adding a TRACE_EVENT macro here to capture this in chrome://tracing, which will make troubleshooting this in release builds much easier.\n\nDone, based on your suggestion.  (Thanks!)  Since we can only have 2 bits of data, I think the initiator origin and document URL are the most useful.  (Would have been nice to include the mime_type and resource_type_ as well, but that\u0027s ok.)",
      "parentUuid": "5c89f8c6_e95fd486",
      "revId": "60a4fa523a6fda2e2bd838a252e901f4db4d87c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "987e5395_f95775cb",
        "filename": "content/browser/loader/cross_site_document_resource_handler.h",
        "patchSetId": 15
      },
      "lineNbr": 11,
      "author": {
        "id": 1001500
      },
      "writtenOn": "2017-11-30T18:22:02Z",
      "side": 1,
      "message": "nit: Is this include needed here?",
      "revId": "60a4fa523a6fda2e2bd838a252e901f4db4d87c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2079f318_9c7388b4",
        "filename": "content/browser/loader/cross_site_document_resource_handler.h",
        "patchSetId": 15
      },
      "lineNbr": 11,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-12-01T01:17:30Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "987e5395_f95775cb",
      "revId": "60a4fa523a6fda2e2bd838a252e901f4db4d87c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4afc9790_6584d9a3",
        "filename": "content/browser/loader/cross_site_document_resource_handler.h",
        "patchSetId": 15
      },
      "lineNbr": 19,
      "author": {
        "id": 1001500
      },
      "writtenOn": "2017-11-30T18:22:02Z",
      "side": 1,
      "message": "ResourceHandler",
      "range": {
        "startLine": 19,
        "startChar": 5,
        "endLine": 19,
        "endChar": 21
      },
      "revId": "60a4fa523a6fda2e2bd838a252e901f4db4d87c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bc6add4e_90da16a8",
        "filename": "content/browser/loader/cross_site_document_resource_handler.h",
        "patchSetId": 15
      },
      "lineNbr": 19,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-12-01T01:17:30Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4afc9790_6584d9a3",
      "range": {
        "startLine": 19,
        "startChar": 5,
        "endLine": 19,
        "endChar": 21
      },
      "revId": "60a4fa523a6fda2e2bd838a252e901f4db4d87c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e1501b4f_1f9c42db",
        "filename": "content/browser/loader/cross_site_document_resource_handler.h",
        "patchSetId": 15
      },
      "lineNbr": 23,
      "author": {
        "id": 1002169
      },
      "writtenOn": "2017-11-30T21:44:37Z",
      "side": 1,
      "message": "We should look into whether or not it would be viable to implement this in terms of net::URLRequestInterceptor. I wasn\u0027t aware of that class before looking at this CL, but the response interception scheme seems like it gives us more control over the response. (however, extending it to sniffing would probably require new capabilities for the interceptor).",
      "revId": "60a4fa523a6fda2e2bd838a252e901f4db4d87c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3247b10d_ec04d352",
        "filename": "content/browser/loader/cross_site_document_resource_handler.h",
        "patchSetId": 15
      },
      "lineNbr": 23,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-12-01T01:17:30Z",
      "side": 1,
      "message": "\u003e We should look into whether or not it would be viable to implement this in terms of net::URLRequestInterceptor. I wasn\u0027t aware of that class before looking at this CL, but the response interception scheme seems like it gives us more control over the response. (however, extending it to sniffing would probably require new capabilities for the interceptor).\n\nThanks, that\u0027s a good thing to consider.  I think (given that sniffing is proving necessary when testing on real sites), I\u0027ll probably stick with a ResourceHandler for now, but maybe that\u0027s still an option for how to improve this.",
      "parentUuid": "e1501b4f_1f9c42db",
      "revId": "60a4fa523a6fda2e2bd838a252e901f4db4d87c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4abee57f_54aee4d8",
        "filename": "content/browser/loader/resource_dispatcher_host_impl.cc",
        "patchSetId": 15
      },
      "lineNbr": 1595,
      "author": {
        "id": 1001500
      },
      "writtenOn": "2017-11-30T18:22:02Z",
      "side": 1,
      "message": "This adds a ResourceHandler, not a throttle.",
      "range": {
        "startLine": 1595,
        "startChar": 13,
        "endLine": 1595,
        "endChar": 21
      },
      "revId": "60a4fa523a6fda2e2bd838a252e901f4db4d87c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "36d1a840_7942f773",
        "filename": "content/browser/loader/resource_dispatcher_host_impl.cc",
        "patchSetId": 15
      },
      "lineNbr": 1595,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-12-01T01:17:30Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4abee57f_54aee4d8",
      "range": {
        "startLine": 1595,
        "startChar": 13,
        "endLine": 1595,
        "endChar": 21
      },
      "revId": "60a4fa523a6fda2e2bd838a252e901f4db4d87c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ffbc8994_d29ea5fc",
        "filename": "content/public/browser/content_browser_client.h",
        "patchSetId": 15
      },
      "lineNbr": 250,
      "author": {
        "id": 1002169
      },
      "writtenOn": "2017-11-30T21:44:37Z",
      "side": 1,
      "message": "\"initiating origins of |initiator|\" wording is a little clumsy",
      "range": {
        "startLine": 250,
        "startChar": 36,
        "endLine": 250,
        "endChar": 43
      },
      "revId": "60a4fa523a6fda2e2bd838a252e901f4db4d87c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ad11a131_627aacaf",
        "filename": "content/public/browser/content_browser_client.h",
        "patchSetId": 15
      },
      "lineNbr": 250,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-12-01T01:17:30Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ffbc8994_d29ea5fc",
      "range": {
        "startLine": 250,
        "startChar": 36,
        "endLine": 250,
        "endChar": 43
      },
      "revId": "60a4fa523a6fda2e2bd838a252e901f4db4d87c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0e63e4ad_2cd54a3d",
        "filename": "content/renderer/fetchers/resource_fetcher_browsertest.cc",
        "patchSetId": 15
      },
      "lineNbr": 395,
      "author": {
        "id": 1002169
      },
      "writtenOn": "2017-11-30T21:44:37Z",
      "side": 1,
      "message": "So my understanding here is that ResourceFetcher was basically unbeholden to the same-origin policy, and the browser-side enforcement you\u0027re adding is exposing some of that looseness.\n\nLooking at these tests, I\u0027m thinking that forcing ResourceFetcher to use CORS by default makes a lot of sense.",
      "revId": "60a4fa523a6fda2e2bd838a252e901f4db4d87c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a350cc0b_5fe03a67",
        "filename": "content/renderer/fetchers/resource_fetcher_browsertest.cc",
        "patchSetId": 15
      },
      "lineNbr": 395,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-12-01T01:17:30Z",
      "side": 1,
      "message": "\u003e So my understanding here is that ResourceFetcher was basically unbeholden to the same-origin policy, and the browser-side enforcement you\u0027re adding is exposing some of that looseness.\n\u003e \n\u003e Looking at these tests, I\u0027m thinking that forcing ResourceFetcher to use CORS by default makes a lot of sense.\n\nAck.",
      "parentUuid": "0e63e4ad_2cd54a3d",
      "revId": "60a4fa523a6fda2e2bd838a252e901f4db4d87c6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}