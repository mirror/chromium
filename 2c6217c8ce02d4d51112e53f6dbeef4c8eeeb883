{
  "comments": [
    {
      "key": {
        "uuid": "7ec2a8e7_95573e03",
        "filename": "chrome/browser/ntp_snippets/content_suggestions_service_factory.cc",
        "patchSetId": 13
      },
      "lineNbr": 518,
      "author": {
        "id": 1161814
      },
      "writtenOn": "2017-09-14T07:58:55Z",
      "side": 1,
      "message": "nit: I think that debug_logger and debug_logger_raw would fit better into naming conventions in our team.",
      "range": {
        "startLine": 517,
        "startChar": 2,
        "endLine": 518,
        "endChar": 66
      },
      "revId": "2c6217c8ce02d4d51112e53f6dbeef4c8eeeb883",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a2bb2fe3_c3be27b4",
        "filename": "chrome/browser/ntp_snippets/content_suggestions_service_factory.cc",
        "patchSetId": 13
      },
      "lineNbr": 518,
      "author": {
        "id": 1163944
      },
      "writtenOn": "2017-09-14T10:42:26Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7ec2a8e7_95573e03",
      "range": {
        "startLine": 517,
        "startChar": 2,
        "endLine": 518,
        "endChar": 66
      },
      "revId": "2c6217c8ce02d4d51112e53f6dbeef4c8eeeb883",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f4f3c2e1_96b4c74f",
        "filename": "chrome/browser/ui/webui/snippets_internals_message_handler.cc",
        "patchSetId": 13
      },
      "lineNbr": 291,
      "author": {
        "id": 1161814
      },
      "writtenOn": "2017-09-14T07:58:55Z",
      "side": 1,
      "message": "nit: This change seems orthogonal to the CL, isn\u0027t it?",
      "range": {
        "startLine": 287,
        "startChar": 0,
        "endLine": 291,
        "endChar": 1
      },
      "revId": "2c6217c8ce02d4d51112e53f6dbeef4c8eeeb883",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4bf6cc9e_7c27e496",
        "filename": "chrome/browser/ui/webui/snippets_internals_message_handler.cc",
        "patchSetId": 13
      },
      "lineNbr": 291,
      "author": {
        "id": 1163944
      },
      "writtenOn": "2017-09-14T10:42:26Z",
      "side": 1,
      "message": "ACK\n\nI definitely could do it separately, but that would delay this CL even more.\n\nBasically, using CallJavascriptFunctionUnsafe is now forbidden, one should use CallJavascriptFunction. CallJavascriptFunction requires AllowJavascript at the end of initialization.",
      "parentUuid": "f4f3c2e1_96b4c74f",
      "range": {
        "startLine": 287,
        "startChar": 0,
        "endLine": 291,
        "endChar": 1
      },
      "revId": "2c6217c8ce02d4d51112e53f6dbeef4c8eeeb883",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a55046af_a3aefa29",
        "filename": "chrome/browser/ui/webui/snippets_internals_message_handler.cc",
        "patchSetId": 13
      },
      "lineNbr": 291,
      "author": {
        "id": 1161814
      },
      "writtenOn": "2017-09-14T11:07:13Z",
      "side": 1,
      "message": "Ack\n\nAs you need it for this CL, I am fine with that.",
      "parentUuid": "4bf6cc9e_7c27e496",
      "range": {
        "startLine": 287,
        "startChar": 0,
        "endLine": 291,
        "endChar": 1
      },
      "revId": "2c6217c8ce02d4d51112e53f6dbeef4c8eeeb883",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b7aceb12_6f229f4c",
        "filename": "components/ntp_snippets/remote/remote_suggestions_scheduler_impl.cc",
        "patchSetId": 13
      },
      "lineNbr": 664,
      "author": {
        "id": 1161814
      },
      "writtenOn": "2017-09-14T07:58:55Z",
      "side": 1,
      "message": "I would prefer\n - either removing this call as it duplicates the 4 calls above\n - or removing the 4 calls above and log TriggerType here in the message.",
      "range": {
        "startLine": 664,
        "startChar": 2,
        "endLine": 664,
        "endChar": 59
      },
      "revId": "2c6217c8ce02d4d51112e53f6dbeef4c8eeeb883",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "debf0c9e_fc72d437",
        "filename": "components/ntp_snippets/remote/remote_suggestions_scheduler_impl.cc",
        "patchSetId": 13
      },
      "lineNbr": 664,
      "author": {
        "id": 1163944
      },
      "writtenOn": "2017-09-14T10:42:26Z",
      "side": 1,
      "message": "ACK\n\nI don\u0027t mind the duplication. Also it duplicates that calls now, but this may be not true later. There are a lot of other places where RefetchInTheBackgroundIfAppropriate is called, so I think it is relevant to know when it is called outside of the calls above.",
      "parentUuid": "b7aceb12_6f229f4c",
      "range": {
        "startLine": 664,
        "startChar": 2,
        "endLine": 664,
        "endChar": 59
      },
      "revId": "2c6217c8ce02d4d51112e53f6dbeef4c8eeeb883",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3ab2934d_70bc34eb",
        "filename": "components/ntp_snippets/remote/remote_suggestions_scheduler_impl.cc",
        "patchSetId": 13
      },
      "lineNbr": 664,
      "author": {
        "id": 1161814
      },
      "writtenOn": "2017-09-14T11:07:13Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "debf0c9e_fc72d437",
      "range": {
        "startLine": 664,
        "startChar": 2,
        "endLine": 664,
        "endChar": 59
      },
      "revId": "2c6217c8ce02d4d51112e53f6dbeef4c8eeeb883",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e60eda1f_1eb5113d",
        "filename": "components/ntp_snippets/remote/remote_suggestions_scheduler_impl.cc",
        "patchSetId": 13
      },
      "lineNbr": 762,
      "author": {
        "id": 1161814
      },
      "writtenOn": "2017-09-14T07:58:55Z",
      "side": 1,
      "message": "Could you also log more details here if the function returns false?\n\nThese would be two separate messages: \n - if the first clause is false, it is \n\"due to privacy, next fetch is allowed after \" \u003c\u003c background_fetches_allowed_after_;\n - if the second clause is false, it is\n\"next fetch is scheduled after \" \u003c\u003c first_allowed_fetch_time \u003c\u003c \" (as last fetch attempt occured at \" \u003c\u003c last_fetch_attempt_time \u003c\u003c \")\";\n\nThis is a bit silly because the strings would be composed even if logger is disabled. Maybe exposing another static bool function Logger::IsLoggingEnabled() that the callers can use to avoid creating the parameters for Log()?\n\nCan you see any smarter (language) construct to achieve this optimization?",
      "range": {
        "startLine": 762,
        "startChar": 3,
        "endLine": 762,
        "endChar": 0
      },
      "revId": "2c6217c8ce02d4d51112e53f6dbeef4c8eeeb883",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4d98eab7_bc3e190b",
        "filename": "components/ntp_snippets/remote/remote_suggestions_scheduler_impl.cc",
        "patchSetId": 13
      },
      "lineNbr": 762,
      "author": {
        "id": 1163944
      },
      "writtenOn": "2017-09-14T10:42:26Z",
      "side": 1,
      "message": "\u003e Could you also log more details here if the function returns false?\n\nDone.\n\n\n\u003e This is a bit silly because the strings would be composed even if logger\n\u003e is disabled. Maybe exposing another static bool function\n\u003e Logger::IsLoggingEnabled() that the callers can use to avoid creating \n\u003e the parameters for Log()?\n\nDone + a comment for Log to check IsLoggingEnabled before constructing expensive messages.\nI\u0027ve also guarded all StringPrintf calls with IsLoggingEnabled.\n\n\u003e Can you see any smarter (language) construct to achieve this optimization?\n\nKeeping in mind that this is Finch controled - no. I guess as a first version, it should be fine.",
      "parentUuid": "e60eda1f_1eb5113d",
      "range": {
        "startLine": 762,
        "startChar": 3,
        "endLine": 762,
        "endChar": 0
      },
      "revId": "2c6217c8ce02d4d51112e53f6dbeef4c8eeeb883",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}