{
  "comments": [
    {
      "key": {
        "uuid": "b830726a_9f5c4ba5",
        "filename": "components/printing/browser/print_composite_client.cc",
        "patchSetId": 33
      },
      "lineNbr": 42,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2018-01-04T13:34:16Z",
      "side": 1,
      "message": "This comment doesn\u0027t seem quite right--maybe just remove it?",
      "revId": "826be97e6d8e99f4a09a72737366a25f2f1f78d0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d6c10bec_e448bba2",
        "filename": "components/printing/browser/print_composite_client.cc",
        "patchSetId": 33
      },
      "lineNbr": 42,
      "author": {
        "id": 1002198
      },
      "writtenOn": "2018-01-04T19:50:00Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b830726a_9f5c4ba5",
      "revId": "826be97e6d8e99f4a09a72737366a25f2f1f78d0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2e5a50f5_77d8c857",
        "filename": "components/printing/service/pdf_compositor_impl.cc",
        "patchSetId": 33
      },
      "lineNbr": 18,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2018-01-04T13:34:16Z",
      "side": 1,
      "message": "Nit: please add a brief comment that describes what this placeholder is used for.",
      "revId": "826be97e6d8e99f4a09a72737366a25f2f1f78d0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "36c966b3_2c81c857",
        "filename": "components/printing/service/pdf_compositor_impl.cc",
        "patchSetId": 33
      },
      "lineNbr": 18,
      "author": {
        "id": 1002198
      },
      "writtenOn": "2018-01-04T19:50:00Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2e5a50f5_77d8c857",
      "revId": "826be97e6d8e99f4a09a72737366a25f2f1f78d0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1ca821ca_5706d3d6",
        "filename": "components/printing/service/pdf_compositor_impl.cc",
        "patchSetId": 33
      },
      "lineNbr": 57,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2018-01-04T13:34:16Z",
      "side": 1,
      "message": "It would be helpful to document the various cases here (i.e. if we print a page that contains frames from multiple processes, it\u0027s possible that a subframe\u0027s content will be returned before the parent frame has reported its dependent subframe\u0027s content IDs).\n\nHowever, this seems quite complicated: is it necessary to create the placeholder? Why do we need to eagerly create an entry in content_to_frame_node_ map if it already doesn\u0027t exist here, rather than just waiting for the next AddSubframeContent call?",
      "revId": "826be97e6d8e99f4a09a72737366a25f2f1f78d0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1df71483_d3398735",
        "filename": "components/printing/service/pdf_compositor_impl.cc",
        "patchSetId": 33
      },
      "lineNbr": 57,
      "author": {
        "id": 1002198
      },
      "writtenOn": "2018-01-04T19:50:00Z",
      "side": 1,
      "message": "Added some comments above. Hope it helps. \n\nTo save one map, |content_to_frame_node_map_| stores content to its frame and parent frame info. AddSubframeMap() adds content to frame map while AddSubframeContent() adds content to its parent frame info. The order of these two functions are not guaranteed. so we need to handle either case.",
      "parentUuid": "1ca821ca_5706d3d6",
      "revId": "826be97e6d8e99f4a09a72737366a25f2f1f78d0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eca0acd0_a2c63b85",
        "filename": "components/printing/service/pdf_compositor_impl.cc",
        "patchSetId": 33
      },
      "lineNbr": 80,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2018-01-04T13:34:16Z",
      "side": 1,
      "message": "I don\u0027t quite follow why checking is ready to composite would mark frame_guid as complete.",
      "range": {
        "startLine": 79,
        "startChar": 0,
        "endLine": 80,
        "endChar": 37
      },
      "revId": "826be97e6d8e99f4a09a72737366a25f2f1f78d0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0b5cfd8d_7914a844",
        "filename": "components/printing/service/pdf_compositor_impl.cc",
        "patchSetId": 33
      },
      "lineNbr": 80,
      "author": {
        "id": 1002198
      },
      "writtenOn": "2018-01-04T19:50:00Z",
      "side": 1,
      "message": "Modified comments.\n\nOnly root frame will check for composition. We can always think it is complete as the checking is for subframes.",
      "parentUuid": "eca0acd0_a2c63b85",
      "range": {
        "startLine": 79,
        "startChar": 0,
        "endLine": 80,
        "endChar": 37
      },
      "revId": "826be97e6d8e99f4a09a72737366a25f2f1f78d0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b6d32a52_6c869a4b",
        "filename": "components/printing/service/pdf_compositor_impl.cc",
        "patchSetId": 33
      },
      "lineNbr": 207,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2018-01-04T13:34:16Z",
      "side": 1,
      "message": "Naively, I might expect that we could just try tracking this directly as a class member, rather than holding the pending content IDs on FrameInfos. Then checking for completion could be as simple as just checking that there are no pending content IDs or pending frame IDs, without requiring a tree walk.",
      "range": {
        "startLine": 192,
        "startChar": 0,
        "endLine": 207,
        "endChar": 5
      },
      "revId": "826be97e6d8e99f4a09a72737366a25f2f1f78d0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "afac85a6_d4b90b65",
        "filename": "components/printing/service/pdf_compositor_impl.cc",
        "patchSetId": 33
      },
      "lineNbr": 207,
      "author": {
        "id": 1002198
      },
      "writtenOn": "2018-01-04T19:50:00Z",
      "side": 1,
      "message": "I don\u0027t quite follow. all the subframes formed into a tree, we need walk the tree at some point. For example, a depends b, b depends c, when c is ready, we should mark b and a both ready.",
      "parentUuid": "b6d32a52_6c869a4b",
      "range": {
        "startLine": 192,
        "startChar": 0,
        "endLine": 207,
        "endChar": 5
      },
      "revId": "826be97e6d8e99f4a09a72737366a25f2f1f78d0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5711ba55_f26572ad",
        "filename": "components/printing/service/pdf_compositor_impl.cc",
        "patchSetId": 33
      },
      "lineNbr": 207,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2018-01-11T22:29:03Z",
      "side": 1,
      "message": "My understanding is each instance of PdfCompositorImpl should be used for one print job, right? So when we create it, we already know the root frame to print. We can pass that information down preemptively. This simplifies the interface, because we won\u0027t need to pass down the root frame_guid in IsReadyToComposite or CompositeToPdf.\n\nHere\u0027s what I envision the flow would look like:\n\n1. Create a mojom::PdfCompositor in the utility process.\n\n2. Browser registers the root frame, so mojom::PdfCompositor knows it\u0027s pending.\n\n3. Browser *also* registers all local roots with mojom::PdfCompositor. Presumably we could do this in the same Mojo call as step 2. Now mojom::PdfCompositor knows all frames it needs to wait for before the result can be composited.\n\nNote: to make things simpler, the list of local roots should probably be topologically sorted. Probably we could just pass the list of local roots in post-order traversal order.\n\n4. As each local root in the renderer generates a result, it calls PdfCompositor::AddSubframeContent(). It passes the frame token, the content associated with the frame token, as well as the subframe dependency info (I think this would be a map of content IDs to frame tokens).\n\n5. In the utility process, AddSubframeContent() will:\n  - decrement the count of pending frames\n  - record the dependent content IDs\n  - accumulate the map of content IDs to frame tokens in a member map\n\n6. Once the pending frame count hits 0 (or the timeout elapses), PdfCompositor automatically tries to generate the output with CompositeToPdf. It goes through the list of frame outputs (which is already in post-order traversal order), builds a SkMemoryStream for frames with a composite result, and replays it into a SkPicture. Each iteration will build a map of content IDs to SkPicture of dependent contents (using the map of content IDs to frame tokens).\n\n7. Return the PDF to the browser.",
      "parentUuid": "afac85a6_d4b90b65",
      "range": {
        "startLine": 192,
        "startChar": 0,
        "endLine": 207,
        "endChar": 5
      },
      "revId": "826be97e6d8e99f4a09a72737366a25f2f1f78d0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "69f4169d_45e5277f",
        "filename": "components/printing/service/public/interfaces/pdf_compositor.mojom",
        "patchSetId": 33
      },
      "lineNbr": 24,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2018-01-04T13:34:16Z",
      "side": 1,
      "message": "In general, we\u0027d like to move towards using mojo.common.mojom.UnguessableToken to represent IDs that need to be passed between processes. Would you be OK making this change in a followup?",
      "revId": "826be97e6d8e99f4a09a72737366a25f2f1f78d0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e22dae9d_d6381c9f",
        "filename": "components/printing/service/public/interfaces/pdf_compositor.mojom",
        "patchSetId": 33
      },
      "lineNbr": 24,
      "author": {
        "id": 1002198
      },
      "writtenOn": "2018-01-04T19:50:00Z",
      "side": 1,
      "message": "Yes, if we use UnguessableToken to replace frame_guid, I can make the followup change.\n\nAlternatively, I think an easier route is to make GlobalFrameRoutingId public (crrev.com/c/849697) and maybe add a function to convert it to a 64bit form for easy\ntransport thru ipc?",
      "parentUuid": "69f4169d_45e5277f",
      "revId": "826be97e6d8e99f4a09a72737366a25f2f1f78d0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}