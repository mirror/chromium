{
  "comments": [
    {
      "key": {
        "uuid": "c9f7fa85_7532609f",
        "filename": "ipc/BUILD.gn",
        "patchSetId": 6
      },
      "lineNbr": 189,
      "author": {
        "id": 1104639
      },
      "writtenOn": "2018-01-18T18:23:50Z",
      "side": 1,
      "message": "Could we make mojo/public/interfaces/bindings:bindings a component instead? That should also address this issue, right?\n\nI understand the current overridden_deps support is insufficient. But I hope we could limit the usage of overridden_deps to blink stuff and remove them eventually by splitting up the huge targets (such as blink platform) properly. Making it more powerful and using it in more places IMO is not the right direction.\n\nWDYT? Thanks!",
      "revId": "3e654e2eb396d71683489344cf08b32a2b43625a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8470951e_1808c82b",
        "filename": "ipc/BUILD.gn",
        "patchSetId": 6
      },
      "lineNbr": 189,
      "author": {
        "id": 1255169
      },
      "writtenOn": "2018-01-20T02:23:58Z",
      "side": 1,
      "message": "Even if //mojo/public/interfaces/bindings:bindings were a component I think that overridden_deps would still be needed here.\n\nipc:mojom needs to have a public dependency on whichever mojom target has \"native_struct\" as one of its sources (currently it\u0027s the mojom bindings:bindings target). If that target is part of a different component it would still need to be overridden.\n\nI definitely take your point about wanting to limit to the usage of overridden_deps though. This stuff\u0027s still new to me so if I\u0027ve misunderstood what you meant let me know! I\u0027m happy to change the bindings target if that\u0027s the right thing to do :)",
      "parentUuid": "c9f7fa85_7532609f",
      "revId": "3e654e2eb396d71683489344cf08b32a2b43625a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d928083d_e7244fcc",
        "filename": "ipc/BUILD.gn",
        "patchSetId": 6
      },
      "lineNbr": 189,
      "author": {
        "id": 1104639
      },
      "writtenOn": "2018-01-22T21:59:47Z",
      "side": 1,
      "message": "\"\"\"ipc:mojom needs to have a public dependency on whichever mojom target has \"native_struct\" as one of its sources (currently it\u0027s the mojom bindings:bindings target). If that target is part of a different component it would still need to be overridden.\"\"\"\n\nWhen we make //mojo/public/interfaces/bindings:bindings a separate component, it is no longer \"part of a different component\", right? Have you tried out making  //mojo/public/interfaces/bindings:bindings a mojom_component()?\n\nMaybe I haven\u0027t fully understood the problem here. If that is the case, please help me to better understand it. Thanks! :)",
      "parentUuid": "8470951e_1808c82b",
      "revId": "3e654e2eb396d71683489344cf08b32a2b43625a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "343ba733_313f97ac",
        "filename": "ipc/BUILD.gn",
        "patchSetId": 6
      },
      "lineNbr": 189,
      "author": {
        "id": 1255169
      },
      "writtenOn": "2018-01-23T05:10:08Z",
      "side": 1,
      "message": "Oops yeah you\u0027re right, sorry I misunderstood what your initial comment meant!\n\nI have tried making //mojo/public/interfaces/bindings:bindings it\u0027s own mojom_component. However, I came across a few problems when trying this approach.\n\n//mojo/public/interfaces/bindings:bindings seems very closely entwined with //src/mojo/public/cpp/bindings:bindings (for brevity, I\u0027ll call them interfaces/bindings and cpp/bindings respectively).\n\nOn the one hand, interfaces/bindings needs to depend on cpp/bindings (as defined in the mojom template - //src/mojo/public/tools/bindings/mojom.gni) because the generated files depend on portions of the bindings library.\n\nOn the other hand, cpp/bindings also depends on portions of interfaces/bindings. For example, it takes the generated CPP mojom files as part of its sources and depends on the intermediate targets interfaces/bindings:bindings__generator and interfaces/bindings:bindings_shared__generator.\n\nFor that reason, I\u0027m not sure that it\u0027s possible to break out interfaces/bindings into its own mojom component without introducing a dependency cycle where interfaces/bindings -\u003e cpp/bindings -\u003e interfaces/bindings...\n\nRemoving either dependency - removing the dependency on cpp/bindings from interfaces/bindings e.g. via a flag to the mojom template OR removing the generated files/intermediate targets created by interfaces/bindings from cpp/bindings - leads to undefined symbols and an angry linker :(\n\nI know that it\u0027s undesirable but I think that overridden_deps might be the right solution in this case.\n\nSorry for the long reply, I hope this all makes sense! I\u0027m happy to clarify anything via message or on this review :) Thanks so much for your time in looking at this!",
      "parentUuid": "d928083d_e7244fcc",
      "revId": "3e654e2eb396d71683489344cf08b32a2b43625a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ee7db574_d6c13c38",
        "filename": "ipc/BUILD.gn",
        "patchSetId": 6
      },
      "lineNbr": 189,
      "author": {
        "id": 1104639
      },
      "writtenOn": "2018-01-23T17:54:30Z",
      "side": 1,
      "message": "Thanks Eve for the detailed explanation. You are absolutely right about the issue. Sorry I didn\u0027t think too much to realize the close relationship between cpp/bindings and interfaces/bindings.\n\nOne possible solution without introducing this new dep-overridden feature:\n- don\u0027t allow anyone other than cpp/bindings refers to interfaces/bindings. We could do that by restrict visibility of that target.\n- duplicate the SerializedHandle struct in ipc.mojom.\n\nSerializedHandle is a pretty simiple struct without custom typemapping. So duplicating it doesn\u0027t seem too bad to me.\n\nWhat do you think? +CC Ken.",
      "parentUuid": "343ba733_313f97ac",
      "revId": "3e654e2eb396d71683489344cf08b32a2b43625a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "94d36d1d_5cea6344",
        "filename": "ipc/BUILD.gn",
        "patchSetId": 6
      },
      "lineNbr": 189,
      "author": {
        "id": 1002808
      },
      "writtenOn": "2018-01-23T17:59:12Z",
      "side": 1,
      "message": "This seems acceptable to me for now, but I think my preferred \"real\" solution here would be to decompose public/cpp into two targets: cpp_base, which does not depend on interfaces/bindings, and cpp which depends on both cpp_base and interfaces/bindings. And then I would agree that we make the bindings target a mojom_component. Am I missing any reason why this wouldn\u0027t work?",
      "parentUuid": "ee7db574_d6c13c38",
      "revId": "3e654e2eb396d71683489344cf08b32a2b43625a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1a95a941_260edc76",
        "filename": "ipc/BUILD.gn",
        "patchSetId": 6
      },
      "lineNbr": 189,
      "author": {
        "id": 1002808
      },
      "writtenOn": "2018-01-23T18:00:03Z",
      "side": 1,
      "message": "And FWIW introducing new component targets should be less painful now that https://chromium-review.googlesource.com/c/chromium/src/+/876884 has landed",
      "parentUuid": "94d36d1d_5cea6344",
      "revId": "3e654e2eb396d71683489344cf08b32a2b43625a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "753a9839_7ffed946",
        "filename": "ipc/BUILD.gn",
        "patchSetId": 6
      },
      "lineNbr": 189,
      "author": {
        "id": 1104639
      },
      "writtenOn": "2018-01-23T18:11:07Z",
      "side": 1,
      "message": "Agreed that decomposing public/cpp is the best solution. Currently the auto-gen code makes use of almost everything in cpp/bindings. We could consider changing the generator to do less #include\u0027s when the mojom file doesn\u0027t contain any interfaces.\n\n(But for now, I am fine with duplicating SerializedHandle.)",
      "parentUuid": "1a95a941_260edc76",
      "revId": "3e654e2eb396d71683489344cf08b32a2b43625a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "28a18555_a46edb3e",
        "filename": "ipc/BUILD.gn",
        "patchSetId": 6
      },
      "lineNbr": 189,
      "author": {
        "id": 1255169
      },
      "writtenOn": "2018-01-26T04:54:29Z",
      "side": 1,
      "message": "Given that decomposing public/cpp into two targets seems like it will require some non-trivial refactoring and I\u0027m only here for another month, I might go with duplicating SerializedHandle for now in the interests of un-blocking the conditional features implementation. However I do agree that the decomposition sounds like the best solution for the future. Thanks so much for your help! :)",
      "parentUuid": "753a9839_7ffed946",
      "revId": "3e654e2eb396d71683489344cf08b32a2b43625a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}