{
  "comments": [
    {
      "key": {
        "uuid": "02319013_9ff18dd2",
        "filename": "extensions/common/api/declarative_net_request/constants.h",
        "patchSetId": 5
      },
      "lineNbr": 24,
      "author": {
        "id": 1175790
      },
      "writtenOn": "2017-07-20T16:10:07Z",
      "side": 1,
      "message": "optional: Would it be more future-proof to make this at least 1? I can imagine some situations when you\u0027d need zero as a nullptr replacement for rule IDs. Another thing is that flatbuffers can return 0 as a default if the value is not present, so making sure 0 is not a valid ID could be less error-prone.",
      "revId": "17c3ec02498e0562aa3b196e5bd0aac042a2f732",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "baad207f_1afe5a2d",
        "filename": "extensions/common/api/declarative_net_request/constants.h",
        "patchSetId": 5
      },
      "lineNbr": 24,
      "author": {
        "id": 1161815
      },
      "writtenOn": "2017-07-21T01:38:47Z",
      "side": 1,
      "message": "Makes sense. Also did this for priority.",
      "parentUuid": "02319013_9ff18dd2",
      "revId": "17c3ec02498e0562aa3b196e5bd0aac042a2f732",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c7dfaf3a_eb78097c",
        "filename": "extensions/common/api/declarative_net_request/constants.h",
        "patchSetId": 5
      },
      "lineNbr": 24,
      "author": {
        "id": 1175790
      },
      "writtenOn": "2017-07-27T09:56:05Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "baad207f_1afe5a2d",
      "revId": "17c3ec02498e0562aa3b196e5bd0aac042a2f732",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "64e78183_824fa2c8",
        "filename": "extensions/common/api/declarative_net_request/constants.h",
        "patchSetId": 5
      },
      "lineNbr": 30,
      "author": {
        "id": 1175790
      },
      "writtenOn": "2017-07-20T16:10:07Z",
      "side": 1,
      "message": "nit: s/where/when/",
      "revId": "17c3ec02498e0562aa3b196e5bd0aac042a2f732",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e188ed5e_fc8c3c37",
        "filename": "extensions/common/api/declarative_net_request/constants.h",
        "patchSetId": 5
      },
      "lineNbr": 30,
      "author": {
        "id": 1161815
      },
      "writtenOn": "2017-07-21T01:38:47Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "64e78183_824fa2c8",
      "revId": "17c3ec02498e0562aa3b196e5bd0aac042a2f732",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "60256ed5_20f2a643",
        "filename": "extensions/common/api/declarative_net_request/indexed_rule.cc",
        "patchSetId": 5
      },
      "lineNbr": 23,
      "author": {
        "id": 1175790
      },
      "writtenOn": "2017-07-20T16:10:07Z",
      "side": 1,
      "message": "If you prefer to rename the urlFilter to urlPattern, please don\u0027t forget to rename this class accordingly.",
      "revId": "17c3ec02498e0562aa3b196e5bd0aac042a2f732",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "95c46ab6_f0a149f9",
        "filename": "extensions/common/api/declarative_net_request/indexed_rule.cc",
        "patchSetId": 5
      },
      "lineNbr": 23,
      "author": {
        "id": 1161815
      },
      "writtenOn": "2017-07-21T01:38:47Z",
      "side": 1,
      "message": "Kept it as urlFilter.",
      "parentUuid": "60256ed5_20f2a643",
      "revId": "17c3ec02498e0562aa3b196e5bd0aac042a2f732",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "abc1cfbb_b0aa330e",
        "filename": "extensions/common/api/declarative_net_request/indexed_rule.cc",
        "patchSetId": 5
      },
      "lineNbr": 23,
      "author": {
        "id": 1175790
      },
      "writtenOn": "2017-07-27T09:56:05Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "95c46ab6_f0a149f9",
      "revId": "17c3ec02498e0562aa3b196e5bd0aac042a2f732",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "99b7fc83_c71ce5e0",
        "filename": "extensions/common/api/declarative_net_request/indexed_rule.cc",
        "patchSetId": 5
      },
      "lineNbr": 36,
      "author": {
        "id": 1175790
      },
      "writtenOn": "2017-07-20T16:10:07Z",
      "side": 1,
      "message": "optional: You could remove this, because ParseLeftAnchor does this check already. Or, even better, remove this from ParseLeftAnchor (note that other Parse* methods don\u0027t precheck the position as well).",
      "revId": "17c3ec02498e0562aa3b196e5bd0aac042a2f732",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "53209f33_f4045367",
        "filename": "extensions/common/api/declarative_net_request/indexed_rule.cc",
        "patchSetId": 5
      },
      "lineNbr": 36,
      "author": {
        "id": 1161815
      },
      "writtenOn": "2017-07-21T01:38:47Z",
      "side": 1,
      "message": "Removed from ParseLeftAnchor.",
      "parentUuid": "99b7fc83_c71ce5e0",
      "revId": "17c3ec02498e0562aa3b196e5bd0aac042a2f732",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "24ce6faf_f791d2b6",
        "filename": "extensions/common/api/declarative_net_request/indexed_rule.cc",
        "patchSetId": 5
      },
      "lineNbr": 36,
      "author": {
        "id": 1175790
      },
      "writtenOn": "2017-07-27T09:56:05Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "53209f33_f4045367",
      "revId": "17c3ec02498e0562aa3b196e5bd0aac042a2f732",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b70f6267_f36c8619",
        "filename": "extensions/common/api/declarative_net_request/indexed_rule.cc",
        "patchSetId": 5
      },
      "lineNbr": 55,
      "author": {
        "id": 1175790
      },
      "writtenOn": "2017-07-20T16:10:07Z",
      "side": 1,
      "message": "optional nitty nit: s/index_++/++index_/g (I know there\u0027s no difference for the compiler in this context).",
      "revId": "17c3ec02498e0562aa3b196e5bd0aac042a2f732",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9c6decaa_28bc15fd",
        "filename": "extensions/common/api/declarative_net_request/indexed_rule.cc",
        "patchSetId": 5
      },
      "lineNbr": 55,
      "author": {
        "id": 1161815
      },
      "writtenOn": "2017-07-21T01:38:47Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b70f6267_f36c8619",
      "revId": "17c3ec02498e0562aa3b196e5bd0aac042a2f732",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "94cc74b9_3d7f7732",
        "filename": "extensions/common/api/declarative_net_request/indexed_rule.cc",
        "patchSetId": 5
      },
      "lineNbr": 68,
      "author": {
        "id": 1175790
      },
      "writtenOn": "2017-07-20T16:10:07Z",
      "side": 1,
      "message": "nit: You could move this check to the loop condition:\n  while (index_ \u003c url_filter_len_ \u0026\u0026 !IsAtRightAnchor()) { ... }",
      "revId": "17c3ec02498e0562aa3b196e5bd0aac042a2f732",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4615c51d_27d89d4c",
        "filename": "extensions/common/api/declarative_net_request/indexed_rule.cc",
        "patchSetId": 5
      },
      "lineNbr": 68,
      "author": {
        "id": 1161815
      },
      "writtenOn": "2017-07-21T01:38:47Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "94cc74b9_3d7f7732",
      "revId": "17c3ec02498e0562aa3b196e5bd0aac042a2f732",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9310e78d_58a637e9",
        "filename": "extensions/common/api/declarative_net_request/indexed_rule.cc",
        "patchSetId": 5
      },
      "lineNbr": 74,
      "author": {
        "id": 1175790
      },
      "writtenOn": "2017-07-20T16:10:07Z",
      "side": 1,
      "message": "Should this be a TODO?",
      "revId": "17c3ec02498e0562aa3b196e5bd0aac042a2f732",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c07d9ce1_29d9edd0",
        "filename": "extensions/common/api/declarative_net_request/indexed_rule.cc",
        "patchSetId": 5
      },
      "lineNbr": 74,
      "author": {
        "id": 1161815
      },
      "writtenOn": "2017-07-21T01:38:47Z",
      "side": 1,
      "message": "No. This is just to make it clear that indexed_rule_-\u003eurl_pattern can be empty. Rephrased it slightly.",
      "parentUuid": "9310e78d_58a637e9",
      "revId": "17c3ec02498e0562aa3b196e5bd0aac042a2f732",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bddb3344_0b0f4e70",
        "filename": "extensions/common/api/declarative_net_request/indexed_rule.cc",
        "patchSetId": 5
      },
      "lineNbr": 74,
      "author": {
        "id": 1175790
      },
      "writtenOn": "2017-07-27T09:56:05Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "c07d9ce1_29d9edd0",
      "revId": "17c3ec02498e0562aa3b196e5bd0aac042a2f732",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "39d0a025_b8df9b42",
        "filename": "extensions/common/api/declarative_net_request/indexed_rule.cc",
        "patchSetId": 5
      },
      "lineNbr": 208,
      "author": {
        "id": 1161815
      },
      "writtenOn": "2017-07-20T00:59:57Z",
      "side": 1,
      "message": "Istiaque: Should we validate for e.g. whether the domain is actually a valid domain (say by conversion to a URL). Or the url passed as url filter is actually a url? How much validation should we do?",
      "range": {
        "startLine": 208,
        "startChar": 46,
        "endLine": 208,
        "endChar": 53
      },
      "revId": "17c3ec02498e0562aa3b196e5bd0aac042a2f732",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "680be1cf_ccc4edec",
        "filename": "extensions/common/api/declarative_net_request/indexed_rule.cc",
        "patchSetId": 5
      },
      "lineNbr": 208,
      "author": {
        "id": 1161815
      },
      "writtenOn": "2017-07-21T01:38:47Z",
      "side": 1,
      "message": "I am now validating redirect urls. Since url filter and domains are just used for matching, it is probably ok to not do any validation on them.",
      "parentUuid": "39d0a025_b8df9b42",
      "range": {
        "startLine": 208,
        "startChar": 46,
        "endLine": 208,
        "endChar": 53
      },
      "revId": "17c3ec02498e0562aa3b196e5bd0aac042a2f732",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "254db061_f57491bc",
        "filename": "extensions/common/api/declarative_net_request/indexed_rule.cc",
        "patchSetId": 5
      },
      "lineNbr": 209,
      "author": {
        "id": 1161815
      },
      "writtenOn": "2017-07-20T00:59:57Z",
      "side": 1,
      "message": "Pavel: Do we need to convert domains to lower case? (url_pattern_index.cc does this). What about the url filter? We get this directly from extensions, so do we need any more sanitization? For e.g. is it ok/not ok for domains/url filter to include scheme (\"http://\") etc.\n\nWe should document any such requirements within the url pattern index schema.",
      "range": {
        "startLine": 209,
        "startChar": 25,
        "endLine": 209,
        "endChar": 50
      },
      "revId": "17c3ec02498e0562aa3b196e5bd0aac042a2f732",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e5cf1669_1c7f51f1",
        "filename": "extensions/common/api/declarative_net_request/indexed_rule.cc",
        "patchSetId": 5
      },
      "lineNbr": 209,
      "author": {
        "id": 1175790
      },
      "writtenOn": "2017-07-20T16:10:07Z",
      "side": 1,
      "message": "Capital letters in a domain pattern effectively change its intended semantics, because on the matching phase it is compared (always unsuccessfully) to a GURL which is canonicalized (thus, lower-cased). You can either enforce rule creators to use lower-cased domains (otherwise return a parse error - I would recommend this), or lower-case it in the code. Other than that, it should be a responsibility of the rule creators to make their rules right - Chrome does not break if these strings are meaningless, it just doesn\u0027t match for them as intended.\n\nIt is ok for a url filter to have a scheme, but not for the domains.",
      "parentUuid": "254db061_f57491bc",
      "range": {
        "startLine": 209,
        "startChar": 25,
        "endLine": 209,
        "endChar": 50
      },
      "revId": "17c3ec02498e0562aa3b196e5bd0aac042a2f732",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "22154de2_50776647",
        "filename": "extensions/common/api/declarative_net_request/indexed_rule.cc",
        "patchSetId": 5
      },
      "lineNbr": 209,
      "author": {
        "id": 1161815
      },
      "writtenOn": "2017-07-21T01:38:47Z",
      "side": 1,
      "message": "Have lower cased the domains. Will send out a CL to clarify the same in url pattern index schema.",
      "parentUuid": "e5cf1669_1c7f51f1",
      "range": {
        "startLine": 209,
        "startChar": 25,
        "endLine": 209,
        "endChar": 50
      },
      "revId": "17c3ec02498e0562aa3b196e5bd0aac042a2f732",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4ba1ca26_aed8dc11",
        "filename": "extensions/common/api/declarative_net_request/indexed_rule.cc",
        "patchSetId": 5
      },
      "lineNbr": 209,
      "author": {
        "id": 1175790
      },
      "writtenOn": "2017-07-27T09:56:05Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "22154de2_50776647",
      "range": {
        "startLine": 209,
        "startChar": 25,
        "endLine": 209,
        "endChar": 50
      },
      "revId": "17c3ec02498e0562aa3b196e5bd0aac042a2f732",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "aba90148_949d7f1f",
        "filename": "extensions/common/api/declarative_net_request/indexed_rule.cc",
        "patchSetId": 5
      },
      "lineNbr": 216,
      "author": {
        "id": 1175790
      },
      "writtenOn": "2017-07-20T16:10:07Z",
      "side": 1,
      "message": "I am not sure the compiler can understand here that the returned vector can be moved because the unique_ptr holding it is destroyed (I can only hope for that). Would \"return *domains.release()\" be more explicit in this regard?\n\nAlternative: return unique_ptr\u003cvector\u003e instead of vector, this way the default construction above is also not necessary.",
      "revId": "17c3ec02498e0562aa3b196e5bd0aac042a2f732",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fb4f76ba_fd02c5b6",
        "filename": "extensions/common/api/declarative_net_request/indexed_rule.cc",
        "patchSetId": 5
      },
      "lineNbr": 216,
      "author": {
        "id": 1161815
      },
      "writtenOn": "2017-07-21T01:38:47Z",
      "side": 1,
      "message": "\"return *domains.release()\" will lead to a memory leak (I think). The vector will never be released. (Though a copy constructor will be invoked on it). \n\nYeah I wasn\u0027t also sure about this. I checked and it seems it won\u0027t be copy elided. I am now explicitly moving it now. Also added a comment clarifying this.",
      "parentUuid": "aba90148_949d7f1f",
      "revId": "17c3ec02498e0562aa3b196e5bd0aac042a2f732",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cb09d4c4_5620c9e7",
        "filename": "extensions/common/api/declarative_net_request/indexed_rule.cc",
        "patchSetId": 5
      },
      "lineNbr": 216,
      "author": {
        "id": 1175790
      },
      "writtenOn": "2017-07-27T09:56:05Z",
      "side": 1,
      "message": "Ah, my bad, agreed that *domains.release() was a wrong idea. Explicitly moving sounds good.",
      "parentUuid": "fb4f76ba_fd02c5b6",
      "revId": "17c3ec02498e0562aa3b196e5bd0aac042a2f732",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "41980131_c6629e07",
        "filename": "extensions/common/api/declarative_net_request/indexed_rule.cc",
        "patchSetId": 5
      },
      "lineNbr": 228,
      "author": {
        "id": 1175790
      },
      "writtenOn": "2017-07-20T16:10:07Z",
      "side": 1,
      "message": "What is the purpose of this restriction? There is still a way to bypass it by using the \"*\" pattern, right?\n\nAlthough, I can buy that the intent to match any substring should be expressed explicitly with \"*\". In this context, how about forcing non-empty URL patterns always, not just when the domain list is empty?",
      "revId": "17c3ec02498e0562aa3b196e5bd0aac042a2f732",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "460615e2_fc54e7e3",
        "filename": "extensions/common/api/declarative_net_request/indexed_rule.cc",
        "patchSetId": 5
      },
      "lineNbr": 228,
      "author": {
        "id": 1161815
      },
      "writtenOn": "2017-07-21T01:38:47Z",
      "side": 1,
      "message": "Yeah, so the intention was to only allow meaningful rules. If a rule omits all things as part of RuleCondition, such a rule will match anything. But then, as you pointed out, extensions can always use \"*\" as the urlFilter anyway, so there\u0027s probably not much sense in enforcing this.\n\nSo I have still kept urlFilter to be optional but have disallowed empty strings, when it is specified, like we do for domain lists. Then there\u0027s also no need for IsMeaningfulRule and it can be replaced by a specific error.\n\nWDYT?",
      "parentUuid": "41980131_c6629e07",
      "revId": "17c3ec02498e0562aa3b196e5bd0aac042a2f732",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6169ff9d_e68fdb58",
        "filename": "extensions/common/api/declarative_net_request/indexed_rule.cc",
        "patchSetId": 5
      },
      "lineNbr": 228,
      "author": {
        "id": 1175790
      },
      "writtenOn": "2017-07-27T09:56:05Z",
      "side": 1,
      "message": "SGTM.",
      "parentUuid": "460615e2_fc54e7e3",
      "revId": "17c3ec02498e0562aa3b196e5bd0aac042a2f732",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "61310d7e_ec05259a",
        "filename": "extensions/common/api/declarative_net_request/indexed_rule.cc",
        "patchSetId": 5
      },
      "lineNbr": 228,
      "author": {
        "id": 1161815
      },
      "writtenOn": "2017-07-27T20:29:47Z",
      "side": 1,
      "message": "Marking as resolved.",
      "parentUuid": "6169ff9d_e68fdb58",
      "revId": "17c3ec02498e0562aa3b196e5bd0aac042a2f732",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b65448b9_2f8369fe",
        "filename": "extensions/common/api/declarative_net_request/indexed_rule.cc",
        "patchSetId": 5
      },
      "lineNbr": 247,
      "author": {
        "id": 1175790
      },
      "writtenOn": "2017-07-20T16:10:07Z",
      "side": 1,
      "message": "Have you considered validating the URL here as well? Then could be another type of error (INVALID_REDIRECT_URL), or it could also be merged with the emptiness case.",
      "revId": "17c3ec02498e0562aa3b196e5bd0aac042a2f732",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8130e29e_5d680d35",
        "filename": "extensions/common/api/declarative_net_request/indexed_rule.cc",
        "patchSetId": 5
      },
      "lineNbr": 247,
      "author": {
        "id": 1161815
      },
      "writtenOn": "2017-07-21T01:38:47Z",
      "side": 1,
      "message": "Done. Think not validating domains is fine because they are just used for matching and hence an invalid domain would just not match anything.",
      "parentUuid": "b65448b9_2f8369fe",
      "revId": "17c3ec02498e0562aa3b196e5bd0aac042a2f732",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a3b49954_1b5a9441",
        "filename": "extensions/common/api/declarative_net_request/indexed_rule.cc",
        "patchSetId": 5
      },
      "lineNbr": 247,
      "author": {
        "id": 1175790
      },
      "writtenOn": "2017-07-27T09:56:05Z",
      "side": 1,
      "message": "Agreed that validating domains is unnecessary.",
      "parentUuid": "8130e29e_5d680d35",
      "revId": "17c3ec02498e0562aa3b196e5bd0aac042a2f732",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "58d8f9ae_78a4160f",
        "filename": "extensions/common/api/declarative_net_request/indexed_rule.h",
        "patchSetId": 5
      },
      "lineNbr": 20,
      "author": {
        "id": 1175790
      },
      "writtenOn": "2017-07-20T16:10:07Z",
      "side": 1,
      "message": "// namespace declarative_net_request",
      "revId": "17c3ec02498e0562aa3b196e5bd0aac042a2f732",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0fddca2e_942eae00",
        "filename": "extensions/common/api/declarative_net_request/indexed_rule.h",
        "patchSetId": 5
      },
      "lineNbr": 20,
      "author": {
        "id": 1161815
      },
      "writtenOn": "2017-07-21T01:38:47Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "58d8f9ae_78a4160f",
      "revId": "17c3ec02498e0562aa3b196e5bd0aac042a2f732",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "681fb1a1_82cca32f",
        "filename": "extensions/common/api/declarative_net_request/indexed_rule.h",
        "patchSetId": 5
      },
      "lineNbr": 24,
      "author": {
        "id": 1175790
      },
      "writtenOn": "2017-07-20T16:10:07Z",
      "side": 1,
      "message": "nit: I\u0027d put a blank line above.",
      "revId": "17c3ec02498e0562aa3b196e5bd0aac042a2f732",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "373c708c_05dff2dc",
        "filename": "extensions/common/api/declarative_net_request/indexed_rule.h",
        "patchSetId": 5
      },
      "lineNbr": 24,
      "author": {
        "id": 1161815
      },
      "writtenOn": "2017-07-21T01:38:47Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "681fb1a1_82cca32f",
      "revId": "17c3ec02498e0562aa3b196e5bd0aac042a2f732",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c90aba69_ab4b4efb",
        "filename": "extensions/common/api/declarative_net_request/indexed_rule.h",
        "patchSetId": 5
      },
      "lineNbr": 35,
      "author": {
        "id": 1175790
      },
      "writtenOn": "2017-07-20T16:10:07Z",
      "side": 1,
      "message": "nit: How about being on the safe side and initializing these fields with default values (all zeros)?",
      "revId": "17c3ec02498e0562aa3b196e5bd0aac042a2f732",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e36bfef7_117b3bd3",
        "filename": "extensions/common/api/declarative_net_request/indexed_rule.h",
        "patchSetId": 5
      },
      "lineNbr": 35,
      "author": {
        "id": 1161815
      },
      "writtenOn": "2017-07-21T01:38:47Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c90aba69_ab4b4efb",
      "revId": "17c3ec02498e0562aa3b196e5bd0aac042a2f732",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c794f8e8_1692e74b",
        "filename": "extensions/common/api/declarative_net_request/indexed_rule_unittest.cc",
        "patchSetId": 5
      },
      "lineNbr": 344,
      "author": {
        "id": 1175790
      },
      "writtenOn": "2017-07-20T16:10:07Z",
      "side": 1,
      "message": "nit: Please remove one space between the words.",
      "revId": "17c3ec02498e0562aa3b196e5bd0aac042a2f732",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "94a810e0_fd89414f",
        "filename": "extensions/common/api/declarative_net_request/indexed_rule_unittest.cc",
        "patchSetId": 5
      },
      "lineNbr": 344,
      "author": {
        "id": 1161815
      },
      "writtenOn": "2017-07-21T01:38:47Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c794f8e8_1692e74b",
      "revId": "17c3ec02498e0562aa3b196e5bd0aac042a2f732",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}