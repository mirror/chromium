{
  "comments": [
    {
      "key": {
        "uuid": "afeb90da_14e7c228",
        "filename": "content/common/page_state_serialization.cc",
        "patchSetId": 2
      },
      "lineNbr": 787,
      "author": {
        "id": 1130134
      },
      "writtenOn": "2017-07-20T16:52:30Z",
      "side": 1,
      "message": "Hmmm... I thought that this would be caught by the _CheckNoProductionCodeUsingTestOnlyFunctions presubmit check...  Oh, well...\n\nI guess in theory you could open a bug against _CheckNoProductionCodeUsingTestOnlyFunctions to track this.  OTOH, this presubmit check already documents itself as \"best effort\".",
      "range": {
        "startLine": 787,
        "startChar": 2,
        "endLine": 787,
        "endChar": 24
      },
      "revId": "41c0f7e785e2ef003a4d70bdeebf5657462b5611",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f43fb189_454b30bb",
        "filename": "content/common/page_state_serialization.cc",
        "patchSetId": 2
      },
      "lineNbr": 787,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-07-20T22:07:21Z",
      "side": 1,
      "message": "I agree with the spirit of the rule, at least, and hopefully we can get the presubmit check to work.  Perhaps we should have a EncodePageStateInternal here shared between EncodePageState and EncodePageStateForTesting.",
      "parentUuid": "afeb90da_14e7c228",
      "range": {
        "startLine": 787,
        "startChar": 2,
        "endLine": 787,
        "endChar": 24
      },
      "revId": "41c0f7e785e2ef003a4d70bdeebf5657462b5611",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a34e6fac_8f8ad01c",
        "filename": "content/common/page_state_serialization.cc",
        "patchSetId": 2
      },
      "lineNbr": 787,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-07-20T22:46:36Z",
      "side": 1,
      "message": "Done.",
      "parentUuid": "f43fb189_454b30bb",
      "range": {
        "startLine": 787,
        "startChar": 2,
        "endLine": 787,
        "endChar": 24
      },
      "revId": "41c0f7e785e2ef003a4d70bdeebf5657462b5611",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f84abdfc_6a059546",
        "filename": "content/common/page_state_serialization.cc",
        "patchSetId": 2
      },
      "lineNbr": 787,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-07-20T22:46:36Z",
      "side": 1,
      "message": "It is caught--but it\u0027s advisory so it doesn\u0027t block the CQ. \u003d)",
      "parentUuid": "afeb90da_14e7c228",
      "range": {
        "startLine": 787,
        "startChar": 2,
        "endLine": 787,
        "endChar": 24
      },
      "revId": "41c0f7e785e2ef003a4d70bdeebf5657462b5611",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f4ef1608_1cb3411a",
        "filename": "content/common/unique_name_helper.cc",
        "patchSetId": 2
      },
      "lineNbr": 175,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-07-20T22:07:21Z",
      "side": 1,
      "message": "Hmm.  It would be nice to avoid having to do all the work of CalculateLegacyName on a huge |name| if we know it\u0027s going to be over the limit to begin with, since that mostly unnecessary memory and CPU churn.  I\u0027m guessing that would cause problems because we expect the hash to be computed from the legacy name, and it might affect the legacy conversions?\n\nI guess we can keep it this way.  If the CalculateLegacyName calls is required for correct behavior, can you add a comment saying something to that effect?",
      "revId": "41c0f7e785e2ef003a4d70bdeebf5657462b5611",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d41a871e_694a795b",
        "filename": "content/common/unique_name_helper.cc",
        "patchSetId": 2
      },
      "lineNbr": 175,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-07-20T22:46:36Z",
      "side": 1,
      "message": "Well, the problem is we often don\u0027t know if we\u0027re going to exceed the limit. We also don\u0027t know if the name is going to collide (and fallback to a frame path) without doing all this work. I\u0027m not really sure how to encode that in a meaningful comment that just describes the what, rather than the why. I\u0027m open to suggestions.",
      "parentUuid": "f4ef1608_1cb3411a",
      "revId": "41c0f7e785e2ef003a4d70bdeebf5657462b5611",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5cf3ac7f_026211db",
        "filename": "content/common/unique_name_helper.cc",
        "patchSetId": 2
      },
      "lineNbr": 175,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-07-21T02:08:55Z",
      "side": 1,
      "message": "\u003e Well, the problem is we often don\u0027t know if we\u0027re going to exceed the limit. \n\nI meant that if |name| exceeds the limit, it seems like the legacy name is going to exceed the limit as well.  Or are you saying that there are corner cases where legacy name could be under the limit when |name| is over the limit?  Anyway, I\u0027m guessing it\u0027s simpler to always have the hash input be the legacy name, regardless of whether we can deterministically shortcut here.\n \n\u003e We also don\u0027t know if the name is going to collide (and fallback to a frame path) without doing all this work. I\u0027m not really sure how to encode that in a meaningful comment that just describes the what, rather than the why. I\u0027m open to suggestions.\n\nPossible proposal for comment:\nAlways compute the legacy name first, so that it can always be used as the input to the hashing function when needed. Do not shortcut based on the length of |name|, because the legacy name may be unpredictable due to collisions, etc.",
      "parentUuid": "d41a871e_694a795b",
      "revId": "41c0f7e785e2ef003a4d70bdeebf5657462b5611",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "73d70ffb_277c8a03",
        "filename": "content/common/unique_name_helper.cc",
        "patchSetId": 2
      },
      "lineNbr": 175,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-07-21T19:01:20Z",
      "side": 1,
      "message": "There are cases where the input name won\u0027t exceed the limit, but the legacy name will: one common case is the child frame that has a descendant frame with an obscenely long unique name. We could certainly try to determine this up front, but I\u0027d be wary of missing edge cases. Keeping one path makes things more consistent overall.\n\nThanks for the suggested comment, I tweaked a bit and incorporated it.",
      "parentUuid": "5cf3ac7f_026211db",
      "revId": "41c0f7e785e2ef003a4d70bdeebf5657462b5611",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4902dc43_fb4bf12e",
        "filename": "content/common/unique_name_helper.cc",
        "patchSetId": 2
      },
      "lineNbr": 178,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-07-20T22:07:21Z",
      "side": 1,
      "message": "nit: Add blank line before the \"do\", since it looks like an \"else\" on the previous conditional.  And/or put a comment like \"Repeatedly hash the long name until it\u0027s unique.\"",
      "revId": "41c0f7e785e2ef003a4d70bdeebf5657462b5611",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3bdde5b0_68580919",
        "filename": "content/common/unique_name_helper.cc",
        "patchSetId": 2
      },
      "lineNbr": 178,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-07-20T22:46:36Z",
      "side": 1,
      "message": "This logic changed, so I think this isn\u0027t necessary anymore.",
      "parentUuid": "4902dc43_fb4bf12e",
      "revId": "41c0f7e785e2ef003a4d70bdeebf5657462b5611",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c907dfe1_81f61180",
        "filename": "content/common/unique_name_helper.cc",
        "patchSetId": 2
      },
      "lineNbr": 224,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-07-20T22:07:21Z",
      "side": 1,
      "message": "nit: End with ellipsis (or period).  Same on line 226.",
      "revId": "41c0f7e785e2ef003a4d70bdeebf5657462b5611",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b2fead93_53865dce",
        "filename": "content/common/unique_name_helper.cc",
        "patchSetId": 2
      },
      "lineNbr": 224,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-07-20T22:46:36Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c907dfe1_81f61180",
      "revId": "41c0f7e785e2ef003a4d70bdeebf5657462b5611",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "37e53b84_98a559de",
        "filename": "content/common/unique_name_helper.cc",
        "patchSetId": 2
      },
      "lineNbr": 240,
      "author": {
        "id": 1130134
      },
      "writtenOn": "2017-07-20T16:52:30Z",
      "side": 1,
      "message": "If the function returns true, then I feel that *both* the out parameters should be assigned to - otherwise we have to (awkardly IMO) ask the caller to always zero-out |new_replacement| before calling AdjustLegacyNameForMaxSize.",
      "range": {
        "startLine": 240,
        "startChar": 8,
        "endLine": 240,
        "endChar": 17
      },
      "revId": "41c0f7e785e2ef003a4d70bdeebf5657462b5611",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "23f4b654_66482f04",
        "filename": "content/common/unique_name_helper.cc",
        "patchSetId": 2
      },
      "lineNbr": 240,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-07-20T22:46:36Z",
      "side": 1,
      "message": "Well, it works naturally in the case of ReadFrameState()--each stack frame creates a new Optional.\n\nThe reason I do this is to save copying potentially long strings--we could simply populate new_replacement with the current replacement, but then we\u0027d be copying a bunch of times unnecessarily. Trying to be more clever about ownership ends up making things even more complicated.",
      "parentUuid": "37e53b84_98a559de",
      "range": {
        "startLine": 240,
        "startChar": 8,
        "endLine": 240,
        "endChar": 17
      },
      "revId": "41c0f7e785e2ef003a4d70bdeebf5657462b5611",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c576e782_6e4142f5",
        "filename": "content/common/unique_name_helper.cc",
        "patchSetId": 2
      },
      "lineNbr": 260,
      "author": {
        "id": 1130134
      },
      "writtenOn": "2017-07-20T16:52:30Z",
      "side": 1,
      "message": "I wish we had better code coverage tools in Chromium :-(  Would it be possible to (temporarily / on local machine only) annotate each if/else branch in the new code with a LOG.ERROR and test this way if all the branches have unit tests coverage?",
      "range": {
        "startLine": 260,
        "startChar": 4,
        "endLine": 260,
        "endChar": 8
      },
      "revId": "41c0f7e785e2ef003a4d70bdeebf5657462b5611",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "47f0f402_904d3447",
        "filename": "content/common/unique_name_helper.cc",
        "patchSetId": 2
      },
      "lineNbr": 260,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-07-20T22:46:36Z",
      "side": 1,
      "message": "I was testing locally and had to make fixes in basically all the branches, if that counts \u003d)\n\nI did think of one other interesting test case to add this morning and have added that as well.",
      "parentUuid": "c576e782_6e4142f5",
      "range": {
        "startLine": 260,
        "startChar": 4,
        "endLine": 260,
        "endChar": 8
      },
      "revId": "41c0f7e785e2ef003a4d70bdeebf5657462b5611",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ba254488_fba909f0",
        "filename": "content/common/unique_name_helper.cc",
        "patchSetId": 2
      },
      "lineNbr": 260,
      "author": {
        "id": 1130134
      },
      "writtenOn": "2017-07-20T23:07:07Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "47f0f402_904d3447",
      "range": {
        "startLine": 260,
        "startChar": 4,
        "endLine": 260,
        "endChar": 8
      },
      "revId": "41c0f7e785e2ef003a4d70bdeebf5657462b5611",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5bfda46c_06b2c345",
        "filename": "content/common/unique_name_helper.h",
        "patchSetId": 2
      },
      "lineNbr": 155,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-07-20T22:07:21Z",
      "side": 1,
      "message": "Maybe this should be at the top of the class?\nhttps://google.github.io/styleguide/cppguide.html#Declaration_Order",
      "revId": "41c0f7e785e2ef003a4d70bdeebf5657462b5611",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "52671649_018c25e0",
        "filename": "content/common/unique_name_helper.h",
        "patchSetId": 2
      },
      "lineNbr": 155,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-07-20T22:46:36Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5bfda46c_06b2c345",
      "revId": "41c0f7e785e2ef003a4d70bdeebf5657462b5611",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "174db0f0_8c55e80f",
        "filename": "content/common/unique_name_helper.h",
        "patchSetId": 2
      },
      "lineNbr": 157,
      "author": {
        "id": 1130134
      },
      "writtenOn": "2017-07-20T16:52:30Z",
      "side": 1,
      "message": "typo",
      "range": {
        "startLine": 157,
        "startChar": 44,
        "endLine": 157,
        "endChar": 56
      },
      "revId": "41c0f7e785e2ef003a4d70bdeebf5657462b5611",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "00ebcf0d_faaa8642",
        "filename": "content/common/unique_name_helper.h",
        "patchSetId": 2
      },
      "lineNbr": 157,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-07-20T22:07:21Z",
      "side": 1,
      "message": "This comment is a bit confusing, since it\u0027s above the Replacement struct instead of the AdjustLegacyNameForMaxSize function.  The struct should probably be declared at the top of the class near FrameAdapter, with its own short comment about being used by AdjustLegacyNameForMaxSize.",
      "range": {
        "startLine": 157,
        "startChar": 5,
        "endLine": 157,
        "endChar": 12
      },
      "revId": "41c0f7e785e2ef003a4d70bdeebf5657462b5611",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "24572c35_e7625fff",
        "filename": "content/common/unique_name_helper.h",
        "patchSetId": 2
      },
      "lineNbr": 157,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-07-20T22:46:36Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "00ebcf0d_faaa8642",
      "range": {
        "startLine": 157,
        "startChar": 5,
        "endLine": 157,
        "endChar": 12
      },
      "revId": "41c0f7e785e2ef003a4d70bdeebf5657462b5611",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6dfd9b77_f7f2246c",
        "filename": "content/common/unique_name_helper.h",
        "patchSetId": 2
      },
      "lineNbr": 157,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-07-20T22:46:36Z",
      "side": 1,
      "message": "Done.",
      "parentUuid": "174db0f0_8c55e80f",
      "range": {
        "startLine": 157,
        "startChar": 44,
        "endLine": 157,
        "endChar": 56
      },
      "revId": "41c0f7e785e2ef003a4d70bdeebf5657462b5611",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a57ac629_e27d9986",
        "filename": "content/common/unique_name_helper.h",
        "patchSetId": 2
      },
      "lineNbr": 166,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-07-20T22:07:21Z",
      "side": 1,
      "message": "Maybe clarify that these last two are out parameters.",
      "revId": "41c0f7e785e2ef003a4d70bdeebf5657462b5611",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4d16704c_39d8aa46",
        "filename": "content/common/unique_name_helper.h",
        "patchSetId": 2
      },
      "lineNbr": 166,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-07-20T22:46:36Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a57ac629_e27d9986",
      "revId": "41c0f7e785e2ef003a4d70bdeebf5657462b5611",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8109e52a_5850f83e",
        "filename": "content/common/unique_name_helper.h",
        "patchSetId": 2
      },
      "lineNbr": 171,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-07-20T22:07:21Z",
      "side": 1,
      "message": "\"Replacement\" is a bit vague (and reminds me of the always-hard-to-use GURL::Replacements).  If this is just about path, can we rename it to PathReplacement or something more specific?",
      "revId": "41c0f7e785e2ef003a4d70bdeebf5657462b5611",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f71a38ca_269cdd24",
        "filename": "content/common/unique_name_helper.h",
        "patchSetId": 2
      },
      "lineNbr": 171,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-07-20T22:46:36Z",
      "side": 1,
      "message": "I\u0027ve renamed it to NameUpdateState. It\u0027s really internal state that shouldn\u0027t be mucked with, so I made everything private and just friended the class.",
      "parentUuid": "8109e52a_5850f83e",
      "revId": "41c0f7e785e2ef003a4d70bdeebf5657462b5611",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f0c189db_816c48f1",
        "filename": "content/common/unique_name_helper.h",
        "patchSetId": 2
      },
      "lineNbr": 171,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-07-21T02:08:55Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "f71a38ca_269cdd24",
      "revId": "41c0f7e785e2ef003a4d70bdeebf5657462b5611",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d3ea8b86_ca5b6224",
        "filename": "content/common/unique_name_helper.h",
        "patchSetId": 2
      },
      "lineNbr": 181,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-07-20T22:07:21Z",
      "side": 1,
      "message": "nit: ForTesting seems to be much more common than ForTest in content (544 results vs 121 results).",
      "revId": "41c0f7e785e2ef003a4d70bdeebf5657462b5611",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8e868413_c93fd476",
        "filename": "content/common/unique_name_helper.h",
        "patchSetId": 2
      },
      "lineNbr": 181,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-07-20T22:46:36Z",
      "side": 1,
      "message": "Done, though ForTest is shorter \u003d)",
      "parentUuid": "d3ea8b86_ca5b6224",
      "revId": "41c0f7e785e2ef003a4d70bdeebf5657462b5611",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "be03f438_f1b27469",
        "filename": "content/common/unique_name_helper_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 21,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-07-20T22:07:21Z",
      "side": 1,
      "message": "nit: TestFrameAdapter",
      "range": {
        "startLine": 21,
        "startChar": 6,
        "endLine": 21,
        "endChar": 17
      },
      "revId": "41c0f7e785e2ef003a4d70bdeebf5657462b5611",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3f6251a6_e820b67b",
        "filename": "content/common/unique_name_helper_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 21,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-07-20T22:46:36Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "be03f438_f1b27469",
      "range": {
        "startLine": 21,
        "startChar": 6,
        "endLine": 21,
        "endChar": 17
      },
      "revId": "41c0f7e785e2ef003a4d70bdeebf5657462b5611",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d94c29f1_e71af510",
        "filename": "content/common/unique_name_helper_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 24,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-07-20T22:07:21Z",
      "side": 1,
      "message": "Looks like we should document that index_in_parent is \"virtual\" / doesn\u0027t need to be accurate for these tests (which might explain some of my confusion below).",
      "revId": "41c0f7e785e2ef003a4d70bdeebf5657462b5611",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4eb7cbb7_01aa9989",
        "filename": "content/common/unique_name_helper_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 24,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-07-20T22:46:36Z",
      "side": 1,
      "message": "I mentioned it in the documentation for the member, but I guess that may have been too far away. I\u0027ve renamed the variables involved, and moved the comment here.",
      "parentUuid": "d94c29f1_e71af510",
      "revId": "41c0f7e785e2ef003a4d70bdeebf5657462b5611",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "93274335_1d240d0d",
        "filename": "content/common/unique_name_helper_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 51,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-07-20T22:07:21Z",
      "side": 1,
      "message": "This won\u0027t count any of the later siblings.  Is that intentional, as opposed to returning parent_-\u003echildren_.size() - 1?  Let\u0027s document if so.",
      "revId": "41c0f7e785e2ef003a4d70bdeebf5657462b5611",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9873cfe0_ad2cfc1f",
        "filename": "content/common/unique_name_helper_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 51,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-07-20T22:46:36Z",
      "side": 1,
      "message": "This is kind of an interface problem. I have some interface updates planned in a followup, and I\u0027d prefer to do that there (given the size of this CL). I added a TODO in the header for this.",
      "parentUuid": "93274335_1d240d0d",
      "revId": "41c0f7e785e2ef003a4d70bdeebf5657462b5611",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b192eeb8_6af88eb4",
        "filename": "content/common/unique_name_helper_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 51,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-07-21T02:08:55Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "9873cfe0_ad2cfc1f",
      "revId": "41c0f7e785e2ef003a4d70bdeebf5657462b5611",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6b90f73d_0e0a4581",
        "filename": "content/common/unique_name_helper_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 54,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-07-20T22:07:21Z",
      "side": 1,
      "message": "Can we just use FAIL()?",
      "revId": "41c0f7e785e2ef003a4d70bdeebf5657462b5611",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cb83eecd_7ce55c73",
        "filename": "content/common/unique_name_helper_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 54,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-07-20T22:46:36Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6b90f73d_0e0a4581",
      "revId": "41c0f7e785e2ef003a4d70bdeebf5657462b5611",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c6ed2f22_a2fccedd",
        "filename": "content/common/unique_name_helper_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 141,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-07-20T22:07:21Z",
      "side": 1,
      "message": "Can you elaborate in the comment?  It\u0027s not clear what virtual index means, and why it would differ from the actual one.",
      "revId": "41c0f7e785e2ef003a4d70bdeebf5657462b5611",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3cd26b2d_e26bb876",
        "filename": "content/common/unique_name_helper_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 141,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-07-20T22:46:36Z",
      "side": 1,
      "message": "Done, though I moved this to the ctor.",
      "parentUuid": "c6ed2f22_a2fccedd",
      "revId": "41c0f7e785e2ef003a4d70bdeebf5657462b5611",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5e5377f7_0a4652c4",
        "filename": "content/common/unique_name_helper_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 150,
      "author": {
        "id": 1130134
      },
      "writtenOn": "2017-07-20T16:52:30Z",
      "side": 1,
      "message": "Maybe add a comment that this function verifies that we get equivalent names via:\n1) encoding legacy unique names as version 24 and upgrading to new names while reading\n2) encoding new names",
      "range": {
        "startLine": 150,
        "startChar": 5,
        "endLine": 150,
        "endChar": 35
      },
      "revId": "41c0f7e785e2ef003a4d70bdeebf5657462b5611",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b626ac92_6e7124b0",
        "filename": "content/common/unique_name_helper_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 150,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-07-20T22:46:36Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5e5377f7_0a4652c4",
      "range": {
        "startLine": 150,
        "startChar": 5,
        "endLine": 150,
        "endChar": 35
      },
      "revId": "41c0f7e785e2ef003a4d70bdeebf5657462b5611",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c14674ff_36e23b41",
        "filename": "content/common/unique_name_helper_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 156,
      "author": {
        "id": 1130134
      },
      "writtenOn": "2017-07-20T16:52:30Z",
      "side": 1,
      "message": "FWIW, this looks good to me - I like the test coverage very much and dealing with format drift can be done later (i.e. once the tests break because just overriding/stamping version to 24 is not sufficient for simulating version 24).\n\nOTOH, maybe a comment warning about the future breakage might be helpful here?",
      "range": {
        "startLine": 156,
        "startChar": 2,
        "endLine": 156,
        "endChar": 24
      },
      "revId": "41c0f7e785e2ef003a4d70bdeebf5657462b5611",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "597335a1_342a644d",
        "filename": "content/common/unique_name_helper_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 156,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-07-20T22:46:36Z",
      "side": 1,
      "message": "I\u0027m not sure I understand the concern here: version 24 is fixed and can\u0027t ever change (as far as we\u0027re concerned), so this should be safe?",
      "parentUuid": "c14674ff_36e23b41",
      "range": {
        "startLine": 156,
        "startChar": 2,
        "endLine": 156,
        "endChar": 24
      },
      "revId": "41c0f7e785e2ef003a4d70bdeebf5657462b5611",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b6ed45f1_0b6007ac",
        "filename": "content/common/unique_name_helper_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 156,
      "author": {
        "id": 1130134
      },
      "writtenOn": "2017-07-20T23:07:07Z",
      "side": 1,
      "message": "But what if version 26 requires changes to the serialization code?  Then the highlighted statement above will 1) say version\u003d24 in the header but 2) serialize using version-26-serialization-code, right?\n\nOTOH, I think we can maybe deal with that at that future point?",
      "parentUuid": "597335a1_342a644d",
      "range": {
        "startLine": 156,
        "startChar": 2,
        "endLine": 156,
        "endChar": 24
      },
      "revId": "41c0f7e785e2ef003a4d70bdeebf5657462b5611",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eaf34f13_202cd627",
        "filename": "content/common/unique_name_helper_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 156,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-07-21T19:01:20Z",
      "side": 1,
      "message": "We would likely add a separate test for that at that point.\n\nThough I really hope it doesn\u0027t happen because then we need to test 24 -\u003e 26, 24 -\u003e 25, and 25 -\u003e 25, and that would just be not fun. I think what we\u0027d likely do in that case is incremental updates: first upgrade from 24 to 25, and then 25 to 26...\n\nIn any case, I agree with the statement that we should deal with that problem if we have it. I\u0027m going to avoid adding a comment because the whole point of writing a test is so that it will break if there are breaking changes to an area of the code \u003d)",
      "parentUuid": "b6ed45f1_0b6007ac",
      "range": {
        "startLine": 156,
        "startChar": 2,
        "endLine": 156,
        "endChar": 24
      },
      "revId": "41c0f7e785e2ef003a4d70bdeebf5657462b5611",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d6f0af84_f5b3c85d",
        "filename": "content/common/unique_name_helper_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 229,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-07-20T22:07:21Z",
      "side": 1,
      "message": "nit: Update comment.",
      "revId": "41c0f7e785e2ef003a4d70bdeebf5657462b5611",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "35ec2d96_5046d288",
        "filename": "content/common/unique_name_helper_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 229,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-07-20T22:46:36Z",
      "side": 1,
      "message": "I have no idea what I was trying to say here, and the test case doesn\u0027t seem valuable, so I deleted it.",
      "parentUuid": "d6f0af84_f5b3c85d",
      "revId": "41c0f7e785e2ef003a4d70bdeebf5657462b5611",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}