{
  "comments": [
    {
      "key": {
        "uuid": "80cbf611_22940825",
        "filename": "chrome/common/page_load_metrics/page_load_metrics.mojom",
        "patchSetId": 13
      },
      "lineNbr": 121,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-07-14T17:41:19Z",
      "side": 1,
      "message": "Nit: wrap at 80",
      "range": {
        "startLine": 121,
        "startChar": 0,
        "endLine": 121,
        "endChar": 116
      },
      "revId": "9ef051fe371703635a0511185c08c7cf65de4ce9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "55847f89_265815f7",
        "filename": "chrome/common/page_load_metrics/page_load_metrics.mojom",
        "patchSetId": 13
      },
      "lineNbr": 121,
      "author": {
        "id": 1221384
      },
      "writtenOn": "2017-07-17T21:06:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "80cbf611_22940825",
      "range": {
        "startLine": 121,
        "startChar": 0,
        "endLine": 121,
        "endChar": 116
      },
      "revId": "9ef051fe371703635a0511185c08c7cf65de4ce9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4d51c664_3959e118",
        "filename": "chrome/renderer/page_load_metrics/metrics_render_frame_observer.cc",
        "patchSetId": 13
      },
      "lineNbr": 44,
      "author": {
        "id": 1136769
      },
      "writtenOn": "2017-07-14T18:22:14Z",
      "side": 1,
      "message": "given that we reset this particular field on every send, it seems reasonable to std::move(new_features) into SendTiming on each invocation to avoid the clone.",
      "revId": "9ef051fe371703635a0511185c08c7cf65de4ce9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "df4eeafa_137a1026",
        "filename": "chrome/renderer/page_load_metrics/metrics_render_frame_observer.cc",
        "patchSetId": 13
      },
      "lineNbr": 44,
      "author": {
        "id": 1221384
      },
      "writtenOn": "2017-07-17T21:06:55Z",
      "side": 1,
      "message": "\u0027StructPtr\u0027 has been explicitly marked deleted here \n    DISALLOW_COPY_AND_ASSIGN(StructPtr);\n\nPlease see below for the reasoning.",
      "parentUuid": "4d51c664_3959e118",
      "revId": "9ef051fe371703635a0511185c08c7cf65de4ce9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "053aa6b3_3015beb2",
        "filename": "chrome/renderer/page_load_metrics/metrics_render_frame_observer.cc",
        "patchSetId": 13
      },
      "lineNbr": 44,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-07-17T21:16:18Z",
      "side": 1,
      "message": "StructPtr is movable though, so in that case, we should pass by value, in combination with std::move().",
      "parentUuid": "df4eeafa_137a1026",
      "revId": "9ef051fe371703635a0511185c08c7cf65de4ce9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a69ab1a8_43d01cd5",
        "filename": "chrome/renderer/page_load_metrics/metrics_render_frame_observer.cc",
        "patchSetId": 13
      },
      "lineNbr": 47,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-07-14T17:41:19Z",
      "side": 1,
      "message": "Why Clone()?",
      "range": {
        "startLine": 47,
        "startChar": 37,
        "endLine": 47,
        "endChar": 58
      },
      "revId": "9ef051fe371703635a0511185c08c7cf65de4ce9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9caaafb6_29cca119",
        "filename": "chrome/renderer/page_load_metrics/metrics_render_frame_observer.cc",
        "patchSetId": 13
      },
      "lineNbr": 47,
      "author": {
        "id": 1221384
      },
      "writtenOn": "2017-07-17T21:06:55Z",
      "side": 1,
      "message": "Without Clone(), I get error message when compiling:\n\ncall to deleted constructor of \u0027page_load_metrics::mojom::PageLoadFeaturesPtr\u0027\n\nUnless we want to remove const, I don\u0027t see a way to avoid Clone().\n\nHere is the reason:\nThere\u0027s no move constructor defined for const object. There\u0027s only one for a non const StructPtr. So std::move will try to find a copy constructor that takes a const StructPtr\nwhich does not exist.",
      "parentUuid": "a69ab1a8_43d01cd5",
      "range": {
        "startLine": 47,
        "startChar": 37,
        "endLine": 47,
        "endChar": 58
      },
      "revId": "9ef051fe371703635a0511185c08c7cf65de4ce9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "67c90afd_93df53a2",
        "filename": "chrome/renderer/page_load_metrics/page_timing_metrics_sender.cc",
        "patchSetId": 13
      },
      "lineNbr": 57,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-07-14T17:41:19Z",
      "side": 1,
      "message": "Perhaps this should be set()?",
      "range": {
        "startLine": 57,
        "startChar": 17,
        "endLine": 57,
        "endChar": 21
      },
      "revId": "9ef051fe371703635a0511185c08c7cf65de4ce9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1ff38a12_85414bbc",
        "filename": "chrome/renderer/page_load_metrics/page_timing_metrics_sender.cc",
        "patchSetId": 13
      },
      "lineNbr": 57,
      "author": {
        "id": 1136769
      },
      "writtenOn": "2017-07-14T18:22:14Z",
      "side": 1,
      "message": "Yes, looks like should be set() - let\u0027s add a simple renderer-side test for this logic as well.",
      "parentUuid": "67c90afd_93df53a2",
      "range": {
        "startLine": 57,
        "startChar": 17,
        "endLine": 57,
        "endChar": 21
      },
      "revId": "9ef051fe371703635a0511185c08c7cf65de4ce9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3ba15415_493b1afa",
        "filename": "chrome/renderer/page_load_metrics/page_timing_metrics_sender.cc",
        "patchSetId": 13
      },
      "lineNbr": 57,
      "author": {
        "id": 1221384
      },
      "writtenOn": "2017-07-17T21:06:55Z",
      "side": 1,
      "message": "My bad. Thanks",
      "parentUuid": "67c90afd_93df53a2",
      "range": {
        "startLine": 57,
        "startChar": 17,
        "endLine": 57,
        "endChar": 21
      },
      "revId": "9ef051fe371703635a0511185c08c7cf65de4ce9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "871f1b16_55487259",
        "filename": "chrome/renderer/page_load_metrics/page_timing_metrics_sender.cc",
        "patchSetId": 13
      },
      "lineNbr": 96,
      "author": {
        "id": 1136769
      },
      "writtenOn": "2017-07-14T18:22:14Z",
      "side": 1,
      "message": "given that this is only invoked in one place, let\u0027s just inline it. see related comment - we can std::move(new_features_) at the invocation of SendTiming() above, then do\nnew_features_ \u003d mojom::PageLoadFeatures::New(); to follow.",
      "revId": "9ef051fe371703635a0511185c08c7cf65de4ce9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5d280de9_33ae64cd",
        "filename": "chrome/renderer/page_load_metrics/page_timing_metrics_sender.cc",
        "patchSetId": 13
      },
      "lineNbr": 96,
      "author": {
        "id": 1221384
      },
      "writtenOn": "2017-07-17T21:06:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "871f1b16_55487259",
      "revId": "9ef051fe371703635a0511185c08c7cf65de4ce9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a0832bb_39411f8d",
        "filename": "content/public/renderer/render_frame_observer.h",
        "patchSetId": 13
      },
      "lineNbr": 23,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-07-14T17:41:19Z",
      "side": 1,
      "message": "I\u0027d prefer it if we could just include the generated header, to avoid the possibility of this forward declaration differing from the actual definition. Same comment applies elsewhere.",
      "range": {
        "startLine": 23,
        "startChar": 0,
        "endLine": 23,
        "endChar": 32
      },
      "revId": "9ef051fe371703635a0511185c08c7cf65de4ce9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bcea309b_1233c62d",
        "filename": "content/public/renderer/render_frame_observer.h",
        "patchSetId": 13
      },
      "lineNbr": 23,
      "author": {
        "id": 1221384
      },
      "writtenOn": "2017-07-17T21:06:55Z",
      "side": 1,
      "message": "I can do that. I just don\u0027t think it is necessary to include 2000+ enum values in the header, especially all I am doing here is plumbing.",
      "parentUuid": "1a0832bb_39411f8d",
      "range": {
        "startLine": 23,
        "startChar": 0,
        "endLine": 23,
        "endChar": 32
      },
      "revId": "9ef051fe371703635a0511185c08c7cf65de4ce9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cefa83a3_2934f93d",
        "filename": "content/public/renderer/render_frame_observer.h",
        "patchSetId": 13
      },
      "lineNbr": 23,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-07-19T08:42:00Z",
      "side": 1,
      "message": "Sorry, I missed your reply earlier. I think it\u0027s OK to bias towards forward declares. However, ones that specify the width of the enum (especially from generated code) are a little dangerous, due to the loose coupling. I think it\u0027s probably safer to just #include; that way, the code doesn\u0027t suddenly explode if Mojo optimizes enum packing and decides to use a 16-bit width for the enum.",
      "parentUuid": "bcea309b_1233c62d",
      "range": {
        "startLine": 23,
        "startChar": 0,
        "endLine": 23,
        "endChar": 32
      },
      "revId": "9ef051fe371703635a0511185c08c7cf65de4ce9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fd073c38_cb546520",
        "filename": "content/public/renderer/render_frame_observer.h",
        "patchSetId": 13
      },
      "lineNbr": 23,
      "author": {
        "id": 1221384
      },
      "writtenOn": "2017-07-19T19:43:58Z",
      "side": 1,
      "message": "Makes sense.\nThanks for explaining :)",
      "parentUuid": "cefa83a3_2934f93d",
      "range": {
        "startLine": 23,
        "startChar": 0,
        "endLine": 23,
        "endChar": 32
      },
      "revId": "9ef051fe371703635a0511185c08c7cf65de4ce9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "519d9e43_53c1c880",
        "filename": "content/renderer/render_frame_impl.h",
        "patchSetId": 13
      },
      "lineNbr": 107,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-07-14T17:41:19Z",
      "side": 1,
      "message": "Nit: remove this?",
      "revId": "9ef051fe371703635a0511185c08c7cf65de4ce9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1fa8a87b_5ec9da1f",
        "filename": "content/renderer/render_frame_impl.h",
        "patchSetId": 13
      },
      "lineNbr": 107,
      "author": {
        "id": 1221384
      },
      "writtenOn": "2017-07-17T21:06:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "519d9e43_53c1c880",
      "revId": "9ef051fe371703635a0511185c08c7cf65de4ce9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0ca8fa76_c6e83c7e",
        "filename": "third_party/WebKit/Source/core/frame/LocalFrameClient.h",
        "patchSetId": 13
      },
      "lineNbr": 189,
      "author": {
        "id": 1142059
      },
      "writtenOn": "2017-07-18T15:31:55Z",
      "side": 1,
      "message": "nit: UseCounter",
      "revId": "9ef051fe371703635a0511185c08c7cf65de4ce9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "73bb78b6_9f8e8dc1",
        "filename": "third_party/WebKit/Source/core/frame/LocalFrameClient.h",
        "patchSetId": 13
      },
      "lineNbr": 191,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-07-14T17:41:19Z",
      "side": 1,
      "message": "Nit: no ;",
      "range": {
        "startLine": 191,
        "startChar": 61,
        "endLine": 191,
        "endChar": 62
      },
      "revId": "9ef051fe371703635a0511185c08c7cf65de4ce9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "78727eb9_9e9e1b7d",
        "filename": "third_party/WebKit/Source/core/frame/LocalFrameClient.h",
        "patchSetId": 13
      },
      "lineNbr": 191,
      "author": {
        "id": 1221384
      },
      "writtenOn": "2017-07-17T21:06:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "73bb78b6_9f8e8dc1",
      "range": {
        "startLine": 191,
        "startChar": 61,
        "endLine": 191,
        "endChar": 62
      },
      "revId": "9ef051fe371703635a0511185c08c7cf65de4ce9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5347f335_d891a87d",
        "filename": "third_party/WebKit/Source/core/frame/UseCounter.cpp",
        "patchSetId": 13
      },
      "lineNbr": 1163,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-07-14T17:41:19Z",
      "side": 1,
      "message": "As we don\u0027t allow source_frame to be null, let\u0027s pass by const ref.",
      "range": {
        "startLine": 1163,
        "startChar": 51,
        "endLine": 1163,
        "endChar": 52
      },
      "revId": "9ef051fe371703635a0511185c08c7cf65de4ce9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ff8a0623_4c5104c5",
        "filename": "third_party/WebKit/Source/core/frame/UseCounter.cpp",
        "patchSetId": 13
      },
      "lineNbr": 1163,
      "author": {
        "id": 1221384
      },
      "writtenOn": "2017-07-17T21:06:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5347f335_d891a87d",
      "range": {
        "startLine": 1163,
        "startChar": 51,
        "endLine": 1163,
        "endChar": 52
      },
      "revId": "9ef051fe371703635a0511185c08c7cf65de4ce9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b767b864_3ca066a1",
        "filename": "third_party/WebKit/Source/core/frame/UseCounterTest.cpp",
        "patchSetId": 13
      },
      "lineNbr": 59,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-07-14T17:41:19Z",
      "side": 1,
      "message": "Unfortunately, std::function is disallowed. These will have to use WTF::Bind. \u003d/\n\nOh... but it\u0027s existing code. OK, we should fix this in a followup \u003dP",
      "range": {
        "startLine": 59,
        "startChar": 26,
        "endLine": 59,
        "endChar": 39
      },
      "revId": "9ef051fe371703635a0511185c08c7cf65de4ce9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e9835b69_a837854a",
        "filename": "third_party/WebKit/Source/core/frame/UseCounterTest.cpp",
        "patchSetId": 13
      },
      "lineNbr": 59,
      "author": {
        "id": 1221384
      },
      "writtenOn": "2017-07-17T21:06:55Z",
      "side": 1,
      "message": "Ok. I will do that in a separate CL. Given this CL is already pretty large.\nThanks!",
      "parentUuid": "b767b864_3ca066a1",
      "range": {
        "startLine": 59,
        "startChar": 26,
        "endLine": 59,
        "endChar": 39
      },
      "revId": "9ef051fe371703635a0511185c08c7cf65de4ce9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}