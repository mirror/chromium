{
  "comments": [
    {
      "key": {
        "uuid": "ba377b4a_d5808cc4",
        "filename": "third_party/WebKit/Source/platform/wtf/typed_arrays/ArrayBufferContents.cpp",
        "patchSetId": 1
      },
      "lineNbr": 142,
      "author": {
        "id": 1001040
      },
      "writtenOn": "2017-08-28T23:07:58Z",
      "side": 1,
      "message": "This is safe because Linux is guaranteed to be 64-bit and hence will have the trap handling thing going on. But on 32-bit platforms, we can never do this, right? Since the JavaScript caller might specify an arbitrary offset from NULL, and hence result in a valid-but-wrong memory reference?\n\nIf I have that right, it might make sense to add a comment that effect, so that future maintainers don\u0027t get overzealous.",
      "revId": "4997af7457e96365e44e145e3946dde048a6ca8d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "261c3814_3430b1f9",
        "filename": "third_party/WebKit/Source/platform/wtf/typed_arrays/ArrayBufferContents.cpp",
        "patchSetId": 1
      },
      "lineNbr": 142,
      "author": {
        "id": 1144619
      },
      "writtenOn": "2017-08-29T00:01:16Z",
      "side": 1,
      "message": "This is ultimately called at https://cs.chromium.org/chromium/src/v8/src/wasm/wasm-module.cc?type\u003dcs\u0026l\u003d293 which expects that allocation may fail. In that case, V8 throws a RangeError exception instead. You can already get this behavior just by allocating a bunch of ArrayBuffers or Wasm Memories.\n\nBut yes, this code is only used when the trap handling thing is enabled, which only happens on 64-bit. \n\nWhat do you mean by future maintainers getting overzealous?",
      "parentUuid": "ba377b4a_d5808cc4",
      "revId": "4997af7457e96365e44e145e3946dde048a6ca8d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e65de0e8_5601f18d",
        "filename": "third_party/WebKit/Source/platform/wtf/typed_arrays/ArrayBufferContents.cpp",
        "patchSetId": 1
      },
      "lineNbr": 142,
      "author": {
        "id": 1001040
      },
      "writtenOn": "2017-08-29T00:32:29Z",
      "side": 1,
      "message": "OK, that sounds good.\n\nOverzealous: If the behavior were dangerous, \"overzealous\" would be future maintainers introducing the risky behavior (e.g. for consistency) without understanding the NULL + arbitrary-offset problem.",
      "parentUuid": "261c3814_3430b1f9",
      "revId": "4997af7457e96365e44e145e3946dde048a6ca8d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d61ffe32_c2cf9891",
        "filename": "third_party/WebKit/Source/platform/wtf/typed_arrays/ArrayBufferContents.cpp",
        "patchSetId": 1
      },
      "lineNbr": 142,
      "author": {
        "id": 1144619
      },
      "writtenOn": "2017-08-29T00:53:02Z",
      "side": 1,
      "message": "Sounds good. I went ahead and added a comment warning about the dangers of returning a nullptr and justifying why it\u0027s okay here.",
      "parentUuid": "e65de0e8_5601f18d",
      "revId": "4997af7457e96365e44e145e3946dde048a6ca8d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}