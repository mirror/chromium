{
  "comments": [
    {
      "key": {
        "uuid": "66c40d17_c0dec296",
        "filename": "extensions/browser/api/feedback_private/log_source_access_manager.cc",
        "patchSetId": 10
      },
      "lineNbr": 74,
      "author": {
        "id": 1115745
      },
      "writtenOn": "2017-12-05T14:30:53Z",
      "side": 1,
      "message": "The comment above says \"user visible\", but this is background?\n\nAlso, from the comment, this actually sounds like it should be USER_BLOCKING (in response to user action, generating data - \"Example: Generating data shown in the UI immediately after a click.\" [1]).  But I don\u0027t have the full context, so maybe not.  In either case, we should make sure the comment and enum match. :)\n\n[1] https://chromium.googlesource.com/chromium/src/+/2fe25ac6221de1d1e1151249fe56f0444b5ad6b0/base/task_scheduler/task_traits.h#36",
      "revId": "5216e4d0652c1628a45b7ae46a0ddad291f9afb8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9ae626e6_116432fd",
        "filename": "extensions/browser/api/feedback_private/log_source_access_manager.cc",
        "patchSetId": 10
      },
      "lineNbr": 74,
      "author": {
        "id": 1002543
      },
      "writtenOn": "2017-12-05T17:03:32Z",
      "side": 1,
      "message": "That was a copy and paste error. I am taking BACKGROUND as per Simon\u0027s recommendation here: https://chromium-review.googlesource.com/c/chromium/src/+/807289",
      "parentUuid": "66c40d17_c0dec296",
      "revId": "5216e4d0652c1628a45b7ae46a0ddad291f9afb8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "11df0af8_0aaa9ca1",
        "filename": "extensions/browser/api/feedback_private/log_source_access_manager.cc",
        "patchSetId": 10
      },
      "lineNbr": 74,
      "author": {
        "id": 1115745
      },
      "writtenOn": "2017-12-05T18:10:46Z",
      "side": 1,
      "message": "I don\u0027t see any real explanation there - am I missing it?",
      "parentUuid": "9ae626e6_116432fd",
      "revId": "5216e4d0652c1628a45b7ae46a0ddad291f9afb8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ed8bf468_6e3f97ad",
        "filename": "extensions/browser/api/feedback_private/log_source_access_manager.cc",
        "patchSetId": 10
      },
      "lineNbr": 74,
      "author": {
        "id": 1000329
      },
      "writtenOn": "2017-12-05T20:29:20Z",
      "side": 1,
      "message": "Don\u0027t read too much into my CL as a source of authority/truth/inspiration. After all, I copied that part from an earlier patch set (PS8 or earlier) of this CL. :)",
      "parentUuid": "11df0af8_0aaa9ca1",
      "revId": "5216e4d0652c1628a45b7ae46a0ddad291f9afb8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "99e5ee24_b466b59e",
        "filename": "extensions/browser/api/feedback_private/log_source_access_manager.cc",
        "patchSetId": 10
      },
      "lineNbr": 140,
      "author": {
        "id": 1115745
      },
      "writtenOn": "2017-12-05T14:30:53Z",
      "side": 1,
      "message": "nit: since this is only used in one place, maybe just inline the result.get()?",
      "revId": "5216e4d0652c1628a45b7ae46a0ddad291f9afb8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "44d40a7c_86f582ae",
        "filename": "extensions/browser/api/feedback_private/log_source_access_manager.cc",
        "patchSetId": 10
      },
      "lineNbr": 140,
      "author": {
        "id": 1000329
      },
      "writtenOn": "2017-12-05T15:19:56Z",
      "side": 1,
      "message": "What happens to the std::unique_ptr that gets created but not bound to a variable name? Does it get destroyed?",
      "parentUuid": "99e5ee24_b466b59e",
      "revId": "5216e4d0652c1628a45b7ae46a0ddad291f9afb8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "139c8019_cf2d0d0c",
        "filename": "extensions/browser/api/feedback_private/log_source_access_manager.cc",
        "patchSetId": 10
      },
      "lineNbr": 140,
      "author": {
        "id": 1115745
      },
      "writtenOn": "2017-12-05T15:22:12Z",
      "side": 1,
      "message": "I\u0027m suggesting inlining result.get(), which is a ReadLOgSourceResult*, not a std::unique_ptr\u003c\u003e.  |result| (the std::unique_ptr\u003c\u003e) would not be inlined, since it\u0027s used multiple places.\n\nOtherwise, like any other stack-allocated object, a unique_ptr would be destroyed when it goes out of scope.",
      "parentUuid": "44d40a7c_86f582ae",
      "revId": "5216e4d0652c1628a45b7ae46a0ddad291f9afb8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3827429b_01697c3d",
        "filename": "extensions/browser/api/feedback_private/log_source_access_manager.cc",
        "patchSetId": 10
      },
      "lineNbr": 140,
      "author": {
        "id": 1002543
      },
      "writtenOn": "2017-12-05T15:41:41Z",
      "side": 1,
      "message": "No, in that case we have result.get() and std::move(result) in one PostTaskAndReply statement. That\u0027s a recipe for disaster due to undefined execution order.\n\nMaybe I still don\u0027t understand your proposal.",
      "parentUuid": "139c8019_cf2d0d0c",
      "revId": "5216e4d0652c1628a45b7ae46a0ddad291f9afb8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d36a0d13_c2e36164",
        "filename": "extensions/browser/api/feedback_private/log_source_access_manager.cc",
        "patchSetId": 10
      },
      "lineNbr": 140,
      "author": {
        "id": 1115745
      },
      "writtenOn": "2017-12-05T16:04:00Z",
      "side": 1,
      "message": "Why is it undefined?\n\ntask_runner_for_anonymizer_-\u003ePostTaskAndReply(\n    FROM_HERE,\n    base::BindOnce(AnonymizeResults, anonymizer_container_,\n                   base::Unretained(result.get())),\n    base::BindOnce(callback, std::move(result)));\n\nI\u0027m pretty sure the C++ spec requires each argument to be evaluated in order.  For instance,\n\nvoid Print(int x, int y) {\n  std::cout \u003c\u003c x \u003c\u003c \",\" \u003c\u003c y;\n}\n\nvoid Foo() {\n  int num \u003d 0;\n  Print(num++, num++);\n}\n\nShould *always* print 0, 1.",
      "parentUuid": "3827429b_01697c3d",
      "revId": "5216e4d0652c1628a45b7ae46a0ddad291f9afb8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "acf03af6_af4d8e18",
        "filename": "extensions/browser/api/feedback_private/log_source_access_manager.cc",
        "patchSetId": 10
      },
      "lineNbr": 140,
      "author": {
        "id": 1002543
      },
      "writtenOn": "2017-12-05T17:03:32Z",
      "side": 1,
      "message": "No, unfortunately that\u0027s not the case. \n\nhttp://en.cppreference.com/w/cpp/language/eval_order:\nOrder of evaluation of the operands of almost all C++ operators (including the order of evaluation of function arguments in a function-call expression and the order of evaluation of the subexpressions within any expression) is unspecified. The compiler can evaluate operands in any order, and may choose another order when the same expression is evaluated again.",
      "parentUuid": "d36a0d13_c2e36164",
      "revId": "5216e4d0652c1628a45b7ae46a0ddad291f9afb8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "12938aaa_b423f191",
        "filename": "extensions/browser/api/feedback_private/log_source_access_manager.cc",
        "patchSetId": 10
      },
      "lineNbr": 140,
      "author": {
        "id": 1115745
      },
      "writtenOn": "2017-12-05T18:10:46Z",
      "side": 1,
      "message": "My mind is blown.  I had no idea.  Thanks for the pointer!\n\nLet\u0027s still go ahead and instantiate result_ptr closer to its use, though (just above the PostTaskAndReply() call).",
      "parentUuid": "acf03af6_af4d8e18",
      "revId": "5216e4d0652c1628a45b7ae46a0ddad291f9afb8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7f2f8d27_e9a3b965",
        "filename": "extensions/browser/api/feedback_private/log_source_access_manager.cc",
        "patchSetId": 10
      },
      "lineNbr": 140,
      "author": {
        "id": 1000329
      },
      "writtenOn": "2017-12-05T20:35:06Z",
      "side": 1,
      "message": "To prevent people from having a redundant conversation in the future, move the definition of |result_ptr| to right before it is used (PostTaskAndReply), and add a comment explaining that due to undefined execution order or arguments in a function call, we need to save |result.get()| before calling std::move(result).",
      "parentUuid": "12938aaa_b423f191",
      "revId": "5216e4d0652c1628a45b7ae46a0ddad291f9afb8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7690a0bc_22d580de",
        "filename": "extensions/browser/api/feedback_private/log_source_access_manager.h",
        "patchSetId": 10
      },
      "lineNbr": 156,
      "author": {
        "id": 1000329
      },
      "writtenOn": "2017-12-05T15:19:56Z",
      "side": 1,
      "message": "Extra line.",
      "revId": "5216e4d0652c1628a45b7ae46a0ddad291f9afb8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f16b4f55_8aa3dab4",
        "filename": "extensions/browser/api/feedback_private/log_source_access_manager.h",
        "patchSetId": 10
      },
      "lineNbr": 156,
      "author": {
        "id": 1002543
      },
      "writtenOn": "2017-12-05T17:03:32Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7690a0bc_22d580de",
      "revId": "5216e4d0652c1628a45b7ae46a0ddad291f9afb8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}