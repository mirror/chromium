{
  "comments": [
    {
      "key": {
        "uuid": "f56cf39b_79223cfd",
        "filename": "components/viz/service/display/gl_renderer_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 2622,
      "author": {
        "id": 1000887
      },
      "writtenOn": "2017-11-07T20:25:11Z",
      "side": 1,
      "message": "I don\u0027t think we use the ClearCountingContext here. We can just TestContextProvider::Create()?",
      "revId": "6588ac75ab381a789b8d065124ea3405ea1a79aa",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "91f90344_1b9d19bd",
        "filename": "components/viz/service/display/gl_renderer_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 2631,
      "author": {
        "id": 1000887
      },
      "writtenOn": "2017-11-07T20:25:11Z",
      "side": 1,
      "message": "use auto and std::make_unique pls",
      "revId": "6588ac75ab381a789b8d065124ea3405ea1a79aa",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "25f3cadc_2fc9cb78",
        "filename": "components/viz/service/display/gl_renderer_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 2664,
      "author": {
        "id": 1000887
      },
      "writtenOn": "2017-11-07T20:25:11Z",
      "side": 1,
      "message": "I think the damage flag here doesnt matter if it won\u0027t be in the frame, does it?",
      "revId": "6588ac75ab381a789b8d065124ea3405ea1a79aa",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6f3331a4_b5d3f932",
        "filename": "components/viz/service/display/gl_renderer_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 2677,
      "author": {
        "id": 1000887
      },
      "writtenOn": "2017-11-07T20:25:11Z",
      "side": 1,
      "message": "I was asking to move the code that sets the flag in another CL from in DecideRenderPassAllocationsForFrame() to UseRenderPass() where the texture gets allocated. Is it a bug if that happens? https://cs.chromium.org/chromium/src/components/viz/service/display/direct_renderer.cc?rcl\u003dc6fdf78313b462f20a27279e588820090b024b76\u0026l\u003d650\n\nIf not, can this test not be opinionated about DecideRenderPassAllocationsForFrame() making the call?\n\nAlso question. Where we do set that flag in direct renderer, is when the resource is not in the map at all, so it makes a new ScopedResource to put in the map. In that case the ScopedResource has a 0 id (https://cs.chromium.org/chromium/src/cc/resources/resource.h?rcl\u003dc6fdf78313b462f20a27279e588820090b024b76\u0026l\u003d19)\n\nSo then on the branching at UseRenderPass, it will go down the if (!id()) path (https://cs.chromium.org/chromium/src/components/viz/service/display/direct_renderer.cc?rcl\u003dc6fdf78313b462f20a27279e588820090b024b76\u0026l\u003d649) and not early out. What case does setting the bool in direct_renderer cover such that we\u0027d hit the 2nd branch there and need it to be true, in order to not early out?",
      "revId": "6588ac75ab381a789b8d065124ea3405ea1a79aa",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8369d808_19d95a2b",
        "filename": "components/viz/service/display/gl_renderer_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 2677,
      "author": {
        "id": 1228419
      },
      "writtenOn": "2017-11-07T22:38:34Z",
      "side": 1,
      "message": "It would work to move pass-\u003ehas_damage_from_contributing_content \u003d true; in the branch if (!id()), but since the render_pass is constant in UseRenderPass(const RenderPass* render_pass), we can not modify it unless we remove the const.\n\nWe can discuss how to write the test, basically for any new texture, we need to set the flag to true.\n\nThe original bug is that, there are two passes to call UseRenderPass() [1,2].\nIn DrawRenderPass, it first call this by checking if (!UseRenderPass(render_pass)) [1], this is the first time, if the !texture_id, we create one. If the flag is not set after creating new texture, when we the second time call UseRenderPass in gl_renderer to Draw the content [2], at the second time, texture_id !\u003d 0, and hits second branch without binding the render pass to frame buffer. Down the code path some place triggers error of \"Source and destination textures of the draw are the same.\"\n\n[1] https://cs.chromium.org/chromium/src/components/viz/service/display/direct_renderer.cc?l\u003d527\u0026rcl\u003da92a232a5b1616c352ef3c332242d7422daa9916\n[2] https://cs.chromium.org/chromium/src/components/viz/service/display/gl_renderer.cc?l\u003d1130\u0026rcl\u003da92a232a5b1616c352ef3c332242d7422daa9916",
      "parentUuid": "6f3331a4_b5d3f932",
      "revId": "6588ac75ab381a789b8d065124ea3405ea1a79aa",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5dfdaba8_850ed554",
        "filename": "components/viz/service/display/gl_renderer_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 2677,
      "author": {
        "id": 1000887
      },
      "writtenOn": "2017-11-07T23:25:30Z",
      "side": 1,
      "message": "I see, thanks!\n\nI found https://codereview.chromium.org/2203033005/diff/40001/cc/output/gl_renderer.cc?context\u003d10\u0026column_width\u003d80\u0026tab_spaces\u003d8 where that line was added. It used to be part of the ~ScopedUseGrContext destructor, which made it much more clear why it was being called. I had no idea why it would be in the middle of DrawRenderPassDrawQuad.\n\nI see three bugs in the current implementation:\n- The 2nd UseRenderPass call will not happen if the function early outs, which could leave the wrong frame buffer bound for the next quad in the render pass.\n- The UseRenderPass call can also early out if ComputeScissorRectForRenderPass().IsEmpty() in which case the wrong framebuffer would be bound for the next quad in the render pass.\n- There\u0027s another UseRenderPass call when doing copy requests, which could also early out and then leave the wrong thing bound for future work.\n\nI think the right thing is to not ever early out in this case cuz the use-case is different, in which case we don\u0027t need to set the flag on the renderpass when we alloc the texture. I\u0027ll write something quick.",
      "parentUuid": "8369d808_19d95a2b",
      "revId": "6588ac75ab381a789b8d065124ea3405ea1a79aa",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}