{
  "comments": [
    {
      "key": {
        "uuid": "f0cbfcb3_9bd75e96",
        "filename": "tools/perf/benchmarks/benchmark_smoke_unittest.py",
        "patchSetId": 8
      },
      "lineNbr": 33,
      "author": {
        "id": 1128435
      },
      "writtenOn": "2017-10-11T11:58:15Z",
      "side": 1,
      "message": "Actually why not use 20000 instead of 20e3. I took me a moment to look up what this means.",
      "revId": "314d62c4fb60674a5ce62dea5682d8d570dff4cf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "91c04ea1_36f78202",
        "filename": "tools/perf/benchmarks/benchmark_smoke_unittest.py",
        "patchSetId": 8
      },
      "lineNbr": 33,
      "author": {
        "id": 1115874
      },
      "writtenOn": "2017-10-11T16:44:36Z",
      "side": 1,
      "message": "Once you know how to read _e_ngineering notation, it\u0027s much easier to read than counting zeros.\nQuick: is 2000000000 greater or less than 10000000000? What about 2e9 versus 10e9?\nIt\u0027s the same reason we use UnitScale in tracing and results.html to format scalars.\nPython doesn\u0027t allow literals to use commas like \"20,000\", but we could use 20 * 1000 instead if you prefer.",
      "parentUuid": "f0cbfcb3_9bd75e96",
      "revId": "314d62c4fb60674a5ce62dea5682d8d570dff4cf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4c24445d_5d7b22fd",
        "filename": "tools/perf/benchmarks/benchmark_smoke_unittest.py",
        "patchSetId": 8
      },
      "lineNbr": 33,
      "author": {
        "id": 1128435
      },
      "writtenOn": "2017-10-11T17:39:04Z",
      "side": 1,
      "message": "I agree with using e notation if we have lots of zeroes, but there is only 4 zeroes here so I prefer 20000 :-)",
      "parentUuid": "91c04ea1_36f78202",
      "revId": "314d62c4fb60674a5ce62dea5682d8d570dff4cf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "df21f97c_7f31a807",
        "filename": "tools/perf/benchmarks/benchmark_smoke_unittest.py",
        "patchSetId": 8
      },
      "lineNbr": 33,
      "author": {
        "id": 1115874
      },
      "writtenOn": "2017-10-11T18:47:30Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "4c24445d_5d7b22fd",
      "revId": "314d62c4fb60674a5ce62dea5682d8d570dff4cf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4d1d0efc_64a89c68",
        "filename": "tools/perf/benchmarks/benchmark_smoke_unittest.py",
        "patchSetId": 8
      },
      "lineNbr": 86,
      "author": {
        "id": 1128435
      },
      "writtenOn": "2017-10-11T11:59:49Z",
      "side": 1,
      "message": "I forgot to mention that you didn\u0027t take \u0027pageset_repeat\u0027 into account",
      "revId": "314d62c4fb60674a5ce62dea5682d8d570dff4cf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "794ff770_6584c94d",
        "filename": "tools/perf/benchmarks/benchmark_smoke_unittest.py",
        "patchSetId": 8
      },
      "lineNbr": 86,
      "author": {
        "id": 1115874
      },
      "writtenOn": "2017-10-11T16:44:36Z",
      "side": 1,
      "message": "The comment on line 83 explains:\npageset_repeat doesn\u0027t matter because values are summarized across repetitions before uploading.",
      "parentUuid": "4d1d0efc_64a89c68",
      "revId": "314d62c4fb60674a5ce62dea5682d8d570dff4cf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5524b335_62a1bbdc",
        "filename": "tools/perf/benchmarks/benchmark_smoke_unittest.py",
        "patchSetId": 8
      },
      "lineNbr": 86,
      "author": {
        "id": 1128435
      },
      "writtenOn": "2017-10-11T17:39:04Z",
      "side": 1,
      "message": "Interesting, I thought we keep separate histograms for separate story run?",
      "parentUuid": "794ff770_6584c94d",
      "revId": "314d62c4fb60674a5ce62dea5682d8d570dff4cf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6145dd84_706c9806",
        "filename": "tools/perf/benchmarks/benchmark_smoke_unittest.py",
        "patchSetId": 8
      },
      "lineNbr": 86,
      "author": {
        "id": 1115874
      },
      "writtenOn": "2017-10-11T18:47:30Z",
      "side": 1,
      "message": "It depends on the pipeline stage.\nThe results.html produced by telemetry keeps separate histograms for separate repetitions. It would be possible to use results2json -\u003e merge_histograms -\u003e histograms2html to build a results.html that did not keep separate histograms for separate repetitions, but this doesn\u0027t seem to really happen.\nHowever, this bug is about the chromeperf dashboard.\nThe dashboard\u0027s add_point stores a single Row entity per Value, and add_histograms stores a single Row per Histogram. If there were multiple Values or Histograms with the same name, master, bot, benchmark, story tags / grouping keys / tir label, story name, and revisions, then (IIUC) add_point or add_histograms would race so that only the last Value/Histogram was stored. The dashboard does not care about repetitions.\nTelemetry summarizes across repetitions before producing chartjson.\nThe Histogram Pipeline needs to merge across repetitions before uploading. I have a CL out right now to do just that: https://chromium-review.googlesource.com/c/catapult/+/713658\nThe bug behind this CL is about /add_point timing out because there are too many Values. IIUC, add_point\u0027s performance is more closely related to the number of Values than the number of samples. pageset_repeat affects the number of samples, but it doesn\u0027t affect the number of Values because telemetry summarizes across pageset_repeat, and the Histogram Pipeline will summarize across repetitions as well.\nDoes that sound right?",
      "parentUuid": "5524b335_62a1bbdc",
      "revId": "314d62c4fb60674a5ce62dea5682d8d570dff4cf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}