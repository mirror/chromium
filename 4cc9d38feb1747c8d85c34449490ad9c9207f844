{
  "comments": [
    {
      "key": {
        "uuid": "1d0126f2_a7141d8e",
        "filename": "components/viz/host/hit_test/hit_test_query.cc",
        "patchSetId": 1
      },
      "lineNbr": 58,
      "author": {
        "id": 1000111
      },
      "writtenOn": "2017-09-06T16:51:23Z",
      "side": 1,
      "message": "Do you need to make a copy? Can you do const\u0026 instead?",
      "revId": "4cc9d38feb1747c8d85c34449490ad9c9207f844",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eef3e6d3_d0e28520",
        "filename": "components/viz/host/hit_test/hit_test_query.cc",
        "patchSetId": 1
      },
      "lineNbr": 58,
      "author": {
        "id": 1211635
      },
      "writtenOn": "2017-09-06T19:39:40Z",
      "side": 1,
      "message": "Yea only making a copy worked for me. const\u0026 is still ref to the same memory but the SEGV_ACCERR error I was getting seems to imply that I can\u0027t access it (maybe can\u0027t access it while the previous function call access it... I got a L_unlock_13 in the stack-trace?)",
      "parentUuid": "1d0126f2_a7141d8e",
      "revId": "4cc9d38feb1747c8d85c34449490ad9c9207f844",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "11de16c4_4cd790ce",
        "filename": "components/viz/host/hit_test/hit_test_query.cc",
        "patchSetId": 1
      },
      "lineNbr": 58,
      "author": {
        "id": 1000111
      },
      "writtenOn": "2017-09-06T20:43:33Z",
      "side": 1,
      "message": "Weird. What\u0027s the backtrace from the crash? SEGV_ACCERR probably means null or invalid memory? In which case, a copy here shouldn\u0027t really make a difference.",
      "parentUuid": "eef3e6d3_d0e28520",
      "revId": "4cc9d38feb1747c8d85c34449490ad9c9207f844",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "75db6b4b_e60062b3",
        "filename": "components/viz/host/hit_test/hit_test_query.cc",
        "patchSetId": 1
      },
      "lineNbr": 58,
      "author": {
        "id": 1211635
      },
      "writtenOn": "2017-09-06T22:36:40Z",
      "side": 1,
      "message": "The backtrace is here: https://pastebin.com/4rrHJhJ1\nI haven\u0027t found any explanation at length (do you have a good suggestion?) but they say SEGV_ACCERR means invalid permission for memory - so copy should make a difference?",
      "parentUuid": "11de16c4_4cd790ce",
      "revId": "4cc9d38feb1747c8d85c34449490ad9c9207f844",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c763a551_d0709288",
        "filename": "components/viz/host/hit_test/hit_test_query.cc",
        "patchSetId": 1
      },
      "lineNbr": 58,
      "author": {
        "id": 1000111
      },
      "writtenOn": "2017-09-06T22:54:27Z",
      "side": 1,
      "message": "You still need to read the memory if you are making a copy. So nothing should change, in terms of invalid memory/permission etc. with this change. Can you try with an asan build?\n\nWhat are the chances that |active_hit_test_list_| is nullptr?",
      "parentUuid": "75db6b4b_e60062b3",
      "revId": "4cc9d38feb1747c8d85c34449490ad9c9207f844",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8b78653a_3a551855",
        "filename": "components/viz/host/hit_test/hit_test_query.cc",
        "patchSetId": 1
      },
      "lineNbr": 58,
      "author": {
        "id": 1211635
      },
      "writtenOn": "2017-09-06T23:05:39Z",
      "side": 1,
      "message": "Hmm, would a copy prevent accessing the same memory from different threads? I can repro this when clicking inside the launcher for example (although we should be processing new events if the previous one is not done yet?).\n\nIs is_asan\u003dtrue enough to have an asan build? If so then I have an asan build.\n\nWe won\u0027t come to this function in that case. If |active_hit_test_list_| is nullptr, in which case |active_hit_test_list_size_| should be 0 and we just do early return in line 47.",
      "parentUuid": "c763a551_d0709288",
      "revId": "4cc9d38feb1747c8d85c34449490ad9c9207f844",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5e20f19f_d6327f46",
        "filename": "components/viz/host/hit_test/hit_test_query.cc",
        "patchSetId": 1
      },
      "lineNbr": 58,
      "author": {
        "id": 1211635
      },
      "writtenOn": "2017-09-06T23:07:22Z",
      "side": 1,
      "message": "shouldn\u0027t be processing*, sry",
      "parentUuid": "8b78653a_3a551855",
      "revId": "4cc9d38feb1747c8d85c34449490ad9c9207f844",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7c8e49ed_d4197e98",
        "filename": "components/viz/host/hit_test/hit_test_query.cc",
        "patchSetId": 1
      },
      "lineNbr": 58,
      "author": {
        "id": 1002647
      },
      "writtenOn": "2017-09-08T01:49:56Z",
      "side": 1,
      "message": "Access might actually be different because of this use of mutable [1] when calculating getType [2] (even though getType() and TransformPointInternal() are marked as const. So copy could be working if we have read but not write access to memory. Price we pay for cheating I guess ;)\n\n[1] - https://cs.chromium.org/chromium/src/third_party/skia/include/core/SkMatrix44.h?type\u003dcs\u0026sq\u003dpackage:chromium\u0026l\u003d458\n\n[2] - https://cs.chromium.org/chromium/src/third_party/skia/include/core/SkMatrix44.h?type\u003dcs\u0026sq\u003dpackage:chromium\u0026l\u003d212",
      "parentUuid": "5e20f19f_d6327f46",
      "revId": "4cc9d38feb1747c8d85c34449490ad9c9207f844",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0ad39679_1ae96b87",
        "filename": "components/viz/host/hit_test/hit_test_query.cc",
        "patchSetId": 1
      },
      "lineNbr": 58,
      "author": {
        "id": 1000111
      },
      "writtenOn": "2017-09-08T15:09:22Z",
      "side": 1,
      "message": "That\u0027s some nice detective work!",
      "parentUuid": "7c8e49ed_d4197e98",
      "revId": "4cc9d38feb1747c8d85c34449490ad9c9207f844",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4fe6c5ad_4db1ac42",
        "filename": "services/ui/ws/event_targeter.cc",
        "patchSetId": 1
      },
      "lineNbr": 67,
      "author": {
        "id": 1000111
      },
      "writtenOn": "2017-09-06T16:51:23Z",
      "side": 1,
      "message": "When/Why are we hitting this NOTREACHED()? (we probably do want to replace the NOTREACHED(), but I want to make sure we understand when this is hit first)",
      "revId": "4cc9d38feb1747c8d85c34449490ad9c9207f844",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0fa82d92_9a34bfb3",
        "filename": "services/ui/ws/event_targeter.cc",
        "patchSetId": 1
      },
      "lineNbr": 67,
      "author": {
        "id": 1211635
      },
      "writtenOn": "2017-09-06T19:39:40Z",
      "side": 1,
      "message": "If it\u0027s not a security fault, this is being hit when the target window has been deleted by the time this event is processed, e.g. clicking the gears button inside system\ntray\u0027s network page to open up settings, mouse move events inside system tray after that but before the system tray goes away would fail.",
      "parentUuid": "4fe6c5ad_4db1ac42",
      "revId": "4cc9d38feb1747c8d85c34449490ad9c9207f844",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}