{
  "comments": [
    {
      "key": {
        "uuid": "340b9705_415b6c68",
        "filename": "components/ukm/ukm_recorder_impl.cc",
        "patchSetId": 4
      },
      "lineNbr": 116,
      "author": {
        "id": 1142059
      },
      "writtenOn": "2017-12-08T15:46:59Z",
      "side": 1,
      "message": "CL stalking perf nit: Avoid expensive ReplaceComponents by only doing so if the URL actually has a username or password (which will be quite rare).\n\nAdditionally, can remove a GURL copy by having a \"UrlNeedsSanitizing\" method.",
      "revId": "a8759ff644c9cff35abd1d34add5c02a135ce698",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "23c3d110_7d5729b7",
        "filename": "components/ukm/ukm_recorder_impl.cc",
        "patchSetId": 4
      },
      "lineNbr": 116,
      "author": {
        "id": 1136769
      },
      "writtenOn": "2017-12-08T16:36:21Z",
      "side": 1,
      "message": "Thanks!\n\nCan you elaborate more on what the cost of this call is? If it\u0027s only the cost of GURL construction (or only marginally more expensive beyond this), I\u0027m not worried about it. We do this ~once per page load so there will be no measurable performance change to avoiding one GURL copy per page load, and the reduction in code complexity outweighs the special casing. Specifically, there is a code compexity cost in having a UrlNeedsSanitizing method which needs to be in sync with the SanitizeURL method, and we need to weight the pros and cons of this code complexity cost here.\n\nIf this is a real performance concern, you might also consider filing a bug to the various other teams who are using this pattern (a code search for ClearUsername() will show that this pattern is very common). Or we could file a bug against GURL to make it have reasonable cost when ReplaceComponents is a no op. Ideally, it should be easy to use APIs like this - having to know that ReplaceComponents is expensive (when there\u0027s no reason I can think of here why it should be when it\u0027s a no-op) and we should thus optimize every call site is suboptimal and adds complexity that can lead to bugs. Well designed APIs don\u0027t require every caller to special case like this if the need can be avoided in the implementation.",
      "parentUuid": "340b9705_415b6c68",
      "revId": "a8759ff644c9cff35abd1d34add5c02a135ce698",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "960a82a8_0c00bf3a",
        "filename": "components/ukm/ukm_recorder_impl.cc",
        "patchSetId": 4
      },
      "lineNbr": 116,
      "author": {
        "id": 1142059
      },
      "writtenOn": "2017-12-08T16:45:49Z",
      "side": 1,
      "message": "In many cases we recanonicalize the URL even if there are unchanged components. If this is in any sort of critical navigation path we should avoid it. I think it may be possible to change //url to fix this, maybe I will attempt to do that instead.\n\nThe GURL copy is much less expensive than re-canonicalizing, so I\u0027m much less worried about that.",
      "parentUuid": "23c3d110_7d5729b7",
      "revId": "a8759ff644c9cff35abd1d34add5c02a135ce698",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e383be42_7a761ba3",
        "filename": "components/ukm/ukm_recorder_impl.cc",
        "patchSetId": 4
      },
      "lineNbr": 116,
      "author": {
        "id": 1136769
      },
      "writtenOn": "2017-12-08T16:54:06Z",
      "side": 1,
      "message": "Thanks! Given the frequency with which this runs (~once per page load), I don\u0027t think this optimization makes the right performance / code complexity tradeoff. Specifically, it would require UrlNeedsSanitizing to stay in sync with SanitizeURL - it\u0027d be easy for someone to update one and not the other, leading to a bug. It\u0027s critical that this code be correct (it implements privacy team requirements) so reducing code complexity is very important here.\n\nIf you think it\u0027s important that performance for this and similar calls be optimized when it\u0027s a no-op, I\u0027d suggest filing a GURL bug about it to improve the ReplaceComponents implementation. See the many calls to scrub ClearUsername() here for example: https://cs.chromium.org/chromium/src/url/url_canon.h?l\u003d702 that are doing this unconditionally on all processed URLs. We could either optimize every call site, or fix it once in the implementation. The latter seems better to me.",
      "parentUuid": "960a82a8_0c00bf3a",
      "revId": "a8759ff644c9cff35abd1d34add5c02a135ce698",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "099a80e4_df0ce4f4",
        "filename": "components/ukm/ukm_recorder_impl.cc",
        "patchSetId": 4
      },
      "lineNbr": 116,
      "author": {
        "id": 1142059
      },
      "writtenOn": "2017-12-08T17:04:43Z",
      "side": 1,
      "message": "SGTM, just for the record I am less interested in implementing UrlNeedsSanitizing, it\u0027s probably not worth it. We\u0027d get most of the benefit from:\nif (!url.has_username() \u0026\u0026 !url.has_password())\n  return url;\n\nBut yeah obviously implementing this at GURL has benefits too,though it also has drawbacks too. The solution would need to:\n1. Go through all the replacements\n2. For each one, determine:\n  a. It is a no-op OR\n  b. It is Clear but the GURL does not have that element\n\nI can try to work on it.",
      "parentUuid": "e383be42_7a761ba3",
      "revId": "a8759ff644c9cff35abd1d34add5c02a135ce698",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a5c99b76_12cd4bb7",
        "filename": "components/ukm/ukm_recorder_impl.cc",
        "patchSetId": 4
      },
      "lineNbr": 116,
      "author": {
        "id": 1136769
      },
      "writtenOn": "2017-12-08T17:14:14Z",
      "side": 1,
      "message": "Great, thanks! I suspect optimizing ReplaceComponents will bring real perf benefits (given all the many cases it will fast path, across the whole codebase), while also keeping the call sites of all ReplaceComponents invocations simpler (no need to special case). That seems like the best outcome. Thanks!",
      "parentUuid": "099a80e4_df0ce4f4",
      "revId": "a8759ff644c9cff35abd1d34add5c02a135ce698",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}