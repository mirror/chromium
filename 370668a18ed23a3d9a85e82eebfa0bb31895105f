{
  "comments": [
    {
      "key": {
        "uuid": "da1b4835_98684b31",
        "filename": "services/resource_coordinator/memory_instrumentation/graph.h",
        "patchSetId": 1
      },
      "lineNbr": 29,
      "author": {
        "id": 1002871
      },
      "writtenOn": "2017-10-31T15:46:30Z",
      "side": 1,
      "message": "no need for explicit if you have \u003e1 arg (I hate this part of C++ where casting ctro is implicit by default and not the opposite)",
      "range": {
        "startLine": 29,
        "startChar": 4,
        "endLine": 29,
        "endChar": 12
      },
      "revId": "370668a18ed23a3d9a85e82eebfa0bb31895105f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "206f62a6_65055bff",
        "filename": "services/resource_coordinator/memory_instrumentation/graph.h",
        "patchSetId": 1
      },
      "lineNbr": 29,
      "author": {
        "id": 1242479
      },
      "writtenOn": "2017-11-02T14:10:56Z",
      "side": 1,
      "message": "Done (and agreed!)",
      "parentUuid": "da1b4835_98684b31",
      "range": {
        "startLine": 29,
        "startChar": 4,
        "endLine": 29,
        "endChar": 12
      },
      "revId": "370668a18ed23a3d9a85e82eebfa0bb31895105f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "314bc8a0_815b927d",
        "filename": "services/resource_coordinator/memory_instrumentation/graph_processor.cc",
        "patchSetId": 1
      },
      "lineNbr": 103,
      "author": {
        "id": 1002871
      },
      "writtenOn": "2017-10-31T15:46:30Z",
      "side": 1,
      "message": "global_process is a bit of a confusing name, mostly nameed after the fact that we have a special hidden process there.\nI\u0027d just here:\nNode* global_node \u003d global_graph-\u003eshared_memory_graph()-\u003eroot()-\u003eGetChild(\"global\");\n\nThe best way to solve naming ambiguity is to not have a name :)",
      "range": {
        "startLine": 103,
        "startChar": 28,
        "endLine": 103,
        "endChar": 63
      },
      "revId": "370668a18ed23a3d9a85e82eebfa0bb31895105f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "02de2ef6_f830c145",
        "filename": "services/resource_coordinator/memory_instrumentation/graph_processor.cc",
        "patchSetId": 1
      },
      "lineNbr": 103,
      "author": {
        "id": 1242479
      },
      "writtenOn": "2017-11-02T14:10:56Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "314bc8a0_815b927d",
      "range": {
        "startLine": 103,
        "startChar": 28,
        "endLine": 103,
        "endChar": 63
      },
      "revId": "370668a18ed23a3d9a85e82eebfa0bb31895105f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "54c95d77_f5d3f1e1",
        "filename": "services/resource_coordinator/memory_instrumentation/graph_processor.cc",
        "patchSetId": 1
      },
      "lineNbr": 106,
      "author": {
        "id": 1002871
      },
      "writtenOn": "2017-10-31T16:29:55Z",
      "side": 1,
      "message": "maybe just a std::multimap\u003cNode*, Edge*\u003e ?",
      "range": {
        "startLine": 106,
        "startChar": 18,
        "endLine": 106,
        "endChar": 27
      },
      "revId": "370668a18ed23a3d9a85e82eebfa0bb31895105f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cd588178_1aadcb26",
        "filename": "services/resource_coordinator/memory_instrumentation/graph_processor.cc",
        "patchSetId": 1
      },
      "lineNbr": 106,
      "author": {
        "id": 1242479
      },
      "writtenOn": "2017-11-02T14:10:56Z",
      "side": 1,
      "message": "The problem with multimap is that there is no way to iterate over all keys with a certain value. SO suggests that when you want this, map\u003cK, list\u003cV\u003e\u003e is the way to go.",
      "parentUuid": "54c95d77_f5d3f1e1",
      "range": {
        "startLine": 106,
        "startChar": 18,
        "endLine": 106,
        "endChar": 27
      },
      "revId": "370668a18ed23a3d9a85e82eebfa0bb31895105f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "07ac1722_e4a8b848",
        "filename": "services/resource_coordinator/memory_instrumentation/graph_processor.cc",
        "patchSetId": 1
      },
      "lineNbr": 107,
      "author": {
        "id": 1002871
      },
      "writtenOn": "2017-10-31T15:46:30Z",
      "side": 1,
      "message": "I might remember wrong but I think that we never have \u003e1 owner of the global dump, so I\u0027d expect this loop to always find one entry.\nI think the real problem is if some other node in the process graph owns the shared memory node.\n\nIn other words, I think that this does NOT happen:\nshared_memory/foo    -\u003e   global/foo\nsomethingelse/foo    /\n\ninstead I think that this can happen:\n  \nsomethingelse/foo -\u003e shared_memory/foo -\u003e global/foo",
      "range": {
        "startLine": 107,
        "startChar": 2,
        "endLine": 107,
        "endChar": 62
      },
      "revId": "370668a18ed23a3d9a85e82eebfa0bb31895105f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8403c86a_aa63692a",
        "filename": "services/resource_coordinator/memory_instrumentation/graph_processor.cc",
        "patchSetId": 1
      },
      "lineNbr": 107,
      "author": {
        "id": 1002871
      },
      "writtenOn": "2017-10-31T16:29:55Z",
      "side": 1,
      "message": "discussed this offline, I was reading this off by one. This makes sense.\nMaybe let\u0027s do this,\n1) rename |global_node| above to |global_root| or |global_nodes_root|.\n2) rename |child| below to |global_node|, cause this is what it really is.\nthis is waht caused my off by one :)\n\nAlso add a comment saying:\n// This is something like \"global/dabadaba\"",
      "parentUuid": "07ac1722_e4a8b848",
      "range": {
        "startLine": 107,
        "startChar": 2,
        "endLine": 107,
        "endChar": 62
      },
      "revId": "370668a18ed23a3d9a85e82eebfa0bb31895105f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1043f999_e2a11f9e",
        "filename": "services/resource_coordinator/memory_instrumentation/graph_processor.cc",
        "patchSetId": 1
      },
      "lineNbr": 107,
      "author": {
        "id": 1242479
      },
      "writtenOn": "2017-11-02T14:10:56Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8403c86a_aa63692a",
      "range": {
        "startLine": 107,
        "startChar": 2,
        "endLine": 107,
        "endChar": 62
      },
      "revId": "370668a18ed23a3d9a85e82eebfa0bb31895105f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a3547b54_f972d0e4",
        "filename": "services/resource_coordinator/memory_instrumentation/graph_processor.cc",
        "patchSetId": 1
      },
      "lineNbr": 112,
      "author": {
        "id": 1002871
      },
      "writtenOn": "2017-10-31T15:46:30Z",
      "side": 1,
      "message": ".count(\"size\") \u003d\u003d 0 is shorter and perhaps even slightly more efficient as doesn\u0027t have to setup the iterator.",
      "range": {
        "startLine": 112,
        "startChar": 13,
        "endLine": 112,
        "endChar": 29
      },
      "revId": "370668a18ed23a3d9a85e82eebfa0bb31895105f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9167abfc_6031685d",
        "filename": "services/resource_coordinator/memory_instrumentation/graph_processor.cc",
        "patchSetId": 1
      },
      "lineNbr": 112,
      "author": {
        "id": 1242479
      },
      "writtenOn": "2017-11-02T14:10:56Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a3547b54_f972d0e4",
      "range": {
        "startLine": 112,
        "startChar": 13,
        "endLine": 112,
        "endChar": 29
      },
      "revId": "370668a18ed23a3d9a85e82eebfa0bb31895105f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "96e514b0_5e9071d9",
        "filename": "services/resource_coordinator/memory_instrumentation/graph_processor.cc",
        "patchSetId": 1
      },
      "lineNbr": 116,
      "author": {
        "id": 1002871
      },
      "writtenOn": "2017-10-31T15:46:30Z",
      "side": 1,
      "message": "s/shared/shared_memory/?",
      "range": {
        "startLine": 116,
        "startChar": 54,
        "endLine": 116,
        "endChar": 59
      },
      "revId": "370668a18ed23a3d9a85e82eebfa0bb31895105f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "174f5741_3349b83e",
        "filename": "services/resource_coordinator/memory_instrumentation/graph_processor.cc",
        "patchSetId": 1
      },
      "lineNbr": 116,
      "author": {
        "id": 1242479
      },
      "writtenOn": "2017-11-02T14:10:56Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "96e514b0_5e9071d9",
      "range": {
        "startLine": 116,
        "startChar": 54,
        "endLine": 116,
        "endChar": 59
      },
      "revId": "370668a18ed23a3d9a85e82eebfa0bb31895105f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9893741d_800bfcc0",
        "filename": "services/resource_coordinator/memory_instrumentation/graph_processor.cc",
        "patchSetId": 1
      },
      "lineNbr": 125,
      "author": {
        "id": 1002871
      },
      "writtenOn": "2017-10-31T15:46:30Z",
      "side": 1,
      "message": "maybe this is a property we could cache when we do the first traversals and build the children (do we do any traversal root -\u003e child)? so yo won\u0027t need to go up here? something like const char* Node.root_mdp_name.",
      "range": {
        "startLine": 124,
        "startChar": 6,
        "endLine": 125,
        "endChar": 36
      },
      "revId": "370668a18ed23a3d9a85e82eebfa0bb31895105f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1dbe57de_708a898b",
        "filename": "services/resource_coordinator/memory_instrumentation/graph_processor.cc",
        "patchSetId": 1
      },
      "lineNbr": 125,
      "author": {
        "id": 1242479
      },
      "writtenOn": "2017-11-02T14:10:56Z",
      "side": 1,
      "message": "I feel like caching this property may end up being a premature optimisation tbh because almost all the time, this loop will only be excuted once or maybe twice so the cost should not be high.",
      "parentUuid": "9893741d_800bfcc0",
      "range": {
        "startLine": 124,
        "startChar": 6,
        "endLine": 125,
        "endChar": 36
      },
      "revId": "370668a18ed23a3d9a85e82eebfa0bb31895105f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4f71fe7d_64593a32",
        "filename": "services/resource_coordinator/memory_instrumentation/graph_processor.cc",
        "patchSetId": 1
      },
      "lineNbr": 128,
      "author": {
        "id": 1002871
      },
      "writtenOn": "2017-10-31T15:46:30Z",
      "side": 1,
      "message": "maybe this could be a static const char SharedMemoryTracker::kDumpRootName[]",
      "range": {
        "startLine": 128,
        "startChar": 32,
        "endLine": 128,
        "endChar": 47
      },
      "revId": "370668a18ed23a3d9a85e82eebfa0bb31895105f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "02f129aa_4c167616",
        "filename": "services/resource_coordinator/memory_instrumentation/graph_processor.cc",
        "patchSetId": 1
      },
      "lineNbr": 128,
      "author": {
        "id": 1242479
      },
      "writtenOn": "2017-11-02T14:10:56Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4f71fe7d_64593a32",
      "range": {
        "startLine": 128,
        "startChar": 32,
        "endLine": 128,
        "endChar": 47
      },
      "revId": "370668a18ed23a3d9a85e82eebfa0bb31895105f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7c20ba7f_7ba02b9c",
        "filename": "services/resource_coordinator/memory_instrumentation/graph_processor.cc",
        "patchSetId": 1
      },
      "lineNbr": 140,
      "author": {
        "id": 1002871
      },
      "writtenOn": "2017-10-31T15:46:30Z",
      "side": 1,
      "message": "if we end up needing this you could easily build the max element while adding to the global_node_to_shared_owners, instead of looping agian here.",
      "range": {
        "startLine": 137,
        "startChar": 4,
        "endLine": 140,
        "endChar": 11
      },
      "revId": "370668a18ed23a3d9a85e82eebfa0bb31895105f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e4afc273_c7b82e0e",
        "filename": "services/resource_coordinator/memory_instrumentation/graph_processor.cc",
        "patchSetId": 1
      },
      "lineNbr": 140,
      "author": {
        "id": 1242479
      },
      "writtenOn": "2017-11-02T14:10:56Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7c20ba7f_7ba02b9c",
      "range": {
        "startLine": 137,
        "startChar": 4,
        "endLine": 140,
        "endChar": 11
      },
      "revId": "370668a18ed23a3d9a85e82eebfa0bb31895105f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6c6d2663_b83a6d32",
        "filename": "services/resource_coordinator/memory_instrumentation/graph_processor_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 116,
      "author": {
        "id": 1002871
      },
      "writtenOn": "2017-10-31T16:29:55Z",
      "side": 1,
      "message": "add also some coverage that mimic the existing weak shared memory links?",
      "range": {
        "startLine": 116,
        "startChar": 27,
        "endLine": 116,
        "endChar": 76
      },
      "revId": "370668a18ed23a3d9a85e82eebfa0bb31895105f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "51526ca9_d1fa1fa7",
        "filename": "services/resource_coordinator/memory_instrumentation/graph_processor_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 116,
      "author": {
        "id": 1242479
      },
      "writtenOn": "2017-11-02T14:10:56Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6c6d2663_b83a6d32",
      "range": {
        "startLine": 116,
        "startChar": 27,
        "endLine": 116,
        "endChar": 76
      },
      "revId": "370668a18ed23a3d9a85e82eebfa0bb31895105f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cf69ea19_abd42d52",
        "filename": "services/resource_coordinator/memory_instrumentation/queued_request_dispatcher.cc",
        "patchSetId": 1
      },
      "lineNbr": 191,
      "author": {
        "id": 1002871
      },
      "writtenOn": "2017-10-31T16:29:55Z",
      "side": 1,
      "message": "out of curiosity why splitting this in 3? now looks like we do 3x lookups?",
      "range": {
        "startLine": 188,
        "startChar": 1,
        "endLine": 191,
        "endChar": 65
      },
      "revId": "370668a18ed23a3d9a85e82eebfa0bb31895105f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3865a5f8_0c3510b3",
        "filename": "services/resource_coordinator/memory_instrumentation/queued_request_dispatcher.cc",
        "patchSetId": 1
      },
      "lineNbr": 191,
      "author": {
        "id": 1242479
      },
      "writtenOn": "2017-11-02T14:10:56Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "cf69ea19_abd42d52",
      "range": {
        "startLine": 188,
        "startChar": 1,
        "endLine": 191,
        "endChar": 65
      },
      "revId": "370668a18ed23a3d9a85e82eebfa0bb31895105f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}