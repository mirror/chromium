{
  "comments": [
    {
      "key": {
        "uuid": "cc392992_36e64354",
        "filename": "components/sync/android/javatests/src/org/chromium/components/sync/AndroidSyncSettingsTest.java",
        "patchSetId": 3
      },
      "lineNbr": 180,
      "author": {
        "id": 1002237
      },
      "writtenOn": "2017-07-13T18:44:59Z",
      "side": 1,
      "message": "Should we guard all access of mNumberOfCallsToWait through synchronized(someObject)?",
      "revId": "56df6017f8ab62efd3f5591a4d00668eb88b476f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8d623386_88691a48",
        "filename": "components/sync/android/javatests/src/org/chromium/components/sync/AndroidSyncSettingsTest.java",
        "patchSetId": 3
      },
      "lineNbr": 180,
      "author": {
        "id": 1140427
      },
      "writtenOn": "2017-07-13T19:27:57Z",
      "side": 1,
      "message": "I don\u0027t think it\u0027s necessary, access of mNumberOfCallsToWait are all done on the test thread, and there shouldn\u0027t be any multithreading involved for test run.\nAnd it doesn\u0027t matter when it comes the order of `mCallbackHelper.notifyCalled()` and `mNumberOfCallsToWait++` as long as the call count end up equal to mNumberOfCallsToWait",
      "parentUuid": "cc392992_36e64354",
      "revId": "56df6017f8ab62efd3f5591a4d00668eb88b476f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a0ccb3b4_c00c6b10",
        "filename": "components/sync/android/javatests/src/org/chromium/components/sync/AndroidSyncSettingsTest.java",
        "patchSetId": 3
      },
      "lineNbr": 180,
      "author": {
        "id": 1002237
      },
      "writtenOn": "2017-07-14T19:22:23Z",
      "side": 1,
      "message": "Ack.",
      "parentUuid": "8d623386_88691a48",
      "revId": "56df6017f8ab62efd3f5591a4d00668eb88b476f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}