{
  "comments": [
    {
      "key": {
        "uuid": "f7eb4e3a_711b2fb6",
        "filename": "content/browser/loader/cross_site_document_blocking_explainer.md",
        "patchSetId": 1
      },
      "lineNbr": 24,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2018-01-31T07:36:00Z",
      "side": 1,
      "message": "nit: particularly",
      "range": {
        "startLine": 24,
        "startChar": 4,
        "endLine": 24,
        "endChar": 17
      },
      "revId": "4bf50ccd34d2317726dfde014b33381576ced5fc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9fd3c806_a1bbd973",
        "filename": "content/browser/loader/cross_site_document_blocking_explainer.md",
        "patchSetId": 1
      },
      "lineNbr": 24,
      "author": {
        "id": 1130134
      },
      "writtenOn": "2018-02-01T00:25:47Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f7eb4e3a_711b2fb6",
      "range": {
        "startLine": 24,
        "startChar": 4,
        "endLine": 24,
        "endChar": 17
      },
      "revId": "4bf50ccd34d2317726dfde014b33381576ced5fc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3e1b1448_15812877",
        "filename": "content/browser/loader/cross_site_document_blocking_explainer.md",
        "patchSetId": 1
      },
      "lineNbr": 43,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2018-01-31T16:07:09Z",
      "side": 1,
      "message": "Maybe we can be slightly stronger here, and say something like not changing existing website behavior?  I think we aim for the blocking to be effectively transparent to websites, since we\u0027re only sending empty responses for things they aren\u0027t supposed to be able to read anyway.  That might also help explain how this isn\u0027t really a spec change or change in site-visible behavior, but rather a useful implementation mechanism and something that might encourage MIME type handling.\n\nI actually think that\u0027s probably worth including a section on later, perhaps between the sniffing and demo sections.  Something about how the blocking is meant to be non-disruptive, and how that applies to various related features:\n* Script tags (avoiding blocking any valid script code, apart from likely attacks)\n* Images/media (not blocking any renderable types)\n* ServiceWorkers (the opaque/non-opaque thing)\n* Prefetch (browser process can still cache the response)\netc.",
      "range": {
        "startLine": 43,
        "startChar": 2,
        "endLine": 43,
        "endChar": 34
      },
      "revId": "4bf50ccd34d2317726dfde014b33381576ced5fc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8bbd2be7_62752fa2",
        "filename": "content/browser/loader/cross_site_document_blocking_explainer.md",
        "patchSetId": 1
      },
      "lineNbr": 43,
      "author": {
        "id": 1130134
      },
      "writtenOn": "2018-02-01T00:25:47Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3e1b1448_15812877",
      "range": {
        "startLine": 43,
        "startChar": 2,
        "endLine": 43,
        "endChar": 34
      },
      "revId": "4bf50ccd34d2317726dfde014b33381576ced5fc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4d07fe97_2f990ff3",
        "filename": "content/browser/loader/cross_site_document_blocking_explainer.md",
        "patchSetId": 1
      },
      "lineNbr": 57,
      "author": {
        "id": 1130134
      },
      "writtenOn": "2018-01-29T20:53:08Z",
      "side": 1,
      "message": "Mike - this is the part that asks the question: which MIME types should be protected by XSDB.",
      "range": {
        "startLine": 57,
        "startChar": 0,
        "endLine": 57,
        "endChar": 48
      },
      "revId": "4bf50ccd34d2317726dfde014b33381576ced5fc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c7418dd4_bb0c3759",
        "filename": "content/browser/loader/cross_site_document_blocking_explainer.md",
        "patchSetId": 1
      },
      "lineNbr": 78,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2018-01-31T07:36:00Z",
      "side": 1,
      "message": "nit: Similarly, responses",
      "range": {
        "startLine": 78,
        "startChar": 35,
        "endLine": 78,
        "endChar": 56
      },
      "revId": "4bf50ccd34d2317726dfde014b33381576ced5fc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "de234702_730ff1da",
        "filename": "content/browser/loader/cross_site_document_blocking_explainer.md",
        "patchSetId": 1
      },
      "lineNbr": 78,
      "author": {
        "id": 1130134
      },
      "writtenOn": "2018-02-01T00:25:47Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c7418dd4_bb0c3759",
      "range": {
        "startLine": 78,
        "startChar": 35,
        "endLine": 78,
        "endChar": 56
      },
      "revId": "4bf50ccd34d2317726dfde014b33381576ced5fc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3f49116c_1a5713a6",
        "filename": "content/browser/loader/cross_site_document_blocking_explainer.md",
        "patchSetId": 1
      },
      "lineNbr": 83,
      "author": {
        "id": 1130134
      },
      "writtenOn": "2018-01-29T20:53:08Z",
      "side": 1,
      "message": "And this is the risky (but probably correct in the long-term) part.",
      "range": {
        "startLine": 77,
        "startChar": 0,
        "endLine": 83,
        "endChar": 36
      },
      "revId": "4bf50ccd34d2317726dfde014b33381576ced5fc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "65e96f5a_10a858d6",
        "filename": "content/browser/loader/cross_site_document_blocking_explainer.md",
        "patchSetId": 1
      },
      "lineNbr": 83,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2018-01-31T07:36:00Z",
      "side": 1,
      "message": "\u003e And this is the risky (but probably correct in the long-term) part.\n\nI like where this is headed, if we can pull it off.  It might even argue for a change of name at some point, but I think the document vs resource distinction is still useful for the time being.",
      "parentUuid": "3f49116c_1a5713a6",
      "range": {
        "startLine": 77,
        "startChar": 0,
        "endLine": 83,
        "endChar": 36
      },
      "revId": "4bf50ccd34d2317726dfde014b33381576ced5fc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e28f5661_011bc46d",
        "filename": "content/browser/loader/cross_site_document_blocking_explainer.md",
        "patchSetId": 1
      },
      "lineNbr": 117,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2018-01-31T07:36:00Z",
      "side": 1,
      "message": "Might be worth mentioning nosniff earlier in this section as well, since it\u0027s not clear we have an exception for that until after reading all the details.",
      "revId": "4bf50ccd34d2317726dfde014b33381576ced5fc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e2dc14f8_5723c25e",
        "filename": "content/browser/loader/cross_site_document_blocking_explainer.md",
        "patchSetId": 1
      },
      "lineNbr": 117,
      "author": {
        "id": 1130134
      },
      "writtenOn": "2018-02-01T00:25:47Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e28f5661_011bc46d",
      "revId": "4bf50ccd34d2317726dfde014b33381576ced5fc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "06b8d602_aca27b3b",
        "filename": "content/browser/loader/cross_site_document_blocking_explainer.md",
        "patchSetId": 1
      },
      "lineNbr": 130,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2018-01-31T07:36:00Z",
      "side": 1,
      "message": "Do we need to define what protected origins are?",
      "range": {
        "startLine": 130,
        "startChar": 2,
        "endLine": 130,
        "endChar": 19
      },
      "revId": "4bf50ccd34d2317726dfde014b33381576ced5fc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c692ca11_e8312767",
        "filename": "content/browser/loader/cross_site_document_blocking_explainer.md",
        "patchSetId": 1
      },
      "lineNbr": 130,
      "author": {
        "id": 1130134
      },
      "writtenOn": "2018-02-01T00:25:47Z",
      "side": 1,
      "message": "Maybe.  Let\u0027s hold off with precisely defining the terms we use until we decide we want to spec the XSDB behavior.\n\nOTOH, maybe I should use a different section header instead of \"protected origins\"?  FWIW, I\u0027ve tried splitting the requirements into \"protected origins\", \"initiator origins\", \"iteroperability\", \"classification\", \"sniffing\" to avoid having a long, unstructured list of requirements.",
      "parentUuid": "06b8d602_aca27b3b",
      "range": {
        "startLine": 130,
        "startChar": 2,
        "endLine": 130,
        "endChar": 19
      },
      "revId": "4bf50ccd34d2317726dfde014b33381576ced5fc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "08d0ecfc_a9dc9842",
        "filename": "content/browser/loader/cross_site_document_blocking_explainer.md",
        "patchSetId": 1
      },
      "lineNbr": 130,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2018-02-01T20:59:54Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "c692ca11_e8312767",
      "range": {
        "startLine": 130,
        "startChar": 2,
        "endLine": 130,
        "endChar": 19
      },
      "revId": "4bf50ccd34d2317726dfde014b33381576ced5fc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7cc726d1_a5943952",
        "filename": "content/browser/loader/cross_site_document_blocking_explainer.md",
        "patchSetId": 1
      },
      "lineNbr": 180,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2018-01-31T07:36:00Z",
      "side": 1,
      "message": "Nick considered classifying such responses as documents even if they had a nosniff header and weren\u0027t otherwise labeled as a document (i.e., sniffing for the parser breaker in pretty much everything).  That would protect quite a few more resources, but it would also be a bit more expensive.  I\u0027m not sure if we want to go that far, but maybe the summary here should allow it?",
      "revId": "4bf50ccd34d2317726dfde014b33381576ced5fc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "be86c4d5_0ae5b47b",
        "filename": "content/browser/loader/cross_site_document_blocking_explainer.md",
        "patchSetId": 1
      },
      "lineNbr": 180,
      "author": {
        "id": 1130134
      },
      "writtenOn": "2018-02-01T00:25:47Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7cc726d1_a5943952",
      "revId": "4bf50ccd34d2317726dfde014b33381576ced5fc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e58bfa81_ac855d81",
        "filename": "content/browser/loader/cross_site_document_blocking_explainer.md",
        "patchSetId": 1
      },
      "lineNbr": 180,
      "author": {
        "id": 1130134
      },
      "writtenOn": "2018-02-01T14:40:03Z",
      "side": 1,
      "message": "BTW: This behavior (sniffing for JSON parser breakers in *all* content types and blocking the result if the parser breaker is found) has already been implemented by Nick (although AFAIK we don\u0027t sniff if the nosniff header is present).",
      "parentUuid": "be86c4d5_0ae5b47b",
      "revId": "4bf50ccd34d2317726dfde014b33381576ced5fc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}