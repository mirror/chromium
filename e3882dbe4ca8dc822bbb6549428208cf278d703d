{
  "comments": [
    {
      "key": {
        "uuid": "00a0810a_c1469528",
        "filename": "chrome/browser/page_load_metrics/page_load_metrics_util.cc",
        "patchSetId": 4
      },
      "lineNbr": 55,
      "author": {
        "id": 1000128
      },
      "writtenOn": "2018-01-24T03:38:46Z",
      "side": 0,
      "message": "I\u0027m not really familiar with this (tricky) code, but this comment makes it sound like the DCHECK shouldn\u0027t just be removed since the logic below depends on this assumption? Is the comment inaccurate and the logic works fine with the character included?",
      "revId": "e3882dbe4ca8dc822bbb6549428208cf278d703d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fffe9109_7c7c79fe",
        "filename": "chrome/browser/page_load_metrics/page_load_metrics_util.cc",
        "patchSetId": 4
      },
      "lineNbr": 55,
      "author": {
        "id": 1189840
      },
      "writtenOn": "2018-01-24T05:30:03Z",
      "side": 0,
      "message": "I\u0027m not 100% sure. Given the comment, I think the original intent of the DCHECK was to verify that that GURL::query_piece() did not include the delimiting \"?\" (and similarly for ref_piece()).\n\nIf there is still a concern about the code working correctly, I think instead of a DCHECK this might be better served as an explicit conditional check then (failing closed to \"does not contain\" seems correct, since it is used to filter out Google search result/redirector URLs).\n\nI\u0027ll see if I can come up with a counterexample where a leading delimiter character (that isn\u0027t the delimiter) actually affects the correctness of the algorithm below.",
      "parentUuid": "00a0810a_c1469528",
      "revId": "e3882dbe4ca8dc822bbb6549428208cf278d703d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d39cb8b3_2002d612",
        "filename": "chrome/browser/page_load_metrics/page_load_metrics_util.cc",
        "patchSetId": 4
      },
      "lineNbr": 55,
      "author": {
        "id": 1136769
      },
      "writtenOn": "2018-01-24T18:14:05Z",
      "side": 0,
      "message": "Thanks all!\n\nBased on the example URL that Christopher shared in the bug:\nhttps://www.google.com/webmasters/#?modal_active\u003dnone\n\nI think we probably do want to instead update the code to just skip over any ? or # characters at the beginning of |query|.\n\nPerhaps we could do something like (using base/strings/string_util.h):\nquery \u003d base::TrimString(query, \"?#\", base::TrimPositions::TRIM_LEADING);\n\nChristopher sorry for the change in impl here. If you want to make this change that\u0027d be awesome, but feel free to reassign to me if you prefer. Let\u0027s also get a test added for the specific case you found to make sure we do return the \u0027right\u0027 query params when encountering URLs like the one you cited in the bug: https://www.google.com/webmasters/#?modal_active\u003dnone",
      "parentUuid": "fffe9109_7c7c79fe",
      "revId": "e3882dbe4ca8dc822bbb6549428208cf278d703d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1b4273b0_d26b1461",
        "filename": "chrome/browser/page_load_metrics/page_load_metrics_util.cc",
        "patchSetId": 4
      },
      "lineNbr": 81,
      "author": {
        "id": 1189840
      },
      "writtenOn": "2018-01-24T18:01:00Z",
      "side": 0,
      "message": "Digging into this code more, I think this line would be broken if GURL::query_piece() included the initial delimiter (it wouldn\u0027t correctly detect that we are at the start of the query string), but that is separate from the fact that it is completely valid for a ref component to include a \u0027?\u0027 character, even as the first character in the component (which is what triggered the DCHECK failure). For example, if it included the delimiter, and the component being searched for was the first component, this would skip that component (incorrectly). But if the \u0027?\u0027 was a part of that component, we would be correctly at the start of the query/ref string at this point.",
      "revId": "e3882dbe4ca8dc822bbb6549428208cf278d703d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}