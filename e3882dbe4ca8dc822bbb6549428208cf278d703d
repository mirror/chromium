{
  "comments": [
    {
      "key": {
        "uuid": "00a0810a_c1469528",
        "filename": "chrome/browser/page_load_metrics/page_load_metrics_util.cc",
        "patchSetId": 4
      },
      "lineNbr": 55,
      "author": {
        "id": 1000128
      },
      "writtenOn": "2018-01-24T03:38:46Z",
      "side": 0,
      "message": "I\u0027m not really familiar with this (tricky) code, but this comment makes it sound like the DCHECK shouldn\u0027t just be removed since the logic below depends on this assumption? Is the comment inaccurate and the logic works fine with the character included?",
      "revId": "e3882dbe4ca8dc822bbb6549428208cf278d703d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fffe9109_7c7c79fe",
        "filename": "chrome/browser/page_load_metrics/page_load_metrics_util.cc",
        "patchSetId": 4
      },
      "lineNbr": 55,
      "author": {
        "id": 1189840
      },
      "writtenOn": "2018-01-24T05:30:03Z",
      "side": 0,
      "message": "I\u0027m not 100% sure. Given the comment, I think the original intent of the DCHECK was to verify that that GURL::query_piece() did not include the delimiting \"?\" (and similarly for ref_piece()).\n\nIf there is still a concern about the code working correctly, I think instead of a DCHECK this might be better served as an explicit conditional check then (failing closed to \"does not contain\" seems correct, since it is used to filter out Google search result/redirector URLs).\n\nI\u0027ll see if I can come up with a counterexample where a leading delimiter character (that isn\u0027t the delimiter) actually affects the correctness of the algorithm below.",
      "parentUuid": "00a0810a_c1469528",
      "revId": "e3882dbe4ca8dc822bbb6549428208cf278d703d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d39cb8b3_2002d612",
        "filename": "chrome/browser/page_load_metrics/page_load_metrics_util.cc",
        "patchSetId": 4
      },
      "lineNbr": 55,
      "author": {
        "id": 1136769
      },
      "writtenOn": "2018-01-24T18:14:05Z",
      "side": 0,
      "message": "Thanks all!\n\nBased on the example URL that Christopher shared in the bug:\nhttps://www.google.com/webmasters/#?modal_active\u003dnone\n\nI think we probably do want to instead update the code to just skip over any ? or # characters at the beginning of |query|.\n\nPerhaps we could do something like (using base/strings/string_util.h):\nquery \u003d base::TrimString(query, \"?#\", base::TrimPositions::TRIM_LEADING);\n\nChristopher sorry for the change in impl here. If you want to make this change that\u0027d be awesome, but feel free to reassign to me if you prefer. Let\u0027s also get a test added for the specific case you found to make sure we do return the \u0027right\u0027 query params when encountering URLs like the one you cited in the bug: https://www.google.com/webmasters/#?modal_active\u003dnone",
      "parentUuid": "fffe9109_7c7c79fe",
      "revId": "e3882dbe4ca8dc822bbb6549428208cf278d703d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3803d0af_9dd7fc18",
        "filename": "chrome/browser/page_load_metrics/page_load_metrics_util.cc",
        "patchSetId": 4
      },
      "lineNbr": 55,
      "author": {
        "id": 1189840
      },
      "writtenOn": "2018-01-24T18:50:22Z",
      "side": 0,
      "message": "The problem I see here (as opposed to in the caller functions with more semantic knowledge of what |query| is) is that by GURL/the URL spec, it is valid to have a query string that starts with \u0027?\u0027 or a ref string that starts with \u0027?\u0027 or \u0027#\u0027. Trimming the leading characters would mean this would fail to match a |component| of \"?modal_active\", to borrow from the test URL under discussion.\n\nI\u0027m not sure we are able to have visibility into GURL\u0027s implementation on this to be able to distinguish these cases (GURL giving a query piece that includes the delimiter versus the query piece genuinely has a \u0027?\u0027 or \u0027#\u0027 as the first character). Maybe there should instead be unit tests that would break if GURL breaks the expected behavior?",
      "parentUuid": "d39cb8b3_2002d612",
      "revId": "e3882dbe4ca8dc822bbb6549428208cf278d703d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ddb6d05a_da30c188",
        "filename": "chrome/browser/page_load_metrics/page_load_metrics_util.cc",
        "patchSetId": 4
      },
      "lineNbr": 55,
      "author": {
        "id": 1136769
      },
      "writtenOn": "2018-01-24T18:58:25Z",
      "side": 0,
      "message": "You\u0027re absolutely right - technically I suppose the name of the first param in the hash fragment here is \u0027?modal_active\u0027. But I think the intent is that the name is just \u0027modal_active\u0027 and that the web app is injecting what is conceptually a query string into the hash fragment.\n\nI think I\u0027m inclined to assume that ? and # at the beginning of these fragments are redundant characters and should be ignored. It\u0027s a heuristic-based approach for sure, but I think it\u0027s more likely to produce correct results (in terms of what the web developer intended).\n\nWe should definitely add a comment here to explain why we are trimming these off, and why we think it\u0027s the right thing to do, even though we know it\u0027s a heuristic.\n\nWDYT?",
      "parentUuid": "3803d0af_9dd7fc18",
      "revId": "e3882dbe4ca8dc822bbb6549428208cf278d703d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6aef543b_6b7672da",
        "filename": "chrome/browser/page_load_metrics/page_load_metrics_util.cc",
        "patchSetId": 4
      },
      "lineNbr": 55,
      "author": {
        "id": 1189840
      },
      "writtenOn": "2018-01-29T18:50:34Z",
      "side": 0,
      "message": "I\u0027ve uploaded a new patchset that adds trimming of initial characters and comments on the trimming line as well as a comment on the public functions. Let me know what you think/if there are clearer ways of expressing the edge case issues.\n\nI do think that long term using tests to maintain the contract with the GURL implementation makes more sense, but I\u0027m happy to defer on this since the only callers of these functions are local to this file (and new callers would see the comments).",
      "parentUuid": "ddb6d05a_da30c188",
      "revId": "e3882dbe4ca8dc822bbb6549428208cf278d703d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1b4273b0_d26b1461",
        "filename": "chrome/browser/page_load_metrics/page_load_metrics_util.cc",
        "patchSetId": 4
      },
      "lineNbr": 81,
      "author": {
        "id": 1189840
      },
      "writtenOn": "2018-01-24T18:01:00Z",
      "side": 0,
      "message": "Digging into this code more, I think this line would be broken if GURL::query_piece() included the initial delimiter (it wouldn\u0027t correctly detect that we are at the start of the query string), but that is separate from the fact that it is completely valid for a ref component to include a \u0027?\u0027 character, even as the first character in the component (which is what triggered the DCHECK failure). For example, if it included the delimiter, and the component being searched for was the first component, this would skip that component (incorrectly). But if the \u0027?\u0027 was a part of that component, we would be correctly at the start of the query/ref string at this point.",
      "revId": "e3882dbe4ca8dc822bbb6549428208cf278d703d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "135a6d1f_186552e9",
        "filename": "chrome/browser/page_load_metrics/page_load_metrics_util.cc",
        "patchSetId": 4
      },
      "lineNbr": 81,
      "author": {
        "id": 1189840
      },
      "writtenOn": "2018-01-29T18:50:34Z",
      "side": 0,
      "message": "Done",
      "parentUuid": "1b4273b0_d26b1461",
      "revId": "e3882dbe4ca8dc822bbb6549428208cf278d703d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}