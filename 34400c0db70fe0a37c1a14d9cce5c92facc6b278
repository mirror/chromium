{
  "comments": [
    {
      "key": {
        "uuid": "a0e89fd5_dab73d40",
        "filename": "cc/trees/layer_tree_frame_sink.cc",
        "patchSetId": 4
      },
      "lineNbr": 49,
      "author": {
        "id": 1000887
      },
      "writtenOn": "2017-12-01T21:46:32Z",
      "side": 1,
      "message": "The compositor uses a different task runner than the current one tho.. I always \u003e_\u003e at calls to ThreadTaskRunnerHandle to get the compositor thread. Should we pass the handle to this class?",
      "revId": "34400c0db70fe0a37c1a14d9cce5c92facc6b278",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "74950c64_a9e61ac2",
        "filename": "cc/trees/layer_tree_frame_sink.cc",
        "patchSetId": 4
      },
      "lineNbr": 49,
      "author": {
        "id": 1128437
      },
      "writtenOn": "2017-12-01T22:12:53Z",
      "side": 1,
      "message": "I considered passing in the task runner, but chose to use ThreadTaskRunnerHandle because:\n1. This is a thread affine API. We\u0027re binding both the client and the current thread (see the call to BindToCurrentThread).\n2. Passing in the task runner means changing subclasses and their call-sites (either ctor or BindToClient).",
      "parentUuid": "a0e89fd5_dab73d40",
      "revId": "34400c0db70fe0a37c1a14d9cce5c92facc6b278",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "053b3abd_a57f6202",
        "filename": "cc/trees/layer_tree_frame_sink.cc",
        "patchSetId": 4
      },
      "lineNbr": 49,
      "author": {
        "id": 1000887
      },
      "writtenOn": "2017-12-01T22:55:59Z",
      "side": 1,
      "message": "\u003e I considered passing in the task runner, but chose to use ThreadTaskRunnerHandle because:\n\u003e 1. This is a thread affine API. We\u0027re binding both the client and the current thread (see the \n\u003e call to BindToCurrentThread).\n\nThat\u0027s true, though I guess that doesn\u0027t mean that ThreadTaskRunnerHandle is the right task runner.\n\n\u003e 2. Passing in the task runner means changing subclasses and their call-sites (either ctor or \n\u003e BindToClient).\n\nYeah, there are 5 (4 legit) subclasses, but Idk if that\u0027s a big problem.. I guess the thought is if we use this other task runner here, than the tasks will not neccessarily run in order with other compositor thread tasks posted by the compositor itself, since they don\u0027t go to this task runner? What kind of things may happen as a result if this happened during a resize for example? How shall we prevent other things in the future from using this TaskRunner incorrectly?",
      "parentUuid": "74950c64_a9e61ac2",
      "revId": "34400c0db70fe0a37c1a14d9cce5c92facc6b278",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "40e2b0d1_c65c9f6a",
        "filename": "cc/trees/layer_tree_frame_sink.cc",
        "patchSetId": 4
      },
      "lineNbr": 54,
      "author": {
        "id": 1000887
      },
      "writtenOn": "2017-12-01T21:46:32Z",
      "side": 1,
      "message": "I don\u0027t think subclasses expect DetatchFromClient() to be called from here. I remember doing a bunch of work to stop doing this. Can we avoid doing so again?",
      "revId": "34400c0db70fe0a37c1a14d9cce5c92facc6b278",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5f24e288_6694ad49",
        "filename": "cc/trees/layer_tree_frame_sink.cc",
        "patchSetId": 4
      },
      "lineNbr": 54,
      "author": {
        "id": 1128437
      },
      "writtenOn": "2017-12-01T22:12:53Z",
      "side": 1,
      "message": "will do",
      "parentUuid": "40e2b0d1_c65c9f6a",
      "revId": "34400c0db70fe0a37c1a14d9cce5c92facc6b278",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "26cecddc_49ae957d",
        "filename": "cc/trees/layer_tree_frame_sink.cc",
        "patchSetId": 4
      },
      "lineNbr": 100,
      "author": {
        "id": 1000887
      },
      "writtenOn": "2017-12-01T21:46:32Z",
      "side": 1,
      "message": "Ehh, this infamous if on thread else pattern.. Would it be too annoying to make a composed watcher object for the worker context so we can unconditionally do the right thing in each place?",
      "revId": "34400c0db70fe0a37c1a14d9cce5c92facc6b278",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2e7d490a_c4f826da",
        "filename": "cc/trees/layer_tree_frame_sink.cc",
        "patchSetId": 4
      },
      "lineNbr": 100,
      "author": {
        "id": 1128437
      },
      "writtenOn": "2017-12-01T22:12:53Z",
      "side": 1,
      "message": "You mean a ContextLostObserver(task_runner, callback)? I could also always forward the context lost as a task (extra callback for compositor context loss).\n\nTBH though I find this pattern more readable :)",
      "parentUuid": "26cecddc_49ae957d",
      "revId": "34400c0db70fe0a37c1a14d9cce5c92facc6b278",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1217d24a_b8b2cbc2",
        "filename": "cc/trees/layer_tree_frame_sink.cc",
        "patchSetId": 4
      },
      "lineNbr": 100,
      "author": {
        "id": 1000887
      },
      "writtenOn": "2017-12-01T22:55:59Z",
      "side": 1,
      "message": "Yeah that\u0027s what I mean.\n\nAlways forward would be okay too if that doesn\u0027t break (make harder) our existing tests.\n\nTo me what I don\u0027t like is that in the renderer it would make a new stack frame, but in the ui compositor it won\u0027t. This makes writing unit tests a lot harder in my experience, and makes it easy to write code that is wrong, but you didn\u0027t manage to cover that case in tests.",
      "parentUuid": "2e7d490a_c4f826da",
      "revId": "34400c0db70fe0a37c1a14d9cce5c92facc6b278",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f3bfe481_d7ac41a6",
        "filename": "cc/trees/layer_tree_frame_sink.h",
        "patchSetId": 4
      },
      "lineNbr": 139,
      "author": {
        "id": 1000887
      },
      "writtenOn": "2017-12-01T21:46:32Z",
      "side": 1,
      "message": "can you give more context in this var name\n\nalso SequencedTaskRunner is sufficient here?",
      "revId": "34400c0db70fe0a37c1a14d9cce5c92facc6b278",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}