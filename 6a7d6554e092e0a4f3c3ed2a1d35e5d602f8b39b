{
  "comments": [
    {
      "key": {
        "uuid": "0aefbbce_121004dc",
        "filename": "content/browser/renderer_host/render_process_host_impl.cc",
        "patchSetId": 15
      },
      "lineNbr": 1912,
      "author": {
        "id": 1110029
      },
      "writtenOn": "2017-08-10T00:30:38Z",
      "side": 1,
      "message": "no need to specify task runner here. The render process wide registry by default uses the IO thread.",
      "revId": "6a7d6554e092e0a4f3c3ed2a1d35e5d602f8b39b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cb5bcf93_bd8854bb",
        "filename": "content/browser/renderer_host/render_process_host_impl.cc",
        "patchSetId": 15
      },
      "lineNbr": 1912,
      "author": {
        "id": 1163599
      },
      "writtenOn": "2017-08-10T23:41:20Z",
      "side": 1,
      "message": "Done.\n\nThank you for explaining!",
      "parentUuid": "0aefbbce_121004dc",
      "revId": "6a7d6554e092e0a4f3c3ed2a1d35e5d602f8b39b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2abc50e6_36f0b9d5",
        "filename": "third_party/WebKit/Source/modules/cookie_store/CookieListItem.idl",
        "patchSetId": 15
      },
      "lineNbr": 6,
      "author": {
        "id": 1110029
      },
      "writtenOn": "2017-08-10T00:30:38Z",
      "side": 1,
      "message": "nit: exposed on a dictionary is meaningless (their name isn\u0027t exposed anyway)",
      "revId": "6a7d6554e092e0a4f3c3ed2a1d35e5d602f8b39b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "632a9339_d9ad5d83",
        "filename": "third_party/WebKit/Source/modules/cookie_store/CookieListItem.idl",
        "patchSetId": 15
      },
      "lineNbr": 6,
      "author": {
        "id": 1163599
      },
      "writtenOn": "2017-08-10T23:41:20Z",
      "side": 1,
      "message": "Done, here and in other files.\n\nThank you!",
      "parentUuid": "2abc50e6_36f0b9d5",
      "revId": "6a7d6554e092e0a4f3c3ed2a1d35e5d602f8b39b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a491ff84_6c9e9c2d",
        "filename": "third_party/WebKit/Source/modules/cookie_store/CookieStore.cpp",
        "patchSetId": 15
      },
      "lineNbr": 60,
      "author": {
        "id": 1110029
      },
      "writtenOn": "2017-08-10T00:30:38Z",
      "side": 1,
      "message": "you could return a rejected promise, rather than throwing an exception, after all that\u0027s what the bindings code will end up doing anyway. Although I suppose the exception state might make error handling for stuff you might call from here simpler, so up to you what you prefer.",
      "revId": "6a7d6554e092e0a4f3c3ed2a1d35e5d602f8b39b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4e80ae28_447a63cd",
        "filename": "third_party/WebKit/Source/modules/cookie_store/CookieStore.cpp",
        "patchSetId": 15
      },
      "lineNbr": 60,
      "author": {
        "id": 1163599
      },
      "writtenOn": "2017-08-10T23:41:20Z",
      "side": 1,
      "message": "Ack.\n\nI looked at examples that reject the promise, and the code looks more complex than letting the bindings do the right thing :D",
      "parentUuid": "a491ff84_6c9e9c2d",
      "revId": "6a7d6554e092e0a4f3c3ed2a1d35e5d602f8b39b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2e03be13_1dc8bd72",
        "filename": "third_party/WebKit/Source/modules/cookie_store/CookieStore.cpp",
        "patchSetId": 15
      },
      "lineNbr": 99,
      "author": {
        "id": 1110029
      },
      "writtenOn": "2017-08-10T00:30:38Z",
      "side": 1,
      "message": "do you need to do all these complicated  bits to manually create v8 values, or can you just create a Vector\u003cCookieListItem\u003e and pass that to Resolve()? I\u0027m pretty sure ToV8 has overloads for Vector.\n\nYou might even want to have a mojo typemap to automatically typemap mojom.blink.CookieInfo to blink::CookieListItem",
      "revId": "6a7d6554e092e0a4f3c3ed2a1d35e5d602f8b39b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1c1e9995_7b7a1d7b",
        "filename": "third_party/WebKit/Source/modules/cookie_store/CookieStore.cpp",
        "patchSetId": 15
      },
      "lineNbr": 99,
      "author": {
        "id": 1163599
      },
      "writtenOn": "2017-08-10T23:41:20Z",
      "side": 1,
      "message": "Done.\n\nSwitched to creating a HeapVector. I couldn\u0027t get away with a vector, because IDL dictionaries have Trace() methods. I think that this code will result in some extra copying and allocations, but I suppose that\u0027s OK, as this isn\u0027t a high-throughput API.",
      "parentUuid": "2e03be13_1dc8bd72",
      "revId": "6a7d6554e092e0a4f3c3ed2a1d35e5d602f8b39b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5d3342aa_b2408479",
        "filename": "third_party/WebKit/Source/modules/cookie_store/CookieStore.cpp",
        "patchSetId": 15
      },
      "lineNbr": 110,
      "author": {
        "id": 1110029
      },
      "writtenOn": "2017-08-10T00:30:38Z",
      "side": 1,
      "message": "Here too would it make sense to typemap the blink CookieStoreGetOptions to the mojom.blink.CookieStoreGetOptions struct? You\u0027d still need to do the validation separately of course.",
      "revId": "6a7d6554e092e0a4f3c3ed2a1d35e5d602f8b39b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2423b613_c171bcc4",
        "filename": "third_party/WebKit/Source/modules/cookie_store/CookieStore.cpp",
        "patchSetId": 15
      },
      "lineNbr": 110,
      "author": {
        "id": 1163599
      },
      "writtenOn": "2017-08-11T00:19:13Z",
      "side": 1,
      "message": "https://crrev.com/2772893002 makes me think this isn\u0027t going to work. Am I wrong?",
      "parentUuid": "5d3342aa_b2408479",
      "revId": "6a7d6554e092e0a4f3c3ed2a1d35e5d602f8b39b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "16354471_b00f0224",
        "filename": "third_party/WebKit/Source/modules/cookie_store/GlobalCookieStore.cpp",
        "patchSetId": 15
      },
      "lineNbr": 40,
      "author": {
        "id": 1110029
      },
      "writtenOn": "2017-08-10T00:30:38Z",
      "side": 1,
      "message": "nit: it seems a bit weird to pass in T\u0026 scope, when you can already get that value by calling GetSupplementable()",
      "revId": "6a7d6554e092e0a4f3c3ed2a1d35e5d602f8b39b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cd8d8aa7_aa96d34d",
        "filename": "third_party/WebKit/Source/modules/cookie_store/GlobalCookieStore.cpp",
        "patchSetId": 15
      },
      "lineNbr": 40,
      "author": {
        "id": 1163599
      },
      "writtenOn": "2017-08-10T23:41:20Z",
      "side": 1,
      "message": "Ack.\n\nGetSupplementable() actually returns null where I\u0027d need it. I\u0027m guessing this is because Supplement::ProvideTo is called after the GlobalCookieStoreImpl() is created. FWIW, IndexedDB also follows this pattern, so perhaps I\u0027m not seeing things?\nhttps://cs.chromium.org/chromium/src/third_party/WebKit/Source/modules/indexeddb/GlobalIndexedDB.cpp\n\nCrash below:\n\n[1:1:0810/155029.325314:4834689051750:ERROR:GlobalCookieStore.cpp(73)] GetSupplementable: (nil)\nReceived signal 11 SEGV_MAPERR 000000000060\n#0 0x7f47fb98c24d base::debug::StackTrace::StackTrace()\n#1 0x7f47fb98a61c base::debug::StackTrace::StackTrace()\n#2 0x7f47fb98bc05 base::debug::(anonymous namespace)::StackDumpSignalHandler()\n#3 0x7f4800d9d330 \u003cunknown\u003e\n#4 0x7f47f043c56c WTF::RefPtr\u003c\u003e::operator bool()\n#5 0x7f47f0c3d500 blink::DOMWindow::GetFrame()\n#6 0x7f47f0c3d1e5 blink::LocalDOMWindow::GetFrame()\n#7 0x7f47f0c4274e blink::(anonymous namespace)::GlobalCookieStoreImpl\u003c\u003e::GetCookieStore()\n#8 0x7f47f0c4259d blink::GlobalCookieStore::cookieStore()\n#9 0x7f47f0a95173 blink::DOMWindowPartialV8Internal::cookieStoreAttributeGetter()\n#10 0x7f47f0a95105 blink::V8WindowPartial::cookieStoreAttributeGetterCallback()\n#11 0x7f47f5d9d802 v8::internal::FunctionCallbackArguments::Call()\n#12 0x7f47f5e7d702 v8::internal::(anonymous namespace)::HandleApiCallHelper\u003c\u003e()\n#13 0x7f47f5e7c578 v8::internal::Builtins::InvokeApiFunction()\n#14 0x7f47f634dfee v8::internal::Object::GetPropertyWithAccessor()\n#15 0x7f47f6278822 v8::internal::LoadIC::Load()\n#16 0x7f47f6279456 v8::internal::LoadGlobalIC::Load()\n#17 0x7f47f6284cf4 v8::internal::__RT_impl_Runtime_LoadGlobalIC_Miss()",
      "parentUuid": "16354471_b00f0224",
      "revId": "6a7d6554e092e0a4f3c3ed2a1d35e5d602f8b39b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}