{
  "comments": [
    {
      "key": {
        "uuid": "4e1f77ee_d421e61a",
        "filename": "chrome/browser/password_manager/chrome_password_manager_client.cc",
        "patchSetId": 1
      },
      "lineNbr": 179,
      "author": {
        "id": 1003152
      },
      "writtenOn": "2017-06-14T09:27:09Z",
      "side": 1,
      "message": "Note that the ChromePasswordManagerClient has WebContents-lifetime. We will have to create a new ID here (or re-fetch a shared one) on each committed main-frame navigation.\n\nA good solution to achieve that is to observe WebContentsObserver::DidFinishLoad, and recreate the ID when navigation_handle-\u003eIsInMainFrame() \u0026\u0026 navigation_handle-\u003eHasCommitted() \u0026\u0026 !navigation_handle-\u003eIsSameDocument().",
      "revId": "6e4cdba526db8d7a80367875e0fa1f2b368db51c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "de76e95e_8796a7dc",
        "filename": "chrome/browser/password_manager/chrome_password_manager_client.cc",
        "patchSetId": 1
      },
      "lineNbr": 445,
      "author": {
        "id": 1003152
      },
      "writtenOn": "2017-06-14T09:27:09Z",
      "side": 1,
      "message": "Note that while UkmRecorder indeed looks like a singleton, and as such Get() will retrieve the correct instance; still, all other call sites seem to access this through BrowserProcessImpl::ukm_recorder().",
      "revId": "6e4cdba526db8d7a80367875e0fa1f2b368db51c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f22cb351_fdaf286a",
        "filename": "components/password_manager/core/browser/password_form_manager.h",
        "patchSetId": 1
      },
      "lineNbr": 265,
      "author": {
        "id": 1002541
      },
      "writtenOn": "2017-06-13T18:14:09Z",
      "side": 1,
      "message": "Please do not use friend for this, consider an alternative:\n(1) move those enums to PasswordFormUkmRecorder and make them public\n(2) make them public here\n\nAdding a friend makes the code fragile and removes the guarantee that private stuff is only ever used here.",
      "range": {
        "startLine": 265,
        "startChar": 5,
        "endLine": 265,
        "endChar": 38
      },
      "revId": "6e4cdba526db8d7a80367875e0fa1f2b368db51c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cf6f59c1_484e5b96",
        "filename": "components/password_manager/core/browser/password_form_manager.h",
        "patchSetId": 1
      },
      "lineNbr": 265,
      "author": {
        "id": 1003152
      },
      "writtenOn": "2017-06-14T09:27:09Z",
      "side": 1,
      "message": "Alternatively:\n(3) move the definitions outside of either class into a shared header.\n\nI\u0027d only consider (1) if the corresponding variables do not affect the _behavior of this class_ at all apart from being used metrics collection.\n\nOptionally, in a prior CL we could factor out all metrics collection from this class into a PasswordFormMetricsRecorder, and then have this CL add UKM collection there. The assignments of |manager_action_| and friends seem to be scattered throughout this entire class, however, so probably hard to decouple entirely.",
      "parentUuid": "f22cb351_fdaf286a",
      "range": {
        "startLine": 265,
        "startChar": 5,
        "endLine": 265,
        "endChar": 38
      },
      "revId": "6e4cdba526db8d7a80367875e0fa1f2b368db51c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d72f029f_f9c78fef",
        "filename": "components/password_manager/core/browser/password_form_manager.h",
        "patchSetId": 1
      },
      "lineNbr": 663,
      "author": {
        "id": 1002541
      },
      "writtenOn": "2017-06-13T18:14:09Z",
      "side": 1,
      "message": "Please comment on why this needs to be a unique_ptr and not just a direct member. I assume it is to initialise it lazily? Do we expect that it won\u0027t get initialise all the time? If so, should we stop the destructor from actually creating it every time?",
      "range": {
        "startLine": 663,
        "startChar": 7,
        "endLine": 663,
        "endChar": 17
      },
      "revId": "6e4cdba526db8d7a80367875e0fa1f2b368db51c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1c27b82f_d961df0f",
        "filename": "components/password_manager/core/browser/password_form_manager.h",
        "patchSetId": 1
      },
      "lineNbr": 663,
      "author": {
        "id": 1002541
      },
      "writtenOn": "2017-06-13T18:14:09Z",
      "side": 1,
      "message": "Please comment on the general purpose of this data member as well. At the very least, please expand on what UKM means.",
      "range": {
        "startLine": 663,
        "startChar": 43,
        "endLine": 663,
        "endChar": 70
      },
      "revId": "6e4cdba526db8d7a80367875e0fa1f2b368db51c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a4b43b28_3053b32e",
        "filename": "components/password_manager/core/browser/password_form_ukm_recorder.cc",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 1003152
      },
      "writtenOn": "2017-06-14T09:27:09Z",
      "side": 1,
      "message": "nit: I think these days it\u0027s fashionable to write this: `constexpr const char`.\n\nSee: https://groups.google.com/a/chromium.org/forum/#!searchin/chromium-dev/static$20const/chromium-dev/pF7nAmUQ2uw/HxEHUR1tNhwJ",
      "range": {
        "startLine": 10,
        "startChar": 0,
        "endLine": 10,
        "endChar": 10
      },
      "revId": "6e4cdba526db8d7a80367875e0fa1f2b368db51c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f6df51c8_ad3a739f",
        "filename": "components/password_manager/core/browser/password_form_ukm_recorder.cc",
        "patchSetId": 1
      },
      "lineNbr": 22,
      "author": {
        "id": 1002541
      },
      "writtenOn": "2017-06-13T18:14:09Z",
      "side": 1,
      "message": "The header says: \"and reports them on destruction.\" It seems weird that the destructor is empty. It is also weird that the builder is never called to actually build something. So I guess the builder builds and reports automatically on its own destruction? If so, then please mention it in the declaration of the builder.",
      "range": {
        "startLine": 22,
        "startChar": 54,
        "endLine": 22,
        "endChar": 61
      },
      "revId": "6e4cdba526db8d7a80367875e0fa1f2b368db51c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0b948b44_ce5bed52",
        "filename": "components/password_manager/core/browser/password_form_ukm_recorder.cc",
        "patchSetId": 1
      },
      "lineNbr": 28,
      "author": {
        "id": 1002541
      },
      "writtenOn": "2017-06-13T18:14:09Z",
      "side": 1,
      "message": "Please consider base::checked_cast instead.",
      "range": {
        "startLine": 28,
        "startChar": 52,
        "endLine": 28,
        "endChar": 63
      },
      "revId": "6e4cdba526db8d7a80367875e0fa1f2b368db51c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5d6b0a6e_612db8a4",
        "filename": "components/password_manager/core/browser/password_form_ukm_recorder.cc",
        "patchSetId": 1
      },
      "lineNbr": 28,
      "author": {
        "id": 1002541
      },
      "writtenOn": "2017-06-13T18:14:09Z",
      "side": 1,
      "message": "#include \u003cstdint.h\u003e",
      "range": {
        "startLine": 28,
        "startChar": 64,
        "endLine": 28,
        "endChar": 71
      },
      "revId": "6e4cdba526db8d7a80367875e0fa1f2b368db51c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d5e6a12f_710b4c86",
        "filename": "components/password_manager/core/browser/password_form_ukm_recorder.cc",
        "patchSetId": 1
      },
      "lineNbr": 35,
      "author": {
        "id": 1003152
      },
      "writtenOn": "2017-06-14T09:27:09Z",
      "side": 1,
      "message": "Let\u0027s make these named constants above in the unnamed namespace.",
      "range": {
        "startLine": 35,
        "startChar": 32,
        "endLine": 35,
        "endChar": 53
      },
      "revId": "6e4cdba526db8d7a80367875e0fa1f2b368db51c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c106318e_403a811f",
        "filename": "components/password_manager/core/browser/password_form_ukm_recorder.cc",
        "patchSetId": 1
      },
      "lineNbr": 39,
      "author": {
        "id": 1003152
      },
      "writtenOn": "2017-06-14T09:27:09Z",
      "side": 1,
      "message": "Have you considered either directly recording the SubmitResult enum here, or introducing another enum to be recorded? Without it, it will be difficult to read the corresponding tests and understand the expectations.",
      "range": {
        "startLine": 39,
        "startChar": 63,
        "endLine": 39,
        "endChar": 64
      },
      "revId": "6e4cdba526db8d7a80367875e0fa1f2b368db51c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "874f1ef5_3caff871",
        "filename": "components/password_manager/core/browser/password_form_ukm_recorder.cc",
        "patchSetId": 1
      },
      "lineNbr": 45,
      "author": {
        "id": 1003152
      },
      "writtenOn": "2017-06-14T09:27:09Z",
      "side": 1,
      "message": "nit: WDYT about adding `default:` label around this line?",
      "revId": "6e4cdba526db8d7a80367875e0fa1f2b368db51c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a7ad1243_5a973f51",
        "filename": "components/password_manager/core/browser/password_form_ukm_recorder.cc",
        "patchSetId": 1
      },
      "lineNbr": 45,
      "author": {
        "id": 1002541
      },
      "writtenOn": "2017-06-14T10:02:45Z",
      "side": 1,
      "message": "I like not having default: because it lets the compiler to flag where we need to update the switch statements if new enum values are added.",
      "parentUuid": "874f1ef5_3caff871",
      "revId": "6e4cdba526db8d7a80367875e0fa1f2b368db51c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "09fb8fb5_49980ae4",
        "filename": "components/password_manager/core/browser/password_form_ukm_recorder.cc",
        "patchSetId": 1
      },
      "lineNbr": 45,
      "author": {
        "id": 1003152
      },
      "writtenOn": "2017-06-14T10:09:56Z",
      "side": 1,
      "message": "Does that work for unscoped enums?",
      "parentUuid": "a7ad1243_5a973f51",
      "revId": "6e4cdba526db8d7a80367875e0fa1f2b368db51c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a85da17c_4d9fffdb",
        "filename": "components/password_manager/core/browser/password_form_ukm_recorder.cc",
        "patchSetId": 1
      },
      "lineNbr": 45,
      "author": {
        "id": 1002541
      },
      "writtenOn": "2017-06-16T12:36:40Z",
      "side": 1,
      "message": "You mean just \"enums\" as opposed to \"enum class\"? I think it should, at least I\u0027m aware of this before C++11. Of course, the code does not define if the passed value is actually not in the enum range, which can happen more easily with old enums (due to implicit casting). But then I would argue that having a default: is just papering the real problem over.",
      "parentUuid": "09fb8fb5_49980ae4",
      "revId": "6e4cdba526db8d7a80367875e0fa1f2b368db51c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "144e43d9_5ce296d1",
        "filename": "components/password_manager/core/browser/password_form_ukm_recorder.cc",
        "patchSetId": 1
      },
      "lineNbr": 46,
      "author": {
        "id": 1003152
      },
      "writtenOn": "2017-06-14T09:27:09Z",
      "side": 1,
      "message": "#include \"base/logging.h\"",
      "range": {
        "startLine": 46,
        "startChar": 6,
        "endLine": 46,
        "endChar": 16
      },
      "revId": "6e4cdba526db8d7a80367875e0fa1f2b368db51c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e86293ee_36caa907",
        "filename": "components/password_manager/core/browser/password_form_ukm_recorder.h",
        "patchSetId": 1
      },
      "lineNbr": 22,
      "author": {
        "id": 1002541
      },
      "writtenOn": "2017-06-13T18:14:09Z",
      "side": 1,
      "message": "nit: No need for \"explicit\" with 2 arguments.",
      "range": {
        "startLine": 22,
        "startChar": 2,
        "endLine": 22,
        "endChar": 10
      },
      "revId": "6e4cdba526db8d7a80367875e0fa1f2b368db51c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6e0742c3_e79f3b30",
        "filename": "components/password_manager/core/browser/password_form_ukm_recorder.h",
        "patchSetId": 1
      },
      "lineNbr": 30,
      "author": {
        "id": 1002541
      },
      "writtenOn": "2017-06-13T18:14:09Z",
      "side": 1,
      "message": "You seem to be using unique_ptr to express optionality. Please use base::Optional instead, that will spare us the heap allocation.",
      "range": {
        "startLine": 30,
        "startChar": 7,
        "endLine": 30,
        "endChar": 17
      },
      "revId": "6e4cdba526db8d7a80367875e0fa1f2b368db51c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "13bd55f1_d44395f5",
        "filename": "components/password_manager/core/browser/password_manager_client.h",
        "patchSetId": 1
      },
      "lineNbr": 223,
      "author": {
        "id": 1002541
      },
      "writtenOn": "2017-06-13T18:14:09Z",
      "side": 1,
      "message": "nit: The possessive form of \"it\" is written without the apostrophe: \"its\".",
      "range": {
        "startLine": 223,
        "startChar": 11,
        "endLine": 223,
        "endChar": 12
      },
      "revId": "6e4cdba526db8d7a80367875e0fa1f2b368db51c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6462d89e_d3d0b201",
        "filename": "components/password_manager/core/browser/password_manager_client.h",
        "patchSetId": 1
      },
      "lineNbr": 223,
      "author": {
        "id": 1003152
      },
      "writtenOn": "2017-06-14T09:27:09Z",
      "side": 1,
      "message": "phrasing nit: and its last committed main frame navigation.",
      "range": {
        "startLine": 223,
        "startChar": 9,
        "endLine": 223,
        "endChar": 27
      },
      "revId": "6e4cdba526db8d7a80367875e0fa1f2b368db51c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "59c47548_2e420a30",
        "filename": "components/ukm/public/ukm_recorder.h",
        "patchSetId": 1
      },
      "lineNbr": 41,
      "author": {
        "id": 1002541
      },
      "writtenOn": "2017-06-13T18:14:09Z",
      "side": 1,
      "message": "I am surprised by this reference cycle (password_manager component referencing ukm and vice versa). I understand that by making this just a forward declaration without an actual #include makes this cycle invisible to DEPS checking tools, but it also makes it more fragile (changes in password_manager are not automatically reflected or at least flagged here).\n\nI acknowledge that this is already the pattern here, so not blaming your CL on that. Do you know whether this was discussed or who on the UKM team I could ask about this?",
      "range": {
        "startLine": 41,
        "startChar": 10,
        "endLine": 41,
        "endChar": 26
      },
      "revId": "6e4cdba526db8d7a80367875e0fa1f2b368db51c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}