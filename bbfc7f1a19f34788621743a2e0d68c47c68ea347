{
  "comments": [
    {
      "key": {
        "uuid": "cf18e864_95c9262d",
        "filename": "components/download/internal/controller_impl.cc",
        "patchSetId": 1
      },
      "lineNbr": 261,
      "author": {
        "id": 1107754
      },
      "writtenOn": "2017-06-23T23:17:21Z",
      "side": 1,
      "message": "So it seems like we\u0027re using task_finished_callbacks_ as two things here:\n\n1. The list of tasks to run once we\u0027re done initialization.\n2. The list of tasks that we\u0027re currently in the process of running and need to clean up at some point.\n\nExample of how this can break:\nStartTask(CLEANUP)\nStartTask(DOWNLOAD)\n\nthe cleanup task will run twice because we\u0027ll just loop over the task list each time we call ProcessScheduledTasks.\n\nMaybe it makes sense to do this first:\n1. Support queuing API calls inside the service before the controller is initialized (see 736229).\n2. Move queuing of StartTask calls to that framework along with the other API calls.\n\nThen we can change this:\n1. Call this running_task_callbacks_.\n2. When we get a StartTask, you just process that individual task not all the tasks in the list.",
      "range": {
        "startLine": 247,
        "startChar": 2,
        "endLine": 261,
        "endChar": 3
      },
      "revId": "bbfc7f1a19f34788621743a2e0d68c47c68ea347",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "33c9bd1d_76f5b135",
        "filename": "components/download/internal/controller_impl.cc",
        "patchSetId": 1
      },
      "lineNbr": 274,
      "author": {
        "id": 1107754
      },
      "writtenOn": "2017-06-23T23:17:21Z",
      "side": 1,
      "message": "Maybe add {} since the if line wraps?",
      "range": {
        "startLine": 272,
        "startChar": 2,
        "endLine": 274,
        "endChar": 11
      },
      "revId": "bbfc7f1a19f34788621743a2e0d68c47c68ea347",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "48dae685_8f0c23fe",
        "filename": "components/download/internal/controller_impl.cc",
        "patchSetId": 1
      },
      "lineNbr": 285,
      "author": {
        "id": 1107754
      },
      "writtenOn": "2017-06-23T23:17:21Z",
      "side": 1,
      "message": "Why is this posted?  Ah I see!  Modifying while iterating?  That might be an artifact of looping over all entries each time we want to process any.  See suggestion on migrating pending list to DownloadServiceImpl and having the second list just be a list of active entries.",
      "range": {
        "startLine": 283,
        "startChar": 2,
        "endLine": 285,
        "endChar": 72
      },
      "revId": "bbfc7f1a19f34788621743a2e0d68c47c68ea347",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "612c9ed6_e0441472",
        "filename": "components/download/internal/controller_impl.cc",
        "patchSetId": 1
      },
      "lineNbr": 815,
      "author": {
        "id": 1107754
      },
      "writtenOn": "2017-06-23T23:17:21Z",
      "side": 1,
      "message": "If we have max downloads paused should we stop our job too?",
      "range": {
        "startLine": 812,
        "startChar": 2,
        "endLine": 815,
        "endChar": 3
      },
      "revId": "bbfc7f1a19f34788621743a2e0d68c47c68ea347",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bea47177_e354ab1d",
        "filename": "components/download/internal/controller_impl.cc",
        "patchSetId": 1
      },
      "lineNbr": 825,
      "author": {
        "id": 1107754
      },
      "writtenOn": "2017-06-23T23:17:21Z",
      "side": 1,
      "message": "Can we just (at the end of this method) have something like:\n\n- If (there are no currently running entries) { HandleTaskFinished(...) };\n- This might have to check driver states?  We might be pausing a driver entry for some random reason (other downloads, criteria were \u0027unmet\u0027, etc.).\n\nIf Xing makes the change I suggested removing that early return, putting this check at the end might be easier.  But I think you might have to query a bunch of state to figure it out.",
      "range": {
        "startLine": 820,
        "startChar": 2,
        "endLine": 825,
        "endChar": 3
      },
      "revId": "bbfc7f1a19f34788621743a2e0d68c47c68ea347",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "23ece31d_f4e1ef79",
        "filename": "components/download/internal/controller_impl_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 87,
      "author": {
        "id": 1107754
      },
      "writtenOn": "2017-06-23T23:17:21Z",
      "side": 1,
      "message": "You can simulate calling the closure with GMOCK if you need to.  Something like:\n\nEXPECT_CALL(monitor_, CleanupFilesForCompletedEntries(_, _)).WillOnce(Invoke(arg0.Run())) (I butchered that syntax but look for Invoke() and EXPECT_CALL?\n\nI don\u0027t feel too strongly about this, but might let you keep the consistent mock api :)",
      "range": {
        "startLine": 85,
        "startChar": 2,
        "endLine": 87,
        "endChar": 57
      },
      "revId": "bbfc7f1a19f34788621743a2e0d68c47c68ea347",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1ba28900_aba8b8ca",
        "filename": "components/download/internal/controller_impl_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 314,
      "author": {
        "id": 1107754
      },
      "writtenOn": "2017-06-23T23:17:21Z",
      "side": 1,
      "message": "Should we have an EXPECT_CALL above that the Client gets notified that the task is complete as well?",
      "range": {
        "startLine": 314,
        "startChar": 2,
        "endLine": 314,
        "endChar": 53
      },
      "revId": "bbfc7f1a19f34788621743a2e0d68c47c68ea347",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}