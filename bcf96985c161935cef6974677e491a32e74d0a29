{
  "comments": [
    {
      "key": {
        "uuid": "4a1fb6b2_7bc42a71",
        "filename": "/COMMIT_MSG",
        "patchSetId": 8
      },
      "lineNbr": 14,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2018-01-17T18:03:02Z",
      "side": 1,
      "message": "Out of curiosity, is there value in forwarding the event to the parent five seconds later?  Wouldn\u0027t the user have forgotten about their click/keypress by then anyway?",
      "range": {
        "startLine": 14,
        "startChar": 0,
        "endLine": 14,
        "endChar": 69
      },
      "revId": "bcf96985c161935cef6974677e491a32e74d0a29",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "84505214_79368b06",
        "filename": "/COMMIT_MSG",
        "patchSetId": 8
      },
      "lineNbr": 14,
      "author": {
        "id": 1001433
      },
      "writtenOn": "2018-01-17T18:33:32Z",
      "side": 1,
      "message": "The entire page will be unresponsive during that time, with any input events getting queued. After the timeout fires, any events queued in the meantime will be dispatched, now ignoring the unresponsive renderer. 5 seconds might feel a bit long when that happens, but we also don\u0027t want this to happen too often when JavaScript is just being a bit greedy, because it ultimately means we are deliberately mistargeting events. We can tweak the timeout up or down later if problematic use cases come up.",
      "parentUuid": "4a1fb6b2_7bc42a71",
      "range": {
        "startLine": 14,
        "startChar": 0,
        "endLine": 14,
        "endChar": 69
      },
      "revId": "bcf96985c161935cef6974677e491a32e74d0a29",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b26aa42e_e01e4547",
        "filename": "content/browser/renderer_host/input/one_shot_timeout_monitor.cc",
        "patchSetId": 8
      },
      "lineNbr": 27,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2018-01-17T18:03:02Z",
      "side": 1,
      "message": "OneShotTimeoutMonitor?  (To match what you used in TimedOut())?  Similarly for the line below.",
      "range": {
        "startLine": 27,
        "startChar": 45,
        "endLine": 27,
        "endChar": 59
      },
      "revId": "bcf96985c161935cef6974677e491a32e74d0a29",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "60e63a0b_a76ee30f",
        "filename": "content/browser/renderer_host/input/one_shot_timeout_monitor.cc",
        "patchSetId": 8
      },
      "lineNbr": 27,
      "author": {
        "id": 1001433
      },
      "writtenOn": "2018-01-17T18:33:32Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b26aa42e_e01e4547",
      "range": {
        "startLine": 27,
        "startChar": 45,
        "endLine": 27,
        "endChar": 59
      },
      "revId": "bcf96985c161935cef6974677e491a32e74d0a29",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b7f02220_7f419bf4",
        "filename": "content/browser/renderer_host/render_widget_targeter.cc",
        "patchSetId": 8
      },
      "lineNbr": 36,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2018-01-17T18:03:02Z",
      "side": 1,
      "message": "nit: {} not necessary",
      "revId": "bcf96985c161935cef6974677e491a32e74d0a29",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5fec9edd_23af11d1",
        "filename": "content/browser/renderer_host/render_widget_targeter.cc",
        "patchSetId": 8
      },
      "lineNbr": 36,
      "author": {
        "id": 1001433
      },
      "writtenOn": "2018-01-17T18:33:32Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b7f02220_7f419bf4",
      "revId": "bcf96985c161935cef6974677e491a32e74d0a29",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e26c6db0_0f4b514c",
        "filename": "content/browser/renderer_host/render_widget_targeter.cc",
        "patchSetId": 8
      },
      "lineNbr": 110,
      "author": {
        "id": 1000111
      },
      "writtenOn": "2018-01-17T18:27:28Z",
      "side": 1,
      "message": "I was initially confused by \"nullptr, gfx::PointF()\", and thought we would want to send \"root_view, ComputeEventLocation(event)\" instead for the last two params? But I guess because the fallback here is the root-view itself, these values are not actually used? So this should be OK.",
      "revId": "bcf96985c161935cef6974677e491a32e74d0a29",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "660f4904_7059a8bc",
        "filename": "content/browser/renderer_host/render_widget_targeter.cc",
        "patchSetId": 8
      },
      "lineNbr": 110,
      "author": {
        "id": 1001433
      },
      "writtenOn": "2018-01-17T18:33:32Z",
      "side": 1,
      "message": "That\u0027s correct. I expanded the header comment on QueryClient as Alex suggested, and that should make it a bit clearer.",
      "parentUuid": "e26c6db0_0f4b514c",
      "revId": "bcf96985c161935cef6974677e491a32e74d0a29",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4f1f1e12_4845db7d",
        "filename": "content/browser/renderer_host/render_widget_targeter.h",
        "patchSetId": 8
      },
      "lineNbr": 91,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2018-01-17T18:03:02Z",
      "side": 1,
      "message": "Maybe update this comment to explain what the two new params are?",
      "revId": "bcf96985c161935cef6974677e491a32e74d0a29",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0717f4a8_b65d6d45",
        "filename": "content/browser/renderer_host/render_widget_targeter.h",
        "patchSetId": 8
      },
      "lineNbr": 91,
      "author": {
        "id": 1001433
      },
      "writtenOn": "2018-01-17T18:33:32Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4f1f1e12_4845db7d",
      "revId": "bcf96985c161935cef6974677e491a32e74d0a29",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8991e562_f73d6ea3",
        "filename": "content/common/content_constants_internal.cc",
        "patchSetId": 8
      },
      "lineNbr": 32,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2018-01-17T18:03:02Z",
      "side": 1,
      "message": "nit: append \"Ms\" to the name, similarly to the other delay-related constants above, and maybe move this one to be closer to them (to line 21)?",
      "revId": "bcf96985c161935cef6974677e491a32e74d0a29",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f1325532_5e454190",
        "filename": "content/common/content_constants_internal.cc",
        "patchSetId": 8
      },
      "lineNbr": 32,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2018-01-17T18:03:02Z",
      "side": 1,
      "message": "How will this interact with the hung renderer dialog for OOPIFs?  I know that dialog is broken for OOPIFs as-is (though I\u0027m not entirely sure what its actual behavior is), based on https://crbug.com/798551, but I don\u0027t know if eventually we want an OOPIF that doesn\u0027t ack an input event within kHungRendererDelayMs to pop up up the hung renderer dialog for the whole tab and interfere with this?  For now, I\u0027m mostly curious if we want to ensure kAsyncHitTestTimeout \u003c kHungRendererDelayMs, which seems to be true for desktop platforms, where the kHungRendererDelayMs is 30s, but on Android it\u0027s also 5s (see line 12 above).",
      "range": {
        "startLine": 32,
        "startChar": 14,
        "endLine": 32,
        "endChar": 34
      },
      "revId": "bcf96985c161935cef6974677e491a32e74d0a29",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4fdbe33f_13052921",
        "filename": "content/common/content_constants_internal.cc",
        "patchSetId": 8
      },
      "lineNbr": 32,
      "author": {
        "id": 1001433
      },
      "writtenOn": "2018-01-17T18:33:32Z",
      "side": 1,
      "message": "I think the interaction is reasonable because the hung renderer timeout only starts after we dispatch an event to a renderer process. So if the main frame\u0027s renderer becomes unresponsive and we happen to start an async hit test, then the effect will be that we add 5 seconds before the dialog appears -- 5 seconds to wait for a hit test query, and then a subsequent 30 seconds (on desktop) before the hung renderer triggers. This isn\u0027t relevant for OOPIFs, for which hung renderer dialogs don\u0027t trigger, as the existing bugs note. We could modify this interaction later when it is clear what we want to do with unresponsive OOPIFs.",
      "parentUuid": "f1325532_5e454190",
      "range": {
        "startLine": 32,
        "startChar": 14,
        "endLine": 32,
        "endChar": 34
      },
      "revId": "bcf96985c161935cef6974677e491a32e74d0a29",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "52fd5519_74019822",
        "filename": "content/common/content_constants_internal.cc",
        "patchSetId": 8
      },
      "lineNbr": 32,
      "author": {
        "id": 1001433
      },
      "writtenOn": "2018-01-17T18:33:32Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8991e562_f73d6ea3",
      "revId": "bcf96985c161935cef6974677e491a32e74d0a29",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}