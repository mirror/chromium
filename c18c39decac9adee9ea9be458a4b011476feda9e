{
  "comments": [
    {
      "key": {
        "uuid": "7e9935b5_80df6cf9",
        "filename": "gpu/command_buffer/client/client_transfer_cache.h",
        "patchSetId": 11
      },
      "lineNbr": 38,
      "author": {
        "id": 1115895
      },
      "writtenOn": "2017-11-03T22:10:44Z",
      "side": 1,
      "message": "I\u0027m a little confused why this parameter is a unique_ptr.  Are you expecting entries to be always be moved in? It seems like you could theoretically pass an const ref to an entry on the stack because it gets serialized and never reused.",
      "revId": "c18c39decac9adee9ea9be458a4b011476feda9e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7868169f_b7a1a55f",
        "filename": "gpu/command_buffer/client/client_transfer_cache.h",
        "patchSetId": 11
      },
      "lineNbr": 38,
      "author": {
        "id": 1221484
      },
      "writtenOn": "2017-11-13T23:38:33Z",
      "side": 1,
      "message": "yup - makes sense. Done.",
      "parentUuid": "7e9935b5_80df6cf9",
      "revId": "c18c39decac9adee9ea9be458a4b011476feda9e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1b8115ef_79513e7c",
        "filename": "gpu/command_buffer/service/service_transfer_cache.cc",
        "patchSetId": 11
      },
      "lineNbr": 26,
      "author": {
        "id": 1115895
      },
      "writtenOn": "2017-11-03T22:10:44Z",
      "side": 1,
      "message": "Could you maybe add a linebreak between these functions? I find this block of code hard to parse.",
      "revId": "c18c39decac9adee9ea9be458a4b011476feda9e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e3e01b43_3d0465e2",
        "filename": "gpu/command_buffer/service/service_transfer_cache.cc",
        "patchSetId": 11
      },
      "lineNbr": 26,
      "author": {
        "id": 1221484
      },
      "writtenOn": "2017-11-13T23:38:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1b8115ef_79513e7c",
      "revId": "c18c39decac9adee9ea9be458a4b011476feda9e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a671c186_8764b34d",
        "filename": "gpu/command_buffer/service/service_transfer_cache.cc",
        "patchSetId": 11
      },
      "lineNbr": 49,
      "author": {
        "id": 1115895
      },
      "writtenOn": "2017-11-03T22:10:44Z",
      "side": 1,
      "message": "It seems like you could also return false here and fail the creation? That seems cleaner to me and then you wouldn\u0027t leak the handle in the renderer.",
      "revId": "c18c39decac9adee9ea9be458a4b011476feda9e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1f53be03_f9b6bb1b",
        "filename": "gpu/command_buffer/service/service_transfer_cache.cc",
        "patchSetId": 11
      },
      "lineNbr": 49,
      "author": {
        "id": 1221484
      },
      "writtenOn": "2017-11-13T23:38:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a671c186_8764b34d",
      "revId": "c18c39decac9adee9ea9be458a4b011476feda9e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d122d4ab_9256e789",
        "filename": "gpu/command_buffer/service/service_transfer_cache.cc",
        "patchSetId": 11
      },
      "lineNbr": 68,
      "author": {
        "id": 1115895
      },
      "writtenOn": "2017-11-03T22:10:44Z",
      "side": 1,
      "message": "Should this return false and throw a gl error in the command decoder if the id is bogus? (Same question with DeleteEntry.)",
      "revId": "c18c39decac9adee9ea9be458a4b011476feda9e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b9276cf5_c12b4871",
        "filename": "gpu/command_buffer/service/service_transfer_cache.cc",
        "patchSetId": 11
      },
      "lineNbr": 68,
      "author": {
        "id": 1221484
      },
      "writtenOn": "2017-11-13T23:38:33Z",
      "side": 1,
      "message": "Yeah, not sure why I didn\u0027t.",
      "parentUuid": "d122d4ab_9256e789",
      "revId": "c18c39decac9adee9ea9be458a4b011476feda9e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "64650c3a_47ca3841",
        "filename": "gpu/command_buffer/service/service_transfer_cache.cc",
        "patchSetId": 11
      },
      "lineNbr": 70,
      "author": {
        "id": 1115895
      },
      "writtenOn": "2017-11-03T22:10:44Z",
      "side": 1,
      "message": "Is there any need to check for underflow here? What happens if a client double unlocks?",
      "revId": "c18c39decac9adee9ea9be458a4b011476feda9e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "00f9520b_324438ad",
        "filename": "gpu/command_buffer/service/service_transfer_cache.cc",
        "patchSetId": 11
      },
      "lineNbr": 70,
      "author": {
        "id": 1221484
      },
      "writtenOn": "2017-11-13T23:38:33Z",
      "side": 1,
      "message": "Hmm... I guess it\u0027s a leak - probably better to prevent this. Given that either side can mutate the handle, there\u0027s no way to prevent a malicious client from leaking memory (which is fine, they can already do this), but we can at least prevent an inadvertent double-unlock from leaking. I\u0027ve added a check to ServiceDiscardableHandle::Unlock.",
      "parentUuid": "64650c3a_47ca3841",
      "revId": "c18c39decac9adee9ea9be458a4b011476feda9e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}