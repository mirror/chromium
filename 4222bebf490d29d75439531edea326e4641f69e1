{
  "comments": [
    {
      "key": {
        "uuid": "101afcb9_a90db38e",
        "filename": "net/disk_cache/blockfile/sparse_control.cc",
        "patchSetId": 8
      },
      "lineNbr": 768,
      "author": {
        "id": 1115968
      },
      "writtenOn": "2017-12-06T18:24:57Z",
      "side": 1,
      "message": "Would you mind updating the docs on this?  I have no idea what it does, or what the return value means.  It looks like the return value is added to \"result_\", \"offset_\", and subtracted from \"buff_len_\", but I can\u0027t make any sense of that, given that this returns child_len_ if child_ is false.  We seem to just be claiming we wrote data without actually doing so in that case, which is weird.",
      "range": {
        "startLine": 768,
        "startChar": 4,
        "endLine": 768,
        "endChar": 17
      },
      "revId": "4222bebf490d29d75439531edea326e4641f69e1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bbb082eb_247c276a",
        "filename": "net/disk_cache/blockfile/sparse_control.cc",
        "patchSetId": 8
      },
      "lineNbr": 768,
      "author": {
        "id": 1226494
      },
      "writtenOn": "2017-12-06T18:40:37Z",
      "side": 1,
      "message": "Yeah, will do. The caller is basically hijacking the logic that\u0027s used to split a write (or read) over multiple child entries to also just scan over ranges and find one ---- there isn\u0027t even a buffer for buff_len_ to correspond to, and the intermediate result updates are useless,\nsince this will set result_ itself.\n\nIt\u0027s kind of a stretch of a fit, and probably pointless since unlike other ops this isn\u0027t split up into async pieces.... I think...",
      "parentUuid": "101afcb9_a90db38e",
      "range": {
        "startLine": 768,
        "startChar": 4,
        "endLine": 768,
        "endChar": 17
      },
      "revId": "4222bebf490d29d75439531edea326e4641f69e1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "58925305_36cad23c",
        "filename": "net/disk_cache/blockfile/sparse_control.cc",
        "patchSetId": 8
      },
      "lineNbr": 778,
      "author": {
        "id": 1226494
      },
      "writtenOn": "2017-12-06T19:34:26Z",
      "side": 1,
      "message": "This is missing a * kBlockSize, BTW...",
      "range": {
        "startLine": 778,
        "startChar": 30,
        "endLine": 778,
        "endChar": 40
      },
      "revId": "4222bebf490d29d75439531edea326e4641f69e1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "aaebdf67_e8c9bd36",
        "filename": "net/disk_cache/blockfile/sparse_control.cc",
        "patchSetId": 8
      },
      "lineNbr": 785,
      "author": {
        "id": 1115968
      },
      "writtenOn": "2017-12-06T18:24:57Z",
      "side": 1,
      "message": "Can you document these, and maybe rename them foo_block?  Sorry to ask for more comments, but this code is fairly obscure.\n\nIf I\u0027m understanding things, block size is 2^10, and we\u0027re dealing with things in increments of block size.  last_bit is the block containing the final byte (The child_offset_ + child_len_ - 1 byte), but may be partially populated.\n\nstart is the first block the child contains.",
      "range": {
        "startLine": 785,
        "startChar": 47,
        "endLine": 785,
        "endChar": 58
      },
      "revId": "4222bebf490d29d75439531edea326e4641f69e1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4343e08e_9a7ee5a5",
        "filename": "net/disk_cache/blockfile/sparse_control.cc",
        "patchSetId": 8
      },
      "lineNbr": 785,
      "author": {
        "id": 1226494
      },
      "writtenOn": "2017-12-06T18:40:37Z",
      "side": 1,
      "message": "Hmm, so I was kinda hoping the comment above would give enough context.\n\nBasically, for each child there is a bitmap of used 1 KiB blocks, and also a sub-kb partial write range that always starts at 1 KiB boundary. \n\nThe two may not be adjacent, one instance of which is exactly what the bug was about.\n\nShould I push some of this reply (e.g. explanation of what the bitmap is and the last range to beginning of this comment, may be?)",
      "parentUuid": "aaebdf67_e8c9bd36",
      "range": {
        "startLine": 785,
        "startChar": 47,
        "endLine": 785,
        "endChar": 58
      },
      "revId": "4222bebf490d29d75439531edea326e4641f69e1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f82009c3_aebf2685",
        "filename": "net/disk_cache/blockfile/sparse_control.cc",
        "patchSetId": 8
      },
      "lineNbr": 790,
      "author": {
        "id": 1115968
      },
      "writtenOn": "2017-12-06T18:24:57Z",
      "side": 1,
      "message": "What\u0027s this?  I would have thought it was the full range of the child, but I guess not?",
      "range": {
        "startLine": 790,
        "startChar": 44,
        "endLine": 790,
        "endChar": 58
      },
      "revId": "4222bebf490d29d75439531edea326e4641f69e1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "127741ba_aa6048e2",
        "filename": "net/disk_cache/blockfile/sparse_control.cc",
        "patchSetId": 8
      },
      "lineNbr": 790,
      "author": {
        "id": 1226494
      },
      "writtenOn": "2017-12-06T18:40:37Z",
      "side": 1,
      "message": "It\u0027s the portion of the child requested, see comment on line 783.",
      "parentUuid": "f82009c3_aebf2685",
      "range": {
        "startLine": 790,
        "startChar": 44,
        "endLine": 790,
        "endChar": 58
      },
      "revId": "4222bebf490d29d75439531edea326e4641f69e1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "96ac915a_bc681e0b",
        "filename": "net/disk_cache/blockfile/sparse_control.cc",
        "patchSetId": 8
      },
      "lineNbr": 795,
      "author": {
        "id": 1115968
      },
      "writtenOn": "2017-12-06T18:24:57Z",
      "side": 1,
      "message": "What\u0027s last_write_range, and what\u0027s bits_range.",
      "range": {
        "startLine": 795,
        "startChar": 21,
        "endLine": 795,
        "endChar": 37
      },
      "revId": "4222bebf490d29d75439531edea326e4641f69e1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f2d0124e_adc75c96",
        "filename": "net/disk_cache/blockfile/sparse_control.cc",
        "patchSetId": 8
      },
      "lineNbr": 795,
      "author": {
        "id": 1226494
      },
      "writtenOn": "2017-12-06T18:40:37Z",
      "side": 1,
      "message": "Hmm, is it still unclear after my answer above?",
      "parentUuid": "96ac915a_bc681e0b",
      "range": {
        "startLine": 795,
        "startChar": 21,
        "endLine": 795,
        "endChar": 37
      },
      "revId": "4222bebf490d29d75439531edea326e4641f69e1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f59e1ebf_6ffba993",
        "filename": "net/disk_cache/blockfile/sparse_control.cc",
        "patchSetId": 8
      },
      "lineNbr": 795,
      "author": {
        "id": 1115968
      },
      "writtenOn": "2017-12-06T18:59:03Z",
      "side": 1,
      "message": "Yes, I still have no clue what either of these are.\n\nI would have thought bits_range is the blocks of the child that are both populated and in the range we care about, but that would render everything else below pointless.",
      "parentUuid": "f2d0124e_adc75c96",
      "range": {
        "startLine": 795,
        "startChar": 21,
        "endLine": 795,
        "endChar": 37
      },
      "revId": "4222bebf490d29d75439531edea326e4641f69e1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f3c038eb_bb0294d1",
        "filename": "net/disk_cache/blockfile/sparse_control.cc",
        "patchSetId": 8
      },
      "lineNbr": 795,
      "author": {
        "id": 1115968
      },
      "writtenOn": "2017-12-06T19:04:57Z",
      "side": 1,
      "message": "Oops...We\u0027re intercepting 3 ranges?  There\u0027s the range from child_offset_ to child_len_, the map, and child_data_.header.  Why aren\u0027t those all just the same?",
      "parentUuid": "f59e1ebf_6ffba993",
      "range": {
        "startLine": 795,
        "startChar": 21,
        "endLine": 795,
        "endChar": 37
      },
      "revId": "4222bebf490d29d75439531edea326e4641f69e1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4540d91d_38dfacfa",
        "filename": "net/disk_cache/blockfile/sparse_control.cc",
        "patchSetId": 8
      },
      "lineNbr": 795,
      "author": {
        "id": 1226494
      },
      "writtenOn": "2017-12-06T19:34:26Z",
      "side": 1,
      "message": "bits_range -\u003e bytes_defined_per_bitmap_range ? \nlast_write_range -\u003e bytes_defined_per_last_write_range?\n(maybe drop _range?)\n\nI was also thinking changing header_.last_block and last_block_len\n\nThe child_offset_ to child_len_ comes from the client\u0027s arguments to GetAvailableRange, restricted to this child --- it\u0027s asking \"how much of this range do you have\" --- hence\nme putting it into \"to_find\"\n\nI guess what also makes it somewhat confusing is that bits_range is already intersected, so some of the intersection I do below are likely redundant, I just find it easier to reason that way.",
      "parentUuid": "f3c038eb_bb0294d1",
      "range": {
        "startLine": 795,
        "startChar": 21,
        "endLine": 795,
        "endChar": 37
      },
      "revId": "4222bebf490d29d75439531edea326e4641f69e1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6a23a5f7_14bdab47",
        "filename": "net/disk_cache/blockfile/sparse_control.cc",
        "patchSetId": 8
      },
      "lineNbr": 795,
      "author": {
        "id": 1115968
      },
      "writtenOn": "2017-12-06T19:55:39Z",
      "side": 1,
      "message": "Maybe bitmap_range.  bits_range sounds like a range of bits, which is both not illuminating and not correct.  I still don\u0027t know what last_write is.  child_data_header_range?  Though maybe if I knew how that was related to \"last_write\", that would be obvious.",
      "parentUuid": "4540d91d_38dfacfa",
      "range": {
        "startLine": 795,
        "startChar": 21,
        "endLine": 795,
        "endChar": 37
      },
      "revId": "4222bebf490d29d75439531edea326e4641f69e1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e75aa8b6_34c8371a",
        "filename": "net/disk_cache/blockfile/sparse_control.cc",
        "patchSetId": 8
      },
      "lineNbr": 795,
      "author": {
        "id": 1226494
      },
      "writtenOn": "2017-12-06T22:42:22Z",
      "side": 1,
      "message": "The backend keeps track of one sub-KiB precision range (per child), and updates that when there is a write. So imagine if someone wrote 2048 + 100 bytes starting at offset 0 into the child. At the time of the write, it would set 2 bits, and update the child_data_.header_last_block to 2, and child_data_.header_last_block_size to 100.",
      "parentUuid": "6a23a5f7_14bdab47",
      "range": {
        "startLine": 795,
        "startChar": 21,
        "endLine": 795,
        "endChar": 37
      },
      "revId": "4222bebf490d29d75439531edea326e4641f69e1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6404c6c6_bc5d469a",
        "filename": "net/disk_cache/blockfile/sparse_control.cc",
        "patchSetId": 8
      },
      "lineNbr": 795,
      "author": {
        "id": 1115968
      },
      "writtenOn": "2017-12-07T17:41:08Z",
      "side": 1,
      "message": "Set 2 bits?  What two bits?\n\nSo let\u0027s see if I understand this:\n\nA child is 1 MB, a block is 1k.\n\nThis code is designed to read a (continuous?) chunk of data that may span multiple children.  This particular method is for reading data from within a single child, after setting up various parameters to indicate which chunk of this particular child we want.\n\nchild_offset_ is the offset *within* the current child (Not the offset of the current child, which was confusing me) where we want to start getting data from.  child_len_ isn\u0027t the length of the child (again, this was confusing me), but the length of data starting at child_offset_ we want to read, all contained within this child (Which may not be fully populated, of course).\n\nchild_data_.header.last_block is contained fully within a single block, and indicates a partial (Or maybe complete?) block that was last written, and is the only block in the file where we track having a partially valid block.\n\nOther than last_block, child_map_ is the only information we have on which data in the map is valid.  We only have one boolean for each block.\n\nSo we want to intersect [child_offset_ to child_len_] with the union of {data the map indicates is valid} and [the partial block represented by child_data_].\n\nSo what do we want to return if we only have part of the data?",
      "parentUuid": "e75aa8b6_34c8371a",
      "range": {
        "startLine": 795,
        "startChar": 21,
        "endLine": 795,
        "endChar": 37
      },
      "revId": "4222bebf490d29d75439531edea326e4641f69e1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "29e77de4_73b5d8ee",
        "filename": "net/disk_cache/blockfile/sparse_control.cc",
        "patchSetId": 8
      },
      "lineNbr": 795,
      "author": {
        "id": 1226494
      },
      "writtenOn": "2017-12-07T18:15:32Z",
      "side": 1,
      "message": "2 bits \u003d bit [0] of bitmap and bit [1] of bitmap (however exactly they\u0027re packed into the underlying memory).\n\nI am getting an urge to copy-paste most of what you wrote there into a comment :)\n\nOne potentially important thing, though: this isn\u0027t really about reading but asking what\u0027s available (so that HTTP code can figure out what to get from cache and what to fetch from network); the similarity with reading is probably why it\u0027s structured the way it is WRT to the caller.\n\nlast_block (plus last_block_len) does always describe a partially filled block (or last_block is -1).\n\nAs for what to return, there are actually 2 things that are outputs for the API method: \n\n  virtual int GetAvailableRange(int64_t offset,\n                                int len,\n                                int64_t* start,\n                                const CompletionCallback\u0026 callback)\n\nthe return value is the length of the interval (or a net error); this is wired up to return_ here, and there is also *start to specify the beginning; that would be offset_ in how this is hooked up...\n\nSo if you only have a part of the data, the thing to return would be to return the range describing what\u0027s available (so, again, HTTP code can fetch the rest); except of course\nthere can be multiple discontinuous parts, in which case the earlier one by position is the \none to return.",
      "parentUuid": "6404c6c6_bc5d469a",
      "range": {
        "startLine": 795,
        "startChar": 21,
        "endLine": 795,
        "endChar": 37
      },
      "revId": "4222bebf490d29d75439531edea326e4641f69e1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6c434774_8077a5ca",
        "filename": "net/disk_cache/blockfile/sparse_control.cc",
        "patchSetId": 8
      },
      "lineNbr": 795,
      "author": {
        "id": 1115968
      },
      "writtenOn": "2017-12-07T18:44:45Z",
      "side": 1,
      "message": "Thanks!  (And what was confusing me about the 2 bits it I was thinking 2048+100 meant wrote byte 2048 and 100 more, not wrote the first 2048 bytes), so I think we\u0027re on the same page now, and I can actually review the code!  Thanks for bearing with me.  I\u0027ll try to get to it today.",
      "parentUuid": "29e77de4_73b5d8ee",
      "range": {
        "startLine": 795,
        "startChar": 21,
        "endLine": 795,
        "endChar": 37
      },
      "revId": "4222bebf490d29d75439531edea326e4641f69e1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "84daf133_e098f25a",
        "filename": "net/disk_cache/blockfile/sparse_control.cc",
        "patchSetId": 8
      },
      "lineNbr": 795,
      "author": {
        "id": 1226494
      },
      "writtenOn": "2017-12-07T19:00:20Z",
      "side": 1,
      "message": "To be explicit: wrote first 2148 bytes...\n\nAnd anyway, thanks for all the feedback, hopefully I\u0027ll be able to actually turn it into helpful comments... and there is also no particular reason to hurry this, I think. Hmm, though maybe I am underestimating the impact of this; the weird write pattern that triggers this was toggled by the video code, and it does essentially potentially inject a weird error code in an odd spot of the state machine...\n\n(definitely not a regression, though...)",
      "parentUuid": "6c434774_8077a5ca",
      "range": {
        "startLine": 795,
        "startChar": 21,
        "endLine": 795,
        "endChar": 37
      },
      "revId": "4222bebf490d29d75439531edea326e4641f69e1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f7db7bba_81afe9ce",
        "filename": "net/disk_cache/blockfile/sparse_control.cc",
        "patchSetId": 8
      },
      "lineNbr": 796,
      "author": {
        "id": 1115968
      },
      "writtenOn": "2017-12-06T18:24:57Z",
      "side": 1,
      "message": "nit:  use braces.",
      "range": {
        "startLine": 796,
        "startChar": 41,
        "endLine": 796,
        "endChar": 0
      },
      "revId": "4222bebf490d29d75439531edea326e4641f69e1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "483c0ba0_a5b785d6",
        "filename": "net/disk_cache/blockfile/sparse_control.cc",
        "patchSetId": 8
      },
      "lineNbr": 796,
      "author": {
        "id": 1226494
      },
      "writtenOn": "2017-12-06T18:40:37Z",
      "side": 1,
      "message": "Will do once sort out what to do with the comments stuff",
      "parentUuid": "f7db7bba_81afe9ce",
      "range": {
        "startLine": 796,
        "startChar": 41,
        "endLine": 796,
        "endChar": 0
      },
      "revId": "4222bebf490d29d75439531edea326e4641f69e1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dd307819_cfaa9950",
        "filename": "net/disk_cache/entry_unittest.cc",
        "patchSetId": 8
      },
      "lineNbr": 1910,
      "author": {
        "id": 1115968
      },
      "writtenOn": "2017-12-07T20:44:23Z",
      "side": 1,
      "message": "Are there any tests where we query",
      "range": {
        "startLine": 1910,
        "startChar": 23,
        "endLine": 1910,
        "endChar": 24
      },
      "revId": "4222bebf490d29d75439531edea326e4641f69e1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "428ce61d_d48fec75",
        "filename": "net/disk_cache/entry_unittest.cc",
        "patchSetId": 8
      },
      "lineNbr": 1910,
      "author": {
        "id": 1115968
      },
      "writtenOn": "2017-12-07T20:52:07Z",
      "side": 1,
      "message": "Oops, ignore this (Turns out the answer is yes)",
      "parentUuid": "dd307819_cfaa9950",
      "range": {
        "startLine": 1910,
        "startChar": 23,
        "endLine": 1910,
        "endChar": 24
      },
      "revId": "4222bebf490d29d75439531edea326e4641f69e1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}