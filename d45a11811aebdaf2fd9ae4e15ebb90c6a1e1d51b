{
  "comments": [
    {
      "key": {
        "uuid": "fa3684fa_37dd01e7",
        "filename": "cc/ipc/filter_operation_struct_traits.h",
        "patchSetId": 11
      },
      "lineNbr": 96,
      "author": {
        "id": 1002808
      },
      "writtenOn": "2017-08-08T14:35:24Z",
      "side": 1,
      "message": "Delete this?",
      "revId": "d45a11811aebdaf2fd9ae4e15ebb90c6a1e1d51b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f87c5b7c_ba31e70f",
        "filename": "cc/ipc/filter_operation_struct_traits.h",
        "patchSetId": 11
      },
      "lineNbr": 96,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-08-08T23:10:22Z",
      "side": 1,
      "message": "Done (inlined the last usage of this below)",
      "parentUuid": "fa3684fa_37dd01e7",
      "revId": "d45a11811aebdaf2fd9ae4e15ebb90c6a1e1d51b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b3f11c82_cb9bee98",
        "filename": "cc/ipc/filter_operation_struct_traits.h",
        "patchSetId": 11
      },
      "lineNbr": 131,
      "author": {
        "id": 1002513
      },
      "writtenOn": "2017-08-08T18:24:36Z",
      "side": 1,
      "message": "You\u0027re right that this should be equivalent to CArray\u003cconst float\u003e. I guess in terms of readability it\u0027s easier to read/write ConstCArray\u003cfloat\u003e, but maybe it\u0027s as simple as\n\ntemplate\u003ctypename T\u003e\nusing ConstCArray \u003d CArray\u003cconst T\u003e;\n\n?",
      "range": {
        "startLine": 131,
        "startChar": 9,
        "endLine": 131,
        "endChar": 20
      },
      "revId": "d45a11811aebdaf2fd9ae4e15ebb90c6a1e1d51b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "677f0a97_1b17d27e",
        "filename": "cc/ipc/filter_operation_struct_traits.h",
        "patchSetId": 11
      },
      "lineNbr": 131,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-08-08T23:10:22Z",
      "side": 1,
      "message": "Maybe! I think there was going to be some distinction between the types in the API though (i.e. string_view implies a read-only view, while string_span implies mutability). I thought that in the short-term, it might be easier to just have span and then see what actually goes into the standard.",
      "parentUuid": "b3f11c82_cb9bee98",
      "range": {
        "startLine": 131,
        "startChar": 9,
        "endLine": 131,
        "endChar": 20
      },
      "revId": "d45a11811aebdaf2fd9ae4e15ebb90c6a1e1d51b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7e76c32f_f6563b55",
        "filename": "cc/ipc/filter_operation_struct_traits.h",
        "patchSetId": 11
      },
      "lineNbr": 135,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-08-08T23:10:22Z",
      "side": 1,
      "message": "I ended up changing matrix() to return a reference to an array",
      "revId": "d45a11811aebdaf2fd9ae4e15ebb90c6a1e1d51b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f9c24da0_b1a6008f",
        "filename": "components/arc/bitmap/bitmap_struct_traits.h",
        "patchSetId": 11
      },
      "lineNbr": 20,
      "author": {
        "id": 1002808
      },
      "writtenOn": "2017-08-08T14:35:24Z",
      "side": 1,
      "message": "I don\u0027t suppose we\u0027ll have something like a MakeSpan which could infer the data type? i.e.\n\n\n  return mojo::MakeCArray(static_cast\u003cuint8_t*\u003e(...), ...);\n\nNot a huge win, but one less data type to type when typing data types. :)",
      "revId": "d45a11811aebdaf2fd9ae4e15ebb90c6a1e1d51b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5caab770_7e38f23c",
        "filename": "components/arc/bitmap/bitmap_struct_traits.h",
        "patchSetId": 11
      },
      "lineNbr": 20,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-08-08T23:10:22Z",
      "side": 1,
      "message": "Yeah, we will. I just didn\u0027t want to add it now and call it MakeCArray, since we\u0027ll (presumably) rename it to MakeSpan...\n\n... though of course we have subspan() now. *shrug*",
      "parentUuid": "f9c24da0_b1a6008f",
      "revId": "d45a11811aebdaf2fd9ae4e15ebb90c6a1e1d51b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4b15acc9_8ab180f2",
        "filename": "mojo/public/cpp/bindings/array_traits_carray.h",
        "patchSetId": 11
      },
      "lineNbr": 27,
      "author": {
        "id": 1002513
      },
      "writtenOn": "2017-08-08T18:24:36Z",
      "side": 1,
      "message": "We can DCHECK that pos \u003c size_ and pos + count \u003c size_, no? Or do you mean some other DCHECK here? Or is it the constexpr that isn\u0027t playing nice?",
      "range": {
        "startLine": 26,
        "startChar": 0,
        "endLine": 27,
        "endChar": 18
      },
      "revId": "d45a11811aebdaf2fd9ae4e15ebb90c6a1e1d51b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "31e0b439_c585eabc",
        "filename": "mojo/public/cpp/bindings/array_traits_carray.h",
        "patchSetId": 11
      },
      "lineNbr": 27,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-08-08T23:10:22Z",
      "side": 1,
      "message": "As discussed offline, it\u0027s non-trivial to do this without resorting to the hacks that base/time/time.h uses.",
      "parentUuid": "4b15acc9_8ab180f2",
      "range": {
        "startLine": 26,
        "startChar": 0,
        "endLine": 27,
        "endChar": 18
      },
      "revId": "d45a11811aebdaf2fd9ae4e15ebb90c6a1e1d51b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d9d2c9ba_16e24a87",
        "filename": "mojo/public/cpp/bindings/array_traits_carray.h",
        "patchSetId": 11
      },
      "lineNbr": 87,
      "author": {
        "id": 1002808
      },
      "writtenOn": "2017-08-08T14:35:24Z",
      "side": 1,
      "message": "I\u0027m not sure this is even necessary. It should be sufficient to fail unless size \u003d\u003d input.size() shouldn\u0027t it? It\u0027s only used in Deserialize and it should always be possible for a caller to know the exact storage size they need.\n\nWe could use the check as-is for convenient max-length enforcement but it would probably make traits impls which rely on it slightly harder to understand than if there were an explicit bounds check.",
      "revId": "d45a11811aebdaf2fd9ae4e15ebb90c6a1e1d51b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a369c712_e7d6ebef",
        "filename": "mojo/public/cpp/bindings/array_traits_carray.h",
        "patchSetId": 11
      },
      "lineNbr": 87,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-08-08T23:10:22Z",
      "side": 1,
      "message": "The reason I do this is because of the gamepad struct traits: when it serializes out, it returns a CArray that encodes the number of elements.\n\nIf we don\u0027t set the size as we deserialize, then we won\u0027t know how to set axes_length.\n\nIt\u0027s kind of subtle, but it seemed better than having gamepad serialize a CArray, then serialize an actual count of elements.",
      "parentUuid": "d9d2c9ba_16e24a87",
      "revId": "d45a11811aebdaf2fd9ae4e15ebb90c6a1e1d51b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}