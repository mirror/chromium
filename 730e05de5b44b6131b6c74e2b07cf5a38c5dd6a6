{
  "comments": [
    {
      "key": {
        "uuid": "a3888bfd_536a51e0",
        "filename": "chromecast/base/BUILD.gn",
        "patchSetId": 1
      },
      "lineNbr": 30,
      "author": {
        "id": 1160944
      },
      "writtenOn": "2017-05-17T00:18:28Z",
      "side": 1,
      "message": "Is observer.h supposed to be in here?",
      "range": {
        "startLine": 30,
        "startChar": 12,
        "endLine": 30,
        "endChar": 16
      },
      "revId": "730e05de5b44b6131b6c74e2b07cf5a38c5dd6a6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b1f1aaf8_5146ff45",
        "filename": "chromecast/base/BUILD.gn",
        "patchSetId": 1
      },
      "lineNbr": 30,
      "author": {
        "id": 1207129
      },
      "writtenOn": "2017-05-18T05:52:36Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a3888bfd_536a51e0",
      "range": {
        "startLine": 30,
        "startChar": 12,
        "endLine": 30,
        "endChar": 16
      },
      "revId": "730e05de5b44b6131b6c74e2b07cf5a38c5dd6a6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "560352fe_32f7582f",
        "filename": "chromecast/base/observer.h",
        "patchSetId": 1
      },
      "lineNbr": 19,
      "author": {
        "id": 1160944
      },
      "writtenOn": "2017-05-17T00:18:28Z",
      "side": 1,
      "message": "My original idea was that SetValue() and GetValue() would be restricted to the thread the Observable was constructed on. Generally the observable class should fully encapsulate the Observable values and use ENSURE_ON_OWN_THREAD() macros to update them if they choose to expose a means to update the value from another thread. I don\u0027t necessarily object to this as an alternative, but I\u0027d like clarification on the following questions:\n\n1) When would we want to SetValue() on a different thread than the Observable was created on?\n2) When would we want to GetValue() on a different thread than the Observable was created on, and aren\u0027t using an Observer?\n3) What advantage does it confer for an already thread-safe observable class to use Observable/Observer instead of ObserverList if it has to cache the value to avoid locking a mutex?",
      "range": {
        "startLine": 17,
        "startChar": 14,
        "endLine": 19,
        "endChar": 24
      },
      "revId": "730e05de5b44b6131b6c74e2b07cf5a38c5dd6a6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "90d52fae_f05a69db",
        "filename": "chromecast/base/observer.h",
        "patchSetId": 1
      },
      "lineNbr": 19,
      "author": {
        "id": 1207129
      },
      "writtenOn": "2017-05-18T05:52:36Z",
      "side": 1,
      "message": "1. SetValue() is threadsafe anyway since it needs to be protected by a mutex to correctly initialize Observers.\n2. You might not want to get the value on a different thread; but if you do, it\u0027s nice to use the internal mutex instead of protecting with another mutex (since then SetValue() would require 2 mutex locks). I could make GetValue() not lock (so the owner would need to ensure that they call GetValue() and SetValue() only on the same thread).\n3. The original motivating example was MediaManagerImpl, which is threadsafe. So presumably the reasons you laid out in your doc apply.",
      "parentUuid": "560352fe_32f7582f",
      "range": {
        "startLine": 17,
        "startChar": 14,
        "endLine": 19,
        "endChar": 24
      },
      "revId": "730e05de5b44b6131b6c74e2b07cf5a38c5dd6a6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0f43f6f4_3c030e6a",
        "filename": "chromecast/base/observer.h",
        "patchSetId": 1
      },
      "lineNbr": 31,
      "author": {
        "id": 1160944
      },
      "writtenOn": "2017-05-17T00:18:28Z",
      "side": 1,
      "message": "We should clarify that the Observer\u0027s value is updated on the thread that it was constructed on.",
      "range": {
        "startLine": 31,
        "startChar": 76,
        "endLine": 31,
        "endChar": 0
      },
      "revId": "730e05de5b44b6131b6c74e2b07cf5a38c5dd6a6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "79ebd3c9_6c473a54",
        "filename": "chromecast/base/observer.h",
        "patchSetId": 1
      },
      "lineNbr": 31,
      "author": {
        "id": 1207129
      },
      "writtenOn": "2017-05-18T05:52:36Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0f43f6f4_3c030e6a",
      "range": {
        "startLine": 31,
        "startChar": 76,
        "endLine": 31,
        "endChar": 0
      },
      "revId": "730e05de5b44b6131b6c74e2b07cf5a38c5dd6a6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0202542b_b99c1028",
        "filename": "chromecast/base/observer.h",
        "patchSetId": 1
      },
      "lineNbr": 35,
      "author": {
        "id": 1160944
      },
      "writtenOn": "2017-05-17T00:18:28Z",
      "side": 1,
      "message": "I like this feature :)",
      "range": {
        "startLine": 33,
        "startChar": 0,
        "endLine": 35,
        "endChar": 56
      },
      "revId": "730e05de5b44b6131b6c74e2b07cf5a38c5dd6a6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "075a473b_97f59f55",
        "filename": "chromecast/base/observer.h",
        "patchSetId": 1
      },
      "lineNbr": 50,
      "author": {
        "id": 1160944
      },
      "writtenOn": "2017-05-17T00:18:28Z",
      "side": 1,
      "message": "Sounds good, but from a design perspective it would be best to ensure that the host of the Observable value is constructed before the observing classes, and either inject the Observers or inject the class that owns the Observables and exposes thread-safe Observe() methods.",
      "revId": "730e05de5b44b6131b6c74e2b07cf5a38c5dd6a6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "358d54aa_95f5b8e7",
        "filename": "chromecast/base/observer.h",
        "patchSetId": 1
      },
      "lineNbr": 50,
      "author": {
        "id": 1207129
      },
      "writtenOn": "2017-05-18T05:52:36Z",
      "side": 1,
      "message": "Sure. But in cases where that isn\u0027t possible (eg some hypothetical initialization order fiasco, like ChromecastService), you would use this unique_ptr method.",
      "parentUuid": "075a473b_97f59f55",
      "revId": "730e05de5b44b6131b6c74e2b07cf5a38c5dd6a6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "daab68fc_76b5a7a4",
        "filename": "chromecast/base/observer.h",
        "patchSetId": 1
      },
      "lineNbr": 279,
      "author": {
        "id": 1160944
      },
      "writtenOn": "2017-05-17T00:18:28Z",
      "side": 1,
      "message": "I\u0027m sure this works, but could we consider making the indices signed and not rely on evil integer bit hacking?",
      "range": {
        "startLine": 279,
        "startChar": 47,
        "endLine": 279,
        "endChar": 58
      },
      "revId": "730e05de5b44b6131b6c74e2b07cf5a38c5dd6a6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "26d34ef6_be0b17fe",
        "filename": "chromecast/base/observer.h",
        "patchSetId": 1
      },
      "lineNbr": 279,
      "author": {
        "id": 1207129
      },
      "writtenOn": "2017-05-18T05:52:36Z",
      "side": 1,
      "message": "Signedness doesn\u0027t help (actually it would make it undefined behaviour). The index is only 32-bit, so this code deals with any potential wraparound. The other option is to make the index uint64_t, but it seemed unnecessary to add 4 bytes to every Observer - since it seems unlikely that there would be more than 2^31 SetValues pending in the TaskRunner at any given time.",
      "parentUuid": "daab68fc_76b5a7a4",
      "range": {
        "startLine": 279,
        "startChar": 47,
        "endLine": 279,
        "endChar": 58
      },
      "revId": "730e05de5b44b6131b6c74e2b07cf5a38c5dd6a6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1b414444_dcb0e13d",
        "filename": "chromecast/base/observer_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1160944
      },
      "writtenOn": "2017-05-17T00:18:28Z",
      "side": 1,
      "message": "Some cases we might want to add:\n\n1) have the original and observers be constructed on different threads/task runners\n2) multiple calls to SetOnUpdateCallback()\n3) calls to SetValue() from a different thread\n4) copy an Observer after a change to the Observable, but before the change propagates to the first Observer",
      "revId": "730e05de5b44b6131b6c74e2b07cf5a38c5dd6a6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "46f95474_53d40f4f",
        "filename": "chromecast/base/observer_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 95,
      "author": {
        "id": 1160944
      },
      "writtenOn": "2017-05-17T00:18:28Z",
      "side": 1,
      "message": "This tests several things: \n\n1) observer that registered before change gets callback after RunUntilIdle()\n2) observer that registered after change doesn\u0027t get callback\n3) observer that registered before two changes gets callbacks for both changes\n4) observer that registered between two changes only gets callback for second change\n\nI think this would be more readable (and debuggable in the case of regression) if each of these can be its own test case",
      "range": {
        "startLine": 95,
        "startChar": 21,
        "endLine": 95,
        "endChar": 34
      },
      "revId": "730e05de5b44b6131b6c74e2b07cf5a38c5dd6a6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1a59ac33_5206f891",
        "filename": "chromecast/base/observer_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 102,
      "author": {
        "id": 1160944
      },
      "writtenOn": "2017-05-17T00:18:28Z",
      "side": 1,
      "message": "I\u0027m surprised BindRepeating needs a lambda adapter like this.",
      "range": {
        "startLine": 102,
        "startChar": 53,
        "endLine": 102,
        "endChar": 64
      },
      "revId": "730e05de5b44b6131b6c74e2b07cf5a38c5dd6a6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "da75ec15_139d2258",
        "filename": "chromecast/base/observer_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 102,
      "author": {
        "id": 1207129
      },
      "writtenOn": "2017-05-18T05:52:36Z",
      "side": 1,
      "message": "And yet it does. The lords of //base have decreed it.",
      "parentUuid": "1a59ac33_5206f891",
      "range": {
        "startLine": 102,
        "startChar": 53,
        "endLine": 102,
        "endChar": 64
      },
      "revId": "730e05de5b44b6131b6c74e2b07cf5a38c5dd6a6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dadf3f45_2ef94642",
        "filename": "chromecast/base/observer_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 139,
      "author": {
        "id": 1160944
      },
      "writtenOn": "2017-05-17T00:18:28Z",
      "side": 1,
      "message": "ObserverOutlivesObservable for clarity",
      "range": {
        "startLine": 139,
        "startChar": 21,
        "endLine": 139,
        "endChar": 29
      },
      "revId": "730e05de5b44b6131b6c74e2b07cf5a38c5dd6a6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c4813ca6_e9cae46a",
        "filename": "chromecast/base/observer_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 139,
      "author": {
        "id": 1207129
      },
      "writtenOn": "2017-05-18T05:52:36Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "dadf3f45_2ef94642",
      "range": {
        "startLine": 139,
        "startChar": 21,
        "endLine": 139,
        "endChar": 29
      },
      "revId": "730e05de5b44b6131b6c74e2b07cf5a38c5dd6a6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "03cbf28a_0700c6ea",
        "filename": "chromecast/base/observer_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 146,
      "author": {
        "id": 1160944
      },
      "writtenOn": "2017-05-17T00:18:28Z",
      "side": 1,
      "message": "What happens if we call this after original.reset()? Will observer1 still get the change?",
      "range": {
        "startLine": 146,
        "startChar": 2,
        "endLine": 146,
        "endChar": 31
      },
      "revId": "730e05de5b44b6131b6c74e2b07cf5a38c5dd6a6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a2a8fd90_b772af6b",
        "filename": "chromecast/base/observer_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 146,
      "author": {
        "id": 1207129
      },
      "writtenOn": "2017-05-18T05:52:36Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "03cbf28a_0700c6ea",
      "range": {
        "startLine": 146,
        "startChar": 2,
        "endLine": 146,
        "endChar": 31
      },
      "revId": "730e05de5b44b6131b6c74e2b07cf5a38c5dd6a6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}