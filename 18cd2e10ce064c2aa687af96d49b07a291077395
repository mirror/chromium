{
  "comments": [
    {
      "key": {
        "uuid": "87583456_4885de4c",
        "filename": "base/containers/span.h",
        "patchSetId": 1
      },
      "lineNbr": 70,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-08-11T22:07:33Z",
      "side": 1,
      "message": "I\u0027m not sure why it\u0027s listed as such in the proposal, but there doesn\u0027t seem to be a simple way to actually make this calculatable in a constexpr context...",
      "range": {
        "startLine": 70,
        "startChar": 0,
        "endLine": 70,
        "endChar": 10
      },
      "revId": "18cd2e10ce064c2aa687af96d49b07a291077395",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fe299301_04542716",
        "filename": "base/containers/span.h",
        "patchSetId": 1
      },
      "lineNbr": 70,
      "author": {
        "id": 1002513
      },
      "writtenOn": "2017-08-15T17:30:09Z",
      "side": 1,
      "message": "I kind of went down a rabbit hole trying to understand why this would be constexpr, but I don\u0027t really understand it either. I guess if std::equal can ever become constexpr, this would be able to be used in a constexpr context? Either that or the intent was to just compare memory address and count, but then that isn\u0027t what it is specced as ¯\\_(ツ)_/¯",
      "parentUuid": "87583456_4885de4c",
      "range": {
        "startLine": 70,
        "startChar": 0,
        "endLine": 70,
        "endChar": 10
      },
      "revId": "18cd2e10ce064c2aa687af96d49b07a291077395",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "540fbf53_393b72c1",
        "filename": "base/containers/span.h",
        "patchSetId": 1
      },
      "lineNbr": 71,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-08-11T22:07:33Z",
      "side": 1,
      "message": "The two other span implementations I know of also use begin() / end() rather than cbegin() / cend(). One asserts that T is a const type; the other doesn\u0027t appear to make any assertions.",
      "revId": "18cd2e10ce064c2aa687af96d49b07a291077395",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "359c65df_38859421",
        "filename": "base/containers/span.h",
        "patchSetId": 1
      },
      "lineNbr": 71,
      "author": {
        "id": 1002513
      },
      "writtenOn": "2017-08-15T17:30:09Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "540fbf53_393b72c1",
      "revId": "18cd2e10ce064c2aa687af96d49b07a291077395",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0720a2ab_48b99f13",
        "filename": "base/containers/span.h",
        "patchSetId": 1
      },
      "lineNbr": 88,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-08-11T22:07:33Z",
      "side": 1,
      "message": "This technically isn\u0027t needed, but is provided for symmetry.",
      "revId": "18cd2e10ce064c2aa687af96d49b07a291077395",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "90ca2573_cbc6c72e",
        "filename": "base/containers/span.h",
        "patchSetId": 1
      },
      "lineNbr": 88,
      "author": {
        "id": 1002513
      },
      "writtenOn": "2017-08-15T17:30:09Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "0720a2ab_48b99f13",
      "revId": "18cd2e10ce064c2aa687af96d49b07a291077395",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8771e9f9_2507997e",
        "filename": "base/containers/span_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 50,
      "author": {
        "id": 1002513
      },
      "writtenOn": "2017-08-15T17:30:09Z",
      "side": 1,
      "message": "nit: can you change some of these to be for (int value : span) to ensure begin/end are working correctly?",
      "revId": "18cd2e10ce064c2aa687af96d49b07a291077395",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "422351ed_bd76f23e",
        "filename": "base/containers/span_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 50,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-08-15T18:35:38Z",
      "side": 1,
      "message": "It\u0027s hard to change these, due to the use of array indexing for both the actual and expected containers.\n\nBelow, the tests for MakeSpan() actually already exercise iterators (albeit somewhat implicitly). I added an explicit test instead. WDYT?",
      "parentUuid": "8771e9f9_2507997e",
      "revId": "18cd2e10ce064c2aa687af96d49b07a291077395",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cbe96d10_eb1bb97b",
        "filename": "base/containers/span_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 50,
      "author": {
        "id": 1002513
      },
      "writtenOn": "2017-08-15T18:37:18Z",
      "side": 1,
      "message": "Looks good! Thanks.",
      "parentUuid": "422351ed_bd76f23e",
      "revId": "18cd2e10ce064c2aa687af96d49b07a291077395",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}