{
  "comments": [
    {
      "key": {
        "uuid": "ff37a541_59b0363e",
        "filename": "net/http/http_request_info.h",
        "patchSetId": 2
      },
      "lineNbr": 44,
      "author": {
        "id": 1000193
      },
      "writtenOn": "2018-01-30T16:02:41Z",
      "side": 1,
      "message": "As this is a struct, I don\u0027t believe these Getter/Setter methods are consistent with our coding style.\n\nI\u0027m not sure why these are necessary, versus having a member net::MutableNetworkTrafficAnnotationTag public member. Could you explain?",
      "revId": "9cd579017d23b2fc1fc87226e06f77665f55c4f7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cbbee27e_4396ae09",
        "filename": "net/http/http_request_info.h",
        "patchSetId": 2
      },
      "lineNbr": 44,
      "author": {
        "id": 1211034
      },
      "writtenOn": "2018-01-30T16:22:28Z",
      "side": 1,
      "message": "If we don\u0027t have get/set function, one needs to convert annotation tags to mutable and then assign them here. Having get/set makes that easier.\nAlso as a side note, I\u0027ve tried to use mutables as few as possible in the code as they are more susceptible to misuse and are should be tested by the clang tool.\n\nCan I convert the struct to class?",
      "parentUuid": "ff37a541_59b0363e",
      "revId": "9cd579017d23b2fc1fc87226e06f77665f55c4f7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a881ae2d_bba65cb9",
        "filename": "net/http/http_request_info.h",
        "patchSetId": 2
      },
      "lineNbr": 44,
      "author": {
        "id": 1000193
      },
      "writtenOn": "2018-01-30T16:29:38Z",
      "side": 1,
      "message": "I don\u0027t think we\u0027d want to convert to a class, because that would also create a lot of challenges (both in forward declarations and in the style guide)\n\nCould you explain more about the clang tooling testing? It seems like forcing the callsites to do the mutability wrapping, rather than these helpers, would work to your advantage for your goals.\n\nI would think Mutable-\u003eImmutable would be a toll-free bridge of conversion, while Immutable assigned to a Mutable would be the same. That is, put differently, I would think that the following patterns would all be fine:\nImmutable cast to Mutable - does not work\nImmutable assigned to Mutable - just works\nMutable assigned to Mutable - just works\n\nMutable cast to Immutable - implicit\nMutable assigned to Immutable - does not work\nImmutable assigned to Immutable - does not work",
      "parentUuid": "cbbee27e_4396ae09",
      "revId": "9cd579017d23b2fc1fc87226e06f77665f55c4f7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "89c636e5_ad9579ab",
        "filename": "net/http/http_request_info.h",
        "patchSetId": 2
      },
      "lineNbr": 44,
      "author": {
        "id": 1211034
      },
      "writtenOn": "2018-01-30T16:36:33Z",
      "side": 1,
      "message": "The tests are only for assigning numbers to mutables. The clang tools check all assignments to mutable annotations, and ensure that it is from an immutable one and not a random constant number.\n\nOK. So I will proceed with removing get/set, not converting to class, and every user of this structure should assign an annotation for cases that require it (we don\u0027t put it in constructor).",
      "parentUuid": "a881ae2d_bba65cb9",
      "revId": "9cd579017d23b2fc1fc87226e06f77665f55c4f7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "027f0074_0a10c2a1",
        "filename": "net/http/http_request_info.h",
        "patchSetId": 2
      },
      "lineNbr": 44,
      "author": {
        "id": 1000193
      },
      "writtenOn": "2018-01-30T16:40:50Z",
      "side": 1,
      "message": "Ah, interesting (regarding the test)\n\nCan you link to it? I certainly don\u0027t want to be requesting an overly broad amount of work, so if I\u0027m underestimating the impact/scope, feel free to push back (or to push towards solving this to make sure your needs are met)\n\nI would think mutable annotations could be assigned from existing mutable fields or from immutable fields, and that would address your concern about the random constant, right?\n\nI\u0027m mostly applying my (limited) experience with the Core Foundation Mutable/Immutable structs (e.g. CFArray vs CFMutableArray) and how those translations work, which seems like a reasonable enough design. However, that may not be applicable here, so push back or flag it if you\u0027re finding that it\u0027s adding significantly more work or developer ergonomic pain, and we can try to work out solutions :)",
      "parentUuid": "89c636e5_ad9579ab",
      "revId": "9cd579017d23b2fc1fc87226e06f77665f55c4f7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3576a578_de39e666",
        "filename": "net/http/http_request_info.h",
        "patchSetId": 2
      },
      "lineNbr": 44,
      "author": {
        "id": 1211034
      },
      "writtenOn": "2018-01-30T17:06:17Z",
      "side": 1,
      "message": "This is a sample of cases that should be found and banned:\n  net::MutableNetworkTrafficAnnotationTag tag1;\n  tag1.unique_id_hash_code \u003d 1;\nIt is already part of the clang tool, and it has no effect on run-time.\n\nGenerally I am OK with this approach. I just preferred to hide mutable types as much as possible and always use the normal one. But it seems that we don\u0027t have a better solution here.\nSo SGTU?",
      "parentUuid": "027f0074_0a10c2a1",
      "revId": "9cd579017d23b2fc1fc87226e06f77665f55c4f7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}