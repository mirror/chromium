{
  "comments": [
    {
      "key": {
        "uuid": "72a6543e_f10a1ff9",
        "filename": "content/common/frame.mojom",
        "patchSetId": 20
      },
      "lineNbr": 172,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-11-02T08:33:58Z",
      "side": 1,
      "message": "Nit: remove this comment, it\u0027s not really needed (it\u0027s already stated by line 164-165)",
      "range": {
        "startLine": 171,
        "startChar": 0,
        "endLine": 172,
        "endChar": 47
      },
      "revId": "e7bcadde2efd0c54041b386f05700c0e68334bd4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "76046c65_5ccc512c",
        "filename": "content/common/frame.mojom",
        "patchSetId": 20
      },
      "lineNbr": 172,
      "author": {
        "id": 1003152
      },
      "writtenOn": "2017-11-06T19:03:35Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "72a6543e_f10a1ff9",
      "range": {
        "startLine": 171,
        "startChar": 0,
        "endLine": 172,
        "endChar": 47
      },
      "revId": "e7bcadde2efd0c54041b386f05700c0e68334bd4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "846d21a7_62d4340e",
        "filename": "content/renderer/media/audio_ipc_factory.cc",
        "patchSetId": 20
      },
      "lineNbr": 93,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-11-02T08:33:58Z",
      "side": 1,
      "message": "Did a test fail due to not doing this? I would have thought that the connection error handler below would handle automatically cleaning this up if the other end of the message pipe is dropped and never bound to anything.",
      "range": {
        "startLine": 86,
        "startChar": 0,
        "endLine": 93,
        "endChar": 51
      },
      "revId": "e7bcadde2efd0c54041b386f05700c0e68334bd4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4a4cea1d_a7e5d144",
        "filename": "content/renderer/media/audio_ipc_factory.cc",
        "patchSetId": 20
      },
      "lineNbr": 93,
      "author": {
        "id": 1201454
      },
      "writtenOn": "2017-11-02T10:00:59Z",
      "side": 1,
      "message": "I think the change is supposed to handle when the factory is successfully bound, then we have a navigation, and then it gets bound again.",
      "parentUuid": "846d21a7_62d4340e",
      "range": {
        "startLine": 86,
        "startChar": 0,
        "endLine": 93,
        "endChar": 51
      },
      "revId": "e7bcadde2efd0c54041b386f05700c0e68334bd4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b7da2d38_7bb2d5d9",
        "filename": "content/renderer/media/audio_ipc_factory.cc",
        "patchSetId": 20
      },
      "lineNbr": 93,
      "author": {
        "id": 1003152
      },
      "writtenOn": "2017-11-06T19:03:35Z",
      "side": 1,
      "message": "The error handler for the RendererAudioOutputStreamFactoryPtr requested for the previous document may:\n 1) ... not even fire if the RendererAudioOutputStreamFactory interface was successfully established before the new navigation started.\n 2) ... fire before DidCommitProvisionalLoad if the RendererAudioOutputStreamFactoryRequest is still queued on the RenderFrame\u0027s local InterfaceProviderPtr owned by |remote_interfaces_| when the latter was re-bound due to the new navigation.\n 3) ... fire after DCPL if the RendererAudioOutputStreamFactoryRequest was already sent to the browser side, so it is only dropped because the InterfaceProviderBinding is closed on the browser side.\n\nI updated the comment to reflect this.",
      "parentUuid": "4a4cea1d_a7e5d144",
      "range": {
        "startLine": 86,
        "startChar": 0,
        "endLine": 93,
        "endChar": 51
      },
      "revId": "e7bcadde2efd0c54041b386f05700c0e68334bd4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7cffb644_cbfc9d01",
        "filename": "content/renderer/media/audio_ipc_factory.cc",
        "patchSetId": 20
      },
      "lineNbr": 100,
      "author": {
        "id": 1003152
      },
      "writtenOn": "2017-11-06T19:03:35Z",
      "side": 1,
      "message": "Max, could this be simply MaybeDeregisterRemoteFactoryOnIOThread?\n\nMy understanding would be that the error handler will be fired on the IO thread already anyway? Otherwise this might fire too late and de-register the new factory after a commit.",
      "revId": "e7bcadde2efd0c54041b386f05700c0e68334bd4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2412fac3_cd15bcdd",
        "filename": "content/renderer/media/media_factory.cc",
        "patchSetId": 20
      },
      "lineNbr": 140,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-11-02T08:33:58Z",
      "side": 1,
      "message": "Can we use service_manager::InterfaceProvider with the forwarding callback? https://cs.chromium.org/chromium/src/services/service_manager/public/cpp/interface_provider.h?rcl\u003d20c6e5af9f784dbee661d6ddd32d3b0fc5d911fd\u0026l\u003d77",
      "revId": "e7bcadde2efd0c54041b386f05700c0e68334bd4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "698fcf57_fe16f6e1",
        "filename": "content/renderer/media/media_factory.cc",
        "patchSetId": 20
      },
      "lineNbr": 140,
      "author": {
        "id": 1003152
      },
      "writtenOn": "2017-11-06T19:03:35Z",
      "side": 1,
      "message": "I am not sure I see the benefits of doing so. Could you please elaborate?",
      "parentUuid": "2412fac3_cd15bcdd",
      "revId": "e7bcadde2efd0c54041b386f05700c0e68334bd4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7f5664f9_4299ca59",
        "filename": "content/renderer/render_frame_impl.cc",
        "patchSetId": 20
      },
      "lineNbr": 3971,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-11-02T08:33:58Z",
      "side": 1,
      "message": "Why does this need to happen here? It seems odd for one specific factory to have be registered here, but no others. At the very least, this needs a comment explaining why (or preferably, we should not need this at all \u003d)",
      "revId": "e7bcadde2efd0c54041b386f05700c0e68334bd4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "32e2f26f_5265d89d",
        "filename": "content/renderer/render_frame_impl.cc",
        "patchSetId": 20
      },
      "lineNbr": 3971,
      "author": {
        "id": 1201454
      },
      "writtenOn": "2017-11-02T10:00:59Z",
      "side": 1,
      "message": "This is due to some audio code being badly broken (crbug.com/668275), and yes, it should really be fixed :). We\u0027d like to initialize the factory lazily, but by the time we know we need the factory, it may be to late to post a task to the main thread to get it (since the main thread may be blocked waiting for a response from the factory).",
      "parentUuid": "7f5664f9_4299ca59",
      "revId": "e7bcadde2efd0c54041b386f05700c0e68334bd4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2b22b594_7c6eacbd",
        "filename": "content/renderer/render_frame_impl.cc",
        "patchSetId": 20
      },
      "lineNbr": 3971,
      "author": {
        "id": 1003152
      },
      "writtenOn": "2017-11-06T19:03:35Z",
      "side": 1,
      "message": "I suppose making this a RenderFrameObserver would already be a step forward? For now, I added a TODO to fix this.",
      "parentUuid": "32e2f26f_5265d89d",
      "revId": "e7bcadde2efd0c54041b386f05700c0e68334bd4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "33809a0f_6b6df5e7",
        "filename": "content/renderer/render_frame_impl_browsertest.cc",
        "patchSetId": 20
      },
      "lineNbr": 811,
      "author": {
        "id": 1001500
      },
      "writtenOn": "2017-11-01T20:34:28Z",
      "side": 1,
      "message": "Do we explicitly not clean this up in the destruction? Can we add a comment as to why?",
      "range": {
        "startLine": 811,
        "startChar": 40,
        "endLine": 811,
        "endChar": 64
      },
      "revId": "e7bcadde2efd0c54041b386f05700c0e68334bd4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "75348b79_116127a8",
        "filename": "content/renderer/render_frame_impl_browsertest.cc",
        "patchSetId": 20
      },
      "lineNbr": 811,
      "author": {
        "id": 1003152
      },
      "writtenOn": "2017-11-06T19:03:35Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "33809a0f_6b6df5e7",
      "range": {
        "startLine": 811,
        "startChar": 40,
        "endLine": 811,
        "endChar": 64
      },
      "revId": "e7bcadde2efd0c54041b386f05700c0e68334bd4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "46b154da_a3c073de",
        "filename": "content/renderer/render_frame_impl_browsertest.cc",
        "patchSetId": 20
      },
      "lineNbr": 838,
      "author": {
        "id": 1001500
      },
      "writtenOn": "2017-11-01T20:34:28Z",
      "side": 1,
      "message": "Have you considered using data: URL here? \u0027about:blank\u0027 is special, so I wonder if it might be masking potential problems.",
      "range": {
        "startLine": 838,
        "startChar": 41,
        "endLine": 838,
        "endChar": 52
      },
      "revId": "e7bcadde2efd0c54041b386f05700c0e68334bd4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0b0a420c_2dac26c5",
        "filename": "content/renderer/render_frame_impl_browsertest.cc",
        "patchSetId": 20
      },
      "lineNbr": 838,
      "author": {
        "id": 1003152
      },
      "writtenOn": "2017-11-06T19:03:35Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "46b154da_a3c073de",
      "range": {
        "startLine": 838,
        "startChar": 41,
        "endLine": 838,
        "endChar": 52
      },
      "revId": "e7bcadde2efd0c54041b386f05700c0e68334bd4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "55afb6cc_5ef4e223",
        "filename": "content/renderer/render_frame_impl_browsertest.cc",
        "patchSetId": 20
      },
      "lineNbr": 854,
      "author": {
        "id": 1001500
      },
      "writtenOn": "2017-11-01T20:34:28Z",
      "side": 1,
      "message": "What causes the RunUntilIdle to exit after the first initial empty document binding? It isn\u0027t clear to me why we expect to be idle between this call and the next one. It seems to me that all tasks that are queued up before this function call will be processed in its first iteration and there is no explicit action between the two calls to ExpectPendingInterfaceRequestsFromSources.",
      "revId": "e7bcadde2efd0c54041b386f05700c0e68334bd4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "de4810df_706ffb41",
        "filename": "content/renderer/render_frame_impl_browsertest.cc",
        "patchSetId": 20
      },
      "lineNbr": 854,
      "author": {
        "id": 1003152
      },
      "writtenOn": "2017-11-06T19:03:35Z",
      "side": 1,
      "message": "I replaced all RunUntilIdles with more civilized solutions.",
      "parentUuid": "55afb6cc_5ef4e223",
      "revId": "e7bcadde2efd0c54041b386f05700c0e68334bd4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}