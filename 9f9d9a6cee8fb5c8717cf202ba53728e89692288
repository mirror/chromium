{
  "comments": [
    {
      "key": {
        "uuid": "394d60c6_68df142b",
        "filename": "cc/input/input_handler.h",
        "patchSetId": 8
      },
      "lineNbr": 177,
      "author": {
        "id": 1125304
      },
      "writtenOn": "2017-12-21T16:54:37Z",
      "side": 1,
      "message": "Why is this different from the above?",
      "range": {
        "startLine": 176,
        "startChar": 0,
        "endLine": 177,
        "endChar": 68
      },
      "revId": "9f9d9a6cee8fb5c8717cf202ba53728e89692288",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "da0dae22_80dd005e",
        "filename": "cc/input/input_handler.h",
        "patchSetId": 8
      },
      "lineNbr": 177,
      "author": {
        "id": 1164963
      },
      "writtenOn": "2018-01-02T15:28:43Z",
      "side": 1,
      "message": "This one snaps and then calls the above.",
      "parentUuid": "394d60c6_68df142b",
      "range": {
        "startLine": 176,
        "startChar": 0,
        "endLine": 177,
        "endChar": 68
      },
      "revId": "9f9d9a6cee8fb5c8717cf202ba53728e89692288",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7cddd0f3_6d1d709f",
        "filename": "cc/layers/layer.h",
        "patchSetId": 8
      },
      "lineNbr": 637,
      "author": {
        "id": 1125304
      },
      "writtenOn": "2017-12-21T16:54:37Z",
      "side": 1,
      "message": "I think at this point it is reasonable to assume being a \"snap container\" is rare.\ni.e., most layers won\u0027t really be a snap container.\n\nGiven this, should we actually use something like base::Optional\u003cSnapContainerData\u003e here?\nSo we pay a single pointer cost for layers that are not snap container?",
      "range": {
        "startLine": 636,
        "startChar": 0,
        "endLine": 637,
        "endChar": 41
      },
      "revId": "9f9d9a6cee8fb5c8717cf202ba53728e89692288",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d0d72a68_43f3ad19",
        "filename": "cc/layers/layer.h",
        "patchSetId": 8
      },
      "lineNbr": 637,
      "author": {
        "id": 1164963
      },
      "writtenOn": "2018-01-02T15:28:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7cddd0f3_6d1d709f",
      "range": {
        "startLine": 636,
        "startChar": 0,
        "endLine": 637,
        "endChar": 41
      },
      "revId": "9f9d9a6cee8fb5c8717cf202ba53728e89692288",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "de13640c_f90a6591",
        "filename": "cc/trees/layer_tree_host_impl.cc",
        "patchSetId": 8
      },
      "lineNbr": 3830,
      "author": {
        "id": 1125304
      },
      "writtenOn": "2017-12-21T16:54:37Z",
      "side": 1,
      "message": "this seems superficial.",
      "range": {
        "startLine": 3830,
        "startChar": 7,
        "endLine": 3830,
        "endChar": 19
      },
      "revId": "9f9d9a6cee8fb5c8717cf202ba53728e89692288",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5a7b4de0_0da716da",
        "filename": "cc/trees/layer_tree_host_impl.cc",
        "patchSetId": 8
      },
      "lineNbr": 3830,
      "author": {
        "id": 1164963
      },
      "writtenOn": "2018-01-02T15:28:43Z",
      "side": 1,
      "message": "Done.",
      "parentUuid": "de13640c_f90a6591",
      "range": {
        "startLine": 3830,
        "startChar": 7,
        "endLine": 3830,
        "endChar": 19
      },
      "revId": "9f9d9a6cee8fb5c8717cf202ba53728e89692288",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b7db2bbd_60d9b002",
        "filename": "third_party/WebKit/Source/core/paint/compositing/CompositedLayerMapping.cpp",
        "patchSetId": 8
      },
      "lineNbr": 1269,
      "author": {
        "id": 1125304
      },
      "writtenOn": "2017-12-21T16:54:37Z",
      "side": 1,
      "message": "That seems incorrect. We don\u0027t want to force SnapContainerData for all layers\nonly those layers that have snapping on them.\n\nHere we should just get one if there is already one available!",
      "range": {
        "startLine": 1269,
        "startChar": 6,
        "endLine": 1269,
        "endChar": 48
      },
      "revId": "9f9d9a6cee8fb5c8717cf202ba53728e89692288",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "06abc321_f05f71cb",
        "filename": "third_party/WebKit/Source/core/paint/compositing/CompositedLayerMapping.cpp",
        "patchSetId": 8
      },
      "lineNbr": 1269,
      "author": {
        "id": 1164963
      },
      "writtenOn": "2018-01-02T15:28:43Z",
      "side": 1,
      "message": "Done\n\nI also update the logic in SnapCoordinator::SnapContainerDidChange(): if a container\u0027s scroll-snap-type is changed to none, we don\u0027t erase it from SnapCoordinator\u0027s snap_container_map_, so it still has a record that can be found by CompositedLayerMapping, and the change can be passed to cc.",
      "parentUuid": "b7db2bbd_60d9b002",
      "range": {
        "startLine": 1269,
        "startChar": 6,
        "endLine": 1269,
        "endChar": 48
      },
      "revId": "9f9d9a6cee8fb5c8717cf202ba53728e89692288",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "80898544_4e9c7761",
        "filename": "ui/events/blink/input_handler_proxy.cc",
        "patchSetId": 8
      },
      "lineNbr": 790,
      "author": {
        "id": 1125304
      },
      "writtenOn": "2017-12-21T16:54:37Z",
      "side": 1,
      "message": "I am not sure if I undestand why ScrollEnd is not used and instead the CL is\nintroducing a new one. We should snap at scroll end whether it is animated or not.",
      "range": {
        "startLine": 790,
        "startChar": 20,
        "endLine": 790,
        "endChar": 42
      },
      "revId": "9f9d9a6cee8fb5c8717cf202ba53728e89692288",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d52dfc00_02350cc9",
        "filename": "ui/events/blink/input_handler_proxy.cc",
        "patchSetId": 8
      },
      "lineNbr": 790,
      "author": {
        "id": 1164963
      },
      "writtenOn": "2018-01-02T15:28:43Z",
      "side": 1,
      "message": "1. There are places where we don\u0027t want to snap at ScrollEnd(), such as GestureFlingCancel, which is generated from fling boosting.\n\n2. Because there would also be a ScrollEnd() after our snapping animation. Although I added a check for whether we need to snap or not, I\u0027m still trying to avoid an infinite snapping loop.",
      "parentUuid": "80898544_4e9c7761",
      "range": {
        "startLine": 790,
        "startChar": 20,
        "endLine": 790,
        "endChar": 42
      },
      "revId": "9f9d9a6cee8fb5c8717cf202ba53728e89692288",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}