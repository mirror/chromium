{
  "comments": [
    {
      "key": {
        "uuid": "bd1319e2_c5fa83da",
        "filename": "third_party/WebKit/Source/bindings/core/v8/serialization/SerializedScriptValue.h",
        "patchSetId": 26
      },
      "lineNbr": 237,
      "author": {
        "id": 1110029
      },
      "writtenOn": "2018-01-29T18:28:24Z",
      "side": 1,
      "message": "I think it would be cleaner if this argument was passed-by-value. Then at least it is clear from the caller site if and when the array is moved as opposed to copied.",
      "revId": "1d495da934dcd2b66b7e291bac7057cd27f636c4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8a938e03_e6c9c190",
        "filename": "third_party/WebKit/Source/bindings/core/v8/serialization/SerializedScriptValue.h",
        "patchSetId": 26
      },
      "lineNbr": 243,
      "author": {
        "id": 1110029
      },
      "writtenOn": "2018-01-29T18:28:24Z",
      "side": 1,
      "message": "Here too pass-by-value is cleaner I think.",
      "revId": "1d495da934dcd2b66b7e291bac7057cd27f636c4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0571b12c_9b3bc0e1",
        "filename": "third_party/WebKit/Source/core/messaging/BlinkTransferableMessage.h",
        "patchSetId": 26
      },
      "lineNbr": 11,
      "author": {
        "id": 1110029
      },
      "writtenOn": "2018-01-29T18:28:24Z",
      "side": 1,
      "message": "why these includes? Since there are no other changes to this file, I assume these includes don\u0027t need to be here anymore?",
      "revId": "1d495da934dcd2b66b7e291bac7057cd27f636c4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7bc15805_516fe6e9",
        "filename": "third_party/WebKit/Source/core/messaging/BlinkTransferableMessageStructTraits.cpp",
        "patchSetId": 26
      },
      "lineNbr": 14,
      "author": {
        "id": 1110029
      },
      "writtenOn": "2018-01-29T18:28:24Z",
      "side": 1,
      "message": "nit: out.ReserveInitialCapacity(input.message-\u003eGetImageBitmapContentsArray().size()) ?",
      "revId": "1d495da934dcd2b66b7e291bac7057cd27f636c4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f8e8ff39_1b9127d5",
        "filename": "third_party/WebKit/Source/core/messaging/BlinkTransferableMessageStructTraits.cpp",
        "patchSetId": 26
      },
      "lineNbr": 19,
      "author": {
        "id": 1110029
      },
      "writtenOn": "2018-01-29T18:28:24Z",
      "side": 1,
      "message": "I\u0027m not sure how SerializedScriptValue uses this bitmap array, but what will happen if this returns false, and now the vector of images that the SSV on the other side receives has less elements than it had here? Will deserialization fail anyway so it doesn\u0027t matter that indices into the array are no longer mapping to the same images, or will this result in some kind of partial serialization?",
      "revId": "1d495da934dcd2b66b7e291bac7057cd27f636c4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9927fb07_206ce6a5",
        "filename": "third_party/WebKit/Source/core/messaging/BlinkTransferableMessageStructTraits.cpp",
        "patchSetId": 26
      },
      "lineNbr": 20,
      "author": {
        "id": 1110029
      },
      "writtenOn": "2018-01-29T18:28:24Z",
      "side": 1,
      "message": "{} around if statement contents",
      "range": {
        "startLine": 20,
        "startChar": 79,
        "endLine": 20,
        "endChar": 0
      },
      "revId": "1d495da934dcd2b66b7e291bac7057cd27f636c4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "71cb0fa8_5b38d0e9",
        "filename": "third_party/WebKit/Source/core/messaging/BlinkTransferableMessageStructTraits.cpp",
        "patchSetId": 26
      },
      "lineNbr": 21,
      "author": {
        "id": 1110029
      },
      "writtenOn": "2018-01-29T18:28:24Z",
      "side": 1,
      "message": "nit: std::move(bitmap)? Although I believe copying an SkBitmap is just as efficient, so probably doesn\u0027t matter.",
      "revId": "1d495da934dcd2b66b7e291bac7057cd27f636c4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bda014f1_9ff2d104",
        "filename": "third_party/WebKit/Source/core/messaging/BlinkTransferableMessageStructTraits.cpp",
        "patchSetId": 26
      },
      "lineNbr": 45,
      "author": {
        "id": 1110029
      },
      "writtenOn": "2018-01-29T18:28:24Z",
      "side": 1,
      "message": "std::move() (and change the method to accept by-value rather than by non-const-ref)",
      "revId": "1d495da934dcd2b66b7e291bac7057cd27f636c4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "06184191_701ad541",
        "filename": "third_party/WebKit/Source/core/messaging/BlinkTransferableMessageStructTraits.cpp",
        "patchSetId": 26
      },
      "lineNbr": 51,
      "author": {
        "id": 1110029
      },
      "writtenOn": "2018-01-29T18:28:24Z",
      "side": 1,
      "message": "nit: ReserveInitialCapacity(sk_bitmaps.size())",
      "revId": "1d495da934dcd2b66b7e291bac7057cd27f636c4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "91f7d8ce_51f32132",
        "filename": "third_party/WebKit/Source/core/messaging/BlinkTransferableMessageStructTraits.cpp",
        "patchSetId": 26
      },
      "lineNbr": 91,
      "author": {
        "id": 1110029
      },
      "writtenOn": "2018-01-29T18:28:24Z",
      "side": 1,
      "message": "do you actually need this cast, or could you just directly pass mojo_contents.data() to memcpy?",
      "revId": "1d495da934dcd2b66b7e291bac7057cd27f636c4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9a9cbc03_707be70e",
        "filename": "third_party/WebKit/Source/core/messaging/BlinkTransferableMessageStructTraits.h",
        "patchSetId": 26
      },
      "lineNbr": 54,
      "author": {
        "id": 1110029
      },
      "writtenOn": "2018-01-29T18:28:24Z",
      "side": 1,
      "message": "nit: you could just use base::make_span and avoid having to explicitly specify the type",
      "range": {
        "startLine": 54,
        "startChar": 11,
        "endLine": 54,
        "endChar": 30
      },
      "revId": "1d495da934dcd2b66b7e291bac7057cd27f636c4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ee412658_286d3e91",
        "filename": "third_party/WebKit/Source/core/messaging/BlinkTransferableMessageStructTraitsTest.cpp",
        "patchSetId": 26
      },
      "lineNbr": 42,
      "author": {
        "id": 1110029
      },
      "writtenOn": "2018-01-29T18:28:24Z",
      "side": 1,
      "message": "I\u0027m not sure I understand what purpose the lambda serves? How is this different from just having a block-scope (i.e. all this code in {} but no separate lambda/function invocation)?",
      "revId": "1d495da934dcd2b66b7e291bac7057cd27f636c4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8cc61b9f_30f119f4",
        "filename": "third_party/WebKit/Source/core/messaging/BlinkTransferableMessageStructTraitsTest.cpp",
        "patchSetId": 26
      },
      "lineNbr": 129,
      "author": {
        "id": 1110029
      },
      "writtenOn": "2018-01-29T18:28:24Z",
      "side": 1,
      "message": "here same, not sure why you need a lambda rather than just a block scope?",
      "revId": "1d495da934dcd2b66b7e291bac7057cd27f636c4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}