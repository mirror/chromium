{
  "comments": [
    {
      "key": {
        "uuid": "c901e9b3_06516569",
        "filename": "third_party/WebKit/Source/bindings/core/v8/Iterable.h",
        "patchSetId": 3
      },
      "lineNbr": 20,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-04-11T05:14:10Z",
      "side": 1,
      "message": "This was manually undone since the IDL extractor didn\u0027t understand special methods like this, so didn\u0027t emit the right methods to skip.\n\n(It would have been extra tricky to handle this correctly, because it is a template type too)",
      "range": {
        "startLine": 20,
        "startChar": 12,
        "endLine": 20,
        "endChar": 13
      },
      "revId": "a9d951f1777dce1d7ce6a358ec0359ad83e8da1a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8588adc5_5449de3c",
        "filename": "third_party/WebKit/Source/bindings/core/v8/Maplike.h",
        "patchSetId": 3
      },
      "lineNbr": 17,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-04-11T05:14:10Z",
      "side": 1,
      "message": "Same issue here.",
      "range": {
        "startLine": 17,
        "startChar": 7,
        "endLine": 17,
        "endChar": 8
      },
      "revId": "a9d951f1777dce1d7ce6a358ec0359ad83e8da1a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "24daff3b_ef46f9bc",
        "filename": "third_party/WebKit/Source/bindings/core/v8/custom/V8HTMLPlugInElementCustom.cpp",
        "patchSetId": 3
      },
      "lineNbr": 49,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-04-11T05:14:10Z",
      "side": 1,
      "message": "This is something the tool incorrectly rewrites: when the template is instantiated, the tool correctly understands to skip this (since it is from generated code). But on the uninstantiated template, the tool does not have enough context to know that ElementType will always be a auto-generated type, and rewrites it.",
      "range": {
        "startLine": 49,
        "startChar": 41,
        "endLine": 49,
        "endChar": 42
      },
      "revId": "a9d951f1777dce1d7ce6a358ec0359ad83e8da1a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f2fc1f15_5c60d3a3",
        "filename": "third_party/WebKit/Source/build/scripts/make_computed_style_base.py",
        "patchSetId": 3
      },
      "lineNbr": 132,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-04-11T05:14:10Z",
      "side": 1,
      "message": "lukasza@, mind commenting why the original check by itself doesn\u0027t suffice here?",
      "range": {
        "startLine": 132,
        "startChar": 8,
        "endLine": 132,
        "endChar": 65
      },
      "revId": "a9d951f1777dce1d7ce6a358ec0359ad83e8da1a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "361bd3af_e8f22641",
        "filename": "third_party/WebKit/Source/build/scripts/make_computed_style_base.py",
        "patchSetId": 3
      },
      "lineNbr": 132,
      "author": {
        "id": 1197444
      },
      "writtenOn": "2017-04-11T05:52:15Z",
      "side": 1,
      "message": "Just to add, the original check is only for when the getter name clashed with the return type name. For example, the \u0027position\u0027 property would not have been affected by the original check because the return type is EPosition, so it would\u0027ve generated \"EPosition Position() const\". I don\u0027t know if that\u0027s bad but I\u0027m guessing the new check was added to make it \"GetPosition()\" instead?\n\nOn a side note, the new check is slightly wrong because \"if \u0027getter\u0027 in properties\" is always true. The parent class of this class makes sure that properties[\u0027getter\u0027] is always filled with some value. So the else statement here will never trigger.",
      "parentUuid": "f2fc1f15_5c60d3a3",
      "range": {
        "startLine": 132,
        "startChar": 8,
        "endLine": 132,
        "endChar": 65
      },
      "revId": "a9d951f1777dce1d7ce6a358ec0359ad83e8da1a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2d77703d_be98c988",
        "filename": "third_party/WebKit/Source/build/scripts/make_computed_style_base.py",
        "patchSetId": 3
      },
      "lineNbr": 132,
      "author": {
        "id": 1130134
      },
      "writtenOn": "2017-04-11T17:14:26Z",
      "side": 1,
      "message": "The original check doesn\u0027t suffice for cases like: type\u003d|EPosition|, getter\u003d|GetPosition|.\n\nCSSProperties.json5 allows overriding of |getter|, |setter|, |initial| method names.  This ability is used in make_style_builder.py which has code like:\n    set_if_none(property, \u0027getter\u0027, name if simple_type_name !\u003d name else \u0027Get\u0027 + name)\n\nWe needed to use the ability to override the |getter| also in here (I remember \"Position\" being problematic, but the manual patch also had other changes in CSSProperites.json5 - unfortunately they\u0027ve accumulated over time and I don\u0027t remember why some of them were needed...).  The problem was that make_computed_style_base.py ignored |getter| override - the change here tries to enable using the overrides (and haphazardly adds |not self.is_inherited_flag| to avoid trouble with |...IsInherited| method names).\n\nI think going forward we need to find a clean way to consistently process |getter|, |setter|, |initial| method name overrides in all consumers of CSSProperties.json5.  I\u0027ve opened https://crbug.com/710496 to track this.",
      "parentUuid": "361bd3af_e8f22641",
      "range": {
        "startLine": 132,
        "startChar": 8,
        "endLine": 132,
        "endChar": 65
      },
      "revId": "a9d951f1777dce1d7ce6a358ec0359ad83e8da1a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8dfa5ee5_fc7109c6",
        "filename": "third_party/WebKit/Source/build/scripts/templates/CSSPropertyMetadata.cpp.tmpl",
        "patchSetId": 3
      },
      "lineNbr": 20,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-04-11T05:14:10Z",
      "side": 1,
      "message": "We didn\u0027t catch this initially (as the build doesn\u0027t break), but it was causing DCHECKS in https://cs.chromium.org/chromium/src/third_party/WebKit/Source/core/css/StylePropertySerializer.cpp?rcl\u003d722783997be0338cf14613eca3e58e34a43ef24d\u0026l\u003d231.\n\nI fixed these and diffed a few generated CSS files to make sure the only diffs were from renaming, but there\u0027s no guarantee that we caught everything.",
      "range": {
        "startLine": 20,
        "startChar": 29,
        "endLine": 20,
        "endChar": 30
      },
      "revId": "a9d951f1777dce1d7ce6a358ec0359ad83e8da1a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7196be13_5bf8bb23",
        "filename": "third_party/WebKit/Source/core/editing/commands/EditorCommand.cpp",
        "patchSetId": 3
      },
      "lineNbr": 91,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-04-11T05:14:10Z",
      "side": 1,
      "message": "This is important so that the actual editing command verb remains unchanged, so we can still execCommand(\"copy\") rather than execCommand(\"kcopy\").",
      "range": {
        "startLine": 91,
        "startChar": 47,
        "endLine": 91,
        "endChar": 48
      },
      "revId": "a9d951f1777dce1d7ce6a358ec0359ad83e8da1a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "10cf3e60_6218abc6",
        "filename": "third_party/WebKit/Source/core/editing/commands/EditorCommandNames.h",
        "patchSetId": 3
      },
      "lineNbr": 12,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-04-11T05:14:10Z",
      "side": 1,
      "message": "There are several of these comments that accidentally slipped through and were landed. They\u0027ve already been removed.",
      "range": {
        "startLine": 12,
        "startChar": 5,
        "endLine": 12,
        "endChar": 18
      },
      "revId": "a9d951f1777dce1d7ce6a358ec0359ad83e8da1a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d6286413_5ff3b630",
        "filename": "third_party/WebKit/Source/core/inspector/InspectorTraceEvents.cpp",
        "patchSetId": 3
      },
      "lineNbr": 222,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-04-11T05:14:10Z",
      "side": 1,
      "message": "Similar issue here as well.",
      "range": {
        "startLine": 222,
        "startChar": 20,
        "endLine": 222,
        "endChar": 21
      },
      "revId": "a9d951f1777dce1d7ce6a358ec0359ad83e8da1a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ce298a4b_cabe518c",
        "filename": "third_party/WebKit/Source/core/layout/LayoutObject.h",
        "patchSetId": 3
      },
      "lineNbr": 2232,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-04-11T05:14:10Z",
      "side": 1,
      "message": "This is tricky and I\u0027m not sure how we should handle this yet. I think these fields are referenced using a macro, but it\u0027s difficult for the macro to convert from upper camel case to hacker_case style naming. Maybe we should change the macro so that the caller just passes both names?",
      "range": {
        "startLine": 2232,
        "startChar": 12,
        "endLine": 2232,
        "endChar": 13
      },
      "revId": "a9d951f1777dce1d7ce6a358ec0359ad83e8da1a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "25998ed1_8e0e36e2",
        "filename": "third_party/WebKit/Source/core/layout/line/InlineBox.h",
        "patchSetId": 3
      },
      "lineNbr": 410,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-04-11T05:14:10Z",
      "side": 1,
      "message": "This is also a similar issue with macros.",
      "range": {
        "startLine": 410,
        "startChar": 12,
        "endLine": 410,
        "endChar": 13
      },
      "revId": "a9d951f1777dce1d7ce6a358ec0359ad83e8da1a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "375e7147_e1016d53",
        "filename": "third_party/WebKit/Source/platform/image-encoders/JPEGImageEncoderTest.cpp",
        "patchSetId": 3
      },
      "lineNbr": 38,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-04-11T05:14:10Z",
      "side": 1,
      "message": "Not sure why, but this was causing the build to randomly break when I was trying to land the rename CL. I\u0027ll come back and revisit this in a folllowup -- it doesn\u0027t make sense, since the code itself didn\u0027t change...",
      "range": {
        "startLine": 38,
        "startChar": 2,
        "endLine": 38,
        "endChar": 43
      },
      "revId": "a9d951f1777dce1d7ce6a358ec0359ad83e8da1a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}