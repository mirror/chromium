{
  "comments": [
    {
      "key": {
        "uuid": "19500721_9e6f2f55",
        "filename": "chrome/browser/resources/settings/controls/settings_checkbox.js",
        "patchSetId": 11
      },
      "lineNbr": 21,
      "author": {
        "id": 1136204
      },
      "writtenOn": "2017-08-24T19:24:29Z",
      "side": 1,
      "message": "I\u0027d expect this to be in a properties: {}, block since it\u0027s used in binding.",
      "revId": "ada7aaf677e4ee9ce5ff384f755565a990898c95",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6157f6f6_cd7659c8",
        "filename": "chrome/browser/resources/settings/controls/settings_checkbox.js",
        "patchSetId": 11
      },
      "lineNbr": 21,
      "author": {
        "id": 1183839
      },
      "writtenOn": "2017-08-25T09:34:56Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "19500721_9e6f2f55",
      "revId": "ada7aaf677e4ee9ce5ff384f755565a990898c95",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "81c0084f_0c0eb4be",
        "filename": "chrome/browser/resources/settings/controls/settings_checkbox.js",
        "patchSetId": 11
      },
      "lineNbr": 37,
      "author": {
        "id": 1136204
      },
      "writtenOn": "2017-08-24T19:24:29Z",
      "side": 1,
      "message": "Will this potentially add multiple event listeners? e.g. if the instance has three \u0027secondary.label a\u0027 (I\u0027ll call them A,B,C) and the observer is called for each, will we have listeners added for\n\nA (now has 1 function in A in callback list)\nthen \nA,B (now has 2 functions in A, 1 function in B in callback list)\nthen\nA,B,C (now has 3 functions in A, 2 function in B, 1 function in C in callback list)\n\nfor a total of six callbacks? (I believe that\u0027s true, because addEventListener sees each new function as a separate function (because each is a separate function)).\n\nThis can be avoided by creating a single function on |this| like:\n\n  myFunction: (event) \u003d\u003e { event.stopPropagation(); },\n\nAnd passing that function to the addEventListener like:\n\n  link.addEventListener(\u0027tap\u0027, this.myFunction);\n\nThen addEventListener will see that it\u0027s the *same* function and not keep attaching functions to the event.\n\nA (now has 1 function in A in callback list)\nthen \nA,B (now has 1 function in A, 1 function in B in callback list)\nthen\nA,B,C (now has 1 function in A, 1 function in B, 1 function in C in callback list)",
      "revId": "ada7aaf677e4ee9ce5ff384f755565a990898c95",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a462b4e6_34eb32dc",
        "filename": "chrome/browser/resources/settings/controls/settings_checkbox.js",
        "patchSetId": 11
      },
      "lineNbr": 37,
      "author": {
        "id": 1183839
      },
      "writtenOn": "2017-08-25T09:34:56Z",
      "side": 1,
      "message": "I changed the code to use a this.stopPropagation function.\n\nI\u0027m not sure if I understand your argument correctly:\n\n  checkbox.subLabelHtml \u003d \"\u003ca\u003eA\u003c/a\u003e\"; \n\nNow there is an event handler on A.\n\n  checkbox.subLabelHtml \u003d \"\u003ca\u003eA\u003c/a\u003e \u003ca\u003eB\u003c/a\u003e\"; \n\nMy understanding is that the content of the checkbox is replaced and there is a new A and B and both get a listener. Both will only have one listener because the old A was replaced?\n\nOr does Polymer optimize the replacement somehow similar to virtual dom in React where the minimal dom change is computed before the actual dom is replaced?",
      "parentUuid": "81c0084f_0c0eb4be",
      "revId": "ada7aaf677e4ee9ce5ff384f755565a990898c95",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7c95b805_f3e60213",
        "filename": "chrome/browser/resources/settings/controls/settings_checkbox.js",
        "patchSetId": 11
      },
      "lineNbr": 37,
      "author": {
        "id": 1136204
      },
      "writtenOn": "2017-08-25T19:33:25Z",
      "side": 1,
      "message": "That\u0027s a good point. I\u0027m not sure.\n\nI\u0027m sure that if we had HTML with \u003ca\u003eA\u003c/a\u003e and called subLabelHtmlChanged_; then added \u003ca\u003eB\u003c/a\u003e and called subLabelHtmlChanged_ again (without removing A), then there would be three callbacks (two for A and one for B), but you make a good point that the actual change may be the other way around. i.e. we call subLabelHtmlChanged_ with a string (which creates elements) and then call subLabelHtmlChanged_ again with a new string (which creates either one or two elements). That would take some digging to find out what happens in that case.\n\nI\u0027m still in favor, in general of passing a known (rather than anonymous) callback to to addEventListener since it\u0027s clearer on what is happening and isn\u0027t subject to the other implementation changing.",
      "parentUuid": "a462b4e6_34eb32dc",
      "revId": "ada7aaf677e4ee9ce5ff384f755565a990898c95",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}