{
  "comments": [
    {
      "key": {
        "uuid": "bbf094f2_3e7d67d1",
        "filename": "third_party/WebKit/LayoutTests/bluetooth/script-tests/characteristic/gatt-op-garbage-collection-ran-during-error.js",
        "patchSetId": 1
      },
      "lineNbr": 8,
      "author": {
        "id": 1133035
      },
      "writtenOn": "2017-09-08T01:35:23Z",
      "side": 1,
      "message": "It\u0027s a bit unfortunate that we have to do this. It would be nice if our fakes could DCHECK that all responses have been sent. I don\u0027t think you have to fix it in this patch but something to consider.",
      "revId": "7d55af3e28ff6b9b41dd95aef1123799b1f534ba",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "66110705_6e110662",
        "filename": "third_party/WebKit/LayoutTests/bluetooth/script-tests/characteristic/gatt-op-garbage-collection-ran-during-error.js",
        "patchSetId": 1
      },
      "lineNbr": 8,
      "author": {
        "id": 1108705
      },
      "writtenOn": "2017-09-08T18:20:05Z",
      "side": 1,
      "message": "We could:\n- Improve the templating system to allow conditional setups\n- Write a hack to trick the current templating system into only setting up the appropriate error response (for example, capture CALLS in a string and then have some logic that examines that value)\n- Split this into three distinct tests\n\nWhat do you think would be best?",
      "parentUuid": "bbf094f2_3e7d67d1",
      "revId": "7d55af3e28ff6b9b41dd95aef1123799b1f534ba",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1eecda60_69d0669f",
        "filename": "third_party/WebKit/LayoutTests/bluetooth/script-tests/characteristic/gatt-op-garbage-collection-ran-during-error.js",
        "patchSetId": 1
      },
      "lineNbr": 8,
      "author": {
        "id": 1107759
      },
      "writtenOn": "2017-09-08T19:24:46Z",
      "side": 1,
      "message": "Adding checks that all responses have been used would really help improve tests. We did this at the device/bluetooth layer and caught many tests that looked correct but weren\u0027t actually running as expected. I imagine we could add a JS Bluetooth Test API such as \"assert(responsesWereConsumed())\" or something that checks all \u0027SetNext...Response\u0027 variables have been used.\n\nIn that case, I\u0027d then suggest we use \"Write a hack to trick the current templating system ... CALLS in a string\" unless we find there are many test locations that need help and then we can improve the templating system.  I don\u0027t think a switch(FUNCTION_NAME) is too ugly.",
      "parentUuid": "66110705_6e110662",
      "revId": "7d55af3e28ff6b9b41dd95aef1123799b1f534ba",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "21552e62_a2bb35e4",
        "filename": "third_party/WebKit/LayoutTests/bluetooth/script-tests/characteristic/gatt-op-garbage-collection-ran-during-error.js",
        "patchSetId": 1
      },
      "lineNbr": 8,
      "author": {
        "id": 1108705
      },
      "writtenOn": "2017-09-08T21:38:07Z",
      "side": 1,
      "message": "Ack\n\nWill look into this.",
      "parentUuid": "1eecda60_69d0669f",
      "revId": "7d55af3e28ff6b9b41dd95aef1123799b1f534ba",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "68e59f72_ca674c2f",
        "filename": "third_party/WebKit/LayoutTests/bluetooth/script-tests/characteristic/gatt-op-garbage-collection-ran-during-error.js",
        "patchSetId": 1
      },
      "lineNbr": 8,
      "author": {
        "id": 1108705
      },
      "writtenOn": "2017-09-08T23:52:14Z",
      "side": 1,
      "message": "So if we do it at the JS level, I\u0027m not sure how we can make sure all responses are consumed if I don\u0027t have a reference to fake_characteristic by the time the responses are consumed...",
      "parentUuid": "21552e62_a2bb35e4",
      "revId": "7d55af3e28ff6b9b41dd95aef1123799b1f534ba",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d5f7fe5e_82b3e0bd",
        "filename": "third_party/WebKit/LayoutTests/bluetooth/script-tests/characteristic/gatt-op-garbage-collection-ran-during-error.js",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 1107759
      },
      "writtenOn": "2017-09-08T01:13:01Z",
      "side": 1,
      "message": "Use the \u0027GATT_INVALID_HANDLE\u0027 constant from top of bluetooth-helpers.js",
      "range": {
        "startLine": 10,
        "startChar": 74,
        "endLine": 10,
        "endChar": 75
      },
      "revId": "7d55af3e28ff6b9b41dd95aef1123799b1f534ba",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2407a19c_392a9f71",
        "filename": "third_party/WebKit/LayoutTests/bluetooth/script-tests/characteristic/gatt-op-garbage-collection-ran-during-error.js",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 1108705
      },
      "writtenOn": "2017-09-08T18:20:05Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d5f7fe5e_82b3e0bd",
      "range": {
        "startLine": 10,
        "startChar": 74,
        "endLine": 10,
        "endChar": 75
      },
      "revId": "7d55af3e28ff6b9b41dd95aef1123799b1f534ba",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "660ec183_495c5fcb",
        "filename": "third_party/WebKit/LayoutTests/bluetooth/script-tests/characteristic/gatt-op-garbage-collection-ran-during-error.js",
        "patchSetId": 1
      },
      "lineNbr": 29,
      "author": {
        "id": 1107759
      },
      "writtenOn": "2017-09-08T01:13:01Z",
      "side": 1,
      "message": "I wonder if ortuno@ had a reason to runGarbageCollection in a .then instead of in the same code block that made the failing function call.  As written currently javascript will yield before GC is run.  (another recent CL also did this)",
      "range": {
        "startLine": 29,
        "startChar": 8,
        "endLine": 29,
        "endChar": 28
      },
      "revId": "7d55af3e28ff6b9b41dd95aef1123799b1f534ba",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4c4dd513_15c76731",
        "filename": "third_party/WebKit/LayoutTests/bluetooth/script-tests/characteristic/gatt-op-garbage-collection-ran-during-error.js",
        "patchSetId": 1
      },
      "lineNbr": 29,
      "author": {
        "id": 1133035
      },
      "writtenOn": "2017-09-08T01:35:23Z",
      "side": 1,
      "message": "Before, characteristic\u0027s scope was the whole block (we didn\u0027t set it to null). So if we were to call runGarbageCollection in that block, characteristic wouldn\u0027t get garbage collected. Note that even though runGarbageCollection returns a promise, GCController.collect() is called immediately.\n\nSince this patch sets |characteristic| to null, and thus releases the last reference to the object, we could run garbage collection inside the same block. You can test if the new approach works (and if the current test still works) by changing the following line from WrapPersistent(this) to WrapWeakPersistent(this):\n\nhttps://cs.chromium.org/chromium/src/third_party/WebKit/Source/modules/bluetooth/BluetoothRemoteGATTCharacteristic.cpp?sq\u003dpackage:chromium\u0026dr\u003dCSs\u0026l\u003d137",
      "parentUuid": "660ec183_495c5fcb",
      "range": {
        "startLine": 29,
        "startChar": 8,
        "endLine": 29,
        "endChar": 28
      },
      "revId": "7d55af3e28ff6b9b41dd95aef1123799b1f534ba",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "70cc1b17_834bb5d7",
        "filename": "third_party/WebKit/LayoutTests/bluetooth/script-tests/characteristic/gatt-op-garbage-collection-ran-during-error.js",
        "patchSetId": 1
      },
      "lineNbr": 29,
      "author": {
        "id": 1108705
      },
      "writtenOn": "2017-09-08T18:20:05Z",
      "side": 1,
      "message": "It crashes either way (doing garbage collection inside or outside the function) when I make that change.  I wouldn\u0027t expect the behavior to differ since the function doesn\u0027t return a promise.",
      "parentUuid": "4c4dd513_15c76731",
      "range": {
        "startLine": 29,
        "startChar": 8,
        "endLine": 29,
        "endChar": 28
      },
      "revId": "7d55af3e28ff6b9b41dd95aef1123799b1f534ba",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fad8fe74_d5283bca",
        "filename": "third_party/WebKit/LayoutTests/bluetooth/script-tests/characteristic/gatt-op-garbage-collection-ran-during-error.js",
        "patchSetId": 1
      },
      "lineNbr": 29,
      "author": {
        "id": 1107759
      },
      "writtenOn": "2017-09-08T19:24:46Z",
      "side": 1,
      "message": "behavior may differ if the GC can run in the same javascript execution after the characteristic.call is made -- as opposed to racing the async result of the call and the next JS turn that runs GC.",
      "parentUuid": "70cc1b17_834bb5d7",
      "range": {
        "startLine": 29,
        "startChar": 8,
        "endLine": 29,
        "endChar": 28
      },
      "revId": "7d55af3e28ff6b9b41dd95aef1123799b1f534ba",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d96fbb16_5b242dfa",
        "filename": "third_party/WebKit/LayoutTests/bluetooth/script-tests/characteristic/gatt-op-garbage-collection-ran-during-error.js",
        "patchSetId": 1
      },
      "lineNbr": 29,
      "author": {
        "id": 1108705
      },
      "writtenOn": "2017-09-08T21:38:07Z",
      "side": 1,
      "message": "I was fairly convinced that a new turn is only triggered when a promise doesn\u0027t resolve synchronously, so there shouldn\u0027t be any race condition here.\n\nHere\u0027s an empirical test: https://jsfiddle.net/cy3Lctzp/3/",
      "parentUuid": "fad8fe74_d5283bca",
      "range": {
        "startLine": 29,
        "startChar": 8,
        "endLine": 29,
        "endChar": 28
      },
      "revId": "7d55af3e28ff6b9b41dd95aef1123799b1f534ba",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a3354a07_f247a393",
        "filename": "third_party/WebKit/LayoutTests/bluetooth/script-tests/characteristic/gatt-op-garbage-collection-ran-during-error.js",
        "patchSetId": 1
      },
      "lineNbr": 29,
      "author": {
        "id": 1107759
      },
      "writtenOn": "2017-09-08T23:14:21Z",
      "side": 1,
      "message": "I think there\u0027s a good chance you\u0027re right, but I\u0027m not certain and timed out reading http://www.ecma-international.org/ecma-262/6.0/#sec-promise.prototype.then and references. \n\nThat we\u0027re debating it is enough, I think, to indicate that when reading the JS it\u0027s not 100% clear. If runGarbageCollection is moved to the same block then it is quite clear.",
      "parentUuid": "d96fbb16_5b242dfa",
      "range": {
        "startLine": 29,
        "startChar": 8,
        "endLine": 29,
        "endChar": 28
      },
      "revId": "7d55af3e28ff6b9b41dd95aef1123799b1f534ba",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}