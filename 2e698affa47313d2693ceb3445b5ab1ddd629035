{
  "comments": [
    {
      "key": {
        "uuid": "3f4835ba_bab6d915",
        "filename": "third_party/zlib/contrib/optimizations/arm/arm_features.c",
        "patchSetId": 13
      },
      "lineNbr": 15,
      "author": {
        "id": 1109754
      },
      "writtenOn": "2018-01-25T17:46:32Z",
      "side": 1,
      "message": "14-19: Could we please use the definition from the correct zlib include file, rather than redefine it.",
      "revId": "2e698affa47313d2693ceb3445b5ab1ddd629035",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e2b3574e_9d05c0b0",
        "filename": "third_party/zlib/contrib/optimizations/arm/arm_features.c",
        "patchSetId": 13
      },
      "lineNbr": 15,
      "author": {
        "id": 1145695
      },
      "writtenOn": "2018-01-25T21:13:17Z",
      "side": 1,
      "message": "I rather not because we lack any control on what zlib will ship or define in the future.\n\nAnother advantage is that in this way this code can be easily tested standalone.",
      "parentUuid": "3f4835ba_bab6d915",
      "revId": "2e698affa47313d2693ceb3445b5ab1ddd629035",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5918de0c_7206cfd8",
        "filename": "third_party/zlib/contrib/optimizations/arm/arm_features.c",
        "patchSetId": 13
      },
      "lineNbr": 26,
      "author": {
        "id": 1109754
      },
      "writtenOn": "2018-01-25T17:46:32Z",
      "side": 1,
      "message": "#ifdef not needed: the build file rules exclude this file when this feature is disabled.",
      "revId": "2e698affa47313d2693ceb3445b5ab1ddd629035",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e5b3b658_4996b74f",
        "filename": "third_party/zlib/contrib/optimizations/arm/arm_features.c",
        "patchSetId": 13
      },
      "lineNbr": 26,
      "author": {
        "id": 1145695
      },
      "writtenOn": "2018-01-25T20:54:47Z",
      "side": 1,
      "message": "IIRC that was needed to make one of the bots happy (Windows or fuchsia? Dunno).",
      "parentUuid": "5918de0c_7206cfd8",
      "revId": "2e698affa47313d2693ceb3445b5ab1ddd629035",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0fb897b4_119715a2",
        "filename": "third_party/zlib/contrib/optimizations/arm/arm_features.c",
        "patchSetId": 13
      },
      "lineNbr": 36,
      "author": {
        "id": 1109754
      },
      "writtenOn": "2018-01-25T17:46:32Z",
      "side": 1,
      "message": "Magic numbers. They can vary with arch (see below). Does #include \u003casm/hwcap.h\u003e not work for you?",
      "revId": "2e698affa47313d2693ceb3445b5ab1ddd629035",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "33c23f7b_a8435b3b",
        "filename": "third_party/zlib/contrib/optimizations/arm/arm_features.c",
        "patchSetId": 13
      },
      "lineNbr": 36,
      "author": {
        "id": 1145695
      },
      "writtenOn": "2018-01-25T20:54:47Z",
      "side": 1,
      "message": "This seems to be the approach used everywhere else in Chromium code base (i.e. skia, boringssl, etc).\n\nI can add a TODO towards change everywhere to start using the header file.",
      "parentUuid": "0fb897b4_119715a2",
      "revId": "2e698affa47313d2693ceb3445b5ab1ddd629035",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "72d0f5d5_132a728b",
        "filename": "third_party/zlib/contrib/optimizations/arm/arm_features.c",
        "patchSetId": 13
      },
      "lineNbr": 38,
      "author": {
        "id": 1109754
      },
      "writtenOn": "2018-01-25T17:46:32Z",
      "side": 1,
      "message": "http://bit.ly/2CcoEsr talks about android CPU features, and refers a code change in AOSP that implemented the feature.\n\nUnder the hood, they use getauxval(AT_HWCAP) for aarch64, but they use getauxval(AT_HWCAP2) for aarch32. Reading into the linux kernel code, that looks correct and also in other code I\u0027ve searched that used getauxval detect at runtime in an arch-dependent way.\n\nCan you please check, or ask around it, so we can resolve which arch is being targeted here?  Can we support both by reading the correct getauxval(), AT_HWCAP vs AT_HWCAP2?",
      "revId": "2e698affa47313d2693ceb3445b5ab1ddd629035",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5a43f9e1_e6583d67",
        "filename": "third_party/zlib/contrib/optimizations/arm/arm_features.c",
        "patchSetId": 13
      },
      "lineNbr": 38,
      "author": {
        "id": 1145695
      },
      "writtenOn": "2018-01-25T20:54:47Z",
      "side": 1,
      "message": "It is a good point and it is a bit unclear really.\n\nLet\u0027s breakdown the problem: this would be used only for ChromeOS (CrOS) or ARM Linux (as in android we use getCpuFeatures()).\n\nThe article suggests using AT_HWCAP for aarch64. I tested this standalone as a 64bits binary and it works fine in a 64bits kernel.\n\nI haven\u0027t tested the scenario of running in 32bits@ARMv8.\n\nIIRC, Chrome ships as a 32bits binary in ChromeOS (even though the kernel is 64bits).\n\nGiven that this is disabled for now for CrOS because it seems that its scripts will bypass the needed compiler flag to enable the use of the crc32 instruction (i.e. -march\u003darmv8-a+crc), I think we are safe.\n\nWhen I enable this for CrOS I can double check this scenario (i.e. 32bits binary running in a 64bits kernel).",
      "parentUuid": "72d0f5d5_132a728b",
      "revId": "2e698affa47313d2693ceb3445b5ab1ddd629035",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "659b95fa_586f305a",
        "filename": "third_party/zlib/contrib/optimizations/arm/arm_features.c",
        "patchSetId": 13
      },
      "lineNbr": 54,
      "author": {
        "id": 1109754
      },
      "writtenOn": "2018-01-25T17:46:32Z",
      "side": 1,
      "message": "#ifdef not needed: the build file rules exclude this file when this feature is disabled.",
      "revId": "2e698affa47313d2693ceb3445b5ab1ddd629035",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e93e5333_de8668e5",
        "filename": "third_party/zlib/contrib/optimizations/arm/arm_features.c",
        "patchSetId": 13
      },
      "lineNbr": 54,
      "author": {
        "id": 1145695
      },
      "writtenOn": "2018-01-25T20:31:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "659b95fa_586f305a",
      "revId": "2e698affa47313d2693ceb3445b5ab1ddd629035",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a2f9d76f_7b347ab9",
        "filename": "third_party/zlib/contrib/optimizations/arm/arm_features.c",
        "patchSetId": 13
      },
      "lineNbr": 60,
      "author": {
        "id": 1109754
      },
      "writtenOn": "2018-01-25T17:46:32Z",
      "side": 1,
      "message": "Not used.",
      "revId": "2e698affa47313d2693ceb3445b5ab1ddd629035",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "773ca344_ef9304e5",
        "filename": "third_party/zlib/contrib/optimizations/arm/arm_features.c",
        "patchSetId": 13
      },
      "lineNbr": 60,
      "author": {
        "id": 1145695
      },
      "writtenOn": "2018-01-25T20:31:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a2f9d76f_7b347ab9",
      "revId": "2e698affa47313d2693ceb3445b5ab1ddd629035",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1d2710ba_c14d405c",
        "filename": "third_party/zlib/contrib/optimizations/arm/arm_features.c",
        "patchSetId": 13
      },
      "lineNbr": 64,
      "author": {
        "id": 1109754
      },
      "writtenOn": "2018-01-25T17:46:32Z",
      "side": 1,
      "message": "Not used.",
      "revId": "2e698affa47313d2693ceb3445b5ab1ddd629035",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3263065f_46045c2d",
        "filename": "third_party/zlib/contrib/optimizations/arm/arm_features.c",
        "patchSetId": 13
      },
      "lineNbr": 64,
      "author": {
        "id": 1145695
      },
      "writtenOn": "2018-01-25T20:31:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1d2710ba_c14d405c",
      "revId": "2e698affa47313d2693ceb3445b5ab1ddd629035",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f49e0685_a58234f5",
        "filename": "third_party/zlib/contrib/optimizations/arm/arm_features.h",
        "patchSetId": 13
      },
      "lineNbr": 9,
      "author": {
        "id": 1109754
      },
      "writtenOn": "2018-01-25T17:46:32Z",
      "side": 1,
      "message": "bool.  The natural type of any CPU is int, and can also be and very useful aid in debugging (eg., AT_HWCAP/2 problem). Please use int here and below.",
      "revId": "2e698affa47313d2693ceb3445b5ab1ddd629035",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "89a6ef17_385779b3",
        "filename": "third_party/zlib/contrib/optimizations/arm/arm_features.h",
        "patchSetId": 13
      },
      "lineNbr": 9,
      "author": {
        "id": 1145695
      },
      "writtenOn": "2018-01-25T20:29:25Z",
      "side": 1,
      "message": "Using bool helps to document the purpose and the possible states of this flag.\n\nPlease check:\nhttps://softwareengineering.stackexchange.com/questions/145323/when-should-you-use-bools-in-c\n\nQuote: \"When choosing variable types and variable names you want your intent to be as clear as possible. If you choose a bool (boolean) type, it is clear there are only two acceptable values: true or false. If you use an int (integer) type, it is no longer clear that the intent of that variable can only be 1 or 0 or whatever values you chose to mean true and false\".\n\nIn the end everything will treated using an \u0027rn\u0027 register, no to mention that the number of instructions used are the same:\nhttps://godbolt.org/g/UJvQ9a",
      "parentUuid": "f49e0685_a58234f5",
      "revId": "2e698affa47313d2693ceb3445b5ab1ddd629035",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c6782eaa_41394930",
        "filename": "third_party/zlib/contrib/optimizations/arm/arm_features.h",
        "patchSetId": 13
      },
      "lineNbr": 14,
      "author": {
        "id": 1109754
      },
      "writtenOn": "2018-01-25T17:46:32Z",
      "side": 1,
      "message": "Used anywhere?",
      "revId": "2e698affa47313d2693ceb3445b5ab1ddd629035",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8a778352_229ec8e6",
        "filename": "third_party/zlib/contrib/optimizations/arm/arm_features.h",
        "patchSetId": 13
      },
      "lineNbr": 14,
      "author": {
        "id": 1145695
      },
      "writtenOn": "2018-01-25T20:29:25Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c6782eaa_41394930",
      "revId": "2e698affa47313d2693ceb3445b5ab1ddd629035",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "82afe030_1a7cce31",
        "filename": "third_party/zlib/contrib/optimizations/arm/arm_features.h",
        "patchSetId": 13
      },
      "lineNbr": 16,
      "author": {
        "id": 1109754
      },
      "writtenOn": "2018-01-25T17:46:32Z",
      "side": 1,
      "message": "Used anywhere?",
      "revId": "2e698affa47313d2693ceb3445b5ab1ddd629035",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f91c8424_069397ab",
        "filename": "third_party/zlib/contrib/optimizations/arm/arm_features.h",
        "patchSetId": 13
      },
      "lineNbr": 16,
      "author": {
        "id": 1145695
      },
      "writtenOn": "2018-01-25T20:29:25Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "82afe030_1a7cce31",
      "revId": "2e698affa47313d2693ceb3445b5ab1ddd629035",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f55dff0d_271f686c",
        "filename": "third_party/zlib/contrib/optimizations/arm/armv8_crc32.c",
        "patchSetId": 13
      },
      "lineNbr": 38,
      "author": {
        "id": 1109754
      },
      "writtenOn": "2018-01-25T17:46:32Z",
      "side": 1,
      "message": "4, what is 4?  I\u0027d understand 8 or 64, but not quite sure why the 4. Perhaps it\u0027s hangover from an earlier version of this code?",
      "revId": "2e698affa47313d2693ceb3445b5ab1ddd629035",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5a09754f_c1e3eb27",
        "filename": "third_party/zlib/contrib/optimizations/arm/armv8_crc32.c",
        "patchSetId": 13
      },
      "lineNbr": 38,
      "author": {
        "id": 1145695
      },
      "writtenOn": "2018-01-25T20:34:16Z",
      "side": 1,
      "message": "Yep, a leftover (but not a hangover).\n:-P",
      "parentUuid": "f55dff0d_271f686c",
      "revId": "2e698affa47313d2693ceb3445b5ab1ddd629035",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bda70ef2_0431ead1",
        "filename": "third_party/zlib/contrib/optimizations/arm/armv8_crc32.h",
        "patchSetId": 13
      },
      "lineNbr": 14,
      "author": {
        "id": 1109754
      },
      "writtenOn": "2018-01-25T17:46:32Z",
      "side": 1,
      "message": "zlib solves with z_size_t, let\u0027s use that.",
      "revId": "2e698affa47313d2693ceb3445b5ab1ddd629035",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "018ad4f4_e1782e25",
        "filename": "third_party/zlib/contrib/optimizations/arm/armv8_crc32.h",
        "patchSetId": 13
      },
      "lineNbr": 14,
      "author": {
        "id": 1145695
      },
      "writtenOn": "2018-01-25T21:13:17Z",
      "side": 1,
      "message": "I rather not because we lack any control on what zlib will ship or define in the future.\n\nAnother advantage is that in this way this code can be easily tested standalone.\n\nFinally, I know for sure what is going to be the real size of a \u0027size_t\u0027 (something important while using NEON).",
      "parentUuid": "bda70ef2_0431ead1",
      "revId": "2e698affa47313d2693ceb3445b5ab1ddd629035",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fc7f9828_7c6114e6",
        "filename": "third_party/zlib/contrib/optimizations/inflate.c",
        "patchSetId": 13
      },
      "lineNbr": 210,
      "author": {
        "id": 1109754
      },
      "writtenOn": "2018-01-25T17:46:32Z",
      "side": 1,
      "message": "No need to check features here.  inflate calls crc32(0, Z_NULL,0) before ever using the crc32 routine right? (please check). And your crc32 automatically arm_check_features() when it does.",
      "revId": "2e698affa47313d2693ceb3445b5ab1ddd629035",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a593a099_b3e5bc44",
        "filename": "third_party/zlib/crc32.c",
        "patchSetId": 13
      },
      "lineNbr": 36,
      "author": {
        "id": 1109754
      },
      "writtenOn": "2018-01-25T17:46:32Z",
      "side": 1,
      "message": "#if not needed, like our other #include, you can #include these files without the #if guard I believe. If not, please make it so.",
      "revId": "2e698affa47313d2693ceb3445b5ab1ddd629035",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ce84b146_f00fea3d",
        "filename": "third_party/zlib/crc32.c",
        "patchSetId": 13
      },
      "lineNbr": 261,
      "author": {
        "id": 1109754
      },
      "writtenOn": "2018-01-25T17:46:32Z",
      "side": 1,
      "message": "Nice attempt, but a little hard to read through here. To make it plain, cargo cult (copy) the if (buf ...) test into your feature define below.",
      "revId": "2e698affa47313d2693ceb3445b5ab1ddd629035",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6919b08d_521654c7",
        "filename": "third_party/zlib/deflate.c",
        "patchSetId": 13
      },
      "lineNbr": 289,
      "author": {
        "id": 1109754
      },
      "writtenOn": "2018-01-25T17:46:32Z",
      "side": 1,
      "message": "No need to check features here.  deflate calls crc32(0, Z_NULL,0) before ever using the crc32 routine right? (please check). And your crc32 automatically arm_check_features() when it does.",
      "revId": "2e698affa47313d2693ceb3445b5ab1ddd629035",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}