{
  "comments": [
    {
      "key": {
        "uuid": "c116da66_5573947d",
        "filename": "chrome/browser/ui/cocoa/download/md_download_item_progress_indicator.mm",
        "patchSetId": 1
      },
      "lineNbr": 131,
      "author": {
        "id": 1000022
      },
      "writtenOn": "2017-11-03T13:37:41Z",
      "side": 1,
      "message": "I don\u0027t think it\u0027s a good idea to have lambdas this long, or nested lambdas like this, so please factor this out into helper functions or methods. If you do that I think that it will no longer be necessary to use [NSAnimationGroup runAnimationGroup:completionHandler:] either, and this function can instead do:\n\n[NSAnimationGrouping beginGrouping];\nif (paused_)\n  [self animatePause];\nelse\n  [self updateProgress];\n[NSAnimationGroup endGrouping];\n\nor something like that, since we aren\u0027t making use of the completion handlers here anyway.",
      "range": {
        "startLine": 131,
        "startChar": 62,
        "endLine": 131,
        "endChar": 69
      },
      "revId": "5eac0ae23ed33fe77754ee1c7b9723e830048687",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ed77f244_76b1b155",
        "filename": "chrome/browser/ui/cocoa/download/md_download_item_progress_indicator.mm",
        "patchSetId": 1
      },
      "lineNbr": 131,
      "author": {
        "id": 1160249
      },
      "writtenOn": "2017-11-03T14:23:25Z",
      "side": 1,
      "message": "OK. I\u0027ve been using runAnimationGroup:completionHandler: for scoping (so that it\u0027s not possible to skip -endGrouping with an early return or something). I could make a ScopedNSAnimationGroup or similar, but kinda like the built-in way. Thoughts?",
      "parentUuid": "c116da66_5573947d",
      "range": {
        "startLine": 131,
        "startChar": 62,
        "endLine": 131,
        "endChar": 69
      },
      "revId": "5eac0ae23ed33fe77754ee1c7b9723e830048687",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "afdca031_6a9ee2b7",
        "filename": "chrome/browser/ui/cocoa/download/md_download_item_progress_indicator.mm",
        "patchSetId": 1
      },
      "lineNbr": 131,
      "author": {
        "id": 1000022
      },
      "writtenOn": "2017-11-03T14:39:23Z",
      "side": 1,
      "message": "Hmmm. Sticking with the builtin way seems okay to me, but the ScopedWhatever approach is more chrome-y. This makes me wish we had a base::ScopedAnything, which took a pair of lambdas to run at entry and exit of the scope :)\n\nin any case, I think it\u0027s fine to stick to the builtin way here.",
      "parentUuid": "ed77f244_76b1b155",
      "range": {
        "startLine": 131,
        "startChar": 62,
        "endLine": 131,
        "endChar": 69
      },
      "revId": "5eac0ae23ed33fe77754ee1c7b9723e830048687",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e80e2e4a_03423f7f",
        "filename": "chrome/browser/ui/cocoa/download/md_download_item_progress_indicator.mm",
        "patchSetId": 1
      },
      "lineNbr": 131,
      "author": {
        "id": 1160249
      },
      "writtenOn": "2017-11-04T15:48:20Z",
      "side": 1,
      "message": "OK. Yeah, I\u0027ve thought about that too, it\u0027d be useful. For now, this new patch set has significantly fewer lambdas :).",
      "parentUuid": "afdca031_6a9ee2b7",
      "range": {
        "startLine": 131,
        "startChar": 62,
        "endLine": 131,
        "endChar": 69
      },
      "revId": "5eac0ae23ed33fe77754ee1c7b9723e830048687",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}