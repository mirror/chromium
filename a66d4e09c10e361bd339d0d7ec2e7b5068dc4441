{
  "comments": [
    {
      "key": {
        "uuid": "b6db6635_7db797ca",
        "filename": "device/ctap/BUILD.gn",
        "patchSetId": 7
      },
      "lineNbr": 56,
      "author": {
        "id": 1113896
      },
      "writtenOn": "2018-01-09T19:31:08Z",
      "side": 1,
      "message": "Is this dependency necessary?",
      "range": {
        "startLine": 56,
        "startChar": 0,
        "endLine": 56,
        "endChar": 12
      },
      "revId": "a66d4e09c10e361bd339d0d7ec2e7b5068dc4441",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "68c55eb3_91aa48c1",
        "filename": "device/ctap/device_response_convertor.cc",
        "patchSetId": 7
      },
      "lineNbr": 1,
      "author": {
        "id": 1113896
      },
      "writtenOn": "2018-01-09T19:31:08Z",
      "side": 1,
      "message": "2018",
      "range": {
        "startLine": 1,
        "startChar": 13,
        "endLine": 1,
        "endChar": 17
      },
      "revId": "a66d4e09c10e361bd339d0d7ec2e7b5068dc4441",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dee91397_a50cd277",
        "filename": "device/ctap/device_response_convertor.cc",
        "patchSetId": 7
      },
      "lineNbr": 32,
      "author": {
        "id": 1113896
      },
      "writtenOn": "2018-01-09T19:31:08Z",
      "side": 1,
      "message": "Calling count() and then find() means searching the map twice. Instead,\n\nauto it \u003d response_map.find(CBOR(1));\nif (it \u003d\u003d response_map.end() || !it-\u003esecond.is_string())\n  return false;\n\nit \u003d response_map.find(CBOR(2));\nif (it \u003d\u003d response_map.end() || !it-\u003esecond.is_bytestring())\n  return false;\n\netc...",
      "range": {
        "startLine": 28,
        "startChar": 0,
        "endLine": 32,
        "endChar": 53
      },
      "revId": "a66d4e09c10e361bd339d0d7ec2e7b5068dc4441",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "74cf179c_1b089f65",
        "filename": "device/ctap/device_response_convertor.cc",
        "patchSetId": 7
      },
      "lineNbr": 111,
      "author": {
        "id": 1113896
      },
      "writtenOn": "2018-01-09T19:31:08Z",
      "side": 1,
      "message": "Why is this a CHECK and not a DCHECK? Would it be reasonable to just return kCtap2ErrInvalidCBOR if the buffer is zero-length?",
      "range": {
        "startLine": 111,
        "startChar": 2,
        "endLine": 111,
        "endChar": 25
      },
      "revId": "a66d4e09c10e361bd339d0d7ec2e7b5068dc4441",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "72d606eb_b7c8f984",
        "filename": "device/ctap/device_response_convertor.cc",
        "patchSetId": 7
      },
      "lineNbr": 132,
      "author": {
        "id": 1113896
      },
      "writtenOn": "2018-01-09T19:31:08Z",
      "side": 1,
      "message": "The find() calls here are duplicating the work of MakeCredentialResponseCheck above. I would just do all this work in a single place.",
      "range": {
        "startLine": 130,
        "startChar": 0,
        "endLine": 132,
        "endChar": 76
      },
      "revId": "a66d4e09c10e361bd339d0d7ec2e7b5068dc4441",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d8ceb4e3_5efacbe0",
        "filename": "device/ctap/device_response_convertor.cc",
        "patchSetId": 7
      },
      "lineNbr": 134,
      "author": {
        "id": 1113896
      },
      "writtenOn": "2018-01-09T19:31:08Z",
      "side": 1,
      "message": "This is confusing. I would have assumed that we wanted to parse |buffer| and make the CBOR encoded data available but it seems like we\u0027re just parsing, validating and then re-encoding it.",
      "revId": "a66d4e09c10e361bd339d0d7ec2e7b5068dc4441",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "84bca400_32ce8fdd",
        "filename": "device/ctap/device_response_convertor.cc",
        "patchSetId": 7
      },
      "lineNbr": 146,
      "author": {
        "id": 1113896
      },
      "writtenOn": "2018-01-09T19:31:08Z",
      "side": 1,
      "message": "Same comment about the \"check\" methods applies here and below. Lots of duplicated work and validation logic spread all over the file.",
      "range": {
        "startLine": 146,
        "startChar": 28,
        "endLine": 146,
        "endChar": 53
      },
      "revId": "a66d4e09c10e361bd339d0d7ec2e7b5068dc4441",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a1713ad6_a2874ffd",
        "filename": "device/ctap/device_response_convertor.h",
        "patchSetId": 7
      },
      "lineNbr": 1,
      "author": {
        "id": 1113896
      },
      "writtenOn": "2018-01-09T19:31:08Z",
      "side": 1,
      "message": "2018",
      "range": {
        "startLine": 1,
        "startChar": 13,
        "endLine": 1,
        "endChar": 17
      },
      "revId": "a66d4e09c10e361bd339d0d7ec2e7b5068dc4441",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "271d1fda_3ac5920f",
        "filename": "device/ctap/device_response_convertor.h",
        "patchSetId": 7
      },
      "lineNbr": 33,
      "author": {
        "id": 1113896
      },
      "writtenOn": "2018-01-09T19:31:08Z",
      "side": 1,
      "message": "Use base::span\u003cuint8_t\u003e in these functions and you will find that you don\u0027t need to construct as many intermediate std::vectors because a span can be constructed directly from an array or raw pointer without copying anything.",
      "range": {
        "startLine": 33,
        "startChar": 31,
        "endLine": 33,
        "endChar": 58
      },
      "revId": "a66d4e09c10e361bd339d0d7ec2e7b5068dc4441",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}