{
  "comments": [
    {
      "key": {
        "uuid": "c0f73767_da29c00e",
        "filename": "chrome/browser/extensions/extension_browsertest.cc",
        "patchSetId": 13
      },
      "lineNbr": 319,
      "author": {
        "id": 1115745
      },
      "writtenOn": "2017-10-05T13:34:09Z",
      "side": 1,
      "message": "This will crash if the above expectation fails, but crashes are quite a bit uglier for our testing structure.  Let\u0027s do:\n\nreturn iter \u003d\u003d browser_list.end() ? nullptr : *iter;\n(I think ^^ this was my original suggestion)\n\nor, if you prefer, remove the EXPECT_FALSE above and do:\n\nif (iter \u003d\u003d browser_list.end())\n  ADD_FAILURE() \u003c\u003c \"Could not find matching browser for: \u003c\u003c extension-\u003eid();\n  return nullptr;\n}\nreturn *iter;",
      "revId": "e41fe8268b6bd451f68f1ca4310b3a029609adc3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f37fb33d_c6087a07",
        "filename": "chrome/browser/extensions/extension_browsertest.cc",
        "patchSetId": 13
      },
      "lineNbr": 319,
      "author": {
        "id": 1002603
      },
      "writtenOn": "2017-10-06T04:36:00Z",
      "side": 1,
      "message": "Oh. I thought that EXPECT would just throw a failure and end the test. Fixed.",
      "parentUuid": "c0f73767_da29c00e",
      "revId": "e41fe8268b6bd451f68f1ca4310b3a029609adc3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "23774efd_c9047048",
        "filename": "chrome/browser/extensions/extension_browsertest.cc",
        "patchSetId": 13
      },
      "lineNbr": 319,
      "author": {
        "id": 1115745
      },
      "writtenOn": "2017-10-09T15:23:32Z",
      "side": 1,
      "message": "EXPECTs are designed for non-fatal failures, and will continue the test (which is often desired behavior, because sometimes it\u0027s nice to see *everything* that failed at once, rather than fix one bug, run the test, see the next bug, fix it, etc).  But it means that ASSERTs (which will abort the test) or graceful handling are the right fix when you\u0027re verifying something that will break if it\u0027s wrong (null pointers, list size, etc).",
      "parentUuid": "f37fb33d_c6087a07",
      "revId": "e41fe8268b6bd451f68f1ca4310b3a029609adc3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "10289ff0_dc37af1c",
        "filename": "chrome/browser/sync/test/integration/sync_app_helper.cc",
        "patchSetId": 13
      },
      "lineNbr": 92,
      "author": {
        "id": 1115745
      },
      "writtenOn": "2017-10-05T13:34:09Z",
      "side": 1,
      "message": "nit: same length, and avoiding an unnecessary assignment:\nif (extension-\u003efrom_bookmark()) {\n  app_state-\u003ebookmark_app_scope \u003d\n      extensions::GetScopeURLFromBookmarkApp(extension);\n}",
      "revId": "e41fe8268b6bd451f68f1ca4310b3a029609adc3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "42f55588_32763251",
        "filename": "chrome/browser/sync/test/integration/sync_app_helper.cc",
        "patchSetId": 13
      },
      "lineNbr": 92,
      "author": {
        "id": 1002603
      },
      "writtenOn": "2017-10-06T04:36:00Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "10289ff0_dc37af1c",
      "revId": "e41fe8268b6bd451f68f1ca4310b3a029609adc3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "248d68e3_7de8e4d0",
        "filename": "chrome/browser/sync/test/integration/two_client_apps_sync_test.cc",
        "patchSetId": 13
      },
      "lineNbr": 383,
      "author": {
        "id": 1002186
      },
      "writtenOn": "2017-10-05T18:13:10Z",
      "side": 1,
      "message": "any reason for this change?",
      "range": {
        "startLine": 383,
        "startChar": 55,
        "endLine": 383,
        "endChar": 59
      },
      "revId": "e41fe8268b6bd451f68f1ca4310b3a029609adc3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f8cbef05_10acbcd6",
        "filename": "chrome/browser/sync/test/integration/two_client_apps_sync_test.cc",
        "patchSetId": 13
      },
      "lineNbr": 383,
      "author": {
        "id": 1002603
      },
      "writtenOn": "2017-10-06T04:36:00Z",
      "side": 1,
      "message": "Not strictly necessary, but it makes the sync test more robust. Previously scope was being set to app_url on sync, and since these values were the same, it wasn\u0027t caught when CheckAllWhatevers() was called.",
      "parentUuid": "248d68e3_7de8e4d0",
      "range": {
        "startLine": 383,
        "startChar": 55,
        "endLine": 383,
        "endChar": 59
      },
      "revId": "e41fe8268b6bd451f68f1ca4310b3a029609adc3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "afbf5b88_40bf5a50",
        "filename": "chrome/browser/ui/extensions/hosted_app_browser_controller.h",
        "patchSetId": 13
      },
      "lineNbr": 49,
      "author": {
        "id": 1002092
      },
      "writtenOn": "2017-10-05T23:33:17Z",
      "side": 1,
      "message": "Is it SK_ColorTRANSPARENT or an unset base::Optional ?",
      "range": {
        "startLine": 49,
        "startChar": 44,
        "endLine": 49,
        "endChar": 63
      },
      "revId": "e41fe8268b6bd451f68f1ca4310b3a029609adc3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ed806303_12ee0887",
        "filename": "chrome/browser/ui/extensions/hosted_app_browser_controller.h",
        "patchSetId": 13
      },
      "lineNbr": 49,
      "author": {
        "id": 1002603
      },
      "writtenOn": "2017-10-06T04:36:00Z",
      "side": 1,
      "message": "Oops. Fixed.",
      "parentUuid": "afbf5b88_40bf5a50",
      "range": {
        "startLine": 49,
        "startChar": 44,
        "endLine": 49,
        "endChar": 63
      },
      "revId": "e41fe8268b6bd451f68f1ca4310b3a029609adc3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "53f48faf_87159205",
        "filename": "chrome/browser/ui/extensions/hosted_app_browsertest.cc",
        "patchSetId": 13
      },
      "lineNbr": 250,
      "author": {
        "id": 1115745
      },
      "writtenOn": "2017-10-05T13:34:09Z",
      "side": 1,
      "message": "Is there any platform-agnostic way we can test the browser frame color to ensure it\u0027s being respected?",
      "revId": "e41fe8268b6bd451f68f1ca4310b3a029609adc3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1ebafb32_addad402",
        "filename": "chrome/browser/ui/extensions/hosted_app_browsertest.cc",
        "patchSetId": 13
      },
      "lineNbr": 250,
      "author": {
        "id": 1002603
      },
      "writtenOn": "2017-10-06T04:36:00Z",
      "side": 1,
      "message": "Not really! I\u0027ll be putting a test for the ash implementation in https://chromium-review.googlesource.com/c/chromium/src/+/701857. I think this is the best point for a generic test. All platforms will use the color here. Whether they apply it correctly is going to have to be platform specific.",
      "parentUuid": "53f48faf_87159205",
      "revId": "e41fe8268b6bd451f68f1ca4310b3a029609adc3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "960a8128_43cc39ba",
        "filename": "chrome/browser/ui/extensions/hosted_app_browsertest.cc",
        "patchSetId": 13
      },
      "lineNbr": 250,
      "author": {
        "id": 1115745
      },
      "writtenOn": "2017-10-09T15:23:32Z",
      "side": 1,
      "message": "SG, thanks!",
      "parentUuid": "1ebafb32_addad402",
      "revId": "e41fe8268b6bd451f68f1ca4310b3a029609adc3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f27af8a2_62ddd0b2",
        "filename": "chrome/browser/ui/views/frame/browser_non_client_frame_view_ash.cc",
        "patchSetId": 13
      },
      "lineNbr": 33,
      "author": {
        "id": 1115745
      },
      "writtenOn": "2017-10-05T13:34:09Z",
      "side": 1,
      "message": "Needed?  (Same for below)",
      "revId": "e41fe8268b6bd451f68f1ca4310b3a029609adc3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "673fe95b_dbf31025",
        "filename": "chrome/browser/ui/views/frame/browser_non_client_frame_view_ash.cc",
        "patchSetId": 13
      },
      "lineNbr": 33,
      "author": {
        "id": 1002603
      },
      "writtenOn": "2017-10-06T04:36:00Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f27af8a2_62ddd0b2",
      "revId": "e41fe8268b6bd451f68f1ca4310b3a029609adc3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7c4733c9_160bfecd",
        "filename": "chrome/browser/ui/views/frame/browser_non_client_frame_view_ash.cc",
        "patchSetId": 13
      },
      "lineNbr": 112,
      "author": {
        "id": 1002092
      },
      "writtenOn": "2017-10-05T23:33:17Z",
      "side": 1,
      "message": "Is this opaqueness a cross-platform thing? Seems like it should be... Can we then encode that logic somewhere like AppThemeColorHandler::Parse()? Or just say `*error \u003d \"frame colors can\u0027t have an alpha component`",
      "revId": "e41fe8268b6bd451f68f1ca4310b3a029609adc3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "da45d739_75f319a7",
        "filename": "chrome/browser/ui/views/frame/browser_non_client_frame_view_ash.cc",
        "patchSetId": 13
      },
      "lineNbr": 112,
      "author": {
        "id": 1002603
      },
      "writtenOn": "2017-10-06T04:36:00Z",
      "side": 1,
      "message": "I was talking to ortuno@ and I think we should push this decision either here or in HostedAppBrowserController. Transparent colors are allowed by the spec and might be respected on some platforms someday (esp CrOS, Android) so we should store the site-provided color and then process it when it\u0027s used.",
      "parentUuid": "7c4733c9_160bfecd",
      "revId": "e41fe8268b6bd451f68f1ca4310b3a029609adc3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "54903bb4_e2050ef3",
        "filename": "chrome/common/extensions/manifest_handlers/app_theme_color_info.cc",
        "patchSetId": 13
      },
      "lineNbr": 23,
      "author": {
        "id": 1002092
      },
      "writtenOn": "2017-10-05T23:33:17Z",
      "side": 1,
      "message": "comment why DestructorAtExit is needed? I think it isn\u0027t -- neither ~ManifestData() nor ~AppThemeColorInfo() do anything interesting, so this is just queuing up a virtual destructor call during process exit for no reason.",
      "revId": "e41fe8268b6bd451f68f1ca4310b3a029609adc3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e0c3a04d_e76d54ec",
        "filename": "chrome/common/extensions/manifest_handlers/app_theme_color_info.cc",
        "patchSetId": 13
      },
      "lineNbr": 23,
      "author": {
        "id": 1002603
      },
      "writtenOn": "2017-10-06T04:36:00Z",
      "side": 1,
      "message": "Yeah, this was updated to maintain behavior when the option was made explicit in AppIconColorInfo. Also updating all of this there coz why not.",
      "parentUuid": "54903bb4_e2050ef3",
      "revId": "e41fe8268b6bd451f68f1ca4310b3a029609adc3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c4067d91_7bf06bfc",
        "filename": "chrome/common/extensions/manifest_handlers/app_theme_color_info.cc",
        "patchSetId": 13
      },
      "lineNbr": 29,
      "author": {
        "id": 1002092
      },
      "writtenOn": "2017-10-05T23:33:17Z",
      "side": 1,
      "message": "I\u0027d actually recommend something like\n\n  CR_DEFINE_STATIC_LOCAL(const AppThemeColorInfo, fallback, ());\n  ..\n  return info ? *info : fallback;\n\n\nthen you don\u0027t need base::LazyInstance and the global var",
      "revId": "e41fe8268b6bd451f68f1ca4310b3a029609adc3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "021fb8cb_aeecca33",
        "filename": "chrome/common/extensions/manifest_handlers/app_theme_color_info.cc",
        "patchSetId": 13
      },
      "lineNbr": 29,
      "author": {
        "id": 1002603
      },
      "writtenOn": "2017-10-06T04:36:00Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c4067d91_7bf06bfc",
      "revId": "e41fe8268b6bd451f68f1ca4310b3a029609adc3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "70bb9a5a_2a94845d",
        "filename": "chrome/common/extensions/manifest_handlers/app_theme_color_info.cc",
        "patchSetId": 13
      },
      "lineNbr": 52,
      "author": {
        "id": 1115745
      },
      "writtenOn": "2017-10-05T13:34:09Z",
      "side": 1,
      "message": "nit: initialize",
      "revId": "e41fe8268b6bd451f68f1ca4310b3a029609adc3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3377ec18_3371bdf9",
        "filename": "chrome/common/extensions/manifest_handlers/app_theme_color_info.cc",
        "patchSetId": 13
      },
      "lineNbr": 52,
      "author": {
        "id": 1002603
      },
      "writtenOn": "2017-10-06T04:36:00Z",
      "side": 1,
      "message": "Done, but:\n\nUgh. Okay. So apparently the C++ spec says that uint-\u003eint conversion is unspecified, so it\u0027s not _totally_ safe to do this. Do you think it\u0027s worth storing this as a String of the uint value and then parsing it back out?",
      "parentUuid": "70bb9a5a_2a94845d",
      "revId": "e41fe8268b6bd451f68f1ca4310b3a029609adc3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8f5ce817_9238c00a",
        "filename": "chrome/common/extensions/manifest_handlers/app_theme_color_info.cc",
        "patchSetId": 13
      },
      "lineNbr": 52,
      "author": {
        "id": 1115745
      },
      "writtenOn": "2017-10-09T15:23:32Z",
      "side": 1,
      "message": "The comment in Manifest states:\n  // This is a 64 bit integer because we need to represent an error state. The\n  // color itself should only be 32 bits long if the value is not\n  // kInvalidOrMissingColor and can be safely cast to SkColor if is valid.\n  // Set to kInvalidOrMissingColor if parsing failed or field is not\n  // present.\n\nSo, *if* the color is present, it must fit within 32 bits, and the only possible value outside that is kInvalidOrMissingColor.  I think this means that when converting to a WebApplicationInfo, we can do something like:\n\nif (manifest.theme_color !\u003d kInvalidOrMissingColor) {\n  // The color must fit within a 32-bit integer.\n  DCHECK_LE(static_cast\u003cuint64_t\u003e(manifest.theme_color),\n            static_cast\u003cuint32_t\u003e(-1));\n  web_application_info.theme_color \u003d manifest.theme_color;\n}\n\nNow, because of the subtlety alone, that really might not be worth it, and the string approach might make more sense.  But this would also give you extra verification.  I\u0027ll leave it up to you - I\u0027m fine either way.  However, if you want to go with the string approach, you\u0027ll want to make some changes, because I think it\u0027s unsafe right now - I think we convert to a WebApplicationInfo first, and in that conversion, you\u0027re just assigning to theme_color directly, which performs the potentially-unsafe cast of int64_t to uint32_t. [1]\n\n[1] https://chromium-review.googlesource.com/c/chromium/src/+/680677/15/chrome/browser/extensions/bookmark_app_helper.cc\n\nSide note: all of this makes me wonder what it would take to make content::Manifest::theme_color an optional\u003cSkColor\u003e, since that would solve all these issues.",
      "parentUuid": "3377ec18_3371bdf9",
      "revId": "e41fe8268b6bd451f68f1ca4310b3a029609adc3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "63a56b88_46281fb6",
        "filename": "chrome/common/extensions/manifest_handlers/app_theme_color_info.cc",
        "patchSetId": 13
      },
      "lineNbr": 52,
      "author": {
        "id": 1002603
      },
      "writtenOn": "2017-10-10T06:41:59Z",
      "side": 1,
      "message": "Threw a checked_cast in there. The string is still necessary because Extension Manifests don\u0027t support uints, only ints. Using a base::Optional in the web app manifest doesn\u0027t fix this either.",
      "parentUuid": "8f5ce817_9238c00a",
      "revId": "e41fe8268b6bd451f68f1ca4310b3a029609adc3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "58d680d1_b578b72f",
        "filename": "chrome/common/extensions/manifest_handlers/app_theme_color_info.cc",
        "patchSetId": 13
      },
      "lineNbr": 55,
      "author": {
        "id": 1115745
      },
      "writtenOn": "2017-10-05T13:34:09Z",
      "side": 1,
      "message": "nittiest of nits: prefer base::ASCIIToUTF16() to avoid some unnecessary checks.",
      "revId": "e41fe8268b6bd451f68f1ca4310b3a029609adc3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f7657ebd_0a051cf2",
        "filename": "chrome/common/extensions/manifest_handlers/app_theme_color_info.cc",
        "patchSetId": 13
      },
      "lineNbr": 55,
      "author": {
        "id": 1002603
      },
      "writtenOn": "2017-10-06T04:36:00Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "58d680d1_b578b72f",
      "revId": "e41fe8268b6bd451f68f1ca4310b3a029609adc3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "25b24aca_d299a571",
        "filename": "chrome/common/extensions/manifest_handlers/app_theme_color_info.cc",
        "patchSetId": 13
      },
      "lineNbr": 58,
      "author": {
        "id": 1115745
      },
      "writtenOn": "2017-10-05T13:34:09Z",
      "side": 1,
      "message": "If you wanted to ensure that hosted apps can\u0027t use this, I think you could do something like:\n\nif (!extension-\u003efrom_bookmark()) {\n  *error \u003d base::ASCIIToUTF16(\"Only bookmark apps are allowed to use app.theme_color\");\n  return false;\n}",
      "revId": "e41fe8268b6bd451f68f1ca4310b3a029609adc3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "07f76bbb_e046bae7",
        "filename": "chrome/common/extensions/manifest_handlers/app_theme_color_info.cc",
        "patchSetId": 13
      },
      "lineNbr": 58,
      "author": {
        "id": 1002603
      },
      "writtenOn": "2017-10-06T04:36:00Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "25b24aca_d299a571",
      "revId": "e41fe8268b6bd451f68f1ca4310b3a029609adc3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d32bcb0c_2ac2addf",
        "filename": "chrome/common/extensions/manifest_handlers/app_theme_color_manifest_unittest.cc",
        "patchSetId": 13
      },
      "lineNbr": 18,
      "author": {
        "id": 1115745
      },
      "writtenOn": "2017-10-05T13:34:09Z",
      "side": 1,
      "message": "Would be good to test some failing cases - especially if you choose to validate that only from_bookmark() apps can use it.",
      "revId": "e41fe8268b6bd451f68f1ca4310b3a029609adc3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "93e9243c_075c5b93",
        "filename": "components/sync/protocol/proto_visitors.h",
        "patchSetId": 13
      },
      "lineNbr": 126,
      "author": {
        "id": 1002186
      },
      "writtenOn": "2017-10-05T18:13:10Z",
      "side": 1,
      "message": "nit: could you have these visits be in the same order they\u0027re defined in the proto?",
      "range": {
        "startLine": 126,
        "startChar": 34,
        "endLine": 126,
        "endChar": 0
      },
      "revId": "e41fe8268b6bd451f68f1ca4310b3a029609adc3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "70b43f9f_47eb0ebd",
        "filename": "components/sync/protocol/proto_visitors.h",
        "patchSetId": 13
      },
      "lineNbr": 126,
      "author": {
        "id": 1002603
      },
      "writtenOn": "2017-10-06T04:36:00Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "93e9243c_075c5b93",
      "range": {
        "startLine": 126,
        "startChar": 34,
        "endLine": 126,
        "endChar": 0
      },
      "revId": "e41fe8268b6bd451f68f1ca4310b3a029609adc3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}