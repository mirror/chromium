{
  "comments": [
    {
      "key": {
        "uuid": "ae1c424a_3a398c44",
        "filename": "chrome/browser/vr/elements/vector_icon.cc",
        "patchSetId": 1
      },
      "lineNbr": 17,
      "author": {
        "id": 1115907
      },
      "writtenOn": "2017-09-15T16:12:12Z",
      "side": 1,
      "message": "normally we use a ScopedCanvas for this purpose",
      "range": {
        "startLine": 17,
        "startChar": 2,
        "endLine": 17,
        "endChar": 17
      },
      "revId": "88f528c9673cbd19f5d24cd447175284e3bbead6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "97343c56_cf9a2535",
        "filename": "chrome/browser/vr/elements/vector_icon.cc",
        "patchSetId": 1
      },
      "lineNbr": 23,
      "author": {
        "id": 1000887
      },
      "writtenOn": "2017-09-19T15:01:39Z",
      "side": 1,
      "message": "What does \"native resolution\" mean if it\u0027s not scaled by device scale factor?",
      "revId": "88f528c9673cbd19f5d24cd447175284e3bbead6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "badca6fe_d55da141",
        "filename": "chrome/browser/vr/elements/vector_icon.cc",
        "patchSetId": 1
      },
      "lineNbr": 27,
      "author": {
        "id": 1000887
      },
      "writtenOn": "2017-09-19T15:01:39Z",
      "side": 1,
      "message": "This seems less like you want to change the state of the canvas than that you want to be able to specify a scale for the icon. Why isn\u0027t the scale being passed as a parameter along the icon painting path instead?",
      "revId": "88f528c9673cbd19f5d24cd447175284e3bbead6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "89a8f2fb_91151f45",
        "filename": "chrome/browser/vr/elements/vector_icon.cc",
        "patchSetId": 1
      },
      "lineNbr": 27,
      "author": {
        "id": 1115907
      },
      "writtenOn": "2017-09-19T16:01:37Z",
      "side": 1,
      "message": "I don\u0027t want to expose the ability to override canvas scale in PaintVectorIcon because\n\na) there are already too many PaintVectorIcon variations\nb) there are no other known use cases for manually setting the scale\nc) depending on the canvas\u0027s scale matches the way gfx::Image picks the correct ImageRep",
      "parentUuid": "badca6fe_d55da141",
      "revId": "88f528c9673cbd19f5d24cd447175284e3bbead6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4e4cd7f6_4933ec06",
        "filename": "chrome/browser/vr/elements/vector_icon.cc",
        "patchSetId": 1
      },
      "lineNbr": 27,
      "author": {
        "id": 1000887
      },
      "writtenOn": "2017-09-19T17:24:34Z",
      "side": 1,
      "message": "My concern is that we\u0027re avoiding this parameter by adding a dependency on global state in canvas, which is more complex and I suspect will eventually be removed, forcing authors to turn to this back into a parameter.\n\nToo many variations is a concern, but this does seem implicitly to be another variation regardless? Adding a global canvas state-changer introduces potential API interaction with every other method on gfx::Canvas, when it can be limited in scope to just the PaintVectorIcon operation instead. That seems like a good tradeoff vs the method having lots of variations (maybe it should be a method with a different name).\n\nPoint b) suggests that it shouldn\u0027t be a Canvas state to me, since it is only for this operation, and doesn\u0027t need to be a state that is preserved across operations.",
      "parentUuid": "89a8f2fb_91151f45",
      "revId": "88f528c9673cbd19f5d24cd447175284e3bbead6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ba5f1ae5_7d9b6b93",
        "filename": "chrome/browser/vr/elements/vector_icon.cc",
        "patchSetId": 1
      },
      "lineNbr": 27,
      "author": {
        "id": 1115907
      },
      "writtenOn": "2017-09-20T20:03:54Z",
      "side": 1,
      "message": "\u003e My concern is that we\u0027re avoiding this parameter by adding a dependency on global state in canvas, which is more complex and I suspect will eventually be removed, forcing authors to turn to this back into a parameter.\n\nWhat dependency are we adding? PaintVectorIcon and gfx::Image already use the image_scale property of canvas.\n\n\u003e \n\u003e Too many variations is a concern, but this does seem implicitly to be another variation regardless? Adding a global canvas state-changer introduces potential API interaction with every other method on gfx::Canvas, when it can be limited in scope to just the PaintVectorIcon operation instead. That seems like a good tradeoff vs the method having lots of variations (maybe it should be a method with a different name).\n\nWhat kind of interactions are you envisioning? All the setter does to the sk_canvas is to change the scale (which other callsites already do, either directly or via UndoDeviceScaleFactor). The fact that UndoDeviceScaleFactor doesn\u0027t change the image_scale seems like an oversight.\n\n\u003e \n\u003e Point b) suggests that it shouldn\u0027t be a Canvas state to me, since it is only for this operation, and doesn\u0027t need to be a state that is preserved across operations.\n\nthere are lots of times we want to change canvas state temporarily, i.e. for one operation, and this is why we have save and restore.",
      "parentUuid": "4e4cd7f6_4933ec06",
      "revId": "88f528c9673cbd19f5d24cd447175284e3bbead6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c276f4d8_e624f97a",
        "filename": "chrome/browser/vr/elements/vector_icon.cc",
        "patchSetId": 1
      },
      "lineNbr": 27,
      "author": {
        "id": 1000887
      },
      "writtenOn": "2017-09-20T20:13:20Z",
      "side": 1,
      "message": "\u003e What dependency are we adding?\n\nA dependency on this function from image_scale, which will now have to be replaced/replicated if we move/remove image_scale. Basically it makes it harder to delete the gfx::Canvas class.\n\n\u003e What kind of interactions are you envisioning? \n\nOther people will call it, for other calls to gfx::Canvas, forcing future developers to do more work. Object state is adds complexity and maintainance burden. State on the stack is easy to reason about and change. I don\u0027t see any reason why this needs to be object state.\n\n\u003e there are lots of times we want to change canvas state temporarily, i.e. for one operation, and this is why we have save and restore.\n\nNot on gfx::Canvas, you\u0027re talking about PaintCanvas. And we don\u0027t change object state for things that can easily be an argument and won\u0027t commonly need to span multiple function calls. The object state is an optimization for avoiding passing/applying state over and over. Since this applies to only a single function call, it doesn\u0027t seem related here.",
      "parentUuid": "ba5f1ae5_7d9b6b93",
      "revId": "88f528c9673cbd19f5d24cd447175284e3bbead6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d09cd47a_bb408d60",
        "filename": "chrome/browser/vr/elements/vector_icon.cc",
        "patchSetId": 1
      },
      "lineNbr": 29,
      "author": {
        "id": 1115907
      },
      "writtenOn": "2017-09-15T16:12:12Z",
      "side": 1,
      "message": "nit: this should be unnecessary because of the Save/Restore calls",
      "range": {
        "startLine": 29,
        "startChar": 10,
        "endLine": 29,
        "endChar": 35
      },
      "revId": "88f528c9673cbd19f5d24cd447175284e3bbead6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f175befa_24012ff9",
        "filename": "ui/gfx/canvas.cc",
        "patchSetId": 1
      },
      "lineNbr": 147,
      "author": {
        "id": 1115907
      },
      "writtenOn": "2017-09-15T16:12:12Z",
      "side": 1,
      "message": "can we make Save/Restore work on image_scale_ as well?",
      "range": {
        "startLine": 147,
        "startChar": 13,
        "endLine": 147,
        "endChar": 17
      },
      "revId": "88f528c9673cbd19f5d24cd447175284e3bbead6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d349d46b_ae731065",
        "filename": "ui/gfx/canvas.cc",
        "patchSetId": 1
      },
      "lineNbr": 147,
      "author": {
        "id": 1117479
      },
      "writtenOn": "2017-09-15T17:22:39Z",
      "side": 1,
      "message": "Wouldn\u0027t that:\n- Fundamentally change existing behavior? I guess it\u0027s not a big deal because almost nothing changes image_scale_ currently?\n- Require a stack of saved values that stays in sync with the underlying saved canvas contexts?  Can be done, if you think it\u0027s warranted.",
      "parentUuid": "f175befa_24012ff9",
      "range": {
        "startLine": 147,
        "startChar": 13,
        "endLine": 147,
        "endChar": 17
      },
      "revId": "88f528c9673cbd19f5d24cd447175284e3bbead6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "438c34f6_3ca8002e",
        "filename": "ui/gfx/canvas.cc",
        "patchSetId": 1
      },
      "lineNbr": 147,
      "author": {
        "id": 1115907
      },
      "writtenOn": "2017-09-18T18:58:30Z",
      "side": 1,
      "message": "I don\u0027t think anything changes it currently, and the stack is still just about one line added in each function, right? I wouldn\u0027t assume it would handle canvas-\u003esk_canvas()-\u003esave() calls. We should get a ui/ owner to weigh in here.",
      "parentUuid": "d349d46b_ae731065",
      "range": {
        "startLine": 147,
        "startChar": 13,
        "endLine": 147,
        "endChar": 17
      },
      "revId": "88f528c9673cbd19f5d24cd447175284e3bbead6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2d398806_575cde91",
        "filename": "ui/gfx/canvas.cc",
        "patchSetId": 1
      },
      "lineNbr": 147,
      "author": {
        "id": 1000111
      },
      "writtenOn": "2017-09-19T05:50:07Z",
      "side": 1,
      "message": "Since we do expose gfx::Canvas::sk_canvas(), I guess it may be a reasonable expectation that using SkCanvas::save()/restore() should behave similarly to gfx::Canvas::Save()/Restore().\n\nOn the other hand, it also makes sense to require the users of gfx::Canvas to fallback to sk_canvas() only when the Canvas api is not sufficient. Thus, for Save()/Restore(), the users should not directly use SkCanvas api. With this reasoning, it\u0027d make sense to save/restore |image_scale_| in Save()/Restore(), I think. (I guess we would want to make sure it gets saved in all the Canvas::Save* functions?)\n\nI don\u0027t really feel strongly either way. danakj@ may have opinions here.",
      "parentUuid": "438c34f6_3ca8002e",
      "range": {
        "startLine": 147,
        "startChar": 13,
        "endLine": 147,
        "endChar": 17
      },
      "revId": "88f528c9673cbd19f5d24cd447175284e3bbead6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "781e4167_449a249c",
        "filename": "ui/gfx/canvas.cc",
        "patchSetId": 1
      },
      "lineNbr": 147,
      "author": {
        "id": 1000887
      },
      "writtenOn": "2017-09-19T15:01:39Z",
      "side": 1,
      "message": "The long-term goal is for gfx::Canvas to not exist, move functionality into other helpers that act-on instead of be-a canvas, or up into cc::PaintCanvas. ui\u0027s DSF stuff would probably not fit in cc::PaintCanvas tho fwiw.",
      "parentUuid": "2d398806_575cde91",
      "range": {
        "startLine": 147,
        "startChar": 13,
        "endLine": 147,
        "endChar": 17
      },
      "revId": "88f528c9673cbd19f5d24cd447175284e3bbead6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}