{
  "comments": [
    {
      "key": {
        "uuid": "33cd43ab_04c50112",
        "filename": "content/browser/BUILD.gn",
        "patchSetId": 7
      },
      "lineNbr": 2127,
      "author": {
        "id": 1221484
      },
      "writtenOn": "2017-12-18T23:30:04Z",
      "side": 1,
      "message": "Not sure if we should move ui/compositor/compositor_lock.* to a different, more common directory (ui/base?), it doesn\u0027t have any dependencies on the rest of ui/compositor, and makes us take this dependency in two places.",
      "range": {
        "startLine": 2127,
        "startChar": 12,
        "endLine": 2127,
        "endChar": 22
      },
      "revId": "42487a98d61baba7da09312f930cc0307e08d6d3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3180b9f3_13e9b965",
        "filename": "content/browser/BUILD.gn",
        "patchSetId": 7
      },
      "lineNbr": 2127,
      "author": {
        "id": 1148065
      },
      "writtenOn": "2017-12-19T00:57:25Z",
      "side": 1,
      "message": "If the size increase on Android is significant, we may want to move it into a common directory. Otherwise, I don\u0027t particularly mind.",
      "parentUuid": "33cd43ab_04c50112",
      "range": {
        "startLine": 2127,
        "startChar": 12,
        "endLine": 2127,
        "endChar": 22
      },
      "revId": "42487a98d61baba7da09312f930cc0307e08d6d3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "375db8d0_c943ffdd",
        "filename": "content/browser/renderer_host/compositor_impl_android.cc",
        "patchSetId": 7
      },
      "lineNbr": 955,
      "author": {
        "id": 1221484
      },
      "writtenOn": "2017-12-18T23:30:04Z",
      "side": 1,
      "message": "Ported/simplified from ui/compositor.cc",
      "range": {
        "startLine": 955,
        "startChar": 52,
        "endLine": 955,
        "endChar": 69
      },
      "revId": "42487a98d61baba7da09312f930cc0307e08d6d3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "61e462f0_24bd0f42",
        "filename": "content/browser/renderer_host/compositor_impl_android.cc",
        "patchSetId": 7
      },
      "lineNbr": 955,
      "author": {
        "id": 1002358
      },
      "writtenOn": "2017-12-18T23:58:39Z",
      "side": 1,
      "message": "I\u0027d sort-of-vaguely prefer this to be encapsulated in some sort of class that manages the call to SetDeferCommits, like ...\nclass ui::CompositorLockManager {\n  LayerTreeHost* host_ // weak owned by owner\n  std::vector\u003cCompositorLock*\u003e active_locks_;\n}\nto avoid the copy-pasting (and also cause it may help to remove more functionality from being in the body of ui::Compositor).\n\nBut if you\u0027ve already ruminated on that and think it doesn\u0027t help or overly-complicates things, that\u0027s fine.",
      "parentUuid": "375db8d0_c943ffdd",
      "range": {
        "startLine": 955,
        "startChar": 52,
        "endLine": 955,
        "endChar": 69
      },
      "revId": "42487a98d61baba7da09312f930cc0307e08d6d3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8c59a51a_2c3d5cb1",
        "filename": "content/browser/renderer_host/compositor_impl_android.cc",
        "patchSetId": 7
      },
      "lineNbr": 955,
      "author": {
        "id": 1148065
      },
      "writtenOn": "2017-12-19T00:57:25Z",
      "side": 1,
      "message": "It feels like something useful to be in cc/trees maybe - maybe together with where CompositorLock might end up.",
      "parentUuid": "61e462f0_24bd0f42",
      "range": {
        "startLine": 955,
        "startChar": 52,
        "endLine": 955,
        "endChar": 69
      },
      "revId": "42487a98d61baba7da09312f930cc0307e08d6d3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1a70f099_e3ccd9c3",
        "filename": "content/browser/renderer_host/compositor_impl_android.cc",
        "patchSetId": 7
      },
      "lineNbr": 955,
      "author": {
        "id": 1221484
      },
      "writtenOn": "2017-12-20T19:32:19Z",
      "side": 1,
      "message": "Done in a separate CL (https://chromium-review.googlesource.com/c/chromium/src/+/834882)",
      "parentUuid": "8c59a51a_2c3d5cb1",
      "range": {
        "startLine": 955,
        "startChar": 52,
        "endLine": 955,
        "endChar": 69
      },
      "revId": "42487a98d61baba7da09312f930cc0307e08d6d3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "48ee8875_4fbb36d7",
        "filename": "content/browser/renderer_host/compositor_impl_android.cc",
        "patchSetId": 7
      },
      "lineNbr": 967,
      "author": {
        "id": 1129011
      },
      "writtenOn": "2017-12-18T23:58:37Z",
      "side": 1,
      "message": "This looks fragile - what prevents caller of GetCompositorLock() from destroying CompositorLock too early?",
      "range": {
        "startLine": 967,
        "startChar": 16,
        "endLine": 967,
        "endChar": 25
      },
      "revId": "42487a98d61baba7da09312f930cc0307e08d6d3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a287f3c4_1ba4debb",
        "filename": "content/browser/renderer_host/compositor_impl_android.cc",
        "patchSetId": 7
      },
      "lineNbr": 967,
      "author": {
        "id": 1148065
      },
      "writtenOn": "2017-12-19T00:57:25Z",
      "side": 1,
      "message": "CompositorLock is meant to be destroyed by the caller whenever whatever condition it was waiting for is satisfied - its destructor is what calls RemoveCompositorLock.\nSo I don\u0027t think there\u0027s such a thing as \"too early\"?",
      "parentUuid": "48ee8875_4fbb36d7",
      "range": {
        "startLine": 967,
        "startChar": 16,
        "endLine": 967,
        "endChar": 25
      },
      "revId": "42487a98d61baba7da09312f930cc0307e08d6d3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5f082a5d_18b3a709",
        "filename": "content/browser/renderer_host/compositor_impl_android.cc",
        "patchSetId": 7
      },
      "lineNbr": 967,
      "author": {
        "id": 1221484
      },
      "writtenOn": "2017-12-20T19:32:19Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "a287f3c4_1ba4debb",
      "range": {
        "startLine": 967,
        "startChar": 16,
        "endLine": 967,
        "endChar": 25
      },
      "revId": "42487a98d61baba7da09312f930cc0307e08d6d3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8c826838_e11395c3",
        "filename": "content/browser/renderer_host/compositor_impl_android.cc",
        "patchSetId": 7
      },
      "lineNbr": 973,
      "author": {
        "id": 1148065
      },
      "writtenOn": "2017-12-19T00:57:25Z",
      "side": 1,
      "message": "just FYI, this means clients can extend the lock indefinitely, even for clients that expected to lock only for a certain duration. We explicitly wanted to prevent that on Aura, to avoid various things stomping on each other and extending the lock indefinitely (see ui::Compositor::allow_locks_to_extend_timeout_). But it\u0027s probably ok on Android.",
      "revId": "42487a98d61baba7da09312f930cc0307e08d6d3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "53e8b4f9_d37fc66d",
        "filename": "content/browser/renderer_host/compositor_impl_android.cc",
        "patchSetId": 7
      },
      "lineNbr": 973,
      "author": {
        "id": 1221484
      },
      "writtenOn": "2017-12-20T19:32:19Z",
      "side": 1,
      "message": "Refactored to a helper class and made it so Android never extends timeouts (just to be safe).",
      "parentUuid": "8c826838_e11395c3",
      "revId": "42487a98d61baba7da09312f930cc0307e08d6d3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a82d887a_d4093a67",
        "filename": "ui/android/delegated_frame_host_android.h",
        "patchSetId": 7
      },
      "lineNbr": 129,
      "author": {
        "id": 1002358
      },
      "writtenOn": "2017-12-18T23:58:39Z",
      "side": 1,
      "message": "Nit: Add a comment saying what the lock is for (and maybe use a name like compositor_frame_after_attach_lock_), for future archeology.",
      "revId": "42487a98d61baba7da09312f930cc0307e08d6d3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a573fa17_1f928008",
        "filename": "ui/android/delegated_frame_host_android.h",
        "patchSetId": 7
      },
      "lineNbr": 129,
      "author": {
        "id": 1221484
      },
      "writtenOn": "2017-12-20T19:32:19Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a82d887a_d4093a67",
      "revId": "42487a98d61baba7da09312f930cc0307e08d6d3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}