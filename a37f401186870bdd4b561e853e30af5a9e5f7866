{
  "comments": [
    {
      "key": {
        "uuid": "909b34b7_51fbd667",
        "filename": "content/browser/appcache/appcache_update_url_loader_request.cc",
        "patchSetId": 5
      },
      "lineNbr": 28,
      "author": {
        "id": 1115965
      },
      "writtenOn": "2017-08-03T20:53:54Z",
      "side": 1,
      "message": "These headers should be added to the set of headers that would normally be sent by the stack, i just want to make sure this is doing that.",
      "revId": "a37f401186870bdd4b561e853e30af5a9e5f7866",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "567ee6c4_850beecd",
        "filename": "content/browser/appcache/appcache_update_url_loader_request.cc",
        "patchSetId": 5
      },
      "lineNbr": 28,
      "author": {
        "id": 1000982
      },
      "writtenOn": "2017-08-03T22:07:57Z",
      "side": 1,
      "message": "I think so",
      "parentUuid": "909b34b7_51fbd667",
      "revId": "a37f401186870bdd4b561e853e30af5a9e5f7866",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7ddb4da4_8ae40cbf",
        "filename": "content/browser/appcache/appcache_update_url_loader_request.cc",
        "patchSetId": 5
      },
      "lineNbr": 35,
      "author": {
        "id": 1115965
      },
      "writtenOn": "2017-08-03T20:53:54Z",
      "side": 1,
      "message": "we probably don\u0027t need this method on the interface since the URLFetcher class cancels redirection. i think we could safely change all of the existing callsites over to use GetURL()",
      "revId": "a37f401186870bdd4b561e853e30af5a9e5f7866",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b7b51e1c_9c00d850",
        "filename": "content/browser/appcache/appcache_update_url_loader_request.cc",
        "patchSetId": 5
      },
      "lineNbr": 35,
      "author": {
        "id": 1000982
      },
      "writtenOn": "2017-08-03T22:07:07Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7ddb4da4_8ae40cbf",
      "revId": "a37f401186870bdd4b561e853e30af5a9e5f7866",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e56d6bcf_7929129a",
        "filename": "content/browser/appcache/appcache_update_url_loader_request.cc",
        "patchSetId": 5
      },
      "lineNbr": 79,
      "author": {
        "id": 1002532
      },
      "writtenOn": "2017-08-03T17:52:07Z",
      "side": 1,
      "message": "if we\u0027re using mojom::URLLoader, then the net::URLRequestContext can be in a different process and wouldn\u0027t be reachable. This only works now because we\u0027re still in a transition.\n\nThis should either be calculated in a different way in the browser, or this logic can moved to the implementation classes and we\u0027d have to do something different that doesn\u0027t depend on net:: for the mojo case",
      "revId": "a37f401186870bdd4b561e853e30af5a9e5f7866",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "814ebf29_aeb146cf",
        "filename": "content/browser/appcache/appcache_update_url_loader_request.cc",
        "patchSetId": 5
      },
      "lineNbr": 79,
      "author": {
        "id": 1000982
      },
      "writtenOn": "2017-08-03T20:38:29Z",
      "side": 1,
      "message": "Sure thing. Will add a TODO here.",
      "parentUuid": "e56d6bcf_7929129a",
      "revId": "a37f401186870bdd4b561e853e30af5a9e5f7866",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cf8ed2a1_0b3ae2db",
        "filename": "content/browser/appcache/appcache_update_url_loader_request.cc",
        "patchSetId": 5
      },
      "lineNbr": 79,
      "author": {
        "id": 1115965
      },
      "writtenOn": "2017-08-03T20:53:54Z",
      "side": 1,
      "message": "I think the only reason we need the URLRequestContext is to determine if the http stack is configured to \u0027ignore_certificate_errors\u0027 in net::HttpNetworkSession::Params. This could be a virtual method on the UpdateRequestBase class, return false for now with a TODO.",
      "parentUuid": "e56d6bcf_7929129a",
      "revId": "a37f401186870bdd4b561e853e30af5a9e5f7866",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f771e391_2c6a7c40",
        "filename": "content/browser/appcache/appcache_update_url_loader_request.cc",
        "patchSetId": 5
      },
      "lineNbr": 79,
      "author": {
        "id": 1000982
      },
      "writtenOn": "2017-08-03T22:07:07Z",
      "side": 1,
      "message": "Thanks. Added a method ::ShouldIgnoreCertificateErrors() to the base class. The URLRequest\noverride queries the info from the context. The loader implementation returns false. Added a TODO there.",
      "parentUuid": "cf8ed2a1_0b3ae2db",
      "revId": "a37f401186870bdd4b561e853e30af5a9e5f7866",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8a3dbf1f_a4fe7e82",
        "filename": "content/browser/appcache/appcache_update_url_loader_request.cc",
        "patchSetId": 5
      },
      "lineNbr": 134,
      "author": {
        "id": 1115965
      },
      "writtenOn": "2017-08-03T20:53:54Z",
      "side": 1,
      "message": "But 500 response codes are net::OK too? I think if this loaderClient method is called, we must be net::OK, otherwise we wouldn\u0027t be here.",
      "revId": "a37f401186870bdd4b561e853e30af5a9e5f7866",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c4c70550_f94b354b",
        "filename": "content/browser/appcache/appcache_update_url_loader_request.cc",
        "patchSetId": 5
      },
      "lineNbr": 134,
      "author": {
        "id": 1000982
      },
      "writtenOn": "2017-08-03T22:07:07Z",
      "side": 1,
      "message": "This says otherwise? https://en.wikipedia.org/wiki/List_of_HTTP_status_codes#5xx_Server_errors\n\nAdditionally I have seen cases where OnResponseStarted gets called for errors.",
      "parentUuid": "8a3dbf1f_a4fe7e82",
      "revId": "a37f401186870bdd4b561e853e30af5a9e5f7866",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cde3f777_09f2583c",
        "filename": "content/browser/appcache/appcache_update_url_loader_request.cc",
        "patchSetId": 5
      },
      "lineNbr": 134,
      "author": {
        "id": 1115965
      },
      "writtenOn": "2017-08-03T22:55:14Z",
      "side": 1,
      "message": "net::ERR_FAILED in a net lib error code, it means the network library failed in some way (dns or socket error. malformed resonse head, etc). A 500 response from a server is differnt, the network library successfully sent the request and received a well formed response which happens to have a status code of 500.\n\nI think there\u0027s retry logic in the URLFetcher class the relies on this distinction.\n\n\u003e Additionally I have seen cases where OnResponseStarted gets called for errors.\n\nIt\u0027s just part of net::URLRequest contract to call OnResponseStarted like that, otherwise there is no way for the error to be reported to it\u0027s Delegate. The URLLoader api is different.",
      "parentUuid": "c4c70550_f94b354b",
      "revId": "a37f401186870bdd4b561e853e30af5a9e5f7866",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3618b045_d5c0e156",
        "filename": "content/browser/appcache/appcache_update_url_loader_request.cc",
        "patchSetId": 5
      },
      "lineNbr": 190,
      "author": {
        "id": 1115965
      },
      "writtenOn": "2017-08-03T20:53:54Z",
      "side": 1,
      "message": "This is a awkward?\n\nMaybe OnResponseCompleted can set result_ to NETWORK_ERROR if status.error_code !\u003d OK. Or maybe result_ can be pessimistically initialized to NETWORK_ERROR, and then optimistically set to OK in OnResponseStarted.",
      "revId": "a37f401186870bdd4b561e853e30af5a9e5f7866",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4034a79c_45aea422",
        "filename": "content/browser/appcache/appcache_update_url_loader_request.cc",
        "patchSetId": 5
      },
      "lineNbr": 190,
      "author": {
        "id": 1000982
      },
      "writtenOn": "2017-08-03T22:07:07Z",
      "side": 1,
      "message": "OnResponseCompleted sets result to NETWORK_ERROR if the error code is a failure.",
      "parentUuid": "3618b045_d5c0e156",
      "revId": "a37f401186870bdd4b561e853e30af5a9e5f7866",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7767dccd_e6813b4f",
        "filename": "content/browser/appcache/appcache_update_url_loader_request.cc",
        "patchSetId": 5
      },
      "lineNbr": 244,
      "author": {
        "id": 1002532
      },
      "writtenOn": "2017-08-03T17:52:07Z",
      "side": 1,
      "message": "what if this reads more than buffer_size_? we\u0027d lose data right?\n\nThere are also extra buffer copies here.\n\nBoth of these issues can be solved by bringing back the mojo-\u003enet adapters from https://codereview.chromium.org/1873463003/diff/40001/mojo/services/network/net_adapters.h",
      "revId": "a37f401186870bdd4b561e853e30af5a9e5f7866",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e139cddc_9f9dbd04",
        "filename": "content/browser/appcache/appcache_update_url_loader_request.cc",
        "patchSetId": 5
      },
      "lineNbr": 244,
      "author": {
        "id": 1000982
      },
      "writtenOn": "2017-08-03T18:36:18Z",
      "side": 1,
      "message": "We wouldn\u0027t be losing data as the OnDataAvailable function only consumes what it can.",
      "parentUuid": "7767dccd_e6813b4f",
      "revId": "a37f401186870bdd4b561e853e30af5a9e5f7866",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3a80ae15_a763f86f",
        "filename": "content/browser/appcache/appcache_update_url_loader_request.cc",
        "patchSetId": 5
      },
      "lineNbr": 244,
      "author": {
        "id": 1000982
      },
      "writtenOn": "2017-08-03T20:38:29Z",
      "side": 1,
      "message": "Brought back the MojoToNetPendingBuffer and MojoToNetIOBuffer classes to avoid the copy",
      "parentUuid": "e139cddc_9f9dbd04",
      "revId": "a37f401186870bdd4b561e853e30af5a9e5f7866",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1bc31c56_c200116a",
        "filename": "content/browser/url_loader_factory_getter.cc",
        "patchSetId": 5
      },
      "lineNbr": 62,
      "author": {
        "id": 1002532
      },
      "writtenOn": "2017-08-03T17:52:07Z",
      "side": 1,
      "message": "I think we can avoid making this class know about consumers who want to use it. i.e. ChromeAppCacheService can have an initialize method that StoragePartition calls to pass this in. Similar to how the service worker code does it:\nhttps://cs.chromium.org/chromium/src/content/browser/storage_partition_impl.cc?rcl\u003d891e65c5fcdd9e9639a60ee36a53bdbb4121319c\u0026l\u003d524",
      "revId": "a37f401186870bdd4b561e853e30af5a9e5f7866",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "06f8f054_2d49712f",
        "filename": "content/browser/url_loader_factory_getter.cc",
        "patchSetId": 5
      },
      "lineNbr": 62,
      "author": {
        "id": 1000982
      },
      "writtenOn": "2017-08-03T18:36:18Z",
      "side": 1,
      "message": "Thanks. Will do that.",
      "parentUuid": "1bc31c56_c200116a",
      "revId": "a37f401186870bdd4b561e853e30af5a9e5f7866",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2ec55ee5_b3a69cf9",
        "filename": "content/browser/url_loader_factory_getter.cc",
        "patchSetId": 5
      },
      "lineNbr": 62,
      "author": {
        "id": 1000982
      },
      "writtenOn": "2017-08-03T20:38:29Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "06f8f054_2d49712f",
      "revId": "a37f401186870bdd4b561e853e30af5a9e5f7866",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}