{
  "comments": [
    {
      "key": {
        "uuid": "e4f0d641_fa83db3a",
        "filename": "third_party/WebKit/Source/platform/bindings/CallbackFunctionBase.h",
        "patchSetId": 3
      },
      "lineNbr": 65,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2017-11-24T09:07:47Z",
      "side": 1,
      "message": "Hmm, I\u0027d prefer not adding a custom version (to avoid increasing implicit behaviors around Oilpan handles).",
      "revId": "ea2b53e66cd40e6dbf1504d4ca710320f2fcdb2b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f5d727dd_fe92ce82",
        "filename": "third_party/WebKit/Source/platform/bindings/CallbackFunctionBase.h",
        "patchSetId": 3
      },
      "lineNbr": 65,
      "author": {
        "id": 1002507
      },
      "writtenOn": "2017-11-24T09:20:12Z",
      "side": 1,
      "message": "(I first tried to make partial specialization of blink::Persistent and blink::WrapPersistent, and ... I gave it up.)\n\nNote that blink::Persistent\u003cT\u003e is expected to work without a complete definition of T (e.g. KeepSelfAlive\u003cT\u003e uses Persistent\u003cT\u003e while T is not yet defined).  However, if we\u0027d like to partially specialize Persistent\u003cT\u003e where T inherits from CallbackFunctionBase, we need a complete definition of T.  :(\n\nAnother note that blink::WrapPersistent\u003cT\u003e is a template function and C++ does NOT support partial specialization of template functions.  :(\n\nHaving said that, there is a way.\n\n1) Make WrapPersistent\u003cT\u003e uses a trait class.\n2) Partially specialize the trait class for T that inherits from CallbackFunctionBase.\n\nIt\u0027s possible to partially specialize WrapPersistent\u003cT\u003e using a trampoline trait, however, it\u0027s hard to partially specialize Persistent\u003cT\u003e because of KeepSelfAlive\u003cT\u003e, etc.  Unless T gets defined, we cannot tell if T inherits from CallbackFunctionBase.\n\nWhat approach do you like?",
      "parentUuid": "e4f0d641_fa83db3a",
      "revId": "ea2b53e66cd40e6dbf1504d4ca710320f2fcdb2b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "40873fb8_dc4a38d1",
        "filename": "third_party/WebKit/Source/platform/bindings/CallbackFunctionBase.h",
        "patchSetId": 3
      },
      "lineNbr": 65,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2017-11-25T01:36:42Z",
      "side": 1,
      "message": "Sorry, I guess I\u0027m not understanding the problem from the beginning...\n\nWhy can\u0027t we we simply use WrapPersistent(callback)? Since CallbackFunctionBase is GarbageCollected, WrapPersistent() will just work...?",
      "parentUuid": "f5d727dd_fe92ce82",
      "revId": "ea2b53e66cd40e6dbf1504d4ca710320f2fcdb2b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "15558173_48d2befc",
        "filename": "third_party/WebKit/Source/platform/bindings/CallbackFunctionBase.h",
        "patchSetId": 3
      },
      "lineNbr": 65,
      "author": {
        "id": 1002507
      },
      "writtenOn": "2017-11-27T04:08:21Z",
      "side": 1,
      "message": "blink::WrapPersistent uses blink::Persistent and it makes an Oilpan object alive.  We need to make an underlying v8::Function inside a CallbackFunctionBase alive.  blink::Persistent does not magically make V8 objects alive (blink::Persistent !\u003d v8::Persistent).\n\nWe can better merge wrapper-tracing into Oilpan and make blink::Persistent automagically invokes wrapper-tracing, however, it\u0027s not happened yet.\n\nThus, we need a custom version of blink::WrapPersistent for callback functions.\n\nWe had a discussion about this and agreed to have a custom version of Persistent/WrapPersistent.  It\u0027s months ago though.",
      "parentUuid": "40873fb8_dc4a38d1",
      "revId": "ea2b53e66cd40e6dbf1504d4ca710320f2fcdb2b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cbe70f47_97dfa237",
        "filename": "third_party/WebKit/Source/platform/bindings/CallbackFunctionBase.h",
        "patchSetId": 3
      },
      "lineNbr": 65,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2017-11-27T05:44:24Z",
      "side": 1,
      "message": "Can we create a GCed object that holds v8::Persistent\u003cv8::Function\u003e?\n\nclass V8CallbackFunctionHolder : public GarbageCollected\u003c\u003e {\n  v8::Persistent\u003cv8::Function\u003e function_;\n}\n\nThen we can pass in the holder pointer to blink::WrapPersistent.",
      "parentUuid": "15558173_48d2befc",
      "revId": "ea2b53e66cd40e6dbf1504d4ca710320f2fcdb2b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "aaae1eb5_e111841d",
        "filename": "third_party/WebKit/Source/platform/bindings/CallbackFunctionBase.h",
        "patchSetId": 3
      },
      "lineNbr": 65,
      "author": {
        "id": 1002507
      },
      "writtenOn": "2017-11-27T06:21:52Z",
      "side": 1,
      "message": "That\u0027s mostly what this patch does, I think?\n\nNote that WrapPersistent is used with PostTask.  For example, given that we have\n\n    func_ptr \u003d void (*func_ptr)(CallbackFunctionBase* callback);\n\nand we\u0027d like to bind |func_ptr| with |callback_function_base| of type CallbackFunctionBase*.  Your idea sounds like one of the followings.\n\n    V8CallbackFunctionHolder holder(callback_function_base);\n    // |holder| makes the underlying v8::Function alive, but\n    // it does NOT make |callback_function_base| alive.\n    // Someone needs |callback_function_base| alive.\n\n    Bind(func_ptr, WrapPersistent(holder));  // NG\n    // |func_ptr| takes a CallbackFunctionBase* as the argument.\n\n    Bind(func_ptr,\n         WrapPersistent(callback_function_base),\n         WrapPersistent(holder));  // NG\n    // |func_ptr| does NOT take two arguments.  It only takes\n    // a CallbackFunctionBase*.\n\n    Bind(func_ptr,\n         WrapPersistent(callback_function_base));\n    persistent_holder \u003d WrapPersistent(holder);  // NG\n    // No one holds |persistent_holder|.\n\nThis patch combines the above |holder| and |callback_function_base| into one thing: CallbackFunctionBase::Persistent, which makes both of CallbackFunctionBase and v8::Function alive, and also which behaves as if CallbackFunctionBase* as same as blink::Persistent behaves so.\n\n    auto p \u003d WrapPersistentCallbackFunction(callback_function_base)\n    Bind(func_ptr, p);\n\nThis works because |p| makes both of |callback_function_base| and its underlying v8::Function alive, plus |p| behaves as if |callback_function_base| so that |func_ptr| can take |p| as the argument.",
      "parentUuid": "cbe70f47_97dfa237",
      "revId": "ea2b53e66cd40e6dbf1504d4ca710320f2fcdb2b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5d85f4d2_1c1447b1",
        "filename": "third_party/WebKit/Source/platform/bindings/CallbackFunctionBase.h",
        "patchSetId": 3
      },
      "lineNbr": 65,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2017-11-27T09:07:59Z",
      "side": 1,
      "message": "Hmm.\n\nWhy do we need to pass T* to Persistent\u0027s constructor? If we pass callback_function_, then Persistent won\u0027t need T. Then can we remove the specialization?\n\nI\u0027m assuming that the following code will work.\n\n  V8CallbackFunctionHolder* holder \u003d new V8CallbackFunctionHolder(callback_function_);\n  Bind(func_ptr, WrapPersistent(holder));",
      "parentUuid": "aaae1eb5_e111841d",
      "revId": "ea2b53e66cd40e6dbf1504d4ca710320f2fcdb2b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7cda63d7_0792388a",
        "filename": "third_party/WebKit/Source/platform/bindings/CallbackFunctionBase.h",
        "patchSetId": 3
      },
      "lineNbr": 65,
      "author": {
        "id": 1002507
      },
      "writtenOn": "2017-11-27T09:19:53Z",
      "side": 1,
      "message": "I simplified things in the previous reply.  |func_ptr| actually takes |FooCallback*| as the argument type.\n\nMore realistic example is:\n\n    // IDL\n    callback FooCallback \u003d void (DOMString);\n\n    // C++\n    auto func_ptr \u003d \u0026FooCallback::Invoke;\n    FooCallback* callback \u003d ...;\n    Bind(func_ptr, WrapPersistentCallbackFunction(callback), String(\"foo\"));\n\nwhere |func_ptr| is actually a reference to a member function of FooCallback, so the first argument must be a pointer to FooCallback as |this| pointer.\n\nIt\u0027s the same question as \"Why do we need to pass T* to blink::Persistent\u003cT\u003e?\".",
      "parentUuid": "5d85f4d2_1c1447b1",
      "revId": "ea2b53e66cd40e6dbf1504d4ca710320f2fcdb2b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0938f716_964d8de2",
        "filename": "third_party/WebKit/Source/platform/bindings/CallbackFunctionBase.h",
        "patchSetId": 3
      },
      "lineNbr": 90,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2017-11-27T05:44:24Z",
      "side": 1,
      "message": "Why does this need to be Copyable? It\u0027s discouraged...",
      "revId": "ea2b53e66cd40e6dbf1504d4ca710320f2fcdb2b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d1bcf985_b9fa9ed4",
        "filename": "third_party/WebKit/Source/platform/bindings/CallbackFunctionBase.h",
        "patchSetId": 3
      },
      "lineNbr": 90,
      "author": {
        "id": 1002507
      },
      "writtenOn": "2017-11-27T06:21:52Z",
      "side": 1,
      "message": "The arguments of Bind need to be copyable or movable.  I was lazy to implement this class as a movable type.  If it matters, I\u0027m happy to make this a movable (and non-copyable) type.",
      "parentUuid": "0938f716_964d8de2",
      "revId": "ea2b53e66cd40e6dbf1504d4ca710320f2fcdb2b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}