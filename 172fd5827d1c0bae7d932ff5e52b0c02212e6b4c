{
  "comments": [
    {
      "key": {
        "uuid": "3d1405ed_fa0a5d36",
        "filename": "content/network/data_pipe_element_reader.cc",
        "patchSetId": 5
      },
      "lineNbr": 70,
      "author": {
        "id": 1001809
      },
      "writtenOn": "2017-12-14T20:40:35Z",
      "side": 1,
      "message": "Reasonable to ask that the interface contract implied by the above be added to comments in upload_element_reader.h?",
      "range": {
        "startLine": 70,
        "startChar": 10,
        "endLine": 70,
        "endChar": 14
      },
      "revId": "172fd5827d1c0bae7d932ff5e52b0c02212e6b4c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1472ad38_60834d85",
        "filename": "content/network/data_pipe_element_reader.cc",
        "patchSetId": 5
      },
      "lineNbr": 70,
      "author": {
        "id": 1115968
      },
      "writtenOn": "2017-12-14T21:05:11Z",
      "side": 1,
      "message": "Sure.",
      "parentUuid": "3d1405ed_fa0a5d36",
      "range": {
        "startLine": 70,
        "startChar": 10,
        "endLine": 70,
        "endChar": 14
      },
      "revId": "172fd5827d1c0bae7d932ff5e52b0c02212e6b4c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7dde9492_12679b3d",
        "filename": "content/network/data_pipe_element_reader.cc",
        "patchSetId": 5
      },
      "lineNbr": 89,
      "author": {
        "id": 1001809
      },
      "writtenOn": "2017-12-14T20:40:35Z",
      "side": 1,
      "message": "Up to you, since it\u0027s functionally redundant with the use of buf_.get() below, but if I think of DCHECKs at the beginning of functions as assertions around the interface contract for the function, a DCHECK(buf_) would also be appropriate.",
      "range": {
        "startLine": 89,
        "startChar": 9,
        "endLine": 89,
        "endChar": 23
      },
      "revId": "172fd5827d1c0bae7d932ff5e52b0c02212e6b4c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "346f9fe1_98c45740",
        "filename": "content/network/data_pipe_element_reader.cc",
        "patchSetId": 5
      },
      "lineNbr": 89,
      "author": {
        "id": 1115968
      },
      "writtenOn": "2017-12-14T21:05:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7dde9492_12679b3d",
      "range": {
        "startLine": 89,
        "startChar": 9,
        "endLine": 89,
        "endChar": 23
      },
      "revId": "172fd5827d1c0bae7d932ff5e52b0c02212e6b4c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ee69bbb2_39c69324",
        "filename": "content/network/data_pipe_element_reader.cc",
        "patchSetId": 5
      },
      "lineNbr": 94,
      "author": {
        "id": 1001809
      },
      "writtenOn": "2017-12-14T20:40:35Z",
      "side": 1,
      "message": "Under what circumstances can this not return a valid read result?  There was a DCHECK in the old code that this never returned an error (including ERR_IO_PENDING); what\u0027s the pathway through which you think it might?  It doesn\u0027t seem like either of the bugs you call out in the description would do it.\n\n(Related to the above, I\u0027m trying to figure out when read_result would be ERR_IO_PENDING below.)",
      "range": {
        "startLine": 94,
        "startChar": 18,
        "endLine": 94,
        "endChar": 30
      },
      "revId": "172fd5827d1c0bae7d932ff5e52b0c02212e6b4c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f09cd6a5_2f7b686c",
        "filename": "content/network/data_pipe_element_reader.cc",
        "patchSetId": 5
      },
      "lineNbr": 94,
      "author": {
        "id": 1115968
      },
      "writtenOn": "2017-12-14T21:05:11Z",
      "side": 1,
      "message": "I don\u0027t know.  The docs are found across a bunch of Mojo files, and I am unable to determine if there\u0027s a case where this can happen, for the docs.  This is closer to the pattern used by URLLoader itself (Though not quite identical, both allow ERR_IO_PENDING and errors in the OnHandleReadable case), and my feeling is we should be consistent.",
      "parentUuid": "ee69bbb2_39c69324",
      "range": {
        "startLine": 94,
        "startChar": 18,
        "endLine": 94,
        "endChar": 30
      },
      "revId": "172fd5827d1c0bae7d932ff5e52b0c02212e6b4c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dc8d2eb7_f66e051a",
        "filename": "content/network/data_pipe_element_reader.cc",
        "patchSetId": 5
      },
      "lineNbr": 94,
      "author": {
        "id": 1001809
      },
      "writtenOn": "2017-12-15T17:08:39Z",
      "side": 1,
      "message": "Any objection to my raising this with Yuzhu and see if I can get the docs on this issue clarified?  (I don\u0027t really think you\u0027d have any objection, just want to make sure you don\u0027t want to do it.)\n\nAgreed on consistency.",
      "parentUuid": "f09cd6a5_2f7b686c",
      "range": {
        "startLine": 94,
        "startChar": 18,
        "endLine": 94,
        "endChar": 30
      },
      "revId": "172fd5827d1c0bae7d932ff5e52b0c02212e6b4c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "16541ac7_716cb6c4",
        "filename": "content/network/data_pipe_element_reader.cc",
        "patchSetId": 5
      },
      "lineNbr": 94,
      "author": {
        "id": 1115968
      },
      "writtenOn": "2017-12-15T17:45:15Z",
      "side": 1,
      "message": "I\u0027m fully supportive of that.",
      "parentUuid": "dc8d2eb7_f66e051a",
      "range": {
        "startLine": 94,
        "startChar": 18,
        "endLine": 94,
        "endChar": 30
      },
      "revId": "172fd5827d1c0bae7d932ff5e52b0c02212e6b4c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "27c16279_ccdd25bb",
        "filename": "content/network/data_pipe_element_reader.cc",
        "patchSetId": 5
      },
      "lineNbr": 94,
      "author": {
        "id": 1104639
      },
      "writtenOn": "2017-12-18T19:31:48Z",
      "side": 1,
      "message": "My understanding is that the underlying Mojo API doesn\u0027t make the guarantee that after emitting a readable signal, the next read will be definitely a success:\n\n- The Mojo system API is thread safe, there could be multiple readers for a pipe. Therefore, someone might have consumed the data. (I understand this is not relevant here.)\n\n- It shouldn\u0027t be something surprising. Things like condition variables could have spurious events. I believe watching a OS socket to become readable could have spurious events as well.\n\nWDYT?",
      "parentUuid": "16541ac7_716cb6c4",
      "range": {
        "startLine": 94,
        "startChar": 18,
        "endLine": 94,
        "endChar": 30
      },
      "revId": "172fd5827d1c0bae7d932ff5e52b0c02212e6b4c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "14379ed3_39131679",
        "filename": "content/network/data_pipe_element_reader.cc",
        "patchSetId": 5
      },
      "lineNbr": 94,
      "author": {
        "id": 1115968
      },
      "writtenOn": "2017-12-18T19:36:36Z",
      "side": 1,
      "message": "In general, there\u0027s only one reader of a pipe (And there can only be one watcher of a pipe, anyways), so I think we can ignore the multiple readers case.\n\nI\u0027m fine with not trusting the result of watching for when a pipe becomes readable, writable.  In that case, the old code should also be considered buggy, in that respect.  I\u0027m a bit concerned that such cases won\u0027t end up being tested, though.",
      "parentUuid": "27c16279_ccdd25bb",
      "range": {
        "startLine": 94,
        "startChar": 18,
        "endLine": 94,
        "endChar": 30
      },
      "revId": "172fd5827d1c0bae7d932ff5e52b0c02212e6b4c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a64aa63f_a9bf179d",
        "filename": "content/network/data_pipe_element_reader.cc",
        "patchSetId": 5
      },
      "lineNbr": 94,
      "author": {
        "id": 1104639
      },
      "writtenOn": "2017-12-18T20:03:49Z",
      "side": 1,
      "message": "\u003e \"I\u0027m a bit concerned that such cases won\u0027t end up being tested, though.\"\nThat is a fair point. I think a lot of error handling code paths are not well tested. And that is a pretty general issue.",
      "parentUuid": "14379ed3_39131679",
      "range": {
        "startLine": 94,
        "startChar": 18,
        "endLine": 94,
        "endChar": 30
      },
      "revId": "172fd5827d1c0bae7d932ff5e52b0c02212e6b4c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "63ba1b84_95a795c4",
        "filename": "content/network/data_pipe_element_reader.cc",
        "patchSetId": 5
      },
      "lineNbr": 94,
      "author": {
        "id": 1001809
      },
      "writtenOn": "2017-12-19T19:36:08Z",
      "side": 1,
      "message": "Yuzhu: So I took a look at where I would think the documentation would be on guarantees/lack of guarantees of state after a watcher was signaled with a readable signal (https://chromium.googlesource.com/chromium/src/+/master/mojo/public/cpp/system#Watching-Handles ) and didn\u0027t find anything that clarified this.  Is there somewhere else I should be looking?\n\nGiven that we have some code that appears to assume that a watcher triggering with a readable signal can always be read, and some that doesn\u0027t, it would seem making sure the documentation is clear about what assumptions can be made.  Willing to give me a pointer to the documentation I should be considering updating?",
      "parentUuid": "a64aa63f_a9bf179d",
      "range": {
        "startLine": 94,
        "startChar": 18,
        "endLine": 94,
        "endChar": 30
      },
      "revId": "172fd5827d1c0bae7d932ff5e52b0c02212e6b4c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "05c34fcb_d027e970",
        "filename": "content/network/data_pipe_element_reader.cc",
        "patchSetId": 5
      },
      "lineNbr": 94,
      "author": {
        "id": 1115968
      },
      "writtenOn": "2017-12-19T19:46:49Z",
      "side": 1,
      "message": "It might be...interesting.... To make mojo post bogus readable events and see how many tests fail (Wait until data can be read, so the test is started, then trigger the even, but don\u0027t let the consumer read data), and see how many tests fall over.  Not suggesting doing it in production, just making the change and triggering bots.",
      "parentUuid": "63ba1b84_95a795c4",
      "range": {
        "startLine": 94,
        "startChar": 18,
        "endLine": 94,
        "endChar": 30
      },
      "revId": "172fd5827d1c0bae7d932ff5e52b0c02212e6b4c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "521e4582_6e1d01c9",
        "filename": "content/network/data_pipe_element_reader.cc",
        "patchSetId": 5
      },
      "lineNbr": 94,
      "author": {
        "id": 1104639
      },
      "writtenOn": "2017-12-19T20:19:38Z",
      "side": 1,
      "message": "Randy: I didn\u0027t find relevant document either. The location that you pointed to seems to be a good place to talk about this. And also the following place:\nhttps://cs.chromium.org/chromium/src/mojo/public/c/system/types.h?rcl\u003d46c8bf4a955116f20f839f88720b28de9571a7ca\u0026l\u003d139\n\nYou might want rockot@ to review the change. (I am happy to, but he was the original author of this part.)\n\nMatt: That sounds an interesting idea to me!",
      "parentUuid": "05c34fcb_d027e970",
      "range": {
        "startLine": 94,
        "startChar": 18,
        "endLine": 94,
        "endChar": 30
      },
      "revId": "172fd5827d1c0bae7d932ff5e52b0c02212e6b4c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a172f978_3dabec5f",
        "filename": "content/network/data_pipe_element_reader.h",
        "patchSetId": 5
      },
      "lineNbr": 69,
      "author": {
        "id": 1001809
      },
      "writtenOn": "2017-12-14T20:40:35Z",
      "side": 1,
      "message": "nit: Capitalize \"Cleared\"",
      "range": {
        "startLine": 69,
        "startChar": 21,
        "endLine": 69,
        "endChar": 28
      },
      "revId": "172fd5827d1c0bae7d932ff5e52b0c02212e6b4c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6855c6a4_a4c74b6f",
        "filename": "content/network/data_pipe_element_reader.h",
        "patchSetId": 5
      },
      "lineNbr": 69,
      "author": {
        "id": 1115968
      },
      "writtenOn": "2017-12-14T21:05:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a172f978_3dabec5f",
      "range": {
        "startLine": 69,
        "startChar": 21,
        "endLine": 69,
        "endChar": 28
      },
      "revId": "172fd5827d1c0bae7d932ff5e52b0c02212e6b4c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}