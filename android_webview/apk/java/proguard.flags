# Don't rename anything, it makes stack traces unintelligible. We only allow the
# obfuscation pass to run so that we can discard attributes like local variable
# tables. However, we don't want to lose out on optimizations, so although they
# can occasionally make the stack trace a bit stranger with inlining, it won't
# make a big difference for the users seeing the stacktraces. We can always use
# build/android/stacktrace/java_deobfuscate.py to fix the stacktrace up for us.
-keepnames,allowoptimization class *** { *; }

# The following chart was created on Aug. 11, 2016, to decide on 3 optimization
# passes.
# optimization passes | time | .dex size |      dirty memory
# -----------------------------------------------------------------
#          1          | 0:13 |  1022588  |         97772
#          2          | 0:17 |  1019200  |         97472
#          3          | 0:18 |  1018472  |         97424
#          4          | 0:21 |  1018392  |         97416
#          5          | 0:26 |  1018360  |         97416
-optimizationpasses 3

# Class merging messes up stacktraces beyond the point of them being
# deobfuscatable. If turned on, it would give us a 1% reduction in .dex size.
-optimizations !class/merging/*

# Allowing Proguard to change modifiers. This change shrinks the .dex size by
# 3.7%.
-allowaccessmodification

# Allows Proguard freedom in removing these log related calls. We ask for debug
# and verbose logs to be stripped out in base.Log, so we are just ensuring we
# get rid of all other debug/verbose logs.
-assumenosideeffects class android.util.Log {
  static *** d(...);
  static *** v(...);
  static *** isLoggable(...);
}

# Keep the factory and its public members; it's the main entry point used by the
# framework.
-keep class com.android.webview.chromium.WebViewChromiumFactoryProvider {
    public *;
}

# This is the main entry point for APIs. It is kept to make developing with
# unreleased Android easier.
-keep class com.android.webview.chromium.WebViewChromium {
  public *;
}

# Linker dynamically casts to $TestRunner when running tests. We don't run these
# tests in WebView.
-dontnote org.chromium.base.library_loader.Linker$TestRunner

# Don't note about the API 21 compatibility code which references various
# hidden APIs via reflection.
-dontnote com.android.webview.chromium.WebViewDelegateFactory$Api21CompatibilityDelegate

# DefaultAndroidKeyStore uses reflection to access internal OpenSSL state.
-dontnote org.chromium.net.DefaultAndroidKeyStore

# MediaPlayerBridge uses reflection to access internal metadata.
-dontnote org.chromium.media.MediaPlayerBridge

# ProxyChangeListener$ProxyReceiver uses reflection to access internal
# android.net.ProxyProperties.
-dontnote org.chromium.net.ProxyChangeListener$ProxyReceiver

# Silence warnings about reflection used to check for onShow/HideCustomView.
# This class is not really kept since it's in a library jar.
-keep class android.webkit.WebChromeClient {
  void onShowCustomView(...);
  void onHideCustomView();
}

# Accessed via reflection but not present in all builds
-keep class com.android.webview.chromium.PlatformServiceBridgeGoogle {
  void setMetricsSettingListener(...);
  PlatformServiceBridgeGoogle(...);
}
-dontnote com.android.webview.chromium.PlatformServiceBridgeGoogle

# AwDebug is accessed by reflection.
-keep class org.chromium.android_webview.AwDebug {
  public static boolean dumpWithoutCrashing(...);
}

#TODO(hush): remove after N release. crbug.com/546762
-keep class com.android.webview.chromium.ContentSettingsAdapter {
  public void setDisabledActionModeMenuItems(int);
  public int getDisabledActionModeMenuItems();
}

# Ignore notes and warnings about the support library, which uses reflection and
# may reference classes no longer in the SDK.
-dontnote android.support.**
-dontwarn android.support.**
