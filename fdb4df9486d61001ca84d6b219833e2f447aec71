{
  "comments": [
    {
      "key": {
        "uuid": "24c37b06_96b31f06",
        "filename": "chrome/android/java/src/org/chromium/chrome/browser/compositor/CompositorViewHolder.java",
        "patchSetId": 2
      },
      "lineNbr": 612,
      "author": {
        "id": 1186534
      },
      "writtenOn": "2017-07-13T07:25:02Z",
      "side": 1,
      "message": "Agreed, just do this in the constructor so you make the list once only and clear it after using.",
      "range": {
        "startLine": 612,
        "startChar": 45,
        "endLine": 612,
        "endChar": 68
      },
      "revId": "fdb4df9486d61001ca84d6b219833e2f447aec71",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9367dabe_229518e5",
        "filename": "chrome/android/java/src/org/chromium/chrome/browser/compositor/CompositorViewHolder.java",
        "patchSetId": 2
      },
      "lineNbr": 612,
      "author": {
        "id": 1191013
      },
      "writtenOn": "2017-07-13T07:55:33Z",
      "side": 1,
      "message": "Are you sure? Pretty much always this list will be empty. All the guidelines for Android development I read tell about religiously saving memory. Also, this is the pattern I copied from  CompositorView and its mDrawingFinishedCallbacks.",
      "parentUuid": "24c37b06_96b31f06",
      "range": {
        "startLine": 612,
        "startChar": 45,
        "endLine": 612,
        "endChar": 68
      },
      "revId": "fdb4df9486d61001ca84d6b219833e2f447aec71",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "81f0db23_aab2c3e7",
        "filename": "chrome/android/java/src/org/chromium/chrome/browser/compositor/CompositorViewHolder.java",
        "patchSetId": 2
      },
      "lineNbr": 617,
      "author": {
        "id": 1145109
      },
      "writtenOn": "2017-07-13T07:12:33Z",
      "side": 1,
      "message": "nit: Just use nNextFrameSwapCallbacks directly in the iteration? And clear at the end instead of nulling it?",
      "range": {
        "startLine": 617,
        "startChar": 35,
        "endLine": 617,
        "endChar": 58
      },
      "revId": "fdb4df9486d61001ca84d6b219833e2f447aec71",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "144cc558_9490b606",
        "filename": "chrome/android/java/src/org/chromium/chrome/browser/compositor/CompositorViewHolder.java",
        "patchSetId": 2
      },
      "lineNbr": 617,
      "author": {
        "id": 1191013
      },
      "writtenOn": "2017-07-13T07:55:33Z",
      "side": 1,
      "message": "I agree that this is slightly weird, I\u0027ve taken this from CompositorView and its mDrawingFinishedCallbacks. I assume the intention here is to safe memory as CompositorView and its mDrawingFinishedCallbacks will be pretty much always empty, so why keep bytes for it given all the Android mantra on saving memory when possible.\n\nIf we do nullify it, than doing it this way is slightly more thread safe than using mNextFrameSwapCallbacks directly in the iteration.\n\nI don\u0027t feel strongly, but being new to Android development and reading recently about saving bytes whenever possible I wonder which pattern is better here.",
      "parentUuid": "81f0db23_aab2c3e7",
      "range": {
        "startLine": 617,
        "startChar": 35,
        "endLine": 617,
        "endChar": 58
      },
      "revId": "fdb4df9486d61001ca84d6b219833e2f447aec71",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bca6c9d7_f8cc6045",
        "filename": "chrome/android/java/src/org/chromium/chrome/browser/compositor/CompositorViewHolder.java",
        "patchSetId": 2
      },
      "lineNbr": 617,
      "author": {
        "id": 1145109
      },
      "writtenOn": "2017-07-13T20:47:04Z",
      "side": 1,
      "message": "That\u0027s a good point. Thanks for considering this!\n\nA common pattern is also to reuse objects so you don\u0027t have to pay the allocation cost each time. You\u0027ll notice that with members like mCacheFoo in classes.\n\nBut you\u0027re right, in this case you\u0027ll add a callback once on startup (that too only the WebApps would) and never need to reuse the list. So nulling it would be a better pattern to use. As for using it directly in the iteration, I think the code in mDrawingFinishedCallbacks did that to avoid re-enterency, in case running the callback makes a call to queue another callback, but since you\u0027re posting them to the message loop, that shouldn\u0027t be a concern here?",
      "parentUuid": "144cc558_9490b606",
      "range": {
        "startLine": 617,
        "startChar": 35,
        "endLine": 617,
        "endChar": 58
      },
      "revId": "fdb4df9486d61001ca84d6b219833e2f447aec71",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f314edef_facc8862",
        "filename": "chrome/android/java/src/org/chromium/chrome/browser/compositor/CompositorViewHolder.java",
        "patchSetId": 2
      },
      "lineNbr": 617,
      "author": {
        "id": 1191013
      },
      "writtenOn": "2017-07-14T02:39:40Z",
      "side": 1,
      "message": "I agree, used nNextFrameSwapCallbacks directly in the iteration as recommended. Thanks!",
      "parentUuid": "bca6c9d7_f8cc6045",
      "range": {
        "startLine": 617,
        "startChar": 35,
        "endLine": 617,
        "endChar": 58
      },
      "revId": "fdb4df9486d61001ca84d6b219833e2f447aec71",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b4e75184_e0a8c6d8",
        "filename": "chrome/android/java/src/org/chromium/chrome/browser/webapps/WebappSplashScreenController.java",
        "patchSetId": 2
      },
      "lineNbr": 31,
      "author": {
        "id": 1186534
      },
      "writtenOn": "2017-07-13T07:25:02Z",
      "side": 1,
      "message": "Move this to before the splash screen ViewGroup and add an inline comment:\n\n/** Used to schedule splash screen hiding. */",
      "range": {
        "startLine": 31,
        "startChar": 4,
        "endLine": 31,
        "endChar": 11
      },
      "revId": "fdb4df9486d61001ca84d6b219833e2f447aec71",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "98478ec6_8d7c6165",
        "filename": "chrome/android/java/src/org/chromium/chrome/browser/webapps/WebappSplashScreenController.java",
        "patchSetId": 2
      },
      "lineNbr": 197,
      "author": {
        "id": 1186534
      },
      "writtenOn": "2017-07-13T07:25:02Z",
      "side": 1,
      "message": "Let\u0027s either assert mCompositiorViewHolder !\u003d null or if-check that member and directly call animateHidingSplashScreen() if it\u0027s null.\n\nNone of the call sites currently call this method without mCompositorViewHolder being non-null (the observer is added in the same place as mCompositorViewHolder is assigned). But in the future that could change so we should protect against it.",
      "range": {
        "startLine": 197,
        "startChar": 8,
        "endLine": 197,
        "endChar": 29
      },
      "revId": "fdb4df9486d61001ca84d6b219833e2f447aec71",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "deca7c50_4c4b5a72",
        "filename": "chrome/android/java/src/org/chromium/chrome/browser/webapps/WebappSplashScreenController.java",
        "patchSetId": 2
      },
      "lineNbr": 211,
      "author": {
        "id": 1186534
      },
      "writtenOn": "2017-07-13T07:25:02Z",
      "side": 1,
      "message": "Nit: set mCompositorViewHolder to null as the first line in the run() method? No need to keep it around after this.",
      "range": {
        "startLine": 211,
        "startChar": 19,
        "endLine": 211,
        "endChar": 23
      },
      "revId": "fdb4df9486d61001ca84d6b219833e2f447aec71",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}