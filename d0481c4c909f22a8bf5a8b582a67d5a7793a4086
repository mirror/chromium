{
  "comments": [
    {
      "key": {
        "uuid": "bb1c6256_762a4d3d",
        "filename": "third_party/WebKit/Source/platform/BUILD.gn",
        "patchSetId": 2
      },
      "lineNbr": 1525,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2017-12-19T00:27:04Z",
      "side": 1,
      "message": "Very stupid question: Does this mean that these directories are linked into different link units? In other words, it\u0027s not allowed to create a cyclic dependency between platform/blob/ and platform/heap/, right?",
      "revId": "d0481c4c909f22a8bf5a8b582a67d5a7793a4086",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "627af7ef_e42c10c5",
        "filename": "third_party/WebKit/Source/platform/BUILD.gn",
        "patchSetId": 2
      },
      "lineNbr": 1525,
      "author": {
        "id": 1002854
      },
      "writtenOn": "2017-12-19T01:01:59Z",
      "side": 1,
      "message": "Not a stupid question; build files are complicated. :)\n\nConfusingly:\n- no, they\u0027re not linked separately (at present, they end up being source_set targets, which just make .o files)\n- yes, gn rejects cyclic dependencies between source_set targets, too\n\nhttps://chromium.googlesource.com/chromium/src/+/master/tools/gn/docs/reference.md#allow_circular_includes_from has a few details (for the particular case of a \"parent\" and \"child\" target in the same linkable unit).\n\nThe bottom line is that gn expects targets and their dependencies to form a DAG. Ordinarily a single unit that has lots of inner dependencies is constructed as a single target, but that can get a little unwieldy when it gets big enough (and I think some of the bits were also split off to make them build quickly with jumbo build).\n\nNonetheless we do need:\n* dependents of platform (like core) to be able to see all of platform as a single unit, and see all of its headers, etc\n* parts of platform to get the necessary dependency edges, build flags, etc to correctly include one another\u0027s headers\n\nIn my ideal world, gn would have a \"multi-part shared_library\" or similar target that built the sources of each part with the deps needed only for its headers and the transitive closure of headers it depended on, with cycles. But AFAIK we cannot directly express that in gn.",
      "parentUuid": "bb1c6256_762a4d3d",
      "revId": "d0481c4c909f22a8bf5a8b582a67d5a7793a4086",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "65913a52_98183411",
        "filename": "third_party/WebKit/Source/platform/BUILD.gn",
        "patchSetId": 2
      },
      "lineNbr": 1525,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2017-12-19T01:08:46Z",
      "side": 1,
      "message": "Thanks for the clarification! Makes sense.\n\nGiven that source_set does not define a linkable unit, how is a linkable unit defined?",
      "parentUuid": "627af7ef_e42c10c5",
      "revId": "d0481c4c909f22a8bf5a8b582a67d5a7793a4086",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f022a2c5_6f9d3baa",
        "filename": "third_party/WebKit/Source/platform/BUILD.gn",
        "patchSetId": 2
      },
      "lineNbr": 1525,
      "author": {
        "id": 1002854
      },
      "writtenOn": "2017-12-19T01:21:24Z",
      "side": 1,
      "message": "In a component build, blink_platform is a shared library (e.g. blink_platform.dll), which is a linkable unit, so will force objects to link. In a non-component build, blink_platform will be a static_library (except on Android, where it\u0027s also a source_set). Either way, though, making a static library is just gathering objects, so linking doesn\u0027t happen until we reach the one big Chrome executable/DLL target.\n\nSince the component build is the more restrictive of the two, we must have all symbols not imported from outside platform resolved to link blink_platform (and everything not being linked into blink_platform must depend on blink_platform instead of directly on something inside it, so that it gets the copy exported from the shared library).\n\nAll objects inside platform ought to have a consistent view of the code they share to avoid ODR violations (i.e. all defines and includes need to be resolved), and everything needed to use the headers (e.g. generated headers) needs to exist before any objects which use them are built.\n\nSince specifying \"objects which use those headers\" is hard when we allow includes from any platform header to any other (with the exception of wtf, which is currently still special), the simplest solution is to require that generated headers and other public dependencies be available before any object in platform is built.",
      "parentUuid": "65913a52_98183411",
      "revId": "d0481c4c909f22a8bf5a8b582a67d5a7793a4086",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}