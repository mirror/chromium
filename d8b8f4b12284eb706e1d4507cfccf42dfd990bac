{
  "comments": [
    {
      "key": {
        "uuid": "d401771c_503c4cde",
        "filename": "third_party/WebKit/Source/core/editing/markers/DocumentMarkerController.cpp",
        "patchSetId": 2
      },
      "lineNbr": 209,
      "author": {
        "id": 1002258
      },
      "writtenOn": "2017-07-28T01:39:31Z",
      "side": 1,
      "message": "How about |++current_suggetion_marker_tag_| to avoid using zero as tag\nto use |tag \u003d\u003d 0| as invalid marker?\n\nIt seems it is better to have class member \nSuggetionMarker::NextSuggetionMarkerTag() to make DMC free from tag management.",
      "revId": "d8b8f4b12284eb706e1d4507cfccf42dfd990bac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "082b795e_d0be158e",
        "filename": "third_party/WebKit/Source/core/editing/markers/DocumentMarkerController.h",
        "patchSetId": 2
      },
      "lineNbr": 161,
      "author": {
        "id": 1002258
      },
      "writtenOn": "2017-07-28T01:39:31Z",
      "side": 1,
      "message": "Could you initialize |next_suggetions_marker_tag_| here to avoid forgetting\ninitialization when introducing new constructor.",
      "revId": "d8b8f4b12284eb706e1d4507cfccf42dfd990bac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3913153a_155d361a",
        "filename": "third_party/WebKit/Source/core/editing/markers/SuggestionMarker.cpp",
        "patchSetId": 2
      },
      "lineNbr": 27,
      "author": {
        "id": 1002258
      },
      "writtenOn": "2017-07-28T01:39:31Z",
      "side": 1,
      "message": "I would like to add DCHECK_GT(tag_, 0); I assume 0 and negative are invalid a tag.",
      "revId": "d8b8f4b12284eb706e1d4507cfccf42dfd990bac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0ecff45a_021a3ab6",
        "filename": "third_party/WebKit/Source/core/editing/markers/SuggestionMarker.cpp",
        "patchSetId": 2
      },
      "lineNbr": 51,
      "author": {
        "id": 1002258
      },
      "writtenOn": "2017-07-28T01:39:31Z",
      "side": 1,
      "message": "nit: DCHECK_LT(static_cast\u003csize_t\u003e(suggetion_index), suggestions_.size())\n\nCating to wide number is prefered rather than truncating to avoid losing bits.",
      "revId": "d8b8f4b12284eb706e1d4507cfccf42dfd990bac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a624f708_27cadd14",
        "filename": "third_party/WebKit/Source/core/editing/markers/SuggestionMarker.cpp",
        "patchSetId": 2
      },
      "lineNbr": 51,
      "author": {
        "id": 1229332
      },
      "writtenOn": "2017-07-28T02:48:47Z",
      "side": 1,
      "message": "I think it depends on the check. For example, if you\u0027re doing DCHECK_GT, you don\u0027t want to cast a negative signed number to become a large unsigned number.\n\nBut here, I think it\u0027s fine either way, I\u0027ll change it.",
      "parentUuid": "0ecff45a_021a3ab6",
      "revId": "d8b8f4b12284eb706e1d4507cfccf42dfd990bac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b3e45d29_09bc1406",
        "filename": "third_party/WebKit/Source/core/editing/markers/SuggestionMarker.cpp",
        "patchSetId": 2
      },
      "lineNbr": 51,
      "author": {
        "id": 1144165
      },
      "writtenOn": "2017-07-28T18:11:41Z",
      "side": 1,
      "message": "It seems better to make |suggestion_index| unsigned.",
      "parentUuid": "a624f708_27cadd14",
      "revId": "d8b8f4b12284eb706e1d4507cfccf42dfd990bac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "698e7fb3_4cb4a05d",
        "filename": "third_party/WebKit/Source/core/editing/markers/SuggestionMarker.cpp",
        "patchSetId": 2
      },
      "lineNbr": 51,
      "author": {
        "id": 1229332
      },
      "writtenOn": "2017-07-28T18:47:15Z",
      "side": 1,
      "message": "We send this value up to Java when we show the text suggestion menu, and Java doesn\u0027t support unsigned ints. Do you still want it unsigned?",
      "parentUuid": "b3e45d29_09bc1406",
      "revId": "d8b8f4b12284eb706e1d4507cfccf42dfd990bac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "93e641ea_85bda8fc",
        "filename": "third_party/WebKit/Source/core/editing/markers/SuggestionMarker.cpp",
        "patchSetId": 2
      },
      "lineNbr": 51,
      "author": {
        "id": 1144165
      },
      "writtenOn": "2017-07-28T19:40:14Z",
      "side": 1,
      "message": "Can we use unsigned in C++ code, and add sign checking at some glue layer?\n\nUsing int for index in C++ code makes us panic about the sign.",
      "parentUuid": "698e7fb3_4cb4a05d",
      "revId": "d8b8f4b12284eb706e1d4507cfccf42dfd990bac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "de7aeee0_5dfb5b89",
        "filename": "third_party/WebKit/Source/core/editing/markers/SuggestionMarker.cpp",
        "patchSetId": 2
      },
      "lineNbr": 51,
      "author": {
        "id": 1229332
      },
      "writtenOn": "2017-07-28T19:45:31Z",
      "side": 1,
      "message": "As far as the Java code is concerned, this is just an opaque identifier. It can be converted back-and-forth between signed and unsigned just fine if we want to store it as unsigned in C++, so I\u0027m not sure what checks we would need. It\u0027s also probably never going to be outside the range 0 through 4 on Android.",
      "parentUuid": "93e641ea_85bda8fc",
      "revId": "d8b8f4b12284eb706e1d4507cfccf42dfd990bac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7a10806c_2e14e291",
        "filename": "third_party/WebKit/Source/core/editing/markers/SuggestionMarker.h",
        "patchSetId": 2
      },
      "lineNbr": 45,
      "author": {
        "id": 1002258
      },
      "writtenOn": "2017-07-28T01:39:31Z",
      "side": 1,
      "message": "nit: s/int32_t/const int32_t/",
      "revId": "d8b8f4b12284eb706e1d4507cfccf42dfd990bac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "279be181_382841aa",
        "filename": "third_party/WebKit/Source/core/editing/markers/SuggestionMarker.h",
        "patchSetId": 2
      },
      "lineNbr": 45,
      "author": {
        "id": 1144165
      },
      "writtenOn": "2017-07-28T18:11:41Z",
      "side": 1,
      "message": "Why is |tag_| signed?",
      "parentUuid": "7a10806c_2e14e291",
      "revId": "d8b8f4b12284eb706e1d4507cfccf42dfd990bac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ffea7b80_4acbd332",
        "filename": "third_party/WebKit/Source/core/editing/markers/SuggestionMarker.h",
        "patchSetId": 2
      },
      "lineNbr": 45,
      "author": {
        "id": 1229332
      },
      "writtenOn": "2017-07-28T18:47:15Z",
      "side": 1,
      "message": "We send this value up to Java when we show the text suggestion menu, and Java doesn\u0027t support unsigned ints (we would have to convert it to signed and back anyway).",
      "parentUuid": "279be181_382841aa",
      "revId": "d8b8f4b12284eb706e1d4507cfccf42dfd990bac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "166a73e8_a2da14cb",
        "filename": "third_party/WebKit/Source/core/editing/markers/SuggestionMarker.h",
        "patchSetId": 2
      },
      "lineNbr": 46,
      "author": {
        "id": 1002258
      },
      "writtenOn": "2017-07-28T01:39:31Z",
      "side": 1,
      "message": "nit: s/Vector\u003cString\u003e/const Vector\u003cString\u003e/",
      "revId": "d8b8f4b12284eb706e1d4507cfccf42dfd990bac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "96d3da03_36c6b861",
        "filename": "third_party/WebKit/Source/core/editing/markers/SuggestionMarker.h",
        "patchSetId": 2
      },
      "lineNbr": 47,
      "author": {
        "id": 1002258
      },
      "writtenOn": "2017-07-28T01:39:31Z",
      "side": 1,
      "message": "nit: s/RemoveUponReplace/const RemoveUponReplace/",
      "revId": "d8b8f4b12284eb706e1d4507cfccf42dfd990bac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3a3ff81e_5a9312cb",
        "filename": "third_party/WebKit/Source/core/editing/markers/SuggestionMarker.h",
        "patchSetId": 2
      },
      "lineNbr": 48,
      "author": {
        "id": 1002258
      },
      "writtenOn": "2017-07-28T01:39:31Z",
      "side": 1,
      "message": "nit: s/Color/const Color/",
      "revId": "d8b8f4b12284eb706e1d4507cfccf42dfd990bac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2a26a37d_3bb59242",
        "filename": "third_party/WebKit/Source/core/editing/markers/SuggestionMarkerListImpl.cpp",
        "patchSetId": 2
      },
      "lineNbr": 102,
      "author": {
        "id": 1002258
      },
      "writtenOn": "2017-07-28T01:39:31Z",
      "side": 1,
      "message": "Could you move |did_remove_marker| here?\n\nconst bool did_remove_marker \u003d!unremoved_markers.IsEmpty();",
      "revId": "d8b8f4b12284eb706e1d4507cfccf42dfd990bac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3176c546_74dbd262",
        "filename": "third_party/WebKit/Source/core/editing/markers/SuggestionMarkerListImpl.cpp",
        "patchSetId": 2
      },
      "lineNbr": 102,
      "author": {
        "id": 1229332
      },
      "writtenOn": "2017-08-07T18:51:49Z",
      "side": 1,
      "message": "Actually, I think the right check is unremoved_markers.size() !\u003d markers_.size()",
      "parentUuid": "2a26a37d_3bb59242",
      "revId": "d8b8f4b12284eb706e1d4507cfccf42dfd990bac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e18b80d5_795d023a",
        "filename": "third_party/WebKit/Source/core/paint/InlineTextBoxPainter.cpp",
        "patchSetId": 2
      },
      "lineNbr": 649,
      "author": {
        "id": 1002258
      },
      "writtenOn": "2017-07-28T01:39:31Z",
      "side": 1,
      "message": "Could you move this change into another patch for ease of review?",
      "revId": "d8b8f4b12284eb706e1d4507cfccf42dfd990bac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "89c6dc3c_b0f91064",
        "filename": "third_party/WebKit/Source/core/paint/InlineTextBoxPainter.cpp",
        "patchSetId": 2
      },
      "lineNbr": 649,
      "author": {
        "id": 1229332
      },
      "writtenOn": "2017-07-28T02:48:47Z",
      "side": 1,
      "message": "This switch statement won\u0027t compile unless I add this here.",
      "parentUuid": "e18b80d5_795d023a",
      "revId": "d8b8f4b12284eb706e1d4507cfccf42dfd990bac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9d898a32_7e820030",
        "filename": "third_party/WebKit/Source/core/paint/InlineTextBoxPainter.cpp",
        "patchSetId": 2
      },
      "lineNbr": 649,
      "author": {
        "id": 1002258
      },
      "writtenOn": "2017-07-28T03:31:45Z",
      "side": 1,
      "message": "Please submit once this CL is landed.\nThis is simple technique to reduce load of paint team reviewers.\n\nThey might want to read editing changes and search core/paint changes\nfrom list.\n\nAgain, please consider how reviewers work.",
      "parentUuid": "89c6dc3c_b0f91064",
      "revId": "d8b8f4b12284eb706e1d4507cfccf42dfd990bac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5246e633_8b25efd5",
        "filename": "third_party/WebKit/Source/core/paint/InlineTextBoxPainter.cpp",
        "patchSetId": 2
      },
      "lineNbr": 649,
      "author": {
        "id": 1229332
      },
      "writtenOn": "2017-07-28T03:39:17Z",
      "side": 1,
      "message": "Can you please clarify? If I add a marker type, I have to update every switch statement that doesn\u0027t have a \"default\" case or the code won\u0027t compile. I can\u0027t land a CL that causes a compile error, so I don\u0027t understand what you\u0027re suggesting.\n\nI don\u0027t think it\u0027s possible to completely separate the editing and paint CLs since the enum value is in editing code (so adding a value requires touching editing code), and updating it requires touching this switch statement in paint code.",
      "parentUuid": "9d898a32_7e820030",
      "revId": "d8b8f4b12284eb706e1d4507cfccf42dfd990bac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "75912b54_23d83194",
        "filename": "third_party/WebKit/Source/core/paint/InlineTextBoxPainter.cpp",
        "patchSetId": 2
      },
      "lineNbr": 649,
      "author": {
        "id": 1002258
      },
      "writtenOn": "2017-07-28T03:47:26Z",
      "side": 1,
      "message": "Can we have |default:| label?",
      "parentUuid": "5246e633_8b25efd5",
      "revId": "d8b8f4b12284eb706e1d4507cfccf42dfd990bac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "46237b40_6fe1dc3c",
        "filename": "third_party/WebKit/Source/core/paint/InlineTextBoxPainter.cpp",
        "patchSetId": 2
      },
      "lineNbr": 649,
      "author": {
        "id": 1002258
      },
      "writtenOn": "2017-07-28T03:59:37Z",
      "side": 1,
      "message": "Or how about using if-statement?\nWe don\u0027t want to update this switch-statement when we introduce new marker.\nMaintaining this case list is cost.",
      "parentUuid": "75912b54_23d83194",
      "revId": "d8b8f4b12284eb706e1d4507cfccf42dfd990bac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5588aca1_58de8d72",
        "filename": "third_party/WebKit/Source/core/paint/InlineTextBoxPainter.cpp",
        "patchSetId": 2
      },
      "lineNbr": 649,
      "author": {
        "id": 1229332
      },
      "writtenOn": "2017-07-28T04:09:48Z",
      "side": 1,
      "message": "I guess it depends if this is something that only ever needs to handle grammar and spelling markers, or if we think it\u0027s valuable to have the compiler enforce that people adding new marker types (i.e. me) are aware of the switch statement.\n\nI actually don\u0027t really understand how this paint code works, I\u0027m just assuming suggestion markers should be handled the same way as composition markers :-/",
      "parentUuid": "46237b40_6fe1dc3c",
      "revId": "d8b8f4b12284eb706e1d4507cfccf42dfd990bac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fcaac082_4d97b36f",
        "filename": "third_party/WebKit/Source/core/paint/InlineTextBoxPainter.cpp",
        "patchSetId": 2
      },
      "lineNbr": 649,
      "author": {
        "id": 1144165
      },
      "writtenOn": "2017-07-28T18:11:41Z",
      "side": 1,
      "message": "I think we should change this switch-case to a function.\n\nEditing code and paint code shouldn\u0027t be so highly coupled.\n\nBesides, I think the painting of kSuggestion marker should be skipped in this patch. We don\u0027t want to affect painting without a clear idea how the affection will be.",
      "parentUuid": "5588aca1_58de8d72",
      "revId": "d8b8f4b12284eb706e1d4507cfccf42dfd990bac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "54c0c819_3925bf1c",
        "filename": "third_party/WebKit/Source/modules/accessibility/AXNodeObject.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1523,
      "author": {
        "id": 1002258
      },
      "writtenOn": "2017-07-28T01:39:31Z",
      "side": 1,
      "message": "Could you move this change into another patch for ease of review?",
      "revId": "d8b8f4b12284eb706e1d4507cfccf42dfd990bac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c5c32322_3b0468f5",
        "filename": "third_party/WebKit/Source/modules/accessibility/AXNodeObject.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1523,
      "author": {
        "id": 1229332
      },
      "writtenOn": "2017-07-28T02:48:47Z",
      "side": 1,
      "message": "This switch statement won\u0027t compile unless I add this here. The actual accessibility support I *am* putting in another CL.",
      "parentUuid": "54c0c819_3925bf1c",
      "revId": "d8b8f4b12284eb706e1d4507cfccf42dfd990bac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6de93e80_5c4e44d7",
        "filename": "third_party/WebKit/Source/modules/accessibility/AXNodeObject.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1523,
      "author": {
        "id": 1002258
      },
      "writtenOn": "2017-07-28T04:26:57Z",
      "side": 1,
      "message": "To avoid updating this list when we introduce new marker, could you\nintroduce new function, e.g. ShouldConvertMarker(const DOcumentMarker\u0026)?\n\ne.g.\n\nbool ShouldConvertMarkre(const DocumentMarker\u0026 marker) {\n  return marker.IsSpellingMarker() || marker.XXX....\n}",
      "parentUuid": "c5c32322_3b0468f5",
      "revId": "d8b8f4b12284eb706e1d4507cfccf42dfd990bac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c10f50c9_86b2541e",
        "filename": "third_party/WebKit/Source/modules/accessibility/AXNodeObject.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1523,
      "author": {
        "id": 1229332
      },
      "writtenOn": "2017-07-28T04:33:18Z",
      "side": 1,
      "message": "I don\u0027t think we\u0027re necessarily going to remember to update this method if we do it this way. I suspect the accessibility engineers might be perfectly happy rubber-stamping an extra CL every time we add a marker type (which is not that often) if it means we\u0027ll actually implement accessibility support properly.",
      "parentUuid": "6de93e80_5c4e44d7",
      "revId": "d8b8f4b12284eb706e1d4507cfccf42dfd990bac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c7c9a2af_935f8589",
        "filename": "third_party/WebKit/Source/modules/accessibility/AXNodeObject.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1523,
      "author": {
        "id": 1002258
      },
      "writtenOn": "2017-07-28T04:41:48Z",
      "side": 1,
      "message": "I don\u0027t think rubber-stamping is good thing. Please use another method to\ninform new marker type to AX team rather than updating case list.\n\nPlease keep in mind to make patch smaller and reduce review time and review cycle.",
      "parentUuid": "c10f50c9_86b2541e",
      "revId": "d8b8f4b12284eb706e1d4507cfccf42dfd990bac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9c499a59_07501253",
        "filename": "third_party/WebKit/Source/modules/accessibility/AXNodeObject.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1523,
      "author": {
        "id": 1144165
      },
      "writtenOn": "2017-07-28T18:11:41Z",
      "side": 1,
      "message": "I think we should change this switch-case to a function.\n\nEditing code and AX code shouldn\u0027t be so highly coupled.",
      "parentUuid": "c7c9a2af_935f8589",
      "revId": "d8b8f4b12284eb706e1d4507cfccf42dfd990bac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}