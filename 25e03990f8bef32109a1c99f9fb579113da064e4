{
  "comments": [
    {
      "key": {
        "uuid": "b25d2bc7_0babd9b2",
        "filename": "content/browser/loader/resource_scheduler.cc",
        "patchSetId": 1
      },
      "lineNbr": 428,
      "author": {
        "id": 1001472
      },
      "writtenOn": "2017-11-30T07:38:55Z",
      "side": 1,
      "message": "This should have better documentation.",
      "revId": "25e03990f8bef32109a1c99f9fb579113da064e4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5d2c922b_6c97c715",
        "filename": "content/browser/loader/resource_scheduler.cc",
        "patchSetId": 1
      },
      "lineNbr": 496,
      "author": {
        "id": 1001472
      },
      "writtenOn": "2017-11-30T07:38:55Z",
      "side": 1,
      "message": "ditto.  Or would it be better to add a simple getter method like set_html_body() and always check the flag there (and add a comment at has_html_body_ to note that it should not be directly updated)?",
      "revId": "25e03990f8bef32109a1c99f9fb579113da064e4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "89e9788d_6bb1deb1",
        "filename": "content/browser/loader/resource_scheduler.cc",
        "patchSetId": 1
      },
      "lineNbr": 496,
      "author": {
        "id": 1001809
      },
      "writtenOn": "2017-11-30T13:25:57Z",
      "side": 1,
      "message": "If you\u0027re willing, I\u0027d suggest changing the variable name (and reversing its sense) to \"throttle_delayable_requests_\".  Otherwise, just add a comment here and above indicating that the html body hasn\u0027t actually been seen at this point, but the class is acting as if it has because the throttling that would normally cause is being done in the renderer.",
      "parentUuid": "5d2c922b_6c97c715",
      "revId": "25e03990f8bef32109a1c99f9fb579113da064e4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1f5920cd_42dae51d",
        "filename": "third_party/WebKit/Source/platform/loader/fetch/ResourceLoadScheduler.cpp",
        "patchSetId": 1
      },
      "lineNbr": 31,
      "author": {
        "id": 1114080
      },
      "writtenOn": "2017-11-30T06:15:46Z",
      "side": 1,
      "message": "I copied the values from resource_scheduler.cc, but the meaning is a bit different because ResourceScheduler counts the running delayable requests while ResourceLoadScheduler counts all the running requests. At this point I don\u0027t change the counting way, and will see the experiment results.",
      "revId": "25e03990f8bef32109a1c99f9fb579113da064e4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bfae331c_11b7b6fe",
        "filename": "third_party/WebKit/Source/platform/loader/fetch/ResourceLoadScheduler.cpp",
        "patchSetId": 1
      },
      "lineNbr": 31,
      "author": {
        "id": 1001472
      },
      "writtenOn": "2017-11-30T07:38:55Z",
      "side": 1,
      "message": "Could we document these in the code comment too?",
      "parentUuid": "1f5920cd_42dae51d",
      "revId": "25e03990f8bef32109a1c99f9fb579113da064e4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c4be4e68_263b7de5",
        "filename": "third_party/WebKit/Source/platform/loader/fetch/ResourceLoadScheduler.cpp",
        "patchSetId": 1
      },
      "lineNbr": 31,
      "author": {
        "id": 1002172
      },
      "writtenOn": "2017-11-30T18:53:03Z",
      "side": 1,
      "message": "nit: s/10/10u/ to be consistent",
      "range": {
        "startLine": 31,
        "startChar": 58,
        "endLine": 31,
        "endChar": 60
      },
      "revId": "25e03990f8bef32109a1c99f9fb579113da064e4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3ed78d0e_49f45d68",
        "filename": "third_party/WebKit/Source/platform/loader/fetch/ResourceLoadScheduler.cpp",
        "patchSetId": 1
      },
      "lineNbr": 32,
      "author": {
        "id": 1002172
      },
      "writtenOn": "2017-11-30T18:53:03Z",
      "side": 1,
      "message": "nit: 1u",
      "range": {
        "startLine": 32,
        "startChar": 66,
        "endLine": 32,
        "endChar": 67
      },
      "revId": "25e03990f8bef32109a1c99f9fb579113da064e4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "88c8c347_beb55504",
        "filename": "third_party/WebKit/Source/platform/loader/fetch/ResourceLoadScheduler.cpp",
        "patchSetId": 1
      },
      "lineNbr": 34,
      "author": {
        "id": 1002172
      },
      "writtenOn": "2017-11-30T18:53:03Z",
      "side": 1,
      "message": "I feel this name is too generic. Can we have clearer name for this? Probably almost every parameters we have in this class would be a limit as we already have bg and bg sub limits.",
      "range": {
        "startLine": 34,
        "startChar": 63,
        "endLine": 34,
        "endChar": 68
      },
      "revId": "25e03990f8bef32109a1c99f9fb579113da064e4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}