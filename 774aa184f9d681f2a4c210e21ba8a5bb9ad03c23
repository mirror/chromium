{
  "comments": [
    {
      "key": {
        "uuid": "d094f283_74fd699a",
        "filename": "base/memory/shared_memory_fuchsia.cc",
        "patchSetId": 11
      },
      "lineNbr": 46,
      "author": {
        "id": 1115906
      },
      "writtenOn": "2017-06-23T19:36:59Z",
      "side": 1,
      "message": "The default rights of the vmo object include MX_RIGHT_EXECUTE. Don\u0027t we want to lower some permissions depending on SharedMemoryCreateOptions.\n\nDon\u0027t we also want to remove MX_RIGHT_SET_PROPERTY once we\u0027re done modifying the properties?",
      "revId": "774aa184f9d681f2a4c210e21ba8a5bb9ad03c23",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ddde23aa_8fbefb24",
        "filename": "base/memory/shared_memory_fuchsia.cc",
        "patchSetId": 11
      },
      "lineNbr": 46,
      "author": {
        "id": 1144260
      },
      "writtenOn": "2017-06-23T20:15:35Z",
      "side": 1,
      "message": "Ah, good point on making EXECUTE match .executable. Done, by duplicate.\n\nI don\u0027t believe SET_PROPERTY allows changing permissions like that based on https://fuchsia.googlesource.com/magenta/+/HEAD/docs/syscalls/object_get_property.md but let me ask some Fuchsia peeps.\n\n(I did remove SET_PROPERTY in the read-only getter below as it seemed \"logically read only\" that way, but perhaps that\u0027s a bit aggressive.)",
      "parentUuid": "d094f283_74fd699a",
      "revId": "774aa184f9d681f2a4c210e21ba8a5bb9ad03c23",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6d4e1b1d_d769113d",
        "filename": "base/memory/shared_memory_fuchsia.cc",
        "patchSetId": 11
      },
      "lineNbr": 46,
      "author": {
        "id": 1131524
      },
      "writtenOn": "2017-06-24T00:37:00Z",
      "side": 1,
      "message": "To record this here:\n\nProperties are different from rights. Rights can\u0027t be changed on a handle. You can a mint a new handle to an existing object that has the same or strictly fewer rights than the original object. This is done by the mx_handle_duplicate call, which makes a 2nd handle, or the mx_handle_replace call, which atomically removes the original handle and gives you a new handle.",
      "parentUuid": "ddde23aa_8fbefb24",
      "revId": "774aa184f9d681f2a4c210e21ba8a5bb9ad03c23",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7d1b82c9_e8088377",
        "filename": "base/memory/shared_memory_fuchsia.cc",
        "patchSetId": 11
      },
      "lineNbr": 46,
      "author": {
        "id": 1144260
      },
      "writtenOn": "2017-06-24T01:54:14Z",
      "side": 1,
      "message": "Thanks, switched to _replace and MX_DEFAULT_VMO_RIGHTS \u0026 ~MX_RIGHT_EXECUTE.",
      "parentUuid": "6d4e1b1d_d769113d",
      "revId": "774aa184f9d681f2a4c210e21ba8a5bb9ad03c23",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b30fc1e3_75fb6433",
        "filename": "base/memory/shared_memory_fuchsia.cc",
        "patchSetId": 11
      },
      "lineNbr": 94,
      "author": {
        "id": 1115906
      },
      "writtenOn": "2017-06-23T19:36:59Z",
      "side": 1,
      "message": "don\u0027t we want to call this regardless of whether mx_vmar_unmap fails?",
      "range": {
        "startLine": 94,
        "startChar": 38,
        "endLine": 94,
        "endChar": 58
      },
      "revId": "774aa184f9d681f2a4c210e21ba8a5bb9ad03c23",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "48776c26_9f5d4ed9",
        "filename": "base/memory/shared_memory_fuchsia.cc",
        "patchSetId": 11
      },
      "lineNbr": 94,
      "author": {
        "id": 1144260
      },
      "writtenOn": "2017-06-23T20:15:35Z",
      "side": 1,
      "message": "Looks like! Done.",
      "parentUuid": "b30fc1e3_75fb6433",
      "range": {
        "startLine": 94,
        "startChar": 38,
        "endLine": 94,
        "endChar": 58
      },
      "revId": "774aa184f9d681f2a4c210e21ba8a5bb9ad03c23",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b0edc360_f5584618",
        "filename": "base/memory/shared_memory_unittest.cc",
        "patchSetId": 11
      },
      "lineNbr": 241,
      "author": {
        "id": 1115906
      },
      "writtenOn": "2017-06-23T19:36:59Z",
      "side": 1,
      "message": "why aren\u0027t we running this test on fuchsia?",
      "range": {
        "startLine": 241,
        "startChar": 43,
        "endLine": 241,
        "endChar": 44
      },
      "revId": "774aa184f9d681f2a4c210e21ba8a5bb9ad03c23",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ad1b6e11_0f4b2b1c",
        "filename": "base/memory/shared_memory_unittest.cc",
        "patchSetId": 11
      },
      "lineNbr": 241,
      "author": {
        "id": 1144260
      },
      "writtenOn": "2017-06-23T20:15:35Z",
      "side": 1,
      "message": "It uses MultipleThreadMain which uses named shared memory which isn\u0027t supported on Fuchsia. At least that\u0027s why I #if\u0027d it out -- there\u0027s no CreateNamedDeprecated implemented on Fuchsia.\n\nNow that I read the test, I\u0027m not really sure what it\u0027s trying to test. I thought it was interthread communication via shm, but they\u0027re all opening the same block, offseting by 1 int, and then writing 0..100 and checking to see that they read what they wrote. But multiple threads are all doing that? So I must be mistaken.",
      "parentUuid": "b0edc360_f5584618",
      "range": {
        "startLine": 241,
        "startChar": 43,
        "endLine": 241,
        "endChar": 44
      },
      "revId": "774aa184f9d681f2a4c210e21ba8a5bb9ad03c23",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "97d6300c_bc7ecf43",
        "filename": "base/memory/shared_memory_unittest.cc",
        "patchSetId": 11
      },
      "lineNbr": 241,
      "author": {
        "id": 1115906
      },
      "writtenOn": "2017-06-23T20:22:11Z",
      "side": 1,
      "message": "seems like a pretty crappy test to me. \u003dP",
      "parentUuid": "ad1b6e11_0f4b2b1c",
      "range": {
        "startLine": 241,
        "startChar": 43,
        "endLine": 241,
        "endChar": 44
      },
      "revId": "774aa184f9d681f2a4c210e21ba8a5bb9ad03c23",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a3247acf_fb2ec14d",
        "filename": "base/memory/shared_memory_unittest.cc",
        "patchSetId": 11
      },
      "lineNbr": 388,
      "author": {
        "id": 1115906
      },
      "writtenOn": "2017-06-23T19:36:59Z",
      "side": 1,
      "message": "can we also test for lack of MX_RIGHT_SET_PROPERTY, otherwise the client can just modify the vmo to give it the appropriate properties?",
      "range": {
        "startLine": 388,
        "startChar": 19,
        "endLine": 388,
        "endChar": 34
      },
      "revId": "774aa184f9d681f2a4c210e21ba8a5bb9ad03c23",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}