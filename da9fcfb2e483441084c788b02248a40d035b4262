{
  "comments": [
    {
      "key": {
        "uuid": "2d6cbc89_66009af9",
        "filename": "base/metrics/histogram.cc",
        "patchSetId": 7
      },
      "lineNbr": 591,
      "author": {
        "id": 1002871
      },
      "writtenOn": "2017-09-20T14:33:32Z",
      "side": 1,
      "message": "maybe .reserve() some emprical value large enough to avoid expansions and internal copies (for the expansion)",
      "range": {
        "startLine": 591,
        "startChar": 14,
        "endLine": 591,
        "endChar": 26
      },
      "revId": "da9fcfb2e483441084c788b02248a40d035b4262",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c24668d1_e858bcdd",
        "filename": "base/metrics/histogram.cc",
        "patchSetId": 7
      },
      "lineNbr": 591,
      "author": {
        "id": 1117419
      },
      "writtenOn": "2017-09-20T15:15:11Z",
      "side": 1,
      "message": "Done.",
      "parentUuid": "2d6cbc89_66009af9",
      "range": {
        "startLine": 591,
        "startChar": 14,
        "endLine": 591,
        "endChar": 26
      },
      "revId": "da9fcfb2e483441084c788b02248a40d035b4262",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2aac5a35_b590d653",
        "filename": "base/trace_event/freed_object_tracker.cc",
        "patchSetId": 7
      },
      "lineNbr": 1,
      "author": {
        "id": 1103654
      },
      "writtenOn": "2017-09-20T21:56:56Z",
      "side": 1,
      "message": "Nit: No (c) for new files.",
      "range": {
        "startLine": 1,
        "startChar": 15,
        "endLine": 1,
        "endChar": 16
      },
      "revId": "da9fcfb2e483441084c788b02248a40d035b4262",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bda7945f_9c31ddbe",
        "filename": "base/trace_event/freed_object_tracker.cc",
        "patchSetId": 7
      },
      "lineNbr": 47,
      "author": {
        "id": 1002871
      },
      "writtenOn": "2017-09-20T14:33:32Z",
      "side": 1,
      "message": "Are you sure you don\u0027t want here  (address \u0026\u0026 size \u003d\u003d 0).\nrealloc with size\u003d\u003d0 has the same effect of free semantic.\nwith an actual size it will just expand the old allocation, so not sure if you should count that as removed in that case",
      "range": {
        "startLine": 47,
        "startChar": 2,
        "endLine": 47,
        "endChar": 14
      },
      "revId": "da9fcfb2e483441084c788b02248a40d035b4262",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0ab06576_44f7b765",
        "filename": "base/trace_event/freed_object_tracker.cc",
        "patchSetId": 7
      },
      "lineNbr": 47,
      "author": {
        "id": 1117419
      },
      "writtenOn": "2017-09-20T15:15:11Z",
      "side": 1,
      "message": "Won\u0027t the expansion typically require a different allocation and thus end up freeing this one?  I think it\u0027s more important to record the change so that something can\u0027t get missed rather than what was here two allocation operations ago.",
      "parentUuid": "bda7945f_9c31ddbe",
      "range": {
        "startLine": 47,
        "startChar": 2,
        "endLine": 47,
        "endChar": 14
      },
      "revId": "da9fcfb2e483441084c788b02248a40d035b4262",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0872116d_44a7314d",
        "filename": "base/trace_event/freed_object_tracker.cc",
        "patchSetId": 7
      },
      "lineNbr": 47,
      "author": {
        "id": 1002871
      },
      "writtenOn": "2017-09-20T15:47:44Z",
      "side": 1,
      "message": "Ahh you are right. \nI think the proper way to do this is flip it a bit and do:\n{\n  const AllocatorDispatch* const next \u003d self-\u003enext;\n  void* new_addr \u003d next-\u003erealloc_function(next, address, size, context);\n\n  if (size \u003d\u003d 0 || new_addr !\u003d address)\n   FreedObjectTracker::GetInstance()-\u003eRemoveAllocation(address);\n  return new_addr; \n}\n\nI am saying this because I saw way more reallocs than what I was expecting in chrome (some libraries use that systematically just to malloc()).\nSo I fear that if you always assume this is a free you might end u w/ lot of false positives",
      "parentUuid": "0ab06576_44f7b765",
      "range": {
        "startLine": 47,
        "startChar": 2,
        "endLine": 47,
        "endChar": 14
      },
      "revId": "da9fcfb2e483441084c788b02248a40d035b4262",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5e78a5dc_289d5112",
        "filename": "base/trace_event/freed_object_tracker.cc",
        "patchSetId": 7
      },
      "lineNbr": 47,
      "author": {
        "id": 1117419
      },
      "writtenOn": "2017-09-20T17:24:48Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0872116d_44a7314d",
      "range": {
        "startLine": 47,
        "startChar": 2,
        "endLine": 47,
        "endChar": 14
      },
      "revId": "da9fcfb2e483441084c788b02248a40d035b4262",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7034d31b_54931945",
        "filename": "base/trace_event/freed_object_tracker.cc",
        "patchSetId": 7
      },
      "lineNbr": 116,
      "author": {
        "id": 1002871
      },
      "writtenOn": "2017-09-20T14:33:32Z",
      "side": 1,
      "message": "LeakyInstance (see other comment)",
      "range": {
        "startLine": 116,
        "startChar": 8,
        "endLine": 116,
        "endChar": 18
      },
      "revId": "da9fcfb2e483441084c788b02248a40d035b4262",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cf1f16e0_400c0a5a",
        "filename": "base/trace_event/freed_object_tracker.cc",
        "patchSetId": 7
      },
      "lineNbr": 116,
      "author": {
        "id": 1117419
      },
      "writtenOn": "2017-09-20T15:15:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7034d31b_54931945",
      "range": {
        "startLine": 116,
        "startChar": 8,
        "endLine": 116,
        "endChar": 18
      },
      "revId": "da9fcfb2e483441084c788b02248a40d035b4262",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "edc795f8_4b9aaf40",
        "filename": "base/trace_event/freed_object_tracker.h",
        "patchSetId": 7
      },
      "lineNbr": 39,
      "author": {
        "id": 1002871
      },
      "writtenOn": "2017-09-20T14:33:32Z",
      "side": 1,
      "message": "use LazyInstance::Leaky, it is slightly more performance.\nLazyInstance includes the storage for the object (FreedObjectTracker) in the global, so it gets linker initialized and can be dereferenced directly.\nsingleton instead will do a new() heap allocation to initialize the instance, and each access will require one extra dereferencing.",
      "range": {
        "startLine": 39,
        "startChar": 16,
        "endLine": 39,
        "endChar": 38
      },
      "revId": "da9fcfb2e483441084c788b02248a40d035b4262",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "02c7678c_99815049",
        "filename": "base/trace_event/freed_object_tracker.h",
        "patchSetId": 7
      },
      "lineNbr": 39,
      "author": {
        "id": 1117419
      },
      "writtenOn": "2017-09-20T15:15:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "edc795f8_4b9aaf40",
      "range": {
        "startLine": 39,
        "startChar": 16,
        "endLine": 39,
        "endChar": 38
      },
      "revId": "da9fcfb2e483441084c788b02248a40d035b4262",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f8addb2f_428e5a35",
        "filename": "chrome/browser/chrome_browser_field_trials.cc",
        "patchSetId": 7
      },
      "lineNbr": 243,
      "author": {
        "id": 1103654
      },
      "writtenOn": "2017-09-20T21:56:56Z",
      "side": 1,
      "message": "Use a base::Feature instead.",
      "range": {
        "startLine": 243,
        "startChar": 75,
        "endLine": 243,
        "endChar": 0
      },
      "revId": "da9fcfb2e483441084c788b02248a40d035b4262",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}