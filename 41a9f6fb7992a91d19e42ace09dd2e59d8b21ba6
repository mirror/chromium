{
  "comments": [
    {
      "key": {
        "uuid": "af96d5e7_c51002e1",
        "filename": "content/browser/loader/mojo_async_resource_handler.cc",
        "patchSetId": 7
      },
      "lineNbr": 190,
      "author": {
        "id": 1002532
      },
      "writtenOn": "2018-01-03T17:03:07Z",
      "side": 1,
      "message": "It\u0027s a bit unfortunate that we duplicate this logic from NavigationURLLoaderNetworkService, see https://cs.chromium.org/chromium/src/content/browser/loader/navigation_url_loader_network_service.cc?rcl\u003de8955cf2f5c6603111eb39b34990f26bc053e911\u0026l\u003d415. Since requests are initiated from that class (right?) can we share the part that sets the options? i.e. right now it also sets kURLLoadOptionSendSSLInfoForCertificateError for RESOURCE_TYPE_MAIN_FRAME which we need.",
      "revId": "41a9f6fb7992a91d19e42ace09dd2e59d8b21ba6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "33572a6a_4bd442da",
        "filename": "content/browser/loader/mojo_async_resource_handler.cc",
        "patchSetId": 7
      },
      "lineNbr": 190,
      "author": {
        "id": 1228344
      },
      "writtenOn": "2018-01-03T17:25:57Z",
      "side": 1,
      "message": "Okay I see.\n\nIf I understand you correctly:\n1) Factorize the part that set the option in navigation_url_loader_network_service.cc\n2) Add the |option| member to the MojoAsyncResourceHandler.\n3) Use \n   *  (options_ \u0026 mojom::kURLLoadOptionSendSSLInfoWithResponse) in OnResponseStarted\n   *  (options_ \u0026 mojom::kURLLoadOptionSendSSLInfoForCertificateError) in OnComplete like it is done in in URLLoader::NotifyCompleted.\n\nI will do it tomorrow.",
      "parentUuid": "af96d5e7_c51002e1",
      "revId": "41a9f6fb7992a91d19e42ace09dd2e59d8b21ba6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ca1cf5da_2ce7a213",
        "filename": "content/browser/loader/mojo_async_resource_handler.cc",
        "patchSetId": 7
      },
      "lineNbr": 190,
      "author": {
        "id": 1002532
      },
      "writtenOn": "2018-01-03T17:28:30Z",
      "side": 1,
      "message": "here\u0027s a strawman:\n\n1) NavigationURLLoaderNetworkService::NavigationURLLoaderNetworkService can have:\n  uint32_t options \u003d kURLLoadOptionSendSSLInfoWithResponse;\n  if (resource_request_-\u003eresource_type \u003d\u003d RESOURCE_TYPE_MAIN_FRAME)\n    options |\u003d mojom::kURLLoadOptionSendSSLInfoForCertificateError;\n  and pass that options to StartWithoutNetworkService and Start\n2) Start can add the other options as before (i.e. kURLLoadOptionSniffMimeType) for the network srevice path\n3) StartWithoutNetworkService can bind the options to the CreateNonNetworkServiceURLLoader callback and pass that to ResourceDispatcherHostImpl::BeginNavigationRequest which pass it to MojoAsyncResourceHandler constructor. The other creator of MojoAsyncResourceHandler can pass in 0.\n4) MojoAsyncResourceHandler can then pass the SSL data based on those flags",
      "parentUuid": "af96d5e7_c51002e1",
      "revId": "41a9f6fb7992a91d19e42ace09dd2e59d8b21ba6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d85ab204_2600c63f",
        "filename": "content/browser/loader/mojo_async_resource_handler.cc",
        "patchSetId": 7
      },
      "lineNbr": 190,
      "author": {
        "id": 1002532
      },
      "writtenOn": "2018-01-03T17:29:33Z",
      "side": 1,
      "message": "our messages crossed, yep :)",
      "parentUuid": "ca1cf5da_2ce7a213",
      "revId": "41a9f6fb7992a91d19e42ace09dd2e59d8b21ba6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5624789c_1913e703",
        "filename": "content/browser/loader/mojo_async_resource_handler.cc",
        "patchSetId": 7
      },
      "lineNbr": 190,
      "author": {
        "id": 1115881
      },
      "writtenOn": "2018-01-04T12:16:23Z",
      "side": 1,
      "message": "Can we also check in MojoAsyncResourceHandler that kURLLoadOptionSendSSLInfoWithResponse is only set for navigations, and not subresources? (maybe if the option is renamed kURLLoadOptionSendSSLInfoWithNavigationResponse?) - we can restrict that requirement later if some other user of the network service needs to use it, but for now I think it\u0027d be better to preserve this.",
      "parentUuid": "d85ab204_2600c63f",
      "revId": "41a9f6fb7992a91d19e42ace09dd2e59d8b21ba6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "03709f3c_e61f25af",
        "filename": "content/browser/loader/mojo_async_resource_handler.cc",
        "patchSetId": 7
      },
      "lineNbr": 190,
      "author": {
        "id": 1002532
      },
      "writtenOn": "2018-01-04T16:11:05Z",
      "side": 1,
      "message": "\u003e Can we also check in MojoAsyncResourceHandler that kURLLoadOptionSendSSLInfoWithResponse is only set for navigations, and not subresources? (maybe if the option is renamed kURLLoadOptionSendSSLInfoWithNavigationResponse?) - we can restrict that requirement later if some other user of the network service needs to use it, but for now I think it\u0027d be better to preserve this.\n\nWhat do we gain by adding that dcheck? One way to look at it is that MojoAsyncResourceHandler is deprecated, and content::URLLoader is the new way. Since we wouldn\u0027t add that check to URLLoader, I\u0027m not sure why we would duplicate the logic of when to request SSLInfo (through options in one place, and a DCHECK in another)?\n\nRegarding renaming the option: the network service is meant to be agnostic as to what types of requests it\u0027s making. That\u0027s why the option names don\u0027t reflect the resource type, but instead the behavior that the consumer wants.",
      "parentUuid": "5624789c_1913e703",
      "revId": "41a9f6fb7992a91d19e42ace09dd2e59d8b21ba6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}