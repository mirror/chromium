// Generated by generate_javascript_parser_proto.py.

#include "testing/libfuzzer/fuzzers/javascript_parser_proto_to_string.h"

std::string token_to_string(const javascript_parser_proto_fuzzer::Token& token) {
  switch(token.value()) {
    case 0:
      return std::string(" ");
    case 1:
      return std::string("(");
    case 2:
      return std::string(")");
    case 3:
      return std::string("[");
    case 4:
      return std::string("]");
    case 5:
      return std::string("{");
    case 6:
      return std::string("}");
    case 7:
      return std::string(":");
    case 8:
      return std::string(";");
    case 9:
      return std::string(".");
    case 10:
      return std::string("...");
    case 11:
      return std::string("?");
    case 12:
      return std::string("++");
    case 13:
      return std::string("--");
    case 14:
      return std::string("=>");
    case 15:
      return std::string("!");
    case 16:
      return std::string("=");
    case 17:
      return std::string("|=");
    case 18:
      return std::string("^=");
    case 19:
      return std::string("&=");
    case 20:
      return std::string("<<=");
    case 21:
      return std::string(">>=");
    case 22:
      return std::string(">>>=");
    case 23:
      return std::string("+=");
    case 24:
      return std::string("-=");
    case 25:
      return std::string("*=");
    case 26:
      return std::string("/=");
    case 27:
      return std::string("%=");
    case 28:
      return std::string("**=");
    case 29:
      return std::string(",");
    case 30:
      return std::string("||");
    case 31:
      return std::string("&&");
    case 32:
      return std::string("|");
    case 33:
      return std::string("^");
    case 34:
      return std::string("&");
    case 35:
      return std::string("<<");
    case 36:
      return std::string(">>");
    case 37:
      return std::string(">>>");
    case 38:
      return std::string("+");
    case 39:
      return std::string("-");
    case 40:
      return std::string("*");
    case 41:
      return std::string("/");
    case 42:
      return std::string("%");
    case 43:
      return std::string("**");
    case 44:
      return std::string("==");
    case 45:
      return std::string("!=");
    case 46:
      return std::string("===");
    case 47:
      return std::string("!==");
    case 48:
      return std::string("<");
    case 49:
      return std::string(">");
    case 50:
      return std::string("<=");
    case 51:
      return std::string(">=");
    case 52:
      return std::string("!");
    case 53:
      return std::string("~");
    case 54:
      return std::string("__proto__");
    case 55:
      return std::string("anonymous");
    case 56:
      return std::string("arguments");
    case 57:
      return std::string("as");
    case 58:
      return std::string("async");
    case 59:
      return std::string("await");
    case 60:
      return std::string("break");
    case 61:
      return std::string("case");
    case 62:
      return std::string("catch");
    case 63:
      return std::string("class");
    case 64:
      return std::string("const");
    case 65:
      return std::string("constructor");
    case 66:
      return std::string("continue");
    case 67:
      return std::string("debugger");
    case 68:
      return std::string("default");
    case 69:
      return std::string("delete");
    case 70:
      return std::string("do");
    case 71:
      return std::string("else");
    case 72:
      return std::string("enum");
    case 73:
      return std::string("eval");
    case 74:
      return std::string("export");
    case 75:
      return std::string("extends");
    case 76:
      return std::string("false");
    case 77:
      return std::string("finally");
    case 78:
      return std::string("for");
    case 79:
      return std::string("from");
    case 80:
      return std::string("function");
    case 81:
      return std::string("get");
    case 82:
      return std::string("if");
    case 83:
      return std::string("import");
    case 84:
      return std::string("in");
    case 85:
      return std::string("instanceof");
    case 86:
      return std::string("let");
    case 87:
      return std::string("name");
    case 88:
      return std::string("new");
    case 89:
      return std::string("null");
    case 90:
      return std::string("of");
    case 91:
      return std::string("prototype");
    case 92:
      return std::string("return");
    case 93:
      return std::string("sent");
    case 94:
      return std::string("set");
    case 95:
      return std::string("static");
    case 96:
      return std::string("super");
    case 97:
      return std::string("switch");
    case 98:
      return std::string("target");
    case 99:
      return std::string("this");
    case 100:
      return std::string("throw");
    case 101:
      return std::string("true");
    case 102:
      return std::string("try");
    case 103:
      return std::string("typeof");
    case 104:
      return std::string("undefined");
    case 105:
      return std::string("var");
    case 106:
      return std::string("void");
    case 107:
      return std::string("while");
    case 108:
      return std::string("with");
    case 109:
      return std::string("\n");
    case 110:
      return std::string("; ");
    case 111:
      if (token.inner_tokens().size() < 1) return std::string("");
      return token_to_string(token.inner_tokens(0)) + std::string(" ") + std::string("\n");
    case 112:
      if (token.inner_tokens().size() < 1) return std::string("");
      return token_to_string(token.inner_tokens(0)) + std::string(" ") + std::string("; ");
    case 113:
      if (token.inner_tokens().size() < 2) return std::string("");
      return token_to_string(token.inner_tokens(0)) + std::string(" ") + std::string(",") + std::string(" ") + token_to_string(token.inner_tokens(1));
    case 114:
      if (token.inner_tokens().size() < 1) return std::string("");
      return std::string("(") + std::string(" ") + token_to_string(token.inner_tokens(0)) + std::string(" ") + std::string(")");
    case 115:
      return std::string("foo");
    case 116:
      return std::string("bar");
    case 117:
      return std::string("a");
    case 118:
      return std::string("b");
    case 119:
      return std::string("c");
    case 120:
      return std::string("0");
    case 121:
      return std::string("0.0");
    case 122:
      return std::string("new.target");
    case 123:
      if (token.inner_tokens().size() < 1) return std::string("");
      return std::string("{") + std::string(" ") + token_to_string(token.inner_tokens(0)) + std::string(" ") + std::string("}");
    case 124:
      if (token.inner_tokens().size() < 2) return std::string("");
      return std::string("{") + std::string(" ") + token_to_string(token.inner_tokens(0)) + std::string(" ") + std::string(": ") + std::string(" ") + token_to_string(token.inner_tokens(1)) + std::string(" ") + std::string("}");
    case 125:
      if (token.inner_tokens().size() < 1) return std::string("");
      return std::string("[") + std::string(" ") + token_to_string(token.inner_tokens(0)) + std::string(" ") + std::string("]");
    case 126:
      return std::string("...");
    case 127:
      if (token.inner_tokens().size() < 1) return std::string("");
      return std::string("...") + std::string(" ") + token_to_string(token.inner_tokens(0));
    case 128:
      if (token.inner_tokens().size() < 2) return std::string("");
      return std::string("let") + std::string(" ") + token_to_string(token.inner_tokens(0)) + std::string(" ") + std::string("=") + std::string(" ") + token_to_string(token.inner_tokens(1)) + std::string(" ") + std::string(";");
    case 129:
      if (token.inner_tokens().size() < 2) return std::string("");
      return std::string("const ") + std::string(" ") + token_to_string(token.inner_tokens(0)) + std::string(" ") + std::string("=") + std::string(" ") + token_to_string(token.inner_tokens(1)) + std::string(" ") + std::string(";");
    case 130:
      if (token.inner_tokens().size() < 2) return std::string("");
      return std::string("var") + std::string(" ") + token_to_string(token.inner_tokens(0)) + std::string(" ") + std::string("=") + std::string(" ") + token_to_string(token.inner_tokens(1)) + std::string(" ") + std::string(";");
    case 131:
      if (token.inner_tokens().size() < 1) return std::string("");
      return std::string("return") + std::string(" ") + token_to_string(token.inner_tokens(0));
    case 132:
      if (token.inner_tokens().size() < 1) return std::string("");
      return std::string("return") + std::string(" ") + token_to_string(token.inner_tokens(0)) + std::string(" ") + std::string(";");
    case 133:
      if (token.inner_tokens().size() < 2) return std::string("");
      return std::string("if (") + std::string(" ") + token_to_string(token.inner_tokens(0)) + std::string(" ") + std::string(")") + std::string(" ") + token_to_string(token.inner_tokens(1));
    case 134:
      if (token.inner_tokens().size() < 2) return std::string("");
      return std::string("if (") + std::string(" ") + token_to_string(token.inner_tokens(0)) + std::string(" ") + std::string(") {") + std::string(" ") + token_to_string(token.inner_tokens(1)) + std::string(" ") + std::string("}");
    case 135:
      if (token.inner_tokens().size() < 3) return std::string("");
      return std::string("if (") + std::string(" ") + token_to_string(token.inner_tokens(0)) + std::string(" ") + std::string(") {") + std::string(" ") + token_to_string(token.inner_tokens(1)) + std::string(" ") + std::string("} else {") + std::string(" ") + token_to_string(token.inner_tokens(2)) + std::string(" ") + std::string("}");
    case 136:
      if (token.inner_tokens().size() < 3) return std::string("");
      return std::string("if (") + std::string(" ") + token_to_string(token.inner_tokens(0)) + std::string(" ") + std::string(")") + std::string(" ") + token_to_string(token.inner_tokens(1)) + std::string(" ") + std::string("else") + std::string(" ") + token_to_string(token.inner_tokens(2));
    case 137:
      if (token.inner_tokens().size() < 2) return std::string("");
      return std::string("do") + std::string(" ") + token_to_string(token.inner_tokens(0)) + std::string(" ") + std::string("while (") + std::string(" ") + token_to_string(token.inner_tokens(1)) + std::string(" ") + std::string(");");
    case 138:
      if (token.inner_tokens().size() < 2) return std::string("");
      return std::string("for (") + std::string(" ") + token_to_string(token.inner_tokens(0)) + std::string(" ") + std::string(")") + std::string(" ") + token_to_string(token.inner_tokens(1));
    case 139:
      if (token.inner_tokens().size() < 2) return std::string("");
      return std::string("for (") + std::string(" ") + token_to_string(token.inner_tokens(0)) + std::string(" ") + std::string(") {") + std::string(" ") + token_to_string(token.inner_tokens(1)) + std::string(" ") + std::string(" }");
    case 140:
      if (token.inner_tokens().size() < 3) return std::string("");
      return std::string("for (") + std::string(" ") + token_to_string(token.inner_tokens(0)) + std::string(" ") + std::string("in") + std::string(" ") + token_to_string(token.inner_tokens(1)) + std::string(" ") + std::string(")") + std::string(" ") + token_to_string(token.inner_tokens(2));
    case 141:
      if (token.inner_tokens().size() < 3) return std::string("");
      return std::string("for (") + std::string(" ") + token_to_string(token.inner_tokens(0)) + std::string(" ") + std::string("in") + std::string(" ") + token_to_string(token.inner_tokens(1)) + std::string(" ") + std::string(") {") + std::string(" ") + token_to_string(token.inner_tokens(2)) + std::string(" ") + std::string("}");
    case 142:
      if (token.inner_tokens().size() < 3) return std::string("");
      return std::string("for (") + std::string(" ") + token_to_string(token.inner_tokens(0)) + std::string(" ") + std::string("of") + std::string(" ") + token_to_string(token.inner_tokens(1)) + std::string(" ") + std::string(")") + std::string(" ") + token_to_string(token.inner_tokens(2));
    case 143:
      if (token.inner_tokens().size() < 3) return std::string("");
      return std::string("for (") + std::string(" ") + token_to_string(token.inner_tokens(0)) + std::string(" ") + std::string("of") + std::string(" ") + token_to_string(token.inner_tokens(1)) + std::string(" ") + std::string(") {") + std::string(" ") + token_to_string(token.inner_tokens(2)) + std::string(" ") + std::string("}");
    case 144:
      return std::string("continue");
    case 145:
      return std::string("continue;");
    case 146:
      if (token.inner_tokens().size() < 1) return std::string("");
      return std::string("continue") + std::string(" ") + token_to_string(token.inner_tokens(0));
    case 147:
      return std::string("break");
    case 148:
      return std::string("break;");
    case 149:
      if (token.inner_tokens().size() < 1) return std::string("");
      return std::string("break") + std::string(" ") + token_to_string(token.inner_tokens(0));
    case 150:
      if (token.inner_tokens().size() < 2) return std::string("");
      return std::string("with (") + std::string(" ") + token_to_string(token.inner_tokens(0)) + std::string(" ") + std::string(")") + std::string(" ") + token_to_string(token.inner_tokens(1));
    case 151:
      if (token.inner_tokens().size() < 2) return std::string("");
      return std::string("with (") + std::string(" ") + token_to_string(token.inner_tokens(0)) + std::string(" ") + std::string(") {") + std::string(" ") + token_to_string(token.inner_tokens(1)) + std::string(" ") + std::string("}");
    case 152:
      if (token.inner_tokens().size() < 2) return std::string("");
      return std::string("switch (") + std::string(" ") + token_to_string(token.inner_tokens(0)) + std::string(" ") + std::string(")") + std::string(" ") + token_to_string(token.inner_tokens(1));
    case 153:
      if (token.inner_tokens().size() < 2) return std::string("");
      return std::string("case") + std::string(" ") + token_to_string(token.inner_tokens(0)) + std::string(" ") + std::string(": ") + std::string(" ") + token_to_string(token.inner_tokens(1));
    case 154:
      if (token.inner_tokens().size() < 1) return std::string("");
      return std::string("default :") + std::string(" ") + token_to_string(token.inner_tokens(0));
    case 155:
      if (token.inner_tokens().size() < 3) return std::string("");
      return std::string("try") + std::string(" ") + token_to_string(token.inner_tokens(0)) + std::string(" ") + std::string("catch (") + std::string(" ") + token_to_string(token.inner_tokens(1)) + std::string(" ") + std::string(")") + std::string(" ") + token_to_string(token.inner_tokens(2));
    case 156:
      if (token.inner_tokens().size() < 3) return std::string("");
      return std::string("try {") + std::string(" ") + token_to_string(token.inner_tokens(0)) + std::string(" ") + std::string("} catch (") + std::string(" ") + token_to_string(token.inner_tokens(1)) + std::string(" ") + std::string(") {") + std::string(" ") + token_to_string(token.inner_tokens(2)) + std::string(" ") + std::string("}");
    case 157:
      if (token.inner_tokens().size() < 3) return std::string("");
      return std::string("try") + std::string(" ") + token_to_string(token.inner_tokens(0)) + std::string(" ") + std::string("finally (") + std::string(" ") + token_to_string(token.inner_tokens(1)) + std::string(" ") + std::string(")") + std::string(" ") + token_to_string(token.inner_tokens(2));
    case 158:
      if (token.inner_tokens().size() < 3) return std::string("");
      return std::string("try {") + std::string(" ") + token_to_string(token.inner_tokens(0)) + std::string(" ") + std::string("} finally (") + std::string(" ") + token_to_string(token.inner_tokens(1)) + std::string(" ") + std::string(") {") + std::string(" ") + token_to_string(token.inner_tokens(2)) + std::string(" ") + std::string("}");
    case 159:
      if (token.inner_tokens().size() < 4) return std::string("");
      return std::string("try") + std::string(" ") + token_to_string(token.inner_tokens(0)) + std::string(" ") + std::string("catch (") + std::string(" ") + token_to_string(token.inner_tokens(1)) + std::string(" ") + std::string(")") + std::string(" ") + token_to_string(token.inner_tokens(2)) + std::string(" ") + std::string("finally") + std::string(" ") + token_to_string(token.inner_tokens(3));
    case 160:
      if (token.inner_tokens().size() < 4) return std::string("");
      return std::string("try {") + std::string(" ") + token_to_string(token.inner_tokens(0)) + std::string(" ") + std::string("} catch (") + std::string(" ") + token_to_string(token.inner_tokens(1)) + std::string(" ") + std::string(") {") + std::string(" ") + token_to_string(token.inner_tokens(2)) + std::string(" ") + std::string("} finally {") + std::string(" ") + token_to_string(token.inner_tokens(3)) + std::string(" ") + std::string("}");
    case 161:
      if (token.inner_tokens().size() < 3) return std::string("");
      return std::string("function") + std::string(" ") + token_to_string(token.inner_tokens(0)) + std::string(" ") + std::string("(") + std::string(" ") + token_to_string(token.inner_tokens(1)) + std::string(" ") + std::string(") {") + std::string(" ") + token_to_string(token.inner_tokens(2)) + std::string(" ") + std::string("}");
    case 162:
      if (token.inner_tokens().size() < 2) return std::string("");
      return std::string("function") + std::string(" ") + std::string("(") + std::string(" ") + token_to_string(token.inner_tokens(0)) + std::string(" ") + std::string(") {") + std::string(" ") + token_to_string(token.inner_tokens(1)) + std::string(" ") + std::string("}");
    case 163:
      if (token.inner_tokens().size() < 2) return std::string("");
      return token_to_string(token.inner_tokens(0)) + std::string(" ") + std::string("=>") + std::string(" ") + token_to_string(token.inner_tokens(1));
    case 164:
      if (token.inner_tokens().size() < 2) return std::string("");
      return token_to_string(token.inner_tokens(0)) + std::string(" ") + std::string("=> {") + std::string(" ") + token_to_string(token.inner_tokens(1)) + std::string(" ") + std::string("}");
    case 165:
      if (token.inner_tokens().size() < 2) return std::string("");
      return std::string("(") + std::string(" ") + token_to_string(token.inner_tokens(0)) + std::string(" ") + std::string(") => {") + std::string(" ") + token_to_string(token.inner_tokens(1)) + std::string(" ") + std::string("}");
    case 166:
      if (token.inner_tokens().size() < 2) return std::string("");
      return std::string("(") + std::string(" ") + token_to_string(token.inner_tokens(0)) + std::string(" ") + std::string(") =>") + std::string(" ") + token_to_string(token.inner_tokens(1));
    case 167:
      if (token.inner_tokens().size() < 2) return std::string("");
      return token_to_string(token.inner_tokens(0)) + std::string(" ") + std::string("(") + std::string(" ") + token_to_string(token.inner_tokens(1)) + std::string(" ") + std::string(") {") + std::string(" ") + token_to_string(token.inner_tokens(1)) + std::string(" ") + std::string("}");
    case 168:
      if (token.inner_tokens().size() < 2) return std::string("");
      return std::string("get") + std::string(" ") + token_to_string(token.inner_tokens(0)) + std::string(" ") + std::string("(") + std::string(" ") + token_to_string(token.inner_tokens(1)) + std::string(" ") + std::string(") {") + std::string(" ") + token_to_string(token.inner_tokens(1)) + std::string(" ") + std::string("}");
    case 169:
      if (token.inner_tokens().size() < 2) return std::string("");
      return std::string("set") + std::string(" ") + token_to_string(token.inner_tokens(0)) + std::string(" ") + std::string("(") + std::string(" ") + token_to_string(token.inner_tokens(1)) + std::string(" ") + std::string(") {") + std::string(" ") + token_to_string(token.inner_tokens(1)) + std::string(" ") + std::string("}");
    case 170:
      if (token.inner_tokens().size() < 2) return std::string("");
      return std::string("static") + std::string(" ") + token_to_string(token.inner_tokens(0)) + std::string(" ") + std::string("(") + std::string(" ") + token_to_string(token.inner_tokens(1)) + std::string(" ") + std::string(") {") + std::string(" ") + token_to_string(token.inner_tokens(1)) + std::string(" ") + std::string("}");
    case 171:
      if (token.inner_tokens().size() < 2) return std::string("");
      return std::string("static get") + std::string(" ") + token_to_string(token.inner_tokens(0)) + std::string(" ") + std::string("(") + std::string(" ") + token_to_string(token.inner_tokens(1)) + std::string(" ") + std::string(") {") + std::string(" ") + token_to_string(token.inner_tokens(1)) + std::string(" ") + std::string("}");
    case 172:
      if (token.inner_tokens().size() < 2) return std::string("");
      return std::string("static set") + std::string(" ") + token_to_string(token.inner_tokens(0)) + std::string(" ") + std::string("(") + std::string(" ") + token_to_string(token.inner_tokens(1)) + std::string(" ") + std::string(") {") + std::string(" ") + token_to_string(token.inner_tokens(1)) + std::string(" ") + std::string("}");
    case 173:
      if (token.inner_tokens().size() < 3) return std::string("");
      return std::string("*") + std::string(" ") + token_to_string(token.inner_tokens(0)) + std::string(" ") + std::string("(") + std::string(" ") + token_to_string(token.inner_tokens(1)) + std::string(" ") + std::string(") {") + std::string(" ") + token_to_string(token.inner_tokens(2)) + std::string(" ") + std::string("}");
    case 174:
      if (token.inner_tokens().size() < 3) return std::string("");
      return std::string("function *") + std::string(" ") + token_to_string(token.inner_tokens(0)) + std::string(" ") + std::string("(") + std::string(" ") + token_to_string(token.inner_tokens(1)) + std::string(" ") + std::string(") {") + std::string(" ") + token_to_string(token.inner_tokens(2)) + std::string(" ") + std::string("}");
    case 175:
      if (token.inner_tokens().size() < 3) return std::string("");
      return std::string("function * (") + std::string(" ") + token_to_string(token.inner_tokens(1)) + std::string(" ") + std::string(") {") + std::string(" ") + token_to_string(token.inner_tokens(2)) + std::string(" ") + std::string("}");
    case 176:
      if (token.inner_tokens().size() < 1) return std::string("");
      return std::string("yield") + std::string(" ") + token_to_string(token.inner_tokens(0));
    case 177:
      if (token.inner_tokens().size() < 1) return std::string("");
      return std::string("yield *") + std::string(" ") + token_to_string(token.inner_tokens(0));
    case 178:
      if (token.inner_tokens().size() < 2) return std::string("");
      return std::string("class") + std::string(" ") + token_to_string(token.inner_tokens(0)) + std::string(" ") + std::string("{") + std::string(" ") + token_to_string(token.inner_tokens(1)) + std::string(" ") + std::string("}");
    case 179:
      if (token.inner_tokens().size() < 3) return std::string("");
      return std::string("class") + std::string(" ") + token_to_string(token.inner_tokens(0)) + std::string(" ") + std::string("extends") + std::string(" ") + token_to_string(token.inner_tokens(1)) + std::string(" ") + std::string("{") + std::string(" ") + token_to_string(token.inner_tokens(2)) + std::string(" ") + std::string("}");
    case 180:
      if (token.inner_tokens().size() < 3) return std::string("");
      return std::string("async function") + std::string(" ") + token_to_string(token.inner_tokens(0)) + std::string(" ") + std::string("(") + std::string(" ") + token_to_string(token.inner_tokens(1)) + std::string(" ") + std::string(") {") + std::string(" ") + token_to_string(token.inner_tokens(2)) + std::string(" ") + std::string("}");
    case 181:
      if (token.inner_tokens().size() < 2) return std::string("");
      return std::string("async function") + std::string(" ") + std::string("(") + std::string(" ") + token_to_string(token.inner_tokens(0)) + std::string(" ") + std::string(") {") + std::string(" ") + token_to_string(token.inner_tokens(1)) + std::string(" ") + std::string("}");
    case 182:
      if (token.inner_tokens().size() < 3) return std::string("");
      return std::string("async") + std::string(" ") + token_to_string(token.inner_tokens(0)) + std::string(" ") + std::string("(") + std::string(" ") + token_to_string(token.inner_tokens(1)) + std::string(" ") + std::string(") {") + std::string(" ") + token_to_string(token.inner_tokens(2)) + std::string(" ") + std::string("}");
    case 183:
      if (token.inner_tokens().size() < 2) return std::string("");
      return std::string("async") + std::string(" ") + token_to_string(token.inner_tokens(0)) + std::string(" ") + std::string("=>") + std::string(" ") + token_to_string(token.inner_tokens(1));
    case 184:
      if (token.inner_tokens().size() < 2) return std::string("");
      return std::string("async") + std::string(" ") + token_to_string(token.inner_tokens(0)) + std::string(" ") + std::string("=> {") + std::string(" ") + token_to_string(token.inner_tokens(1)) + std::string(" ") + std::string("}");
    case 185:
      if (token.inner_tokens().size() < 2) return std::string("");
      return std::string("async(") + std::string(" ") + token_to_string(token.inner_tokens(0)) + std::string(" ") + std::string(") => {") + std::string(" ") + token_to_string(token.inner_tokens(1)) + std::string(" ") + std::string("}");
    case 186:
      if (token.inner_tokens().size() < 2) return std::string("");
      return std::string("async(") + std::string(" ") + token_to_string(token.inner_tokens(0)) + std::string(" ") + std::string(") =>") + std::string(" ") + token_to_string(token.inner_tokens(1));
    case 187:
      if (token.inner_tokens().size() < 1) return std::string("");
      return std::string("await") + std::string(" ") + token_to_string(token.inner_tokens(0));
    case 188:
      if (token.inner_tokens().size() < 2) return std::string("");
      return token_to_string(token.inner_tokens(0)) + std::string(" ") + std::string("[") + std::string(" ") + token_to_string(token.inner_tokens(1)) + std::string(" ") + std::string("]");
    case 189:
      if (token.inner_tokens().size() < 2) return std::string("");
      return token_to_string(token.inner_tokens(0)) + std::string(" ") + std::string("(") + std::string(" ") + token_to_string(token.inner_tokens(1)) + std::string(" ") + std::string(")");
default: break;
  }
  return std::string("");
}