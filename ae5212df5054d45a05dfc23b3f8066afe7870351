{
  "comments": [
    {
      "key": {
        "uuid": "2451091f_42088c23",
        "filename": "content/public/browser/web_contents_observer.h",
        "patchSetId": 3
      },
      "lineNbr": 468,
      "author": {
        "id": 1001500
      },
      "writtenOn": "2017-08-07T23:30:17Z",
      "side": 1,
      "message": "In general, we avoid adding public APIs unless they are used outside of content/. In this CL this is the case and the main reason I can see going this route is to build on top of WebContentsObserver. I think the approach is reasonable, but the method seems very specific to be of more general use outside of content. As such, I\u0027d suggest we explore a different way to notify DialogOverlayImpl more directly.",
      "revId": "ae5212df5054d45a05dfc23b3f8066afe7870351",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ef252065_a4f000bb",
        "filename": "content/public/browser/web_contents_observer.h",
        "patchSetId": 3
      },
      "lineNbr": 468,
      "author": {
        "id": 1130490
      },
      "writtenOn": "2017-08-08T16:33:53Z",
      "side": 1,
      "message": "would you object to a new observer that\u0027s internal to content/ ?  maybe specific like PersistentVideoObserver or general like WebContentsImplObserver?  it\u0027ll have two or three PV-related methods, and two consumers (MediaWebContentsObserver, DialogOverlayImpl) by the time the dust settles.\n\ni\u0027m trying to keep WebContents as the thing sending out the notification of state changes.  the alternative is to have some sideband channel in PictureInPictureController.java \u003d\u003e DialogOverlayImpl, where the signal to WC originates.  that seems fragile.",
      "parentUuid": "2451091f_42088c23",
      "revId": "ae5212df5054d45a05dfc23b3f8066afe7870351",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "af291f09_f2b5ff35",
        "filename": "content/public/browser/web_contents_observer.h",
        "patchSetId": 3
      },
      "lineNbr": 468,
      "author": {
        "id": 1002725
      },
      "writtenOn": "2017-08-08T20:59:18Z",
      "side": 1,
      "message": "\u003e would you object to a new observer that\u0027s internal to content/ ?  maybe specific like PersistentVideoObserver or general like WebContentsImplObserver?  it\u0027ll have two or three PV-related methods, and two consumers (MediaWebContentsObserver, DialogOverlayImpl) by the time the dust settles.\n\u003e \n\u003e i\u0027m trying to keep WebContents as the thing sending out the notification of state changes.  the alternative is to have some sideband channel in PictureInPictureController.java \u003d\u003e DialogOverlayImpl, where the signal to WC originates.  that seems fragile.\n\nHaven\u0027t read the whole thing yet, but joining this debate..\n\nObserver pattern suggests the observer is at a \"higher layer\" than WebContents. Is that the case? ie is the long term goal to to factor out Overlay stuff out of content? If yes, then by all means create a public content api for it (ie the side channel). I\u0027m guessing this is not the case though?\n\nIf Overlay is an implementation of the web platform, then it\u0027s really below WebContents, then WebContents can just tell Overlay that this setting changed. Two possible ways:\n1) OverlayImpl is an implementation of a renderer side object that\u0027s independent from WebContents. Renderer side already knows this setting, so renderer side can just pass up the setting again. Tedious, ipc round trip delay etc. But keeps OverlayImpl and WebContents separate.\n2) Have some more directly way of WebContents talking to OverlayImpl. OverlayImpl is really tied to a RenderFrameHost instance. So could pass it as WebContentsImpl-\u003eRenderFrameHost-\u003eOverlayImpl, each step taking care of dealing with different lifetimes of objects.",
      "parentUuid": "ef252065_a4f000bb",
      "revId": "ae5212df5054d45a05dfc23b3f8066afe7870351",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "99c0ff48_72bf56dc",
        "filename": "content/public/browser/web_contents_observer.h",
        "patchSetId": 3
      },
      "lineNbr": 468,
      "author": {
        "id": 1130490
      },
      "writtenOn": "2017-08-08T22:17:06Z",
      "side": 1,
      "message": "it\u0027s definitely in the \"implementation of the web platform\" case.\n\n1) the thing that initiates persistent video (chrome/PictureInPictureManager) and DialogOverlayImpl are in the browser.  i suppose that i could have it look up AndroidOverlayProviderImpl, and tell it that it\u0027s about to notify its WebContents about persistent video.  however, the notification seems more like an implementation detail of content/, so maybe better if PiPM didn\u0027t need to know about it.\n\n2) this seems closer to what i was trying to do.  but, how would the WC route a message through the RFHs?  seems more direct for the overlays to regiter on the WC somehow, even if it\u0027s not an observer.\n\nfor context, there will be an IsPersistentVideoAllowed call that also needs to be handled in a later CL.  the reason is that L1 content can\u0027t fall back to non-overlay, so it has to prevent persistent video.",
      "parentUuid": "af291f09_f2b5ff35",
      "revId": "ae5212df5054d45a05dfc23b3f8066afe7870351",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "39ebe1d4_e2fd2282",
        "filename": "content/public/browser/web_contents_observer.h",
        "patchSetId": 3
      },
      "lineNbr": 468,
      "author": {
        "id": 1002725
      },
      "writtenOn": "2017-08-08T22:50:40Z",
      "side": 1,
      "message": "\u003e it\u0027s definitely in the \"implementation of the web platform\" case.\n\u003e \n\u003e 1) the thing that initiates persistent video (chrome/PictureInPictureManager) and DialogOverlayImpl are in the browser.  i suppose that i could have it look up AndroidOverlayProviderImpl, and tell it that it\u0027s about to notify its WebContents about persistent video.  however, the notification seems more like an implementation detail of content/, so maybe better if PiPM didn\u0027t need to know about it.\n\nThat\u0027s not what I meant. The value is already sent to renderer/blink in media_controls_enabled preference. Renderer can just pass that value back up to OverlayImpl through mojo, it would be next to things like scheduleLayout call. It\u0027s an extra ipc round trip though.\n\n\u003e \n\u003e 2) this seems closer to what i was trying to do.  but, how would the WC route a message through the RFHs?\n\nfor (FrameTreeNode* node : frame_tree_.Nodes()) {\n  node-\u003ecurrent_frame_host()-\u003e...\n}\nor WebContentsImpl::GetAllFrames\n\nThen RFH needs to be more tightly coupled with Overlay, and call through to any overlays it owns.\n\nThat also requires dealing with when frames are added (either due to new iframe or due to navigation), but I\u0027m not entirely sure how that should work.. nasko should know? :p\n\n\u003e seems more direct for the overlays to regiter on the WC somehow, even if it\u0027s not an observer.\n\u003e \n\u003e for context, there will be an IsPersistentVideoAllowed call that also needs to be handled in a later CL.  the reason is that L1 content can\u0027t fall back to non-overlay, so it has to prevent persistent video.\n\nwhich direction is that call?",
      "parentUuid": "99c0ff48_72bf56dc",
      "revId": "ae5212df5054d45a05dfc23b3f8066afe7870351",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "518d0d44_10dcf029",
        "filename": "content/public/browser/web_contents_observer.h",
        "patchSetId": 3
      },
      "lineNbr": 468,
      "author": {
        "id": 1130490
      },
      "writtenOn": "2017-08-08T23:29:32Z",
      "side": 1,
      "message": "| through mojo, it would be\n\nsorry, i understood but i deleted an important part of my reply.  :)\n\ntrue, the renderer could forward the signal via mojo.  my concern, then, is that it\u0027s still an implementation detail of when overlays work.  \"persistent video\" isn\u0027t obviously related to overlays from the client\u0027s point of view.\n\nseems a lot simpler for the client if the overlay impl cancels the overlay when needed, similar to the \u0027frame hidden\u0027, etc. cases.\n\n| GetAllFrames\n\nRFH doesn\u0027t currently know anything about the overlays that use it.  maybe they should.  i\u0027ll think about it more.\n\n| which direction is that call?\n\nit would be a call from PiPM to (something) to ask if a transition is okay.  currently, PiPM asks WebContents whether there\u0027s a full screen video.",
      "parentUuid": "39ebe1d4_e2fd2282",
      "revId": "ae5212df5054d45a05dfc23b3f8066afe7870351",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eb66d56a_a2808345",
        "filename": "content/public/browser/web_contents_observer.h",
        "patchSetId": 3
      },
      "lineNbr": 468,
      "author": {
        "id": 1002725
      },
      "writtenOn": "2017-08-08T23:51:48Z",
      "side": 1,
      "message": "\u003e | through mojo, it would be\n\u003e \n\u003e sorry, i understood but i deleted an important part of my reply.  :)\n\u003e \n\u003e true, the renderer could forward the signal via mojo.  my concern, then, is that it\u0027s still an implementation detail of when overlays work.  \"persistent video\" isn\u0027t obviously related to overlays from the client\u0027s point of view.\n\u003e \n\u003e seems a lot simpler for the client if the overlay impl cancels the overlay when needed, similar to the \u0027frame hidden\u0027, etc. cases.\n\u003e \n\u003e | GetAllFrames\n\u003e \n\u003e RFH doesn\u0027t currently know anything about the overlays that use it.  maybe they should.  i\u0027ll think about it more.\n\nYeah, RFH will need to know Overlays. Maybe can just fold OverlayProvider into RFH, and have RFH create Overlays.\n\nI think there is such a thing as mojo interfaces tied to a RFH, but I don\u0027t know see anything using the java code, and I don\u0027t know much about mojo..\n\n\u003e \n\u003e | which direction is that call?\n\u003e \n\u003e it would be a call from PiPM to (something) to ask if a transition is okay.  currently, PiPM asks WebContents whether there\u0027s a full screen video.\n\nAnd WebContents can ask all of its RFHs. Should be ok?",
      "parentUuid": "518d0d44_10dcf029",
      "revId": "ae5212df5054d45a05dfc23b3f8066afe7870351",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ced3379d_6f12ecef",
        "filename": "content/public/browser/web_contents_observer.h",
        "patchSetId": 3
      },
      "lineNbr": 468,
      "author": {
        "id": 1130490
      },
      "writtenOn": "2017-08-09T17:55:33Z",
      "side": 1,
      "message": "i don\u0027t think that RFH should create overlays.  i can imagine uses of overlays that aren\u0027t tied to any RFH; we might want to use one for the compositor output, for example.  plus, there are going to be at least two implementations of overlays (VR and non-VR), so it\u0027s quite a bit of complexity.\n\ni\u0027ll try making the overlay register with its RFH, and broadcast the notification the way you suggest.",
      "parentUuid": "eb66d56a_a2808345",
      "revId": "ae5212df5054d45a05dfc23b3f8066afe7870351",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}