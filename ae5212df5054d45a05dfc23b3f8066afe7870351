{
  "comments": [
    {
      "key": {
        "uuid": "2451091f_42088c23",
        "filename": "content/public/browser/web_contents_observer.h",
        "patchSetId": 3
      },
      "lineNbr": 468,
      "author": {
        "id": 1001500
      },
      "writtenOn": "2017-08-07T23:30:17Z",
      "side": 1,
      "message": "In general, we avoid adding public APIs unless they are used outside of content/. In this CL this is the case and the main reason I can see going this route is to build on top of WebContentsObserver. I think the approach is reasonable, but the method seems very specific to be of more general use outside of content. As such, I\u0027d suggest we explore a different way to notify DialogOverlayImpl more directly.",
      "revId": "ae5212df5054d45a05dfc23b3f8066afe7870351",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ef252065_a4f000bb",
        "filename": "content/public/browser/web_contents_observer.h",
        "patchSetId": 3
      },
      "lineNbr": 468,
      "author": {
        "id": 1130490
      },
      "writtenOn": "2017-08-08T16:33:53Z",
      "side": 1,
      "message": "would you object to a new observer that\u0027s internal to content/ ?  maybe specific like PersistentVideoObserver or general like WebContentsImplObserver?  it\u0027ll have two or three PV-related methods, and two consumers (MediaWebContentsObserver, DialogOverlayImpl) by the time the dust settles.\n\ni\u0027m trying to keep WebContents as the thing sending out the notification of state changes.  the alternative is to have some sideband channel in PictureInPictureController.java \u003d\u003e DialogOverlayImpl, where the signal to WC originates.  that seems fragile.",
      "parentUuid": "2451091f_42088c23",
      "revId": "ae5212df5054d45a05dfc23b3f8066afe7870351",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "af291f09_f2b5ff35",
        "filename": "content/public/browser/web_contents_observer.h",
        "patchSetId": 3
      },
      "lineNbr": 468,
      "author": {
        "id": 1002725
      },
      "writtenOn": "2017-08-08T20:59:18Z",
      "side": 1,
      "message": "\u003e would you object to a new observer that\u0027s internal to content/ ?  maybe specific like PersistentVideoObserver or general like WebContentsImplObserver?  it\u0027ll have two or three PV-related methods, and two consumers (MediaWebContentsObserver, DialogOverlayImpl) by the time the dust settles.\n\u003e \n\u003e i\u0027m trying to keep WebContents as the thing sending out the notification of state changes.  the alternative is to have some sideband channel in PictureInPictureController.java \u003d\u003e DialogOverlayImpl, where the signal to WC originates.  that seems fragile.\n\nHaven\u0027t read the whole thing yet, but joining this debate..\n\nObserver pattern suggests the observer is at a \"higher layer\" than WebContents. Is that the case? ie is the long term goal to to factor out Overlay stuff out of content? If yes, then by all means create a public content api for it (ie the side channel). I\u0027m guessing this is not the case though?\n\nIf Overlay is an implementation of the web platform, then it\u0027s really below WebContents, then WebContents can just tell Overlay that this setting changed. Two possible ways:\n1) OverlayImpl is an implementation of a renderer side object that\u0027s independent from WebContents. Renderer side already knows this setting, so renderer side can just pass up the setting again. Tedious, ipc round trip delay etc. But keeps OverlayImpl and WebContents separate.\n2) Have some more directly way of WebContents talking to OverlayImpl. OverlayImpl is really tied to a RenderFrameHost instance. So could pass it as WebContentsImpl-\u003eRenderFrameHost-\u003eOverlayImpl, each step taking care of dealing with different lifetimes of objects.",
      "parentUuid": "ef252065_a4f000bb",
      "revId": "ae5212df5054d45a05dfc23b3f8066afe7870351",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}