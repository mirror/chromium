{
  "comments": [
    {
      "key": {
        "uuid": "ec6c1842_cc5625e4",
        "filename": "base/test/scoped_task_environment.cc",
        "patchSetId": 1
      },
      "lineNbr": 97,
      "author": {
        "id": 1110029
      },
      "writtenOn": "2017-06-28T18:32:48Z",
      "side": 1,
      "message": "without this change I\u0027m getting deadlocks when my one WithBaseSyncPrimitives runner tries to wait for my other sequenced task runner to complete a task... But I would have expected that passing in WithBasySyncPrimitives would have been enough to make TaskScheduler make sure not to deadlock like this...",
      "revId": "4ed9a34a8751fc9e4c150477c6189fc7a53aeee3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "09a3a6a5_05a1d519",
        "filename": "base/test/scoped_task_environment.cc",
        "patchSetId": 1
      },
      "lineNbr": 97,
      "author": {
        "id": 1001534
      },
      "writtenOn": "2017-07-05T01:54:39Z",
      "side": 1,
      "message": "I\u0027m fine with this as mentioned @ https://groups.google.com/a/chromium.org/d/msg/scheduler-dev/LXiCeARTM7w/R_lWlQalEAAJ\n\nPlease add above:\n\n// Each pool uses two threads to prevent deadlocks in unit tests that have a sequence that uses WithBaseSyncPrimitives() to wait on the result of another sequence. This isn\u0027t perfect (doesn\u0027t solve wait chains) but solves the basic use case for now.\n// TODO(fdoray/jeffreyhe): Make the TaskScheduler dynamically replace blocked threads and get rid of this limitation.",
      "parentUuid": "ec6c1842_cc5625e4",
      "revId": "4ed9a34a8751fc9e4c150477c6189fc7a53aeee3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5e51b441_183117df",
        "filename": "base/test/scoped_task_environment.cc",
        "patchSetId": 1
      },
      "lineNbr": 97,
      "author": {
        "id": 1110029
      },
      "writtenOn": "2017-07-05T20:04:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "09a3a6a5_05a1d519",
      "revId": "4ed9a34a8751fc9e4c150477c6189fc7a53aeee3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ec5a70b0_f053220c",
        "filename": "components/leveldb/leveldb_app.cc",
        "patchSetId": 1
      },
      "lineNbr": 34,
      "author": {
        "id": 1001534
      },
      "writtenOn": "2017-07-05T01:54:39Z",
      "side": 1,
      "message": "I\u0027d say obtain this in the constructor\u0027s initializer list and get rid of this conditional (that\u0027s the paradigm generally used)",
      "revId": "4ed9a34a8751fc9e4c150477c6189fc7a53aeee3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e458257a_bc67a650",
        "filename": "components/leveldb/leveldb_app.cc",
        "patchSetId": 1
      },
      "lineNbr": 34,
      "author": {
        "id": 1110029
      },
      "writtenOn": "2017-07-05T20:04:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ec5a70b0_f053220c",
      "revId": "4ed9a34a8751fc9e4c150477c6189fc7a53aeee3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "60bf0ff9_ee65b0c6",
        "filename": "components/leveldb/leveldb_mojo_proxy.cc",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 1001534
      },
      "writtenOn": "2017-07-05T01:54:39Z",
      "side": 1,
      "message": "And can consequentially this include from .cc",
      "revId": "4ed9a34a8751fc9e4c150477c6189fc7a53aeee3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d2a2b304_eb78d849",
        "filename": "components/leveldb/leveldb_mojo_proxy.cc",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 1110029
      },
      "writtenOn": "2017-07-05T20:04:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "60bf0ff9_ee65b0c6",
      "revId": "4ed9a34a8751fc9e4c150477c6189fc7a53aeee3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bbf8995c_5d4fdc39",
        "filename": "components/leveldb/leveldb_mojo_proxy.h",
        "patchSetId": 1
      },
      "lineNbr": 38,
      "author": {
        "id": 1001534
      },
      "writtenOn": "2017-07-05T01:54:39Z",
      "side": 1,
      "message": "In order for scoped_refptr\u003cFoo\u003e to be defined you need both foo.h and ref_counted.h (scoped_refptr\u003cT\u003e needs to know that T implements RefCounted).\n\nAs such by IWYU you need to include sequence_task_runner.h in this header to take scoped_refptr\u003cbase::SequencedTaskRunner\u003e by value.",
      "revId": "4ed9a34a8751fc9e4c150477c6189fc7a53aeee3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "26cbbacd_3269480a",
        "filename": "components/leveldb/leveldb_mojo_proxy.h",
        "patchSetId": 1
      },
      "lineNbr": 38,
      "author": {
        "id": 1110029
      },
      "writtenOn": "2017-07-05T20:04:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "bbf8995c_5d4fdc39",
      "revId": "4ed9a34a8751fc9e4c150477c6189fc7a53aeee3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5dd69c10_92ed6a2a",
        "filename": "services/file/file_service.cc",
        "patchSetId": 1
      },
      "lineNbr": 80,
      "author": {
        "id": 1001534
      },
      "writtenOn": "2017-07-05T01:54:39Z",
      "side": 1,
      "message": "Unless you need to override those for tests (and even then a SetTaskRunnersForTesting() might be better or having default params on the constructor might be better), I\u0027d suggest to have FileService directly request the task runners it needs instead of injecting them : https://chromium.googlesource.com/chromium/src/+/lkcr/docs/threading_and_tasks.md#TaskRunner-ownership-encourage-no-dependency-injection",
      "revId": "4ed9a34a8751fc9e4c150477c6189fc7a53aeee3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "26df6355_94c8080c",
        "filename": "services/file/file_service.cc",
        "patchSetId": 1
      },
      "lineNbr": 80,
      "author": {
        "id": 1110029
      },
      "writtenOn": "2017-07-05T20:04:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5dd69c10_92ed6a2a",
      "revId": "4ed9a34a8751fc9e4c150477c6189fc7a53aeee3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}