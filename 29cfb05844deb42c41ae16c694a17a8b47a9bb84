{
  "comments": [
    {
      "key": {
        "uuid": "e9421b04_1f97217e",
        "filename": "third_party/WebKit/Source/build/scripts/templates/CSSPropertyMetadata.cpp.tmpl",
        "patchSetId": 1
      },
      "lineNbr": 50,
      "author": {
        "id": 1002854
      },
      "writtenOn": "2017-06-06T21:20:30Z",
      "side": 1,
      "message": "nit: add \"static const std::bitset\u003cnumCSSProperties\u003e*\" would give slightly more assurance that we only use it const ways after construction.",
      "revId": "29cfb05844deb42c41ae16c694a17a8b47a9bb84",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "299a67d8_cc40703d",
        "filename": "third_party/WebKit/Source/build/scripts/templates/CSSPropertyMetadata.cpp.tmpl",
        "patchSetId": 1
      },
      "lineNbr": 50,
      "author": {
        "id": 1115939
      },
      "writtenOn": "2017-06-06T21:27:12Z",
      "side": 1,
      "message": "1) How is this thread safe? AFAIK static initialization is only thread safe for globals, not locals.\n2) Why does this need to be a lambda rather than just a regular function call?",
      "range": {
        "startLine": 50,
        "startChar": 2,
        "endLine": 50,
        "endChar": 8
      },
      "revId": "29cfb05844deb42c41ae16c694a17a8b47a9bb84",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3efb6a5a_36ed8a6c",
        "filename": "third_party/WebKit/Source/build/scripts/templates/CSSPropertyMetadata.cpp.tmpl",
        "patchSetId": 1
      },
      "lineNbr": 50,
      "author": {
        "id": 1002854
      },
      "writtenOn": "2017-06-06T21:35:30Z",
      "side": 1,
      "message": "Since I suggested this pattern, I\u0027ll reply:\n\n\u003e How is this thread safe? AFAIK static initialization is only thread safe for globals, not locals.\n\nThis is thread-safe as of C++11, and we already rely on this (e.g. this is how DEFINE_THREAD_SAFE_STATIC_LOCAL works). See, e.g., http://en.cppreference.com/w/cpp/language/storage_duration#Static_local_variables.\n\n\u003e Why does this need to be a lambda rather than just a regular function call?\n\nIt doesn\u0027t. We\u0027ve used this pattern with a lambda in a few other places, but it could equally be a free function.\n\nhttps://cs.chromium.org/search/?q\u003dpackage:%5Echromium$+static.*%5C+%3D%5C+%5C%5B%5C%5D+f:%5C.(cc%7Ccpp)$+case:yes\u0026type\u003dcs",
      "parentUuid": "299a67d8_cc40703d",
      "range": {
        "startLine": 50,
        "startChar": 2,
        "endLine": 50,
        "endChar": 8
      },
      "revId": "29cfb05844deb42c41ae16c694a17a8b47a9bb84",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4e4e4971_9d38a2ea",
        "filename": "third_party/WebKit/Source/build/scripts/templates/CSSPropertyMetadata.cpp.tmpl",
        "patchSetId": 1
      },
      "lineNbr": 50,
      "author": {
        "id": 1134723
      },
      "writtenOn": "2017-06-07T14:08:10Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "3efb6a5a_36ed8a6c",
      "range": {
        "startLine": 50,
        "startChar": 2,
        "endLine": 50,
        "endChar": 8
      },
      "revId": "29cfb05844deb42c41ae16c694a17a8b47a9bb84",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8a2930ea_33abe97b",
        "filename": "third_party/WebKit/Source/build/scripts/templates/CSSPropertyMetadata.cpp.tmpl",
        "patchSetId": 1
      },
      "lineNbr": 50,
      "author": {
        "id": 1134723
      },
      "writtenOn": "2017-06-07T14:08:10Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e9421b04_1f97217e",
      "revId": "29cfb05844deb42c41ae16c694a17a8b47a9bb84",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "edf4e039_11c9249d",
        "filename": "third_party/WebKit/Source/build/scripts/templates/StylePropertyShorthand.cpp.tmpl",
        "patchSetId": 1
      },
      "lineNbr": 37,
      "author": {
        "id": 1002854
      },
      "writtenOn": "2017-06-06T21:20:30Z",
      "side": 1,
      "message": "nit: This certainly works (no objection here), but you can be even more efficient by not heap-allocating, since these are just simple structs. If you make the StylePropertyShorthand constructors `constexpr`, then this will work (and generate less code):\n\n  static constexpr StylePropertyShorthand {{property.lower_camel_name}}Longhands(\n      {property_id}}, {{property.lower_camel_name}}Properties,\n      WTF_ARRAY_LENGTH({{property.lower_camel_name}}Properties);\n  return {{property.lower_camel_name}}Longhands;\n\nThis function will then simply return a constant pointer into the rodata section, with no initialization work needed (bonus: memory locality! cross-process sharing!).",
      "revId": "29cfb05844deb42c41ae16c694a17a8b47a9bb84",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "72a05125_ca418d4d",
        "filename": "third_party/WebKit/Source/build/scripts/templates/StylePropertyShorthand.cpp.tmpl",
        "patchSetId": 1
      },
      "lineNbr": 37,
      "author": {
        "id": 1134723
      },
      "writtenOn": "2017-06-07T14:08:10Z",
      "side": 1,
      "message": "o_O\n\nDone.",
      "parentUuid": "edf4e039_11c9249d",
      "revId": "29cfb05844deb42c41ae16c694a17a8b47a9bb84",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "daa39c18_e25870b9",
        "filename": "third_party/WebKit/Source/core/css/StylePropertyShorthandCustom.cpp",
        "patchSetId": 1
      },
      "lineNbr": 41,
      "author": {
        "id": 1002854
      },
      "writtenOn": "2017-06-06T21:20:30Z",
      "side": 1,
      "message": "Comment about constexpr initialization applies here (and below), too.",
      "revId": "29cfb05844deb42c41ae16c694a17a8b47a9bb84",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "85abaedf_94bb9f56",
        "filename": "third_party/WebKit/Source/core/css/StylePropertyShorthandCustom.cpp",
        "patchSetId": 1
      },
      "lineNbr": 41,
      "author": {
        "id": 1134723
      },
      "writtenOn": "2017-06-07T14:08:10Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "daa39c18_e25870b9",
      "revId": "29cfb05844deb42c41ae16c694a17a8b47a9bb84",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}