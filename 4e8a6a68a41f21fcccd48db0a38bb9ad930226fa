{
  "comments": [
    {
      "key": {
        "uuid": "09eee15a_23844b3d",
        "filename": "base/process/process_metrics.h",
        "patchSetId": 3
      },
      "lineNbr": 549,
      "author": {
        "id": 1115906
      },
      "writtenOn": "2017-07-19T19:05:06Z",
      "side": 1,
      "message": "Maybe we could create a new struct to hold some of these in/out variables?\n\ne.g.\nstruct MemoryByteParams {\n  ...\n  ...\n}\nGetMemoryBytesInRegion(MemoryByteParams*)",
      "revId": "4e8a6a68a41f21fcccd48db0a38bb9ad930226fa",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ecd4e3a3_64534739",
        "filename": "base/process/process_metrics_mac.cc",
        "patchSetId": 3
      },
      "lineNbr": 499,
      "author": {
        "id": 1115906
      },
      "writtenOn": "2017-07-19T19:05:06Z",
      "side": 1,
      "message": "Hm. I actually think that you don\u0027t need this giant refactor. \n\nAssuming you\u0027re only going to be working with SharedMemory regions, I\u0027d recommend just summing private_pages_residnet and shared_pages_resident, and ignoring the info.share_mode. You don\u0027t need to worry about AddressInSharedRegion, info.ref_count, etc.",
      "revId": "4e8a6a68a41f21fcccd48db0a38bb9ad930226fa",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ec7edbee_10e5814e",
        "filename": "base/process/process_metrics_mac.cc",
        "patchSetId": 3
      },
      "lineNbr": 499,
      "author": {
        "id": 1115913
      },
      "writtenOn": "2017-07-20T07:09:03Z",
      "side": 1,
      "message": "Yeah, I agree that GetMemoryBytesInRegion is overkill for shared memory regions. Just calling GetTopInfo is enough in CountResidentBytes. As CountResidentBytes doesn\u0027t assume shared memory but general memory regions, I thought we needed this complex implementation.\n\nOn second thought, introducing a new function like CountResidentBytesInSharedMemory and implementing with GetTopInfo on macOS (and CountResidentBytes on other platforms) seems a better idea.",
      "parentUuid": "ecd4e3a3_64534739",
      "revId": "4e8a6a68a41f21fcccd48db0a38bb9ad930226fa",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9469452a_75cb426e",
        "filename": "base/trace_event/process_memory_dump.cc",
        "patchSetId": 3
      },
      "lineNbr": 53,
      "author": {
        "id": 1115906
      },
      "writtenOn": "2017-07-19T19:05:06Z",
      "side": 1,
      "message": "!defined(OS_MACOSX) will also exclude IOS so you don\u0027t need need the OS_IOS conditional.",
      "range": {
        "startLine": 53,
        "startChar": 55,
        "endLine": 53,
        "endChar": 56
      },
      "revId": "4e8a6a68a41f21fcccd48db0a38bb9ad930226fa",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e35fcab8_e3c364d9",
        "filename": "base/trace_event/process_memory_dump.cc",
        "patchSetId": 3
      },
      "lineNbr": 89,
      "author": {
        "id": 1115906
      },
      "writtenOn": "2017-07-19T19:05:06Z",
      "side": 1,
      "message": "ditto, don\u0027t need OS_IOS",
      "revId": "4e8a6a68a41f21fcccd48db0a38bb9ad930226fa",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}