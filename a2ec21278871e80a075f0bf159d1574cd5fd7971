{
  "comments": [
    {
      "key": {
        "uuid": "6feafaa5_952a56bd",
        "filename": "third_party/zlib/BUILD.gn",
        "patchSetId": 2
      },
      "lineNbr": 9,
      "author": {
        "id": 1189229
      },
      "writtenOn": "2017-12-11T19:11:46Z",
      "side": 1,
      "message": "Given that the file path indicates it is for Android only, I feel like we should instead opt-in with something like if (is_android) {\n\n\nIf we want to use it on ChromeOS as well, we probably want to update the file path to be more clear and NOT do the opt-in I suggested.\n\nKeep in mind, we\u0027re adding support for Fuchsia. So we should use whichever system is more future-facing correct and not assume a static set of supported platforms.",
      "range": {
        "startLine": 9,
        "startChar": 2,
        "endLine": 9,
        "endChar": 16
      },
      "revId": "a2ec21278871e80a075f0bf159d1574cd5fd7971",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ba2f9f88_400e9b46",
        "filename": "third_party/zlib/BUILD.gn",
        "patchSetId": 2
      },
      "lineNbr": 9,
      "author": {
        "id": 1145695
      },
      "writtenOn": "2017-12-11T19:48:59Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "6feafaa5_952a56bd",
      "range": {
        "startLine": 9,
        "startChar": 2,
        "endLine": 9,
        "endChar": 16
      },
      "revId": "a2ec21278871e80a075f0bf159d1574cd5fd7971",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2f3f248d_68145cb5",
        "filename": "third_party/zlib/BUILD.gn",
        "patchSetId": 2
      },
      "lineNbr": 38,
      "author": {
        "id": 1189229
      },
      "writtenOn": "2017-12-11T19:11:46Z",
      "side": 1,
      "message": "Maybe this is only me, but as soon as I get to this part I wonder why we don\u0027t use crc32 on these platforms.\n\nIt might be a good idea to mention why we exclude these.",
      "range": {
        "startLine": 38,
        "startChar": 4,
        "endLine": 38,
        "endChar": 34
      },
      "revId": "a2ec21278871e80a075f0bf159d1574cd5fd7971",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "33a89395_adb2ac5b",
        "filename": "third_party/zlib/BUILD.gn",
        "patchSetId": 2
      },
      "lineNbr": 38,
      "author": {
        "id": 1145695
      },
      "writtenOn": "2017-12-11T19:48:59Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "2f3f248d_68145cb5",
      "range": {
        "startLine": 38,
        "startChar": 4,
        "endLine": 38,
        "endChar": 34
      },
      "revId": "a2ec21278871e80a075f0bf159d1574cd5fd7971",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d4142c32_6dbd8bc1",
        "filename": "third_party/zlib/BUILD.gn",
        "patchSetId": 2
      },
      "lineNbr": 107,
      "author": {
        "id": 1193769
      },
      "writtenOn": "2017-12-11T15:36:14Z",
      "side": 1,
      "message": "Isn\u0027t all this only compatible with current_cpu \u003d\u003d \"arm64\"?",
      "range": {
        "startLine": 107,
        "startChar": 4,
        "endLine": 107,
        "endChar": 24
      },
      "revId": "a2ec21278871e80a075f0bf159d1574cd5fd7971",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a8dc4e62_9dd5fd0c",
        "filename": "third_party/zlib/BUILD.gn",
        "patchSetId": 2
      },
      "lineNbr": 107,
      "author": {
        "id": 1189229
      },
      "writtenOn": "2017-12-11T19:11:46Z",
      "side": 1,
      "message": "ARM\u0027s crc32 instruction was initially only available on AArch64 but later was added to AArch32 as well.\n\nhttp://infocenter.arm.com/help/index.jsp?topic\u003d/com.arm.doc.dui0801g/awi1476352818103.html\n\"Note:\nID_ISAR5.CRC32 indicates whether this instruction is supported in the T32 and A32 instruction sets.\"\n\nSo this patch builds both paths (support and no support) and checks for crc32 support at runtime.",
      "parentUuid": "d4142c32_6dbd8bc1",
      "range": {
        "startLine": 107,
        "startChar": 4,
        "endLine": 107,
        "endChar": 24
      },
      "revId": "a2ec21278871e80a075f0bf159d1574cd5fd7971",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b84fef73_740969a6",
        "filename": "third_party/zlib/BUILD.gn",
        "patchSetId": 2
      },
      "lineNbr": 107,
      "author": {
        "id": 1193769
      },
      "writtenOn": "2017-12-11T19:39:50Z",
      "side": 1,
      "message": "Oooh, ok.  ARMv8 !\u003d arm64, huh?  There are \"arm\" and \"arm64\" ARMv8 builds?",
      "parentUuid": "a8dc4e62_9dd5fd0c",
      "range": {
        "startLine": 107,
        "startChar": 4,
        "endLine": 107,
        "endChar": 24
      },
      "revId": "a2ec21278871e80a075f0bf159d1574cd5fd7971",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "da34ab7d_924439d7",
        "filename": "third_party/zlib/BUILD.gn",
        "patchSetId": 2
      },
      "lineNbr": 107,
      "author": {
        "id": 1145695
      },
      "writtenOn": "2017-12-11T19:48:59Z",
      "side": 1,
      "message": "\u0027arm\u0027 would be a default Chromium build (i.e. 32bits or aarch32) while \u0027arm64\u0027 would be a 64bits build (or aarch64).\n\nIt seems that the default Chrome build is targeting armv7 (32bits only).\n\nBasically I figured it out a way to use this crc32 instruction even for regular builds (armv7), and falling into it only if the CPU reports support for it (e.g. armv8 device running a 32bits chrome build).\n\nWe probably should implement a similar approach for skia too.",
      "parentUuid": "b84fef73_740969a6",
      "range": {
        "startLine": 107,
        "startChar": 4,
        "endLine": 107,
        "endChar": 24
      },
      "revId": "a2ec21278871e80a075f0bf159d1574cd5fd7971",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a3d8a0ed_eb412b8b",
        "filename": "third_party/zlib/BUILD.gn",
        "patchSetId": 2
      },
      "lineNbr": 107,
      "author": {
        "id": 1145695
      },
      "writtenOn": "2017-12-11T20:12:47Z",
      "side": 1,
      "message": "\u003e  There are \"arm\" and \"arm64\" ARMv8 builds?\n\nIt seems that there are aarch64 builds of the WebView in a few android versions, but it is not widespread.\n\nI asked around about it and it seems that increased memory use in 64bits by Chrome kind of pushed towards keeping things in 32bits for the time being.",
      "parentUuid": "da34ab7d_924439d7",
      "range": {
        "startLine": 107,
        "startChar": 4,
        "endLine": 107,
        "endChar": 24
      },
      "revId": "a2ec21278871e80a075f0bf159d1574cd5fd7971",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "749804a2_9bb513ab",
        "filename": "third_party/zlib/BUILD.gn",
        "patchSetId": 2
      },
      "lineNbr": 107,
      "author": {
        "id": 1189229
      },
      "writtenOn": "2017-12-11T21:15:11Z",
      "side": 1,
      "message": "To answer another piece of the question:\n\nMy understanding is ARMvX represents a revision of the instruction set. Those instructions can have both a 32- and 64-bit variant.\nAn x86 equiv might be mov eax, 32-bit-value and mov rax, 64-bit-value\n\n\"arm64\" here refers to AArch64, which was introduced in ARMv8.\nSo you could say \"arm64\" implies at least ARMv8. But that doesn\u0027t mean ARMv8 implies \"arm64\" -- ARMv8 also runs on 32-bit chips, such as the Cortex-A32 which is ARMv8-A but only 32-bit.\n\nAdenilson can likely correct me if I\u0027m saying anything wrong here.",
      "parentUuid": "a3d8a0ed_eb412b8b",
      "range": {
        "startLine": 107,
        "startChar": 4,
        "endLine": 107,
        "endChar": 24
      },
      "revId": "a2ec21278871e80a075f0bf159d1574cd5fd7971",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "79449965_91aa9d4c",
        "filename": "third_party/zlib/BUILD.gn",
        "patchSetId": 2
      },
      "lineNbr": 136,
      "author": {
        "id": 1189229
      },
      "writtenOn": "2017-12-11T19:11:46Z",
      "side": 1,
      "message": "This section is from before we enclosed the static_library(\"zlib_arm_crc32\") in if (platforms) {\n\nThe problem at that time was we were building this library for platforms which wouldn\u0027t actually use it. We still had to build something though.\n\nHowever, I believe we can remove this section and only provide static_library(\"zlib_arm_crc32\") on platforms which we actually plan to build it on.\n\nSaid another way, we get to this section because we are building ARM + iOS or ARM + ChromeOS. But we could have just excluded iOS and ChromeOS in the outer-most if().",
      "range": {
        "startLine": 131,
        "startChar": 6,
        "endLine": 136,
        "endChar": 7
      },
      "revId": "a2ec21278871e80a075f0bf159d1574cd5fd7971",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1c28cb3a_e439c7aa",
        "filename": "third_party/zlib/BUILD.gn",
        "patchSetId": 2
      },
      "lineNbr": 136,
      "author": {
        "id": 1145695
      },
      "writtenOn": "2017-12-11T19:48:59Z",
      "side": 1,
      "message": "I will try to remove it and see if it makes all the bots happy (IIRC, fuchsia-arm was broken without this).",
      "parentUuid": "79449965_91aa9d4c",
      "range": {
        "startLine": 131,
        "startChar": 6,
        "endLine": 136,
        "endChar": 7
      },
      "revId": "a2ec21278871e80a075f0bf159d1574cd5fd7971",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ce2ba92b_30b8ad66",
        "filename": "third_party/zlib/BUILD.gn",
        "patchSetId": 2
      },
      "lineNbr": 214,
      "author": {
        "id": 1193769
      },
      "writtenOn": "2017-12-11T15:36:14Z",
      "side": 1,
      "message": "Can we encapsulate this logic inside :zlib_arm_crc32?  Seems like it\u0027s already checking for iOS, and it\u0027s nice to check only once instead of twice.",
      "revId": "a2ec21278871e80a075f0bf159d1574cd5fd7971",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "969c55f2_e493398b",
        "filename": "third_party/zlib/BUILD.gn",
        "patchSetId": 2
      },
      "lineNbr": 214,
      "author": {
        "id": 1189229
      },
      "writtenOn": "2017-12-11T19:11:46Z",
      "side": 1,
      "message": "I agree.\n\nIn fact, I can imagine a world where future iOS devices do support crc32.\n\nI think the best option is to route everything as if we were going to do the crc32 feature detection on iOS, then add a TODO there and always return not-supported.\n\nThat would make iOS less of an exception, be fa bit more future-facing, and make it clear where the change needs to happen if/when we do later add crc32 support to iOS.",
      "parentUuid": "ce2ba92b_30b8ad66",
      "revId": "a2ec21278871e80a075f0bf159d1574cd5fd7971",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d643964f_4c7e0f87",
        "filename": "third_party/zlib/BUILD.gn",
        "patchSetId": 2
      },
      "lineNbr": 214,
      "author": {
        "id": 1193769
      },
      "writtenOn": "2017-12-11T19:39:50Z",
      "side": 1,
      "message": "Agreed.  (Though to date I haven\u0027t found any way of doing CPU detection on iOS short of forking off a process, running the fancy code, and waiting for it to crash...)\n\nThere is a slight wrinkle to this, in that Apple\u0027s clang used to claim that the 64-bit iPhones support CRC32 via #defines even though they didn\u0027t.  I think this has been fixed in the latest XCode release, but that might be why code involving CRC32 does some paranoid if(!is_ios) { ... }.",
      "parentUuid": "969c55f2_e493398b",
      "revId": "a2ec21278871e80a075f0bf159d1574cd5fd7971",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "aac8c4f2_ff9cca2d",
        "filename": "third_party/zlib/BUILD.gn",
        "patchSetId": 2
      },
      "lineNbr": 214,
      "author": {
        "id": 1145695
      },
      "writtenOn": "2017-12-11T19:48:59Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "d643964f_4c7e0f87",
      "revId": "a2ec21278871e80a075f0bf159d1574cd5fd7971",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b6816885_f940513a",
        "filename": "third_party/zlib/contrib/optimizations/arm/arm_features.c",
        "patchSetId": 2
      },
      "lineNbr": 25,
      "author": {
        "id": 1189229
      },
      "writtenOn": "2017-12-11T19:11:46Z",
      "side": 1,
      "message": "Elsewhere, I mentioned routing iOS here.\nIt would make sense to me to route all OSes here and have\n#else\n// Platform support not yet added\n#endif\n\nThis leaves capabilities as 0 and doesn\u0027t enable anything fancy until we actively add support for that platform (allowing us to test it before launching).",
      "range": {
        "startLine": 23,
        "startChar": 0,
        "endLine": 25,
        "endChar": 3
      },
      "revId": "a2ec21278871e80a075f0bf159d1574cd5fd7971",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "489c8c02_b6d8deb1",
        "filename": "third_party/zlib/contrib/optimizations/arm/arm_features.c",
        "patchSetId": 2
      },
      "lineNbr": 35,
      "author": {
        "id": 1193769
      },
      "writtenOn": "2017-12-11T15:36:14Z",
      "side": 1,
      "message": "I think you can probably use this Linux path for both Android and non-Android Linux.  getauxval(AT_HWCAP) has been in the NDK since v18, and should work with all ARMv8 devices, which require at least v21.\n\n(This would also mean you get feature detection if built as part of the Android OS, which doesn\u0027t use the NDK per se and doesn\u0027t have access to the cpu-features library.)",
      "revId": "a2ec21278871e80a075f0bf159d1574cd5fd7971",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "06eaa3eb_3e5ffbfd",
        "filename": "third_party/zlib/contrib/optimizations/arm/arm_features.c",
        "patchSetId": 2
      },
      "lineNbr": 35,
      "author": {
        "id": 1189229
      },
      "writtenOn": "2017-12-11T19:11:46Z",
      "side": 1,
      "message": "Is getauxval() available from within the sandbox Chrome\u0027s renderers are in?\nIIRC that is the reason we had to go the NDK route.",
      "parentUuid": "489c8c02_b6d8deb1",
      "revId": "a2ec21278871e80a075f0bf159d1574cd5fd7971",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fe094bb9_df1a38fd",
        "filename": "third_party/zlib/contrib/optimizations/arm/arm_features.c",
        "patchSetId": 2
      },
      "lineNbr": 35,
      "author": {
        "id": 1193769
      },
      "writtenOn": "2017-12-11T19:39:50Z",
      "side": 1,
      "message": "I thought so, but I guess it\u0027s worth double checking.",
      "parentUuid": "06eaa3eb_3e5ffbfd",
      "revId": "a2ec21278871e80a075f0bf159d1574cd5fd7971",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "383afa5e_f937e011",
        "filename": "third_party/zlib/contrib/optimizations/arm/arm_features.c",
        "patchSetId": 2
      },
      "lineNbr": 35,
      "author": {
        "id": 1145695
      },
      "writtenOn": "2017-12-12T00:45:35Z",
      "side": 1,
      "message": "I tried using getauxval() for Android but I keep getting this:\n../../third_party/zlib/contrib/optimizations/arm/arm_features.c:38:20: error: implicit declaration of function \u0027getauxval\u0027 is invalid in C99 [-Werror,-Wimplicit-function-declaration]\n    capabilities \u003d getauxval(AT_HWCAP);\n\nConcerning the sandbox: at least for Android, using android_getCpuFeatures() in the Renderer process seems to work fine.",
      "parentUuid": "fe094bb9_df1a38fd",
      "revId": "a2ec21278871e80a075f0bf159d1574cd5fd7971",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8db3d8f4_4831315a",
        "filename": "third_party/zlib/contrib/optimizations/arm/arm_features.c",
        "patchSetId": 2
      },
      "lineNbr": 35,
      "author": {
        "id": 1189229
      },
      "writtenOn": "2017-12-12T01:39:39Z",
      "side": 1,
      "message": "Ah, right.\nThat explains why people do things like this with __attribute__((weak))\nhttps://github.com/opencv/opencv/blob/master/3rdparty/cpufeatures/cpu-features.c#L504\n\nGiven the two options (android_getCpuFeatures and __attribute__((weak)) ), I think android_getCpuFeatures is less bad.",
      "parentUuid": "383afa5e_f937e011",
      "revId": "a2ec21278871e80a075f0bf159d1574cd5fd7971",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ca2439f1_e48e80c1",
        "filename": "third_party/zlib/contrib/optimizations/arm/arm_features.h",
        "patchSetId": 2
      },
      "lineNbr": 10,
      "author": {
        "id": 1193769
      },
      "writtenOn": "2017-12-11T15:36:14Z",
      "side": 1,
      "message": "Unless this is a TODO, it\u0027s probably best for us to leave this out, either by including \u003cstdbool.h\u003e and using bool, or just using a builtin type like you are.\n\nIsn\u0027t it more conventional to use `int` to return booleans in pre-C99?",
      "revId": "a2ec21278871e80a075f0bf159d1574cd5fd7971",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5561c0ac_d099ca95",
        "filename": "third_party/zlib/contrib/optimizations/arm/arm_features.h",
        "patchSetId": 2
      },
      "lineNbr": 10,
      "author": {
        "id": 1145695
      },
      "writtenOn": "2017-12-12T00:45:35Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "ca2439f1_e48e80c1",
      "revId": "a2ec21278871e80a075f0bf159d1574cd5fd7971",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "97206937_85462816",
        "filename": "third_party/zlib/contrib/optimizations/arm/armv8_crc32.c",
        "patchSetId": 2
      },
      "lineNbr": 2,
      "author": {
        "id": 1189229
      },
      "writtenOn": "2017-12-11T19:11:46Z",
      "side": 1,
      "message": "We need to change this to the Chromium copyright notice.",
      "range": {
        "startLine": 2,
        "startChar": 1,
        "endLine": 2,
        "endChar": 39
      },
      "revId": "a2ec21278871e80a075f0bf159d1574cd5fd7971",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1d225bcb_ed15042f",
        "filename": "third_party/zlib/contrib/optimizations/arm/armv8_crc32.c",
        "patchSetId": 2
      },
      "lineNbr": 40,
      "author": {
        "id": 1193769
      },
      "writtenOn": "2017-12-11T15:36:14Z",
      "side": 1,
      "message": "What\u0027s the deal with the double cast?  Can\u0027t you just write\n\n    buf4 \u003d (const uint32_t*)buf;\n\n?",
      "range": {
        "startLine": 40,
        "startChar": 11,
        "endLine": 40,
        "endChar": 43
      },
      "revId": "a2ec21278871e80a075f0bf159d1574cd5fd7971",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9e7f629d_4d94fd3e",
        "filename": "third_party/zlib/contrib/optimizations/arm/armv8_crc32.c",
        "patchSetId": 2
      },
      "lineNbr": 40,
      "author": {
        "id": 1145695
      },
      "writtenOn": "2017-12-12T00:45:35Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "1d225bcb_ed15042f",
      "range": {
        "startLine": 40,
        "startChar": 11,
        "endLine": 40,
        "endChar": 43
      },
      "revId": "a2ec21278871e80a075f0bf159d1574cd5fd7971",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "08ad967c_bbbdc7e6",
        "filename": "third_party/zlib/contrib/optimizations/arm/armv8_crc32.c",
        "patchSetId": 2
      },
      "lineNbr": 42,
      "author": {
        "id": 1193769
      },
      "writtenOn": "2017-12-11T15:36:14Z",
      "side": 1,
      "message": "Can we not use __crc32d() at stride?  That would handle 8 bytes with each crc32x instruction, right?  Or is that the wrong endianness?",
      "revId": "a2ec21278871e80a075f0bf159d1574cd5fd7971",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d64ee3c5_7c76c6bf",
        "filename": "third_party/zlib/contrib/optimizations/arm/armv8_crc32.c",
        "patchSetId": 2
      },
      "lineNbr": 42,
      "author": {
        "id": 1145695
      },
      "writtenOn": "2017-12-12T00:45:35Z",
      "side": 1,
      "message": "I will experiment with it and report back.",
      "parentUuid": "08ad967c_bbbdc7e6",
      "revId": "a2ec21278871e80a075f0bf159d1574cd5fd7971",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "91a8e4d8_d5583321",
        "filename": "third_party/zlib/contrib/optimizations/arm/armv8_crc32.h",
        "patchSetId": 2
      },
      "lineNbr": 8,
      "author": {
        "id": 1193769
      },
      "writtenOn": "2017-12-11T15:36:14Z",
      "side": 1,
      "message": "Are you actually finding this to be true in practice?\n\nsize_t should be defined in \u003cstddef.h\u003e.",
      "revId": "a2ec21278871e80a075f0bf159d1574cd5fd7971",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3c4cdb02_861cf3ca",
        "filename": "third_party/zlib/contrib/optimizations/arm/armv8_crc32.h",
        "patchSetId": 2
      },
      "lineNbr": 8,
      "author": {
        "id": 1145695
      },
      "writtenOn": "2017-12-12T00:45:35Z",
      "side": 1,
      "message": "Yes, in a few linaro gcc flavors while running on ARM.",
      "parentUuid": "91a8e4d8_d5583321",
      "revId": "a2ec21278871e80a075f0bf159d1574cd5fd7971",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "70010dee_dd931139",
        "filename": "third_party/zlib/contrib/optimizations/inflate.c",
        "patchSetId": 2
      },
      "lineNbr": 88,
      "author": {
        "id": 1193769
      },
      "writtenOn": "2017-12-11T15:36:14Z",
      "side": 1,
      "message": "It might be nice to reduce the mentions of USE_ARMV8_CRC32 to the minimum, so that where it is used really stands out as \"this is the important part\".\n\nFor instance, this header can be included whether or not it\u0027s defined, right?  There\u0027s nothing declared in there that\u0027s particularly CPU-specific.",
      "revId": "a2ec21278871e80a075f0bf159d1574cd5fd7971",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7c9f4471_7569abc6",
        "filename": "third_party/zlib/contrib/optimizations/inflate.c",
        "patchSetId": 2
      },
      "lineNbr": 88,
      "author": {
        "id": 1145695
      },
      "writtenOn": "2017-12-12T00:45:35Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "70010dee_dd931139",
      "revId": "a2ec21278871e80a075f0bf159d1574cd5fd7971",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "53d024cb_96e311c3",
        "filename": "third_party/zlib/contrib/optimizations/inflate.c",
        "patchSetId": 2
      },
      "lineNbr": 208,
      "author": {
        "id": 1193769
      },
      "writtenOn": "2017-12-11T15:36:14Z",
      "side": 1,
      "message": "It doesn\u0027t seem necessary to both check for this outside calling arm_check_features() and inside it\n\n  void arm_check_features(void)\n  {\n  #ifdef USE_ARMV8_CRC32\n     pthread_once(\u0026cpu_check_inited_once, init_arm_features);\n  #endif\n  }\n\nOne of those must be redundant?",
      "revId": "a2ec21278871e80a075f0bf159d1574cd5fd7971",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0f76e9aa_69f73529",
        "filename": "third_party/zlib/contrib/optimizations/inflate.c",
        "patchSetId": 2
      },
      "lineNbr": 208,
      "author": {
        "id": 1189229
      },
      "writtenOn": "2017-12-11T19:11:46Z",
      "side": 1,
      "message": "Agreed. I like the idea of only checking inside arm_check_features()",
      "parentUuid": "53d024cb_96e311c3",
      "revId": "a2ec21278871e80a075f0bf159d1574cd5fd7971",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d93f2be7_86d4584f",
        "filename": "third_party/zlib/contrib/optimizations/inflate.c",
        "patchSetId": 2
      },
      "lineNbr": 208,
      "author": {
        "id": 1145695
      },
      "writtenOn": "2017-12-12T00:45:35Z",
      "side": 1,
      "message": "Now we also have a check for Intel features, I considered to have something like:\n#if defined(USE_ARMV8_CRC32)\n    arm_check_features();\n#else\n    x86_check_features();\n#endif",
      "parentUuid": "0f76e9aa_69f73529",
      "revId": "a2ec21278871e80a075f0bf159d1574cd5fd7971",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}