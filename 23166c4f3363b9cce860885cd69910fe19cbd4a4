{
  "comments": [
    {
      "key": {
        "uuid": "e9da8ac1_ff29e2d0",
        "filename": "third_party/WebKit/Source/core/dom/ScriptRunnerTest.cpp",
        "patchSetId": 5
      },
      "lineNbr": 61,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2017-06-02T15:14:28Z",
      "side": 1,
      "message": "What is this change for?",
      "revId": "23166c4f3363b9cce860885cd69910fe19cbd4a4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5069865f_703ef7f1",
        "filename": "third_party/WebKit/Source/core/dom/ScriptRunnerTest.cpp",
        "patchSetId": 5
      },
      "lineNbr": 61,
      "author": {
        "id": 1175471
      },
      "writtenOn": "2017-06-02T21:38:44Z",
      "side": 1,
      "message": "A test in here would trigger a DCHECK inside RuntimeCallTimer::Stop (because the TimeTicks::Now() function is set to always return TimeTicks() by default for tests). In retrospect though, I think I should just stub out RuntimeCallStats for this test.",
      "parentUuid": "e9da8ac1_ff29e2d0",
      "revId": "23166c4f3363b9cce860885cd69910fe19cbd4a4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a5df6da1_114a5e23",
        "filename": "third_party/WebKit/Source/core/frame/LocalFrameView.cpp",
        "patchSetId": 5
      },
      "lineNbr": 1142,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2017-06-02T02:35:39Z",
      "side": 1,
      "message": "Does this mean that if we want to (locally) analyze what DOM attributes/operations are consuming CPU time, we need to introduce 5000+ enums to RuntimeCallStats::CounterId to make RuntimeCallStats work?",
      "revId": "23166c4f3363b9cce860885cd69910fe19cbd4a4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "14635c1a_6e68a040",
        "filename": "third_party/WebKit/Source/core/frame/LocalFrameView.cpp",
        "patchSetId": 5
      },
      "lineNbr": 1142,
      "author": {
        "id": 1175471
      },
      "writtenOn": "2017-06-02T14:21:12Z",
      "side": 1,
      "message": "I think for a local test of all the attributes, we could use a map (const char* \u003d\u003e RuntimeCallCounter) to store and access the counters (the map access can be done before entering a timing scope, so it shouldn\u0027t affect the time measured). The extra overhead of using a map doesn\u0027t matter locally.",
      "parentUuid": "a5df6da1_114a5e23",
      "revId": "23166c4f3363b9cce860885cd69910fe19cbd4a4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "637cf075_061fca8b",
        "filename": "third_party/WebKit/Source/core/frame/LocalFrameView.cpp",
        "patchSetId": 5
      },
      "lineNbr": 1142,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2017-06-02T15:14:28Z",
      "side": 1,
      "message": "Would you move RCS to next to the below TRACE_EVENT0?",
      "parentUuid": "14635c1a_6e68a040",
      "revId": "23166c4f3363b9cce860885cd69910fe19cbd4a4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2e55c916_c198fb82",
        "filename": "third_party/WebKit/Source/core/frame/LocalFrameView.cpp",
        "patchSetId": 5
      },
      "lineNbr": 1142,
      "author": {
        "id": 1175471
      },
      "writtenOn": "2017-06-02T21:38:44Z",
      "side": 1,
      "message": "Ok, done here and everywhere else.",
      "parentUuid": "637cf075_061fca8b",
      "revId": "23166c4f3363b9cce860885cd69910fe19cbd4a4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c929c88e_9324d155",
        "filename": "third_party/WebKit/Source/platform/heap/ThreadState.cpp",
        "patchSetId": 5
      },
      "lineNbr": 1449,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2017-06-02T15:14:28Z",
      "side": 1,
      "message": "Why can\u0027t we use RCScope?\n\nAlso consider moving this to the below TRACE_EVENT. In general it\u0027s not nice that TRACE_EVENT and RCS are measuring different things.",
      "revId": "23166c4f3363b9cce860885cd69910fe19cbd4a4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "31aa4694_5f45582c",
        "filename": "third_party/WebKit/Source/platform/heap/ThreadState.cpp",
        "patchSetId": 5
      },
      "lineNbr": 1449,
      "author": {
        "id": 1175471
      },
      "writtenOn": "2017-06-02T21:38:44Z",
      "side": 1,
      "message": "|isolate| can be null sometimes and we can\u0027t measure when it is null (and I can\u0027t put a scope inside an if block).",
      "parentUuid": "c929c88e_9324d155",
      "revId": "23166c4f3363b9cce860885cd69910fe19cbd4a4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cab2f21f_7dda0eb2",
        "filename": "third_party/WebKit/Source/platform/heap/ThreadState.cpp",
        "patchSetId": 5
      },
      "lineNbr": 1449,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2017-06-05T01:03:25Z",
      "side": 1,
      "message": "Ah... This is a very good point.\n\nOilpan\u0027s GC needs to run even when a V8 instance does not exist (e.g., when scripts are disabled, when scripts are not yet loaded etc). The situation is the same in layout, style recalc etc.\n\nI begin to think that it might not be a good idea to associate RCS with V8\u0027s isolate. I think that an ideal solution would be:\n\n- Introduce PerThreadData (See this bug  as well: https://bugs.chromium.org/p/chromium/issues/detail?id\u003d663632).\n- Associate RCS with PerThreadData.\n- Make the caller site use currentThreadData() to get the PerThreadData of that thread.\n\nWhat do you think? Would it be an overkill?\n\n(I\u0027m sorry that I couldn\u0027t notice this when reviewing your design doc.)",
      "parentUuid": "31aa4694_5f45582c",
      "revId": "23166c4f3363b9cce860885cd69910fe19cbd4a4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "36f2bee8_c17ac503",
        "filename": "third_party/WebKit/Source/platform/heap/ThreadState.cpp",
        "patchSetId": 5
      },
      "lineNbr": 1449,
      "author": {
        "id": 1175471
      },
      "writtenOn": "2017-06-05T14:43:37Z",
      "side": 1,
      "message": "I think directly associating RuntimeCallStats with a thread is a good idea, but I\u0027m not quite sure why I need to create a PerThreadData class instead of just using DEFINE_THREAD_SAFE_STATIC_LOCAL directly to manage RuntimeCallStats instances per thread. Could you explain the advantage of having a separate class to manage per thread instances, instead of directly using the macro?",
      "parentUuid": "cab2f21f_7dda0eb2",
      "revId": "23166c4f3363b9cce860885cd69910fe19cbd4a4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1f80e7c5_fec782a4",
        "filename": "third_party/WebKit/Source/platform/heap/ThreadState.cpp",
        "patchSetId": 5
      },
      "lineNbr": 1449,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2017-06-05T15:31:19Z",
      "side": 1,
      "message": "You\u0027re right. DEFINE_THREAD_SAFE_STATIC_LOCAL(ThreadSpecific\u003c\u003e, ...) will work.\n\nhttps://bugs.chromium.org/p/chromium/issues/detail?id\u003d663632 is about replacing it with PerThreadData to avoid scattering the ThreadSpecific\u003c\u003es all over the code base. However, that\u0027s an orthogonal clean-up, so you can just use ThreadSpecific\u003c\u003e for RCS.",
      "parentUuid": "36f2bee8_c17ac503",
      "revId": "23166c4f3363b9cce860885cd69910fe19cbd4a4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1a5cffc8_f395a9d5",
        "filename": "third_party/WebKit/Source/platform/heap/ThreadState.cpp",
        "patchSetId": 5
      },
      "lineNbr": 1449,
      "author": {
        "id": 1002854
      },
      "writtenOn": "2017-06-05T15:47:04Z",
      "side": 1,
      "message": "TLS lookup isn\u0027t free on all our platforms (though our hack for the main thread help). And I know V8 plumbed Isolate* everywhere to avoid doing it too often. Especially if we do need to do TLS lookup, we should be careful to avoid taking too much of a hit when we don\u0027t want to record RCS (probably using a RuntimeEnabledFeature and making sure non-trivial code size is out-of-lined).\n\nTo some extent I think it comes down to how much RCS is a bindings feature (use of bindings implies an isolate) vs an engine feature.\n\nOne thing we might think about: for the places where we do always have an isolate available, we could consider giving PerIsolateData a direct pointer to WTFThreadData (or whatever thread-global object we end up using), since AFAIK we don\u0027t move isolates between threads. (I\u0027m kinda worried about worklets, but I don\u0027t think they\u0027re currently moving between threads...)",
      "parentUuid": "36f2bee8_c17ac503",
      "revId": "23166c4f3363b9cce860885cd69910fe19cbd4a4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3e76de3c_426533d2",
        "filename": "third_party/WebKit/Source/platform/heap/ThreadState.cpp",
        "patchSetId": 5
      },
      "lineNbr": 1449,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2017-06-05T16:18:40Z",
      "side": 1,
      "message": "Yeah, this is a good point. Using ThreadSpecific\u003c\u003e might not be acceptable in terms of performance on some platform.\n\nSorry for going back and forth, but I changed my mind reading Jeremy\u0027s comment. Given that RCS is a feature to break down performance of V8 execution, it won\u0027t be a bad idea to make it a binding feature and focus on analyzing performance of code where an isolate exists. Then it would be fine to associate RCS with V8PerIsolateData and ignore cases where an isolate does not exist.\n\ni.e., the current CL looks good. Sorry about the noise!",
      "parentUuid": "1a5cffc8_f395a9d5",
      "revId": "23166c4f3363b9cce860885cd69910fe19cbd4a4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d355e03a_e5459719",
        "filename": "third_party/WebKit/Source/platform/heap/ThreadState.cpp",
        "patchSetId": 5
      },
      "lineNbr": 1449,
      "author": {
        "id": 1175471
      },
      "writtenOn": "2017-06-05T18:34:32Z",
      "side": 1,
      "message": "All right, that sounds good :)\n\nWhat I\u0027m not really sure of right now is if V8PerIsolateData::MainThreadIsolate() can return null for websites without script/if scripts are disabled? Looking at code, it looks like we call V8Initializer::initializeMainThread() in blink::Initialize(), so I think the answer is no, but I\u0027d like to confirm that this is the case. If it can return null, we\u0027ll have to do an isolate check every time we use it outside of bindings (which isn\u0027t ideal).",
      "parentUuid": "3e76de3c_426533d2",
      "revId": "23166c4f3363b9cce860885cd69910fe19cbd4a4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}