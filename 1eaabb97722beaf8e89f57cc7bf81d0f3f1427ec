{
  "comments": [
    {
      "key": {
        "uuid": "07f99058_2f47c4d9",
        "filename": "cc/trees/layer_tree_frame_sink.h",
        "patchSetId": 2
      },
      "lineNbr": 140,
      "author": {
        "id": 1000887
      },
      "writtenOn": "2017-11-29T17:06:51Z",
      "side": 1,
      "message": "Can this go on the implementation of LayerTreeFrameSink? It does not need to be exposed to cc.",
      "revId": "1eaabb97722beaf8e89f57cc7bf81d0f3f1427ec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7a38b019_858d1404",
        "filename": "cc/trees/layer_tree_frame_sink.h",
        "patchSetId": 2
      },
      "lineNbr": 140,
      "author": {
        "id": 1128437
      },
      "writtenOn": "2017-11-29T20:16:08Z",
      "side": 1,
      "message": "We\u0027d need to do this for multiple implementations of LayerTreeFrameSink: ClientLTFS, SynchronousLTFS, and TestLTFS. And also perform casts in RenderThreadImpl (at least for TestLTFS).",
      "parentUuid": "07f99058_2f47c4d9",
      "revId": "1eaabb97722beaf8e89f57cc7bf81d0f3f1427ec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "38ed8718_bc1e1b75",
        "filename": "cc/trees/layer_tree_frame_sink.h",
        "patchSetId": 2
      },
      "lineNbr": 140,
      "author": {
        "id": 1000887
      },
      "writtenOn": "2017-11-29T20:19:59Z",
      "side": 1,
      "message": "We don\u0027t need it for TestLTFS, it\u0027s for layout tests, but the other 2 yeah.",
      "parentUuid": "7a38b019_858d1404",
      "revId": "1eaabb97722beaf8e89f57cc7bf81d0f3f1427ec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ee2d385f_80be07e3",
        "filename": "content/renderer/render_thread_impl.cc",
        "patchSetId": 2
      },
      "lineNbr": 581,
      "author": {
        "id": 1000887
      },
      "writtenOn": "2017-11-29T17:06:51Z",
      "side": 1,
      "message": "nit: this is more general than we need. You could give the RTI* instead and have it call the method directly? That\u0027s easier to follow than Callbacks.",
      "revId": "1eaabb97722beaf8e89f57cc7bf81d0f3f1427ec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fffa112d_83244e6c",
        "filename": "content/renderer/render_thread_impl.cc",
        "patchSetId": 2
      },
      "lineNbr": 581,
      "author": {
        "id": 1128437
      },
      "writtenOn": "2017-11-29T20:16:08Z",
      "side": 1,
      "message": "will do",
      "parentUuid": "ee2d385f_80be07e3",
      "revId": "1eaabb97722beaf8e89f57cc7bf81d0f3f1427ec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4009428d_4a0cc179",
        "filename": "content/renderer/render_thread_impl.cc",
        "patchSetId": 2
      },
      "lineNbr": 2468,
      "author": {
        "id": 1000887
      },
      "writtenOn": "2017-11-29T17:06:51Z",
      "side": 1,
      "message": "LayerTreeFrameSink is an API for cc to use. So it\u0027s weird that this is going the other way. Logically what this wants is to call the LayerTreeFrameSink\u0027s client.\n\nIf the subclass of LayerTreeFrameSink gives a pointer to the client, and we store that (along with the weakptr to the sink itself), then this can call the client directly, which goes in the correct direction (client is for calling into cc).\n\nAlternatively, if this called to the impl subclass, and that called to the client, that\u0027d work too, but there are 2 types of impls so we\u0027d need to have 2 maps or do some funky casting to pull that off I think.",
      "revId": "1eaabb97722beaf8e89f57cc7bf81d0f3f1427ec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a3c98e9f_f91897af",
        "filename": "content/renderer/render_thread_impl.cc",
        "patchSetId": 2
      },
      "lineNbr": 2468,
      "author": {
        "id": 1128437
      },
      "writtenOn": "2017-11-29T20:16:08Z",
      "side": 1,
      "message": "Client would need to be weak-ptr\u0027d if we post directly to it from the main thread. We\u0027d also need a lock for the accessing the client on the main thread because BindToClient happens on the compositor thread.",
      "parentUuid": "4009428d_4a0cc179",
      "revId": "1eaabb97722beaf8e89f57cc7bf81d0f3f1427ec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b9ac5d46_7c602538",
        "filename": "content/renderer/render_thread_impl.cc",
        "patchSetId": 2
      },
      "lineNbr": 2468,
      "author": {
        "id": 1000887
      },
      "writtenOn": "2017-11-29T20:19:59Z",
      "side": 1,
      "message": "We can post the weakptr to the FrameSink and the client* and then call the client.",
      "parentUuid": "a3c98e9f_f91897af",
      "revId": "1eaabb97722beaf8e89f57cc7bf81d0f3f1427ec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "09fd24bd_6828e710",
        "filename": "content/renderer/render_thread_impl.cc",
        "patchSetId": 2
      },
      "lineNbr": 2481,
      "author": {
        "id": 1000887
      },
      "writtenOn": "2017-11-29T17:06:51Z",
      "side": 1,
      "message": "Does this bool do anything for us that checking the status doesnt?",
      "revId": "1eaabb97722beaf8e89f57cc7bf81d0f3f1427ec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d56a0aaf_243d7280",
        "filename": "content/renderer/render_thread_impl.cc",
        "patchSetId": 2
      },
      "lineNbr": 2481,
      "author": {
        "id": 1128437
      },
      "writtenOn": "2017-11-29T20:16:08Z",
      "side": 1,
      "message": "We can check the bool without taking the lock. It may be out of date, so we might create an LTFS with a lost worker context whose context lost callback hasn\u0027t run yet, only to destroy it shortly after. piman@ WDYT about removing the status check and lock?",
      "parentUuid": "09fd24bd_6828e710",
      "revId": "1eaabb97722beaf8e89f57cc7bf81d0f3f1427ec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d738c32d_ab164c8f",
        "filename": "content/renderer/render_thread_impl.cc",
        "patchSetId": 2
      },
      "lineNbr": 2481,
      "author": {
        "id": 1000887
      },
      "writtenOn": "2017-11-29T20:19:59Z",
      "side": 1,
      "message": "I\u0027d probably go the other way, the status check tells us more than the bool and the lock doesn\u0027t seem terrible this isn\u0027t a critical path.",
      "parentUuid": "d56a0aaf_243d7280",
      "revId": "1eaabb97722beaf8e89f57cc7bf81d0f3f1427ec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "91ed7e09_119423ca",
        "filename": "content/renderer/render_thread_impl.cc",
        "patchSetId": 2
      },
      "lineNbr": 2481,
      "author": {
        "id": 1148065
      },
      "writtenOn": "2017-11-29T20:27:45Z",
      "side": 1,
      "message": "I think in general the callback is also what will cause GetGraphicsResetStatusKHR() to start reporting errors, so you effectively have the same info. The off case that a sync IPC is what causes the lost context to be reported *and* another LTFS is requested at the same time (the case where GetGraphicsResetStatusKHR() would report error but callback hasn\u0027t run yet), is likely rare enough that it probably doesn\u0027t matter much. Keeping in mind that we\u0027re still in a lost context situation, we have to handle things well, but performance is not exactly critical.\n\nOTOH taking the lock here doesn\u0027t seem critical, its cost is dwarfed by the allocations and other locks (e.g. for PostTask) needed to create a new LTFS.\n\n\nI guess bottom line I would keep one or the other to simplify, I wouldn\u0027t worry about micro-optimizing either the lock or that race.",
      "parentUuid": "d56a0aaf_243d7280",
      "revId": "1eaabb97722beaf8e89f57cc7bf81d0f3f1427ec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3ad8e938_a2699548",
        "filename": "content/renderer/render_thread_impl.h",
        "patchSetId": 2
      },
      "lineNbr": 782,
      "author": {
        "id": 1000887
      },
      "writtenOn": "2017-11-29T17:06:51Z",
      "side": 1,
      "message": "nit: If you make this a unique_ptr you can forward decl the class and define it all in the .cc, keeping the header file smaller",
      "revId": "1eaabb97722beaf8e89f57cc7bf81d0f3f1427ec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dc9290d7_a80d9383",
        "filename": "content/renderer/render_thread_impl.h",
        "patchSetId": 2
      },
      "lineNbr": 782,
      "author": {
        "id": 1128437
      },
      "writtenOn": "2017-11-29T20:16:08Z",
      "side": 1,
      "message": "will do",
      "parentUuid": "3ad8e938_a2699548",
      "revId": "1eaabb97722beaf8e89f57cc7bf81d0f3f1427ec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "85f18dfa_6fc35347",
        "filename": "content/renderer/render_thread_impl.h",
        "patchSetId": 2
      },
      "lineNbr": 783,
      "author": {
        "id": 1000887
      },
      "writtenOn": "2017-11-29T17:06:51Z",
      "side": 1,
      "message": "nit: no blank lines in between every line esp when they logically belong together like this",
      "revId": "1eaabb97722beaf8e89f57cc7bf81d0f3f1427ec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d624960f_8b58d61a",
        "filename": "content/renderer/render_thread_impl.h",
        "patchSetId": 2
      },
      "lineNbr": 783,
      "author": {
        "id": 1128437
      },
      "writtenOn": "2017-11-29T20:16:08Z",
      "side": 1,
      "message": "will do",
      "parentUuid": "85f18dfa_6fc35347",
      "revId": "1eaabb97722beaf8e89f57cc7bf81d0f3f1427ec",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}