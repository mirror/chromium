{
  "comments": [
    {
      "key": {
        "uuid": "802cbb8a_a5466ffe",
        "filename": "services/ui/gpu/interfaces/gpu_service.mojom",
        "patchSetId": 6
      },
      "lineNbr": 43,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-07-10T21:15:58Z",
      "side": 1,
      "message": "1) What\u0027s the purpose of key here? Why is it useful/needed? Presumably |data| is the shader that was loaded, and we need to pass it to the GPU service so it can use that--but it\u0027s not clear what the purpose of key is.\n\n2) What things can talk to the GpuService? Is it just the host that can talk to the GPU service, or will child processes eventually be able to talk to it?",
      "range": {
        "startLine": 42,
        "startChar": 0,
        "endLine": 43,
        "endChar": 69
      },
      "revId": "05957722dbf1c5abc0c2f94fec3aa44a9515e99d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cd0e021c_f2a0bf0e",
        "filename": "services/ui/gpu/interfaces/gpu_service.mojom",
        "patchSetId": 6
      },
      "lineNbr": 43,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2017-07-10T21:31:51Z",
      "side": 1,
      "message": "The key is used to store the shader into a map in memory. Sorry, I\u0027m actually kind of confused by your question. The new APIs I\u0027m designing for ANGLE aren\u0027t quite the same as Chromium - I can\u0027t re-create the key from just the data like the command buffer does with it\u0027s current implementation without significantly redesigning a few systems in ANGLE.\n\nI\u0027m not actually sure what a child process is and how that\u0027s different from a host. I have no plans whatsoever to redesign any of those models though, I just need access to the key so I can use that to insert the shader into a map in ANGLE. Sorry if that\u0027s not clear, I can add more detail to the comment.",
      "parentUuid": "802cbb8a_a5466ffe",
      "range": {
        "startLine": 42,
        "startChar": 0,
        "endLine": 43,
        "endChar": 69
      },
      "revId": "05957722dbf1c5abc0c2f94fec3aa44a9515e99d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2d985859_ea819f6f",
        "filename": "services/ui/gpu/interfaces/gpu_service.mojom",
        "patchSetId": 6
      },
      "lineNbr": 43,
      "author": {
        "id": 1148065
      },
      "writtenOn": "2017-07-10T21:39:12Z",
      "side": 1,
      "message": "This interface is privileged and only used by the GPU host (i.e. browser today). When child processes need to acquire GPU process capabilities, they use the unprivileged gpu.mojom to talk to the GPU host that forwards requests to the GPU process.",
      "parentUuid": "cd0e021c_f2a0bf0e",
      "range": {
        "startLine": 42,
        "startChar": 0,
        "endLine": 43,
        "endChar": 69
      },
      "revId": "05957722dbf1c5abc0c2f94fec3aa44a9515e99d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "249b6823_c7fa76ce",
        "filename": "services/ui/gpu/interfaces/gpu_service.mojom",
        "patchSetId": 6
      },
      "lineNbr": 43,
      "author": {
        "id": 1105324
      },
      "writtenOn": "2017-07-11T15:45:08Z",
      "side": 1,
      "message": "Short explanation of cahcing:\n\nWe keep a cache of {key,program} pairs to save on repeated program compile times. The browser process writes these to disk, and warms up the cache on startup via this API. The key is necessary to match a new shader to and old one - and in the new code path it isn\u0027t easily extracted from data.",
      "parentUuid": "2d985859_ea819f6f",
      "range": {
        "startLine": 42,
        "startChar": 0,
        "endLine": 43,
        "endChar": 69
      },
      "revId": "05957722dbf1c5abc0c2f94fec3aa44a9515e99d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}