{
  "comments": [
    {
      "key": {
        "uuid": "a751e36e_ce3e2ff0",
        "filename": "ui/file_manager/file_manager/background/js/media_import_handler.js",
        "patchSetId": 15
      },
      "lineNbr": 122,
      "author": {
        "id": 1116036
      },
      "writtenOn": "2017-11-29T19:17:25Z",
      "side": 1,
      "message": "So there\u0027s a bit of a paradigm shift to not reporting errors until the task is completed. That\u0027s fine, but does it present a \"liveness\" problem for the user, right?\n\nQ: What happens if there are many/all errors in a large set of files being imported? Won\u0027t it appear that nothing is happening for a long period of time?\n\nYou could fix this simply by treating the ERROR state as non-fatal, basically meaning the entry has been queued up for retry. You would just need to update progress center to demonstrate this this to the user.",
      "revId": "dbf8a54ce889490ca8cd3d3d3f3af20c803c407a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "38fad842_f96668cf",
        "filename": "ui/file_manager/file_manager/background/js/media_import_handler.js",
        "patchSetId": 15
      },
      "lineNbr": 122,
      "author": {
        "id": 1241182
      },
      "writtenOn": "2017-11-30T18:50:49Z",
      "side": 1,
      "message": "So the only error that has been witnessed up to now was due to there not being enough local space, and that error happens instantly.\nAlso, this approach doesn\u0027t treat errors as fatal - there are a couple of things to keep in mind:\n\n1) showing an error message to the user when that later gets resolved on its own can be very confusing\n2) The way the progress bar is supposed to be used is to only set it to error if it was fatal - if a subtask failed that is not fatal, it is supposed to create a new item (as I did), otherwise, all later PROGRESS/COMPLETE updates won\u0027t do anything (see https://cs.chromium.org/chromium/src/ui/file_manager/file_manager/foreground/js/progress_center_item_group.js?l\u003d246\u0026rcl\u003d03d083a82b9174dfe11ef90d000eaad2c7ccdcf6)\n3) Cloud Import usually handles a large amount of files at a time (as opposed to copying files manually). If there are no or few errors, there won\u0027t be any disadvantage to the user, if there are a lot of errors, that will spam the notification bar, thus hiding more important messages - and UX is very unhappy with that happening with Drive sync errors in the case of Cloud import because of the large amount of files and prefers to remove these errors (because sync retries later, just like import retries), but can\u0027t for the time being as there is no infrastructure yet to determine if a sync is being caused by Cloud Import or by some other means. On top of the only witnessed errors relevant to Cloud import happening instantly not causing any lag to the user.\n\nSo to summarize: we have talked this exact situation through with UX and this is the result of these discussions.",
      "parentUuid": "a751e36e_ce3e2ff0",
      "revId": "dbf8a54ce889490ca8cd3d3d3f3af20c803c407a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8ba4dd0e_fb57c73f",
        "filename": "ui/file_manager/file_manager/background/js/media_import_handler.js",
        "patchSetId": 15
      },
      "lineNbr": 122,
      "author": {
        "id": 1116036
      },
      "writtenOn": "2017-11-30T19:28:50Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "38fad842_f96668cf",
      "revId": "dbf8a54ce889490ca8cd3d3d3f3af20c803c407a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "27d1cd74_eb77d5ac",
        "filename": "ui/file_manager/file_manager/background/js/media_import_handler.js",
        "patchSetId": 15
      },
      "lineNbr": 314,
      "author": {
        "id": 1110159
      },
      "writtenOn": "2017-11-29T04:11:00Z",
      "side": 1,
      "message": "This will trigger some callbacks.\nIt will be safer to call it asynchronously.\ne.g.\nsetTimeout(function() {\n  this.notify...\n  this.tracker_.send...\n  this.sendImportStats_\n}.bind(this));",
      "revId": "dbf8a54ce889490ca8cd3d3d3f3af20c803c407a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7eb76b83_e721a093",
        "filename": "ui/file_manager/file_manager/background/js/media_import_handler.js",
        "patchSetId": 15
      },
      "lineNbr": 314,
      "author": {
        "id": 1241182
      },
      "writtenOn": "2017-11-30T18:50:49Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "27d1cd74_eb77d5ac",
      "revId": "dbf8a54ce889490ca8cd3d3d3f3af20c803c407a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "47237251_da1cc200",
        "filename": "ui/file_manager/file_manager/background/js/media_import_handler.js",
        "patchSetId": 15
      },
      "lineNbr": 316,
      "author": {
        "id": 1110159
      },
      "writtenOn": "2017-11-29T04:11:00Z",
      "side": 1,
      "message": "I guess there is a reason to have these cancel logic in importOne_.\nSteve, do you know background?",
      "revId": "dbf8a54ce889490ca8cd3d3d3f3af20c803c407a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6ad37ab3_b4bd9c8b",
        "filename": "ui/file_manager/file_manager/background/js/media_import_handler.js",
        "patchSetId": 15
      },
      "lineNbr": 316,
      "author": {
        "id": 1116036
      },
      "writtenOn": "2017-11-29T19:17:25Z",
      "side": 1,
      "message": "Are you referring to the \"if (this.canceled_)\" check on line 435?\n\nI assume it is a guard against an async task doing more stuff after the task has been cancelled.",
      "parentUuid": "47237251_da1cc200",
      "revId": "dbf8a54ce889490ca8cd3d3d3f3af20c803c407a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "349804c0_3a85ce43",
        "filename": "ui/file_manager/file_manager/background/js/media_import_handler.js",
        "patchSetId": 15
      },
      "lineNbr": 316,
      "author": {
        "id": 1241182
      },
      "writtenOn": "2017-11-30T18:50:49Z",
      "side": 1,
      "message": "In that case I\u0027ll resolve this comment!",
      "parentUuid": "6ad37ab3_b4bd9c8b",
      "revId": "dbf8a54ce889490ca8cd3d3d3f3af20c803c407a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4ebe166e_250f6b0e",
        "filename": "ui/file_manager/file_manager/background/js/media_import_handler.js",
        "patchSetId": 15
      },
      "lineNbr": 370,
      "author": {
        "id": 1116036
      },
      "writtenOn": "2017-11-29T19:17:25Z",
      "side": 1,
      "message": "I still don\u0027t know what slice() with no args does. Is it a copy? Is there some default length?",
      "revId": "dbf8a54ce889490ca8cd3d3d3f3af20c803c407a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d1880e1a_e2d6e32b",
        "filename": "ui/file_manager/file_manager/background/js/media_import_handler.js",
        "patchSetId": 15
      },
      "lineNbr": 370,
      "author": {
        "id": 1241182
      },
      "writtenOn": "2017-11-30T18:50:49Z",
      "side": 1,
      "message": "Sorry for the whole lot of going back and forth on this topic (because of the time constraint) - I had answered it when resolving the comment containing your first question, but I don\u0027t remember which PS it was in.\nBasically, it creates a copy - without doing that, both variables will hold a reference to the same object. So by altering one of them, the other will also be altered, creating hard-to-detect side effects.",
      "parentUuid": "4ebe166e_250f6b0e",
      "revId": "dbf8a54ce889490ca8cd3d3d3f3af20c803c407a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "82e4308b_529e08a7",
        "filename": "ui/file_manager/file_manager/background/js/media_import_handler.js",
        "patchSetId": 15
      },
      "lineNbr": 370,
      "author": {
        "id": 1116036
      },
      "writtenOn": "2017-11-30T19:28:50Z",
      "side": 1,
      "message": "Gotcha. I\u0027ll assume someone more recently marinated in JS culture will know that.",
      "parentUuid": "d1880e1a_e2d6e32b",
      "revId": "dbf8a54ce889490ca8cd3d3d3f3af20c803c407a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9fa6ad1a_6f36687e",
        "filename": "ui/file_manager/file_manager/background/js/media_import_handler.js",
        "patchSetId": 15
      },
      "lineNbr": 383,
      "author": {
        "id": 1116036
      },
      "writtenOn": "2017-11-29T19:17:25Z",
      "side": 1,
      "message": "Add some whitespace to your code. Empty lines between logical sections give the reader needed resting spots and useful clues.\n\nE.g. add an empty line after you setup the driveListener_. That\u0027s a discrete chunk of logic.",
      "revId": "dbf8a54ce889490ca8cd3d3d3f3af20c803c407a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dfe96db8_72a2c48a",
        "filename": "ui/file_manager/file_manager/background/js/media_import_handler.js",
        "patchSetId": 15
      },
      "lineNbr": 383,
      "author": {
        "id": 1241182
      },
      "writtenOn": "2017-11-30T18:50:49Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9fa6ad1a_6f36687e",
      "revId": "dbf8a54ce889490ca8cd3d3d3f3af20c803c407a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a5797b0f_8d3c41a1",
        "filename": "ui/file_manager/file_manager/background/js/media_import_handler.js",
        "patchSetId": 15
      },
      "lineNbr": 384,
      "author": {
        "id": 1116036
      },
      "writtenOn": "2017-11-29T19:17:25Z",
      "side": 1,
      "message": "There\u0027s one thing I\u0027ve been wondering about this change. If import is failing because device is out of disk space how does this change actually free up more space? Does DriveSyncHandler.COMPLETED_EVENT mean that content has been evicted from the cache, or that it is eligible for cache eviction?\n\nEither way, it might make sense to lean back and write up some really nice code comments (like you did in your CL description) for future maintainers. Describe *why this exists at all*, and how it is intended to work. That way when Fukino-san\u0027s grandson inherits maintenance of this code he\u0027ll have help understanding what\u0027s going on. And in the short term it\u0027ll help me understand what\u0027s going on too.",
      "revId": "dbf8a54ce889490ca8cd3d3d3f3af20c803c407a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9e701191_ae7eeea4",
        "filename": "ui/file_manager/file_manager/background/js/media_import_handler.js",
        "patchSetId": 15
      },
      "lineNbr": 384,
      "author": {
        "id": 1241182
      },
      "writtenOn": "2017-11-30T18:50:49Z",
      "side": 1,
      "message": "DriveSyncHandler.COMPLETED_EVENT means that Drive is done syncing the current batch of changes, marking these files as eligible for cache eviction - the actually freeing up space part happens right before a snapshot is created.",
      "parentUuid": "a5797b0f_8d3c41a1",
      "revId": "dbf8a54ce889490ca8cd3d3d3f3af20c803c407a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e0e37bc1_d0b17d89",
        "filename": "ui/file_manager/file_manager/background/js/media_import_handler.js",
        "patchSetId": 15
      },
      "lineNbr": 384,
      "author": {
        "id": 1116036
      },
      "writtenOn": "2017-11-30T19:28:50Z",
      "side": 1,
      "message": "That would be a *perfect* code comment to place immediately above where you register the COMPLETED_EVENT listener.",
      "parentUuid": "9e701191_ae7eeea4",
      "revId": "dbf8a54ce889490ca8cd3d3d3f3af20c803c407a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5968511f_9c5df2a2",
        "filename": "ui/file_manager/file_manager/background/js/media_import_handler.js",
        "patchSetId": 15
      },
      "lineNbr": 386,
      "author": {
        "id": 1116036
      },
      "writtenOn": "2017-11-28T18:43:43Z",
      "side": 1,
      "message": "This isn\u0027t a good practice. Why is it necessary?",
      "revId": "dbf8a54ce889490ca8cd3d3d3f3af20c803c407a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "137f2ce0_b4a4589a",
        "filename": "ui/file_manager/file_manager/background/js/media_import_handler.js",
        "patchSetId": 15
      },
      "lineNbr": 386,
      "author": {
        "id": 1241182
      },
      "writtenOn": "2017-11-29T01:58:20Z",
      "side": 1,
      "message": "The MediaImportHandler / ImportTask only know after all retries have happened that the process is done, they don\u0027t know about the time a try is done and waiting for the next retry to happen - there is a test case testing the behavior if there was an error during the process, but because we mock the DriveSyncHandler in that test, the signal for the new retry to start will never happen, leading to time out in the test. Introducing this makes it possible to fire the DriveSyncHandler.COMPLETED_EVENT to trigger the retry, letting the test continue on without getting stuck.",
      "parentUuid": "5968511f_9c5df2a2",
      "revId": "dbf8a54ce889490ca8cd3d3d3f3af20c803c407a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "68bf7c8d_498d3f15",
        "filename": "ui/file_manager/file_manager/background/js/media_import_handler.js",
        "patchSetId": 15
      },
      "lineNbr": 386,
      "author": {
        "id": 1116036
      },
      "writtenOn": "2017-11-29T19:17:25Z",
      "side": 1,
      "message": "If you are simply trying to known when the first import pass has completed, just add an event for that and send it to the observer. The test already has an observer and can use that signal to orchestrate DriveSyncHandler events.\n\nFurthermore, existence of that event would allow the progress center to clearly indicate to the user that the media backup is going into a retrying state. That might would also help address the liveness issues I raised in an earlier comment.",
      "parentUuid": "137f2ce0_b4a4589a",
      "revId": "dbf8a54ce889490ca8cd3d3d3f3af20c803c407a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}