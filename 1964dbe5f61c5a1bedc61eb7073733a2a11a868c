{
  "comments": [
    {
      "key": {
        "uuid": "c181a491_5bf57df8",
        "filename": "chrome/browser/resources/print_preview/data/destination_match.js",
        "patchSetId": 6
      },
      "lineNbr": 19,
      "author": {
        "id": 1115893
      },
      "writtenOn": "2017-09-28T00:14:37Z",
      "side": 1,
      "message": "Nit (cleanup suggestion for a separate CL): Let\u0027s convert this to ES6 class syntax, similar to NativeLayer class.",
      "revId": "1964dbe5f61c5a1bedc61eb7073733a2a11a868c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a829060c_c5f36ae4",
        "filename": "chrome/browser/resources/print_preview/data/destination_match.js",
        "patchSetId": 6
      },
      "lineNbr": 19,
      "author": {
        "id": 1182404
      },
      "writtenOn": "2017-09-28T16:26:56Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "c181a491_5bf57df8",
      "revId": "1964dbe5f61c5a1bedc61eb7073733a2a11a868c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "142a5517_eccc8150",
        "filename": "chrome/browser/resources/print_preview/data/destination_store.js",
        "patchSetId": 6
      },
      "lineNbr": 651,
      "author": {
        "id": 1115893
      },
      "writtenOn": "2017-09-28T00:14:37Z",
      "side": 1,
      "message": "This method does not access |this|. Let\u0027s make it a simple function (declared before DestinationStore class in this file).\n\nEdit: See other comment in this file about this method, with alternative suggestion (line 741).",
      "revId": "1964dbe5f61c5a1bedc61eb7073733a2a11a868c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0e77cfa0_6e924464",
        "filename": "chrome/browser/resources/print_preview/data/destination_store.js",
        "patchSetId": 6
      },
      "lineNbr": 651,
      "author": {
        "id": 1182404
      },
      "writtenOn": "2017-09-28T16:26:56Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "142a5517_eccc8150",
      "revId": "1964dbe5f61c5a1bedc61eb7073733a2a11a868c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7f86277f_77ae44c6",
        "filename": "chrome/browser/resources/print_preview/data/destination_store.js",
        "patchSetId": 6
      },
      "lineNbr": 683,
      "author": {
        "id": 1115893
      },
      "writtenOn": "2017-09-28T00:14:37Z",
      "side": 1,
      "message": "Can we change the type annotation at line 665 to be only {!print_preview.DestinationOrigin} and avoid this casting? Would it require making this type cast in multiple other places in the code?\n\nIt seems a bit odd that we allow two types.",
      "revId": "1964dbe5f61c5a1bedc61eb7073733a2a11a868c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4cfffce8_229d33cf",
        "filename": "chrome/browser/resources/print_preview/data/destination_store.js",
        "patchSetId": 6
      },
      "lineNbr": 683,
      "author": {
        "id": 1182404
      },
      "writtenOn": "2017-09-28T16:26:56Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7f86277f_77ae44c6",
      "revId": "1964dbe5f61c5a1bedc61eb7073733a2a11a868c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a71ac8a5_9e9e371f",
        "filename": "chrome/browser/resources/print_preview/data/destination_store.js",
        "patchSetId": 6
      },
      "lineNbr": 710,
      "author": {
        "id": 1115893
      },
      "writtenOn": "2017-09-28T00:14:37Z",
      "side": 1,
      "message": "Is this effectively equivalent to the slightly shorter version below?\n\n(origin \u003d\u003d print_preview.DestinationOrigin.PRIVET)",
      "range": {
        "startLine": 710,
        "startChar": 12,
        "endLine": 710,
        "endChar": 66
      },
      "revId": "1964dbe5f61c5a1bedc61eb7073733a2a11a868c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "76fdc78c_559974d4",
        "filename": "chrome/browser/resources/print_preview/data/destination_store.js",
        "patchSetId": 6
      },
      "lineNbr": 710,
      "author": {
        "id": 1182404
      },
      "writtenOn": "2017-09-28T16:26:56Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a71ac8a5_9e9e371f",
      "range": {
        "startLine": 710,
        "startChar": 12,
        "endLine": 710,
        "endChar": 66
      },
      "revId": "1964dbe5f61c5a1bedc61eb7073733a2a11a868c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1d4ab4ea_ed410679",
        "filename": "chrome/browser/resources/print_preview/data/destination_store.js",
        "patchSetId": 6
      },
      "lineNbr": 741,
      "author": {
        "id": 1115893
      },
      "writtenOn": "2017-09-28T00:14:37Z",
      "side": 1,
      "message": "Would it make sense to make a destinationMatch.getType() or getDestinationType() helper method and put this logic in the DestinationMatch class?",
      "revId": "1964dbe5f61c5a1bedc61eb7073733a2a11a868c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a5469ced_b46855ec",
        "filename": "chrome/browser/resources/print_preview/data/destination_store.js",
        "patchSetId": 6
      },
      "lineNbr": 741,
      "author": {
        "id": 1182404
      },
      "writtenOn": "2017-09-28T16:26:56Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1d4ab4ea_ed410679",
      "revId": "1964dbe5f61c5a1bedc61eb7073733a2a11a868c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "917a6311_65982d01",
        "filename": "chrome/browser/resources/print_preview/data/destination_store.js",
        "patchSetId": 6
      },
      "lineNbr": 745,
      "author": {
        "id": 1115893
      },
      "writtenOn": "2017-09-28T00:14:37Z",
      "side": 1,
      "message": "Nit: Indentation seems off by 2 here.",
      "revId": "1964dbe5f61c5a1bedc61eb7073733a2a11a868c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4d0548d8_20bc00de",
        "filename": "chrome/browser/resources/print_preview/data/destination_store.js",
        "patchSetId": 6
      },
      "lineNbr": 745,
      "author": {
        "id": 1182404
      },
      "writtenOn": "2017-09-28T16:26:56Z",
      "side": 1,
      "message": "git cl format --js is auto-formatting it to this if I try to change it. Is this a bug in clang format?",
      "parentUuid": "917a6311_65982d01",
      "revId": "1964dbe5f61c5a1bedc61eb7073733a2a11a868c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f26fb2dc_b111b8dd",
        "filename": "chrome/browser/ui/webui/print_preview/extension_printer_handler_unittest.cc",
        "patchSetId": 6
      },
      "lineNbr": 219,
      "author": {
        "id": 1001934
      },
      "writtenOn": "2017-09-27T23:22:57Z",
      "side": 1,
      "message": "Can we assume |capability| is not a nullptr? Same for the FindPath() return value.",
      "revId": "1964dbe5f61c5a1bedc61eb7073733a2a11a868c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7c91130e_c028f899",
        "filename": "chrome/browser/ui/webui/print_preview/extension_printer_handler_unittest.cc",
        "patchSetId": 6
      },
      "lineNbr": 219,
      "author": {
        "id": 1182404
      },
      "writtenOn": "2017-09-28T16:26:56Z",
      "side": 1,
      "message": "For this CL, yes, since we defined the capability that goes in and know it will not be null. However, added checks in case tests are added for null capabilities later.",
      "parentUuid": "f26fb2dc_b111b8dd",
      "revId": "1964dbe5f61c5a1bedc61eb7073733a2a11a868c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}