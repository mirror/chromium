{
  "comments": [
    {
      "key": {
        "uuid": "551f0d9a_eba0bba6",
        "filename": "chrome/browser/page_load_metrics/observers/core_page_load_metrics_observer.cc",
        "patchSetId": 5
      },
      "lineNbr": 551,
      "author": {
        "id": 1136769
      },
      "writtenOn": "2018-02-06T20:02:08Z",
      "side": 1,
      "message": "could we just couple this with the existing OnFirstInputDelayInPage callback? the 2 events should arrive together so it seems reasonable for clients to handle both in that same callback.",
      "revId": "20c8c6bca2b721c45a5ae9d6aa7cb7ca9c7b1269",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cbd94ed3_2db8cfad",
        "filename": "chrome/browser/page_load_metrics/observers/core_page_load_metrics_observer.cc",
        "patchSetId": 5
      },
      "lineNbr": 554,
      "author": {
        "id": 1136769
      },
      "writtenOn": "2018-02-06T22:21:53Z",
      "side": 1,
      "message": "we should probably also consider only logging this one in a WasStartedInForegroundOptionalEventInForeground, as it\u0027s probably not useful to record time to first input if some of that time was time where page was in background and thus time where the user wasn\u0027t necessarily waiting for the page to be ready before they interact.\n\nrelated to this can be also add FG/BG breakouts for FID as part of this change? those will mostly be for diagnostic purposes to sanity check they aren;t significantly different.",
      "revId": "20c8c6bca2b721c45a5ae9d6aa7cb7ca9c7b1269",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "674dc519_6516f16f",
        "filename": "chrome/browser/page_load_metrics/page_load_metrics_update_dispatcher.cc",
        "patchSetId": 5
      },
      "lineNbr": 224,
      "author": {
        "id": 1116050
      },
      "writtenOn": "2018-02-06T15:49:54Z",
      "side": 1,
      "message": "An out param might be cleaner?\nOr I could stick this in a superclass of the merger classes.",
      "range": {
        "startLine": 224,
        "startChar": 0,
        "endLine": 224,
        "endChar": 25
      },
      "revId": "20c8c6bca2b721c45a5ae9d6aa7cb7ca9c7b1269",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a54d1b66_ef265814",
        "filename": "chrome/browser/page_load_metrics/page_load_metrics_update_dispatcher.cc",
        "patchSetId": 5
      },
      "lineNbr": 224,
      "author": {
        "id": 1136769
      },
      "writtenOn": "2018-02-06T22:21:53Z",
      "side": 1,
      "message": "Ah, you know, I had implemented it the way you had now initially, and I was\u0027t super happy with all of the |\u003d code I had to add. So I do think having a superclass for merging might be the right way to go here.\n\nOther option would be to generalize PaintTimingMerger to PageLoadTimingMerger and have it take PageLoadTiming instances, or having separate MergePaintTiming and MergeInteractiveTiming methods on that class. That way we share a single backing did_merge_new_timing_value boolean, which I think is what we want (we don\u0027t actually need to know if only paint or interactive timing were updated, just that at least one value was updated, IIUC).",
      "parentUuid": "674dc519_6516f16f",
      "range": {
        "startLine": 224,
        "startChar": 0,
        "endLine": 224,
        "endChar": 25
      },
      "revId": "20c8c6bca2b721c45a5ae9d6aa7cb7ca9c7b1269",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f31ad7ef_234570df",
        "filename": "chrome/browser/page_load_metrics/page_load_metrics_update_dispatcher.cc",
        "patchSetId": 5
      },
      "lineNbr": 226,
      "author": {
        "id": 1136769
      },
      "writtenOn": "2018-02-06T22:21:53Z",
      "side": 1,
      "message": "let\u0027s maybe update the comment to explain that inout_existing_value is relative to the main frame\u0027s nav start but optional_candidate_new_value is relative to its frame\u0027s nav start, where navigation_start_offset contains the diff in nav starts between main frame vs the frame for optional_candidate_new_value.",
      "revId": "20c8c6bca2b721c45a5ae9d6aa7cb7ca9c7b1269",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5127bcfb_fdc9be3e",
        "filename": "chrome/browser/page_load_metrics/page_load_metrics_update_dispatcher.cc",
        "patchSetId": 5
      },
      "lineNbr": 239,
      "author": {
        "id": 1136769
      },
      "writtenOn": "2018-02-06T22:21:53Z",
      "side": 1,
      "message": "i see this is really my code originally, so maybe this is really feedback to myself, but...\n\nthis bit of code is a little tricky for me to read since it is both a pointer (because it is an inout val) and because it\u0027s a base::Optional. When I first read if (*inout_existing_value) I thought it was checking pointer nullness - I think it\u0027s easy for readers to make that mistake.\n\nSo maybe we could do this instead:\nDCHECK_NE(nullptr, inout_existing_value);\nif (inout_existing_value-\u003ehas_value()) {\n  // If we have a new value, but...\n} else {\n  did_merge_new_timing_value \u003d true;\n}\n\nWDYT?",
      "revId": "20c8c6bca2b721c45a5ae9d6aa7cb7ca9c7b1269",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e9aae001_edddf123",
        "filename": "chrome/browser/page_load_metrics/page_load_metrics_update_dispatcher.cc",
        "patchSetId": 5
      },
      "lineNbr": 293,
      "author": {
        "id": 1136769
      },
      "writtenOn": "2018-02-06T22:21:53Z",
      "side": 1,
      "message": "i can never quite remember, do |\u003d short circuit if the first expression is already true? we would not want that behavior.",
      "revId": "20c8c6bca2b721c45a5ae9d6aa7cb7ca9c7b1269",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3d5a6731_f62baa21",
        "filename": "chrome/browser/page_load_metrics/page_load_metrics_update_dispatcher.cc",
        "patchSetId": 5
      },
      "lineNbr": 307,
      "author": {
        "id": 1116050
      },
      "writtenOn": "2018-02-06T15:49:54Z",
      "side": 1,
      "message": "I think this is a bug? This doesn\u0027t set did_merge_new_timing_value_.\n\nI\u0027m inclined to just always use MaybeUpdateTimeDelta?",
      "range": {
        "startLine": 307,
        "startChar": 4,
        "endLine": 307,
        "endChar": 78
      },
      "revId": "20c8c6bca2b721c45a5ae9d6aa7cb7ca9c7b1269",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fd66eb7f_95344644",
        "filename": "chrome/browser/page_load_metrics/page_load_metrics_update_dispatcher.cc",
        "patchSetId": 5
      },
      "lineNbr": 307,
      "author": {
        "id": 1136769
      },
      "writtenOn": "2018-02-06T22:21:53Z",
      "side": 1,
      "message": "I think you are right, thank you for catching this! Using MaybeUpdateTimeDelta here, but in an is_main_frame if statement, SGTM, thanks!",
      "parentUuid": "3d5a6731_f62baa21",
      "range": {
        "startLine": 307,
        "startChar": 4,
        "endLine": 307,
        "endChar": 78
      },
      "revId": "20c8c6bca2b721c45a5ae9d6aa7cb7ca9c7b1269",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8190d32f_dd30455b",
        "filename": "third_party/WebKit/Source/core/loader/InteractiveDetectorTest.cpp",
        "patchSetId": 5
      },
      "lineNbr": 52,
      "author": {
        "id": 1177266
      },
      "writtenOn": "2018-02-06T19:48:28Z",
      "side": 1,
      "message": "DummyPageHolder automatically creates an InteractiveDetector on dummy_page_holder_-\u003eGetDocument(), and I found (empirically, I cannot decipher this behavior from the source code of ProvideTo) that this line does not overwrite the auto created supplement. Let\u0027s delete this line now since this is essentially a no-op. \n\nAs the code stands now, InteractiveDetector::From(GetDocument()) is not the same interacitve detector returned by GetDetector(). The first one is the auto created Interactive Detector, while the second one is the one constructed in this test (which tried to be a supplement on the dummy page holder document but failed.) \n\nAll the tests pass right now because we never mix the two interactive detectors in the same test case. Almost all the test cases exclusively use GetDetector(), while the last two test cases exclusive use the detector obtained using InteractiveDetector::From. But this is not ideal; it will be very easy in the future to mix these two up and confuse ourselves. \n\nI\u0027d change the last two tests to also use GetDetector(), and add a comment in the constructor describing the situation with two interactive detectors and state that if possible we should never use InteractiveDetector::From in the tests. If you want you can land this the way it is now, and I can do these cleanup fixes in a follow up CL.",
      "revId": "20c8c6bca2b721c45a5ae9d6aa7cb7ca9c7b1269",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "52f06a64_a35cb658",
        "filename": "third_party/WebKit/Source/core/loader/InteractiveDetectorTest.cpp",
        "patchSetId": 5
      },
      "lineNbr": 52,
      "author": {
        "id": 1116050
      },
      "writtenOn": "2018-02-07T15:25:12Z",
      "side": 1,
      "message": "Good gravy this was confusing.\n\nThe fundamental problem is that Supplementable uses the address of the char* key, not the contents. I\u0027ve exposed the address of the key used by InteractiveDetector, which lets us replace the InteractiveDetector from the DummyPageHolder after it\u0027s been given DCL.\n\nThis gives us an empty InteractiveDetector, which is connected to the document, so it receives long tasks.\n\nAdded a DCHECK to make sure we\u0027ve only got one InteractiveDetector floating around.",
      "parentUuid": "8190d32f_dd30455b",
      "revId": "20c8c6bca2b721c45a5ae9d6aa7cb7ca9c7b1269",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "df3a6d2c_5b4c00fe",
        "filename": "third_party/WebKit/Source/core/loader/InteractiveDetectorTest.cpp",
        "patchSetId": 5
      },
      "lineNbr": 52,
      "author": {
        "id": 1177266
      },
      "writtenOn": "2018-02-07T15:44:22Z",
      "side": 1,
      "message": "This is a much better fix! Thanks - LGTM.",
      "parentUuid": "52f06a64_a35cb658",
      "revId": "20c8c6bca2b721c45a5ae9d6aa7cb7ca9c7b1269",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b2445864_4f58a29c",
        "filename": "tools/metrics/histograms/histograms.xml",
        "patchSetId": 5
      },
      "lineNbr": 59159,
      "author": {
        "id": 1177266
      },
      "writtenOn": "2018-02-06T19:48:28Z",
      "side": 1,
      "message": "nit: Use a URL shortener (https://goo.gl/ works)",
      "revId": "20c8c6bca2b721c45a5ae9d6aa7cb7ca9c7b1269",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}