{
  "comments": [
    {
      "key": {
        "uuid": "e00e518c_51aef02c",
        "filename": "chrome/browser/page_load_metrics/observers/local_network_requests_page_load_metrics_observer.cc",
        "patchSetId": 22
      },
      "lineNbr": 12,
      "author": {
        "id": 1136769
      },
      "writtenOn": "2017-06-30T13:30:53Z",
      "side": 1,
      "message": "looks like lazyinstance is only used in the cc so you can omit this include\n\nlooks like there may be some other includes here that are now only needed in the cc. can we move them to cc?",
      "revId": "3e2c2947407ed37173893811413853409fe6089b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9242cf76_173fa0a3",
        "filename": "chrome/browser/page_load_metrics/observers/local_network_requests_page_load_metrics_observer.cc",
        "patchSetId": 22
      },
      "lineNbr": 12,
      "author": {
        "id": 1215055
      },
      "writtenOn": "2017-06-30T22:36:46Z",
      "side": 1,
      "message": "Sure, I\u0027ve cleaned up the includes in the .h, .cc, and unit tests.",
      "parentUuid": "e00e518c_51aef02c",
      "revId": "3e2c2947407ed37173893811413853409fe6089b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "eb92a95f_25206245",
        "filename": "chrome/browser/page_load_metrics/observers/local_network_requests_page_load_metrics_observer.cc",
        "patchSetId": 22
      },
      "lineNbr": 45,
      "author": {
        "id": 1136769
      },
      "writtenOn": "2017-06-30T13:30:53Z",
      "side": 1,
      "message": "The logic here has become increasingly complex. STATIC_HISTOGRAM_POINTER_GROUP is itself complex, so I think this code will benefit from simplifying the readability of the call site as much as possible. Let\u0027s see if we can move kNonlocalhostHistogramNames into a simple static helper class with utility methods that make it easy to interact with, e.g.\n\nclass NonLocalhostHistograms {\n public:\n  static const int kNumHistograms;\n\n  static int GetIndex(internal::DomainType domain_type, internal::ResourceType resource_type, bool status);\n  static const string\u0026 GetName(internal::DomainType domain_type, internal::ResourceType resource_type, bool status);\n\n private:\n  // LazyInstance member here\n};\n\nThis simplifies your callsite to make it more understandable:\n\nconst string\u0026 histogram_name \u003d\n    NonLocalhostHistograms::GetName(domain_type, resource_type, status);\nSTATIC_HISTOGRAM_POINTER_GROUP(\n    histogram_name,\n    NonLocalhostHistograms::GetIndex(domain_type, resource_type, status),\n    NonLocalhostHistograms::kNumHistograms,\n    Add(counts[histogram_name]),\n    // Use the same bucketing as UMA_HISTOGRAM_COUNTS_1000 macro\n    base::Histogram::FactoryGet(\n        histogram_name,\n        1,     // min value\n        1000,  // max value\n        50,    // bucket count\n        base::HistogramBase::kUmaTargetedHistogramFlag));",
      "revId": "3e2c2947407ed37173893811413853409fe6089b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3b470355_4982658d",
        "filename": "chrome/browser/page_load_metrics/observers/local_network_requests_page_load_metrics_observer.cc",
        "patchSetId": 22
      },
      "lineNbr": 45,
      "author": {
        "id": 1215055
      },
      "writtenOn": "2017-06-30T22:36:46Z",
      "side": 1,
      "message": "Since I need to access the histogram names in the unit tests, I would either need to declare NonlocalhostHistograms in the observer\u0027s .h file or create a new set of .h and .cc files for each of the histogram name classes. Is it preferable to add 2 new classes to the .h file, to create 2 new helper classes (with their .h and .cc files), or to just leave kNonlocalhostHistogramNames as is and add wrapper methods to simplify the code?",
      "parentUuid": "eb92a95f_25206245",
      "revId": "3e2c2947407ed37173893811413853409fe6089b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0c6a9aa7_eafa2e5a",
        "filename": "chrome/browser/page_load_metrics/observers/local_network_requests_page_load_metrics_observer.cc",
        "patchSetId": 22
      },
      "lineNbr": 45,
      "author": {
        "id": 1136769
      },
      "writtenOn": "2017-07-03T16:33:07Z",
      "side": 1,
      "message": "Given that this is only needed in this one function, maybe a class is overkill.\n\nI think it\u0027d still be helpful to factor the args to the macro out, to improve clarity, though. Something like:\n\nstatic const int kNumHistograms \u003d internal::DOMAIN_TYPE_LOCALHOST \u003c\u003c 6 |\n          internal::RESOURCE_TYPE_LOCALHOST \u003c\u003c 1 | true + 1;\n\nconst string\u0026 histogram_name \u003d \ninternal::kNonlocalhostHistogramNames.at(domain_type)\n          .at(resource_type)\n          .at(status);\nconst int histogram_index \u003d domain_type \u003c\u003c 6 | resource_type \u003c\u003c 1 | status;\nSTATIC_HISTOGRAM_POINTER_GROUP(\n    histogram_name, histogram_index, kNumHistograms,\n    Add(counts[histogram_name]),\n    base::Histogram::FactoryGet(\n        histogram_name,\n        1,     // min value\n        1000,  // max value\n        50,    // bucket count\n        base::HistogramBase::kUmaTargetedHistogramFlag));",
      "parentUuid": "3b470355_4982658d",
      "revId": "3e2c2947407ed37173893811413853409fe6089b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "894846a5_7f5021b0",
        "filename": "chrome/browser/page_load_metrics/observers/local_network_requests_page_load_metrics_observer.cc",
        "patchSetId": 22
      },
      "lineNbr": 45,
      "author": {
        "id": 1215055
      },
      "writtenOn": "2017-07-05T19:01:59Z",
      "side": 1,
      "message": "Agreed, I felt the same way. I\u0027ve factored out the arguments as you suggested.",
      "parentUuid": "0c6a9aa7_eafa2e5a",
      "revId": "3e2c2947407ed37173893811413853409fe6089b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6e920978_ca853dcd",
        "filename": "chrome/browser/page_load_metrics/observers/local_network_requests_page_load_metrics_observer.cc",
        "patchSetId": 22
      },
      "lineNbr": 70,
      "author": {
        "id": 1136769
      },
      "writtenOn": "2017-06-30T13:30:53Z",
      "side": 1,
      "message": "let\u0027s do the same here as for the nonlocalhost refactor suggested above",
      "revId": "3e2c2947407ed37173893811413853409fe6089b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1dd9a833_23a88ac2",
        "filename": "chrome/browser/page_load_metrics/observers/local_network_requests_page_load_metrics_observer.cc",
        "patchSetId": 22
      },
      "lineNbr": 70,
      "author": {
        "id": 1215055
      },
      "writtenOn": "2017-07-05T19:01:59Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6e920978_ca853dcd",
      "revId": "3e2c2947407ed37173893811413853409fe6089b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a2b75d9f_c7e36521",
        "filename": "chrome/browser/page_load_metrics/observers/local_network_requests_page_load_metrics_observer.cc",
        "patchSetId": 22
      },
      "lineNbr": 146,
      "author": {
        "id": 1136769
      },
      "writtenOn": "2017-06-30T13:30:53Z",
      "side": 1,
      "message": "what did we decide to do re: sharing this with the similar code in net/? does it make sense to share? perhaps add a comment pointing to the similar data structure that already exists in net/ with a note to consider consolidating them in the future?",
      "revId": "3e2c2947407ed37173893811413853409fe6089b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2223e135_5f04edfa",
        "filename": "chrome/browser/page_load_metrics/observers/local_network_requests_page_load_metrics_observer.cc",
        "patchSetId": 22
      },
      "lineNbr": 146,
      "author": {
        "id": 1215055
      },
      "writtenOn": "2017-06-30T22:36:46Z",
      "side": 1,
      "message": "This list of ports is specific to our study and isn\u0027t present in net, but I have asked mmenke about exposing the reserved IP address table at line 350 and will follow up based on his advice. If it isn\u0027t a simple change or will take them too much time to do, I\u0027ll add a comment pointing to the table in ip_address.cc and mentioning that it should be consolidated.",
      "parentUuid": "a2b75d9f_c7e36521",
      "revId": "3e2c2947407ed37173893811413853409fe6089b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1898545d_a966b2ef",
        "filename": "chrome/browser/page_load_metrics/observers/local_network_requests_page_load_metrics_observer.cc",
        "patchSetId": 22
      },
      "lineNbr": 168,
      "author": {
        "id": 1136769
      },
      "writtenOn": "2017-06-30T13:30:53Z",
      "side": 1,
      "message": "similar issue here - style guide prohibits non-POD static types: https://google.github.io/styleguide/cppguide.html#Static_and_Global_Variables\n\nthis will also need to use LazyInstance.",
      "revId": "3e2c2947407ed37173893811413853409fe6089b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6faef049_0d5f7f79",
        "filename": "chrome/browser/page_load_metrics/observers/local_network_requests_page_load_metrics_observer.cc",
        "patchSetId": 22
      },
      "lineNbr": 168,
      "author": {
        "id": 1215055
      },
      "writtenOn": "2017-06-30T22:36:46Z",
      "side": 1,
      "message": "I\u0027m using LazyInstance inside the initialization function above, same as for the histogram names maps.",
      "parentUuid": "1898545d_a966b2ef",
      "revId": "3e2c2947407ed37173893811413853409fe6089b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "876003f8_fcf5e02e",
        "filename": "chrome/browser/page_load_metrics/observers/local_network_requests_page_load_metrics_observer.cc",
        "patchSetId": 22
      },
      "lineNbr": 168,
      "author": {
        "id": 1136769
      },
      "writtenOn": "2017-07-03T16:33:07Z",
      "side": 1,
      "message": "Thinking about this more, in the context of the guidance in the style guide, I\u0027m actually not sure if invoking the LazyInstance function proactively during static initialization time ends up being any different from declaring a static variable.\n\nThe style guide says:\n\"Variables of class type with static storage duration are forbidden: they cause hard-to-find bugs due to indeterminate order of construction and destruction.\"\nhttps://google.github.io/styleguide/cppguide.html#Static_and_Global_Variables\n\nTo me, it seems like the concern here is with when the initialization runs, rather than with whether the variable itself is declared static.\n\nWhat I think is intended with LazyInstance types is that consumers call the getter function when they need it, rather than referencing a const static ref assigned during static initialization time.\n\nSo I think we actually want to get rid of all of these static const refs and call the getter directly (GetLocalhostPortCategories() in this case) when you want to use the given type.\n\nYou\u0027ll need to modify that function slightly to only perform initilization if the variable isn\u0027t set up yet, e.g.:\n\nconst std::map\u003cuint16_t, internal::PortType\u003e\u0026 GetLocalhostPortCategories() {\n  static base::LazyInstance\u003cstd::map\u003cuint16_t, internal::PortType\u003e\u003e::Leaky\n      localhost_port_categories \u003d LAZY_INSTANCE_INITIALIZER;\n  if (localhost_port_categories.Get().empty()) {\n    // initialize here\n  }\n  return localhost_port_categories.Get();\n}",
      "parentUuid": "6faef049_0d5f7f79",
      "revId": "3e2c2947407ed37173893811413853409fe6089b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "76bbc55a_dc11f8aa",
        "filename": "chrome/browser/page_load_metrics/observers/local_network_requests_page_load_metrics_observer.cc",
        "patchSetId": 22
      },
      "lineNbr": 168,
      "author": {
        "id": 1215055
      },
      "writtenOn": "2017-07-05T19:01:59Z",
      "side": 1,
      "message": "I think the style guide issue is more pertinent than the workings of LazyInstance, since it seems from the comments in lazy_instance.h that the Leaky version of the class functions the same way as creating an anonymous pointer that leaks memory. I\u0027ve changed all requests to the method to use the getter method to comply with the style guide.",
      "parentUuid": "876003f8_fcf5e02e",
      "revId": "3e2c2947407ed37173893811413853409fe6089b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0f7c10fc_50234257",
        "filename": "chrome/browser/page_load_metrics/observers/local_network_requests_page_load_metrics_observer.cc",
        "patchSetId": 22
      },
      "lineNbr": 350,
      "author": {
        "id": 1215055
      },
      "writtenOn": "2017-06-30T22:36:46Z",
      "side": 1,
      "message": "Following up with mmenke@ regarding having net/ expose the table in ip_address.cc from which this table is pulled.",
      "revId": "3e2c2947407ed37173893811413853409fe6089b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "01fe9afb_65791e35",
        "filename": "chrome/browser/page_load_metrics/observers/local_network_requests_page_load_metrics_observer.h",
        "patchSetId": 22
      },
      "lineNbr": 67,
      "author": {
        "id": 1136769
      },
      "writtenOn": "2017-07-03T16:33:07Z",
      "side": 1,
      "message": "same with these - i think we need to be calling the Getter function when wanting to use these maps, rather than assigning to a static const ref at static initialization time.",
      "revId": "3e2c2947407ed37173893811413853409fe6089b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "da540da8_ebb7cf81",
        "filename": "chrome/browser/page_load_metrics/observers/local_network_requests_page_load_metrics_observer.h",
        "patchSetId": 22
      },
      "lineNbr": 67,
      "author": {
        "id": 1215055
      },
      "writtenOn": "2017-07-05T19:01:59Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "01fe9afb_65791e35",
      "revId": "3e2c2947407ed37173893811413853409fe6089b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d044314b_bdfd7a28",
        "filename": "chrome/browser/page_load_metrics/observers/local_network_requests_page_load_metrics_observer_unittest.cc",
        "patchSetId": 22
      },
      "lineNbr": 41,
      "author": {
        "id": 1136769
      },
      "writtenOn": "2017-07-03T16:33:07Z",
      "side": 1,
      "message": "this is a really nice use of the c/c++ capability allowing declaration of multiple variables of the same type using comma. i haven\u0027t seen this before in tests but i will use this going forward. very nice, thanks :)",
      "revId": "3e2c2947407ed37173893811413853409fe6089b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "12e709d2_d78850a2",
        "filename": "chrome/browser/page_load_metrics/observers/local_network_requests_page_load_metrics_observer_unittest.cc",
        "patchSetId": 22
      },
      "lineNbr": 41,
      "author": {
        "id": 1215055
      },
      "writtenOn": "2017-07-05T19:01:59Z",
      "side": 1,
      "message": "Thanks \u003d)",
      "parentUuid": "d044314b_bdfd7a28",
      "revId": "3e2c2947407ed37173893811413853409fe6089b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f71788e6_eb48b60c",
        "filename": "chrome/browser/page_load_metrics/observers/local_network_requests_page_load_metrics_observer_unittest.cc",
        "patchSetId": 22
      },
      "lineNbr": 112,
      "author": {
        "id": 1136769
      },
      "writtenOn": "2017-07-03T16:33:07Z",
      "side": 1,
      "message": "is -102 a certain error code? if so, better to use that code directly, e.g net::CONNECTION_REFUSED (you just need to include net/base/net_errors.h)",
      "revId": "3e2c2947407ed37173893811413853409fe6089b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9315dcfa_3b6c4f88",
        "filename": "chrome/browser/page_load_metrics/observers/local_network_requests_page_load_metrics_observer_unittest.cc",
        "patchSetId": 22
      },
      "lineNbr": 112,
      "author": {
        "id": 1215055
      },
      "writtenOn": "2017-07-05T19:01:59Z",
      "side": 1,
      "message": "It doesn\u0027t matter which error code was used, so I had followed the convention of the other page load metrics observer tests and left the error code as an int. I\u0027ve changed it to net::CONNECTION_REFUSED.",
      "parentUuid": "f71788e6_eb48b60c",
      "revId": "3e2c2947407ed37173893811413853409fe6089b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0c6a49be_d805601f",
        "filename": "chrome/browser/page_load_metrics/observers/local_network_requests_page_load_metrics_observer_unittest.cc",
        "patchSetId": 22
      },
      "lineNbr": 131,
      "author": {
        "id": 1136769
      },
      "writtenOn": "2017-07-03T16:33:07Z",
      "side": 1,
      "message": "it\u0027s generally considered better practice to pass around pairs of values in a vector, than 2 separate parallel vectors. it reduces the risk of the values getting out of sync. could we change this to:\n\nconst std::vector\u003cstd::pair\u003cinternal::PageAddressInfo\u003e, bool\u003e resource_and_success_statuses or something along those lines?",
      "revId": "3e2c2947407ed37173893811413853409fe6089b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ed640264_f15a2d4c",
        "filename": "chrome/browser/page_load_metrics/observers/local_network_requests_page_load_metrics_observer_unittest.cc",
        "patchSetId": 22
      },
      "lineNbr": 131,
      "author": {
        "id": 1215055
      },
      "writtenOn": "2017-07-05T19:01:59Z",
      "side": 1,
      "message": "Sure, done.",
      "parentUuid": "0c6a49be_d805601f",
      "revId": "3e2c2947407ed37173893811413853409fe6089b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ca04f6b_51903fcb",
        "filename": "chrome/browser/page_load_metrics/observers/local_network_requests_page_load_metrics_observer_unittest.cc",
        "patchSetId": 22
      },
      "lineNbr": 156,
      "author": {
        "id": 1136769
      },
      "writtenOn": "2017-07-03T16:33:07Z",
      "side": 1,
      "message": "i believe that calling ExpectUniqueSample makes the call to ExpectTotalCount redundant. ExpectUniqueSample\u0027s comment says:\n\"// We know the exact number of samples in a bucket, and that no other bucket\n  // should have samples.\"\n\nSo I think you can remove the calls to ExpectTotalCount when you are subsequently calling ExpectUniqueSample for the same histogram.",
      "revId": "3e2c2947407ed37173893811413853409fe6089b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0a7c78b9_290c8da8",
        "filename": "chrome/browser/page_load_metrics/observers/local_network_requests_page_load_metrics_observer_unittest.cc",
        "patchSetId": 22
      },
      "lineNbr": 156,
      "author": {
        "id": 1215055
      },
      "writtenOn": "2017-07-05T19:01:59Z",
      "side": 1,
      "message": "Ah, I misunderstood the purpose of ExpectUniqueSample. Thanks, made the change.",
      "parentUuid": "9ca04f6b_51903fcb",
      "revId": "3e2c2947407ed37173893811413853409fe6089b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "738d78ac_126c171e",
        "filename": "chrome/browser/page_load_metrics/observers/local_network_requests_page_load_metrics_observer_unittest.cc",
        "patchSetId": 22
      },
      "lineNbr": 185,
      "author": {
        "id": 1136769
      },
      "writtenOn": "2017-07-03T16:33:07Z",
      "side": 1,
      "message": "given that this is specific to UKM can we name it ExpectUkmPageDomainMetric? Let\u0027s avoid \u0027PageLoad\u0027 in the name since this is actually looking for metrics for a different source than \u0027PageLoad\u0027.",
      "revId": "3e2c2947407ed37173893811413853409fe6089b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e684a343_9138664e",
        "filename": "chrome/browser/page_load_metrics/observers/local_network_requests_page_load_metrics_observer_unittest.cc",
        "patchSetId": 22
      },
      "lineNbr": 185,
      "author": {
        "id": 1215055
      },
      "writtenOn": "2017-07-05T19:01:59Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "738d78ac_126c171e",
      "revId": "3e2c2947407ed37173893811413853409fe6089b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e587c432_875d1d3e",
        "filename": "chrome/browser/page_load_metrics/observers/local_network_requests_page_load_metrics_observer_unittest.cc",
        "patchSetId": 22
      },
      "lineNbr": 205,
      "author": {
        "id": 1136769
      },
      "writtenOn": "2017-07-03T16:33:07Z",
      "side": 1,
      "message": "it\u0027s not immediately clear what the the \u0027+ 1\u0027 part is needed for. can you add a comment?",
      "revId": "3e2c2947407ed37173893811413853409fe6089b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "42e8ca8f_848bcdd5",
        "filename": "chrome/browser/page_load_metrics/observers/local_network_requests_page_load_metrics_observer_unittest.cc",
        "patchSetId": 22
      },
      "lineNbr": 205,
      "author": {
        "id": 1215055
      },
      "writtenOn": "2017-07-05T19:01:59Z",
      "side": 1,
      "message": "Sure, added a comment. It has to do with the fact that the DomainInfo entry will always be created, so the total number of UKM entries will be # metrics + 1.",
      "parentUuid": "e587c432_875d1d3e",
      "revId": "3e2c2947407ed37173893811413853409fe6089b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a855d440_13216168",
        "filename": "chrome/browser/page_load_metrics/observers/local_network_requests_page_load_metrics_observer_unittest.cc",
        "patchSetId": 22
      },
      "lineNbr": 207,
      "author": {
        "id": 1136769
      },
      "writtenOn": "2017-07-03T16:33:07Z",
      "side": 1,
      "message": "similarly, not immediately clear why we start iteration at 1 rather than zero here? what expected element are we skipping over here? note that I do not think that entries have a guaranteed expected ordering. I actually have a change in flight that adds some page load metrics UKM utility test methods - let me see if I can land that and you can see if any of those methods make this simpler for you here.",
      "revId": "3e2c2947407ed37173893811413853409fe6089b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "54ebbcc1_346fa2c3",
        "filename": "chrome/browser/page_load_metrics/observers/local_network_requests_page_load_metrics_observer_unittest.cc",
        "patchSetId": 22
      },
      "lineNbr": 207,
      "author": {
        "id": 1136769
      },
      "writtenOn": "2017-07-03T16:52:55Z",
      "side": 1,
      "message": "RE: the new test infra, a change with the new UKM test utility can be seen here:\nhttps://chromium-review.googlesource.com/c/558945/4/chrome/browser/page_load_metrics/observers/page_load_metrics_observer_test_harness.h\n\nI\u0027ll try to land this in the next few days and you can update to use it.\n\nLet me know if anything you need is missing from that test class.",
      "parentUuid": "a855d440_13216168",
      "revId": "3e2c2947407ed37173893811413853409fe6089b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "48d71919_f61ada10",
        "filename": "chrome/browser/page_load_metrics/observers/local_network_requests_page_load_metrics_observer_unittest.cc",
        "patchSetId": 22
      },
      "lineNbr": 207,
      "author": {
        "id": 1215055
      },
      "writtenOn": "2017-07-05T19:01:59Z",
      "side": 1,
      "message": "Starting at 1 is to skip the page domain info UKM entry. From the way UKM entries are recorded (at https://cs.chromium.org/chromium/src/components/ukm/ukm_recorder_impl.cc?sq\u003dpackage:chromium\u0026dr\u003dCSs\u0026l\u003d148 and https://cs.chromium.org/chromium/src/components/ukm/public/ukm_entry_builder.cc?sq\u003dpackage:chromium\u0026dr\u003dCSs\u0026l\u003d27), both the events and metrics are stored in vectors that are appended to for each new entry and metric, which is why I check them in the order I generate them from the observer.\n\nI personally believe this behavior should be codified in the documentation somewhere. I can understand that on the server side, it doesn\u0027t make sense to expect that the entries are received in any guaranteed order, but if they are generated from the same thread, I think it makes sense to expect that the order that entries are recorded is the same as the order in which they can be read back within Chrome.\n\nAs long as I can continue to rely on this behavior, I can relatively easily make the change to use the new test utility and shouldn\u0027t need any additional methods.",
      "parentUuid": "54ebbcc1_346fa2c3",
      "revId": "3e2c2947407ed37173893811413853409fe6089b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dc339efd_79abd577",
        "filename": "content/public/test/navigation_simulator.h",
        "patchSetId": 22
      },
      "lineNbr": 148,
      "author": {
        "id": 1115881
      },
      "writtenOn": "2017-06-30T14:51:27Z",
      "side": 1,
      "message": "nit: could you add a\n// --------------------------------------------------------------------------\nto mark the end of this section? Thanks!",
      "revId": "3e2c2947407ed37173893811413853409fe6089b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "720fb852_1a1cad0c",
        "filename": "content/public/test/navigation_simulator.h",
        "patchSetId": 22
      },
      "lineNbr": 148,
      "author": {
        "id": 1215055
      },
      "writtenOn": "2017-06-30T22:36:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "dc339efd_79abd577",
      "revId": "3e2c2947407ed37173893811413853409fe6089b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}