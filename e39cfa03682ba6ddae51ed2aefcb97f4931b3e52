{
  "comments": [
    {
      "key": {
        "uuid": "eaaa3508_260ca56f",
        "filename": "mojo/public/cpp/bindings/lib/sync_handle_registry.cc",
        "patchSetId": 1
      },
      "lineNbr": 116,
      "author": {
        "id": 1104639
      },
      "writtenOn": "2017-08-31T21:42:23Z",
      "side": 1,
      "message": "Correspondingly, do we need to AddEvent if the callbacks are all null and a new callback is registered?",
      "revId": "e39cfa03682ba6ddae51ed2aefcb97f4931b3e52",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5c204d20_f2676a14",
        "filename": "mojo/public/cpp/bindings/lib/sync_handle_registry.cc",
        "patchSetId": 1
      },
      "lineNbr": 116,
      "author": {
        "id": 1002808
      },
      "writtenOn": "2017-08-31T22:53:58Z",
      "side": 1,
      "message": "See PS3+ for what I did instead of that",
      "parentUuid": "eaaa3508_260ca56f",
      "revId": "e39cfa03682ba6ddae51ed2aefcb97f4931b3e52",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7b6ec6b0_95790f17",
        "filename": "mojo/public/cpp/bindings/tests/sync_handle_registry_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 80,
      "author": {
        "id": 1104639
      },
      "writtenOn": "2017-08-31T21:42:23Z",
      "side": 1,
      "message": "nit: depending *on*?",
      "revId": "e39cfa03682ba6ddae51ed2aefcb97f4931b3e52",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f8ea8dc3_d71e61df",
        "filename": "mojo/public/cpp/bindings/tests/sync_handle_registry_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 80,
      "author": {
        "id": 1002808
      },
      "writtenOn": "2017-08-31T22:53:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7b6ec6b0_95790f17",
      "revId": "e39cfa03682ba6ddae51ed2aefcb97f4931b3e52",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a0db4e4a_1c3314ab",
        "filename": "mojo/public/cpp/bindings/tests/sync_handle_registry_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 148,
      "author": {
        "id": 1104639
      },
      "writtenOn": "2017-08-31T21:42:23Z",
      "side": 1,
      "message": "optional: it would be nice to have more test cases, for example:\n- register a second callback for event_1, while in a callback registered for event_1.\n- signal the same event while in the callback of the event.\n- destroy the event while in the callback.\n\n(These could be in sepearate CL, too.)",
      "revId": "e39cfa03682ba6ddae51ed2aefcb97f4931b3e52",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "22dbdfae_5776f780",
        "filename": "mojo/public/cpp/bindings/tests/sync_handle_registry_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 148,
      "author": {
        "id": 1002808
      },
      "writtenOn": "2017-08-31T22:53:58Z",
      "side": 1,
      "message": "Done. I added two new cases:\n\n - Unregister and delete an event from within its callback, registering and waiting on a new\n   event before returning.\n - Unregister an event from within its callback, then register and wait on the same event\n   before returning.\n - Register another callback for an event within an existing callback for the same event,\n   then wait on the same event before returning and ensure that both callbacks are called",
      "parentUuid": "a0db4e4a_1c3314ab",
      "revId": "e39cfa03682ba6ddae51ed2aefcb97f4931b3e52",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}