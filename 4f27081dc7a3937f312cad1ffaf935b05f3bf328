{
  "comments": [
    {
      "key": {
        "uuid": "a83679e4_771ce424",
        "filename": "base/profiler/stack_sampling_profiler.cc",
        "patchSetId": 18
      },
      "lineNbr": 819,
      "author": {
        "id": 1001534
      },
      "writtenOn": "2018-01-15T11:31:06Z",
      "side": 1,
      "message": "You\u0027d need ScopedAllowBaseSyncPrimitivesOutsideBlockingScope to do these two combined.\n\nBut:\n 1) The allowance should be put at the callsite (not implicitly added to every caller -- even if only one here in practice)\n 2) Why do you need this wait in the first place? We should reallllly try to avoid it. Why can it already be active? Is this strictly for unit tests? If so, try to turn it into a ForTesting() method and use base::ScopedAllowBaseSyncPrimitivesForTesting.",
      "revId": "4f27081dc7a3937f312cad1ffaf935b05f3bf328",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "df981599_3b7718cc",
        "filename": "base/profiler/stack_sampling_profiler.cc",
        "patchSetId": 18
      },
      "lineNbr": 819,
      "author": {
        "id": 1228990
      },
      "writtenOn": "2018-01-15T19:14:44Z",
      "side": 1,
      "message": "\u003e\u003e You\u0027d need ScopedAllowBaseSyncPrimitivesOutsideBlockingScope to do these two combined.\n\nRe: Sure, I will switch to it.\n\n\u003e\u003e 1) The allowance should be put at the callsite (not implicitly added to every caller -- even \u003e\u003e if only one here in practice)\n\nRe: The callsite in this case is in ChromeBrowserMainParts. If we put the allowance there, we need to make ChromeBrowserMainParts a friend class of ScopedAllowBaseSyncPrimitivesOutsideBlockingScope, which I doubt is something we want. \n\n\u003e\u003e 2) Why do you need this wait in the first place? We should reallllly try to avoid it. Why can \u003e\u003e it already be active? Is this strictly for unit tests? If so, try to turn it into a \u003e\u003e ForTesting() method and use base::ScopedAllowBaseSyncPrimitivesForTesting.\n\nRe: I will defer to wittman@, the profiler code owener on this question.",
      "parentUuid": "a83679e4_771ce424",
      "revId": "4f27081dc7a3937f312cad1ffaf935b05f3bf328",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e775e307_d1816dd1",
        "filename": "base/profiler/stack_sampling_profiler.cc",
        "patchSetId": 18
      },
      "lineNbr": 819,
      "author": {
        "id": 1002120
      },
      "writtenOn": "2018-01-16T16:29:55Z",
      "side": 1,
      "message": "\u003e \u003e\u003e 2) Why do you need this wait in the first place? We should reallllly try to avoid it. Why can \u003e\u003e it already be active? Is this strictly for unit tests? If so, try to turn it into a \u003e\u003e ForTesting() method and use base::ScopedAllowBaseSyncPrimitivesForTesting.\n\u003e \n\u003e Re: I will defer to wittman@, the profiler code owener on this question.\n\nIt could be active if profiling was started, stopped, then immediately restarted, but the profiler thread had not yet finished taking the final sample. Waiting on this event enables us to ensure that the previous profiling occurring on the profiler thread has stopped before either starting profiling afresh from the same profiler, or destroying the profiler. We can\u0027t use task posting for this coordination because the thread owning the profiler may not have a message loop.\n\nIn this case we are not restarting the profiling, so there\u0027s guaranteed to be 0 wait here. In the restart case (which is not currently in use) the typical wait is 0 and the max wait is the time for the profiler to take one sample, which is a a couple hundred microseconds -- see the comment in the destructor.",
      "parentUuid": "df981599_3b7718cc",
      "revId": "4f27081dc7a3937f312cad1ffaf935b05f3bf328",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c44dc351_f8f25baf",
        "filename": "base/profiler/stack_sampling_profiler.cc",
        "patchSetId": 18
      },
      "lineNbr": 819,
      "author": {
        "id": 1228990
      },
      "writtenOn": "2018-01-17T01:03:36Z",
      "side": 1,
      "message": "I have switched to ScopedAllowBaseSyncPrimitivesOutsideBlockingScope. I think the allowance may remain where it is now.",
      "parentUuid": "e775e307_d1816dd1",
      "revId": "4f27081dc7a3937f312cad1ffaf935b05f3bf328",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "23e649ea_a83e0428",
        "filename": "chrome/browser/chrome_browser_main.cc",
        "patchSetId": 18
      },
      "lineNbr": 841,
      "author": {
        "id": 1002120
      },
      "writtenOn": "2018-01-13T01:45:04Z",
      "side": 1,
      "message": "DCHECK_CURRENTLY_ON(BrowserThread::IO)",
      "range": {
        "startLine": 841,
        "startChar": 0,
        "endLine": 841,
        "endChar": 55
      },
      "revId": "4f27081dc7a3937f312cad1ffaf935b05f3bf328",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a74434c6_685397ed",
        "filename": "chrome/browser/chrome_browser_main.cc",
        "patchSetId": 18
      },
      "lineNbr": 841,
      "author": {
        "id": 1228990
      },
      "writtenOn": "2018-01-15T19:14:44Z",
      "side": 1,
      "message": "Done.",
      "parentUuid": "23e649ea_a83e0428",
      "range": {
        "startLine": 841,
        "startChar": 0,
        "endLine": 841,
        "endChar": 55
      },
      "revId": "4f27081dc7a3937f312cad1ffaf935b05f3bf328",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4ad0dc11_4bb01e36",
        "filename": "chrome/browser/chrome_browser_main.cc",
        "patchSetId": 18
      },
      "lineNbr": 841,
      "author": {
        "id": 1002120
      },
      "writtenOn": "2018-01-16T16:29:55Z",
      "side": 1,
      "message": "I don\u0027t see a new patch set since this comment... does this still need to be uploaded?",
      "parentUuid": "a74434c6_685397ed",
      "range": {
        "startLine": 841,
        "startChar": 0,
        "endLine": 841,
        "endChar": 55
      },
      "revId": "4f27081dc7a3937f312cad1ffaf935b05f3bf328",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a4f9b5fc_e94bb4b3",
        "filename": "chrome/browser/chrome_browser_main.cc",
        "patchSetId": 18
      },
      "lineNbr": 841,
      "author": {
        "id": 1228990
      },
      "writtenOn": "2018-01-17T01:03:36Z",
      "side": 1,
      "message": "I was about to upload another patch (with this comment), but then I decided not uploading it until getting comments from you. Anyway, now it is fixed. Sorry about the confusion.",
      "parentUuid": "4ad0dc11_4bb01e36",
      "range": {
        "startLine": 841,
        "startChar": 0,
        "endLine": 841,
        "endChar": 55
      },
      "revId": "4f27081dc7a3937f312cad1ffaf935b05f3bf328",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eaecce70_73524bb2",
        "filename": "content/public/browser/browser_main_parts.h",
        "patchSetId": 18
      },
      "lineNbr": 78,
      "author": {
        "id": 1001534
      },
      "writtenOn": "2018-01-15T11:31:06Z",
      "side": 1,
      "message": "I\u0027d like to avoid adding this:\n\nCan we hook BrowserMainLoop::BrowserThreadsStarted() in //content instead?",
      "revId": "4f27081dc7a3937f312cad1ffaf935b05f3bf328",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a17d3260_b3691997",
        "filename": "content/public/browser/browser_main_parts.h",
        "patchSetId": 18
      },
      "lineNbr": 78,
      "author": {
        "id": 1228990
      },
      "writtenOn": "2018-01-15T19:14:44Z",
      "side": 1,
      "message": "Hi Gab, do you mean adding a virtual function BrowserThreadsStarted() here in browser_main_parts.h and call it from BrowserMainLoop::BrowserThreadsStarted()? \n\nWe want to start the profiler right after the thread is created in BrowserMainLoop::CreateThreads. So I think starting the profiler in CreateThreads is preferred here.\n\nwittman@, any thoughts here please?",
      "parentUuid": "eaecce70_73524bb2",
      "revId": "4f27081dc7a3937f312cad1ffaf935b05f3bf328",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "836328a1_d973144e",
        "filename": "content/public/browser/browser_main_parts.h",
        "patchSetId": 18
      },
      "lineNbr": 78,
      "author": {
        "id": 1002120
      },
      "writtenOn": "2018-01-16T16:29:55Z",
      "side": 1,
      "message": "I think hooking BrowserThreadsStarted() should work since it\u0027s called immediately after CreateThreads. We just need to ensure that the task is posted prior to the base version of the function being invoked.",
      "parentUuid": "a17d3260_b3691997",
      "revId": "4f27081dc7a3937f312cad1ffaf935b05f3bf328",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ffa5437b_39ecb50b",
        "filename": "content/public/browser/browser_main_parts.h",
        "patchSetId": 18
      },
      "lineNbr": 78,
      "author": {
        "id": 1228990
      },
      "writtenOn": "2018-01-17T01:03:36Z",
      "side": 1,
      "message": "I\u0027ve moved the profiler work to BrowserThreadsStarted.",
      "parentUuid": "836328a1_d973144e",
      "revId": "4f27081dc7a3937f312cad1ffaf935b05f3bf328",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}