{
  "comments": [
    {
      "key": {
        "uuid": "a53036d7_89b44a1d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 18
      },
      "lineNbr": 16,
      "author": {
        "id": 1001934
      },
      "writtenOn": "2018-02-05T18:51:32Z",
      "side": 1,
      "message": "\"|n+1| times async calls\" -\u003e \"|n+1| async calls\"",
      "range": {
        "startLine": 16,
        "startChar": 0,
        "endLine": 16,
        "endChar": 5
      },
      "revId": "7388a581f84d9157e9f6adf49d3b67d72ea5fb24",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "97d0e68f_34656c44",
        "filename": "/COMMIT_MSG",
        "patchSetId": 18
      },
      "lineNbr": 16,
      "author": {
        "id": 1127279
      },
      "writtenOn": "2018-02-06T14:44:44Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a53036d7_89b44a1d",
      "range": {
        "startLine": 16,
        "startChar": 0,
        "endLine": 16,
        "endChar": 5
      },
      "revId": "7388a581f84d9157e9f6adf49d3b67d72ea5fb24",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "48c3bc21_a7d71b04",
        "filename": "components/storage_monitor/media_transfer_protocol_device_observer_chromeos.cc",
        "patchSetId": 18
      },
      "lineNbr": 134,
      "author": {
        "id": 1001934
      },
      "writtenOn": "2018-02-05T18:51:32Z",
      "side": 1,
      "message": "Suggestion - please use this opportunity to switch to range-based for-loops.\n\n// I think it needs to be auto* instead of auto\u0026 ??\nfor (const auto* storage_info : storage_info_list)\n  DoAttachStorage(storage_info);",
      "revId": "7388a581f84d9157e9f6adf49d3b67d72ea5fb24",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "270ef320_22f230db",
        "filename": "components/storage_monitor/media_transfer_protocol_device_observer_chromeos.cc",
        "patchSetId": 18
      },
      "lineNbr": 134,
      "author": {
        "id": 1127279
      },
      "writtenOn": "2018-02-06T14:44:44Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "48c3bc21_a7d71b04",
      "revId": "7388a581f84d9157e9f6adf49d3b67d72ea5fb24",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "79eff863_416c981c",
        "filename": "device/media_transfer_protocol/media_transfer_protocol_manager.cc",
        "patchSetId": 18
      },
      "lineNbr": 86,
      "author": {
        "id": 1001934
      },
      "writtenOn": "2018-02-05T18:51:32Z",
      "side": 1,
      "message": "This is currently happening synchronously. Is it going to stay that way or will it become async later?",
      "revId": "7388a581f84d9157e9f6adf49d3b67d72ea5fb24",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dc3e2f4e_c1b0b5cd",
        "filename": "device/media_transfer_protocol/media_transfer_protocol_manager.cc",
        "patchSetId": 18
      },
      "lineNbr": 86,
      "author": {
        "id": 1001934
      },
      "writtenOn": "2018-02-06T23:09:35Z",
      "side": 1,
      "message": "Still curious about the plans here.",
      "parentUuid": "79eff863_416c981c",
      "revId": "7388a581f84d9157e9f6adf49d3b67d72ea5fb24",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fb0608a9_f9469350",
        "filename": "device/media_transfer_protocol/media_transfer_protocol_manager.cc",
        "patchSetId": 18
      },
      "lineNbr": 86,
      "author": {
        "id": 1113941
      },
      "writtenOn": "2018-02-07T09:29:31Z",
      "side": 1,
      "message": "The call will come in from the other side of a Mojo interface, so while the implementation of this method won\u0027t really change (i.e., it will still run the callback in the body of the method as it does here), it will indeed be asynchronous from the caller\u0027s POV.",
      "parentUuid": "dc3e2f4e_c1b0b5cd",
      "revId": "7388a581f84d9157e9f6adf49d3b67d72ea5fb24",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "96c71633_d8ffd2d3",
        "filename": "device/media_transfer_protocol/media_transfer_protocol_manager.h",
        "patchSetId": 18
      },
      "lineNbr": 32,
      "author": {
        "id": 1001934
      },
      "writtenOn": "2018-02-05T18:51:32Z",
      "side": 1,
      "message": "Are the pointers in the vector guaranteed to be non-NULL?",
      "revId": "7388a581f84d9157e9f6adf49d3b67d72ea5fb24",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cd4aa523_52dffbc3",
        "filename": "device/media_transfer_protocol/media_transfer_protocol_manager.h",
        "patchSetId": 18
      },
      "lineNbr": 32,
      "author": {
        "id": 1127279
      },
      "writtenOn": "2018-02-06T14:44:44Z",
      "side": 1,
      "message": "Yes, it gets addresses from existing MtpStorageInfo objects stored in storage_info_map_.",
      "parentUuid": "96c71633_d8ffd2d3",
      "revId": "7388a581f84d9157e9f6adf49d3b67d72ea5fb24",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "448bf147_a83f47bd",
        "filename": "device/media_transfer_protocol/media_transfer_protocol_manager.h",
        "patchSetId": 18
      },
      "lineNbr": 32,
      "author": {
        "id": 1001934
      },
      "writtenOn": "2018-02-06T23:09:35Z",
      "side": 1,
      "message": "Can you mention the fact that they are non-NULL in the comments? Or can they be changed from const pointers to const references?",
      "parentUuid": "cd4aa523_52dffbc3",
      "revId": "7388a581f84d9157e9f6adf49d3b67d72ea5fb24",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8d63b306_1a423324",
        "filename": "device/media_transfer_protocol/media_transfer_protocol_manager.h",
        "patchSetId": 18
      },
      "lineNbr": 116,
      "author": {
        "id": 1001934
      },
      "writtenOn": "2018-02-05T18:51:32Z",
      "side": 1,
      "message": "Maybe instead of making this assumption about the caller, change the interface to allow only 1 observer at a time?",
      "revId": "7388a581f84d9157e9f6adf49d3b67d72ea5fb24",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e32fafa4_3040b022",
        "filename": "device/media_transfer_protocol/media_transfer_protocol_manager.h",
        "patchSetId": 18
      },
      "lineNbr": 116,
      "author": {
        "id": 1127279
      },
      "writtenOn": "2018-02-06T14:44:44Z",
      "side": 1,
      "message": "Yes, it is one observer at a time. I can delete this comment. It registers one observer and return existing storages\u0027 info.",
      "parentUuid": "8d63b306_1a423324",
      "revId": "7388a581f84d9157e9f6adf49d3b67d72ea5fb24",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dc4c0b19_535f980d",
        "filename": "device/media_transfer_protocol/media_transfer_protocol_manager.h",
        "patchSetId": 18
      },
      "lineNbr": 116,
      "author": {
        "id": 1001934
      },
      "writtenOn": "2018-02-06T23:09:35Z",
      "side": 1,
      "message": "Similar to a comment on a previous comment, this method doesn\u0027t actually return anything. The comment should say something about |callback|.",
      "parentUuid": "e32fafa4_3040b022",
      "revId": "7388a581f84d9157e9f6adf49d3b67d72ea5fb24",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}