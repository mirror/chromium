{
  "comments": [
    {
      "key": {
        "uuid": "a1fdb80c_eadaee8d",
        "filename": "chrome/browser/resources/md_extensions/manager.js",
        "patchSetId": 18
      },
      "lineNbr": 147,
      "author": {
        "id": 1115745
      },
      "writtenOn": "2017-11-07T19:56:56Z",
      "side": 1,
      "message": "I\u0027d slightly prefer that we be able to use DOM-style events rather than extension API events for manager in order to avoid adding additional dependencies on the API and also to be able to leverage regular web testing tools.  How would you feel about having service fire these events when it received them, and then adding listeners for \u0027profile-state-changed\u0027 and such here?",
      "revId": "f171d53f41f7eb1e509d6471d7e189b424999664",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "54ae299f_5fa6448a",
        "filename": "chrome/browser/resources/md_extensions/manager.js",
        "patchSetId": 18
      },
      "lineNbr": 147,
      "author": {
        "id": 1115893
      },
      "writtenOn": "2017-11-07T20:20:54Z",
      "side": 1,
      "message": "Service is not an HTMLElement, so in order to fire its own events it would have to either\n\n1) inherit from cr.ui.EventTarget, see [1] or,\n2) contain a service.eventTarget member variable\n\nI was trying to avoid that, since it just seems it is adding an additional level of indirection (C++ event fired -\u003e Service handles C++ event -\u003e Service re-fires DOM event -\u003e Manager handles DOM event) and additional JS code to be executed.\n\nAlso DOM events seem more heavy-weight than necessary for Service-\u003eManager communication. DOM events have bubbling/capturing/preventDefault/stopPropagation mechanisms which only make sense when propagating events within a DOM tree.\n\n\u003e in order to avoid adding additional dependencies on the API\n\nDo you mean avoid additional methods on the API like getXXXTarget()? Personally I don\u0027t mind the extra method, especially since a FakeChromeEvent implementation already exists (see [2]) and I am already leveraging this during tests.\n\n[1] https://cs.chromium.org/chromium/src/ui/webui/resources/js/cr/event_target.js\n[2] https://cs.chromium.org/chromium/src/chrome/test/data/webui/fake_chrome_event.js",
      "parentUuid": "a1fdb80c_eadaee8d",
      "revId": "f171d53f41f7eb1e509d6471d7e189b424999664",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "30d1cf85_e7bc0a11",
        "filename": "chrome/browser/resources/md_extensions/manager.js",
        "patchSetId": 18
      },
      "lineNbr": 147,
      "author": {
        "id": 1115745
      },
      "writtenOn": "2017-11-07T20:29:11Z",
      "side": 1,
      "message": "Fair points, and I don\u0027t feel strongly, so if this is your preference, I\u0027m fine with it. :)",
      "parentUuid": "54ae299f_5fa6448a",
      "revId": "f171d53f41f7eb1e509d6471d7e189b424999664",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "70ffd4c4_d29ff8c6",
        "filename": "chrome/browser/resources/md_extensions/manager.js",
        "patchSetId": 18
      },
      "lineNbr": 147,
      "author": {
        "id": 1115893
      },
      "writtenOn": "2017-11-07T23:30:45Z",
      "side": 1,
      "message": "Thanks!",
      "parentUuid": "30d1cf85_e7bc0a11",
      "revId": "f171d53f41f7eb1e509d6471d7e189b424999664",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "489a3746_8ee0075d",
        "filename": "chrome/test/data/webui/extensions/extension_manager_unit_test.js",
        "patchSetId": 18
      },
      "lineNbr": 69,
      "author": {
        "id": 1115745
      },
      "writtenOn": "2017-11-07T19:56:56Z",
      "side": 1,
      "message": "Is this worth testing?  It seems like this is more just change-detection rather than behavior validation.  Should we either remove it, or instead test that the results are correct in the manager?",
      "revId": "f171d53f41f7eb1e509d6471d7e189b424999664",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "48df86ac_6fcb293b",
        "filename": "chrome/test/data/webui/extensions/extension_manager_unit_test.js",
        "patchSetId": 18
      },
      "lineNbr": 69,
      "author": {
        "id": 1115893
      },
      "writtenOn": "2017-11-07T23:30:45Z",
      "side": 1,
      "message": "Yes. This is not intended to be change detection. It ensures that the assertions within all the test() methods are happening after certain calls to developerPrivate API has happened, and therefore after the DOM has had a chance to be updated.",
      "parentUuid": "489a3746_8ee0075d",
      "revId": "f171d53f41f7eb1e509d6471d7e189b424999664",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f81afc73_5505b978",
        "filename": "chrome/test/data/webui/extensions/extension_manager_unit_test.js",
        "patchSetId": 18
      },
      "lineNbr": 91,
      "author": {
        "id": 1115745
      },
      "writtenOn": "2017-11-07T19:56:56Z",
      "side": 1,
      "message": "These are all copy-paste, right?",
      "revId": "f171d53f41f7eb1e509d6471d7e189b424999664",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "33634d9f_fc9eb9c2",
        "filename": "chrome/test/data/webui/extensions/extension_manager_unit_test.js",
        "patchSetId": 18
      },
      "lineNbr": 91,
      "author": {
        "id": 1115893
      },
      "writtenOn": "2017-11-07T23:30:45Z",
      "side": 1,
      "message": "This is mostly copy-paste. I changed the way installed extensions are simulated, using simulateExtensionInstall(). Before, when these tests resided within Service, the test fixture was a subclass of CrExtensionsBrowserTestWithInstalledExtension and was relying on actual calls to chrome.developerPrivate to provide test data. The current test does  not talk to chrome.developerPrivate, instead it talks to TestService defined near the top of this file.",
      "parentUuid": "f81afc73_5505b978",
      "revId": "f171d53f41f7eb1e509d6471d7e189b424999664",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}