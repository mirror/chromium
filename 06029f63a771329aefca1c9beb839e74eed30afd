{
  "comments": [
    {
      "key": {
        "uuid": "dc820a85_66abc6a3",
        "filename": "device/generic_sensor/public/cpp/sensor_reading.cc",
        "patchSetId": 9
      },
      "lineNbr": 49,
      "author": {
        "id": 1116054
      },
      "writtenOn": "2017-06-28T17:44:47Z",
      "side": 1,
      "message": "since this function should be as efficient as possible (called many times) it may make sense to have seq_lock and reading_data already available..",
      "range": {
        "startLine": 49,
        "startChar": 61,
        "endLine": 49,
        "endChar": 0
      },
      "revId": "06029f63a771329aefca1c9beb839e74eed30afd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a81c91fb_c3c597fb",
        "filename": "device/generic_sensor/public/cpp/sensor_reading.cc",
        "patchSetId": 9
      },
      "lineNbr": 49,
      "author": {
        "id": 1149144
      },
      "writtenOn": "2017-06-28T19:07:24Z",
      "side": 1,
      "message": "The disadvantage of making |reading_data| a member of SensorReadingSharedBuffer is that it will increase the size of the SensorReadingSharedBuffer struct.\n\nThe disadvantage of making |seq_lock| a member of SensorReadingSharedBuffer is that it will make the size of the SensorReadingSharedBuffer depend on platform, since |seq_lock| is a const reference and its size can be 32 bits or 64 bits. And that will make some test code more complicated:\nhttps://cs.chromium.org/chromium/src/device/generic_sensor/public/interfaces/sensor_provider.mojom?l\u003d30-33",
      "parentUuid": "dc820a85_66abc6a3",
      "range": {
        "startLine": 49,
        "startChar": 61,
        "endLine": 49,
        "endChar": 0
      },
      "revId": "06029f63a771329aefca1c9beb839e74eed30afd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d6a8702c_a33b1e29",
        "filename": "device/generic_sensor/public/cpp/sensor_reading.cc",
        "patchSetId": 9
      },
      "lineNbr": 49,
      "author": {
        "id": 1116054
      },
      "writtenOn": "2017-06-29T18:15:25Z",
      "side": 1,
      "message": "Same as previous comment.. if the SensorReadingSharedBuffer is used as a primitive with particular memory allocation it may be better to have the reading functionality separately (as we had before with SharedMemorySeqLockReader). It seems to me it\u0027s better to pre-allocate the temp_reading instead of creating it every time on stack?",
      "parentUuid": "a81c91fb_c3c597fb",
      "range": {
        "startLine": 49,
        "startChar": 61,
        "endLine": 49,
        "endChar": 0
      },
      "revId": "06029f63a771329aefca1c9beb839e74eed30afd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f0612cf1_18573d53",
        "filename": "device/generic_sensor/public/cpp/sensor_reading.cc",
        "patchSetId": 9
      },
      "lineNbr": 49,
      "author": {
        "id": 1149144
      },
      "writtenOn": "2017-07-11T16:53:20Z",
      "side": 1,
      "message": "Add SensorReadingSharedBufferReader class to separate the reading functionality from the buffer. And the |temp_reading_data_| is a member variable to avoid creating it every time on stack.\n\nDone.",
      "parentUuid": "d6a8702c_a33b1e29",
      "range": {
        "startLine": 49,
        "startChar": 61,
        "endLine": 49,
        "endChar": 0
      },
      "revId": "06029f63a771329aefca1c9beb839e74eed30afd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "10db0dc6_38b318ee",
        "filename": "device/generic_sensor/public/cpp/sensor_reading.cc",
        "patchSetId": 9
      },
      "lineNbr": 51,
      "author": {
        "id": 1116054
      },
      "writtenOn": "2017-06-28T17:44:47Z",
      "side": 1,
      "message": "maybe a name something like temp_reading or temp_reading_data.. and make it a member of SensorReadingSharedBuffer?",
      "range": {
        "startLine": 51,
        "startChar": 30,
        "endLine": 51,
        "endChar": 0
      },
      "revId": "06029f63a771329aefca1c9beb839e74eed30afd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "90aa4edd_40c1fcda",
        "filename": "device/generic_sensor/public/cpp/sensor_reading.cc",
        "patchSetId": 9
      },
      "lineNbr": 51,
      "author": {
        "id": 1149144
      },
      "writtenOn": "2017-06-28T19:07:24Z",
      "side": 1,
      "message": "Changed variable name to be |temp_reading_data|.\n\nThe above comment explains the disadvantage of making |reading_data| a member of SensorReadingSharedBuffer.",
      "parentUuid": "10db0dc6_38b318ee",
      "range": {
        "startLine": 51,
        "startChar": 30,
        "endLine": 51,
        "endChar": 0
      },
      "revId": "06029f63a771329aefca1c9beb839e74eed30afd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b93cd7fa_64ad8b3e",
        "filename": "device/generic_sensor/public/cpp/sensor_reading.h",
        "patchSetId": 9
      },
      "lineNbr": 107,
      "author": {
        "id": 1116054
      },
      "writtenOn": "2017-06-28T17:44:47Z",
      "side": 1,
      "message": "does it have to be a SensorReadingField? just store seqlock?",
      "range": {
        "startLine": 107,
        "startChar": 47,
        "endLine": 107,
        "endChar": 0
      },
      "revId": "06029f63a771329aefca1c9beb839e74eed30afd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a6b73c8c_e1864798",
        "filename": "device/generic_sensor/public/cpp/sensor_reading.h",
        "patchSetId": 9
      },
      "lineNbr": 107,
      "author": {
        "id": 1149144
      },
      "writtenOn": "2017-06-28T19:07:24Z",
      "side": 1,
      "message": "I think the OneWriterSeqLock is put into SensorReadingField to make sure it has a fixed size of 64 bits on every platform and this can simplify sensors shared buffer memory calculation:\nhttps://cs.chromium.org/chromium/src/device/generic_sensor/public/cpp/sensor_reading.h?l\u003d14-15",
      "parentUuid": "b93cd7fa_64ad8b3e",
      "range": {
        "startLine": 107,
        "startChar": 47,
        "endLine": 107,
        "endChar": 0
      },
      "revId": "06029f63a771329aefca1c9beb839e74eed30afd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "49239c0a_ec1492c9",
        "filename": "device/generic_sensor/public/cpp/sensor_reading.h",
        "patchSetId": 9
      },
      "lineNbr": 107,
      "author": {
        "id": 1116054
      },
      "writtenOn": "2017-06-29T18:15:25Z",
      "side": 1,
      "message": "hmm, dunno if the memory allocation is important here  maybe the reading functionality should be separate from the buffer like we had in the shared_memory_seqlock_reader.cc..",
      "parentUuid": "a6b73c8c_e1864798",
      "range": {
        "startLine": 107,
        "startChar": 47,
        "endLine": 107,
        "endChar": 0
      },
      "revId": "06029f63a771329aefca1c9beb839e74eed30afd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b7490472_f04d74a2",
        "filename": "device/generic_sensor/public/cpp/sensor_reading.h",
        "patchSetId": 9
      },
      "lineNbr": 107,
      "author": {
        "id": 1149144
      },
      "writtenOn": "2017-07-11T16:53:20Z",
      "side": 1,
      "message": "Thanks! Add SensorReadingSharedBufferReader class to separate the reading functionality from the buffer.\n\nDone.",
      "parentUuid": "49239c0a_ec1492c9",
      "range": {
        "startLine": 107,
        "startChar": 47,
        "endLine": 107,
        "endChar": 0
      },
      "revId": "06029f63a771329aefca1c9beb839e74eed30afd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}