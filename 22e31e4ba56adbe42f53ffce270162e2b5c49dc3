{
  "comments": [
    {
      "key": {
        "uuid": "bf57b4df_297763e2",
        "filename": "content/renderer/render_view_browsertest.cc",
        "patchSetId": 1
      },
      "lineNbr": 1609,
      "author": {
        "id": 1114374
      },
      "writtenOn": "2017-10-25T18:41:56Z",
      "side": 1,
      "message": "I can see why this would look like an improvement, and maybe I\u0027m just stuck in the past, but living in a world where non-ASCII charsets are used all the time, I have encountered too many times where non-ASCII in source code has backfired.\n\nIt might be diff tools, analyzers, custom python scripts, version control systems, IDEs, almost anything, but eventually strings like this seem to come back and bite you.\n\nIn this very particular case, the test is about decoding a very special sequence of bytes. Who knows how those characters will be encoded in the future, by every tool.",
      "revId": "22e31e4ba56adbe42f53ffce270162e2b5c49dc3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a57d2993_dbe369ec",
        "filename": "content/renderer/render_view_browsertest.cc",
        "patchSetId": 1
      },
      "lineNbr": 1609,
      "author": {
        "id": 1119171
      },
      "writtenOn": "2017-10-26T04:19:27Z",
      "side": 1,
      "message": "Yeah, I think that\u0027s probably a fair point.\n\nIn this case I\u0027m not even sure whether this is technically correct. I\u0027m concerned that the encoding of the literal is implementation defined, and we have to write \u0027u8\u0027 to make sure it\u0027s utf-8.\n\nI\u0027m going to downgrade this one to a Maybe pending more investigation/modifying the check to only consider ascii strings.",
      "parentUuid": "bf57b4df_297763e2",
      "revId": "22e31e4ba56adbe42f53ffce270162e2b5c49dc3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}