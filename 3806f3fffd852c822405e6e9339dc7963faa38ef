{
  "comments": [
    {
      "key": {
        "uuid": "06dc8b40_3430ea88",
        "filename": "third_party/WebKit/Source/bindings/core/v8/V8Initializer.cpp",
        "patchSetId": 19
      },
      "lineNbr": 559,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2018-01-12T00:28:48Z",
      "side": 1,
      "message": "Would it be possible to pass in v8::Context to Allocate? It\u0027s not nice that the Blink side needs to call GetCurrent and get the current context.\n\nYou\u0027ll need to change the V8 side though. A follow-up CL is fine.",
      "revId": "3806f3fffd852c822405e6e9339dc7963faa38ef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7b8c33e3_817a7c28",
        "filename": "third_party/WebKit/Source/bindings/core/v8/V8Initializer.cpp",
        "patchSetId": 19
      },
      "lineNbr": 559,
      "author": {
        "id": 1001213
      },
      "writtenOn": "2018-01-12T00:48:51Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "06dc8b40_3430ea88",
      "revId": "3806f3fffd852c822405e6e9339dc7963faa38ef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e0247522_0bfc9b60",
        "filename": "third_party/WebKit/Source/bindings/core/v8/V8Initializer.cpp",
        "patchSetId": 19
      },
      "lineNbr": 559,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2018-01-12T14:26:16Z",
      "side": 1,
      "message": "We discussed that already offline a bit. The use of Isolate::GetCurrent() is fragile and a lot of APIs have moved to explicitly passing Isolate or Context for that reason.",
      "parentUuid": "7b8c33e3_817a7c28",
      "revId": "3806f3fffd852c822405e6e9339dc7963faa38ef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d0b2f04d_855a1906",
        "filename": "third_party/WebKit/Source/bindings/core/v8/V8Initializer.cpp",
        "patchSetId": 19
      },
      "lineNbr": 561,
      "author": {
        "id": 1001213
      },
      "writtenOn": "2018-01-11T23:40:08Z",
      "side": 1,
      "message": "I thought about restricting this to 64-bit systems, since it doesn\u0027t help as much on 32-bit systems. Opinions?",
      "range": {
        "startLine": 561,
        "startChar": 0,
        "endLine": 561,
        "endChar": 76
      },
      "revId": "3806f3fffd852c822405e6e9339dc7963faa38ef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "069af4a7_fce76520",
        "filename": "third_party/WebKit/Source/bindings/core/v8/V8Initializer.cpp",
        "patchSetId": 19
      },
      "lineNbr": 561,
      "author": {
        "id": 1001040
      },
      "writtenOn": "2018-01-12T22:14:24Z",
      "side": 1,
      "message": "I suppose the big issue on 32-bit is increased address space fragmentation? If we observe a problem there, I\u0027d be OK doing this on 64-bit only. But it\u0027d be nice to give it a try on 32-bit and see what happens.",
      "parentUuid": "d0b2f04d_855a1906",
      "range": {
        "startLine": 561,
        "startChar": 0,
        "endLine": 561,
        "endChar": 76
      },
      "revId": "3806f3fffd852c822405e6e9339dc7963faa38ef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d614c40f_80547bf2",
        "filename": "third_party/WebKit/Source/platform/wtf/typed_arrays/ArrayBufferContents.cpp",
        "patchSetId": 19
      },
      "lineNbr": 47,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2018-01-12T00:28:48Z",
      "side": 1,
      "message": "Instead of creating a mapping, can we make SecurityOrigin own the Partition? Then we won\u0027t need to maintain the mapping between the keys and the partitions.",
      "revId": "3806f3fffd852c822405e6e9339dc7963faa38ef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c2e6abb8_252d0304",
        "filename": "third_party/WebKit/Source/platform/wtf/typed_arrays/ArrayBufferContents.cpp",
        "patchSetId": 19
      },
      "lineNbr": 47,
      "author": {
        "id": 1001213
      },
      "writtenOn": "2018-01-12T00:48:51Z",
      "side": 1,
      "message": "We can. I was reluctant to attach a partition to SecurityOrigin, as it\u0027s not really related to the class.\n\nSince there are likely only a few origins in a process, a base::small_map could be used instead of std::unordered_map.",
      "parentUuid": "d614c40f_80547bf2",
      "revId": "3806f3fffd852c822405e6e9339dc7963faa38ef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a6845cb5_1ee0ebf2",
        "filename": "third_party/WebKit/Source/platform/wtf/typed_arrays/ArrayBufferContents.cpp",
        "patchSetId": 19
      },
      "lineNbr": 47,
      "author": {
        "id": 1001213
      },
      "writtenOn": "2018-01-12T00:52:21Z",
      "side": 1,
      "message": "I should add, if it\u0027s OK to add a partition to SecurityOrigin, that would help with lifetime management. Related question: Is there a cheap way to tell when a PartitionRootGeneric is empty, so we could potentially release memory? Otherwise, we would have to track allocations per partition.",
      "parentUuid": "c2e6abb8_252d0304",
      "revId": "3806f3fffd852c822405e6e9339dc7963faa38ef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "76aded81_5cd53b22",
        "filename": "third_party/WebKit/Source/platform/wtf/typed_arrays/ArrayBufferContents.cpp",
        "patchSetId": 19
      },
      "lineNbr": 47,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2018-01-12T01:07:23Z",
      "side": 1,
      "message": "Currently no.\n\nCan we mitigate the memory concern by lazily instantiating ParitionRootGeneric (i.e., the first time the SecurityOrigin allocated an ArrayBuffer).",
      "parentUuid": "a6845cb5_1ee0ebf2",
      "revId": "3806f3fffd852c822405e6e9339dc7963faa38ef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "97742433_a085aea2",
        "filename": "third_party/WebKit/Source/platform/wtf/typed_arrays/ArrayBufferContents.cpp",
        "patchSetId": 19
      },
      "lineNbr": 47,
      "author": {
        "id": 1001040
      },
      "writtenOn": "2018-01-12T22:14:24Z",
      "side": 1,
      "message": "Another idea would be to key it off of content::SiteInstance rather than off of SecurityOrigin. SiteInstance is strictly more broad than SecurityOrigin (so fewer partitions â†’ less address space fragmentation; somewhat less granularity of protection; granularity aligned with Site Isolation which is our best boundary anyway; and maybe SiteInstance is a more natural owner of a partition than SecurityOrigin).",
      "parentUuid": "76aded81_5cd53b22",
      "revId": "3806f3fffd852c822405e6e9339dc7963faa38ef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "297e7fa3_147ccc6f",
        "filename": "third_party/WebKit/Source/platform/wtf/typed_arrays/ArrayBufferContents.cpp",
        "patchSetId": 19
      },
      "lineNbr": 50,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2018-01-12T00:28:48Z",
      "side": 1,
      "message": "Oh, you have to create a mapping between allocated entries and partitions... This should be pretty heavy (i.e., O(# of allocated entries)), right?\n\nHmm. The reason you need the mapping is that ArrayBuffers are not guaranteed to be created and destructed on the same SecurityOrigin, right? (considering document.domain etc)",
      "revId": "3806f3fffd852c822405e6e9339dc7963faa38ef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0ca00e7c_5dd3f5d0",
        "filename": "third_party/WebKit/Source/platform/wtf/typed_arrays/ArrayBufferContents.cpp",
        "patchSetId": 19
      },
      "lineNbr": 50,
      "author": {
        "id": 1001213
      },
      "writtenOn": "2018-01-12T00:48:51Z",
      "side": 1,
      "message": "Yes, it is pretty heavy. Unfortunately I couldn\u0027t get the mapping from void* (allocation base) to PartitionRootGeneric* to work robustly (it returned pointers that didn\u0027t match the root I thought I created.)\n\nAlso, ArrayBuffer::Allocator::Free can be called on a background thread, where it\u0027s not clear what the Context is.",
      "parentUuid": "297e7fa3_147ccc6f",
      "revId": "3806f3fffd852c822405e6e9339dc7963faa38ef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9c129324_997620de",
        "filename": "third_party/WebKit/Source/platform/wtf/typed_arrays/ArrayBufferContents.cpp",
        "patchSetId": 19
      },
      "lineNbr": 50,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2018-01-12T01:07:23Z",
      "side": 1,
      "message": "I think this is a show stopper...\n\nIt would be (not good but) better to let Allocator::Free search all ArrayBuffer partitions if Free is called on a different context of thread...\n\nIs there any way to encode where ArrayBuffer is allocated in the ArrayBuffer itself or an ArrayBuffer handle?",
      "parentUuid": "0ca00e7c_5dd3f5d0",
      "revId": "3806f3fffd852c822405e6e9339dc7963faa38ef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eb1e1d94_db6e8d38",
        "filename": "third_party/WebKit/Source/platform/wtf/typed_arrays/ArrayBufferContents.cpp",
        "patchSetId": 19
      },
      "lineNbr": 50,
      "author": {
        "id": 1001213
      },
      "writtenOn": "2018-01-12T01:13:58Z",
      "side": 1,
      "message": "We would have to track that on the V8 side, as this API just returns a pointer. To do this, we\u0027ll have to modify the ArrayBuffer::Allocator API. I\u0027ll look into that starting next week.",
      "parentUuid": "9c129324_997620de",
      "revId": "3806f3fffd852c822405e6e9339dc7963faa38ef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a540c109_29ac400a",
        "filename": "third_party/WebKit/Source/platform/wtf/typed_arrays/ArrayBufferContents.cpp",
        "patchSetId": 19
      },
      "lineNbr": 50,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2018-01-12T14:26:16Z",
      "side": 1,
      "message": "V8 knows the Isolate upon freeing which could be used to infer the partition as far as I can see. https://cs.chromium.org/chromium/src/v8/src/objects.cc?q\u003dFreeBackingStore\u0026l\u003d18960",
      "parentUuid": "eb1e1d94_db6e8d38",
      "revId": "3806f3fffd852c822405e6e9339dc7963faa38ef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "816a98fc_1ae31c9c",
        "filename": "third_party/WebKit/Source/platform/wtf/typed_arrays/ArrayBufferContents.cpp",
        "patchSetId": 19
      },
      "lineNbr": 69,
      "author": {
        "id": 1001040
      },
      "writtenOn": "2018-01-12T22:14:24Z",
      "side": 1,
      "message": "Is this the best type of lock to use, here? I have a bug open to get rid of it, if I can come up with something as good. It\u0027d be nice, but is not necessary, to reduce the # of SpinLock call sites.",
      "revId": "3806f3fffd852c822405e6e9339dc7963faa38ef",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}