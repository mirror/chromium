{
  "comments": [
    {
      "key": {
        "uuid": "53f37116_7cc2c829",
        "filename": "content/browser/manifest/manifest_manager_host.h",
        "patchSetId": 15
      },
      "lineNbr": 23,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-06-06T05:21:02Z",
      "side": 1,
      "message": "Maybe mention \"the main frame\" here explicitly as well, it wasn\u0027t until I read the implementation until I was sure that it was main frame only.\n\n(Are there a lot of other things which are main frame only? Maybe we want to consider an explicit way of expressing that rather than having things implement main frame filtering themselves? Or maybe this interface should just be frame-associated and only installed on the main frame? Either way, this would be a followup task)",
      "range": {
        "startLine": 23,
        "startChar": 19,
        "endLine": 23,
        "endChar": 26
      },
      "revId": "ecedf569e15de3632bcf0643bfe84c4ce791d449",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "31c298cd_08569f26",
        "filename": "content/renderer/manifest/manifest_manager.cc",
        "patchSetId": 15
      },
      "lineNbr": 190,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-06-06T05:21:02Z",
      "side": 1,
      "message": "Out of curiosity, why prefer this over swap()? With swap(), we don\u0027t have the problem of having to wonder if the standard specifies whether or not the original vector will be left empty (in fact, the standard doesn\u0027t guarantee this) and whether or not the clear() is redundant.",
      "range": {
        "startLine": 189,
        "startChar": 2,
        "endLine": 190,
        "endChar": 29
      },
      "revId": "ecedf569e15de3632bcf0643bfe84c4ce791d449",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cb078454_10d553e3",
        "filename": "content/renderer/manifest/manifest_manager.cc",
        "patchSetId": 15
      },
      "lineNbr": 198,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-06-06T05:21:02Z",
      "side": 1,
      "message": "Nit: #include \u003cutility\u003e",
      "range": {
        "startLine": 198,
        "startChar": 29,
        "endLine": 198,
        "endChar": 38
      },
      "revId": "ecedf569e15de3632bcf0643bfe84c4ce791d449",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "215fccf4_c2c5a0d4",
        "filename": "third_party/WebKit/public/platform/WebDisplayModeStructTraits.h",
        "patchSetId": 15
      },
      "lineNbr": 52,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-06-06T05:21:02Z",
      "side": 1,
      "message": "This is technically NOTREACHED() from my understanding of how mojo enums work. Ditto for the other EnumTraits::FromMojom... I wonder if we should be writing NOTREACHED() here for those as well? *shrug*",
      "range": {
        "startLine": 52,
        "startChar": 4,
        "endLine": 52,
        "endChar": 17
      },
      "revId": "ecedf569e15de3632bcf0643bfe84c4ce791d449",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c3b0df69_45bf4db6",
        "filename": "third_party/WebKit/public/platform/modules/manifest/manifest.mojom",
        "patchSetId": 15
      },
      "lineNbr": 33,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-06-06T05:21:02Z",
      "side": 1,
      "message": "This comment is kind of ambiguous, it\u0027s not clear if web contents means content::WebContents or web content from the, well, web. I\u0027m guessing it\u0027s the latter but I\u0027m not 100% sure",
      "range": {
        "startLine": 33,
        "startChar": 50,
        "endLine": 33,
        "endChar": 62
      },
      "revId": "ecedf569e15de3632bcf0643bfe84c4ce791d449",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cb424e83_e59557dc",
        "filename": "third_party/WebKit/public/platform/modules/manifest/manifest.mojom",
        "patchSetId": 15
      },
      "lineNbr": 44,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-06-06T05:21:02Z",
      "side": 1,
      "message": "Too bad this can\u0027t just be optional...",
      "range": {
        "startLine": 44,
        "startChar": 2,
        "endLine": 44,
        "endChar": 7
      },
      "revId": "ecedf569e15de3632bcf0643bfe84c4ce791d449",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ab0d9f7b_0214862b",
        "filename": "third_party/WebKit/public/platform/modules/manifest/manifest.mojom",
        "patchSetId": 15
      },
      "lineNbr": 90,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-06-06T05:21:02Z",
      "side": 1,
      "message": "Nit: \"or\" or \"and/or\" perhaps?",
      "range": {
        "startLine": 90,
        "startChar": 11,
        "endLine": 90,
        "endChar": 14
      },
      "revId": "ecedf569e15de3632bcf0643bfe84c4ce791d449",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}