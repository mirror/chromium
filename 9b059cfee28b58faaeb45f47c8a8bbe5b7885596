{
  "comments": [
    {
      "key": {
        "uuid": "252eac2a_626012f4",
        "filename": "chrome_elf/blacklist/blacklist.cc",
        "patchSetId": 15
      },
      "lineNbr": 34,
      "author": {
        "id": 1116013
      },
      "writtenOn": "2017-08-20T18:32:12Z",
      "side": 1,
      "message": "same comment about moving this stuff to somewhere under chrome_elf/crash",
      "range": {
        "startLine": 34,
        "startChar": 15,
        "endLine": 34,
        "endChar": 0
      },
      "revId": "9b059cfee28b58faaeb45f47c8a8bbe5b7885596",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "544392ca_17a733c9",
        "filename": "chrome_elf/blacklist/blacklist.h",
        "patchSetId": 15
      },
      "lineNbr": 86,
      "author": {
        "id": 1116013
      },
      "writtenOn": "2017-08-20T18:32:12Z",
      "side": 1,
      "message": "This doesn\u0027t really seem blacklist-related. I\u0027d consider sticking the crash dump bits elsewhere (probably back under chrome_elf/crash) unless there\u0027s a strong reason for this to be here.\n\nIt looks like this was moved out of chrome_elf/crash on purpose, but I\u0027m feeling slow and am having trouble understanding why it needs to be so.",
      "range": {
        "startLine": 86,
        "startChar": 72,
        "endLine": 86,
        "endChar": 0
      },
      "revId": "9b059cfee28b58faaeb45f47c8a8bbe5b7885596",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7044aa12_827b0337",
        "filename": "components/crash/content/app/crashpad.h",
        "patchSetId": 15
      },
      "lineNbr": 117,
      "author": {
        "id": 1116013
      },
      "writtenOn": "2017-08-20T18:32:12Z",
      "side": 1,
      "message": "s/RequestSingleCrashUploadImpl/RequestSingleCrashUpload/ in the comment?",
      "range": {
        "startLine": 117,
        "startChar": 64,
        "endLine": 117,
        "endChar": 0
      },
      "revId": "9b059cfee28b58faaeb45f47c8a8bbe5b7885596",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bdb04214_8ae36bd6",
        "filename": "components/crash/content/app/export_thunks.cc",
        "patchSetId": 15
      },
      "lineNbr": 13,
      "author": {
        "id": 1174099
      },
      "writtenOn": "2017-08-18T21:11:34Z",
      "side": 1,
      "message": "This is exactly the same as the comment in the .h. Get rid of this copy.",
      "revId": "9b059cfee28b58faaeb45f47c8a8bbe5b7885596",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "49061583_007211e2",
        "filename": "components/crash/content/app/export_thunks.cc",
        "patchSetId": 15
      },
      "lineNbr": 25,
      "author": {
        "id": 1174099
      },
      "writtenOn": "2017-08-18T21:11:34Z",
      "side": 1,
      "message": "1. This isn’t thread-safe.\n2. I can’t think of a good reason to “leak” this (I know it’s not a leak in that it’s still reachable and will be replaced on the next call, but it’s a bit porcine to waste this memory after the list of reports is no longer useful, which it will become almost immediately after returning.)\n3. It’s also not legal by our own decree against static destructors.\n\nEither the storage should come from the caller (but you’d have to provide a way to size it), or the storage can be provided here, non-static and dynamically allocated, along with a companion “free” function so that the deallocation can happen in the same module that did the allocation.",
      "revId": "9b059cfee28b58faaeb45f47c8a8bbe5b7885596",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "211f255f_42024586",
        "filename": "components/crash/content/app/export_thunks.h",
        "patchSetId": 15
      },
      "lineNbr": 6,
      "author": {
        "id": 1116013
      },
      "writtenOn": "2017-08-20T18:32:12Z",
      "side": 1,
      "message": "Is there any non-crash stuff to go here? If not, how about calling it crash_export_thunks.h?",
      "range": {
        "startLine": 6,
        "startChar": 53,
        "endLine": 6,
        "endChar": 0
      },
      "revId": "9b059cfee28b58faaeb45f47c8a8bbe5b7885596",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7a085282_aec804d0",
        "filename": "components/crash/content/app/export_thunks.h",
        "patchSetId": 15
      },
      "lineNbr": 17,
      "author": {
        "id": 1174099
      },
      "writtenOn": "2017-08-18T21:11:34Z",
      "side": 1,
      "message": "Maybe this should eschew the C++ types too. You don’t have the [re]alloc problem like you would for GetCrashReportsImpl() below, but there’s still a risk of C++ runtime shear across modules, right?\n\nIf you don’t think that’s a problem worth worrying about, at least #include \u003cstring\u003e.",
      "revId": "9b059cfee28b58faaeb45f47c8a8bbe5b7885596",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d21abf9e_d4290b8f",
        "filename": "components/crash/content/app/export_thunks.h",
        "patchSetId": 15
      },
      "lineNbr": 28,
      "author": {
        "id": 1174099
      },
      "writtenOn": "2017-08-18T21:11:34Z",
      "side": 1,
      "message": "\u003cstddef.h\u003e",
      "range": {
        "startLine": 28,
        "startChar": 25,
        "endLine": 28,
        "endChar": 31
      },
      "revId": "9b059cfee28b58faaeb45f47c8a8bbe5b7885596",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}