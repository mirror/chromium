{
  "comments": [
    {
      "key": {
        "uuid": "fbc2f19e_2bbeb52e",
        "filename": "components/viz/service/display/gl_renderer_copier.cc",
        "patchSetId": 3
      },
      "lineNbr": 129,
      "author": {
        "id": 1000887
      },
      "writtenOn": "2017-11-07T15:55:03Z",
      "side": 1,
      "message": "How does this account for requests sent over mojo?",
      "revId": "b8b97a9ba5f4eb2a484e9551242d6a1bbb17b247",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2b853128_ae7e0911",
        "filename": "components/viz/service/display/gl_renderer_copier.cc",
        "patchSetId": 3
      },
      "lineNbr": 129,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2017-11-07T21:12:03Z",
      "side": 1,
      "message": "It doesn\u0027t. There is no mojo interface for I420_PLANES, intentionally. A CopyOutputRequest originating from outside of VIZ cannot be requesting I420_PLANES (there is no struct traits mapping for that).\n\nNote that, if we ever do add mojo support for this, we\u0027d have to make a copy into shared memory for transport across processes. That could still be done on the same task runner, in struct traits, and then the copy passed around to other threads/processes. (However, see my reply to dcheng@ regarding why I think we will never want to do this.)",
      "parentUuid": "fbc2f19e_2bbeb52e",
      "revId": "b8b97a9ba5f4eb2a484e9551242d6a1bbb17b247",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "aac32965_86e6680e",
        "filename": "components/viz/service/display/gl_renderer_copier.cc",
        "patchSetId": 3
      },
      "lineNbr": 130,
      "author": {
        "id": 1000887
      },
      "writtenOn": "2017-11-07T15:55:03Z",
      "side": 1,
      "message": "DCHECK(!request-\u003eSends...()) ? We don\u0027t want to actually hit this. And document this requirement on the CopyOutputRequest API?",
      "revId": "b8b97a9ba5f4eb2a484e9551242d6a1bbb17b247",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "29c2eded_67150861",
        "filename": "components/viz/service/display/gl_renderer_copier.cc",
        "patchSetId": 3
      },
      "lineNbr": 130,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2017-11-07T21:12:03Z",
      "side": 1,
      "message": "Done. Added comment to CopyOutputResult::Format, where the I420_PLANES enum value is declared and documented.",
      "parentUuid": "aac32965_86e6680e",
      "revId": "b8b97a9ba5f4eb2a484e9551242d6a1bbb17b247",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a92b58d_b2cb2c49",
        "filename": "components/viz/service/display/gl_renderer_copier.cc",
        "patchSetId": 3
      },
      "lineNbr": 134,
      "author": {
        "id": 1000887
      },
      "writtenOn": "2017-11-07T15:55:03Z",
      "side": 1,
      "message": "Why does this one need to check framebuffer_texture?",
      "revId": "b8b97a9ba5f4eb2a484e9551242d6a1bbb17b247",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ed180987_97315ad1",
        "filename": "components/viz/service/display/gl_renderer_copier.cc",
        "patchSetId": 3
      },
      "lineNbr": 134,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2017-11-07T21:12:03Z",
      "side": 1,
      "message": "Added code comment here to explain:\n\n      // I420 readback always requires a source texture. If a\n      // |framebuffer_texture| was not provided (or scaling was requested), a\n      // texture must first be rendered from the currently-bound framebuffer.",
      "parentUuid": "7a92b58d_b2cb2c49",
      "revId": "b8b97a9ba5f4eb2a484e9551242d6a1bbb17b247",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c8998fa7_a9dab6a4",
        "filename": "components/viz/service/display/gl_renderer_copier.cc",
        "patchSetId": 3
      },
      "lineNbr": 518,
      "author": {
        "id": 1000887
      },
      "writtenOn": "2017-11-07T15:55:03Z",
      "side": 1,
      "message": "nit: for (int i \u003d 0; i \u003c num_rows; ++i)",
      "revId": "b8b97a9ba5f4eb2a484e9551242d6a1bbb17b247",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d482394a_3c620c7c",
        "filename": "components/viz/service/display/gl_renderer_copier.cc",
        "patchSetId": 3
      },
      "lineNbr": 518,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2017-11-07T21:12:03Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c8998fa7_a9dab6a4",
      "revId": "b8b97a9ba5f4eb2a484e9551242d6a1bbb17b247",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "38beda74_d6e2997b",
        "filename": "components/viz/service/display/gl_renderer_copier.cc",
        "patchSetId": 3
      },
      "lineNbr": 522,
      "author": {
        "id": 1000887
      },
      "writtenOn": "2017-11-07T15:55:03Z",
      "side": 1,
      "message": "then this goes, less loc yay",
      "revId": "b8b97a9ba5f4eb2a484e9551242d6a1bbb17b247",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "13746b8a_88530fde",
        "filename": "components/viz/service/display/gl_renderer_copier.cc",
        "patchSetId": 3
      },
      "lineNbr": 522,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2017-11-07T21:12:03Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "38beda74_d6e2997b",
      "revId": "b8b97a9ba5f4eb2a484e9551242d6a1bbb17b247",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "59fc1a7f_0c3457f0",
        "filename": "components/viz/service/display/gl_renderer_copier.cc",
        "patchSetId": 3
      },
      "lineNbr": 709,
      "author": {
        "id": 1115895
      },
      "writtenOn": "2017-10-30T20:23:29Z",
      "side": 1,
      "message": "Sorry, this is far too magical.  No zero ref count raw new auto deletions, please.\n\nCan this just be on the stack in its own scope?",
      "revId": "b8b97a9ba5f4eb2a484e9551242d6a1bbb17b247",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dbf33a43_764ead75",
        "filename": "components/viz/service/display/gl_renderer_copier.cc",
        "patchSetId": 3
      },
      "lineNbr": 709,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2017-11-06T23:59:36Z",
      "side": 1,
      "message": "Done. Yeah, now that I took a 2nd look (after a week\u0027s vacation), I admit I had just thrown everything into the ctor. The sequence of steps should be clearer now, with the ctor just creating the buffer that all the readbacks will be deposited into.",
      "parentUuid": "59fc1a7f_0c3457f0",
      "revId": "b8b97a9ba5f4eb2a484e9551242d6a1bbb17b247",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "809a19a6_eb82967b",
        "filename": "components/viz/service/display/gl_renderer_copier.cc",
        "patchSetId": 3
      },
      "lineNbr": 828,
      "author": {
        "id": 1115895
      },
      "writtenOn": "2017-10-30T20:23:29Z",
      "side": 1,
      "message": "I\u0027m not sure I understand all this take/create + cache/delete stuff.  It seems a little awkward to my eyes? It seems like it\u0027d be clearer to just have a CacheEntry to pass around which is either in the cache_ or just on the stack temporarily, and then you could create Optional scalers and converters on that cache entry as needed instead of needing to check for_source in all these helpers and they\u0027d all behave more consistently.\n\nThis is just a drive by function design side-eye.  Feel free to ignore this comment, as I don\u0027t think this patch makes this any different than what\u0027s been there beforehand.",
      "revId": "b8b97a9ba5f4eb2a484e9551242d6a1bbb17b247",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "597a8c2a_0afe32f7",
        "filename": "components/viz/service/display/gl_renderer_copier.cc",
        "patchSetId": 3
      },
      "lineNbr": 828,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2017-11-06T23:59:36Z",
      "side": 1,
      "message": "The problem being solved is that some requests will provide a \"source,\" which is a hint that GLRendererCopier should cache things and expect a stream of similarly-configured CopyOutputRequets to follow. When there is no source, we don\u0027t cache anything under the assumption it was a \"one-off\" CopyOutputRequest.\n\nI agree that, with this CL, it\u0027s starting to get a bit clunky. It was much simpler in the previous CLs. I\u0027ve filed crbug.com/781986 to revisit this. For now, I\u0027m way over-due on my work to move tab capture into VIZ; so, I\u0027d like to move forward and get that all done first (to unblock the --mus flag for everyone else on the Mus project).",
      "parentUuid": "809a19a6_eb82967b",
      "revId": "b8b97a9ba5f4eb2a484e9551242d6a1bbb17b247",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}