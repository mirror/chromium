{
  "comments": [
    {
      "key": {
        "uuid": "49359fc2_93eb814c",
        "filename": "cc/animation/animation_host.cc",
        "patchSetId": 5
      },
      "lineNbr": 640,
      "author": {
        "id": 1115878
      },
      "writtenOn": "2018-02-01T23:11:39Z",
      "side": 1,
      "message": "If this is true, why does a cc::AnimationPlayer have multiple AnimationTicker objects\ninside it?",
      "revId": "7e423a14da984f90418185d618cd3d1f3b37d2fd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "39939b67_6c9cf737",
        "filename": "cc/animation/animation_host.cc",
        "patchSetId": 5
      },
      "lineNbr": 640,
      "author": {
        "id": 1148154
      },
      "writtenOn": "2018-02-02T15:07:08Z",
      "side": 1,
      "message": "I talked with smcgruger@, and this is the current state. A cc::Animation animates on single property single target, a cc::AnimationTicker wraps a set of cc::Animation to animate on multiple properties and single target, finally a cc::AnimationPlayer wraps a set of cc::AnimationTicker to animate on multiple properties and multiple targets. Does that make sense?",
      "parentUuid": "49359fc2_93eb814c",
      "revId": "7e423a14da984f90418185d618cd3d1f3b37d2fd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9956d663_00fc5926",
        "filename": "cc/animation/animation_host.cc",
        "patchSetId": 5
      },
      "lineNbr": 640,
      "author": {
        "id": 1212214
      },
      "writtenOn": "2018-02-02T16:07:03Z",
      "side": 1,
      "message": "Correct. \u0027Soon\u0027, blink::Animation will be able to target multiple elements too, via a GroupKeyframeEffect (or similar construct). cc is ahead of blink at this time, because that\u0027s where AnimationWorklet work is happening.",
      "parentUuid": "39939b67_6c9cf737",
      "revId": "7e423a14da984f90418185d618cd3d1f3b37d2fd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "04624c3c_6adba430",
        "filename": "third_party/WebKit/Source/core/animation/CompositorAnimations.cpp",
        "patchSetId": 5
      },
      "lineNbr": 306,
      "author": {
        "id": 1115878
      },
      "writtenOn": "2018-02-01T23:11:39Z",
      "side": 1,
      "message": "Only SVG roots or SVG foreignObecjt can possible paint into their own backing, because only \nthey can have PaintLayers. Animating transform or opacity on an SVG root should work just\nfine on the compositor, right? For foreignObect it cannot, but OTOH is there a way to\ndeclare such an animation on it in the first place?",
      "revId": "7e423a14da984f90418185d618cd3d1f3b37d2fd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9fc2b364_f37b8541",
        "filename": "third_party/WebKit/Source/core/animation/CompositorAnimations.cpp",
        "patchSetId": 5
      },
      "lineNbr": 306,
      "author": {
        "id": 1148154
      },
      "writtenOn": "2018-02-02T15:07:08Z",
      "side": 1,
      "message": "Could you check my new patch? My understanding is this: all these conditions except the SVGRoot needs to be checked because they could make the |paints_into_own_backing| \u003d false. When that is false, I have to make svg_related_element in a separate group (which returns NotPaintIntoOwnBacking).",
      "parentUuid": "04624c3c_6adba430",
      "revId": "7e423a14da984f90418185d618cd3d1f3b37d2fd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}