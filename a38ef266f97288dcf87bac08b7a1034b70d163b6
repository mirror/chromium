{
  "comments": [
    {
      "key": {
        "uuid": "660212e5_c8c42c31",
        "filename": "cc/scheduler/scheduler.cc",
        "patchSetId": 4
      },
      "lineNbr": 216,
      "author": {
        "id": 1002725
      },
      "writtenOn": "2017-12-05T14:45:33Z",
      "side": 1,
      "message": "I think only do this if the end of the method calls ProcessScheduledActions, right? applies to a lot of methods..",
      "revId": "a38ef266f97288dcf87bac08b7a1034b70d163b6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "764e291f_fa8d463b",
        "filename": "cc/scheduler/scheduler.cc",
        "patchSetId": 4
      },
      "lineNbr": 216,
      "author": {
        "id": 1000887
      },
      "writtenOn": "2017-12-05T17:34:17Z",
      "side": 1,
      "message": "Any call to the client_ should have this, as you did here I think. The client can call back to anything that would ProcessScheduledActions. Should we DCHECK that inside_scheduled_action_ is false when we do this? It might be easy to end up resetting it to false early if we go through 2 autoresets in the same call stack.\n\nIf you feel adventurous we could make an RAII object that gives access to the client and does these things.\n\nClientAccessor access(client_holder_);\naccess-\u003eclient()-\u003eSchedu...();\n\nOr something? If we hid client_ then it becomes hard/impossible to do this wrong.",
      "parentUuid": "660212e5_c8c42c31",
      "revId": "a38ef266f97288dcf87bac08b7a1034b70d163b6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "50739f79_d48d0d40",
        "filename": "cc/scheduler/scheduler.cc",
        "patchSetId": 4
      },
      "lineNbr": 216,
      "author": {
        "id": 1002725
      },
      "writtenOn": "2017-12-05T18:12:42Z",
      "side": 1,
      "message": "\u003e Any call to the client_ should have this, as you did here I think.\n\nIs that rule of thumb right? Take this BeginMainFrameNotExpectedUntil for example. It\u0027s called by ProcessScheduledActions, which means it\u0027s already wrapped by the existing inside_process_scheduled_actions_, so this line doesn\u0027t actually do anything?\n\nI thought we were worried about methods that \"normally\" do not have ProcessScheduledActions lower in the stack only?\n\n\u003e The client can call back to anything that would ProcessScheduledActions. Should we DCHECK that inside_scheduled_action_ is false when we do this? It might be easy to end up resetting it to false early if we go through 2 autoresets in the same call stack.\n\nautoreset can deal with recursing correctly though? (not that we shouldn\u0027t have DCHECK anyway)\n\n\u003e \n\u003e If you feel adventurous we could make an RAII object that gives access to the client and does these things.\n\u003e \n\u003e ClientAccessor access(client_holder_);\n\u003e access-\u003eclient()-\u003eSchedu...();\n\u003e \n\u003e Or something? If we hid client_ then it becomes hard/impossible to do this wrong.",
      "parentUuid": "764e291f_fa8d463b",
      "revId": "a38ef266f97288dcf87bac08b7a1034b70d163b6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "480e0da2_07eebdcc",
        "filename": "cc/scheduler/scheduler.cc",
        "patchSetId": 4
      },
      "lineNbr": 216,
      "author": {
        "id": 1244969
      },
      "writtenOn": "2017-12-05T19:56:18Z",
      "side": 1,
      "message": "I put a DCHECK(!inside_scheduled_action_) above each mark_inside, and it didn\u0027t seem to break anything. So maybe we don\u0027t have to worry about a second level of recursion between scheduler and client.\n\nI\u0027m not sure I understand the discussion about inside_process_scheduled_actions_ - is there any harm in having a redundant check in cases where we go from ProcessScheduledActions -\u003e (some scheduler function) -\u003e client?",
      "parentUuid": "50739f79_d48d0d40",
      "revId": "a38ef266f97288dcf87bac08b7a1034b70d163b6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "95986be5_fd6e780c",
        "filename": "cc/scheduler/scheduler.cc",
        "patchSetId": 4
      },
      "lineNbr": 483,
      "author": {
        "id": 1000887
      },
      "writtenOn": "2017-12-05T17:34:17Z",
      "side": 1,
      "message": "Could the begin_frame_source_ re-enter the scheduler too?",
      "revId": "a38ef266f97288dcf87bac08b7a1034b70d163b6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fdeead52_6c55e4e2",
        "filename": "cc/scheduler/scheduler.cc",
        "patchSetId": 4
      },
      "lineNbr": 483,
      "author": {
        "id": 1244969
      },
      "writtenOn": "2017-12-05T19:56:18Z",
      "side": 1,
      "message": "It doesn\u0027t seem like it could from DidFinishFrame, but in general maybe it can? https://cs.chromium.org/chromium/src/components/viz/common/frame_sinks/begin_frame_source.cc?l\u003d53",
      "parentUuid": "95986be5_fd6e780c",
      "revId": "a38ef266f97288dcf87bac08b7a1034b70d163b6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "52aa6890_80e878d2",
        "filename": "cc/scheduler/scheduler.cc",
        "patchSetId": 4
      },
      "lineNbr": 611,
      "author": {
        "id": 1000887
      },
      "writtenOn": "2017-12-05T17:34:17Z",
      "side": 1,
      "message": "Actually, hm so this method is called from ProcessScheduledActions. We could DCHECK inside_processed_scheduled_actions_ instead to show that the client_ call won\u0027t run the scheduler re-entrantly. I guess it\u0027s just the things that are post-tasked/given as callbacks that need to set this inside_scheduler bool of some sort.",
      "revId": "a38ef266f97288dcf87bac08b7a1034b70d163b6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}