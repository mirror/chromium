{
  "comments": [
    {
      "key": {
        "uuid": "452a8851_f66543da",
        "filename": "content/common/DEPS",
        "patchSetId": 13
      },
      "lineNbr": 17,
      "author": {
        "id": 1001472
      },
      "writtenOn": "2017-09-14T08:43:25Z",
      "side": 1,
      "message": "Can you list this separately from this block, like how we do in content/browser/DEPS?\n\nhttps://cs.chromium.org/chromium/src/content/browser/DEPS?q\u003dcontent/browser/DEPS\u0026sq\u003dpackage:chromium\u0026l\u003d151",
      "revId": "ebbb162ccf5be114a74bb32270cb03d4f59189be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "89241d06_e50b1ab6",
        "filename": "content/common/DEPS",
        "patchSetId": 13
      },
      "lineNbr": 17,
      "author": {
        "id": 1110029
      },
      "writtenOn": "2017-09-14T21:50:38Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "452a8851_f66543da",
      "revId": "ebbb162ccf5be114a74bb32270cb03d4f59189be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f278c078_8e9fcc56",
        "filename": "third_party/WebKit/Source/core/dom/MessageChannel.cpp",
        "patchSetId": 13
      },
      "lineNbr": 36,
      "author": {
        "id": 1002854
      },
      "writtenOn": "2017-09-14T03:17:51Z",
      "side": 1,
      "message": "nit: This is so trivial now; just inline it in the MessageChannel constructor (and the comment isn\u0027t really helpful anymore either).",
      "revId": "ebbb162ccf5be114a74bb32270cb03d4f59189be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1b51d090_7cf87b23",
        "filename": "third_party/WebKit/Source/core/dom/MessageChannel.cpp",
        "patchSetId": 13
      },
      "lineNbr": 36,
      "author": {
        "id": 1110029
      },
      "writtenOn": "2017-09-14T21:50:38Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f278c078_8e9fcc56",
      "revId": "ebbb162ccf5be114a74bb32270cb03d4f59189be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7b8f942e_1dfcb859",
        "filename": "third_party/WebKit/Source/core/dom/MessagePort.cpp",
        "patchSetId": 13
      },
      "lineNbr": 68,
      "author": {
        "id": 1002854
      },
      "writtenOn": "2017-09-14T03:17:51Z",
      "side": 1,
      "message": "nit: maybe just DCHECK(!IsNeutered()), since this expression is slightly long?",
      "revId": "ebbb162ccf5be114a74bb32270cb03d4f59189be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cf478ac2_b3dc57f2",
        "filename": "third_party/WebKit/Source/core/dom/MessagePort.cpp",
        "patchSetId": 13
      },
      "lineNbr": 68,
      "author": {
        "id": 1110029
      },
      "writtenOn": "2017-09-14T21:50:38Z",
      "side": 1,
      "message": "Yeah... although it feels slightly more redundant, since !IsEntangled already implies !IsNeutered... but of course the check is effectively the same as this explicit handle check, so changing it shouldn\u0027t be too bad. Changed here (and a couple of other places that had similar checks).",
      "parentUuid": "7b8f942e_1dfcb859",
      "revId": "ebbb162ccf5be114a74bb32270cb03d4f59189be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8e5e0e56_ffbd6e20",
        "filename": "third_party/WebKit/Source/core/dom/MessagePort.cpp",
        "patchSetId": 13
      },
      "lineNbr": 79,
      "author": {
        "id": 1002854
      },
      "writtenOn": "2017-09-14T03:17:51Z",
      "side": 1,
      "message": "Having to play these games with WTF::Vector, WebVector and std::vector isn\u0027t great. Since we\u0027re not mutating the size of this container, we could avoid this copy and not have to use WebVector if we instead make MessagePortChannel::PostMessage take a base::span\u003cMessagePortChannel\u003e, which is constructible directly from a WTF::Vector.\n\ni.e.\nvoid PostMessage(base::span\u003cconst uint8_t\u003e encoded_message,\n                 base::span\u003cMessagePortChannel\u003e ports);\n\nVector\u003cMessagePortChannel\u003e channels \u003d MessagePort::DisentanglePorts(...);\n// ...\nchannel_.PostMessage(\n    base::make_span(wire_data.Characters8(), wire_data.length()),\n    channels);\n\nOTOH, this might be a cleanup better left to another CL.\n\n+dcheng, I think we\u0027re ready to permit base::span in Source/core/ for use cases like this, right?",
      "revId": "ebbb162ccf5be114a74bb32270cb03d4f59189be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "020f0c2f_84549d90",
        "filename": "third_party/WebKit/Source/core/dom/MessagePort.cpp",
        "patchSetId": 13
      },
      "lineNbr": 79,
      "author": {
        "id": 1110029
      },
      "writtenOn": "2017-09-14T21:50:38Z",
      "side": 1,
      "message": "Yeah, the various vector conversions are kind of annoying. I do think it might be best to just leave that for a future CL for now though, as there is more we can do other than just change types to use base::span.\n\nFor example in https://chromium-review.googlesource.com/c/chromium/src/+/665883/1 or https://chromium-review.googlesource.com/c/chromium/src/+/667401/1 at least this particular piece of code no longer has to convert between types anymore, instead that will be in blink specific struct traits for the MessagePortMessage struct. But I\u0027m not quite decided yet on what the best approach for something like that would be. Also something I\u0027d like to experiment with (but not sure when I\u0027ll get to that) is get rid of blink::MessagePortChannel completely, using just a mojo::ScopedMessagePipeHandle directly (with something to still be able to pass it over IPC). The code to read/write to a message pipe directly could actually be much simpler than the code needed to use the MessagePortChannel abstraction, especially if the serialization/deserialization is hidden in binding generated codes with typemaps and/or helper methods. And of course another possibility to simplify stuff would be to make MessagePort an actual mojom interface somehow, which also would let us offload most of what MessagePortChannel does to mojo bindings. So definitely still multiple steps of clean-up after this CL.",
      "parentUuid": "8e5e0e56_ffbd6e20",
      "revId": "ebbb162ccf5be114a74bb32270cb03d4f59189be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8eaa4a59_22524428",
        "filename": "third_party/WebKit/Source/core/dom/MessagePort.cpp",
        "patchSetId": 13
      },
      "lineNbr": 79,
      "author": {
        "id": 1002854
      },
      "writtenOn": "2017-09-15T07:08:13Z",
      "side": 1,
      "message": "Fair enough about deferring the vector stuff; I can live with this being a little messy in the meantime.\n\nI\u0027m less sure about using a message pipe handle directly, because there is some non-trivial work done there that I\u0027m not super eager to mix with the DOM message port logic.",
      "parentUuid": "020f0c2f_84549d90",
      "revId": "ebbb162ccf5be114a74bb32270cb03d4f59189be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "70dcfd88_78a3b807",
        "filename": "third_party/WebKit/Source/core/dom/MessagePort.cpp",
        "patchSetId": 13
      },
      "lineNbr": 120,
      "author": {
        "id": 1001472
      },
      "writtenOn": "2017-09-14T08:43:25Z",
      "side": 1,
      "message": "Does this need to be CrossThreadBind? (I assume yes, but wasn\u0027t super clear- can we have a brief comment about that?)",
      "revId": "ebbb162ccf5be114a74bb32270cb03d4f59189be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "09bebb0e_229b5c74",
        "filename": "third_party/WebKit/Source/core/dom/MessagePort.cpp",
        "patchSetId": 13
      },
      "lineNbr": 120,
      "author": {
        "id": 1110029
      },
      "writtenOn": "2017-09-14T21:50:38Z",
      "side": 1,
      "message": "The comment for SetCallback \"This callback will be invoked on a background thread\" (and the comment for the MessageAvailable implementation) should hopefully make that clear, but yeah, doesn\u0027t hurt to also have a comment here.",
      "parentUuid": "70dcfd88_78a3b807",
      "revId": "ebbb162ccf5be114a74bb32270cb03d4f59189be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "92158d74_3072ef33",
        "filename": "third_party/WebKit/Source/core/dom/MessagePort.cpp",
        "patchSetId": 13
      },
      "lineNbr": 161,
      "author": {
        "id": 1002854
      },
      "writtenOn": "2017-09-14T03:17:51Z",
      "side": 1,
      "message": "nit: because MessagePortChannel\u0027s default constructor does construct a state on the heap, this is slightly more expensive than it has to be (because it construct and then move-assigns). This should move-construct instead:\n\nIf WTF::Vector had an (iterator, iterator) constructor this would be even easier, but since not:\n\nchannels.Shrink(0);\nchannels.ReserveCapacity(channels_vector.size());\nchannels.AppendRange(\n   std::make_move_iterator(channels_vector.begin()),\n   std::make_move_iterator(channels_vector.end()));",
      "revId": "ebbb162ccf5be114a74bb32270cb03d4f59189be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c42ccaf0_c10c1293",
        "filename": "third_party/WebKit/Source/core/dom/MessagePort.cpp",
        "patchSetId": 13
      },
      "lineNbr": 161,
      "author": {
        "id": 1110029
      },
      "writtenOn": "2017-09-14T21:50:38Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "92158d74_3072ef33",
      "revId": "ebbb162ccf5be114a74bb32270cb03d4f59189be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b089c5da_cb091b26",
        "filename": "third_party/WebKit/Source/core/dom/MessagePort.cpp",
        "patchSetId": 13
      },
      "lineNbr": 250,
      "author": {
        "id": 1002854
      },
      "writtenOn": "2017-09-14T03:17:51Z",
      "side": 1,
      "message": "nit: I generally like this pattern a lot, but regrettably here the default MessagePortChannel constructor actually does non-trivial work that we immediately throw away. Unless we change that, it might be worthwhile to push_back explicitly (to ensure that we move-construct instead of default-construct+move-assign).\n\nVector\u003cMessagePortChannel\u003e channels;\nchannels.ReserveInitialCapacity(ports.size());\nfor (const auto\u0026 port : ports)\n  channels.push_back(port-\u003eDisentangle());\nreturn channels;",
      "revId": "ebbb162ccf5be114a74bb32270cb03d4f59189be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f2554b13_a61c8180",
        "filename": "third_party/WebKit/Source/core/dom/MessagePort.cpp",
        "patchSetId": 13
      },
      "lineNbr": 250,
      "author": {
        "id": 1110029
      },
      "writtenOn": "2017-09-14T21:50:38Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b089c5da_cb091b26",
      "revId": "ebbb162ccf5be114a74bb32270cb03d4f59189be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "76324d74_bc89383c",
        "filename": "third_party/WebKit/Source/core/dom/MessagePort.cpp",
        "patchSetId": 13
      },
      "lineNbr": 258,
      "author": {
        "id": 1002854
      },
      "writtenOn": "2017-09-14T03:17:51Z",
      "side": 1,
      "message": "nit: since I mentioned it earlier: or base::span\u003cMessagePortChannel\u003e, which would take either kind of vector",
      "revId": "ebbb162ccf5be114a74bb32270cb03d4f59189be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a83a5b15_f734dd5c",
        "filename": "third_party/WebKit/Source/core/workers/SharedWorkerRepositoryClient.h",
        "patchSetId": 13
      },
      "lineNbr": 39,
      "author": {
        "id": 1002854
      },
      "writtenOn": "2017-09-14T03:17:51Z",
      "side": 1,
      "message": "would a forward decl suffice?",
      "revId": "ebbb162ccf5be114a74bb32270cb03d4f59189be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1c99dc8c_47e6329f",
        "filename": "third_party/WebKit/Source/core/workers/SharedWorkerRepositoryClient.h",
        "patchSetId": 13
      },
      "lineNbr": 39,
      "author": {
        "id": 1110029
      },
      "writtenOn": "2017-09-14T21:50:38Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a83a5b15_f734dd5c",
      "revId": "ebbb162ccf5be114a74bb32270cb03d4f59189be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5bb2c78a_854ee28b",
        "filename": "third_party/WebKit/common/message_port/message_port_channel.h",
        "patchSetId": 13
      },
      "lineNbr": 62,
      "author": {
        "id": 1001472
      },
      "writtenOn": "2017-09-14T08:43:25Z",
      "side": 1,
      "message": "Not sure if Bind is the best word, we do something similar to Bind but don\u0027t really call Bind... CreateFromHandles?",
      "revId": "ebbb162ccf5be114a74bb32270cb03d4f59189be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "67bda8cf_08c29c92",
        "filename": "third_party/WebKit/common/message_port/message_port_channel.h",
        "patchSetId": 13
      },
      "lineNbr": 62,
      "author": {
        "id": 1110029
      },
      "writtenOn": "2017-09-14T21:50:38Z",
      "side": 1,
      "message": "Good point. Changed it to CreateFromHandles.",
      "parentUuid": "5bb2c78a_854ee28b",
      "revId": "ebbb162ccf5be114a74bb32270cb03d4f59189be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "36fb44f6_25b10c94",
        "filename": "third_party/WebKit/common/message_port/message_port_channel.h",
        "patchSetId": 13
      },
      "lineNbr": 87,
      "author": {
        "id": 1001472
      },
      "writtenOn": "2017-09-14T08:43:25Z",
      "side": 1,
      "message": "nit: explicit (not from your code but while you\u0027re there)",
      "revId": "ebbb162ccf5be114a74bb32270cb03d4f59189be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ed5b19d9_3cd1b21b",
        "filename": "third_party/WebKit/common/message_port/message_port_channel.h",
        "patchSetId": 13
      },
      "lineNbr": 87,
      "author": {
        "id": 1110029
      },
      "writtenOn": "2017-09-14T21:50:38Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "36fb44f6_25b10c94",
      "revId": "ebbb162ccf5be114a74bb32270cb03d4f59189be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "675bdb18_dac83d46",
        "filename": "third_party/WebKit/public/BUILD.gn",
        "patchSetId": 13
      },
      "lineNbr": 669,
      "author": {
        "id": 1002854
      },
      "writtenOn": "2017-09-14T03:17:51Z",
      "side": 1,
      "message": "Since headers from //third_party/WebKit/common are included in this target\u0027s public headers, this should be in public_deps.",
      "revId": "ebbb162ccf5be114a74bb32270cb03d4f59189be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f85e321b_bf191135",
        "filename": "third_party/WebKit/public/BUILD.gn",
        "patchSetId": 13
      },
      "lineNbr": 669,
      "author": {
        "id": 1110029
      },
      "writtenOn": "2017-09-14T21:50:38Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "675bdb18_dac83d46",
      "revId": "ebbb162ccf5be114a74bb32270cb03d4f59189be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "331bfae9_3dc19d3f",
        "filename": "third_party/WebKit/public/web/WebDOMMessageEvent.h",
        "patchSetId": 13
      },
      "lineNbr": 37,
      "author": {
        "id": 1002854
      },
      "writtenOn": "2017-09-14T03:17:51Z",
      "side": 1,
      "message": "would a forward declaration suffice here?",
      "revId": "ebbb162ccf5be114a74bb32270cb03d4f59189be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1dea430d_a7e600da",
        "filename": "third_party/WebKit/public/web/WebDOMMessageEvent.h",
        "patchSetId": 13
      },
      "lineNbr": 37,
      "author": {
        "id": 1110029
      },
      "writtenOn": "2017-09-14T21:50:38Z",
      "side": 1,
      "message": "Not for this one. At least not without getting rid of the default argument values in the constructor below. Of course I could just have two constructors, one with and one without a ports argument to get the same API without having to have the default argument value be defined in the header file.\n\nChanging the WebVector to a base::span might actually also be enough to be able to get away with a forward declaration, as I guess that might work without having access to the full definition of its element type...",
      "parentUuid": "331bfae9_3dc19d3f",
      "revId": "ebbb162ccf5be114a74bb32270cb03d4f59189be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4ad9ad2d_833bd9a1",
        "filename": "third_party/WebKit/public/web/WebSharedWorker.h",
        "patchSetId": 13
      },
      "lineNbr": 38,
      "author": {
        "id": 1002854
      },
      "writtenOn": "2017-09-14T03:17:51Z",
      "side": 1,
      "message": "ditto: would a fwd decl suffice?",
      "revId": "ebbb162ccf5be114a74bb32270cb03d4f59189be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "05a9b2b0_755fcd03",
        "filename": "third_party/WebKit/public/web/WebSharedWorker.h",
        "patchSetId": 13
      },
      "lineNbr": 38,
      "author": {
        "id": 1110029
      },
      "writtenOn": "2017-09-14T21:50:38Z",
      "side": 1,
      "message": "Here it would, done.",
      "parentUuid": "4ad9ad2d_833bd9a1",
      "revId": "ebbb162ccf5be114a74bb32270cb03d4f59189be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1aaa58bf_9d2b9313",
        "filename": "third_party/WebKit/public/web/WebSharedWorkerRepositoryClient.h",
        "patchSetId": 13
      },
      "lineNbr": 37,
      "author": {
        "id": 1110029
      },
      "writtenOn": "2017-09-14T21:50:38Z",
      "side": 1,
      "message": "I could also change this one to a forward declaration, if either the implementation of Connect() moves to a .cpp file, or it is changed to a pure virtual method. WDYT?",
      "revId": "ebbb162ccf5be114a74bb32270cb03d4f59189be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fe720afd_0b4e6ff6",
        "filename": "third_party/WebKit/public/web/WebSharedWorkerRepositoryClient.h",
        "patchSetId": 13
      },
      "lineNbr": 37,
      "author": {
        "id": 1002854
      },
      "writtenOn": "2017-09-15T07:08:13Z",
      "side": 1,
      "message": "Pure virtual would be my ideal. I\u0027m okay with leaving includes of these if they\u0027re helpful; I just figured some of them looked like they ought to compile with just the forward declaration.",
      "parentUuid": "1aaa58bf_9d2b9313",
      "revId": "ebbb162ccf5be114a74bb32270cb03d4f59189be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}