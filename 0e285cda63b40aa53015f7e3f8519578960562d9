{
  "comments": [
    {
      "key": {
        "uuid": "b851ff88_91cd4627",
        "filename": "third_party/WebKit/Source/platform/scheduler/base/task_queue_impl.cc",
        "patchSetId": 1
      },
      "lineNbr": 158,
      "author": {
        "id": 1115913
      },
      "writtenOn": "2017-11-29T11:10:28Z",
      "side": 1,
      "message": "Why is std::move needed here?",
      "revId": "0e285cda63b40aa53015f7e3f8519578960562d9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "28775232_3b1ccab8",
        "filename": "third_party/WebKit/Source/platform/scheduler/base/task_queue_impl.cc",
        "patchSetId": 1
      },
      "lineNbr": 158,
      "author": {
        "id": 1150969
      },
      "writtenOn": "2017-11-29T11:26:39Z",
      "side": 1,
      "message": "Because it\u0027s a unique_ptr. We want to set it to null before deleting the tasks â€” deleting the task may invoke the destructor of TaskQueueImpl and it will result in weird things if the field is being accessed twice (from UnregisterTaskQueue and ~TaskQueueImpl).",
      "parentUuid": "b851ff88_91cd4627",
      "revId": "0e285cda63b40aa53015f7e3f8519578960562d9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b4385893_ad6e62f1",
        "filename": "third_party/WebKit/Source/platform/scheduler/base/task_queue_impl.cc",
        "patchSetId": 1
      },
      "lineNbr": 158,
      "author": {
        "id": 1119250
      },
      "writtenOn": "2017-11-29T11:32:31Z",
      "side": 1,
      "message": "Agreed the std::move looks really weird.  Essentially this is equivalent to\n\nmain_thread_only().delayed_work_queue.reset();\nmain_thread_only().immediate_work_queue.reset();\n\nmuch later in the destructor:\n\nimmediate_incoming_queue_.clear();\n\nCan we not do that?",
      "parentUuid": "28775232_3b1ccab8",
      "revId": "0e285cda63b40aa53015f7e3f8519578960562d9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}