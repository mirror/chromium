{
  "comments": [
    {
      "key": {
        "uuid": "6d085531_e1079bb5",
        "filename": "media/gpu/android_video_decode_accelerator.h",
        "patchSetId": 3
      },
      "lineNbr": 414,
      "author": {
        "id": 1001250
      },
      "writtenOn": "2017-08-31T22:32:52Z",
      "side": 1,
      "message": "enum class FrameInfromation : int to avoid ns pollution?",
      "revId": "61ce2094d074d022b294441e57ff5ac001026476",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "776a6577_3637ffe2",
        "filename": "media/gpu/android_video_decode_accelerator.h",
        "patchSetId": 3
      },
      "lineNbr": 414,
      "author": {
        "id": 1002410
      },
      "writtenOn": "2017-08-31T22:40:09Z",
      "side": 1,
      "message": "What\u0027s the reason to explicitly specify \": int\" as the backing storage type?",
      "parentUuid": "6d085531_e1079bb5",
      "revId": "61ce2094d074d022b294441e57ff5ac001026476",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5204fd67_71079395",
        "filename": "media/gpu/android_video_decode_accelerator.h",
        "patchSetId": 3
      },
      "lineNbr": 414,
      "author": {
        "id": 1001250
      },
      "writtenOn": "2017-08-31T22:43:32Z",
      "side": 1,
      "message": "Otherwise the values aren\u0027t convertible to ints and thus can\u0027t be stored in UMA; nor can they follow the UMA style guide with the explicit \"\u003d #\" IIRC.",
      "parentUuid": "776a6577_3637ffe2",
      "revId": "61ce2094d074d022b294441e57ff5ac001026476",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a8e56190_363bf645",
        "filename": "media/gpu/android_video_decode_accelerator.h",
        "patchSetId": 3
      },
      "lineNbr": 414,
      "author": {
        "id": 1002410
      },
      "writtenOn": "2017-08-31T22:51:18Z",
      "side": 1,
      "message": "Hmm, are you sure?  I believe that \"int\" is the default, and I haven\u0027t actually seen any issues come up for folks who don\u0027t specify the backing type.  Sorry for being so nit-picky about this!  I\u0027d like to understand whether there really is a need to specify the backing type; if there is, I\u0027ll start asking for it in code that I review as well.",
      "parentUuid": "5204fd67_71079395",
      "revId": "61ce2094d074d022b294441e57ff5ac001026476",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "84c24334_6b3c8dce",
        "filename": "media/gpu/android_video_decode_accelerator.h",
        "patchSetId": 3
      },
      "lineNbr": 414,
      "author": {
        "id": 1001250
      },
      "writtenOn": "2017-09-01T00:16:34Z",
      "side": 1,
      "message": "int isn\u0027t the default if you use \"enum class\" AFAIK. Without the class part, then yes it defaults to an integer type. https://stackoverflow.com/questions/12581064/enum-vs-strongly-typed-enum",
      "parentUuid": "a8e56190_363bf645",
      "revId": "61ce2094d074d022b294441e57ff5ac001026476",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "72390a78_1393dbf7",
        "filename": "media/gpu/android_video_decode_accelerator.h",
        "patchSetId": 3
      },
      "lineNbr": 414,
      "author": {
        "id": 1002410
      },
      "writtenOn": "2017-09-01T00:19:51Z",
      "side": 1,
      "message": "I\u0027m not sure what part of that page you were indicating, but I see there written \"Scoped enums gives you the ability to specify the underlying type of the enumeration, and for scoped enums, it defaults to int if you choose not to specify it.\"  What am I misunderstanding? \u003d)",
      "parentUuid": "84c24334_6b3c8dce",
      "revId": "61ce2094d074d022b294441e57ff5ac001026476",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "257e8d62_57d8a6df",
        "filename": "media/gpu/android_video_decode_accelerator.h",
        "patchSetId": 3
      },
      "lineNbr": 414,
      "author": {
        "id": 1001250
      },
      "writtenOn": "2017-09-01T00:39:25Z",
      "side": 1,
      "message": "Hmm, this is what I was referring to:\n\n$ cat test.cc\nenum class B : int {\n BLAH \u003d 0,\n BLAH2 \u003d 1\n};\n\nenum class C {\n BLAH \u003d 0,\n BLAH2 \u003d 1\n};\nint main() {\n  int b \u003d B::BLAH;\n  int c \u003d C::BLAH;\n  return 0;\n}\n\ndalecurtis@xorax /tmp $ clang++ --std\u003dc++11 test.cc \ntest.cc:18:7: error: cannot initialize a variable of type \u0027int\u0027 with an rvalue of type \u0027B\u0027\n  int a \u003d B::BLAH;\n      ^   ~~~~~~~\ntest.cc:19:7: error: cannot initialize a variable of type \u0027int\u0027 with an rvalue of type \u0027C\u0027\n  int b \u003d C::BLAH;\n\nI expected B::BLAH to allow implicit conversion, but it doesn\u0027t so I guess no matter what you do, if you use an enum class you still need a static_cast\u003cint\u003e. That\u0027s more about type conversion then it is the underlying the backing type though, so sorry for the confusion. It seems you can still set values per the UMA style guide like you thought though.",
      "parentUuid": "72390a78_1393dbf7",
      "revId": "61ce2094d074d022b294441e57ff5ac001026476",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eb022629_f7db46cb",
        "filename": "media/gpu/android_video_decode_accelerator.h",
        "patchSetId": 3
      },
      "lineNbr": 414,
      "author": {
        "id": 1002410
      },
      "writtenOn": "2017-09-01T02:19:07Z",
      "side": 1,
      "message": "Ok, cool, thanks for checking that!  Also, FYI, as of a few months ago, the UMA_HISTOGRAM_ENUMERATION macro does some fancy schmancyness to allow clients to omit the static_cast while still doing some amount of type checking.  \u003d)",
      "parentUuid": "257e8d62_57d8a6df",
      "revId": "61ce2094d074d022b294441e57ff5ac001026476",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}