{
  "comments": [
    {
      "key": {
        "uuid": "4fb6b16c_6f9865ba",
        "filename": "base/files/memory_mapped_file.cc",
        "patchSetId": 8
      },
      "lineNbr": 77,
      "author": {
        "id": 1174099
      },
      "writtenOn": "2017-11-09T18:00:15Z",
      "side": 1,
      "message": "Why’d you choose to do this in the signed domain?",
      "revId": "3dffef1c5ed8277a44af3910bbe8e2c866d2f6d0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7b29b328_e19eb226",
        "filename": "base/files/memory_mapped_file.cc",
        "patchSetId": 8
      },
      "lineNbr": 77,
      "author": {
        "id": 1160859
      },
      "writtenOn": "2017-11-09T18:08:06Z",
      "side": 1,
      "message": "hmm. all the file size types in base are signed int64_t e.g.\n\nbool GetFileSize(const FilePath\u0026 file_path, int64_t* file_size);\n\nint64_t FileEnumerator::FileInfo::GetSize()\n\non windows the 64-bit unsigned is cast down to 64-bit signed. Not sure why... probably a POSIX thing?",
      "parentUuid": "4fb6b16c_6f9865ba",
      "revId": "3dffef1c5ed8277a44af3910bbe8e2c866d2f6d0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "67856fe1_aad89ba8",
        "filename": "base/files/memory_mapped_file.cc",
        "patchSetId": 8
      },
      "lineNbr": 77,
      "author": {
        "id": 1174099
      },
      "writtenOn": "2017-11-09T18:14:31Z",
      "side": 1,
      "message": "\u003e hmm. all the file size types in base are signed int64_t e.g.\n\u003e \n\u003e bool GetFileSize(const FilePath\u0026 file_path, int64_t* file_size);\n\u003e \n\u003e int64_t FileEnumerator::FileInfo::GetSize()\n\u003e \n\u003e on windows the 64-bit unsigned is cast down to 64-bit signed. Not sure why... probably a POSIX thing?\n\nI think it’s safe (on some systems) to be able to reach into a file at an offset extending beyond the most maximum signed value. When you have a 32-bit off_t, for example, you should be able to successfully mmap() starting from 2GB minus one page, with a size of one or more pages. Admittedly you’re in the fringes at this point, and I’m not going to check the spec on this but it may even explicitly call it out as unspecified.\n\nIt’s of little practical impact because I don’t think we’ll see files that are larger than 8EB, but that’s why I asked.",
      "parentUuid": "7b29b328_e19eb226",
      "revId": "3dffef1c5ed8277a44af3910bbe8e2c866d2f6d0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "acf3f799_717ca74b",
        "filename": "base/files/memory_mapped_file.cc",
        "patchSetId": 8
      },
      "lineNbr": 77,
      "author": {
        "id": 1160859
      },
      "writtenOn": "2017-11-09T18:25:42Z",
      "side": 1,
      "message": "hmm I worry if we allow file extension to files beyond signed int64_t and then the rest of base isn\u0027t able to perform e.g. a getSize() on these files, that could be even more undefined behavior here... (and it\u0027s behavior we should arguably be able to control since it\u0027s base that defines the API and not the OS).\n\nIf you think we should change getSize() and base\u0027s understanding of maximum file length to be unsigned 64-bit then that\u0027s probably another whole set of CLs (and a whole new rabbit hole)...\n\nOr am I misunderstanding, are you just concerned about the edge case here?",
      "parentUuid": "67856fe1_aad89ba8",
      "revId": "3dffef1c5ed8277a44af3910bbe8e2c866d2f6d0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}