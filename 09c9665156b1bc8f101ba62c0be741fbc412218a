{
  "comments": [
    {
      "key": {
        "uuid": "4826759b_4863626b",
        "filename": "content/browser/cache_storage/cache_storage_cache.cc",
        "patchSetId": 14
      },
      "lineNbr": 253,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-08-01T07:54:00Z",
      "side": 1,
      "message": "This is a ridiculously long list of parameters \u003d/",
      "range": {
        "startLine": 253,
        "startChar": 33,
        "endLine": 253,
        "endChar": 40
      },
      "revId": "09c9665156b1bc8f101ba62c0be741fbc412218a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cbd20b69_a7e1c152",
        "filename": "content/browser/cache_storage/cache_storage_cache.cc",
        "patchSetId": 14
      },
      "lineNbr": 253,
      "author": {
        "id": 1110029
      },
      "writtenOn": "2017-08-01T17:23:22Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "4826759b_4863626b",
      "range": {
        "startLine": 253,
        "startChar": 33,
        "endLine": 253,
        "endChar": 40
      },
      "revId": "09c9665156b1bc8f101ba62c0be741fbc412218a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f5a56711_4074b068",
        "filename": "content/browser/cache_storage/cache_storage_cache_unittest.cc",
        "patchSetId": 14
      },
      "lineNbr": 448,
      "author": {
        "id": 1001472
      },
      "writtenOn": "2017-08-01T11:23:30Z",
      "side": 1,
      "message": "nit: mind adding /* blob */ after nullptr? here and elsewhere.",
      "revId": "09c9665156b1bc8f101ba62c0be741fbc412218a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4f7416ac_076dd246",
        "filename": "content/browser/cache_storage/cache_storage_cache_unittest.cc",
        "patchSetId": 14
      },
      "lineNbr": 448,
      "author": {
        "id": 1110029
      },
      "writtenOn": "2017-08-01T17:23:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f5a56711_4074b068",
      "revId": "09c9665156b1bc8f101ba62c0be741fbc412218a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dd605ad7_74f82c8b",
        "filename": "content/common/service_worker/service_worker_fetch_request_struct_traits.h",
        "patchSetId": 14
      },
      "lineNbr": 122,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-08-01T07:54:00Z",
      "side": 1,
      "message": "Out of curiosity, is it possible to return a const ref here and have it magically work?\n\n(I\u0027m assuming it doesn\u0027t work)",
      "range": {
        "startLine": 122,
        "startChar": 9,
        "endLine": 122,
        "endChar": 32
      },
      "revId": "09c9665156b1bc8f101ba62c0be741fbc412218a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d19ec5a8_738bc39c",
        "filename": "content/common/service_worker/service_worker_fetch_request_struct_traits.h",
        "patchSetId": 14
      },
      "lineNbr": 122,
      "author": {
        "id": 1110029
      },
      "writtenOn": "2017-08-01T17:23:22Z",
      "side": 1,
      "message": "I\u0027m not sure how it could work. We can\u0027t serialize a message pipe while keeping that same message pipe in the content::ServiceWorkerFetchRequest, so either this needs to be able to modify the |request| (which it can\u0027t because currently all over the place SWFetchRequest is passed around as const-ref), or as is done now we create a new message pipe by calling Clone on the Blob and return that pipe.",
      "parentUuid": "dd605ad7_74f82c8b",
      "range": {
        "startLine": 122,
        "startChar": 9,
        "endLine": 122,
        "endChar": 32
      },
      "revId": "09c9665156b1bc8f101ba62c0be741fbc412218a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "578d301f_ab993d2c",
        "filename": "content/renderer/cache_storage/cache_storage_dispatcher.cc",
        "patchSetId": 14
      },
      "lineNbr": 659,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-08-01T07:54:00Z",
      "side": 1,
      "message": "I\u0027m wondering why ... oh, this is converting from the Chrome to the Blink variant, isn\u0027t it? \u003d(",
      "range": {
        "startLine": 657,
        "startChar": 0,
        "endLine": 659,
        "endChar": 78
      },
      "revId": "09c9665156b1bc8f101ba62c0be741fbc412218a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ad783f34_a856304b",
        "filename": "content/renderer/cache_storage/cache_storage_dispatcher.cc",
        "patchSetId": 14
      },
      "lineNbr": 659,
      "author": {
        "id": 1110029
      },
      "writtenOn": "2017-08-01T17:23:22Z",
      "side": 1,
      "message": "Yeah... Even though InterfacePtrInfo\u003cT\u003e doesn\u0027t actually depend on T in any way this is currently the simplest way to convert between chrome and blink variants. If we weren\u0027t going to (hopefully) onion-soup everything it might make sense to change the binding so that the blink and chromium versions use the same InterfacePtrInfo types, making these conversions a bit simpler, but not sure if that is worth it.",
      "parentUuid": "578d301f_ab993d2c",
      "range": {
        "startLine": 657,
        "startChar": 0,
        "endLine": 659,
        "endChar": 78
      },
      "revId": "09c9665156b1bc8f101ba62c0be741fbc412218a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2f370701_9f862208",
        "filename": "content/renderer/service_worker/service_worker_context_client.cc",
        "patchSetId": 14
      },
      "lineNbr": 223,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-08-01T07:54:00Z",
      "side": 1,
      "message": "Though is it OK to use blink variants in content? It works here since the type is pretty simple (just a handle), but if there were strings and other containers involved, it wouldn\u0027t work, right?",
      "range": {
        "startLine": 223,
        "startChar": 22,
        "endLine": 223,
        "endChar": 56
      },
      "revId": "09c9665156b1bc8f101ba62c0be741fbc412218a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7e773235_85edb592",
        "filename": "content/renderer/service_worker/service_worker_context_client.cc",
        "patchSetId": 14
      },
      "lineNbr": 223,
      "author": {
        "id": 1110029
      },
      "writtenOn": "2017-08-01T17:23:22Z",
      "side": 1,
      "message": "Yeah, as I found out in a later CL I got really lucky in that this here compiled at all. In general it is certainly not safe to include blink bindings in content or vice versa. So unless we do change the bindings code to have a shared InterfacePtrInfo for both variants probably changing the blink public API to deal with raw ScopedMessagePipeHandles is the only way this will really work.",
      "parentUuid": "2f370701_9f862208",
      "range": {
        "startLine": 223,
        "startChar": 22,
        "endLine": 223,
        "endChar": 56
      },
      "revId": "09c9665156b1bc8f101ba62c0be741fbc412218a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9ac889f6_b0ddb4d4",
        "filename": "third_party/WebKit/public/BUILD.gn",
        "patchSetId": 14
      },
      "lineNbr": 662,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-08-01T07:54:00Z",
      "side": 1,
      "message": "This is getting pretty messy: something things depend directly on the generated files, some things only depend on the shared sources.\n\nI guess there\u0027s no hope that we can use the data view here because we have to pass it from content down into Blink?",
      "range": {
        "startLine": 662,
        "startChar": 33,
        "endLine": 662,
        "endChar": 60
      },
      "revId": "09c9665156b1bc8f101ba62c0be741fbc412218a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8fc4ed6f_25bfaffd",
        "filename": "third_party/WebKit/public/BUILD.gn",
        "patchSetId": 14
      },
      "lineNbr": 662,
      "author": {
        "id": 1110029
      },
      "writtenOn": "2017-08-01T17:23:22Z",
      "side": 1,
      "message": "Yeah, the only reason this was here was to make gn check happy. But now I changed the blink public API to just deal with raw ScopedMessagePipeHandle of course this dep isn\u0027t needed anymore either.\n\nAlthough, if I want to still use the bindings in #if INSIDE_BLINK for some of the public classes, I still need either this dependency or use // nogncheck on the include. Not sure what is worse...",
      "parentUuid": "9ac889f6_b0ddb4d4",
      "range": {
        "startLine": 662,
        "startChar": 33,
        "endLine": 662,
        "endChar": 60
      },
      "revId": "09c9665156b1bc8f101ba62c0be741fbc412218a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "da689480_167a1585",
        "filename": "third_party/WebKit/public/platform/modules/serviceworker/WebServiceWorkerRequest.h",
        "patchSetId": 14
      },
      "lineNbr": 62,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-08-01T07:54:00Z",
      "side": 1,
      "message": "That being said, one way we\u0027ve avoided the dependency dance (for now) is to pass a ScopedMessagePipeHandle across the Blink public API, with that expectation that onion soup will remove this.\n\nWDYT of doing that? It means the Blink public API is less typesafe in the short-term, but it avoids (IMO) the potential weirdness of exposing more Blink variant bindings via the public API.",
      "range": {
        "startLine": 62,
        "startChar": 15,
        "endLine": 62,
        "endChar": 49
      },
      "revId": "09c9665156b1bc8f101ba62c0be741fbc412218a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1f52c4e4_c870d609",
        "filename": "third_party/WebKit/public/platform/modules/serviceworker/WebServiceWorkerRequest.h",
        "patchSetId": 14
      },
      "lineNbr": 62,
      "author": {
        "id": 1110029
      },
      "writtenOn": "2017-08-01T17:23:22Z",
      "side": 1,
      "message": "Yeah, that seems like the only sensible approach, so I\u0027ve done that now.",
      "parentUuid": "da689480_167a1585",
      "range": {
        "startLine": 62,
        "startChar": 15,
        "endLine": 62,
        "endChar": 49
      },
      "revId": "09c9665156b1bc8f101ba62c0be741fbc412218a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}