{
  "comments": [
    {
      "key": {
        "uuid": "9bfb6c69_79c5d0f7",
        "filename": "components/cronet/android/cronet_url_request_context_adapter.cc",
        "patchSetId": 7
      },
      "lineNbr": 1048,
      "author": {
        "id": 1120845
      },
      "writtenOn": "2017-07-17T16:24:54Z",
      "side": 1,
      "message": "I am not sure if we can change that API to just pass a file path. Some Cronet consumers might not explicitly call StopNetLog(). An example usage is cl/161846784, where the cronet consumer only calls StartNetLog() but not StopNetLog(). For the old implementation, it is okay because NetLog import can handle truncated .json file and we write to output incrementally.\nFor the bounded implementation, if we hide the event directory from API user and only stitch files in StopNetLog(), we won\u0027t have any useful data if user doesn\u0027t call StopNetLog() (e.g. when user just uses \"adb pull path/to/netlog\" without calling StopNetLog() or when app crashes before StopNetLog() is called).",
      "range": {
        "startLine": 1048,
        "startChar": 22,
        "endLine": 1048,
        "endChar": 26
      },
      "revId": "4d40b1cff72209ac66e01ad3cbc82d9ac3a69356",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "afeecdca_2b369a02",
        "filename": "components/cronet/android/cronet_url_request_context_adapter.cc",
        "patchSetId": 7
      },
      "lineNbr": 1048,
      "author": {
        "id": 1120845
      },
      "writtenOn": "2017-07-17T16:43:39Z",
      "side": 1,
      "message": "On the other hand, given that NetLog is a debugging/diagnostics tool, we could enforce the API contract that StopNetLog() has to be called. That\u0027s a cleaner API contract to maintain in the long run and allows us to get rid of having to do manual file stitching.\n\nMisha, any thought?",
      "parentUuid": "9bfb6c69_79c5d0f7",
      "range": {
        "startLine": 1048,
        "startChar": 22,
        "endLine": 1048,
        "endChar": 26
      },
      "revId": "4d40b1cff72209ac66e01ad3cbc82d9ac3a69356",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "63d35c13_f51ca425",
        "filename": "components/cronet/android/cronet_url_request_context_adapter.cc",
        "patchSetId": 7
      },
      "lineNbr": 1048,
      "author": {
        "id": 1120845
      },
      "writtenOn": "2017-07-17T16:49:08Z",
      "side": 1,
      "message": "\u003e An example usage is cl/161846784, where the cronet consumer only calls StartNetLog() but not StopNetLog(). \n\nThis turned out to be a false example. Confirmed in b/63365089 that the consumer does call StopNetLog().",
      "parentUuid": "afeecdca_2b369a02",
      "range": {
        "startLine": 1048,
        "startChar": 22,
        "endLine": 1048,
        "endChar": 26
      },
      "revId": "4d40b1cff72209ac66e01ad3cbc82d9ac3a69356",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6e001056_b7456ae1",
        "filename": "components/cronet/android/cronet_url_request_context_adapter.cc",
        "patchSetId": 7
      },
      "lineNbr": 1048,
      "author": {
        "id": 1001766
      },
      "writtenOn": "2017-07-17T18:03:38Z",
      "side": 1,
      "message": "Thanks for raising these concerns!\nWhat process are those log consumers using right now to load the files? (Since they will presumably need to run a step to stitch the files as chrome://net-internals/ doesn\u0027t support loading directory-based logs).\n\nThe challenge with using directories as the canonical format is:\n\n (1) There is no web platform support for reading from a directory. So to load these in the NetLog viewer you would need to explicitly stitch into 1 file first, or give up on using a web-based approach.\n\n (2) Outputting a directory presents an additional barrier for users wanting to share logs (in the case of net-export they would need to zip it up or something before attaching to bug/email).\n\nWhile I would love for the directory-based format to be the canonical format (certainly more efficient/elegant than joining to 1 file) I think that using a single-file format simplifies the transition.\n\nI don\u0027t think the built-in stitching will make things any worse for this consumer. Here is how I see things working:\n\n  (a) When using net-export or --log-net-log or cronet\u0027s mechanism, it outputs to an intermediate directory. If logging is shut down gracefully, the log will be stitched together into a single file at the desired destination. This is the simple case, and works well for the user.\n\n  (b) If logging is *not* shut down gracefully (either because of a crash, incomplete log session, etc) then we are left with the \u003clogpath.json\u003e.inprogress/ directory containing the unstitched data. Note that right now this directory does in fact get left behind if you don\u0027t shut down gracefully, so the data is not lost. At this point the user of logging is in the same situation they were in before -- they have a directory of log files and need to stitch it to do anything useful with it (open in NetLog viewer).\n\nIn the case of (b) the user would need to run an extra step. I did complicate this in this patchset by removing the \"constants.json\" file, since now data is split between \u003clogpath.json\u003e and \u003clogpath.json\u003e.inprogress/ directory.\n\nOK, so what I think I can do is restore the \"constants.json\" and \"end_netlog.json\" files, this way the \".inprogress\" directory contains the complete log data. While logging is in progress, I can make \u003clogpath.json\u003e be a dummy file that contains a message to the effect of:\n\n\"\"\"Logging is in progress, the in progress data is in the directory XXXXX. When logging ends that data will be moved into this file. If logging was interrupted, you can stitch the results by running YYYY\"\"\".\n\nIt would be great if \"stitching\" simply involved zipping the directory. We could support that in the future with the external NetLog viewer, but will have to wait until we have migrated off chrome://net-internals/ (Since we don\u0027t want to be importing heavy-weight javascript libraries into Chrome).\n\nAnother possibility is to add support for loading directory-based logs directly to the NetLog viewer. Unfortunately you can\u0027t do this in the Web Platform :( The only solution I am aware of is to use a Chrome extension and grant it support to file:// URLs, which is pretty gross. So realistically I don\u0027t think directory-based support (outside of say a zipped archive) is feasible in the NetLog viewer. A zipped directory seems like the optimal form of stitching, since it is easy for users to run and also benefits from compression.\n\nWDYT?",
      "parentUuid": "63d35c13_f51ca425",
      "range": {
        "startLine": 1048,
        "startChar": 22,
        "endLine": 1048,
        "endChar": 26
      },
      "revId": "4d40b1cff72209ac66e01ad3cbc82d9ac3a69356",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2b0145cc_1b0579eb",
        "filename": "components/cronet/android/cronet_url_request_context_adapter.cc",
        "patchSetId": 7
      },
      "lineNbr": 1048,
      "author": {
        "id": 1120845
      },
      "writtenOn": "2017-07-17T18:19:42Z",
      "side": 1,
      "message": "\u003e What process are those log consumers using right now to load the files? (Since they will presumably need to run a step to stitch the files as chrome://net-internals/ doesn\u0027t support loading directory-based logs).\n\nThere are currently only two Cronet consumers use the bounded versions. I have been pointing them to net/log/stitch_net_log_files.py (The file should probably be moved to net/tools/ if we are keeping it for the long run).\n\n\u003e OK, so what I think I can do is restore the \"constants.json\" and \"end_netlog.json\" files, this way the \".inprogress\" directory contains the complete log data. While logging is in progress, I can make \u003clogpath.json\u003e be a  dummy file that contains a message\n\nThat sounds great. As long as we have a way for the user to know where that temp .inprogress directory is, I am not worried about unclean shutdown.",
      "parentUuid": "6e001056_b7456ae1",
      "range": {
        "startLine": 1048,
        "startChar": 22,
        "endLine": 1048,
        "endChar": 26
      },
      "revId": "4d40b1cff72209ac66e01ad3cbc82d9ac3a69356",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e5baf8c3_a11db096",
        "filename": "components/cronet/android/cronet_url_request_context_adapter.cc",
        "patchSetId": 7
      },
      "lineNbr": 1048,
      "author": {
        "id": 1002889
      },
      "writtenOn": "2017-07-17T18:45:12Z",
      "side": 1,
      "message": "I\u0027ve looked at startNetLogToDisk API in Cronet, and it is exposed as part of ExperimentalCronetEngine, so it should be Ok to change. \n\nI\u0027ve also looked at internal consumers of this API, and there is only one, and it does indeed call stopNetLog.\n\nI think that for Cronet consumers it is also easier to collect / send single netlog file, rather than entire directory. Having descriptive message in \u003clogpath.json\u003e while collection is in progress sounds good to me.\n\nI wonder whether for Cronet consumers it could make sense to have a reasonable default netlog size, and allow them to change it if necessary, so they would still use startNetLogToFile / stopNetLog and have experimental option to set maxnetlogsize?",
      "parentUuid": "2b0145cc_1b0579eb",
      "range": {
        "startLine": 1048,
        "startChar": 22,
        "endLine": 1048,
        "endChar": 26
      },
      "revId": "4d40b1cff72209ac66e01ad3cbc82d9ac3a69356",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7d1ed54c_98bd427a",
        "filename": "components/cronet/android/cronet_url_request_context_adapter.cc",
        "patchSetId": 7
      },
      "lineNbr": 1048,
      "author": {
        "id": 1120845
      },
      "writtenOn": "2017-07-17T19:07:43Z",
      "side": 1,
      "message": "\u003e I\u0027ve looked at startNetLogToDisk API in Cronet, and it is exposed as part of ExperimentalCronetEngine, so it should be Ok to change. \n\nThanks for taking a look. This will apply to startNetLogToFile as well (which is a part of the CronetEngine API). The idea is to convert startNetLogToFile (which uses the unbounded implementation) to the new bounded implementation which uses a directory-based log format and doesn\u0027t write events incrementally to a single file. I am not sure how many consumers use startNetLogToFile() without calling stopNetLog(). I think Eric\u0027s proposal will address both startNetLogToFile() and startNetLogToDisk(), so my concern is a no issue. We certainly can have a reasonable max size. Eric used 100MB for chrome://net-export (https://chromium-review.googlesource.com/c/571514/). Cronet can do something similar.",
      "parentUuid": "e5baf8c3_a11db096",
      "range": {
        "startLine": 1048,
        "startChar": 22,
        "endLine": 1048,
        "endChar": 26
      },
      "revId": "4d40b1cff72209ac66e01ad3cbc82d9ac3a69356",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c590884b_796f8881",
        "filename": "net/log/file_net_log_observer.cc",
        "patchSetId": 7
      },
      "lineNbr": 78,
      "author": {
        "id": 1001766
      },
      "writtenOn": "2017-07-14T20:21:28Z",
      "side": 1,
      "message": "FYI I am addressing this in a follow-up: https://chromium-review.googlesource.com/c/572185/",
      "revId": "4d40b1cff72209ac66e01ad3cbc82d9ac3a69356",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6815fc60_35c6181e",
        "filename": "net/log/file_net_log_observer.cc",
        "patchSetId": 7
      },
      "lineNbr": 78,
      "author": {
        "id": 1120845
      },
      "writtenOn": "2017-07-17T16:24:54Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "c590884b_796f8881",
      "revId": "4d40b1cff72209ac66e01ad3cbc82d9ac3a69356",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b2f5433b_b31b401b",
        "filename": "net/log/file_net_log_observer.h",
        "patchSetId": 7
      },
      "lineNbr": 61,
      "author": {
        "id": 1002889
      },
      "writtenOn": "2017-07-17T18:45:12Z",
      "side": 1,
      "message": "kLimit -\u003e kNoLimit.",
      "range": {
        "startLine": 61,
        "startChar": 47,
        "endLine": 61,
        "endChar": 53
      },
      "revId": "4d40b1cff72209ac66e01ad3cbc82d9ac3a69356",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "73fdb11b_527e31bb",
        "filename": "net/log/file_net_log_observer.h",
        "patchSetId": 7
      },
      "lineNbr": 61,
      "author": {
        "id": 1001766
      },
      "writtenOn": "2017-07-17T21:10:23Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b2f5433b_b31b401b",
      "range": {
        "startLine": 61,
        "startChar": 47,
        "endLine": 61,
        "endChar": 53
      },
      "revId": "4d40b1cff72209ac66e01ad3cbc82d9ac3a69356",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}