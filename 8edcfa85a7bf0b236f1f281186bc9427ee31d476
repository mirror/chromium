{
  "comments": [
    {
      "key": {
        "uuid": "24ca938a_c5ac9128",
        "filename": "components/cast_channel/cast_message_handler.cc",
        "patchSetId": 9
      },
      "lineNbr": 43,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-01-26T17:42:25Z",
      "side": 1,
      "message": "Can we use this one entry as a catch-all for all Cast V2 protocol messages (including virtual connection requests), for simplicity?",
      "revId": "8edcfa85a7bf0b236f1f281186bc9427ee31d476",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6c298f82_43de9388",
        "filename": "components/cast_channel/cast_message_handler.cc",
        "patchSetId": 9
      },
      "lineNbr": 43,
      "author": {
        "id": 1133789
      },
      "writtenOn": "2018-01-27T02:08:44Z",
      "side": 1,
      "message": "Yeah probably, since they will have pretty much the same trigger. I can ask rhalavati@ if that\u0027s ok from their perspective.",
      "parentUuid": "24ca938a_c5ac9128",
      "revId": "8edcfa85a7bf0b236f1f281186bc9427ee31d476",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "28d73189_76d8bec5",
        "filename": "components/cast_channel/cast_message_handler.cc",
        "patchSetId": 9
      },
      "lineNbr": 109,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-01-26T17:42:25Z",
      "side": 1,
      "message": "Where are duplicate/overlapping app availability/virtual connection requests handled?  Is that the job of the caller?",
      "revId": "8edcfa85a7bf0b236f1f281186bc9427ee31d476",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c36f2e53_64a564e4",
        "filename": "components/cast_channel/cast_message_handler.cc",
        "patchSetId": 9
      },
      "lineNbr": 109,
      "author": {
        "id": 1133789
      },
      "writtenOn": "2018-01-27T02:08:44Z",
      "side": 1,
      "message": "VC requests are deduplicated internally. For app availability request I will add a check for pending request here.",
      "parentUuid": "28d73189_76d8bec5",
      "revId": "8edcfa85a7bf0b236f1f281186bc9427ee31d476",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d1a6c19d_dd5d4147",
        "filename": "components/cast_channel/cast_message_handler.cc",
        "patchSetId": 9
      },
      "lineNbr": 125,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-01-26T17:42:25Z",
      "side": 1,
      "message": "Since there is no checking of the message sent result, the caller won\u0027t know that a request failed until the timer fires?  Should we invoke the callback immediately on failure so the caller can retry sooner?",
      "revId": "8edcfa85a7bf0b236f1f281186bc9427ee31d476",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "49106528_6dd06b40",
        "filename": "components/cast_channel/cast_message_handler.cc",
        "patchSetId": 9
      },
      "lineNbr": 125,
      "author": {
        "id": 1133789
      },
      "writtenOn": "2018-01-27T02:08:44Z",
      "side": 1,
      "message": "If SendMessage errors out, then OnError will be invoked which will then invoke the callback with kUnknown. The caller will then presumably retry on a new socket.",
      "parentUuid": "d1a6c19d_dd5d4147",
      "revId": "8edcfa85a7bf0b236f1f281186bc9427ee31d476",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3f15dd55_ce8edd07",
        "filename": "components/cast_channel/cast_message_handler.cc",
        "patchSetId": 9
      },
      "lineNbr": 175,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-01-26T17:42:25Z",
      "side": 1,
      "message": "base::DictionaryValue?",
      "revId": "8edcfa85a7bf0b236f1f281186bc9427ee31d476",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b8115773_d50ff2e1",
        "filename": "components/cast_channel/cast_message_handler.cc",
        "patchSetId": 9
      },
      "lineNbr": 175,
      "author": {
        "id": 1133789
      },
      "writtenOn": "2018-01-27T02:08:44Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3f15dd55_ce8edd07",
      "revId": "8edcfa85a7bf0b236f1f281186bc9427ee31d476",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ab911f48_98c6eb1c",
        "filename": "components/cast_channel/cast_message_handler.cc",
        "patchSetId": 9
      },
      "lineNbr": 196,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-01-26T17:42:25Z",
      "side": 1,
      "message": "Is a VirtualConnection bound to a socket or a device? What is the duration of the virtual connection and when does it have to be re-established?\n\nFor example, if a socket became disconnected and we established a new socket to the same device, do we need to automatically reestablish virtual connections to that device?",
      "revId": "8edcfa85a7bf0b236f1f281186bc9427ee31d476",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ae5438b4_3543587e",
        "filename": "components/cast_channel/cast_message_handler.cc",
        "patchSetId": 9
      },
      "lineNbr": 196,
      "author": {
        "id": 1133789
      },
      "writtenOn": "2018-01-27T02:08:44Z",
      "side": 1,
      "message": "AFAICT from the extension implementation, virtual connections last indefinitely. The extension does have a concept of \"moving\" VCs; when a channel reconnects, it re-establishes VCs that were on the old channel.\n\nWe only add a (strong) virtual connection explicitly when a local route is added. Besides this case, it isn\u0027t clear to me if we need to proactively move VCs on reconnect. I was thinking we can try this first. We can add back logic to move VCs if it turns out to be necessary. WDYT?",
      "parentUuid": "ab911f48_98c6eb1c",
      "revId": "8edcfa85a7bf0b236f1f281186bc9427ee31d476",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "50f5b73c_a39b79b1",
        "filename": "components/cast_channel/cast_message_handler.cc",
        "patchSetId": 9
      },
      "lineNbr": 224,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-01-26T17:42:25Z",
      "side": 1,
      "message": "Is the success rate for virtual connection attempts an interesting metric to keep track of?  Or do you think it just reflects the overall connection success rate for Cast sockets?",
      "revId": "8edcfa85a7bf0b236f1f281186bc9427ee31d476",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a569d412_7a97efa1",
        "filename": "components/cast_channel/cast_message_handler.cc",
        "patchSetId": 9
      },
      "lineNbr": 224,
      "author": {
        "id": 1133789
      },
      "writtenOn": "2018-01-27T02:08:44Z",
      "side": 1,
      "message": "I think it will be more or less the same as error rates for post-connect Cast sockets. We also do not get an explicit response on whether a virtual connection attempt actually succeeds.",
      "parentUuid": "50f5b73c_a39b79b1",
      "revId": "8edcfa85a7bf0b236f1f281186bc9427ee31d476",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f47dbf45_9f82055e",
        "filename": "components/cast_channel/cast_message_handler.h",
        "patchSetId": 9
      },
      "lineNbr": 1,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-01-26T17:42:25Z",
      "side": 1,
      "message": "s/2017/2018/ here and elsewhere as needed",
      "revId": "8edcfa85a7bf0b236f1f281186bc9427ee31d476",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0ad76a53_ffddd4f2",
        "filename": "components/cast_channel/cast_message_handler.h",
        "patchSetId": 9
      },
      "lineNbr": 1,
      "author": {
        "id": 1133789
      },
      "writtenOn": "2018-01-27T02:08:44Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f47dbf45_9f82055e",
      "revId": "8edcfa85a7bf0b236f1f281186bc9427ee31d476",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bae18447_895eafee",
        "filename": "components/cast_channel/cast_message_handler.h",
        "patchSetId": 9
      },
      "lineNbr": 59,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-01-26T17:42:25Z",
      "side": 1,
      "message": "Should this define operator\u003d\u003d as well?",
      "revId": "8edcfa85a7bf0b236f1f281186bc9427ee31d476",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "95efec99_2d6e6e16",
        "filename": "components/cast_channel/cast_message_handler.h",
        "patchSetId": 9
      },
      "lineNbr": 59,
      "author": {
        "id": 1133789
      },
      "writtenOn": "2018-01-27T02:08:44Z",
      "side": 1,
      "message": "Comparison based containers only require operator\u003c. I will add operator\u003d\u003d when it is needed.",
      "parentUuid": "bae18447_895eafee",
      "revId": "8edcfa85a7bf0b236f1f281186bc9427ee31d476",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "879b797f_ab95b361",
        "filename": "components/cast_channel/cast_message_handler.h",
        "patchSetId": 9
      },
      "lineNbr": 77,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-01-26T17:42:25Z",
      "side": 1,
      "message": "s/thread/sequence/",
      "revId": "8edcfa85a7bf0b236f1f281186bc9427ee31d476",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d761ad8e_cb9cef05",
        "filename": "components/cast_channel/cast_message_handler.h",
        "patchSetId": 9
      },
      "lineNbr": 77,
      "author": {
        "id": 1133789
      },
      "writtenOn": "2018-01-27T02:08:44Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "879b797f_ab95b361",
      "revId": "8edcfa85a7bf0b236f1f281186bc9427ee31d476",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0b8c6619_4a0b38a6",
        "filename": "components/cast_channel/cast_message_handler.h",
        "patchSetId": 9
      },
      "lineNbr": 86,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-01-26T17:42:25Z",
      "side": 1,
      "message": "This object seems to handle messages for all sockets, but the GetAppAvailability callback doesn\u0027t identify which device gave the result.\n\nAn alternative design would have a CastMessageHandler wrap a single CastSocket, then the caller could bind the callback with the (sink_id,app_id) or whatever else it needs to maintain app availability for a specific device.\n\nSince the virtual connections seem to be tied to the lifetime of a specific CastSocket, this seems a little cleaner.  But you\u0027d need to clean up the message handler when the socket is closed...",
      "revId": "8edcfa85a7bf0b236f1f281186bc9427ee31d476",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8b176ba1_6e1dd6bc",
        "filename": "components/cast_channel/cast_message_handler.h",
        "patchSetId": 9
      },
      "lineNbr": 86,
      "author": {
        "id": 1133789
      },
      "writtenOn": "2018-01-27T02:08:44Z",
      "side": 1,
      "message": "Yeah in my prototype, the caller binds the sink id to the callback, and receives app id and result from the callback.\n\nWhat about making this class part of CastSocket? I think that way it doesn\u0027t even have to implement CastSocket::Observer, and should get cleanup \"for free\".",
      "parentUuid": "0b8c6619_4a0b38a6",
      "revId": "8edcfa85a7bf0b236f1f281186bc9427ee31d476",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5cb58795_2dde3c5c",
        "filename": "components/cast_channel/cast_message_handler_unittest.cc",
        "patchSetId": 9
      },
      "lineNbr": 53,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-01-26T17:42:25Z",
      "side": 1,
      "message": "Consider making these protected to eliminate the trivial getters above - if the test fixture becomes more complicated, it\u0027s always possible to refactor to them later.",
      "revId": "8edcfa85a7bf0b236f1f281186bc9427ee31d476",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "92a8b9b3_b734e9ad",
        "filename": "components/cast_channel/cast_message_handler_unittest.cc",
        "patchSetId": 9
      },
      "lineNbr": 53,
      "author": {
        "id": 1133789
      },
      "writtenOn": "2018-01-27T02:08:44Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5cb58795_2dde3c5c",
      "revId": "8edcfa85a7bf0b236f1f281186bc9427ee31d476",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "95edec79_86a8049f",
        "filename": "components/cast_channel/cast_message_handler_unittest.cc",
        "patchSetId": 9
      },
      "lineNbr": 81,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-01-26T17:42:25Z",
      "side": 1,
      "message": "Nit: Add an expectation that OnMessageSent() is invoked here (and elsewhere as needed)",
      "revId": "8edcfa85a7bf0b236f1f281186bc9427ee31d476",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "aeda4fce_dcf0da6e",
        "filename": "components/cast_channel/cast_message_handler_unittest.cc",
        "patchSetId": 9
      },
      "lineNbr": 81,
      "author": {
        "id": 1133789
      },
      "writtenOn": "2018-01-27T02:08:44Z",
      "side": 1,
      "message": "Would the SendMessage expectations on the mock socket above be sufficient?",
      "parentUuid": "95edec79_86a8049f",
      "revId": "8edcfa85a7bf0b236f1f281186bc9427ee31d476",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "928ae9a3_0ee6a454",
        "filename": "components/cast_channel/cast_message_util.cc",
        "patchSetId": 9
      },
      "lineNbr": 43,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-01-26T17:42:25Z",
      "side": 1,
      "message": "Delete this line?",
      "revId": "8edcfa85a7bf0b236f1f281186bc9427ee31d476",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f6e17b61_8d90dba6",
        "filename": "components/cast_channel/cast_message_util.cc",
        "patchSetId": 9
      },
      "lineNbr": 43,
      "author": {
        "id": 1133789
      },
      "writtenOn": "2018-01-27T02:08:44Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "928ae9a3_0ee6a454",
      "revId": "8edcfa85a7bf0b236f1f281186bc9427ee31d476",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "08a3b7c4_483a3dae",
        "filename": "components/cast_channel/cast_message_util.cc",
        "patchSetId": 9
      },
      "lineNbr": 235,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2018-01-26T17:42:25Z",
      "side": 1,
      "message": "Why does this require a custom User-Agent string?\nCan you give an example string used here and the default for Chrome for comparison?",
      "revId": "8edcfa85a7bf0b236f1f281186bc9427ee31d476",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2507bd53_cf388773",
        "filename": "components/cast_channel/cast_message_util.cc",
        "patchSetId": 9
      },
      "lineNbr": 235,
      "author": {
        "id": 1133789
      },
      "writtenOn": "2018-01-27T02:08:44Z",
      "side": 1,
      "message": "This generates an identical user agent string as the one from GetUserAgent() in chrome_content_client: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/66.0.3331.0 Safari/537.36\n\nOne reason I don\u0027t call GetUserAgent() here is because components/ cannot depend on chrome/. Another reason is I didn\u0027t want to do string parsing from the user agent string to get systemVersion (for parity with extension), which seems a bit hacky.\n\nIn an earlier iteration I had caller (i.e. CastMediaSinkServiceImpl) pass in string from GetUserAgent() to CastMessageHandler, who then passes the string into this method. Then for systemVersion we can either parse the string or call into the refactored content:: method. I don\u0027t feel particularly strongly so let me know if you prefer that. (Parsing is probably ok if the string format isn\u0027t likely to change)",
      "parentUuid": "08a3b7c4_483a3dae",
      "revId": "8edcfa85a7bf0b236f1f281186bc9427ee31d476",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}