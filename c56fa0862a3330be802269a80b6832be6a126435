{
  "comments": [
    {
      "key": {
        "uuid": "e2ec896e_ebc4feed",
        "filename": "third_party/WebKit/Source/core/css/CSSStyleDeclaration.cpp",
        "patchSetId": 3
      },
      "lineNbr": 12,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2017-07-11T20:50:33Z",
      "side": 1,
      "message": "Parent is set in ctor so this is fine.",
      "range": {
        "startLine": 12,
        "startChar": 11,
        "endLine": 12,
        "endChar": 46
      },
      "revId": "c56fa0862a3330be802269a80b6832be6a126435",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3e64d64d_295a13c5",
        "filename": "third_party/WebKit/Source/core/css/CSSStyleDeclaration.cpp",
        "patchSetId": 3
      },
      "lineNbr": 12,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2017-07-12T02:27:53Z",
      "side": 1,
      "message": "Can we make StyleRuleCSSStyleDeclaration::parent_rule_ a TraceWrapperMember an make parentRule() return the TraceWrapperMember? (Or we could introduce parentRuleTraceWrapperMember()).\n\nThe same comment for other files in this CL. I\u0027d like to avoid using WithManualWriteBarrier as much as possible because it\u0027s really error-prone. If someone adds code to update the pointer, it\u0027s easy to cause a write-barrier-missing bug.",
      "parentUuid": "e2ec896e_ebc4feed",
      "range": {
        "startLine": 12,
        "startChar": 11,
        "endLine": 12,
        "endChar": 46
      },
      "revId": "c56fa0862a3330be802269a80b6832be6a126435",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "defd417f_c4dbbdce",
        "filename": "third_party/WebKit/Source/core/css/CSSStyleRule.cpp",
        "patchSetId": 3
      },
      "lineNbr": 113,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2017-07-11T20:50:33Z",
      "side": 1,
      "message": "Both have manual write barriers, so they are fine.",
      "range": {
        "startLine": 113,
        "startChar": 11,
        "endLine": 113,
        "endChar": 46
      },
      "revId": "c56fa0862a3330be802269a80b6832be6a126435",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "85e87923_f29d995d",
        "filename": "third_party/WebKit/Source/core/html/custom/CustomElementRegistry.cpp",
        "patchSetId": 3
      },
      "lineNbr": 98,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2017-07-11T20:50:33Z",
      "side": 1,
      "message": "This one seems broken on HEAD and I see no one-line-fix. \n\nWe lazily create the stack in the getter and set it to a static persistent. There is no way we could do a write barrier there, because we don\u0027t have a \"parent\" object.\n\nWe would need what you suggested on Sigbjorn\u0027s CL: Some TraceWrapperMember hanging off somewhere.",
      "range": {
        "startLine": 98,
        "startChar": 11,
        "endLine": 98,
        "endChar": 46
      },
      "revId": "c56fa0862a3330be802269a80b6832be6a126435",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ceca51e6_e370f5f9",
        "filename": "third_party/WebKit/Source/core/html/imports/HTMLImportsController.cpp",
        "patchSetId": 3
      },
      "lineNbr": 156,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2017-07-12T02:27:53Z",
      "side": 1,
      "message": "Can we make HTMLImportTreeRoot::document_ a TraceWrapperMember and make HTMLImportsController trace in HTMLImportTreeRoot?",
      "revId": "c56fa0862a3330be802269a80b6832be6a126435",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a73d8513_1685dd37",
        "filename": "third_party/WebKit/Source/core/svg/SVGAngleTearOff.cpp",
        "patchSetId": 3
      },
      "lineNbr": 138,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2017-07-11T20:50:33Z",
      "side": 1,
      "message": "For all SVG*: We cannot trace in the Base class as it is mixed in. contextElement() never changes though afaics so manually tracing is fine.",
      "range": {
        "startLine": 138,
        "startChar": 11,
        "endLine": 138,
        "endChar": 46
      },
      "revId": "c56fa0862a3330be802269a80b6832be6a126435",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0b3a02d0_00a63890",
        "filename": "third_party/WebKit/Source/core/svg/SVGAngleTearOff.cpp",
        "patchSetId": 3
      },
      "lineNbr": 138,
      "author": {
        "id": 1115594
      },
      "writtenOn": "2017-07-11T21:15:46Z",
      "side": 1,
      "message": "contextElement() can change for some of the SVG*TearOff types - only from null -\u003e non-null though (see AttachToSVGElementAttribute and it\u0027s use.) For SVGAnimated* contextElement() should never change though.",
      "parentUuid": "a73d8513_1685dd37",
      "range": {
        "startLine": 138,
        "startChar": 11,
        "endLine": 138,
        "endChar": 46
      },
      "revId": "c56fa0862a3330be802269a80b6832be6a126435",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e391997f_a8d15768",
        "filename": "third_party/WebKit/Source/core/svg/SVGAngleTearOff.cpp",
        "patchSetId": 3
      },
      "lineNbr": 138,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2017-07-12T02:27:53Z",
      "side": 1,
      "message": "\u003e only from null -\u003e non-null though\n\nThis is already unsafe :) We must insert a write barrier.\n\n\u003e For all SVG*: We cannot trace in the Base class as it is mixed in.\n\nWould you elaborate a bit more? Why can\u0027t you trace in SVGPropertyTearOffBase?",
      "parentUuid": "0b3a02d0_00a63890",
      "range": {
        "startLine": 138,
        "startChar": 11,
        "endLine": 138,
        "endChar": 46
      },
      "revId": "c56fa0862a3330be802269a80b6832be6a126435",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "240007b0_9afad533",
        "filename": "third_party/WebKit/Source/core/svg/SVGAngleTearOff.cpp",
        "patchSetId": 3
      },
      "lineNbr": 138,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2017-07-12T07:13:45Z",
      "side": 1,
      "message": "I realized now that this is broken on HEAD. \n\nIncremental wrapper tracing + creating a detached tear off + AttachToSVGElementAttribute() is broken as we currently don\u0027t do the write barrier.\n\nI need to think about this a bit.",
      "parentUuid": "e391997f_a8d15768",
      "range": {
        "startLine": 138,
        "startChar": 11,
        "endLine": 138,
        "endChar": 46
      },
      "revId": "c56fa0862a3330be802269a80b6832be6a126435",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "01b823cc_c538cc81",
        "filename": "third_party/WebKit/Source/modules/webgl/WebGLRenderingContextBase.cpp",
        "patchSetId": 3
      },
      "lineNbr": 7736,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2017-07-12T02:27:53Z",
      "side": 1,
      "message": "for (auto tracker : extensions_) {\n  visitor-\u003eTraceWrappers(tracker);\n}\n\nwould work?",
      "revId": "c56fa0862a3330be802269a80b6832be6a126435",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}