{
  "comments": [
    {
      "key": {
        "uuid": "f4dc0bab_52e6e6e2",
        "filename": "chrome/browser/autocomplete/search_provider_unittest.cc",
        "patchSetId": 4
      },
      "lineNbr": 346,
      "author": {
        "id": 1000805
      },
      "writtenOn": "2017-09-15T00:25:42Z",
      "side": 1,
      "message": "Having both a loop iterator and a loop index (a bunch of places in this file) is kinda unfortunate.\n\nI wonder if we could make use of std::equal() instead, potentially using local lambdas or some file-scope helpers or something.  That seems to better capture the semantics of \"compare these two containers for equality\".",
      "revId": "652eabc378bc11c4f642b78d1d5f7249f5d95592",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5d50f624_781370ed",
        "filename": "chrome/browser/autocomplete/search_provider_unittest.cc",
        "patchSetId": 4
      },
      "lineNbr": 346,
      "author": {
        "id": 1105777
      },
      "writtenOn": "2017-09-15T19:32:05Z",
      "side": 1,
      "message": "Here\u0027s the std::equal version. Not bad, I think, but there are a few calls to SCOPED_TRACE which seemed out of place as a result. Also, there were a few places where I couldn\u0027t preserve the error message when a test failed.",
      "parentUuid": "f4dc0bab_52e6e6e2",
      "revId": "652eabc378bc11c4f642b78d1d5f7249f5d95592",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3dbd8e48_0052aae5",
        "filename": "chrome/browser/autocomplete/search_provider_unittest.cc",
        "patchSetId": 4
      },
      "lineNbr": 355,
      "author": {
        "id": 1000805
      },
      "writtenOn": "2017-09-15T00:25:42Z",
      "side": 1,
      "message": "This conditional isn\u0027t needed, because of the condition above that checks that num_results \u003d\u003d matches.size().",
      "revId": "652eabc378bc11c4f642b78d1d5f7249f5d95592",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c6e3c5a9_d39ee28e",
        "filename": "chrome/browser/autocomplete/search_provider_unittest.cc",
        "patchSetId": 4
      },
      "lineNbr": 355,
      "author": {
        "id": 1105777
      },
      "writtenOn": "2017-09-15T19:32:05Z",
      "side": 1,
      "message": "Gone.",
      "parentUuid": "3dbd8e48_0052aae5",
      "revId": "652eabc378bc11c4f642b78d1d5f7249f5d95592",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6e3ff4da_9da0bc99",
        "filename": "components/omnibox/browser/autocomplete_classifier.cc",
        "patchSetId": 4
      },
      "lineNbr": 83,
      "author": {
        "id": 1000805
      },
      "writtenOn": "2017-09-15T00:25:42Z",
      "side": 1,
      "message": "I don\u0027t think you should add this CHECK, at least in this CL.  It seems unrelated to the aim of the CL.",
      "revId": "652eabc378bc11c4f642b78d1d5f7249f5d95592",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fd22b2fb_d9c0f0ea",
        "filename": "components/omnibox/browser/autocomplete_classifier.cc",
        "patchSetId": 4
      },
      "lineNbr": 83,
      "author": {
        "id": 1105777
      },
      "writtenOn": "2017-09-15T19:32:05Z",
      "side": 1,
      "message": "Yes, they\u0027re unrelated and removed.",
      "parentUuid": "6e3ff4da_9da0bc99",
      "revId": "652eabc378bc11c4f642b78d1d5f7249f5d95592",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a5477ae_08ad819f",
        "filename": "components/omnibox/browser/autocomplete_controller.cc",
        "patchSetId": 4
      },
      "lineNbr": 355,
      "author": {
        "id": 1000805
      },
      "writtenOn": "2017-09-15T00:25:42Z",
      "side": 1,
      "message": "Likewise, I wouldn\u0027t add any of the CHECKs in this file.",
      "revId": "652eabc378bc11c4f642b78d1d5f7249f5d95592",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "366ca2ce_76bbe7ec",
        "filename": "components/omnibox/browser/autocomplete_controller.cc",
        "patchSetId": 4
      },
      "lineNbr": 355,
      "author": {
        "id": 1105777
      },
      "writtenOn": "2017-09-15T19:32:05Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5a5477ae_08ad819f",
      "revId": "652eabc378bc11c4f642b78d1d5f7249f5d95592",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3a0fb3d7_8015ef03",
        "filename": "components/omnibox/browser/autocomplete_controller.cc",
        "patchSetId": 4
      },
      "lineNbr": 669,
      "author": {
        "id": 1000805
      },
      "writtenOn": "2017-09-15T00:25:42Z",
      "side": 1,
      "message": "This conversion does not preserve old behavior.  In particular, the \"continue\" skips the increment of |index|.\n\nOne way to be safe against this is to remove |index| and use std::distance() to compute it on the fly.",
      "revId": "652eabc378bc11c4f642b78d1d5f7249f5d95592",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7e42d37f_944a5951",
        "filename": "components/omnibox/browser/autocomplete_controller.cc",
        "patchSetId": 4
      },
      "lineNbr": 669,
      "author": {
        "id": 1105777
      },
      "writtenOn": "2017-09-15T19:32:05Z",
      "side": 1,
      "message": "Since it\u0027s production code, I\u0027d prefer avoiding std::distance. I moved |index| up; let me know if you don\u0027t like it.",
      "parentUuid": "3a0fb3d7_8015ef03",
      "revId": "652eabc378bc11c4f642b78d1d5f7249f5d95592",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5ee47dae_2c6a4ba7",
        "filename": "components/omnibox/browser/autocomplete_controller.cc",
        "patchSetId": 4
      },
      "lineNbr": 669,
      "author": {
        "id": 1000805
      },
      "writtenOn": "2017-09-16T00:38:47Z",
      "side": 1,
      "message": "I\u0027m confused why distance() is unacceptable in production?  Maybe I\u0027m misunderstanding.",
      "parentUuid": "7e42d37f_944a5951",
      "revId": "652eabc378bc11c4f642b78d1d5f7249f5d95592",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5f0d41a3_f462636e",
        "filename": "components/omnibox/browser/autocomplete_controller.cc",
        "patchSetId": 4
      },
      "lineNbr": 669,
      "author": {
        "id": 1115920
      },
      "writtenOn": "2017-09-18T14:45:53Z",
      "side": 1,
      "message": "Drive-by comment: if distance() allowed us to keep the new-style for loop and avoid initializing and incrementing a separate index variable, that sounds like a nice readability win.",
      "parentUuid": "5ee47dae_2c6a4ba7",
      "revId": "652eabc378bc11c4f642b78d1d5f7249f5d95592",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "545ea384_38044a2e",
        "filename": "components/omnibox/browser/autocomplete_controller.cc",
        "patchSetId": 4
      },
      "lineNbr": 669,
      "author": {
        "id": 1105777
      },
      "writtenOn": "2017-09-18T16:29:41Z",
      "side": 1,
      "message": "Peter, obviously we don\u0027t care in a unit test, but it seems like an easy win to simply have this extra variable to avoid it in production code. I assumed you shared the concern based on the \u0027match_at\u0027 comments.\n\nJustin, I\u0027m not sure I understand your comment. We could have the new-style loop, if it\u0027s that important, without std::distance. I was simply trying to address Peter\u0027s update issue.",
      "parentUuid": "5f0d41a3_f462636e",
      "revId": "652eabc378bc11c4f642b78d1d5f7249f5d95592",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "06619b55_e1676e85",
        "filename": "components/omnibox/browser/autocomplete_controller.cc",
        "patchSetId": 4
      },
      "lineNbr": 669,
      "author": {
        "id": 1000805
      },
      "writtenOn": "2017-09-18T16:56:59Z",
      "side": 1,
      "message": "I don\u0027t like providing match_at() for people because they could potentially build bad loops with it.  But on the consumer side, if we know we have code whose perf isn\u0027t going to be meaningfully impacted, I\u0027m OK with trading off micro-optimized loops for readability.\n\nI think Justin\u0027s suggestion is that the combination of range-based for _and_ not having a second variable, together, is enough of a readability win to justify this.  I probably agree, though I don\u0027t feel strongly.",
      "parentUuid": "545ea384_38044a2e",
      "revId": "652eabc378bc11c4f642b78d1d5f7249f5d95592",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d9c2b01b_bac8d46a",
        "filename": "components/omnibox/browser/autocomplete_controller.cc",
        "patchSetId": 4
      },
      "lineNbr": 677,
      "author": {
        "id": 1000805
      },
      "writtenOn": "2017-09-15T00:25:42Z",
      "side": 1,
      "message": "Nit: While here: convert to use SizeTToString()",
      "revId": "652eabc378bc11c4f642b78d1d5f7249f5d95592",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d1b92aef_5d9adbb9",
        "filename": "components/omnibox/browser/autocomplete_controller.cc",
        "patchSetId": 4
      },
      "lineNbr": 677,
      "author": {
        "id": 1105777
      },
      "writtenOn": "2017-09-15T19:32:05Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d9c2b01b_bac8d46a",
      "revId": "652eabc378bc11c4f642b78d1d5f7249f5d95592",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "59e7cc67_af558fca",
        "filename": "components/omnibox/browser/autocomplete_controller.cc",
        "patchSetId": 4
      },
      "lineNbr": 679,
      "author": {
        "id": 1000805
      },
      "writtenOn": "2017-09-15T00:25:42Z",
      "side": 1,
      "message": "Nit: While here: just append strings together instead of using StringPrintF().",
      "revId": "652eabc378bc11c4f642b78d1d5f7249f5d95592",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1037a6d5_4310991f",
        "filename": "components/omnibox/browser/autocomplete_controller.cc",
        "patchSetId": 4
      },
      "lineNbr": 679,
      "author": {
        "id": 1105777
      },
      "writtenOn": "2017-09-15T19:32:05Z",
      "side": 1,
      "message": "Done. Let me know if you don\u0027t like #441 either.",
      "parentUuid": "59e7cc67_af558fca",
      "revId": "652eabc378bc11c4f642b78d1d5f7249f5d95592",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c685f0ef_a2cf42bf",
        "filename": "components/omnibox/browser/autocomplete_controller.cc",
        "patchSetId": 4
      },
      "lineNbr": 679,
      "author": {
        "id": 1000805
      },
      "writtenOn": "2017-09-16T00:38:47Z",
      "side": 1,
      "message": "That one\u0027s more borderline... I could go either way",
      "parentUuid": "1037a6d5_4310991f",
      "revId": "652eabc378bc11c4f642b78d1d5f7249f5d95592",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bdb3944c_d908055b",
        "filename": "components/omnibox/browser/autocomplete_match.h",
        "patchSetId": 4
      },
      "lineNbr": 30,
      "author": {
        "id": 1000805
      },
      "writtenOn": "2017-09-15T00:25:42Z",
      "side": 1,
      "message": "Nit: Prefer using to typedef (old code predates C++11)",
      "revId": "652eabc378bc11c4f642b78d1d5f7249f5d95592",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a90cd6b2_2d510ea7",
        "filename": "components/omnibox/browser/autocomplete_match.h",
        "patchSetId": 4
      },
      "lineNbr": 30,
      "author": {
        "id": 1105777
      },
      "writtenOn": "2017-09-15T19:32:05Z",
      "side": 1,
      "message": "Done. Bottom of file too.",
      "parentUuid": "bdb3944c_d908055b",
      "revId": "652eabc378bc11c4f642b78d1d5f7249f5d95592",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "290b3e25_2b236027",
        "filename": "components/omnibox/browser/autocomplete_result.cc",
        "patchSetId": 4
      },
      "lineNbr": 126,
      "author": {
        "id": 1000805
      },
      "writtenOn": "2017-09-15T00:25:42Z",
      "side": 1,
      "message": "Don\u0027t check in any of this",
      "revId": "652eabc378bc11c4f642b78d1d5f7249f5d95592",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "984a9355_2c1393ec",
        "filename": "components/omnibox/browser/autocomplete_result.cc",
        "patchSetId": 4
      },
      "lineNbr": 126,
      "author": {
        "id": 1105777
      },
      "writtenOn": "2017-09-15T19:32:05Z",
      "side": 1,
      "message": "I won\u0027t. It was to measure benefit of list.",
      "parentUuid": "290b3e25_2b236027",
      "revId": "652eabc378bc11c4f642b78d1d5f7249f5d95592",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "035793da_4263f669",
        "filename": "components/omnibox/browser/autocomplete_result.cc",
        "patchSetId": 4
      },
      "lineNbr": 170,
      "author": {
        "id": 1000805
      },
      "writtenOn": "2017-09-15T00:25:42Z",
      "side": 1,
      "message": "Why this transformation?  Looks like you were starting to work on ripping out |default_match_|, and this all got tangled with it?",
      "revId": "652eabc378bc11c4f642b78d1d5f7249f5d95592",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "631f836c_b1d1d54a",
        "filename": "components/omnibox/browser/autocomplete_result.cc",
        "patchSetId": 4
      },
      "lineNbr": 170,
      "author": {
        "id": 1105777
      },
      "writtenOn": "2017-09-15T19:32:05Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "035793da_4263f669",
      "revId": "652eabc378bc11c4f642b78d1d5f7249f5d95592",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6eeeaae0_9958da70",
        "filename": "components/omnibox/browser/autocomplete_result.cc",
        "patchSetId": 4
      },
      "lineNbr": 249,
      "author": {
        "id": 1000805
      },
      "writtenOn": "2017-09-15T00:25:42Z",
      "side": 1,
      "message": "This feels a bit unfortunate -- O(n) instead of O(1), and match_at() is called a lot.  Of course the size of the list is small so the potential cost is small.  Does it make any difference anywhere?\n\nMaybe we should change the API.  Stop providing random-access functions, just provide something that gets the whole match set, let you iterate through it yourself if need be.",
      "revId": "652eabc378bc11c4f642b78d1d5f7249f5d95592",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "11006218_26e4891b",
        "filename": "components/omnibox/browser/autocomplete_result.cc",
        "patchSetId": 4
      },
      "lineNbr": 249,
      "author": {
        "id": 1105777
      },
      "writtenOn": "2017-09-15T19:32:05Z",
      "side": 1,
      "message": "I measured the |match_at()| calls and, in the debug build, they were only taking .37us times about 5 times per user key hit. The release build would be even faster.\n\nPreviously I did remove a few calls - some |match_at(0)| -\u003e front() and some loops -\u003e begin/end. Still worth worrying about?",
      "parentUuid": "6eeeaae0_9958da70",
      "revId": "652eabc378bc11c4f642b78d1d5f7249f5d95592",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b92aeb3c_63c9410b",
        "filename": "components/omnibox/browser/autocomplete_result.cc",
        "patchSetId": 4
      },
      "lineNbr": 249,
      "author": {
        "id": 1000805
      },
      "writtenOn": "2017-09-16T00:38:47Z",
      "side": 1,
      "message": "It\u0027d be nice not to provide an API that lets people shoot themselves in the foot later, if it\u0027s easy.\n\nIf it\u0027s not easy, we can leave it.",
      "parentUuid": "11006218_26e4891b",
      "revId": "652eabc378bc11c4f642b78d1d5f7249f5d95592",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3a215de4_b6ad3ed7",
        "filename": "components/omnibox/browser/autocomplete_result.cc",
        "patchSetId": 4
      },
      "lineNbr": 249,
      "author": {
        "id": 1105777
      },
      "writtenOn": "2017-09-18T16:29:41Z",
      "side": 1,
      "message": "We can certainly provide some friction - I don\u0027t know, maybe just add some ugly parameter - but I can\u0027t think of anything beyond that.\n\nI think more helpful is that I added a comment, and fixed up the biggest caller.",
      "parentUuid": "b92aeb3c_63c9410b",
      "revId": "652eabc378bc11c4f642b78d1d5f7249f5d95592",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "32a91cf3_24638123",
        "filename": "components/omnibox/browser/autocomplete_result.cc",
        "patchSetId": 4
      },
      "lineNbr": 294,
      "author": {
        "id": 1000805
      },
      "writtenOn": "2017-09-15T00:25:42Z",
      "side": 1,
      "message": "Nit: I\u0027d just use \"bool default_was_end\" and the like instead of declaring a list just to point at its end() and check back if you did that.",
      "revId": "652eabc378bc11c4f642b78d1d5f7249f5d95592",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b27e800a_16dd617c",
        "filename": "components/omnibox/browser/autocomplete_result.cc",
        "patchSetId": 4
      },
      "lineNbr": 294,
      "author": {
        "id": 1105777
      },
      "writtenOn": "2017-09-15T19:32:05Z",
      "side": 1,
      "message": "hmm, I think the old previous version is easier to glance at and convince myself that it\u0027s correct. Let know if you still like this version.",
      "parentUuid": "32a91cf3_24638123",
      "revId": "652eabc378bc11c4f642b78d1d5f7249f5d95592",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "668d7073_d21bd18c",
        "filename": "components/omnibox/browser/autocomplete_result.cc",
        "patchSetId": 4
      },
      "lineNbr": 294,
      "author": {
        "id": 1000805
      },
      "writtenOn": "2017-09-16T00:38:47Z",
      "side": 1,
      "message": "Your implementation is more complex than I was thinking:\n\n  swap(default_match_, other-\u003edefault_match_);\n  if (this_was_end)\n    other-\u003edefault_match_ \u003d other-\u003eend();\n  if (other_was_end)\n    default_match_ \u003d end();\n\nYou can swap invalid iterators, you just can\u0027t dereference them.",
      "parentUuid": "b27e800a_16dd617c",
      "revId": "652eabc378bc11c4f642b78d1d5f7249f5d95592",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "648e6542_cfc9a258",
        "filename": "components/omnibox/browser/autocomplete_result.cc",
        "patchSetId": 4
      },
      "lineNbr": 294,
      "author": {
        "id": 1105777
      },
      "writtenOn": "2017-09-18T16:29:41Z",
      "side": 1,
      "message": "It\u0027s my understanding that that is \"implementation defined behavior\", but if you\u0027re ok with it, so am I.",
      "parentUuid": "668d7073_d21bd18c",
      "revId": "652eabc378bc11c4f642b78d1d5f7249f5d95592",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7d3452a3_007c6afa",
        "filename": "components/omnibox/browser/autocomplete_result.cc",
        "patchSetId": 4
      },
      "lineNbr": 294,
      "author": {
        "id": 1000805
      },
      "writtenOn": "2017-09-18T16:56:59Z",
      "side": 1,
      "message": "What\u0027s implementation-defined is what an iterator that points to end() points to after the container is swapped.  So if |this_was_end|, then after swap, |default_match_|\u0027s value is unspecified.  It has a value, we just don\u0027t know what it is.  If we now swap it with the other iterator, it\u0027s the other iterator whose value is unspecified.  So that\u0027s what we reset.\n\nAn alternate formulation of the code that might make readers more comfortable:\n\n  matches_.swap(other-\u003ematches_);\n  if (this_was_end)\n    default_match_ \u003d other-\u003eend();\n  if (other_was_end)\n    other-\u003edefault_match_ \u003d end();\n  swap(default_match_, other-\u003edefault_match_);\n\nI find this slightly less clear, but it resets any unspecified values before reading them, so perhaps it\u0027s more obvious.",
      "parentUuid": "648e6542_cfc9a258",
      "revId": "652eabc378bc11c4f642b78d1d5f7249f5d95592",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c00bb5a5_68655e5c",
        "filename": "components/omnibox/browser/autocomplete_result_unittest.cc",
        "patchSetId": 4
      },
      "lineNbr": 197,
      "author": {
        "id": 1000805
      },
      "writtenOn": "2017-09-15T00:25:42Z",
      "side": 1,
      "message": "Condition not necessary, you ASSERTed things were the right size above",
      "revId": "652eabc378bc11c4f642b78d1d5f7249f5d95592",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5ac3554d_12eab020",
        "filename": "components/omnibox/browser/autocomplete_result_unittest.cc",
        "patchSetId": 4
      },
      "lineNbr": 197,
      "author": {
        "id": 1105777
      },
      "writtenOn": "2017-09-15T19:32:05Z",
      "side": 1,
      "message": "Gone.",
      "parentUuid": "c00bb5a5_68655e5c",
      "revId": "652eabc378bc11c4f642b78d1d5f7249f5d95592",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6162a119_b3c59df2",
        "filename": "components/omnibox/browser/autocomplete_result_unittest.cc",
        "patchSetId": 4
      },
      "lineNbr": 381,
      "author": {
        "id": 1000805
      },
      "writtenOn": "2017-09-15T00:25:42Z",
      "side": 1,
      "message": ":(\n\nThese sorts of constructs seem unfortunate... wonder if we could pass PopulateAutocompleteMatches() a set of destination URLs or something, since that seems to be a thing many places in this file are doing.",
      "revId": "652eabc378bc11c4f642b78d1d5f7249f5d95592",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2a6317c4_99337bbd",
        "filename": "components/omnibox/browser/autocomplete_result_unittest.cc",
        "patchSetId": 4
      },
      "lineNbr": 381,
      "author": {
        "id": 1105777
      },
      "writtenOn": "2017-09-15T19:32:05Z",
      "side": 1,
      "message": "What do you think of this helper?",
      "parentUuid": "6162a119_b3c59df2",
      "revId": "652eabc378bc11c4f642b78d1d5f7249f5d95592",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b219424f_a4c054e0",
        "filename": "components/omnibox/browser/bookmark_provider.cc",
        "patchSetId": 4
      },
      "lineNbr": 53,
      "author": {
        "id": 1000805
      },
      "writtenOn": "2017-09-15T00:25:42Z",
      "side": 1,
      "message": "Don\u0027t check this stuff in either",
      "revId": "652eabc378bc11c4f642b78d1d5f7249f5d95592",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "39366a68_eb1a4c8c",
        "filename": "components/omnibox/browser/bookmark_provider.cc",
        "patchSetId": 4
      },
      "lineNbr": 53,
      "author": {
        "id": 1105777
      },
      "writtenOn": "2017-09-15T19:32:05Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b219424f_a4c054e0",
      "revId": "652eabc378bc11c4f642b78d1d5f7249f5d95592",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4780cc33_6999ee11",
        "filename": "components/omnibox/browser/bookmark_provider.cc",
        "patchSetId": 4
      },
      "lineNbr": 103,
      "author": {
        "id": 1000805
      },
      "writtenOn": "2017-09-15T00:25:42Z",
      "side": 1,
      "message": "Losing partial_sort() is sad.  What if we have a lot of bookmarks?",
      "revId": "652eabc378bc11c4f642b78d1d5f7249f5d95592",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "72a59a6d_8c892cf1",
        "filename": "components/omnibox/browser/bookmark_provider.cc",
        "patchSetId": 4
      },
      "lineNbr": 103,
      "author": {
        "id": 1105777
      },
      "writtenOn": "2017-09-15T19:32:05Z",
      "side": 1,
      "message": "I added a couple dozen bookmarks from the same site, then tried suggesting them. Here are times:\n\nOld debug build: 464us\nNew debug build: 158us\nOld release build: 39us\nNew release build: 7us\n\nA crude estimate would then put the curves crossing at about 7x more bookmarks. If we\u0027re still worried, a partial sort isn\u0027t that hard:\n\ntemplate \u003cint N, typename Container\u003e\nvoid partial_sort(Container* container) {\n  typename Container::const_iterator heap[N];\n  // push_heap all of them (with help of a lambda)\n  // pop_heap N, splice each to the front\n}",
      "parentUuid": "4780cc33_6999ee11",
      "revId": "652eabc378bc11c4f642b78d1d5f7249f5d95592",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "153b6dcb_6e110fe5",
        "filename": "components/omnibox/browser/history_url_provider_unittest.cc",
        "patchSetId": 4
      },
      "lineNbr": 360,
      "author": {
        "id": 1000805
      },
      "writtenOn": "2017-09-15T00:25:42Z",
      "side": 1,
      "message": "Nit: Maybe another case for std::equal()",
      "revId": "652eabc378bc11c4f642b78d1d5f7249f5d95592",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cd3b8c3b_712904d5",
        "filename": "components/omnibox/browser/history_url_provider_unittest.cc",
        "patchSetId": 4
      },
      "lineNbr": 360,
      "author": {
        "id": 1105777
      },
      "writtenOn": "2017-09-15T19:32:05Z",
      "side": 1,
      "message": "Done. Line 1187 too.",
      "parentUuid": "153b6dcb_6e110fe5",
      "revId": "652eabc378bc11c4f642b78d1d5f7249f5d95592",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0661af6a_7d7faf7e",
        "filename": "components/omnibox/browser/keyword_provider_unittest.cc",
        "patchSetId": 4
      },
      "lineNbr": 143,
      "author": {
        "id": 1000805
      },
      "writtenOn": "2017-09-15T00:25:42Z",
      "side": 1,
      "message": "Nit: std::equal()?",
      "revId": "652eabc378bc11c4f642b78d1d5f7249f5d95592",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "185057bc_a763b039",
        "filename": "components/omnibox/browser/keyword_provider_unittest.cc",
        "patchSetId": 4
      },
      "lineNbr": 143,
      "author": {
        "id": 1105777
      },
      "writtenOn": "2017-09-15T19:32:05Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0661af6a_7d7faf7e",
      "revId": "652eabc378bc11c4f642b78d1d5f7249f5d95592",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "736e2ce2_cd92fa9c",
        "filename": "components/omnibox/browser/omnibox_controller.cc",
        "patchSetId": 4
      },
      "lineNbr": 46,
      "author": {
        "id": 1000805
      },
      "writtenOn": "2017-09-15T00:25:42Z",
      "side": 1,
      "message": "Nit: Don\u0027t add",
      "revId": "652eabc378bc11c4f642b78d1d5f7249f5d95592",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c3f9b7d2_62ab8070",
        "filename": "components/omnibox/browser/omnibox_controller.cc",
        "patchSetId": 4
      },
      "lineNbr": 46,
      "author": {
        "id": 1105777
      },
      "writtenOn": "2017-09-15T19:32:05Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "736e2ce2_cd92fa9c",
      "revId": "652eabc378bc11c4f642b78d1d5f7249f5d95592",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "410ec348_e10ccd21",
        "filename": "components/omnibox/browser/omnibox_popup_model.cc",
        "patchSetId": 4
      },
      "lineNbr": 183,
      "author": {
        "id": 1000805
      },
      "writtenOn": "2017-09-15T00:25:42Z",
      "side": 1,
      "message": "Nit: Don\u0027t add (2 places)",
      "revId": "652eabc378bc11c4f642b78d1d5f7249f5d95592",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0092fdfe_c6b509a0",
        "filename": "components/omnibox/browser/omnibox_popup_model.cc",
        "patchSetId": 4
      },
      "lineNbr": 183,
      "author": {
        "id": 1105777
      },
      "writtenOn": "2017-09-15T19:32:05Z",
      "side": 1,
      "message": "Done twice",
      "parentUuid": "410ec348_e10ccd21",
      "revId": "652eabc378bc11c4f642b78d1d5f7249f5d95592",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "84f1e400_c568fbdd",
        "filename": "components/omnibox/browser/search_provider.cc",
        "patchSetId": 4
      },
      "lineNbr": 956,
      "author": {
        "id": 1000805
      },
      "writtenOn": "2017-09-15T00:25:42Z",
      "side": 1,
      "message": "Nit: Don\u0027t commit",
      "revId": "652eabc378bc11c4f642b78d1d5f7249f5d95592",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d129b330_d3354bb0",
        "filename": "components/omnibox/browser/search_provider.cc",
        "patchSetId": 4
      },
      "lineNbr": 956,
      "author": {
        "id": 1105777
      },
      "writtenOn": "2017-09-15T19:32:05Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "84f1e400_c568fbdd",
      "revId": "652eabc378bc11c4f642b78d1d5f7249f5d95592",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}