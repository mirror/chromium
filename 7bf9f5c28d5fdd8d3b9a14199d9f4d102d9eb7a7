{
  "comments": [
    {
      "key": {
        "uuid": "5474cde9_da0a809e",
        "filename": "third_party/WebKit/Source/platform/loader/fetch/ResourceFetcher.cpp",
        "patchSetId": 14
      },
      "lineNbr": 817,
      "author": {
        "id": 1154589
      },
      "writtenOn": "2018-01-08T15:29:45Z",
      "side": 0,
      "message": "Out of curiosity, why is this dcheck no longer necessary---is it firing now?\n\nPrefetch had some subtle logic around ensuring that the request is synchronous that I don\u0027t full understand and I\u0027d like to get a handle on.",
      "revId": "7bf9f5c28d5fdd8d3b9a14199d9f4d102d9eb7a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8dba0732_5f67885c",
        "filename": "third_party/WebKit/Source/platform/loader/fetch/ResourceFetcher.cpp",
        "patchSetId": 14
      },
      "lineNbr": 817,
      "author": {
        "id": 1002532
      },
      "writtenOn": "2018-01-08T15:54:08Z",
      "side": 0,
      "message": "this is because the URLLoaderThrottle can cancel the request in WillStartRequest so ErrorOccurred will be true. This happened before in the browser, so the renderer never saw it synchronously cancelled.",
      "parentUuid": "5474cde9_da0a809e",
      "revId": "7bf9f5c28d5fdd8d3b9a14199d9f4d102d9eb7a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "768ee0ca_ad5e8cc6",
        "filename": "third_party/WebKit/Source/platform/loader/fetch/ResourceFetcher.cpp",
        "patchSetId": 14
      },
      "lineNbr": 817,
      "author": {
        "id": 1115930
      },
      "writtenOn": "2018-01-08T20:42:37Z",
      "side": 0,
      "message": "What test(s) triggered this DHCECK?\n\nHistorically, if ResourceFetcher::RequestResource() failed a load synchronously, it would return a nullptr Resource*, rather than a Resource with ErrorOccurred() \u003d\u003d true (with an excpetion for the sync case). We added an early-exit case that fails with a Resource* and ErrorOccurred() a while back (see ResourceForBlockedRequest()), and now we\u0027re adding this one. It\u0027s *probably* OK, but I don\u0027t know for certain that all resource requetsors handle this kind of failure, so I\u0027d like to understand in what cases this DCHECK can trigger.",
      "parentUuid": "8dba0732_5f67885c",
      "revId": "7bf9f5c28d5fdd8d3b9a14199d9f4d102d9eb7a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b4136ba6_0a275278",
        "filename": "third_party/WebKit/Source/platform/loader/fetch/ResourceFetcher.cpp",
        "patchSetId": 14
      },
      "lineNbr": 817,
      "author": {
        "id": 1002532
      },
      "writtenOn": "2018-01-08T20:57:11Z",
      "side": 0,
      "message": "Tests that exercise the \"delegate_-\u003eCancelWithError\" calls in PrerenderURLLoaderThrottle::WillStartRequest. i.e.\n\nPrerenderBrowserTest.PrerenderXhrPut\nPrerenderBrowserTest.PrerenderXhrDelete\nPrerenderBrowserTest.PrerenderCancelSubresourceUnsupportedScheme",
      "parentUuid": "768ee0ca_ad5e8cc6",
      "revId": "7bf9f5c28d5fdd8d3b9a14199d9f4d102d9eb7a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f02adb55_549feece",
        "filename": "third_party/WebKit/Source/platform/loader/fetch/ResourceFetcher.cpp",
        "patchSetId": 14
      },
      "lineNbr": 817,
      "author": {
        "id": 1115930
      },
      "writtenOn": "2018-01-08T21:14:06Z",
      "side": 0,
      "message": "That seems like decent coverage for this case. LGTM, though be aware that there is a (small) chance that there\u0027s a caller of ResourceFetcher::RequestResource() that isn\u0027t prepared for an (1) async request (2) that fails synchronously during start (3) but doesn\u0027t return a nullptr Resource.",
      "parentUuid": "b4136ba6_0a275278",
      "revId": "7bf9f5c28d5fdd8d3b9a14199d9f4d102d9eb7a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}