{
  "comments": [
    {
      "key": {
        "uuid": "886d3b44_a129ba13",
        "filename": "chrome/browser/media/router/mojo/media_router_desktop.cc",
        "patchSetId": 15
      },
      "lineNbr": 60,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2017-10-05T18:58:33Z",
      "side": 1,
      "message": "Does this begin network discovery? Is that an intended side effect of syncing the state?",
      "revId": "77fab5f9269086615b2d4f0b241d3d870c3e1d61",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a13b5134_d5ed3ead",
        "filename": "chrome/browser/media/router/mojo/media_router_desktop.cc",
        "patchSetId": 15
      },
      "lineNbr": 60,
      "author": {
        "id": 1190572
      },
      "writtenOn": "2017-10-17T07:49:33Z",
      "side": 1,
      "message": "Yes, this starts in-browser sink discovery (is that what you mean by network discovery?)\nThis behavior has existed for sometime and I believe is intended.\nDerek, could you chime in?",
      "parentUuid": "886d3b44_a129ba13",
      "revId": "77fab5f9269086615b2d4f0b241d3d870c3e1d61",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b14aecb2_2425e9ac",
        "filename": "chrome/browser/media/router/mojo/media_router_desktop.cc",
        "patchSetId": 15
      },
      "lineNbr": 60,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2017-10-18T22:32:48Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "a13b5134_d5ed3ead",
      "revId": "77fab5f9269086615b2d4f0b241d3d870c3e1d61",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "59ea22e2_eff7e164",
        "filename": "chrome/browser/media/router/mojo/media_router_desktop.cc",
        "patchSetId": 15
      },
      "lineNbr": 60,
      "author": {
        "id": 1133789
      },
      "writtenOn": "2017-10-18T22:44:30Z",
      "side": 1,
      "message": "StartDiscovery() is only called from here. It is safe to call multiple times since it is idempotent. It is intended for the MediaSinkServices to start when the MR extension calls RegisterMediaRouteProvider(). So while this is correct, it would be more clear if the StartDiscovery() call is moved to RegisterExtensionMediaRouteProvider().",
      "parentUuid": "a13b5134_d5ed3ead",
      "revId": "77fab5f9269086615b2d4f0b241d3d870c3e1d61",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c3ccccce_73e69659",
        "filename": "chrome/browser/media/router/mojo/media_router_desktop.cc",
        "patchSetId": 15
      },
      "lineNbr": 107,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2017-10-05T18:58:33Z",
      "side": 1,
      "message": "Maybe split this into two methods - RegisterNativeMediaRouteProvider() and RegisterExtensionMediaRouteProvider() (to be combined with InitializeMediaRouteProviders())",
      "revId": "77fab5f9269086615b2d4f0b241d3d870c3e1d61",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "984ea052_d8e72d7a",
        "filename": "chrome/browser/media/router/mojo/media_router_desktop.cc",
        "patchSetId": 15
      },
      "lineNbr": 107,
      "author": {
        "id": 1190572
      },
      "writtenOn": "2017-10-17T07:49:33Z",
      "side": 1,
      "message": "Factored out RegisterExtensionMediaRouteProvider(). It can\u0027t be combined with InitializeMRP() since they do different things - RegisterExtensionMRP() forwards the extension MRP Mojo pointer to the extension MRP proxy, and InitializeMRP() initializes extension MRP proxy.",
      "parentUuid": "c3ccccce_73e69659",
      "revId": "77fab5f9269086615b2d4f0b241d3d870c3e1d61",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ce5e857b_ec485e85",
        "filename": "chrome/browser/media/router/mojo/media_router_desktop.h",
        "patchSetId": 15
      },
      "lineNbr": 60,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2017-10-05T18:58:33Z",
      "side": 1,
      "message": "Per discussion we need to be careful about unwrapping the InterfacePtr.  If the object that gets this ptr is not aware of when the underlying message pipe becomes unbound (because of an error, etc.) then calls to this API appear to be just dropped on the floor.\n\nSee, for example, https://cs.chromium.org/chromium/src/out/Debug/gen/chrome/common/media_router/mojo/media_router.mojom.cc?rcl\u003d2420175c62680729e9da4d9501be910ce3bbf466\u0026l\u003d481\n\n\nThe owner if the InterfacePtr will need to make sure that these pointers are not used after its error handler is invoked.",
      "revId": "77fab5f9269086615b2d4f0b241d3d870c3e1d61",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b147f60a_8b94d7ab",
        "filename": "chrome/browser/media/router/mojo/media_router_desktop.h",
        "patchSetId": 15
      },
      "lineNbr": 60,
      "author": {
        "id": 1190572
      },
      "writtenOn": "2017-10-17T07:49:33Z",
      "side": 1,
      "message": "These methods are protected and are used only by MRMojoImpl and MRDesktop. We\u0027re using the pointer as a way to obtain an optional reference to an MRP, and only use it immediately, so I\u0027m thinking this is okay.",
      "parentUuid": "ce5e857b_ec485e85",
      "revId": "77fab5f9269086615b2d4f0b241d3d870c3e1d61",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3eed3cf7_c2148eec",
        "filename": "chrome/browser/media/router/mojo/media_router_desktop.h",
        "patchSetId": 15
      },
      "lineNbr": 60,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2017-10-18T22:32:48Z",
      "side": 1,
      "message": "OK.  Per my other comment, please document this clearly at the appropriate place.",
      "parentUuid": "b147f60a_8b94d7ab",
      "revId": "77fab5f9269086615b2d4f0b241d3d870c3e1d61",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1ce40332_ce90ffd6",
        "filename": "chrome/browser/media/router/mojo/media_router_desktop.h",
        "patchSetId": 15
      },
      "lineNbr": 63,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2017-10-05T18:58:33Z",
      "side": 1,
      "message": "Also per discussion I would like to think about a way to not treat the \"extension\" provider as a special case outside of how the media_route_providers_ map is set up.\n\nOne way would be to write a wrapper for the extension\u0027s MediaRouteProvider InterfacePtr that allows multiple entries in the media_route_providers_ map (\"cast\", \"dial\", etc.) to point to it.   The error handler for that message pipe would then remove all of the wrappers.\n\nAnother way is to have one InterfacePtr in the map and have an AddProvider(id, ptr)/RemoveProvider(id,ptr)/GetProvider(id) API that completely abstracts away the fact that multiple ids can map to a single Ptr.",
      "revId": "77fab5f9269086615b2d4f0b241d3d870c3e1d61",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3be54c57_2cb2da27",
        "filename": "chrome/browser/media/router/mojo/media_router_desktop.h",
        "patchSetId": 15
      },
      "lineNbr": 63,
      "author": {
        "id": 1190572
      },
      "writtenOn": "2017-10-17T07:49:33Z",
      "side": 1,
      "message": "We need to handle the extension MRP differently in RegisterMediaRouteProvider() because we need to pass the MRP Mojo pointer to the extension MRP proxy instead of putting it in the map.\n\nI\u0027m a bit reluctant to add complexity to the MRP map to support \"cast\"/\"dial\", which are only used by ProvideSinks().",
      "parentUuid": "1ce40332_ce90ffd6",
      "revId": "77fab5f9269086615b2d4f0b241d3d870c3e1d61",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d9425228_2259cdf8",
        "filename": "chrome/browser/media/router/mojo/media_router_desktop.h",
        "patchSetId": 15
      },
      "lineNbr": 63,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2017-10-18T22:32:48Z",
      "side": 1,
      "message": "Although I think there would be some benefits to refactoring both registration and access to MRP ptrs, I think the benefits mostly come from not having special cases creep throughout the code as we add/migrate more MRPs over time.  To unblock the wired MRP work and make progress, it\u0027s okay to land a transitional state (especially as these details are mostly hidden in a couple of classes).",
      "parentUuid": "3be54c57_2cb2da27",
      "revId": "77fab5f9269086615b2d4f0b241d3d870c3e1d61",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6aea73a7_aebeb4a8",
        "filename": "chrome/browser/media/router/mojo/media_router_mojo_impl.cc",
        "patchSetId": 15
      },
      "lineNbr": 77,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2017-10-05T18:58:33Z",
      "side": 1,
      "message": "Does this need to take a callback? I don\u0027t see any asynchronous operations and it runs on the same thread as the caller.",
      "revId": "77fab5f9269086615b2d4f0b241d3d870c3e1d61",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "43e07e1e_6149d1d8",
        "filename": "chrome/browser/media/router/mojo/media_router_mojo_impl.cc",
        "patchSetId": 15
      },
      "lineNbr": 77,
      "author": {
        "id": 1190572
      },
      "writtenOn": "2017-10-17T07:49:33Z",
      "side": 1,
      "message": "RegisterMRP() is a method in the MR Mojo interface called by the extension MRP, and the callback is used for telling it whether in-browser discovery is enabled. Other MRPs will be calling RegisterMRP() as well (MRMojoImpl::RegisterMRP() is called by MRDesktop::RegisterMRP()), although they won\u0027t be using the callback.",
      "parentUuid": "6aea73a7_aebeb4a8",
      "revId": "77fab5f9269086615b2d4f0b241d3d870c3e1d61",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "432bc90a_8bd77167",
        "filename": "chrome/browser/media/router/mojo/media_router_mojo_impl.cc",
        "patchSetId": 15
      },
      "lineNbr": 77,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2017-10-18T22:32:48Z",
      "side": 1,
      "message": "Ok, got it.  How does the config object get populated here?",
      "parentUuid": "43e07e1e_6149d1d8",
      "revId": "77fab5f9269086615b2d4f0b241d3d870c3e1d61",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "07a9d965_0f86100e",
        "filename": "chrome/browser/media/router/mojo/media_router_mojo_impl.cc",
        "patchSetId": 15
      },
      "lineNbr": 111,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2017-10-05T18:58:33Z",
      "side": 1,
      "message": "Can this API be:\n\nSetSinks(provider_id, sinks)\nSetOrigins(provider_id, origins)",
      "revId": "77fab5f9269086615b2d4f0b241d3d870c3e1d61",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2377e1c0_1e44464b",
        "filename": "chrome/browser/media/router/mojo/media_router_mojo_impl.cc",
        "patchSetId": 15
      },
      "lineNbr": 111,
      "author": {
        "id": 1190572
      },
      "writtenOn": "2017-10-17T07:49:33Z",
      "side": 1,
      "message": "I want to add \"ForProvider\" to emphasize that a query object can have results from multiple MRPs.",
      "parentUuid": "07a9d965_0f86100e",
      "revId": "77fab5f9269086615b2d4f0b241d3d870c3e1d61",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c1d5558d_fdaab847",
        "filename": "chrome/browser/media/router/mojo/media_router_mojo_impl.cc",
        "patchSetId": 15
      },
      "lineNbr": 111,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2017-10-18T22:32:48Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "2377e1c0_1e44464b",
      "revId": "77fab5f9269086615b2d4f0b241d3d870c3e1d61",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6494cc11_fcc20233",
        "filename": "chrome/browser/media/router/mojo/media_router_mojo_impl.cc",
        "patchSetId": 15
      },
      "lineNbr": 114,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2017-10-05T18:58:33Z",
      "side": 1,
      "message": "sinks_query-\u003eNotifyObservers()",
      "revId": "77fab5f9269086615b2d4f0b241d3d870c3e1d61",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "10441f42_063645aa",
        "filename": "chrome/browser/media/router/mojo/media_router_mojo_impl.cc",
        "patchSetId": 15
      },
      "lineNbr": 114,
      "author": {
        "id": 1190572
      },
      "writtenOn": "2017-10-17T07:49:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6494cc11_fcc20233",
      "revId": "77fab5f9269086615b2d4f0b241d3d870c3e1d61",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d9a93e8e_867342b5",
        "filename": "chrome/browser/media/router/mojo/media_router_mojo_impl.cc",
        "patchSetId": 15
      },
      "lineNbr": 142,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2017-10-05T18:58:33Z",
      "side": 1,
      "message": "SetRoutes(provider_id, routes)\nSetJoinableRouteIds(provider_id, ...)",
      "revId": "77fab5f9269086615b2d4f0b241d3d870c3e1d61",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8827ae55_ae6d2723",
        "filename": "chrome/browser/media/router/mojo/media_router_mojo_impl.cc",
        "patchSetId": 15
      },
      "lineNbr": 142,
      "author": {
        "id": 1190572
      },
      "writtenOn": "2017-10-17T07:49:33Z",
      "side": 1,
      "message": "Since the routes and joinable_route_ids are set together, I\u0027m thinking that they can be just one method.",
      "parentUuid": "d9a93e8e_867342b5",
      "revId": "77fab5f9269086615b2d4f0b241d3d870c3e1d61",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b8f153ab_7ab617e6",
        "filename": "chrome/browser/media/router/mojo/media_router_mojo_impl.cc",
        "patchSetId": 15
      },
      "lineNbr": 142,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2017-10-18T22:32:48Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "8827ae55_ae6d2723",
      "revId": "77fab5f9269086615b2d4f0b241d3d870c3e1d61",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ec8ff2fc_a36718b6",
        "filename": "chrome/browser/media/router/mojo/media_router_mojo_impl.cc",
        "patchSetId": 15
      },
      "lineNbr": 144,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2017-10-05T18:58:33Z",
      "side": 1,
      "message": "Can this code refactored to be: routes_query-\u003eNotifyObservers()",
      "revId": "77fab5f9269086615b2d4f0b241d3d870c3e1d61",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "31267911_2f3a9ee8",
        "filename": "chrome/browser/media/router/mojo/media_router_mojo_impl.cc",
        "patchSetId": 15
      },
      "lineNbr": 144,
      "author": {
        "id": 1190572
      },
      "writtenOn": "2017-10-17T07:49:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ec8ff2fc_a36718b6",
      "revId": "77fab5f9269086615b2d4f0b241d3d870c3e1d61",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b214df86_65148c31",
        "filename": "chrome/browser/media/router/mojo/media_router_mojo_impl.h",
        "patchSetId": 15
      },
      "lineNbr": 217,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2017-10-05T18:58:33Z",
      "side": 1,
      "message": "This API exposes a lot of details about how the MediaSinksQuery keeps track of its internal state.  I would prefer a simpler API such as:\n\n\nSetSinks(provider_id, sinks)\nAdd/RemoveObservers()\nNotifyObservers();",
      "revId": "77fab5f9269086615b2d4f0b241d3d870c3e1d61",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "84aa8f8b_9583b30d",
        "filename": "chrome/browser/media/router/mojo/media_router_mojo_impl.h",
        "patchSetId": 15
      },
      "lineNbr": 217,
      "author": {
        "id": 1190572
      },
      "writtenOn": "2017-10-17T07:49:33Z",
      "side": 1,
      "message": "Hmm MRMojoImpl uses a lot of the ObserverList methods (Add/RemoveObservers(), HasObserver(), might_have_observers()), so we have to add a lot of boilerplate code to MediaSinksQuery and MediaRoutesQuery. I made the change in the new patchset but unsure whether to keep it. Would it still be better?\n\nAlso I\u0027m having a hard time removing the getters, because MediaSinksQuery/MediaRoutesQuery used to be structs and MRMojoImpl would do certain things depending on their internal states, e.g. PostTask() in RegisterMediaRoutesObserver().",
      "parentUuid": "b214df86_65148c31",
      "revId": "77fab5f9269086615b2d4f0b241d3d870c3e1d61",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f7b59f7f_114fcba8",
        "filename": "chrome/browser/media/router/mojo/media_router_mojo_impl.h",
        "patchSetId": 15
      },
      "lineNbr": 217,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2017-10-18T22:32:48Z",
      "side": 1,
      "message": "I think I prefer the newer patchset, even with the boilerplate, as it leads to more readable code.  Thanks for making the changes.",
      "parentUuid": "84aa8f8b_9583b30d",
      "revId": "77fab5f9269086615b2d4f0b241d3d870c3e1d61",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a323ad1b_a3607741",
        "filename": "chrome/browser/media/router/mojo/media_router_mojo_impl.h",
        "patchSetId": 15
      },
      "lineNbr": 255,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2017-10-05T18:58:33Z",
      "side": 1,
      "message": "Similar comments about API design apply here as well.",
      "revId": "77fab5f9269086615b2d4f0b241d3d870c3e1d61",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3742a51d_c8ee5a6b",
        "filename": "chrome/browser/media/router/mojo/media_router_mojo_impl.h",
        "patchSetId": 15
      },
      "lineNbr": 255,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2017-10-18T22:32:48Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a323ad1b_a3607741",
      "revId": "77fab5f9269086615b2d4f0b241d3d870c3e1d61",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "12139e0b_2a521f1d",
        "filename": "chrome/common/media_router/mojo/media_router.mojom",
        "patchSetId": 15
      },
      "lineNbr": 223,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2017-10-05T18:58:33Z",
      "side": 1,
      "message": "WIRED_SINK is slightly more accurate since it\u0027s possible to use USB or HDMI audio-only.",
      "revId": "77fab5f9269086615b2d4f0b241d3d870c3e1d61",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c66816c1_4bfe7cce",
        "filename": "chrome/common/media_router/mojo/media_router.mojom",
        "patchSetId": 15
      },
      "lineNbr": 223,
      "author": {
        "id": 1190572
      },
      "writtenOn": "2017-10-17T07:49:33Z",
      "side": 1,
      "message": "Hmm the Wired Display MRP is going to support displays only (at least initially), so I\u0027m inclined to call it as such.",
      "parentUuid": "12139e0b_2a521f1d",
      "revId": "77fab5f9269086615b2d4f0b241d3d870c3e1d61",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a1edbcc3_47882745",
        "filename": "chrome/common/media_router/mojo/media_router.mojom",
        "patchSetId": 15
      },
      "lineNbr": 223,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2017-10-18T22:32:48Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "c66816c1_4bfe7cce",
      "revId": "77fab5f9269086615b2d4f0b241d3d870c3e1d61",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}