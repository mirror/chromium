{
  "comments": [
    {
      "key": {
        "uuid": "f9aef1ce_57232595",
        "filename": "content/common/indexed_db/indexed_db.mojom",
        "patchSetId": 6
      },
      "lineNbr": 141,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-09-15T04:51:21Z",
      "side": 1,
      "message": "Would we eventually remove BlobInfo itself? Looking at the definition of Blob, I guess not, since BlobInfo is more about properties of a blob while Blob is more about the actual transfer.\n\nWhat about things like UUID? Would Blink eventually have its own BlobInfo mojom struct, or we would move the one in indexedb out perhaps?",
      "revId": "e4a9b2b3152db605f14af98009050de050eeb4e6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d0247639_206f55f7",
        "filename": "content/common/indexed_db/indexed_db.mojom",
        "patchSetId": 6
      },
      "lineNbr": 141,
      "author": {
        "id": 1110029
      },
      "writtenOn": "2017-09-25T19:22:18Z",
      "side": 1,
      "message": "Good questions... About UUID I hope to be able to get rid of those almost everywhere after switching everything to mojo blobs. But it\u0027s less clear if we can get rid of things like this BlobInfo struct. In https://chromium-review.googlesource.com/c/chromium/src/+/594495 I\u0027m adding a very similar mojo struct, but I\u0027m not quite happy with that. Ideally we wouldn\u0027t need it, but the existing code doesn\u0027t always correctly handle blobs (i.e. the renderer side Blob representation might currently have a different content type and/or size than what the browser thinks a blob is). If that all is fixed (shouldn\u0027t be too difficult actually) things might get easier. Although since a (javascript exposed) blob needs to be able to synchronously get its size and content type etc, we\u0027ll likely always need to be somehow passing those around whenever we also pass the blob reference itself, if nothing else for performance reasons. Something like mojo handle properties (https://bugs.chromium.org/p/chromium/issues/detail?id\u003d696107) might make it plausible to just attach this meta-data as properties on the Blob handles (maybe we can even invent some mojom syntax to be able to specify (const) fields on an interface where those fields are serialized as a handle property?).\n\nSo I\u0027m not sure yet. Generally other code doesn\u0027t quite need this struct, since indexeddb is the only user of SerializedScriptValue that serializes files/blobs without embedding their meta-data in the serialized string. Post-message/other APIs have SerializedScriptValue serialize the meta-data in the string. The \"best\" solution might involve changes to the serialization format, but I\u0027d rather not do that until I\u0027m sure of the best solution, since these things are stored to disk so we\u0027ll always still have to support at least reading old versions.\n\nFileInfo is also kind of different than BlobInfo. BlobInfo is all data that at least in theory could be deduced from the blob handle/blob uuid (with some caveats that size might sometimes be unknown, and mime-type is in the current code sometimes \"modified\" without changing the backing blob). FileInfo on the other hand is data that only exists in the renderer as part of the script exposed File object, it is not part of the actual blob itself. So this is definitely an area where I expect some changes in the future, I\u0027m just not sure yet what those changes will be.",
      "parentUuid": "f9aef1ce_57232595",
      "revId": "e4a9b2b3152db605f14af98009050de050eeb4e6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e6ce2b36_c67ea18f",
        "filename": "third_party/WebKit/Source/bindings/core/v8/serialization/V8ScriptValueDeserializer.cpp",
        "patchSetId": 6
      },
      "lineNbr": 227,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-09-15T04:51:21Z",
      "side": 1,
      "message": "I guess this is because mojo blobs aren\u0027t always enabled?",
      "revId": "e4a9b2b3152db605f14af98009050de050eeb4e6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2cbe2abc_376abf7f",
        "filename": "third_party/WebKit/Source/bindings/core/v8/serialization/V8ScriptValueDeserializer.cpp",
        "patchSetId": 6
      },
      "lineNbr": 227,
      "author": {
        "id": 1110029
      },
      "writtenOn": "2017-09-25T19:22:18Z",
      "side": 1,
      "message": "Yeah, and because of the TODOs in WebBlobInfo.h to get rid of any of the constructors that don\u0027t include a message pipe. Although I could of course update WebBlobInfo::GetBlobHandle to do what GetOrCreateBlobDataHandle does. I don\u0027t think there are users of SerializedScriptValue that pass both WebBlobInfos and BlobDataHandles to the deserializer (if there would be, making GetBlobHandle create the BlobDataHandle would result in not re-using the BlobDataHandle that might already exist in the deserializers blob handle map).",
      "parentUuid": "e6ce2b36_c67ea18f",
      "revId": "e4a9b2b3152db605f14af98009050de050eeb4e6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "33a41d00_62497295",
        "filename": "third_party/WebKit/Source/platform/exported/WebBlobInfo.cpp",
        "patchSetId": 6
      },
      "lineNbr": 54,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-09-15T04:51:21Z",
      "side": 1,
      "message": "Can this just be \u003d default? Or does that break because of WebPrivatePtr?",
      "revId": "e4a9b2b3152db605f14af98009050de050eeb4e6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5d89275a_baf13e44",
        "filename": "third_party/WebKit/Source/platform/exported/WebBlobInfo.cpp",
        "patchSetId": 6
      },
      "lineNbr": 54,
      "author": {
        "id": 1110029
      },
      "writtenOn": "2017-09-25T19:22:18Z",
      "side": 1,
      "message": "I can\u0027t make the copy-constructor \u003ddefault because of WebPrivatePtr, but I can make the assignment operator \u003ddefault and define the copy constructor in terms of assignment. Done that.",
      "parentUuid": "33a41d00_62497295",
      "revId": "e4a9b2b3152db605f14af98009050de050eeb4e6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}