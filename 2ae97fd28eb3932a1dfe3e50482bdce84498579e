{
  "comments": [
    {
      "key": {
        "uuid": "a34e1a22_23a54d83",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 9,
      "author": {
        "id": 1002376
      },
      "writtenOn": "2017-11-02T21:14:38Z",
      "side": 1,
      "message": "more precisely, the profiler trace from the bug indicates that compiling the regular expression on each invocation is too slow, not that using the regular expression is slow. Regular expression engines definitely trade of time/space in compilation for extremely low time/space requirements at runtime.\n\nCacheing the RegexMatcher (see autofill::AutofillRegexes and autofill::MatchesPattern) would almost certainly make this go away.\n\nThe next thing to wonder is: how often is the password manager calculating signatures?\n\nThen: why is password manager in the critical path (or sufficiently in the critical path) that its slowing down the browser\u0027s responsiveness?",
      "range": {
        "startLine": 9,
        "startChar": 54,
        "endLine": 9,
        "endChar": 85
      },
      "revId": "2ae97fd28eb3932a1dfe3e50482bdce84498579e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c5b23a11_4b993d35",
        "filename": "components/autofill/core/common/signatures_util.cc",
        "patchSetId": 3
      },
      "lineNbr": 27,
      "author": {
        "id": 1002376
      },
      "writtenOn": "2017-11-02T21:01:32Z",
      "side": 1,
      "message": "You can do this in a single pass/loop, but your current implementation is probably easier to read. For your consideration...\n\n  string result;\n  result.reserve(input_utf8.length());\n  size_t start \u003d std::string::npos;\n  for (size_t i \u003d 0; i \u003c input_utf8.length(); ++i) {\n    const char c \u003d input_utf8[i];\n    result.push_back(c);\n    if (std::isdigit(c)) {\n      if (start \u003d\u003d std::string::npos)\n        start \u003d result.length() - 1;\n    } else if (start !\u003d std::string::npos) {\n      if (result.length() - start \u003e 5)\n        result.resize(start);\n      start \u003d std::string::npos;\n    }\n  }\n\nYou can probably also skip the creation of input_utf8 and just read/copy from the string16 input.",
      "revId": "2ae97fd28eb3932a1dfe3e50482bdce84498579e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}