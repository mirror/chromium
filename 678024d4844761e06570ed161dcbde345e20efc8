{
  "comments": [
    {
      "key": {
        "uuid": "f47a2c60_7d9eef1f",
        "filename": "net/http/http_server_properties_impl.cc",
        "patchSetId": 5
      },
      "lineNbr": 150,
      "author": {
        "id": 1116006
      },
      "writtenOn": "2017-11-09T19:38:59Z",
      "side": 1,
      "message": "Could we merge this loop with the previous loop so that we only walk the map once?",
      "range": {
        "startLine": 150,
        "startChar": 50,
        "endLine": 150,
        "endChar": 0
      },
      "revId": "678024d4844761e06570ed161dcbde345e20efc8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "099cfd86_bf7f1231",
        "filename": "net/http/http_server_properties_impl.cc",
        "patchSetId": 5
      },
      "lineNbr": 150,
      "author": {
        "id": 1143554
      },
      "writtenOn": "2017-11-10T01:28:04Z",
      "side": 1,
      "message": "I was considering it but I think it won\u0027t work without iterating |quic_server_info_map| before swapping. The goal is actually to add entries from |quic_server_info_map| input. The loop iterates over |quic_server_info_map| but after swapping, i.e. it iterates through entries that we already have in the cache. In addition, |canonical_server_info_map_| should reference the most recent entries for |quic_server_info_map_|.\n\nI don\u0027t know whether it was implemented intentionally, but the logic that determines recency is interesting here. It gives the priority to records from the persistent storage except for those that are unique in the memory cache.",
      "parentUuid": "f47a2c60_7d9eef1f",
      "range": {
        "startLine": 150,
        "startChar": 50,
        "endLine": 150,
        "endChar": 0
      },
      "revId": "678024d4844761e06570ed161dcbde345e20efc8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e439cfbf_9853f8ed",
        "filename": "net/http/http_server_properties_impl.cc",
        "patchSetId": 5
      },
      "lineNbr": 150,
      "author": {
        "id": 1116006
      },
      "writtenOn": "2017-11-10T15:08:32Z",
      "side": 1,
      "message": "Oh, I see. I misread that the first loop is quic_server_info_map_ and the second is quic_server_info_map. I suspect the preference logic here is not intentional, but it\u0027s also probably not terribly important either way. So your existing logic is fine.",
      "parentUuid": "099cfd86_bf7f1231",
      "range": {
        "startLine": 150,
        "startChar": 50,
        "endLine": 150,
        "endChar": 0
      },
      "revId": "678024d4844761e06570ed161dcbde345e20efc8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "77166407_4cc8a496",
        "filename": "net/http/http_server_properties_impl.h",
        "patchSetId": 5
      },
      "lineNbr": 153,
      "author": {
        "id": 1116006
      },
      "writtenOn": "2017-11-09T19:38:59Z",
      "side": 1,
      "message": "I wonder if it would make sense to use base::flat_map for these two?",
      "range": {
        "startLine": 153,
        "startChar": 14,
        "endLine": 153,
        "endChar": 15
      },
      "revId": "678024d4844761e06570ed161dcbde345e20efc8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "48d0a85c_365fe7e9",
        "filename": "net/http/http_server_properties_impl.h",
        "patchSetId": 5
      },
      "lineNbr": 154,
      "author": {
        "id": 1116006
      },
      "writtenOn": "2017-11-09T19:38:59Z",
      "side": 1,
      "message": "As it happens, QuicServerId includes PrivacyMode. By including this as the key in this map we\u0027ll be prevented from doing speculative 0-RTT from across PrivacyMode boundaries in this way. I wondering if it would be better to have the key in this map just be host:port.",
      "range": {
        "startLine": 154,
        "startChar": 19,
        "endLine": 154,
        "endChar": 31
      },
      "revId": "678024d4844761e06570ed161dcbde345e20efc8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a96a7a65_2d4018b8",
        "filename": "net/http/http_server_properties_impl.h",
        "patchSetId": 5
      },
      "lineNbr": 154,
      "author": {
        "id": 1143554
      },
      "writtenOn": "2017-11-10T01:28:04Z",
      "side": 1,
      "message": "That was actually a question I forgot to ask. I made it consistent with |QuicServerInfoMap| that also uses QuicServerId as the key. Do we use QuicServerId in |QuicServerInfoMap| because the privacy flag cannot change for a non-canonical host over time? I see that we persist the privacy flag on disk.",
      "parentUuid": "48d0a85c_365fe7e9",
      "range": {
        "startLine": 154,
        "startChar": 19,
        "endLine": 154,
        "endChar": 31
      },
      "revId": "678024d4844761e06570ed161dcbde345e20efc8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8afbbe9e_4229cb98",
        "filename": "net/http/http_server_properties_impl.h",
        "patchSetId": 5
      },
      "lineNbr": 154,
      "author": {
        "id": 1116006
      },
      "writtenOn": "2017-11-10T15:08:32Z",
      "side": 1,
      "message": "PrivacyMode depends on the request. Some requests can have cookies, some can\u0027t (for example) and need to go on different connections. So we use privacy mode as the key to the connection map at the socket pool layer. So when we persisted to disk, we just persisted what we have in memory, hence QuicServerId.\n\nIn the case of canonical hosts, we\u0027re just speculating that two server share the same ServerInfo, so I\u0027d just key off of host:port here. Does that makes sense?",
      "parentUuid": "a96a7a65_2d4018b8",
      "range": {
        "startLine": 154,
        "startChar": 19,
        "endLine": 154,
        "endChar": 31
      },
      "revId": "678024d4844761e06570ed161dcbde345e20efc8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4d3965fc_49adb9a0",
        "filename": "net/http/http_server_properties_impl.h",
        "patchSetId": 5
      },
      "lineNbr": 163,
      "author": {
        "id": 1116006
      },
      "writtenOn": "2017-11-09T19:38:59Z",
      "side": 1,
      "message": "nit: GetCanonicalAltSvcHost()",
      "revId": "678024d4844761e06570ed161dcbde345e20efc8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c0900942_dc8aeac2",
        "filename": "net/http/http_server_properties_impl.h",
        "patchSetId": 5
      },
      "lineNbr": 172,
      "author": {
        "id": 1116006
      },
      "writtenOn": "2017-11-09T19:38:59Z",
      "side": 1,
      "message": "nit: \"... canonical alt-svc host ...\"",
      "range": {
        "startLine": 172,
        "startChar": 26,
        "endLine": 172,
        "endChar": 30
      },
      "revId": "678024d4844761e06570ed161dcbde345e20efc8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "59434259_83173d09",
        "filename": "net/http/http_server_properties_impl.h",
        "patchSetId": 5
      },
      "lineNbr": 179,
      "author": {
        "id": 1116006
      },
      "writtenOn": "2017-11-09T19:38:59Z",
      "side": 1,
      "message": "Your call, but I\u0027d probably just call this \"UpdateCanonicalServerInfoMap()\"\n\nnit: I\u0027m not sure I\u0027d call this argument \"origin\" it\u0027s it\u0027s not a scheme/host/port.",
      "revId": "678024d4844761e06570ed161dcbde345e20efc8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}