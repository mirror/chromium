{
  "comments": [
    {
      "key": {
        "uuid": "ffebbe41_1f4e9bd9",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 7,
      "author": {
        "id": 1002541
      },
      "writtenOn": "2017-10-10T14:00:59Z",
      "side": 1,
      "message": "This should be a summary of what is being changed, not why.\nPlease consider something like:\n\nRelax autofilling passwords in iframes to PSL matching.",
      "range": {
        "startLine": 7,
        "startChar": 0,
        "endLine": 7,
        "endChar": 54
      },
      "revId": "f4e99f7d38930602829888bf2b0f0f9bc733bc8f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1ebbbcd2_8cac284f",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 10,
      "author": {
        "id": 1002541
      },
      "writtenOn": "2017-10-10T14:00:59Z",
      "side": 1,
      "message": "The key point is that the domain is different, yet related (through the same public suffix). It might be better to use the concrete domains in this explanation to avoid confusion about autofilling on any domains.",
      "range": {
        "startLine": 10,
        "startChar": 33,
        "endLine": 10,
        "endChar": 49
      },
      "revId": "f4e99f7d38930602829888bf2b0f0f9bc733bc8f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8ffcaf0b_56471d93",
        "filename": "chrome/browser/password_manager/password_manager_browsertest.cc",
        "patchSetId": 4
      },
      "lineNbr": 2158,
      "author": {
        "id": 1002541
      },
      "writtenOn": "2017-10-10T14:00:59Z",
      "side": 1,
      "message": "typo: forms",
      "range": {
        "startLine": 2158,
        "startChar": 54,
        "endLine": 2158,
        "endChar": 60
      },
      "revId": "f4e99f7d38930602829888bf2b0f0f9bc733bc8f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0cde9989_cfaf2a36",
        "filename": "chrome/browser/password_manager/password_manager_browsertest.cc",
        "patchSetId": 4
      },
      "lineNbr": 2158,
      "author": {
        "id": 1242012
      },
      "writtenOn": "2017-10-13T12:38:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8ffcaf0b_56471d93",
      "range": {
        "startLine": 2158,
        "startChar": 54,
        "endLine": 2158,
        "endChar": 60
      },
      "revId": "f4e99f7d38930602829888bf2b0f0f9bc733bc8f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "973b8838_7b54793d",
        "filename": "chrome/browser/password_manager/password_manager_browsertest.cc",
        "patchSetId": 4
      },
      "lineNbr": 2159,
      "author": {
        "id": 1002541
      },
      "writtenOn": "2017-10-10T14:00:59Z",
      "side": 1,
      "message": "nit: You can drop \"same\" because it is implied in sharing the (only) origin between the frames.",
      "range": {
        "startLine": 2159,
        "startChar": 19,
        "endLine": 2159,
        "endChar": 23
      },
      "revId": "f4e99f7d38930602829888bf2b0f0f9bc733bc8f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "60f9855c_a486f55e",
        "filename": "chrome/browser/password_manager/password_manager_browsertest.cc",
        "patchSetId": 4
      },
      "lineNbr": 2159,
      "author": {
        "id": 1002541
      },
      "writtenOn": "2017-10-10T14:00:59Z",
      "side": 1,
      "message": "typo: missing \"that\" in front of \"don\u0027t\"",
      "range": {
        "startLine": 2159,
        "startChar": 3,
        "endLine": 2159,
        "endChar": 8
      },
      "revId": "f4e99f7d38930602829888bf2b0f0f9bc733bc8f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f2f68fc8_4fb1995f",
        "filename": "chrome/browser/password_manager/password_manager_browsertest.cc",
        "patchSetId": 4
      },
      "lineNbr": 2159,
      "author": {
        "id": 1002541
      },
      "writtenOn": "2017-10-10T14:00:59Z",
      "side": 1,
      "message": "nit: \"with\" instead of \"as\" (share something with somebody, not as somebody).",
      "range": {
        "startLine": 2159,
        "startChar": 40,
        "endLine": 2159,
        "endChar": 42
      },
      "revId": "f4e99f7d38930602829888bf2b0f0f9bc733bc8f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9dfce7b1_0d9de405",
        "filename": "chrome/browser/password_manager/password_manager_browsertest.cc",
        "patchSetId": 4
      },
      "lineNbr": 2159,
      "author": {
        "id": 1242012
      },
      "writtenOn": "2017-10-13T12:38:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f2f68fc8_4fb1995f",
      "range": {
        "startLine": 2159,
        "startChar": 40,
        "endLine": 2159,
        "endChar": 42
      },
      "revId": "f4e99f7d38930602829888bf2b0f0f9bc733bc8f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1c47bb50_0c805fd1",
        "filename": "chrome/browser/password_manager/password_manager_browsertest.cc",
        "patchSetId": 4
      },
      "lineNbr": 2159,
      "author": {
        "id": 1242012
      },
      "writtenOn": "2017-10-13T12:38:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "60f9855c_a486f55e",
      "range": {
        "startLine": 2159,
        "startChar": 3,
        "endLine": 2159,
        "endChar": 8
      },
      "revId": "f4e99f7d38930602829888bf2b0f0f9bc733bc8f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "531d44c9_f9fc4a3f",
        "filename": "chrome/browser/password_manager/password_manager_browsertest.cc",
        "patchSetId": 4
      },
      "lineNbr": 2159,
      "author": {
        "id": 1242012
      },
      "writtenOn": "2017-10-13T12:38:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "973b8838_7b54793d",
      "range": {
        "startLine": 2159,
        "startChar": 19,
        "endLine": 2159,
        "endChar": 23
      },
      "revId": "f4e99f7d38930602829888bf2b0f0f9bc733bc8f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a5d586ec_a2de6fca",
        "filename": "chrome/browser/password_manager/password_manager_browsertest.cc",
        "patchSetId": 4
      },
      "lineNbr": 2162,
      "author": {
        "id": 1002541
      },
      "writtenOn": "2017-10-10T14:00:59Z",
      "side": 1,
      "message": "Is there already a test checking that cross-domain autofill in iframes does not happen if the domains are not PSL-related? If not, could you please add such test?",
      "range": {
        "startLine": 2162,
        "startChar": 23,
        "endLine": 2162,
        "endChar": 50
      },
      "revId": "f4e99f7d38930602829888bf2b0f0f9bc733bc8f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "80551309_d20b714d",
        "filename": "chrome/browser/password_manager/password_manager_browsertest.cc",
        "patchSetId": 4
      },
      "lineNbr": 2162,
      "author": {
        "id": 1242012
      },
      "writtenOn": "2017-10-13T12:38:15Z",
      "side": 1,
      "message": "Surely I will add such test once this test gets into final shape.",
      "parentUuid": "a5d586ec_a2de6fca",
      "range": {
        "startLine": 2162,
        "startChar": 23,
        "endLine": 2162,
        "endChar": 50
      },
      "revId": "f4e99f7d38930602829888bf2b0f0f9bc733bc8f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6495531d_4da1c0db",
        "filename": "chrome/browser/password_manager/password_manager_browsertest.cc",
        "patchSetId": 4
      },
      "lineNbr": 2189,
      "author": {
        "id": 1002541
      },
      "writtenOn": "2017-10-10T14:00:59Z",
      "side": 1,
      "message": "Please don\u0027t add passwords through navigation, add them directly to the TestPasswordStore instead. Navigation slows the test down and can introduce sources of failure unrelated to the tested property. See other tests using TestsPasswordStore and AddLogin for how to do that.",
      "range": {
        "startLine": 2181,
        "startChar": 2,
        "endLine": 2189,
        "endChar": 38
      },
      "revId": "f4e99f7d38930602829888bf2b0f0f9bc733bc8f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e02b2b16_b9653aa4",
        "filename": "chrome/browser/password_manager/password_manager_browsertest.cc",
        "patchSetId": 4
      },
      "lineNbr": 2189,
      "author": {
        "id": 1242012
      },
      "writtenOn": "2017-10-12T13:24:35Z",
      "side": 1,
      "message": "Thanks Vaclav but If I change the code as below using TestPasswordStore it is not working\nand giving Security Error.\n\nCan you please have a look.\n\nI changed as below :\n\n  GURL main_frame_url \u003d embedded_test_server()-\u003eGetURL(\n      \"www.foo.com\", \"/password/password_form_in_crosssite_iframe.html\");\n  NavigationObserver observer(WebContents());\n  ui_test_utils::NavigateToURL(browser(), main_frame_url);\n  observer.Wait();\n\n  // Create an iframe and navigate cross-site.\n  NavigationObserver iframe_observer(WebContents());\n  iframe_observer.SetPathToWaitFor(\"/password/crossite_iframe_content.html\");\n  GURL iframe_url \u003d embedded_test_server()-\u003eGetURL(\n      \"abc.foo.com\", \"/password/crossite_iframe_content.html\");\n  std::string create_iframe \u003d\n      base::StringPrintf(\"create_iframe(\u0027%s\u0027);\", iframe_url.spec().c_str());\n  ASSERT_TRUE(content::ExecuteScriptWithoutUserGesture(RenderFrameHost(),\n                                                       create_iframe));\n  iframe_observer.Wait();\n\n  // Store a password for autofill later.\n  scoped_refptr\u003cpassword_manager::TestPasswordStore\u003e password_store \u003d\n  static_cast\u003cpassword_manager::TestPasswordStore*\u003e(\n      PasswordStoreFactory::GetForProfile(\n          browser()-\u003eprofile(), ServiceAccessType::IMPLICIT_ACCESS)\n          .get());\n  autofill::PasswordForm signin_form;\n  signin_form.signon_realm \u003d iframe_url.spec();\n  signin_form.origin \u003d iframe_url;\n  signin_form.username_value \u003d base::ASCIIToUTF16(\"temp\");\n  signin_form.password_value \u003d base::ASCIIToUTF16(\"pa55w0rd\");\n  password_store-\u003eAddLogin(signin_form);\n\n\n  // Visit the form again.\n  NavigationObserver reload_observer(WebContents());\n  ui_test_utils::NavigateToURL(browser(), main_frame_url);\n  reload_observer.Wait();\n\n  NavigationObserver iframe_observer_2(WebContents());\n  iframe_observer_2.SetPathToWaitFor(\"/password/crossite_iframe_content.html\");\n  ASSERT_TRUE(content::ExecuteScriptWithoutUserGesture(RenderFrameHost(),\n                                                       create_iframe));\n  iframe_observer_2.Wait();\n\n  // Simulate the user interaction in the iframe which should trigger autofill.\n  // Click in the middle of the frame to avoid the border.\n  ASSERT_TRUE(content::ExecuteScriptWithoutUserGesture(\n      RenderFrameHost(),\n      \"var iframeRect \u003d document.getElementById(\"\n      \"\u0027iframe\u0027).getBoundingClientRect();\"));\n  int y;\n  ASSERT_TRUE(content::ExecuteScriptWithoutUserGestureAndExtractInt(\n      RenderFrameHost(),\n      \"window.domAutomationController.send((iframeRect.top +\"\n      \"iframeRect.bottom) / 2);\",\n      \u0026y));\n  int x;\n  ASSERT_TRUE(content::ExecuteScriptWithoutUserGestureAndExtractInt(\n      RenderFrameHost(),\n      \"window.domAutomationController.send((iframeRect.left + iframeRect.right)\"\n      \"/ 2);\",\n      \u0026x));\n\n  content::SimulateMouseClickAt(\n      WebContents(), 0, blink::WebMouseEvent::Button::kLeft, gfx::Point(x, y));\n\n    // Verify password has been autofilled\n  CheckElementValue(\"iframe\", \"password_field\", \"pa55w0rd\");\n\n  // Verify username has been autofilled\n  CheckElementValue(\"iframe\", \"username_field\", \"temp\");",
      "parentUuid": "6495531d_4da1c0db",
      "range": {
        "startLine": 2181,
        "startChar": 2,
        "endLine": 2189,
        "endChar": 38
      },
      "revId": "f4e99f7d38930602829888bf2b0f0f9bc733bc8f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cdb4c098_d8ed38a1",
        "filename": "chrome/browser/password_manager/password_manager_browsertest.cc",
        "patchSetId": 4
      },
      "lineNbr": 2189,
      "author": {
        "id": 1002541
      },
      "writtenOn": "2017-10-12T13:40:14Z",
      "side": 1,
      "message": "Hi Nikhil,\nCould you please also share the error you are seeing? I cannot extract the problem from the code itself.",
      "parentUuid": "e02b2b16_b9653aa4",
      "range": {
        "startLine": 2181,
        "startChar": 2,
        "endLine": 2189,
        "endChar": 38
      },
      "revId": "f4e99f7d38930602829888bf2b0f0f9bc733bc8f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "52de5673_f97761c6",
        "filename": "chrome/browser/password_manager/password_manager_browsertest.cc",
        "patchSetId": 4
      },
      "lineNbr": 2189,
      "author": {
        "id": 1242012
      },
      "writtenOn": "2017-10-13T12:38:15Z",
      "side": 1,
      "message": "Te above code is giving this error:\n\nERROR : [18737:18737:1013/175950.810109:INFO:CONSOLE(1)] \"Uncaught SecurityError: Failed to read the \u0027contentDocument\u0027 property from \u0027HTMLIFrameElement\u0027: Blocked a frame with origin \"http://www.foo.com:60935\" from accessing a frame with origin \"http://abc.foo.com:60935\". Protocols, domains, and ports must match.\", source: http://www.foo.com:60935/password/password_form_in_crosssite_iframe.html (1)\n\n\nI tried to check other iframe test cases but all are using add passwords through navigation , I could not figure out the reason though.",
      "parentUuid": "cdb4c098_d8ed38a1",
      "range": {
        "startLine": 2181,
        "startChar": 2,
        "endLine": 2189,
        "endChar": 38
      },
      "revId": "f4e99f7d38930602829888bf2b0f0f9bc733bc8f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b5c8064a_88414df2",
        "filename": "chrome/browser/password_manager/password_manager_browsertest.cc",
        "patchSetId": 4
      },
      "lineNbr": 2189,
      "author": {
        "id": 1002541
      },
      "writtenOn": "2017-10-16T12:41:59Z",
      "side": 1,
      "message": "There are two issues with the code you propose in the comment above:\n\n(A) By assigning\n  signin_form.signon_realm \u003d iframe_url.spec();\nyou include the origin path in the realm. That\u0027s then different from the page realm (which is just the scheme, hostname and port). As a result, Chrome thinks this is also a PSL match and won\u0027t autofill it. Please change to:\n  signin_form.signon_realm \u003d iframe_url.GetOrigin().spec();\n\n(B) You use CheckElementValue in the end directly, which causes the disallowed cross-site access. Just use sendMessage as you do in the end of the current version of the test. Note that this has nothing to do with the TestPasswordStore.",
      "parentUuid": "52de5673_f97761c6",
      "range": {
        "startLine": 2181,
        "startChar": 2,
        "endLine": 2189,
        "endChar": 38
      },
      "revId": "f4e99f7d38930602829888bf2b0f0f9bc733bc8f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3287dffe_1c666e8c",
        "filename": "chrome/browser/password_manager/password_manager_browsertest.cc",
        "patchSetId": 4
      },
      "lineNbr": 2193,
      "author": {
        "id": 1002541
      },
      "writtenOn": "2017-10-10T14:00:59Z",
      "side": 1,
      "message": "If you don\u0027t want this line of code, please delete it completely before landing the CL in the codebase.",
      "range": {
        "startLine": 2193,
        "startChar": 2,
        "endLine": 2193,
        "endChar": 73
      },
      "revId": "f4e99f7d38930602829888bf2b0f0f9bc733bc8f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "48a7b624_5fc8c8e4",
        "filename": "chrome/browser/password_manager/password_manager_browsertest.cc",
        "patchSetId": 4
      },
      "lineNbr": 2193,
      "author": {
        "id": 1242012
      },
      "writtenOn": "2017-10-13T12:38:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3287dffe_1c666e8c",
      "range": {
        "startLine": 2193,
        "startChar": 2,
        "endLine": 2193,
        "endChar": 73
      },
      "revId": "f4e99f7d38930602829888bf2b0f0f9bc733bc8f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}