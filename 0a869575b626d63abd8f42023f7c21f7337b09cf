{
  "comments": [
    {
      "key": {
        "uuid": "9ae97a72_fbf77633",
        "filename": "base/win/scoped_handle_verifier.cc",
        "patchSetId": 5
      },
      "lineNbr": 5,
      "author": {
        "id": 1003325
      },
      "writtenOn": "2018-02-07T05:57:31Z",
      "side": 1,
      "message": "This include should go in the same section as \u003cstddef.h\u003e",
      "range": {
        "startLine": 5,
        "startChar": 0,
        "endLine": 5,
        "endChar": 20
      },
      "revId": "0a869575b626d63abd8f42023f7c21f7337b09cf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b94cddfd_32b0407c",
        "filename": "base/win/scoped_handle_verifier.cc",
        "patchSetId": 5
      },
      "lineNbr": 53,
      "author": {
        "id": 1003325
      },
      "writtenOn": "2018-02-07T05:57:31Z",
      "side": 1,
      "message": "Place this in the anonymous namespace above.",
      "range": {
        "startLine": 53,
        "startChar": 0,
        "endLine": 53,
        "endChar": 47
      },
      "revId": "0a869575b626d63abd8f42023f7c21f7337b09cf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bf53b1b9_52f2f153",
        "filename": "base/win/scoped_handle_verifier.h",
        "patchSetId": 5
      },
      "lineNbr": 3,
      "author": {
        "id": 1003325
      },
      "writtenOn": "2018-02-07T05:57:31Z",
      "side": 1,
      "message": "Use the header found here:\nhttps://chromium.googlesource.com/chromium/src/+/master/styleguide/c++/c++.md#file-headers",
      "range": {
        "startLine": 1,
        "startChar": 0,
        "endLine": 3,
        "endChar": 29
      },
      "revId": "0a869575b626d63abd8f42023f7c21f7337b09cf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6e292e10_b483c592",
        "filename": "base/win/scoped_handle_verifier.h",
        "patchSetId": 5
      },
      "lineNbr": 9,
      "author": {
        "id": 1003325
      },
      "writtenOn": "2018-02-07T05:57:31Z",
      "side": 1,
      "message": "Use \"base/win/windows_types.h\" here and \u003cwindows.h\u003e in the cc file.",
      "range": {
        "startLine": 8,
        "startChar": 0,
        "endLine": 9,
        "endChar": 0
      },
      "revId": "0a869575b626d63abd8f42023f7c21f7337b09cf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "383c2f42_44acaf33",
        "filename": "base/win/scoped_handle_verifier.h",
        "patchSetId": 5
      },
      "lineNbr": 19,
      "author": {
        "id": 1003325
      },
      "writtenOn": "2018-02-07T05:57:31Z",
      "side": 1,
      "message": "Let\u0027s go ahead and place this in base::win::internal.",
      "range": {
        "startLine": 19,
        "startChar": 0,
        "endLine": 19,
        "endChar": 13
      },
      "revId": "0a869575b626d63abd8f42023f7c21f7337b09cf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cfd400ce_6a86db49",
        "filename": "base/win/scoped_handle_verifier.h",
        "patchSetId": 5
      },
      "lineNbr": 20,
      "author": {
        "id": 1003325
      },
      "writtenOn": "2018-02-07T05:57:31Z",
      "side": 1,
      "message": "Nit: Linebreak between namespace win and struct along with a linebreak at the end of the namespace scope.",
      "range": {
        "startLine": 19,
        "startChar": 0,
        "endLine": 20,
        "endChar": 19
      },
      "revId": "0a869575b626d63abd8f42023f7c21f7337b09cf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1e54dcab_6ca8f501",
        "filename": "base/win/scoped_handle_verifier.h",
        "patchSetId": 5
      },
      "lineNbr": 39,
      "author": {
        "id": 1003325
      },
      "writtenOn": "2018-02-07T05:57:31Z",
      "side": 1,
      "message": "Augment the comment above with some details from your very helpful reply:\nWe still need [[clang::lto_visibility_public]] - the information this adds beyond the visibility in multiple compilation units is that even when the optimizer can see all the compilation units in the current program executable or dll, that still doesn\u0027t provide the full picture. I also verified that the test crashes without the attribute and passes when I add the attribute.",
      "range": {
        "startLine": 39,
        "startChar": 6,
        "endLine": 39,
        "endChar": 38
      },
      "revId": "0a869575b626d63abd8f42023f7c21f7337b09cf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7756c6cd_5ec78562",
        "filename": "build/config/compiler/BUILD.gn",
        "patchSetId": 5
      },
      "lineNbr": 1197,
      "author": {
        "id": 1003325
      },
      "writtenOn": "2018-02-07T05:57:31Z",
      "side": 1,
      "message": "Can we use\n#pragma warning(push, 5030)\n[code]\n#pragma warning(pop)\nfor this? This way we catch other unexpected attributes.",
      "range": {
        "startLine": 1197,
        "startChar": 6,
        "endLine": 1197,
        "endChar": 15
      },
      "revId": "0a869575b626d63abd8f42023f7c21f7337b09cf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}