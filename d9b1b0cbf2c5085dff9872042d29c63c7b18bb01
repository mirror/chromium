{
  "comments": [
    {
      "key": {
        "uuid": "11d6058a_5e5ff491",
        "filename": "chrome/android/java/src/org/chromium/chrome/browser/metrics/UmaUtils.java",
        "patchSetId": 5
      },
      "lineNbr": 32,
      "author": {
        "id": 1116043
      },
      "writtenOn": "2018-01-02T21:27:59Z",
      "side": 1,
      "message": "This comment doesn\u0027t seem valid anymore.  This is called from ChromeApplication#onCreate and not from any particular activity.  Also, we should consider moving that call from onCreate to attachBaseContext as that will happen first and is starting to get larger and larger as we add more stuff there.",
      "revId": "d9b1b0cbf2c5085dff9872042d29c63c7b18bb01",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "52573443_f96ab1aa",
        "filename": "chrome/android/java/src/org/chromium/chrome/browser/metrics/UmaUtils.java",
        "patchSetId": 5
      },
      "lineNbr": 32,
      "author": {
        "id": 1000429
      },
      "writtenOn": "2018-01-03T17:48:45Z",
      "side": 1,
      "message": "Good point! I did not know that there is non-trivial work in attachBaseContext()s. I don\u0027t see downsides of switching to it.",
      "parentUuid": "11d6058a_5e5ff491",
      "revId": "d9b1b0cbf2c5085dff9872042d29c63c7b18bb01",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cee182fe_0ff2c633",
        "filename": "chrome/browser/android/metrics/uma_utils.cc",
        "patchSetId": 5
      },
      "lineNbr": 32,
      "author": {
        "id": 1116043
      },
      "writtenOn": "2018-01-02T21:27:59Z",
      "side": 1,
      "message": "\"in theory\" OEMs could change the implementation of uptimeMillis though right?  Can we guarantee this across all versions of Android?",
      "range": {
        "startLine": 32,
        "startChar": 47,
        "endLine": 32,
        "endChar": 60
      },
      "revId": "d9b1b0cbf2c5085dff9872042d29c63c7b18bb01",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e2f97b30_32864b0c",
        "filename": "chrome/browser/android/metrics/uma_utils.cc",
        "patchSetId": 5
      },
      "lineNbr": 32,
      "author": {
        "id": 1000429
      },
      "writtenOn": "2018-01-03T17:48:45Z",
      "side": 1,
      "message": "yes, OEMs could change the impl, theoretically. There is probably little incentive for OEMs to get dirty here. IMO this is because the clock_gettime() support comes packaged with the kernel (and requires no tweaks for the HW) with drivers coming from somewhere ARM/CQ .. this functionality is essential for too many things, I would not be surprised if one cannot boot without clock_gettime (though I did not verify this .. it\u0027s like booting GNU/Linux without perl). Changing uptimeMillis() to query something different than clock_gettime(CLOCK_MONOTONIC), \nis not impossible, but also looks like shooting oneself in a foot.\n\nThe elapsedRealtime() is different - it is somewhat non-standard for the kernel and may require some extra hardware beyond the main CPUs, also we are not using it for base::TimeTicks::Now().\n\nSo we are kinda doing our best? :)\n\nOne caveat: in future / weird circumstances .. tweaking CPU frequency in creative ways _could_ possibly affect the clock, but it would still be the same clock, and strictly better than what we had before.",
      "parentUuid": "cee182fe_0ff2c633",
      "range": {
        "startLine": 32,
        "startChar": 47,
        "endLine": 32,
        "endChar": 60
      },
      "revId": "d9b1b0cbf2c5085dff9872042d29c63c7b18bb01",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1e44ab91_0826af24",
        "filename": "components/startup_metric_utils/browser/startup_metric_utils.cc",
        "patchSetId": 5
      },
      "lineNbr": 51,
      "author": {
        "id": 1115960
      },
      "writtenOn": "2018-01-03T19:49:39Z",
      "side": 1,
      "message": "Why do the ticks above need lazy instance, but these ones don\u0027t?",
      "range": {
        "startLine": 51,
        "startChar": 16,
        "endLine": 51,
        "endChar": 48
      },
      "revId": "d9b1b0cbf2c5085dff9872042d29c63c7b18bb01",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "65c129d3_bd4935c1",
        "filename": "components/startup_metric_utils/browser/startup_metric_utils.cc",
        "patchSetId": 5
      },
      "lineNbr": 604,
      "author": {
        "id": 1002410
      },
      "writtenOn": "2018-01-03T22:08:35Z",
      "side": 1,
      "message": "It looks like this histogram is being deprecated.  Could you please either remove it, or add a TODO to remove it?",
      "range": {
        "startLine": 601,
        "startChar": 0,
        "endLine": 604,
        "endChar": 74
      },
      "revId": "d9b1b0cbf2c5085dff9872042d29c63c7b18bb01",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e8a2f31c_10bda8b0",
        "filename": "components/startup_metric_utils/browser/startup_metric_utils.h",
        "patchSetId": 5
      },
      "lineNbr": 62,
      "author": {
        "id": 1002410
      },
      "writtenOn": "2018-01-03T22:08:35Z",
      "side": 1,
      "message": "nit: This looks like an accidental formatting change?",
      "range": {
        "startLine": 59,
        "startChar": 0,
        "endLine": 62,
        "endChar": 14
      },
      "revId": "d9b1b0cbf2c5085dff9872042d29c63c7b18bb01",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "94ca8dd8_8b4e00e8",
        "filename": "tools/metrics/histograms/histograms.xml",
        "patchSetId": 5
      },
      "lineNbr": 84157,
      "author": {
        "id": 1116043
      },
      "writtenOn": "2018-01-02T21:27:59Z",
      "side": 1,
      "message": "I apologize for asking a rather naive question, but what is \"Main\" here?\n\nWe use Main to refer to ACTION_MAIN, which we often conflate with launching Chrome via the App Icon (although that actually needs to check the launcher category too).\n\nThe start time here is at application init, which could happen for Chrome icon clicks, Custom Tab opens, sync message received, queries to our browser provider, updates to the bookmark widget (i.e. any of the service, provider, receiver entries in https://cs.chromium.org/chromium/src/chrome/android/java/AndroidManifest.xml).  Not all will spin up the browser process, so we could get some errant wrong numbers as components spin up the application but do not trigger the browser process init.\n\nJust trying to get a general idea of what the goal of the metric is and whether we should highlight any of the known gotchas that could produce inaccurate results.",
      "range": {
        "startLine": 84157,
        "startChar": 56,
        "endLine": 84157,
        "endChar": 60
      },
      "revId": "d9b1b0cbf2c5085dff9872042d29c63c7b18bb01",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dd704049_f8d10962",
        "filename": "tools/metrics/histograms/histograms.xml",
        "patchSetId": 5
      },
      "lineNbr": 84157,
      "author": {
        "id": 1000429
      },
      "writtenOn": "2018-01-03T17:48:45Z",
      "side": 1,
      "message": "The margin is too narrow to provide all possibilities for \"Main\" on Android. Icon clicks, CCT opens, sync messages are in. Basically, want to register the earliest time when our Java code executes as the \"main\" entry point. It is orthogonal whether to record this \"main\" timestamp in a particular UMA histogram. For this one metric, we include the sync requests, this is not ideal, but something that is easy to keep consistent with desktop. Another metric Startup.Android.Experimental.Cold.TimeToFirstContentfulPaint is intended to include only \u0027cold\u0027 starts and only cases when Chrome was foregrounded. Full roadmap of metrics is not written up comprehensibly yet - on my list.",
      "parentUuid": "94ca8dd8_8b4e00e8",
      "range": {
        "startLine": 84157,
        "startChar": 56,
        "endLine": 84157,
        "endChar": 60
      },
      "revId": "d9b1b0cbf2c5085dff9872042d29c63c7b18bb01",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1cc016ab_ef9883bc",
        "filename": "tools/metrics/histograms/histograms.xml",
        "patchSetId": 5
      },
      "lineNbr": 84159,
      "author": {
        "id": 1116043
      },
      "writtenOn": "2018-01-02T21:27:59Z",
      "side": 1,
      "message": "Should you be an owner of this metric?",
      "revId": "d9b1b0cbf2c5085dff9872042d29c63c7b18bb01",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b53b3b41_b1580079",
        "filename": "tools/metrics/histograms/histograms.xml",
        "patchSetId": 5
      },
      "lineNbr": 84159,
      "author": {
        "id": 1000429
      },
      "writtenOn": "2018-01-03T17:48:45Z",
      "side": 1,
      "message": "My change is minor compared to the rest of the mechanics that fdoray@ is an expert in. Also there is a few similar metrics that I am planning to change soon after this one shows as good. Those we should not care about much for Android, so would not add myself to owners there, and hence did not want to add myself here .. for consistency. If you insist, I. Will. Become. An. Owner. Beware.",
      "parentUuid": "1cc016ab_ef9883bc",
      "revId": "d9b1b0cbf2c5085dff9872042d29c63c7b18bb01",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}