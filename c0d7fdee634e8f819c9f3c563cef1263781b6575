{
  "comments": [
    {
      "key": {
        "uuid": "346e1274_2cd38ef3",
        "filename": "base/test/scoped_feature_list.cc",
        "patchSetId": 7
      },
      "lineNbr": 139,
      "author": {
        "id": 1002410
      },
      "writtenOn": "2017-07-19T17:45:17Z",
      "side": 1,
      "message": "nit: DCHECK_LE",
      "range": {
        "startLine": 139,
        "startChar": 2,
        "endLine": 139,
        "endChar": 8
      },
      "revId": "c0d7fdee634e8f819c9f3c563cef1263781b6575",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "48299cee_bfa15369",
        "filename": "base/test/scoped_feature_list.cc",
        "patchSetId": 7
      },
      "lineNbr": 165,
      "author": {
        "id": 1130134
      },
      "writtenOn": "2017-07-19T20:24:09Z",
      "side": 1,
      "message": "Can we avoid this assumption?  If |merged_features.enabled_feature_list| is changed to own the strings, then we might be able to move/fold the loop below into GetFeatureVector (taking an optional vector of field trials) - this would avoid the assumption, right?",
      "range": {
        "startLine": 164,
        "startChar": 36,
        "endLine": 165,
        "endChar": 79
      },
      "revId": "c0d7fdee634e8f819c9f3c563cef1263781b6575",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1df7c79e_84c770a5",
        "filename": "base/test/scoped_feature_list.cc",
        "patchSetId": 7
      },
      "lineNbr": 168,
      "author": {
        "id": 1002410
      },
      "writtenOn": "2017-07-19T17:45:17Z",
      "side": 1,
      "message": "Why are you wrapping the features with pointers?",
      "range": {
        "startLine": 168,
        "startChar": 14,
        "endLine": 168,
        "endChar": 29
      },
      "revId": "c0d7fdee634e8f819c9f3c563cef1263781b6575",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c72a9a9e_a73fac03",
        "filename": "base/test/scoped_feature_list.cc",
        "patchSetId": 7
      },
      "lineNbr": 168,
      "author": {
        "id": 1130134
      },
      "writtenOn": "2017-07-19T20:24:09Z",
      "side": 1,
      "message": "Can this be avoided if Features was changed to own the strings (i.e. changing the type of |Features::enabled_feature_list| from |std::vector\u003cStringPiece\u003e| to |std::vector\u003cstd::string\u003e|)?",
      "parentUuid": "1df7c79e_84c770a5",
      "range": {
        "startLine": 168,
        "startChar": 14,
        "endLine": 168,
        "endChar": 29
      },
      "revId": "c0d7fdee634e8f819c9f3c563cef1263781b6575",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "524f3103_6e08c6e8",
        "filename": "base/test/scoped_feature_list.cc",
        "patchSetId": 7
      },
      "lineNbr": 168,
      "author": {
        "id": 1001438
      },
      "writtenOn": "2017-07-20T09:29:44Z",
      "side": 1,
      "message": "Ilya: vector can in theory move the objects in memory (for example during resizes). In this case there is no resize, and we don\u0027t need the pointer in practice, but I felt this was relying on an implementation detail. Using a pointer is cleaner and clearer in my opinion.\n\nLukasz: yes this would definitely simplify things. I did not do it to keep my change small, and keep the benefit of StringPiece for the existing use cases, but I am ok going that way if it is better.",
      "parentUuid": "c72a9a9e_a73fac03",
      "range": {
        "startLine": 168,
        "startChar": 14,
        "endLine": 168,
        "endChar": 29
      },
      "revId": "c0d7fdee634e8f819c9f3c563cef1263781b6575",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2f3e61ae_80c54fbb",
        "filename": "base/test/scoped_feature_list.h",
        "patchSetId": 7
      },
      "lineNbr": 78,
      "author": {
        "id": 1002410
      },
      "writtenOn": "2017-07-19T17:45:17Z",
      "side": 1,
      "message": "Please document the lifetime expectations for the |trial|.  Likewise below.",
      "range": {
        "startLine": 78,
        "startChar": 69,
        "endLine": 78,
        "endChar": 0
      },
      "revId": "c0d7fdee634e8f819c9f3c563cef1263781b6575",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7449a866_d44b300b",
        "filename": "base/test/scoped_feature_list_unittest.cc",
        "patchSetId": 7
      },
      "lineNbr": 84,
      "author": {
        "id": 1130134
      },
      "writtenOn": "2017-07-19T20:24:09Z",
      "side": 1,
      "message": "Another test scenario to consider: feature name and/or trial name that contains \"\u003c\" (or other \"weird\" characters).  Should the product code either 1) DCHECK or 2) handle escaping of the feature and/or trial name (in case it includes a \"\u003c\")?  Do we want unit test coverage for this scenario?",
      "range": {
        "startLine": 84,
        "startChar": 18,
        "endLine": 84,
        "endChar": 40
      },
      "revId": "c0d7fdee634e8f819c9f3c563cef1263781b6575",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "14f72174_e0a8705f",
        "filename": "base/test/scoped_feature_list_unittest.cc",
        "patchSetId": 7
      },
      "lineNbr": 84,
      "author": {
        "id": 1002410
      },
      "writtenOn": "2017-07-20T00:02:18Z",
      "side": 1,
      "message": "A DCHECK seems appropriate.  Testing would be nice, but testing DCHECKs is a bit annoying...",
      "parentUuid": "7449a866_d44b300b",
      "range": {
        "startLine": 84,
        "startChar": 18,
        "endLine": 84,
        "endChar": 40
      },
      "revId": "c0d7fdee634e8f819c9f3c563cef1263781b6575",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "28e9301c_c2381547",
        "filename": "base/test/scoped_feature_list_unittest.cc",
        "patchSetId": 7
      },
      "lineNbr": 85,
      "author": {
        "id": 1002410
      },
      "writtenOn": "2017-07-20T00:02:18Z",
      "side": 1,
      "message": "Please also test that the field trial is active and has the correct group selected.  (Applies to all of the tests you\u0027re adding.)",
      "range": {
        "startLine": 85,
        "startChar": 53,
        "endLine": 85,
        "endChar": 0
      },
      "revId": "c0d7fdee634e8f819c9f3c563cef1263781b6575",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "236ad155_5eb7c1f1",
        "filename": "base/test/scoped_feature_list_unittest.cc",
        "patchSetId": 7
      },
      "lineNbr": 130,
      "author": {
        "id": 1130134
      },
      "writtenOn": "2017-07-19T20:24:09Z",
      "side": 1,
      "message": "Another test scenario to consider:\n1. First a feature is enabled and associated with a trial \"TestFeature2\u003cTrialName2\"\n2. Then a test says: \"enable this feature\" (without saying anything about trials)\n\nShould this result in a DCHECK?  Should TestFeature2 continue to be associated with TrialName2?  Or is it okay if TestFeature2 is not associated with any trial at this point?  I think the last answer might be fine, but I wanted to explicitly discuss (+ was wondering if a test case might be useful for this).",
      "range": {
        "startLine": 130,
        "startChar": 49,
        "endLine": 130,
        "endChar": 51
      },
      "revId": "c0d7fdee634e8f819c9f3c563cef1263781b6575",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "99d7b815_7c20b5f7",
        "filename": "base/test/scoped_feature_list_unittest.cc",
        "patchSetId": 7
      },
      "lineNbr": 130,
      "author": {
        "id": 1002410
      },
      "writtenOn": "2017-07-20T00:02:18Z",
      "side": 1,
      "message": "Good question.  I would expect that in the cases where this comes up in practice, either non-DCHECK behavior is fine, so it\u0027s reasonable to just choose whichever one is easier to implement.",
      "parentUuid": "236ad155_5eb7c1f1",
      "range": {
        "startLine": 130,
        "startChar": 49,
        "endLine": 130,
        "endChar": 51
      },
      "revId": "c0d7fdee634e8f819c9f3c563cef1263781b6575",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "10d08c1d_121d52f6",
        "filename": "base/test/scoped_feature_list_unittest.cc",
        "patchSetId": 7
      },
      "lineNbr": 130,
      "author": {
        "id": 1001438
      },
      "writtenOn": "2017-07-20T09:29:44Z",
      "side": 1,
      "message": "This is already tested line 181 below (from another entry point, but ultimately this is calling into the same code). Do we need to test that for all entry points?",
      "parentUuid": "99d7b815_7c20b5f7",
      "range": {
        "startLine": 130,
        "startChar": 49,
        "endLine": 130,
        "endChar": 51
      },
      "revId": "c0d7fdee634e8f819c9f3c563cef1263781b6575",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a15b3e71_e2e29766",
        "filename": "components/signin/core/browser/about_signin_internals.cc",
        "patchSetId": 7
      },
      "lineNbr": 539,
      "author": {
        "id": 1130134
      },
      "writtenOn": "2017-07-19T20:24:09Z",
      "side": 1,
      "message": "Would it be possible to move out the namespace change into a separate CL?",
      "range": {
        "startLine": 539,
        "startChar": 6,
        "endLine": 539,
        "endChar": 12
      },
      "revId": "c0d7fdee634e8f819c9f3c563cef1263781b6575",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6d84f58b_5236919d",
        "filename": "components/signin/core/browser/scoped_account_consistency.cc",
        "patchSetId": 7
      },
      "lineNbr": 67,
      "author": {
        "id": 1130134
      },
      "writtenOn": "2017-07-19T20:24:09Z",
      "side": 1,
      "message": "Is it possible to make this code (and management of |field_trial_list_|) reusable by other tests?  I hear from chaopeng@ that we would like to refactor content::EnableFeatureWithParam so that it doesn\u0027t go through base::CommandLine anymore.\n\nMaybe this kind of refactoring would belong in a separate CL (that the current CL can depend on?).  Not sure how to slice the code changes here.",
      "range": {
        "startLine": 64,
        "startChar": 0,
        "endLine": 67,
        "endChar": 51
      },
      "revId": "c0d7fdee634e8f819c9f3c563cef1263781b6575",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ee1c9237_9c0a9b63",
        "filename": "components/signin/core/browser/scoped_account_consistency.cc",
        "patchSetId": 7
      },
      "lineNbr": 67,
      "author": {
        "id": 1002410
      },
      "writtenOn": "2017-07-20T00:02:18Z",
      "side": 1,
      "message": "I agree.  The true motivation is not to be able to associate features with field trials, but rather to be able to associate features with params -- right?  It would be much nicer to expose that functionality directly through the ScopedFeatureList, rather than requiring clients to go through the hassle of creating field trials just to associate params.",
      "parentUuid": "6d84f58b_5236919d",
      "range": {
        "startLine": 64,
        "startChar": 0,
        "endLine": 67,
        "endChar": 51
      },
      "revId": "c0d7fdee634e8f819c9f3c563cef1263781b6575",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0242356f_0ac23dee",
        "filename": "components/signin/core/browser/scoped_account_consistency.cc",
        "patchSetId": 7
      },
      "lineNbr": 67,
      "author": {
        "id": 1130134
      },
      "writtenOn": "2017-07-20T02:18:48Z",
      "side": 1,
      "message": "BTW: In this comment I probably should also be mentioning variations::testing::VariationsParamsManager which theoretically already provides the functionality for enabling features and setting field trial params from tests.  I said theoretically, because of one problem I\u0027ve run into when trying to do this from //chrome-layer tests - see my 1st reply at https://codereview.chromium.org/2946113002/diff/200001/content/public/test/test_utils.cc#newcode213 for more details (about a DCHECK(!global_) I\u0027ve been hitting in base::FieldTrialList::FieldTrialList).",
      "parentUuid": "ee1c9237_9c0a9b63",
      "range": {
        "startLine": 64,
        "startChar": 0,
        "endLine": 67,
        "endChar": 51
      },
      "revId": "c0d7fdee634e8f819c9f3c563cef1263781b6575",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "433d40f8_6e1e692d",
        "filename": "components/signin/core/browser/scoped_account_consistency.cc",
        "patchSetId": 7
      },
      "lineNbr": 67,
      "author": {
        "id": 1001438
      },
      "writtenOn": "2017-07-20T09:29:44Z",
      "side": 1,
      "message": "This is right: my only motivation is to associate params with features.\nI find the Feature API very hard to use in practice, because it is binary in nature (enabled/disabled), but in most cases we need more. Either because we are testing multiple variations of the feature or because we want to rollout the feature gradually.\n\nI guess we could make an API that takes feature parameters instead of field trial, but I am not sure it belongs to ScopedFeatureList (because ScopedFeatureList should be tightly coupled to FeatureList, which takes FieldTrials). Maybe we could have another wrapper around ScopedFeatureList, something like ScopedFeatureParameters which internally uses a ScopedFeatureList?\n\nIf we go this way, maybe it\u0027s better to keep it for another CL.",
      "parentUuid": "0242356f_0ac23dee",
      "range": {
        "startLine": 64,
        "startChar": 0,
        "endLine": 67,
        "endChar": 51
      },
      "revId": "c0d7fdee634e8f819c9f3c563cef1263781b6575",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}