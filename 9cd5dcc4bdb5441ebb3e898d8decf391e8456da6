{
  "comments": [
    {
      "key": {
        "uuid": "8cba1a0f_a79bfb1a",
        "filename": "chrome/browser/media/router/media_sinks_observer.cc",
        "patchSetId": 2
      },
      "lineNbr": 51,
      "author": {
        "id": 1133789
      },
      "writtenOn": "2017-06-12T22:28:38Z",
      "side": 1,
      "message": "Does this have to be SOURCE_NOT_SUPPORTED or can we just return UNAVAILABLE?",
      "range": {
        "startLine": 51,
        "startChar": 54,
        "endLine": 51,
        "endChar": 74
      },
      "revId": "9cd5dcc4bdb5441ebb3e898d8decf391e8456da6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5bcfec36_3fb904b1",
        "filename": "chrome/browser/media/router/media_sinks_observer.cc",
        "patchSetId": 2
      },
      "lineNbr": 51,
      "author": {
        "id": 1000014
      },
      "writtenOn": "2017-06-13T13:54:22Z",
      "side": 1,
      "message": "I don\u0027t think it matters to RemotePlayback (SOURCE_NOT_SUPPORTED is for things like unsupported audio/video codecs, not origins), I\u0027m not sure what\u0027s the Presentation API needs are here. I assumed more specific information is better.",
      "parentUuid": "8cba1a0f_a79bfb1a",
      "range": {
        "startLine": 51,
        "startChar": 54,
        "endLine": 51,
        "endChar": 74
      },
      "revId": "9cd5dcc4bdb5441ebb3e898d8decf391e8456da6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "06ee0f75_a8cf7fb8",
        "filename": "chrome/browser/media/router/media_sinks_observer.cc",
        "patchSetId": 2
      },
      "lineNbr": 51,
      "author": {
        "id": 1133789
      },
      "writtenOn": "2017-06-13T17:54:03Z",
      "side": 1,
      "message": "With the exception of ScreenAvailabilityNotSupported which is handled separately and at the PresentationServiceDelegate level, the Presentation API only cares about whether or not availability is AVAILABLE. So I think it\u0027s fine for this scenario to be treated as UNAVAILABLE. Also, it would be simpler if we let PresentationMediaSinksObserver do the sink-list-to-availability mapping if possible, as that would mean we touch fewer files. I\u0027m not sure if the non-web facing code needs to know about the ScreenAvailability value.",
      "parentUuid": "5bcfec36_3fb904b1",
      "range": {
        "startLine": 51,
        "startChar": 54,
        "endLine": 51,
        "endChar": 74
      },
      "revId": "9cd5dcc4bdb5441ebb3e898d8decf391e8456da6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e71aa92c_02b9aa64",
        "filename": "chrome/browser/media/router/media_sinks_observer.cc",
        "patchSetId": 2
      },
      "lineNbr": 51,
      "author": {
        "id": 1000014
      },
      "writtenOn": "2017-06-13T21:00:25Z",
      "side": 1,
      "message": "ScreenAvailabilityNotSupported is handled via the enum in the follow-up CL: https://chromium-review.googlesource.com/c/530324/3; also, it\u0027s called DISABLED now. SOURCE_NOT_SUPPORTED is for a particular source not working well with devices/screens even if available. Hence I thought it\u0027s a good match for this case (the source\u0027s frame origin is not supported).\n\nI\u0027m fine with returning UNAVAILABLE for Presentation API here.\n\nIn the RemotePlayback API case, SOURCE_NOT_SUPPORTED will be sent back from the MRP so relying on just the emptiness of the array of sinks is not possible/will require a separate method plumbing perhaps (e.g. OnSourceUnsupported vs OnSinksUpdated).",
      "parentUuid": "06ee0f75_a8cf7fb8",
      "range": {
        "startLine": 51,
        "startChar": 54,
        "endLine": 51,
        "endChar": 74
      },
      "revId": "9cd5dcc4bdb5441ebb3e898d8decf391e8456da6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}