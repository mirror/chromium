{
  "comments": [
    {
      "key": {
        "uuid": "3df64a09_0fac666c",
        "filename": "components/offline_pages/core/prefetch/generate_page_bundle_task_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 113,
      "author": {
        "id": 1115887
      },
      "writtenOn": "2017-10-11T04:57:37Z",
      "side": 1,
      "message": "This line can be removed since the same is verified later in this test.",
      "revId": "05a19601071bd970ec67552c30a550783b54a0c1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3665d8de_4e0e69ca",
        "filename": "components/offline_pages/core/prefetch/generate_page_bundle_task_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 117,
      "author": {
        "id": 1115887
      },
      "writtenOn": "2017-10-11T04:57:37Z",
      "side": 1,
      "message": "This can miss a lot of interesting cases:\n- all 3 times are equal\n- the after \u003e updated_item1-\u003efreshness_time \u003d\u003d before, which would be true if the time was not really updating.\n\nI think the only way to test it is to have GeneratePageBundleTask::SetClockForTest() and set SimpleTestClock there for this test. Then simply set the time value in the test and verify that the item receives updated time. Otherwise you have to protect from time not actually changing in the duration of the test, which makes test necessarily flaky or missing possible errors...\nI do the similar thing in offline_metrics_collector_impl.[h,cc] if you want to grab it.",
      "revId": "05a19601071bd970ec67552c30a550783b54a0c1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}