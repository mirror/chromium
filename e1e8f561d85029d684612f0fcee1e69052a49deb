{
  "comments": [
    {
      "key": {
        "uuid": "e0dd3dfc_43f0045b",
        "filename": "base/BUILD.gn",
        "patchSetId": 4
      },
      "lineNbr": 2318,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-07-13T09:04:19Z",
      "side": 1,
      "message": "This is cargo culted from other BUILD.gn files. I\u0027m assuming it\u0027s still true.",
      "range": {
        "startLine": 2318,
        "startChar": 2,
        "endLine": 2318,
        "endChar": 16
      },
      "revId": "e1e8f561d85029d684612f0fcee1e69052a49deb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f852cb5a_5adbb7b2",
        "filename": "base/mojo/values_struct_traits.cc",
        "patchSetId": 4
      },
      "lineNbr": 83,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-07-13T09:04:19Z",
      "side": 1,
      "message": "I didn\u0027t bother with reserve() here, as I believe we need to default construct the element at some point no matter what.",
      "range": {
        "startLine": 79,
        "startChar": 0,
        "endLine": 83,
        "endChar": 7
      },
      "revId": "e1e8f561d85029d684612f0fcee1e69052a49deb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4cd86393_c8d34f3b",
        "filename": "base/mojo/values_struct_traits.h",
        "patchSetId": 4
      },
      "lineNbr": 48,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-07-13T09:04:19Z",
      "side": 1,
      "message": "This intentionally uses base::Value rather than base::DictionaryValue in order to make value semantics work cleanly.",
      "range": {
        "startLine": 48,
        "startChar": 19,
        "endLine": 48,
        "endChar": 37
      },
      "revId": "e1e8f561d85029d684612f0fcee1e69052a49deb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "10312f7a_2c762d01",
        "filename": "base/mojo/values_struct_traits.h",
        "patchSetId": 4
      },
      "lineNbr": 63,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-07-13T09:04:19Z",
      "side": 1,
      "message": "base::Value::Type has an enumerator for this, but the null case is already handled by IsNull/SetToNull above.\n\nI choose to define nullable_is_same_type to avoid a doubly nullable situation... however, I\u0027m planning on reverting this in the next patchset, as I could imagine an instance where code wants to distinguish the absence of a base::Value from a null base::Value.\n\nIt also saves some wire bytes, since list and dictionary values don\u0027t need an additional bool to indicate nullability for each element.",
      "range": {
        "startLine": 61,
        "startChar": 0,
        "endLine": 63,
        "endChar": 14
      },
      "revId": "e1e8f561d85029d684612f0fcee1e69052a49deb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8bd4ebe9_e953e43d",
        "filename": "base/mojo/values_struct_traits.h",
        "patchSetId": 4
      },
      "lineNbr": 63,
      "author": {
        "id": 1116026
      },
      "writtenOn": "2017-07-17T03:50:36Z",
      "side": 1,
      "message": "\u003e It also saves some wire bytes, since list and dictionary values don\u0027t need an additional bool to indicate nullability for each element.\n\nI don\u0027t think this is true. See https://cs.chromium.org/chromium/src/mojo/public/cpp/bindings/lib/bindings_internal.h?type\u003dcs\u0026sq\u003dpackage:chromium\u0026l\u003d50.",
      "parentUuid": "10312f7a_2c762d01",
      "range": {
        "startLine": 61,
        "startChar": 0,
        "endLine": 63,
        "endChar": 14
      },
      "revId": "e1e8f561d85029d684612f0fcee1e69052a49deb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "930b6383_82bdf301",
        "filename": "base/mojo/values_struct_traits.h",
        "patchSetId": 4
      },
      "lineNbr": 63,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-08-29T06:33:40Z",
      "side": 1,
      "message": "FWIW, my comment was referring to the serialization of arrays and maps. I naively assumed that making something nullable requires serializing a separate bool to represent its potential nullness. But it\u0027s entirely possible I\u0027m wrong there too.",
      "parentUuid": "8bd4ebe9_e953e43d",
      "range": {
        "startLine": 61,
        "startChar": 0,
        "endLine": 63,
        "endChar": 14
      },
      "revId": "e1e8f561d85029d684612f0fcee1e69052a49deb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3d28af19_6cc8e627",
        "filename": "base/mojo/values_struct_traits.h",
        "patchSetId": 4
      },
      "lineNbr": 63,
      "author": {
        "id": 1002808
      },
      "writtenOn": "2017-08-29T18:29:53Z",
      "side": 1,
      "message": "Just to clarify, making something nullable doesn\u0027t require serializing a separate bool - the only types which are nullable are types which are always encoded with indirection anyway, i.e. the field is represented by a pointer to elsewhere in the message, so null is encoded as an invalid pointer.",
      "parentUuid": "930b6383_82bdf301",
      "range": {
        "startLine": 61,
        "startChar": 0,
        "endLine": 63,
        "endChar": 14
      },
      "revId": "e1e8f561d85029d684612f0fcee1e69052a49deb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}