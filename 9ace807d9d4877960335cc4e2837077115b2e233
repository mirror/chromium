{
  "comments": [
    {
      "key": {
        "uuid": "6c58c194_f1cee167",
        "filename": "chrome/browser/predictors/preconnect_manager.h",
        "patchSetId": 3
      },
      "lineNbr": 48,
      "author": {
        "id": 1132034
      },
      "writtenOn": "2017-08-22T09:32:33Z",
      "side": 1,
      "message": "Just a question:\nYou didn\u0027t add\nbool is_detached() const { return !info; }\n\nAny reason not to?\nI thinkg this would make the code easier to follow later on.",
      "range": {
        "startLine": 48,
        "startChar": 21,
        "endLine": 48,
        "endChar": 28
      },
      "revId": "9ace807d9d4877960335cc4e2837077115b2e233",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a1b54527_c3c0505f",
        "filename": "chrome/browser/predictors/preconnect_manager.h",
        "patchSetId": 3
      },
      "lineNbr": 48,
      "author": {
        "id": 1194993
      },
      "writtenOn": "2017-08-22T11:08:34Z",
      "side": 1,
      "message": "I chose to keep PreresolveJob as a plain struct and access its members directly. Moreover I use job.info pointer after the destruction of the job object in some cases.\n\nI tried to make PreresolveJob more like a class and encapsulate all operations inside it but it didn\u0027t work right because PreresolveJob objects have a complicated lifetime. PreresolveJob is passed to PreresolveUrl() in a callback in TryToLaunchPreresolveJobs() and we don\u0027t know in advance whether the PreresolveUrl() will be done synchronously (then the callback isn\u0027t called) or asynchronously. So we actually make a copy of PreresolveJob and pass it into the callback. We may use shared pointer instead but this is overkill for me.",
      "parentUuid": "6c58c194_f1cee167",
      "range": {
        "startLine": 48,
        "startChar": 21,
        "endLine": 48,
        "endChar": 28
      },
      "revId": "9ace807d9d4877960335cc4e2837077115b2e233",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}