{
  "comments": [
    {
      "key": {
        "uuid": "fd9a843c_efc0a16f",
        "filename": "content/browser/gpu/gpu_data_manager_impl_private.cc",
        "patchSetId": 5
      },
      "lineNbr": 381,
      "author": {
        "id": 1160859
      },
      "writtenOn": "2018-01-26T19:42:14Z",
      "side": 1,
      "message": "Hello from the Windows peanut gallery. I wonder if you could talk a little about this unsandboxed process? I honestly did not know about this until seeing this CL. Why is this unsandboxed? How long has it been unsandboxed? Under what conditions does this need to run? What runs (e.g. parsers?) in the unsandboxed process? Is there a design doc or anything historical about this anywhere?\n\nThanks!",
      "range": {
        "startLine": 381,
        "startChar": 22,
        "endLine": 381,
        "endChar": 50
      },
      "revId": "70ef3d8a4830539ea25dd1df7fe5067f21c3bd52",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e955ad7e_d97b2f69",
        "filename": "content/browser/gpu/gpu_data_manager_impl_private.cc",
        "patchSetId": 5
      },
      "lineNbr": 381,
      "author": {
        "id": 1003154
      },
      "writtenOn": "2018-01-26T19:55:37Z",
      "side": 1,
      "message": "This has been there forever. The sole purpose of this unsandboxed process is to collect the DxDiagNode information (gpu/config/dx_diag_node.h). Opening about:gpu page on Windows will trigger that.\n\nOnce the information is collected, the process exits itself.",
      "parentUuid": "fd9a843c_efc0a16f",
      "range": {
        "startLine": 381,
        "startChar": 22,
        "endLine": 381,
        "endChar": 50
      },
      "revId": "70ef3d8a4830539ea25dd1df7fe5067f21c3bd52",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1c3b435c_55599944",
        "filename": "content/browser/gpu/gpu_process_host.cc",
        "patchSetId": 5
      },
      "lineNbr": 1211,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2018-01-26T21:08:56Z",
      "side": 1,
      "message": "Why does this one thing need to be thread-safe with atomics, while the other paths (presumably) don\u0027t?",
      "revId": "70ef3d8a4830539ea25dd1df7fe5067f21c3bd52",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}