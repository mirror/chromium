{
  "comments": [
    {
      "key": {
        "uuid": "ecfc9e82_93cb2e03",
        "filename": "third_party/WebKit/Source/platform/loader/fetch/ResourceLoader.cpp",
        "patchSetId": 9
      },
      "lineNbr": 73,
      "author": {
        "id": 1001472
      },
      "writtenOn": "2017-09-29T09:27:41Z",
      "side": 1,
      "message": "Chatted with Yutaka offline. In the new code now we pass this at loader creation time, which means when the cancel timer fires the frame might be already detached and therefore it doesn\u0027t run. In most cases it\u0027s fine as loader\u0027s prefinalizer will take care of it, while for keep-alive requests the cancellation will be delayed possibly more than desirable.\n\nOne way Yutaka suggested in the previous comment is to use WebURLLoader(Impl)\u0027s loader, which is set to the right one-- I think it makes sense (at least for the time being), maybe we could just simply do that?  To be more concrete: we can add WebURLLoader::GetTaskRunner() and can just use it here.  Wdyt?",
      "revId": "4cd61020a476a84c01ebd5a05f6c2a6aa1a148dd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f7ffa53d_04ab2f19",
        "filename": "third_party/WebKit/Source/platform/loader/fetch/ResourceLoader.cpp",
        "patchSetId": 9
      },
      "lineNbr": 73,
      "author": {
        "id": 1115930
      },
      "writtenOn": "2017-09-29T23:08:08Z",
      "side": 1,
      "message": "How does cancel_timer_ start for a keepalive request? As far as I can tell, a keepalive request never has a client or observer added, so Resource::AllClientsAndObserversRemoved() is never called, and therefore the timer never starts. Combine that with the fact that we never reuse keepalive requests, and I don\u0027t see how that case would ever get triggered.\n\nIs the ability to register ResourceClients for keepalive requests something we will want to do eventually? If so, another option would be to have ClearContext() iterate over loaders_ and non_blocking_loaders_ and have them reinitialize their timers?",
      "parentUuid": "ecfc9e82_93cb2e03",
      "revId": "4cd61020a476a84c01ebd5a05f6c2a6aa1a148dd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7c3ea797_b74d5802",
        "filename": "third_party/WebKit/Source/platform/loader/fetch/ResourceLoader.cpp",
        "patchSetId": 9
      },
      "lineNbr": 73,
      "author": {
        "id": 1114080
      },
      "writtenOn": "2017-10-02T02:09:35Z",
      "side": 1,
      "message": "Ah, you\u0027re right. But I\u0027m planning to add \"keepalive\" property in Fetch API. Also, we are planning to support AbortController which enables user-initiated abort for such requests.\n\nI still think that we need to choose the \"right\" task runner for each loader and asking each loader of it would be a reasonable way.",
      "parentUuid": "f7ffa53d_04ab2f19",
      "revId": "4cd61020a476a84c01ebd5a05f6c2a6aa1a148dd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b106fb65_606bf46c",
        "filename": "third_party/WebKit/Source/platform/loader/fetch/ResourceLoader.cpp",
        "patchSetId": 9
      },
      "lineNbr": 73,
      "author": {
        "id": 1115930
      },
      "writtenOn": "2017-10-03T18:15:04Z",
      "side": 1,
      "message": "How\u0027s this for a compromise? Currently, we switch to using a generic task queue for keepalive requests. This moves that selection to ResourceLoader. This is farther from the WebURLLoader construction, but ResourceLoader is closer the ResourceRequest that holds the keepalive state. It also means that we don\u0027t need to expose the task runner on The WebURLLoader interface, and ResourceLoader can take care of routing the correct task queue everywhere it needs to be.\n\nWDYT?",
      "parentUuid": "7c3ea797_b74d5802",
      "revId": "4cd61020a476a84c01ebd5a05f6c2a6aa1a148dd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}