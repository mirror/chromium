{
  "comments": [
    {
      "key": {
        "uuid": "e2a79f0b_f4d2a5cb",
        "filename": "content/browser/frame_host/render_frame_host_impl.cc",
        "patchSetId": 5
      },
      "lineNbr": 1526,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2018-01-03T19:48:24Z",
      "side": 1,
      "message": "As you mentioned offline, another followup question is what we can do for FrameHost mojo messages.  E.g., it\u0027d be useful to also set the active URL in BeginNavigation, but not sure if there\u0027s a generic way to do that.  Probably not a pressing problem until more navigation IPCs move over to mojo.",
      "range": {
        "startLine": 1526,
        "startChar": 0,
        "endLine": 1526,
        "endChar": 65
      },
      "revId": "dfcd8ea32a345fb7c257f7ae2f974f1bd672cf67",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "45faf63b_e64fa988",
        "filename": "content/browser/frame_host/render_frame_host_impl.cc",
        "patchSetId": 5
      },
      "lineNbr": 1526,
      "author": {
        "id": 1130134
      },
      "writtenOn": "2018-01-03T21:21:22Z",
      "side": 1,
      "message": "Daniel?  Any thoughts on being able to call ContentClient::SetActiveURL whenever the browser received a mojo message \"associated\" with a frame (not sure what exactly \"associated\" would mean in the context of mojo;  maybe \"associated\" \u003d message for the FrameHost mojo interface or a message for one of interfaces vended via RenderFrameHost?;  for legacy IPC this is easy - we can just call SetActiveURL in RenderFrameHostImpl::OnMessageReceived.",
      "parentUuid": "e2a79f0b_f4d2a5cb",
      "range": {
        "startLine": 1526,
        "startChar": 0,
        "endLine": 1526,
        "endChar": 65
      },
      "revId": "dfcd8ea32a345fb7c257f7ae2f974f1bd672cf67",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bbd0f34a_f70ac94c",
        "filename": "content/browser/frame_host/render_frame_host_impl.cc",
        "patchSetId": 5
      },
      "lineNbr": 1526,
      "author": {
        "id": 1003205
      },
      "writtenOn": "2018-01-04T07:20:18Z",
      "side": 1,
      "message": "I don\u0027t think this would be easy to do this generically in Mojo. There are some binding helpers such as BindingSet that have the notion of the dispatch context and a pre-dispatch hook, but it would only work for things that actually use BindingSet. Sorry \u003d/",
      "parentUuid": "45faf63b_e64fa988",
      "range": {
        "startLine": 1526,
        "startChar": 0,
        "endLine": 1526,
        "endChar": 65
      },
      "revId": "dfcd8ea32a345fb7c257f7ae2f974f1bd672cf67",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e21563e2_29aaa207",
        "filename": "content/browser/frame_host/render_frame_host_impl.cc",
        "patchSetId": 5
      },
      "lineNbr": 1526,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2018-01-04T07:23:59Z",
      "side": 1,
      "message": "I guess mojo::Binding itself also has a notion of a filter for messages, but again, it\u0027s a pre-dispatch hook (so we\u0027d need someway to unwind the scoper once dispatch completes). I\u0027m not sure how much overhead adding that post dispatch hook would be. We could certainly experiment with it in followups (and it might work nicely with some of the capability broker to associate a RenderFrameHost with interfaces).",
      "parentUuid": "bbd0f34a_f70ac94c",
      "range": {
        "startLine": 1526,
        "startChar": 0,
        "endLine": 1526,
        "endChar": 65
      },
      "revId": "dfcd8ea32a345fb7c257f7ae2f974f1bd672cf67",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7fecdd70_df3b0376",
        "filename": "content/browser/renderer_host/render_view_host_impl.cc",
        "patchSetId": 5
      },
      "lineNbr": 722,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2018-01-03T19:48:24Z",
      "side": 1,
      "message": "It seems that RenderWidgetHostImpl will also get here for non-OOPIF cases (https://cs.chromium.org/chromium/src/content/browser/renderer_host/render_widget_host_impl.cc?l\u003d596\u0026rcl\u003d18a58336c49686626ef4ed67b37c56aca5b1b89a), even if the RVH doesn\u0027t end up handling the message, and some of the widget messages might be latency-sensitive (e.g., input-related ones?).  It might be worth asking rsesek@ whether there might be any perf impact to setting+clearing a URL crash key on all IPCs for RFH/RVH/RWH.",
      "range": {
        "startLine": 722,
        "startChar": 0,
        "endLine": 722,
        "endChar": 42
      },
      "revId": "dfcd8ea32a345fb7c257f7ae2f974f1bd672cf67",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "da2d383c_29f1770f",
        "filename": "content/browser/renderer_host/render_view_host_impl.cc",
        "patchSetId": 5
      },
      "lineNbr": 722,
      "author": {
        "id": 1130134
      },
      "writtenOn": "2018-01-03T21:23:46Z",
      "side": 1,
      "message": "Robert?  WDYT?\n\nFWIW, we already call SetActiveURL for every IPC message received by RenderFrameImpl::OnMessageReceived (i.e. on the renderer side).  So - I think that calling it on the browser side shouldn\u0027t be much worse in terms of performance impact.",
      "parentUuid": "7fecdd70_df3b0376",
      "range": {
        "startLine": 722,
        "startChar": 0,
        "endLine": 722,
        "endChar": 42
      },
      "revId": "dfcd8ea32a345fb7c257f7ae2f974f1bd672cf67",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "36fdfea8_b5ca9f97",
        "filename": "content/browser/renderer_host/render_view_host_impl.cc",
        "patchSetId": 5
      },
      "lineNbr": 722,
      "author": {
        "id": 1144624
      },
      "writtenOn": "2018-01-03T21:47:11Z",
      "side": 1,
      "message": "There may be some perf impact for doing that on Breakpad-using platforms (Linux, Android, CrOS), but there shouldn\u0027t be on Crashpad platforms (Win, Mac). Repeatedly setting without clearing should be fairly fast due to some internal optimizations I added recently, but set-clear-set will cause Breakpad\u0027s crash key storage to do a linear scan of the entire crash key table. There\u0027s always the string-copy in either case, though.\n\nYou could always land and then wait a few days to see if the perf bots pick up anything.",
      "parentUuid": "da2d383c_29f1770f",
      "range": {
        "startLine": 722,
        "startChar": 0,
        "endLine": 722,
        "endChar": 42
      },
      "revId": "dfcd8ea32a345fb7c257f7ae2f974f1bd672cf67",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2d4876a9_022232ba",
        "filename": "content/browser/renderer_host/render_view_host_impl.cc",
        "patchSetId": 5
      },
      "lineNbr": 722,
      "author": {
        "id": 1130134
      },
      "writtenOn": "2018-01-04T17:43:13Z",
      "side": 1,
      "message": "\u003e There may be some perf impact for doing that on Breakpad-using platforms (Linux, Android, CrOS), but there shouldn\u0027t be on Crashpad platforms (Win, Mac). Repeatedly setting without clearing should be fairly fast due to some internal optimizations I added recently, but set-clear-set will cause Breakpad\u0027s crash key storage to do a linear scan of the entire crash key table. There\u0027s always the string-copy in either case, though.\n\nI think that ContentClient::SetActiveURL(emptyURL, emptyString) will always call into CrashKeyStringImpl::Set and never into CrashKeyStringImpl::Clear.\n\nI am not sure if my particular key will ever be chunked.  I don\u0027t think so (single entry, limited to 1024 characters)?\n\nLooking at CrashKeyStringImpl::Set, I don\u0027t see O(N) complexity for non-chunked entries.\n\n\n\nAlso - I wonder if better amortized performance can be achieved by doing the linear scan lazily.  For example - clearing a key could just mark the key as cleared and only later (later \u003d when storage is full?  something else maybe?) would do a linear scan (which I am guessing is needed to compact the crash values?).\n\n\u003e \n\u003e You could always land and then wait a few days to see if the perf bots pick up anything.\n\nSGTM - let\u0027s try to land this and see what happens!",
      "parentUuid": "36fdfea8_b5ca9f97",
      "range": {
        "startLine": 722,
        "startChar": 0,
        "endLine": 722,
        "endChar": 42
      },
      "revId": "dfcd8ea32a345fb7c257f7ae2f974f1bd672cf67",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "356e451d_217ac60e",
        "filename": "content/browser/renderer_host/render_view_host_impl.cc",
        "patchSetId": 5
      },
      "lineNbr": 740,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2018-01-03T19:48:24Z",
      "side": 1,
      "message": "Would it make sense to move the ScopedActiveURL until after is_swapped_out_ filtering, which would avoid unnecessarily touching the crash key, since we won\u0027t process any IPCs in that case?",
      "revId": "dfcd8ea32a345fb7c257f7ae2f974f1bd672cf67",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3346d34d_986accfd",
        "filename": "content/browser/renderer_host/render_view_host_impl.cc",
        "patchSetId": 5
      },
      "lineNbr": 740,
      "author": {
        "id": 1130134
      },
      "writtenOn": "2018-01-03T21:27:08Z",
      "side": 1,
      "message": "Good point.  Done.",
      "parentUuid": "356e451d_217ac60e",
      "revId": "dfcd8ea32a345fb7c257f7ae2f974f1bd672cf67",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "370a23c1_24419fe2",
        "filename": "content/browser/scoped_active_url.h",
        "patchSetId": 5
      },
      "lineNbr": 1,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2018-01-03T19:48:24Z",
      "side": 1,
      "message": "2018 :) (also below)",
      "revId": "dfcd8ea32a345fb7c257f7ae2f974f1bd672cf67",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4e633fb2_1c7148bc",
        "filename": "content/browser/scoped_active_url.h",
        "patchSetId": 5
      },
      "lineNbr": 1,
      "author": {
        "id": 1130134
      },
      "writtenOn": "2018-01-03T21:27:08Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "370a23c1_24419fe2",
      "revId": "dfcd8ea32a345fb7c257f7ae2f974f1bd672cf67",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "36d126d5_3ad564f0",
        "filename": "content/browser/scoped_active_url.h",
        "patchSetId": 5
      },
      "lineNbr": 23,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2018-01-03T19:48:24Z",
      "side": 1,
      "message": "nit: remove \".\" since second line continues this sentence?",
      "range": {
        "startLine": 23,
        "startChar": 69,
        "endLine": 23,
        "endChar": 70
      },
      "revId": "dfcd8ea32a345fb7c257f7ae2f974f1bd672cf67",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "413e2140_69afa0fa",
        "filename": "content/browser/scoped_active_url.h",
        "patchSetId": 5
      },
      "lineNbr": 23,
      "author": {
        "id": 1130134
      },
      "writtenOn": "2018-01-03T21:27:08Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "36d126d5_3ad564f0",
      "range": {
        "startLine": 23,
        "startChar": 69,
        "endLine": 23,
        "endChar": 70
      },
      "revId": "dfcd8ea32a345fb7c257f7ae2f974f1bd672cf67",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a75c2b16_f3f630f9",
        "filename": "content/browser/scoped_active_url.h",
        "patchSetId": 5
      },
      "lineNbr": 24,
      "author": {
        "id": 1130134
      },
      "writtenOn": "2018-01-03T17:37:32Z",
      "side": 1,
      "message": "Doc comment for ContentClient::SetActiveURL says \"[...] Use GURL() or std::string() to clear the URL/origin. [...]\"",
      "range": {
        "startLine": 24,
        "startChar": 7,
        "endLine": 24,
        "endChar": 58
      },
      "revId": "dfcd8ea32a345fb7c257f7ae2f974f1bd672cf67",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6e8356a4_ffa89794",
        "filename": "content/browser/scoped_active_url.h",
        "patchSetId": 5
      },
      "lineNbr": 29,
      "author": {
        "id": 1130134
      },
      "writtenOn": "2018-01-03T17:37:32Z",
      "side": 1,
      "message": "This is just an origin, because a renderer process might only know the origin of a top-level frame (e.g. if the top-level frame is an OOPIF).  We might want to consider using a full URL if it is available (it is always available in the browser process and sometimes available in the renderer process).  Is this something we would want to do in a follow-up?  What would be the best way to discuss that?",
      "range": {
        "startLine": 29,
        "startChar": 61,
        "endLine": 29,
        "endChar": 71
      },
      "revId": "dfcd8ea32a345fb7c257f7ae2f974f1bd672cf67",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f885e6c5_f707f6ab",
        "filename": "content/browser/scoped_active_url.h",
        "patchSetId": 5
      },
      "lineNbr": 29,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2018-01-03T19:48:24Z",
      "side": 1,
      "message": "Ack.  It seems logical to use the full top URL from the browser process, so we could look into it in a followup.  Maybe we could split ContentClient::SetActiveURL into a browser-side version that takes in the second arg as a URL, and a renderer-side version that takes a top origin, which would also clarify that the top URL isn\u0027t available from the renderer?  The former could use a new crash key, \"top-url\", instead of \"top-origin\".",
      "parentUuid": "6e8356a4_ffa89794",
      "range": {
        "startLine": 29,
        "startChar": 61,
        "endLine": 29,
        "endChar": 71
      },
      "revId": "dfcd8ea32a345fb7c257f7ae2f974f1bd672cf67",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}