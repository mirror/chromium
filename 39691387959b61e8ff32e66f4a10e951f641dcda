{
  "comments": [
    {
      "key": {
        "uuid": "512b4999_b4e158fc",
        "filename": "components/os_crypt/key_storage_linux.cc",
        "patchSetId": 4
      },
      "lineNbr": 35,
      "author": {
        "id": 1002541
      },
      "writtenOn": "2017-11-10T08:07:49Z",
      "side": 1,
      "message": "nit: Please add a blank line after this line, to match the spacing above line 56.",
      "range": {
        "startLine": 35,
        "startChar": 0,
        "endLine": 35,
        "endChar": 9
      },
      "revId": "39691387959b61e8ff32e66f4a10e951f641dcda",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "39d04526_7fb3f1e2",
        "filename": "components/os_crypt/key_storage_linux.cc",
        "patchSetId": 4
      },
      "lineNbr": 35,
      "author": {
        "id": 1168044
      },
      "writtenOn": "2017-11-10T17:09:08Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "512b4999_b4e158fc",
      "range": {
        "startLine": 35,
        "startChar": 0,
        "endLine": 35,
        "endChar": 9
      },
      "revId": "39691387959b61e8ff32e66f4a10e951f641dcda",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "178f819f_4f39371b",
        "filename": "components/os_crypt/key_storage_linux.cc",
        "patchSetId": 4
      },
      "lineNbr": 36,
      "author": {
        "id": 1002541
      },
      "writtenOn": "2017-11-10T08:07:49Z",
      "side": 1,
      "message": "nit: |reply| is none of the arguments. OTOH, |result| and |on_password_received| are and need an explanation.",
      "range": {
        "startLine": 36,
        "startChar": 35,
        "endLine": 36,
        "endChar": 40
      },
      "revId": "39691387959b61e8ff32e66f4a10e951f641dcda",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d32b6d83_c7e75662",
        "filename": "components/os_crypt/key_storage_linux.cc",
        "patchSetId": 4
      },
      "lineNbr": 36,
      "author": {
        "id": 1168044
      },
      "writtenOn": "2017-11-10T17:09:08Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "178f819f_4f39371b",
      "range": {
        "startLine": 36,
        "startChar": 35,
        "endLine": 36,
        "endChar": 40
      },
      "revId": "39691387959b61e8ff32e66f4a10e951f641dcda",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dc462b86_824e9879",
        "filename": "components/os_crypt/key_storage_linux.cc",
        "patchSetId": 4
      },
      "lineNbr": 132,
      "author": {
        "id": 1002541
      },
      "writtenOn": "2017-11-10T08:07:49Z",
      "side": 1,
      "message": "Do you know whether there are any restriction about waiting on the current thread?\nI was looking at ScopedAllowBaseSyncPrimitives in base/threading/thread_restrictions.h and at the way we use base::ThreadRestrictions::ScopedAllowWait in native_backend_kwallet_x.cc and I\u0027m surprised that this is not needed here.",
      "range": {
        "startLine": 132,
        "startChar": 8,
        "endLine": 132,
        "endChar": 21
      },
      "revId": "39691387959b61e8ff32e66f4a10e951f641dcda",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "33dc83cd_192f7c27",
        "filename": "components/os_crypt/key_storage_linux.cc",
        "patchSetId": 4
      },
      "lineNbr": 132,
      "author": {
        "id": 1168044
      },
      "writtenOn": "2017-11-10T17:09:08Z",
      "side": 1,
      "message": "What would have been the effect if it was needed?\nThis code isn\u0027t reached yet, but I copied from components/os_crypt/key_storage_keyring.cc, which has been out there for a while now.",
      "parentUuid": "dc462b86_824e9879",
      "range": {
        "startLine": 132,
        "startChar": 8,
        "endLine": 132,
        "endChar": 21
      },
      "revId": "39691387959b61e8ff32e66f4a10e951f641dcda",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "aa453a4d_76ae7f9d",
        "filename": "components/os_crypt/key_storage_linux.cc",
        "patchSetId": 4
      },
      "lineNbr": 132,
      "author": {
        "id": 1002541
      },
      "writtenOn": "2017-11-13T08:34:12Z",
      "side": 1,
      "message": "I think it would hit a DCHECK at https://chromium.googlesource.com/chromium/src/+/5226572e47a75c4a7cce7c4d9dab05a375556043/base/threading/thread_restrictions.cc#29\n\nWhat task runner is the current Wait() call in components/os_crypt/key_storage_keyring.cc run on? Looking at GetKeyImpl itself, it\u0027s not on the main thread, but I could not quickly figure out which task runner that would mean. As long as the task runner has MayBlock() traits, waiting is OK. Is it the case here?",
      "parentUuid": "33dc83cd_192f7c27",
      "range": {
        "startLine": 132,
        "startChar": 8,
        "endLine": 132,
        "endChar": 21
      },
      "revId": "39691387959b61e8ff32e66f4a10e951f641dcda",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "33dd7e0b_fb8c67dd",
        "filename": "components/os_crypt/key_storage_linux.cc",
        "patchSetId": 4
      },
      "lineNbr": 132,
      "author": {
        "id": 1168044
      },
      "writtenOn": "2017-11-13T09:48:47Z",
      "side": 1,
      "message": "I checked and we would indeed fail a DCHECK, both here and in the current implementation of KeyStorageKeyring (this must have changed since I introduced it).\n\nI will argue that we should allow blocking here. Making OSCrypt asynchronous is a longer effort, while fixing concurrency issues is more urgent. Also, the source of the blocking already exists and all we\u0027ve introduced is jumping between threads.\n\nDoes that sound good?",
      "parentUuid": "aa453a4d_76ae7f9d",
      "range": {
        "startLine": 132,
        "startChar": 8,
        "endLine": 132,
        "endChar": 21
      },
      "revId": "39691387959b61e8ff32e66f4a10e951f641dcda",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "04c69357_2b66fc17",
        "filename": "components/os_crypt/key_storage_linux.cc",
        "patchSetId": 4
      },
      "lineNbr": 132,
      "author": {
        "id": 1002541
      },
      "writtenOn": "2017-11-13T10:13:36Z",
      "side": 1,
      "message": "Thanks for checking, Christos!\n\nScopedAllowBaseSyncPrimitives has a private constructor and is highly discouraged. In short, I suggest describing our issues and proposed priorities to jam@chromium.org, who may suggest a better way or approve an exception (in form of a friend declaration in ScopedAllowBaseSyncPrimitives definition).\n\nFor this to be efficient, we\u0027ll need to do some homework, though. A design doc describing the \"proper\" solution, and the ScopedAllowBaseSyncPrimitives-based temporary fix, together with their advantages, disadvantages and costs will greatly help the discussion with jam@, but even better, will allow us to double-check the proposal beforehand (happy to help out with that). The design doc does not need the full detail, but it should make it possible for Chrome experts without knowledge of the concrete situation in os_crypt to understand the issue and proposal. I also suggest roping in thestig@, as the other os_crypt owner.\n\nI know that you are rather busy with the password export / import feature as well. My suggestion is to keep the export part as the highest priority, and throttle this and perhaps importing to avoid overloading yourself. I suggest talking the priorities over with battre@ and updating bugs related to the os_crypt concurrency issues with the outcome as you see fit.",
      "parentUuid": "33dd7e0b_fb8c67dd",
      "range": {
        "startLine": 132,
        "startChar": 8,
        "endLine": 132,
        "endChar": 21
      },
      "revId": "39691387959b61e8ff32e66f4a10e951f641dcda",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3c735977_9cfccebb",
        "filename": "components/os_crypt/key_storage_linux.h",
        "patchSetId": 4
      },
      "lineNbr": 55,
      "author": {
        "id": 1002541
      },
      "writtenOn": "2017-11-10T08:07:49Z",
      "side": 1,
      "message": "nit: If you look at existing code and methods like \"InitOnBackgroundThread\", those methods expect to be run on the referenced thread or task runner. The InitOnTaskRunner here is different: it schedules the init on the task runner and waits for it. To avoid confusion, I propose renaming it to something like WaitForInitOnTaskRunner.\n\nGetKey() does the same scheduling+waiting, so perhaps we should also rename it accordingly.",
      "range": {
        "startLine": 55,
        "startChar": 7,
        "endLine": 55,
        "endChar": 23
      },
      "revId": "39691387959b61e8ff32e66f4a10e951f641dcda",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f9694b34_20945b1b",
        "filename": "components/os_crypt/key_storage_linux.h",
        "patchSetId": 4
      },
      "lineNbr": 55,
      "author": {
        "id": 1168044
      },
      "writtenOn": "2017-11-10T17:09:08Z",
      "side": 1,
      "message": "Done WaitForInitOnTaskRunner.\nI don\u0027t think GetKey() needs adjustment. It\u0027s contract is unchanged. Also, it\u0027s a public method and I like public names that don\u0027t talk more than they need to.",
      "parentUuid": "3c735977_9cfccebb",
      "range": {
        "startLine": 55,
        "startChar": 7,
        "endLine": 55,
        "endChar": 23
      },
      "revId": "39691387959b61e8ff32e66f4a10e951f641dcda",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8c223364_bdeab183",
        "filename": "components/os_crypt/key_storage_linux.h",
        "patchSetId": 4
      },
      "lineNbr": 55,
      "author": {
        "id": 1002541
      },
      "writtenOn": "2017-11-13T08:34:12Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "f9694b34_20945b1b",
      "range": {
        "startLine": 55,
        "startChar": 7,
        "endLine": 55,
        "endChar": 23
      },
      "revId": "39691387959b61e8ff32e66f4a10e951f641dcda",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f97aaeb1_1e9c8658",
        "filename": "components/os_crypt/key_storage_linux_unittest.cc",
        "patchSetId": 4
      },
      "lineNbr": 6,
      "author": {
        "id": 1002541
      },
      "writtenOn": "2017-11-10T08:07:49Z",
      "side": 1,
      "message": "nit: Please separate this #include from the above one with a blank line.",
      "range": {
        "startLine": 6,
        "startChar": 1,
        "endLine": 6,
        "endChar": 8
      },
      "revId": "39691387959b61e8ff32e66f4a10e951f641dcda",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "28bbcee9_f2df5723",
        "filename": "components/os_crypt/key_storage_linux_unittest.cc",
        "patchSetId": 4
      },
      "lineNbr": 6,
      "author": {
        "id": 1168044
      },
      "writtenOn": "2017-11-10T17:09:08Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f97aaeb1_1e9c8658",
      "range": {
        "startLine": 6,
        "startChar": 1,
        "endLine": 6,
        "endChar": 8
      },
      "revId": "39691387959b61e8ff32e66f4a10e951f641dcda",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7f764c39_9253ad0c",
        "filename": "components/os_crypt/key_storage_linux_unittest.cc",
        "patchSetId": 4
      },
      "lineNbr": 12,
      "author": {
        "id": 1002541
      },
      "writtenOn": "2017-11-10T08:07:49Z",
      "side": 1,
      "message": "nit: Please check the sentence, I could not parse it properly. It seems that there should be a noun in place of \"wrapped\".",
      "range": {
        "startLine": 12,
        "startChar": 25,
        "endLine": 12,
        "endChar": 32
      },
      "revId": "39691387959b61e8ff32e66f4a10e951f641dcda",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "30a545e2_510f7367",
        "filename": "components/os_crypt/key_storage_linux_unittest.cc",
        "patchSetId": 4
      },
      "lineNbr": 12,
      "author": {
        "id": 1168044
      },
      "writtenOn": "2017-11-10T17:09:08Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7f764c39_9253ad0c",
      "range": {
        "startLine": 12,
        "startChar": 25,
        "endLine": 12,
        "endChar": 32
      },
      "revId": "39691387959b61e8ff32e66f4a10e951f641dcda",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}