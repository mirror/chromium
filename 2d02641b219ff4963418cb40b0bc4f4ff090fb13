{
  "comments": [
    {
      "key": {
        "uuid": "d524d326_bda417b3",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 7,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-11-17T18:27:13Z",
      "side": 1,
      "message": "Is it only for localStorage?  Since CanAccessDataForOrigin is used for cookies and passwords as well, it seems we will automatically do the citadel enforcement for those resources also, which is great.  In fact, it might be worth including a test that a cookie request from bar.com for isolated.foo.com kills the bar.com renderer.",
      "range": {
        "startLine": 7,
        "startChar": 0,
        "endLine": 7,
        "endChar": 69
      },
      "revId": "2d02641b219ff4963418cb40b0bc4f4ff090fb13",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "706e8d78_be24705f",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 7,
      "author": {
        "id": 1130134
      },
      "writtenOn": "2017-11-18T00:15:00Z",
      "side": 1,
      "message": "\u003e Is it only for localStorage?  Since CanAccessDataForOrigin is used for cookies and passwords as well, it seems we will automatically do the citadel enforcement for those resources also, which is great.\n\nGood point.  I\u0027ve edited the CL description.\n\n\u003e In fact, it might be worth including a test that a cookie request from bar.com for isolated.foo.com kills the bar.com renderer.\n\nYou\u0027re right - I\u0027ve added new tests: IsolatedOriginTest.*CookieEnforcement_NonIsolatedAccessingIsolated.  The tests are more-or-less duplicated from RenderFrameMessageFilterBrowserTest.CrossSiteCookieSecurityEnforcement except that here we are testing isolated-vs-non-isolated origins (rather than generic cross-site access under site-per-process).",
      "parentUuid": "d524d326_bda417b3",
      "range": {
        "startLine": 7,
        "startChar": 0,
        "endLine": 7,
        "endChar": 69
      },
      "revId": "2d02641b219ff4963418cb40b0bc4f4ff090fb13",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d11614f8_5fb92327",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 31,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-11-17T18:27:13Z",
      "side": 1,
      "message": "Is https://crbug.com/509125 also relevant to reference here?",
      "revId": "2d02641b219ff4963418cb40b0bc4f4ff090fb13",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "368645c1_af15c2c5",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 31,
      "author": {
        "id": 1130134
      },
      "writtenOn": "2017-11-18T00:15:00Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d11614f8_5fb92327",
      "revId": "2d02641b219ff4963418cb40b0bc4f4ff090fb13",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ea093652_c890f998",
        "filename": "content/browser/child_process_security_policy_impl.cc",
        "patchSetId": 2
      },
      "lineNbr": 1055,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-11-17T18:27:13Z",
      "side": 1,
      "message": "Maybe include a high-level comment about how this now handles both jail-style and citadel-style enforcement for isolated origins?",
      "range": {
        "startLine": 1055,
        "startChar": 0,
        "endLine": 1055,
        "endChar": 53
      },
      "revId": "2d02641b219ff4963418cb40b0bc4f4ff090fb13",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "31c1eb44_40c328e2",
        "filename": "content/browser/child_process_security_policy_impl.cc",
        "patchSetId": 2
      },
      "lineNbr": 1055,
      "author": {
        "id": 1130134
      },
      "writtenOn": "2017-11-18T00:15:00Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ea093652_c890f998",
      "range": {
        "startLine": 1055,
        "startChar": 0,
        "endLine": 1055,
        "endChar": 53
      },
      "revId": "2d02641b219ff4963418cb40b0bc4f4ff090fb13",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "61b21a7c_e7406584",
        "filename": "content/browser/child_process_security_policy_impl.cc",
        "patchSetId": 2
      },
      "lineNbr": 1057,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-11-17T18:27:13Z",
      "side": 1,
      "message": "nit: can just use IsIsolatedOrigin(url::Origin::Create(site_url) here, since is_isolated is only used here.",
      "range": {
        "startLine": 1057,
        "startChar": 20,
        "endLine": 1057,
        "endChar": 31
      },
      "revId": "2d02641b219ff4963418cb40b0bc4f4ff090fb13",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7b546202_78916d2d",
        "filename": "content/browser/child_process_security_policy_impl.cc",
        "patchSetId": 2
      },
      "lineNbr": 1057,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-11-17T18:27:13Z",
      "side": 1,
      "message": "I suppose this also works in --site-per-process for the cases that aren\u0027t locked to origin according to ShouldLockToOrigin (chrome-guest://, chrome://, hosted apps, etc).  Since those cases aren\u0027t going to be on the isolated origin list, we\u0027ll still grant them access, as before.\n\nI also think this will be compatible with SafeBrowsing isolation -- isolated origins we add there will be maintained by BrowsingInstances, and so will still be allowed here.  This is what we want, I think, as we don\u0027t care about preventing regular sites from accessing data from malicious sites; we only care about the reverse jail-type protection.\n\nIs the only remaining work here to ensure that for --isolate-extensions, web pages can\u0027t request resources belonging to extensions?  (Since extensions also aren\u0027t origin-locked.)  Might be worth adding a TODO about this somewhere.",
      "revId": "2d02641b219ff4963418cb40b0bc4f4ff090fb13",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d1f6d55a_2a1a8bd4",
        "filename": "content/browser/child_process_security_policy_impl.cc",
        "patchSetId": 2
      },
      "lineNbr": 1057,
      "author": {
        "id": 1130134
      },
      "writtenOn": "2017-11-18T00:15:00Z",
      "side": 1,
      "message": "\u003e I suppose this also works in --site-per-process for the cases that aren\u0027t locked to origin according to ShouldLockToOrigin (chrome-guest://, chrome://, hosted apps, etc).  Since those cases aren\u0027t going to be on the isolated origin list, we\u0027ll still grant them access, as before.\n\nAck.\n\u003e \n\u003e I also think this will be compatible with SafeBrowsing isolation -- isolated origins we add there will be maintained by BrowsingInstances, and so will still be allowed here.  This is what we want, I think, as we don\u0027t care about preventing regular sites from accessing data from malicious sites; we only care about the reverse jail-type protection.\n\nAck.\n\nPlease shout if you think I should take some extra actions to verify that this CL doesn\u0027t break any of the other isolation modes.  I hope that I can assume that if the tryjobs are green then the CL is safe to land (and if that assumption is wrong - great!  this will eventually show us where we were missing test coverage).\n\n\u003e Is the only remaining work here to ensure that for --isolate-extensions, web pages can\u0027t request resources belonging to extensions?  (Since extensions also aren\u0027t origin-locked.)  Might be worth adding a TODO about this somewhere.\n\nDone - added a TODO.  I worder the TODO in terms of extension isolation, but I am not sure what other things need enforcement (do CWS, default search engine, WebUI get locked origin?).  FWIW, I note that some WebUI tests end up triggering usage of localStorage.\n\nPlease shout if I should reword the TODO :-)",
      "parentUuid": "7b546202_78916d2d",
      "revId": "2d02641b219ff4963418cb40b0bc4f4ff090fb13",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "406b17df_7c968c89",
        "filename": "content/browser/child_process_security_policy_impl.cc",
        "patchSetId": 2
      },
      "lineNbr": 1057,
      "author": {
        "id": 1130134
      },
      "writtenOn": "2017-11-18T00:15:00Z",
      "side": 1,
      "message": "I didn\u0027t do it this way because of the comment above warning about deadlock / double-lock-acquisition - see lines 1036-1038.  Does it sound okay?",
      "parentUuid": "61b21a7c_e7406584",
      "range": {
        "startLine": 1057,
        "startChar": 20,
        "endLine": 1057,
        "endChar": 31
      },
      "revId": "2d02641b219ff4963418cb40b0bc4f4ff090fb13",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d0aeb706_ce9d71f1",
        "filename": "content/browser/child_process_security_policy_impl.cc",
        "patchSetId": 2
      },
      "lineNbr": 1057,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-11-20T22:31:43Z",
      "side": 1,
      "message": "\u003e \u003e Is the only remaining work here to ensure that for --isolate-extensions, web pages can\u0027t request resources belonging to extensions?  (Since extensions also aren\u0027t origin-locked.)  Might be worth adding a TODO about this somewhere.\n\u003e \n\u003e Done - added a TODO.  I worder the TODO in terms of extension isolation, but I am not sure what other things need enforcement (do CWS, default search engine, WebUI get locked origin?).  FWIW, I note that some WebUI tests end up triggering usage of localStorage.\n\u003e \n\u003e Please shout if I should reword the TODO :-)\n\nThe TODO sounds good.  I don\u0027t think any of those things get locked to origin today, so we can follow up on all of them separately.  For WebUI that may change if we require a dedicated process for it (I think Charlie started to look into it in https://chromium-review.googlesource.com/c/chromium/src/+/718076), and deprecate process sharing among same-privilege WebUI pages that we have currently.  When that happens, we may want some additional logic here to consider WebUI URLs to be \"isolated\", for the purposes of this check.\n\nCWS is not origin-locked, but I think it probably should be.  We can make it an isolated origin to achieve that, which would also protect its data here. (We\u0027d also achieve some of that if we generically disallow web URLs from accessing extensions data, since CWS is a hosted app with an extension URL, but I think we also want to guard CWS from other extensions.)  However, I think we\u0027d still need some of the special logic we currently have for protecting CWS, since it\u0027s stronger than isolated origins -- e.g., we still need to force a separate BrowsingInstance for CWS, so that other sites can\u0027t mess with it via postMessage.",
      "parentUuid": "d1f6d55a_2a1a8bd4",
      "revId": "2d02641b219ff4963418cb40b0bc4f4ff090fb13",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "47f51171_d7816a82",
        "filename": "content/browser/child_process_security_policy_impl.cc",
        "patchSetId": 2
      },
      "lineNbr": 1057,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-11-20T22:31:43Z",
      "side": 1,
      "message": "Ack.  Thanks, I forgot about this when I looked at it initially.",
      "parentUuid": "406b17df_7c968c89",
      "range": {
        "startLine": 1057,
        "startChar": 20,
        "endLine": 1057,
        "endChar": 31
      },
      "revId": "2d02641b219ff4963418cb40b0bc4f4ff090fb13",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "08e59ff0_40ea8612",
        "filename": "content/browser/child_process_security_policy_impl.cc",
        "patchSetId": 2
      },
      "lineNbr": 1066,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-11-17T18:27:13Z",
      "side": 1,
      "message": "Can we now remove this TODO from SiteInstanceImpl::LockToOriginIfNeeded?\n\n        // TODO(nick): When all sites are isolated, this operation provides\n        // strong protection. If only some sites are isolated, we need\n        // additional logic to prevent the non-isolated sites from requesting\n        // resources for isolated sites. https://crbug.com/509125\n        policy-\u003eLockToOrigin(process_-\u003eGetID(), site_);",
      "revId": "2d02641b219ff4963418cb40b0bc4f4ff090fb13",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "085365ea_56aa5130",
        "filename": "content/browser/child_process_security_policy_impl.cc",
        "patchSetId": 2
      },
      "lineNbr": 1066,
      "author": {
        "id": 1130134
      },
      "writtenOn": "2017-11-18T00:15:00Z",
      "side": 1,
      "message": "Not yet I think.",
      "parentUuid": "08e59ff0_40ea8612",
      "revId": "2d02641b219ff4963418cb40b0bc4f4ff090fb13",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}