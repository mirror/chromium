{
  "comments": [
    {
      "key": {
        "uuid": "e2a7e764_0a8d79f6",
        "filename": "content/browser/frame_host/render_frame_host_impl.h",
        "patchSetId": 15
      },
      "lineNbr": 594,
      "author": {
        "id": 1115989
      },
      "writtenOn": "2017-07-28T19:24:28Z",
      "side": 1,
      "message": "Can you add a TODO in the ResourceCoordinatorInterface for this? It\u0027s kinda messy that we have to do null checks every time we\u0027re dealing with a ResourceCoordinatorInterface; it\u0027d be much better if we *always* have a ResourceCoordinatorInterface present and handle the potential lack of GRC being enabled internally in that class, rather than at every callsite.",
      "revId": "52e36a87f318ac4a220b211c75432946569497f9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fc271ac0_07283b48",
        "filename": "content/browser/frame_host/render_frame_host_impl.h",
        "patchSetId": 15
      },
      "lineNbr": 594,
      "author": {
        "id": 1211219
      },
      "writtenOn": "2017-07-28T20:06:29Z",
      "side": 1,
      "message": "We can make sure it always return a ResourceCoordinatorInterface, an empty one when checks fail. Doing a nullptr check is annoying I believe, but we can avoid calling SetProperty/SendEvent methods on empty ResourceCoordinatorInterface.\n\nWDYT?",
      "parentUuid": "e2a7e764_0a8d79f6",
      "revId": "52e36a87f318ac4a220b211c75432946569497f9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d2d805ef_a031b482",
        "filename": "content/browser/frame_host/render_frame_host_impl.h",
        "patchSetId": 15
      },
      "lineNbr": 594,
      "author": {
        "id": 1115989
      },
      "writtenOn": "2017-07-28T20:19:04Z",
      "side": 1,
      "message": "Yep that definitely sounds preferrable to me.",
      "parentUuid": "fc271ac0_07283b48",
      "revId": "52e36a87f318ac4a220b211c75432946569497f9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b804f436_c25ee0a4",
        "filename": "services/resource_coordinator/coordination_unit/metrics_collector.cc",
        "patchSetId": 15
      },
      "lineNbr": 58,
      "author": {
        "id": 1115989
      },
      "writtenOn": "2017-07-28T19:24:28Z",
      "side": 1,
      "message": "Hmm, it seems a little off to have to introduce both upcasting functions in the base class, as well as this switch, just to be able to have strongly typed notification methods.\n\nHow about introducing a base function in CoordinationUnitImpl that the subclasses can override, to directly call the observers in a strongly typed way?\n\ni.e.\nCoordinationUnitImpl::SetProperty(...) {\n   \u003cset property\u003e\n   CallOnSetPropertyObservers();\n}\n\nCoordinationUnitImpl::CallOnSetPropertyObservers() {\n   NOTIFY_OBSERVERS(..., OnPropertyChanged)\n}\n\nWebContentsCoordinationUnitImpl::CallOnsetPropertyObservers() {\n   NOTIFY_OBSERVERS(..., OnWebContentsPropertyChanged)\n}",
      "revId": "52e36a87f318ac4a220b211c75432946569497f9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9940433f_73df7f4e",
        "filename": "services/resource_coordinator/coordination_unit/metrics_collector.cc",
        "patchSetId": 15
      },
      "lineNbr": 58,
      "author": {
        "id": 1211219
      },
      "writtenOn": "2017-07-28T20:06:29Z",
      "side": 1,
      "message": "I don\u0027t have a preference here, I think both are fine to me.\n\nBut we still need casting, we have other cases that need to do casting, like FrameCoordinationUnit returns WebContentsCoordinationUnit in GetWebContentsCoordinationUnit().",
      "parentUuid": "b804f436_c25ee0a4",
      "revId": "52e36a87f318ac4a220b211c75432946569497f9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d15a6822_8443dc43",
        "filename": "services/resource_coordinator/coordination_unit/metrics_collector.cc",
        "patchSetId": 15
      },
      "lineNbr": 58,
      "author": {
        "id": 1115989
      },
      "writtenOn": "2017-07-28T20:19:04Z",
      "side": 1,
      "message": "In general upcasting based on a \"type\" field should be a last resort:\n* Usually the same problem can be solved with polymorphism, at which point you have a cleaner separation and more extensible class hierarchy.\n* There\u0027s security implications, as that kind of approach has more potential vulnerabilities possible; like a buggy code path that (incorrectly) allows the \"type\" field to be changed will cause the the incorrect overloaded functions to be called.",
      "parentUuid": "9940433f_73df7f4e",
      "revId": "52e36a87f318ac4a220b211c75432946569497f9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ebd2afcc_450f2002",
        "filename": "services/resource_coordinator/coordination_unit/metrics_collector.cc",
        "patchSetId": 15
      },
      "lineNbr": 58,
      "author": {
        "id": 1211219
      },
      "writtenOn": "2017-07-28T22:35:21Z",
      "side": 1,
      "message": "In that case, should we just remove OnPropertyChanged? Otherwise when it\u0027s called, what do we expect in observer? It\u0027s very likely that we still need to check the type.",
      "parentUuid": "d15a6822_8443dc43",
      "revId": "52e36a87f318ac4a220b211c75432946569497f9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "64203d8d_8db43311",
        "filename": "services/resource_coordinator/coordination_unit/metrics_collector.h",
        "patchSetId": 15
      },
      "lineNbr": 45,
      "author": {
        "id": 1115989
      },
      "writtenOn": "2017-07-28T19:24:28Z",
      "side": 1,
      "message": "What\u0027s \"blurt\"?",
      "revId": "52e36a87f318ac4a220b211c75432946569497f9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ce56a02e_63bac773",
        "filename": "services/resource_coordinator/coordination_unit/metrics_collector.h",
        "patchSetId": 15
      },
      "lineNbr": 45,
      "author": {
        "id": 1211219
      },
      "writtenOn": "2017-07-28T20:06:29Z",
      "side": 1,
      "message": "Just did a double check with Google to make sure I don\u0027t misuse the word :)\nIt has the meaning of sudden sound I think, stole it from https://cs.chromium.org/chromium/src/content/browser/media/audio_stream_monitor.h?l\u003d165",
      "parentUuid": "64203d8d_8db43311",
      "revId": "52e36a87f318ac4a220b211c75432946569497f9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c0c59c7b_00b4cae3",
        "filename": "services/resource_coordinator/coordination_unit/metrics_collector.h",
        "patchSetId": 15
      },
      "lineNbr": 45,
      "author": {
        "id": 1115989
      },
      "writtenOn": "2017-07-28T20:19:04Z",
      "side": 1,
      "message": "In that case \"last_audible_time_\" will probably cause less confusion :). It\u0027s not a word in common English usage.",
      "parentUuid": "ce56a02e_63bac773",
      "revId": "52e36a87f318ac4a220b211c75432946569497f9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}