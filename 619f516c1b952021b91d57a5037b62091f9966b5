{
  "comments": [
    {
      "key": {
        "uuid": "f8337ef0_f065f367",
        "filename": "content/browser/android/synchronous_compositor_browser_filter.cc",
        "patchSetId": 14
      },
      "lineNbr": 48,
      "author": {
        "id": 1002725
      },
      "writtenOn": "2018-01-17T23:42:39Z",
      "side": 1,
      "message": "can this check happen in Host instead?",
      "revId": "619f516c1b952021b91d57a5037b62091f9966b5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3bea6aa6_2d639ad1",
        "filename": "content/browser/android/synchronous_compositor_browser_filter.cc",
        "patchSetId": 14
      },
      "lineNbr": 152,
      "author": {
        "id": 1002725
      },
      "writtenOn": "2018-01-17T23:42:39Z",
      "side": 1,
      "message": "now this is used for actually security checking, make the \"signaled all futures on shutdown\" an explicit separate state",
      "revId": "619f516c1b952021b91d57a5037b62091f9966b5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "baef6721_24359297",
        "filename": "content/browser/android/synchronous_compositor_browser_filter.cc",
        "patchSetId": 14
      },
      "lineNbr": 199,
      "author": {
        "id": 1002725
      },
      "writtenOn": "2018-01-17T23:42:39Z",
      "side": 1,
      "message": "hmm, need to set some kind of state so VSyncComplete doesn\u0027t end up waking up and then killing the renderer?",
      "revId": "619f516c1b952021b91d57a5037b62091f9966b5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b21fd1c2_5f04a9b8",
        "filename": "content/browser/android/synchronous_compositor_browser_filter.cc",
        "patchSetId": 14
      },
      "lineNbr": 240,
      "author": {
        "id": 1002725
      },
      "writtenOn": "2018-01-17T23:42:39Z",
      "side": 1,
      "message": "\u003e I\u0027m not really sure it can. Doesn\u0027t that change its contract? Say for example it called SyncStateAfterVSync and then sent a message; the state sent would be the state before the message not the state after the vsync.\n\nThis whole SyncStateAfterVSync / VSyncComplete thing happens in a single function call from WindowAndroid::OnVSync: https://cs.chromium.org/chromium/src/ui/android/window_android.cc?q\u003dwindow_android.cc\u0026sq\u003dpackage:chromium\n\nOnVSync ends up calling into DidSendBeginFrame (all compositors), which then causes Filter to register VSyncComplete to be called at the very end of WindowAndroid::OnVSync.\n\nSo there is no way to for anything else happen in between (unless there\u0027s weird re-entrance things happening?)",
      "revId": "619f516c1b952021b91d57a5037b62091f9966b5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0ee8ead2_960e49ee",
        "filename": "content/browser/android/synchronous_compositor_host.cc",
        "patchSetId": 14
      },
      "lineNbr": 137,
      "author": {
        "id": 1002725
      },
      "writtenOn": "2018-01-17T23:42:39Z",
      "side": 1,
      "message": "why do we need this and all the null checks in ControlHost now?\n\nAlso SynchronousCompositorBrowserFilter is already RefCountedThreadSafe, so I\u0027m not sure what this class gives you exactly. And even then it\u0027s kind of hard to reason about thread safety things. Much easier to just post ControlHost::SetFilter instead?",
      "revId": "619f516c1b952021b91d57a5037b62091f9966b5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ad749f7e_01a45173",
        "filename": "content/browser/android/synchronous_compositor_host.cc",
        "patchSetId": 14
      },
      "lineNbr": 282,
      "author": {
        "id": 1002725
      },
      "writtenOn": "2018-01-17T23:42:39Z",
      "side": 1,
      "message": "attached_ should imply IsReady right? I mean we\u0027ve received a message from the other side, it better be ready..?",
      "revId": "619f516c1b952021b91d57a5037b62091f9966b5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6a648883_b683c2d9",
        "filename": "content/browser/android/synchronous_compositor_host.cc",
        "patchSetId": 14
      },
      "lineNbr": 671,
      "author": {
        "id": 1002725
      },
      "writtenOn": "2018-01-17T23:42:39Z",
      "side": 1,
      "message": "can this be done in the first LayerTreeFrameSinkCreated?\n\nAnd just so I understand, we don\u0027t really need this signal, except UI could block in a sync call for the entire duration of renderer start up + compositor initialization and whatnot, right? can you write that in a comment?\n\nThis increases start up latency a bit which kind of sucks.",
      "revId": "619f516c1b952021b91d57a5037b62091f9966b5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a65ff41d_5848ffc1",
        "filename": "content/browser/android/synchronous_compositor_host.h",
        "patchSetId": 14
      },
      "lineNbr": 117,
      "author": {
        "id": 1002725
      },
      "writtenOn": "2018-01-17T23:42:39Z",
      "side": 1,
      "message": "make this more descriptive, like renderer_side_ready_",
      "range": {
        "startLine": 117,
        "startChar": 7,
        "endLine": 117,
        "endChar": 16
      },
      "revId": "619f516c1b952021b91d57a5037b62091f9966b5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "32b3fd92_0f4a9917",
        "filename": "content/renderer/input/widget_input_handler_manager.cc",
        "patchSetId": 14
      },
      "lineNbr": 54,
      "author": {
        "id": 1002725
      },
      "writtenOn": "2018-01-17T23:42:39Z",
      "side": 1,
      "message": "add thread checks for all the methods here (maybe include an explicit destructor as well)",
      "revId": "619f516c1b952021b91d57a5037b62091f9966b5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "972c2096_221825c1",
        "filename": "content/renderer/input/widget_input_handler_manager.cc",
        "patchSetId": 14
      },
      "lineNbr": 60,
      "author": {
        "id": 1002725
      },
      "writtenOn": "2018-01-17T23:42:39Z",
      "side": 1,
      "message": "we could avoid nulling this here, and then add more DCHECKs for Register/Unregister, like sink_ must be null in register, and must be equal in unregister, etc",
      "revId": "619f516c1b952021b91d57a5037b62091f9966b5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e3887e49_ba89bd00",
        "filename": "content/renderer/input/widget_input_handler_manager.cc",
        "patchSetId": 14
      },
      "lineNbr": 135,
      "author": {
        "id": 1002725
      },
      "writtenOn": "2018-01-17T23:42:39Z",
      "side": 1,
      "message": "there is a version that takes unique_ptr",
      "range": {
        "startLine": 135,
        "startChar": 52,
        "endLine": 135,
        "endChar": 59
      },
      "revId": "619f516c1b952021b91d57a5037b62091f9966b5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1740a67e_5eea1b53",
        "filename": "content/renderer/input/widget_input_handler_manager.h",
        "patchSetId": 14
      },
      "lineNbr": 153,
      "author": {
        "id": 1002725
      },
      "writtenOn": "2018-01-17T23:42:39Z",
      "side": 1,
      "message": "no need",
      "range": {
        "startLine": 153,
        "startChar": 18,
        "endLine": 153,
        "endChar": 27
      },
      "revId": "619f516c1b952021b91d57a5037b62091f9966b5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c399c031_011e519b",
        "filename": "content/renderer/render_thread_impl.cc",
        "patchSetId": 14
      },
      "lineNbr": 1199,
      "author": {
        "id": 1002725
      },
      "writtenOn": "2018-01-17T23:42:39Z",
      "side": 1,
      "message": "same comment as before, can we avoid creating and registering the whole filter for mojo, and just factor out the sender part instead",
      "revId": "619f516c1b952021b91d57a5037b62091f9966b5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}