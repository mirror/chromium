{
  "comments": [
    {
      "key": {
        "uuid": "66d5a7fb_044bc1f3",
        "filename": "third_party/WebKit/Source/modules/webdatabase/SQLStatement.cpp",
        "patchSetId": 6
      },
      "lineNbr": 116,
      "author": {
        "id": 1002507
      },
      "writtenOn": "2017-10-30T13:55:48Z",
      "side": 1,
      "message": "I added this line to follow the spec, although this is a behavioral change.\n\nI\u0027m happy to remove this if reviewers prefer not adding this in this patch.",
      "revId": "24472b37615c879baf6d335fb67b143a325c4e62",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "012157a9_8ecb8702",
        "filename": "third_party/WebKit/Source/modules/webdatabase/SQLStatement.cpp",
        "patchSetId": 6
      },
      "lineNbr": 122,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2017-10-30T14:43:30Z",
      "side": 1,
      "message": "Why do we need to use v8::TryCatch?\n\nIsn\u0027t it sufficient to just check the returned Maybe of callback-\u003ehandleEvent?",
      "revId": "24472b37615c879baf6d335fb67b143a325c4e62",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "53575b48_5ffc1efa",
        "filename": "third_party/WebKit/Source/modules/webdatabase/SQLStatement.cpp",
        "patchSetId": 6
      },
      "lineNbr": 122,
      "author": {
        "id": 1002507
      },
      "writtenOn": "2017-10-30T15:08:44Z",
      "side": 1,
      "message": "https://dev.w3.org/html5/webdatabase/#sqlstatementcallback\nWeb SQL Database spec says:\n\n  interface SQLStatementCallback {\n    void handleEvent(in SQLTransaction transaction, in SQLResultSet resultSet);\n  };\n\nand I followed it.  So now the return type is void, not v8::Maybe\u003cvoid\u003e (v8::Maybe\u003cvoid\u003e is invalid by the way).  So v8::TryCatch is necessary to detect an exception.",
      "parentUuid": "012157a9_8ecb8702",
      "revId": "24472b37615c879baf6d335fb67b143a325c4e62",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8634b9be_12a088e5",
        "filename": "third_party/WebKit/Source/modules/webdatabase/SQLTransaction.cpp",
        "patchSetId": 6
      },
      "lineNbr": 166,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2017-10-30T14:43:30Z",
      "side": 1,
      "message": "Ditto. Can we just use the returned Maybe of callback-\u003ehandleEvent()?",
      "revId": "24472b37615c879baf6d335fb67b143a325c4e62",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "74693bae_d0582e43",
        "filename": "third_party/WebKit/Source/modules/webdatabase/SQLTransaction.cpp",
        "patchSetId": 6
      },
      "lineNbr": 166,
      "author": {
        "id": 1002507
      },
      "writtenOn": "2017-10-30T15:08:44Z",
      "side": 1,
      "message": "The same reason.\n\nIntroducing the return type v8::Maybe\u003cvoid\u003e is quite hard.  I gave it a try and gave up.\n\na) v8::Maybe\u003cvoid\u003e is not defined because |void value;| is invalid.  We can define a substitute, though.\n\n    struct MyVoid {};\n    v8::Maybe\u003cMyVoid\u003e;  // OK\n\nOr if V8 agrees, we can define a specialized version for v8::Maybe\u003cvoid\u003e.\n\nb) PostTask takes a Closure (\u003d void(*)() ), so when it\u0027s used as:\n\n    PostTask(Bind(callback, ...));\n\nThe bound function\u0027s return type needs to be void.  If |callback|\u0027s return type is v8::Maybe\u003cMyVoid\u003e, then we need to convert its type defining a helper function.\n\n    void helper(callback, args...) { (void)callback-\u003ecall(args...); }\n\nWe need this kind of helper function for each type of callback because the arguments\u0027 types differ.  Since there are so many void-returning callbacks and so many use cases of PostTask \u0026 Bind, I gave up this way.  Despite of a lot of effort, the codebase does not become clean, even worse than the current one.  I abandoned this version of the patch.",
      "parentUuid": "8634b9be_12a088e5",
      "revId": "24472b37615c879baf6d335fb67b143a325c4e62",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a6315668_6952fe26",
        "filename": "third_party/WebKit/Source/modules/webdatabase/SQLTransaction.cpp",
        "patchSetId": 6
      },
      "lineNbr": 166,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2017-10-30T17:47:18Z",
      "side": 1,
      "message": "Thanks, I understand the situation.\n\nWould it be a terrible idea to change the signature of the callback method to:\n\n  bool handleEvent(..., bool\u0026 result);  // boolean case\n  bool handleEvent(...);  // void case\n\nwhere the returned bool always means whether the callback threw an exception or not?",
      "parentUuid": "74693bae_d0582e43",
      "revId": "24472b37615c879baf6d335fb67b143a325c4e62",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0f24b791_61c94023",
        "filename": "third_party/WebKit/Source/modules/webdatabase/SQLTransaction.cpp",
        "patchSetId": 6
      },
      "lineNbr": 166,
      "author": {
        "id": 1002507
      },
      "writtenOn": "2017-10-31T08:18:23Z",
      "side": 1,
      "message": "In that way, the return type is not void, so we always need a helper function when using a callback interface as: PostTask(Bind(callback, ...));  We need a bunch of rewriting, and the codebase will look more complicated.  This is the problem of b) in my previous reply.\n\nAnother problem is that the call sites can use the return value without checking if an exception is thrown or not.  The call sites must check an exception first before using the return value.  This problem is solvable with WARN_UNUSED_RESULT, however, that\u0027s why V8 team introduced v8::Maybe/MaybeLocal and Maybe better provides this restriction, I think.  So, I prefer v8::Maybe to WARN_UNUSED_RESULT + return value in the last argument.\n\n\nAs a general discussion of exception handling, C++\u0027s functions look:\n\n    return_type func_name(argument_type...);\n\nand as we\u0027re disabling C++\u0027s exception handling, there is no room for exception.  Exception and return value are somewhat similar in terms that both exception and return value are considered as a \"result\" of function execution.  So it\u0027s more natural to couple exception and return value than to couple return value and arguments, i.e.\n\n    couple_of\u003cexception, return_type\u003e func_name(argument_type...)\n\nis more natural than\n\n    exception func_name(argument_type..., return_type)\n\nAlso, coupling exception and return value can provide a good restriction that call sites cannot access a return value without checking an exception.  This coupling is the maybe type.\n\n\nConsidering these things, I think it\u0027s best to follow the way of v8::Maybe, and I think it\u0027s not a good idea to reinvent a wheel.",
      "parentUuid": "a6315668_6952fe26",
      "revId": "24472b37615c879baf6d335fb67b143a325c4e62",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "26d37bdd_046f526e",
        "filename": "third_party/WebKit/Source/modules/webdatabase/SQLTransaction.cpp",
        "patchSetId": 6
      },
      "lineNbr": 166,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2017-10-31T08:31:02Z",
      "side": 1,
      "message": "Just to clarify, my main concern is not about using v8::Maybe types but about the fact that we need different handling for void cases and boolean cases.\n\nGiven that supporting v8::Maybe\u003cvoid\u003e is hard, I was trying to think about a different way.\n\nWhat I still don\u0027t fully understand is why it\u0027s okay to ignore exceptions in so many cases. For example, if you have:\n\n  callback-\u003ehandleEvent();\n\nand it throws an exception, all subsequent V8 APIs will just fail. Why is that okay? Is it okay just because in common cases the call sites of callback-\u003ehandleEvent() immediately returns to V8 without calling any V8 API?\n\n(Maybe we can chat offline tomorrow :-)",
      "parentUuid": "0f24b791_61c94023",
      "revId": "24472b37615c879baf6d335fb67b143a325c4e62",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2e5c127d_9b50d9a7",
        "filename": "third_party/WebKit/Source/modules/webdatabase/SQLTransaction.cpp",
        "patchSetId": 6
      },
      "lineNbr": 166,
      "author": {
        "id": 1002507
      },
      "writtenOn": "2017-10-31T08:48:06Z",
      "side": 1,
      "message": "One of major use cases is: PostTask(Bind(callback, ...)).  So, the event loop runs the given |callback| and after that the even loop runs a next event task.  That\u0027s all in this case.\n\nRemember that callback interfaces / callback functions are *callback*.  There is no author script that invokes the callbacks.  So, answering your question, for most cases the call sites of callback-\u003ehandleEvent() immediately returns to **the event loop** (not V8) without calling any V8 API.  For most cases (if not all the cases), invoking an author callback function is only the purpose of the event tasks that invoke a callback, e.g. setTimeout.\n\nI agree that it\u0027s itchy that we\u0027ll have two return types of v8::Maybe\u003cT\u003e and void.  However, if we\u0027re going to change the return type to non-void, then I vote for v8::Maybe\u003cvoid\u003e or v8::Maybe\u003cMyVoid\u003e.",
      "parentUuid": "26d37bdd_046f526e",
      "revId": "24472b37615c879baf6d335fb67b143a325c4e62",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f2fcc104_b7128ff2",
        "filename": "third_party/WebKit/Source/modules/webdatabase/SQLTransaction.cpp",
        "patchSetId": 6
      },
      "lineNbr": 166,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2017-10-31T11:10:16Z",
      "side": 1,
      "message": "A final question: If the common case is just ignoring exceptions, what about just asking the call site to use v8::TryCatch always? i.e., stop using v8::Maybe\u003cbool\u003e and ask the call site to use v8::TryCatch if they want to catch the exception.\n\nAgain my concern is not about v8::Maybe but about we expose different ways to handle exceptions for the void case and the boolean case.",
      "parentUuid": "2e5c127d_9b50d9a7",
      "revId": "24472b37615c879baf6d335fb67b143a325c4e62",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "acb19e99_cff908ee",
        "filename": "third_party/WebKit/Source/modules/webdatabase/SQLTransaction.cpp",
        "patchSetId": 6
      },
      "lineNbr": 166,
      "author": {
        "id": 1002507
      },
      "writtenOn": "2017-10-31T13:59:00Z",
      "side": 1,
      "message": "First of all, I\u0027m sorry that I misunderstood the exception handling in callback interface.  As we\u0027ve been using v8::TryCatch + SetVerbose(true), we\u0027ve been killing all the exceptions inside the callbacks.  We\u0027ve been reporting if an exception occurred or not without an actual exception.\n\n\nMaybe it\u0027s possible to ask the call sites to always use v8::TryCatch, but I don\u0027t think it\u0027s a good idea because it doesn\u0027t solve the problem that call sites should check an exception before using a return value.\n\nI don\u0027t like the asymmetry between void and non-void types here, and I\u0027m happy to work on it.  However, IMHO, the asymmetry between void and non-void is a style issue (lack of style consistency), and less important than a problem that call sites can use a return value without checking an exception or a problem whether callbacks should kill an exception or not.\n\nEven when considering this style issue, I think that the trend will be v8::Maybe, we\u0027ll need to use more v8::Maybe here and there, e.g. ToV8 needs to return v8::MaybeLocal.  Considering this as a general style issue of exception handling, I\u0027d vote for v8::Maybe rather than \"throw an exception + return a return value\" so that it better matches with other cases.\n\nIf the style breakage is an important problem here, why don\u0027t we always return a v8::Maybe?  Technically it\u0027s possible (although we need to pay a tax).",
      "parentUuid": "f2fcc104_b7128ff2",
      "revId": "24472b37615c879baf6d335fb67b143a325c4e62",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}