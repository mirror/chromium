{
  "comments": [
    {
      "key": {
        "uuid": "c63878dc_11744f2d",
        "filename": "components/download/internal/in_progress_metadata_cache.cc",
        "patchSetId": 7
      },
      "lineNbr": 28,
      "author": {
        "id": 1116010
      },
      "writtenOn": "2017-11-02T16:48:48Z",
      "side": 1,
      "message": "Is this correct? You are posting a task to another thread, and use the weak_ptr from the current thread, how does that guarantee the thread safety?",
      "revId": "4a0a63209b72c095bc48e97165d0908fd77afc3f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5893b864_368cc8c3",
        "filename": "components/download/internal/in_progress_metadata_cache.cc",
        "patchSetId": 7
      },
      "lineNbr": 33,
      "author": {
        "id": 1107754
      },
      "writtenOn": "2017-11-01T21:11:12Z",
      "side": 1,
      "message": "Remove IMO.  I don\u0027t think this is Chromium style.",
      "range": {
        "startLine": 33,
        "startChar": 0,
        "endLine": 33,
        "endChar": 80
      },
      "revId": "4a0a63209b72c095bc48e97165d0908fd77afc3f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6599fb6e_1083e19c",
        "filename": "components/download/internal/in_progress_metadata_cache.cc",
        "patchSetId": 7
      },
      "lineNbr": 102,
      "author": {
        "id": 1107754
      },
      "writtenOn": "2017-11-01T21:11:12Z",
      "side": 1,
      "message": "This should probably just be an anonymous method that takes in a file path as well as the serialized entries and runs the function.  You could probably just post a task directly to the ImportantFileWriter method and/or PostTaskWithReply() to get the result back on the main thread.\n\nSame for all other helpers.",
      "range": {
        "startLine": 102,
        "startChar": 30,
        "endLine": 102,
        "endChar": 48
      },
      "revId": "4a0a63209b72c095bc48e97165d0908fd77afc3f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c5cdf66a_a779a677",
        "filename": "components/download/internal/in_progress_metadata_cache.cc",
        "patchSetId": 7
      },
      "lineNbr": 103,
      "author": {
        "id": 1107754
      },
      "writtenOn": "2017-11-01T21:11:12Z",
      "side": 1,
      "message": "DCHECK() that we\u0027re on a thread that allows IO?  Same for all helpers.",
      "range": {
        "startLine": 103,
        "startChar": 2,
        "endLine": 103,
        "endChar": 8
      },
      "revId": "4a0a63209b72c095bc48e97165d0908fd77afc3f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dd1fe0d5_a5d955b3",
        "filename": "components/download/internal/in_progress_metadata_cache.cc",
        "patchSetId": 7
      },
      "lineNbr": 106,
      "author": {
        "id": 1107754
      },
      "writtenOn": "2017-11-01T21:11:12Z",
      "side": 1,
      "message": "IIUC DCHECK() won\u0027t run on release builds, so you can\u0027t do any actual work in the DCHECK that isn\u0027t part of only the condition.\n\nThis will also race with changes to entries_ on the main thread.  You probably want to pass the serialized proto to this function.",
      "range": {
        "startLine": 106,
        "startChar": 2,
        "endLine": 106,
        "endChar": 54
      },
      "revId": "4a0a63209b72c095bc48e97165d0908fd77afc3f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7b48e605_aaa1daae",
        "filename": "components/download/internal/in_progress_metadata_cache.cc",
        "patchSetId": 7
      },
      "lineNbr": 123,
      "author": {
        "id": 1107754
      },
      "writtenOn": "2017-11-01T21:11:12Z",
      "side": 1,
      "message": "Same as above, don\u0027t do real work in a DCHECK.  Also (for all of this) we do need to correctly handle invalid/unexpected input.  The DCHECK() would just keep on going on release builds.",
      "range": {
        "startLine": 123,
        "startChar": 2,
        "endLine": 123,
        "endChar": 38
      },
      "revId": "4a0a63209b72c095bc48e97165d0908fd77afc3f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c8dad509_5c7a5b70",
        "filename": "components/download/internal/in_progress_metadata_cache.cc",
        "patchSetId": 7
      },
      "lineNbr": 127,
      "author": {
        "id": 1107754
      },
      "writtenOn": "2017-11-01T21:11:12Z",
      "side": 1,
      "message": "This check and static_cast\u003c\u003e should probably be saturated_cast\u003c\u003e",
      "range": {
        "startLine": 124,
        "startChar": 2,
        "endLine": 127,
        "endChar": 47
      },
      "revId": "4a0a63209b72c095bc48e97165d0908fd77afc3f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6115fcca_d51e478b",
        "filename": "components/download/internal/in_progress_metadata_cache.cc",
        "patchSetId": 7
      },
      "lineNbr": 128,
      "author": {
        "id": 1107754
      },
      "writtenOn": "2017-11-01T21:11:12Z",
      "side": 1,
      "message": "auto file_data \u003d std::make_unique\u003cchar[]\u003e(info.size)",
      "range": {
        "startLine": 128,
        "startChar": 2,
        "endLine": 128,
        "endChar": 57
      },
      "revId": "4a0a63209b72c095bc48e97165d0908fd77afc3f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7836d04d_6ae8a682",
        "filename": "components/download/internal/in_progress_metadata_cache.cc",
        "patchSetId": 7
      },
      "lineNbr": 130,
      "author": {
        "id": 1107754
      },
      "writtenOn": "2017-11-01T21:11:12Z",
      "side": 1,
      "message": "Would it make sense to do this using a stream instead of a large buffer?  Probably better/more memory tolerant, but might not be an issue based on the current use case.",
      "range": {
        "startLine": 129,
        "startChar": 2,
        "endLine": 130,
        "endChar": 57
      },
      "revId": "4a0a63209b72c095bc48e97165d0908fd77afc3f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "16b4f4c6_013423f4",
        "filename": "components/download/internal/in_progress_metadata_cache.h",
        "patchSetId": 7
      },
      "lineNbr": 23,
      "author": {
        "id": 1107754
      },
      "writtenOn": "2017-11-01T21:11:12Z",
      "side": 1,
      "message": "Do we necessarily want this in the long run?  Do we know why we delayed 5 seconds in the SQL database?",
      "range": {
        "startLine": 22,
        "startChar": 49,
        "endLine": 23,
        "endChar": 14
      },
      "revId": "4a0a63209b72c095bc48e97165d0908fd77afc3f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f1e65ad7_1926b987",
        "filename": "components/download/internal/in_progress_metadata_cache.h",
        "patchSetId": 7
      },
      "lineNbr": 24,
      "author": {
        "id": 1107754
      },
      "writtenOn": "2017-11-01T21:11:12Z",
      "side": 1,
      "message": "Probably need an interface for this so we can mock it out for testing other components.",
      "range": {
        "startLine": 24,
        "startChar": 6,
        "endLine": 24,
        "endChar": 29
      },
      "revId": "4a0a63209b72c095bc48e97165d0908fd77afc3f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2b22d990_aea5b5cd",
        "filename": "components/download/internal/in_progress_metadata_cache.h",
        "patchSetId": 7
      },
      "lineNbr": 48,
      "author": {
        "id": 1107754
      },
      "writtenOn": "2017-11-01T21:11:12Z",
      "side": 1,
      "message": "Seems like these are only ever called once from each of the methods above.  Can we just roll them into the method?",
      "range": {
        "startLine": 44,
        "startChar": 2,
        "endLine": 48,
        "endChar": 55
      },
      "revId": "4a0a63209b72c095bc48e97165d0908fd77afc3f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}