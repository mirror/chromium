// Copyright (c) 2018 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#ifndef CONTENT_BROWSER_WEBRTC_WEBRTC_REMOTE_EVENT_LOG_MANAGER_H_
#define CONTENT_BROWSER_WEBRTC_WEBRTC_REMOTE_EVENT_LOG_MANAGER_H_

#include <map>
#include <set>
#include <vector>

#include "base/time/time.h"
#include "content/browser/webrtc/webrtc_event_log_manager_common.h"
#include "content/browser/webrtc/webrtc_event_log_uploader.h"
#include "content/common/content_export.h"

// TODO: !!! Order .h and .cc files.

namespace content {

class BrowserContext;

class CONTENT_EXPORT WebRtcRemoteEventLogManager final
    : public WebRtcEventLogUploaderObserver,
      private LogFileWriter {
 public:
  explicit WebRtcRemoteEventLogManager(WebRtcRemoteEventLogsObserver* observer);
  ~WebRtcRemoteEventLogManager() override;

  // TODO: !!! Max retention.

  // This function should be called when a new BrowserContext is initialized.
  // Remote-bound logs associated with that BrowserContext during previous
  // Chrome sessions will then become eligible for uploading, and new
  // remote-bound logs generated by this BrowserContext's PeerConnections will
  // be saved to the BrowserContext's user-data directory, persisting across
  // sessions.
  void OnBrowserContextInitialized(const BrowserContext* browser_context);

  // Called to inform |this| of peer connections being added/removed.
  // This information is used to:
  // 1. Make decisions about when to upload previously finished logs.
  // 2. When a peer connection is removed, if it was being logged, its log
  //    changes from ACTIVE to PENDING.
  // The return value of both methods indicates only the consistency of the
  // information with previously received information (e.g. can't remove a
  // peer connection that was never added, etc.).
  bool PeerConnectionAdded(int render_process_id, int lid);
  bool PeerConnectionRemoved(int render_process_id,
                             int lid,
                             const BrowserContext* browser_context);

  // Attempt to start logging the WebRTC events of an active peer connection.
  // Logging is subject to several restrictions:
  // 1. May not log more than kMaxNumberActiveRemoteWebRtcEventLogFiles logs
  //    at the same time.
  // 2. Each browser context may have only kMaxPendingLogFilesPerBrowserContext
  //    pending logs. Since active logs later become pending logs, it is also
  //    forbidden to start a remote-bound log that would, once completed, become
  //    a pending log that would exceed that limit.
  // 3. The maximum file size must be sensible.
  // The return value is true if all of the restrictions were observed, and if
  // a file was successfully created for this log.
  bool StartRemoteLogging(int render_process_id,
                          int lid,
                          const BrowserContext* browser_context,
                          size_t max_file_size_bytes);

  // If an active remote-bound log exists for the given peer connection, this
  // will append |output| to that log. If writing |output| to the log would
  // exceed its maximum allowed size, |output| is first truncated.
  // If the log file's capacity is exhausted as a result of this function call,
  // or if a write error occurs, the file is closed, and the remote-bound log
  // changes from ACTIVE to PENDING.
  // True is returned if and only if |output| was written in its entirety to
  // an active log.
  bool EventLogWrite(int render_process_id, int lid, const std::string& output);

  // WebRtcEventLogUploaderObserver implementation.
  void OnWebRtcEventLogUploadComplete(bool upload_successful) override;

  void SetWebRtcEventLogUploaderFactoryForTesting(
      std::unique_ptr<WebRtcEventLogUploaderFactory> uploader_factory);

 protected:
  friend class WebRtcEventLogManagerTest;

  static base::FilePath GetLogsDirectoryPath(
      const BrowserContext* browser_context);

 private:
  using PeerConnectionKey = WebRtcEventLogPeerConnectionKey;

  struct PendingLog {
    PendingLog(const BrowserContext* browser_context,
               const base::FilePath& path,
               base::Time last_modified)
        : browser_context(browser_context),
          path(path),
          last_modified(last_modified) {}

    bool operator<(const PendingLog& other) const {
      return last_modified < other.last_modified;
    }

    const BrowserContext* const browser_context;  // This file's owner.
    const base::FilePath path;
    // |last_modified| recorded at BrowserContext initialization. Chrome will
    // not modify it afterwards, and neither should the user.
    const base::Time last_modified;
  };

  // Attempts to create the directory where we'll write the logs, if it does
  // not already exist. Returns true if the directory exists (either it already
  // existed, or it was successfully created);
  bool MaybeCreateLogsDirectory(const BrowserContext* browser_context);

  // TODO: !!! 1. Comment. 2. Mention how this prunes old logs.
  void AddPendingLogs(const BrowserContext* browser_context);

  bool StartWritingLog(int render_process_id,
                       int lid,
                       const BrowserContext* browser_context,
                       size_t max_file_size_bytes);

  void MaybeStopRemoteLogging(int render_process_id,
                              int lid,
                              const BrowserContext* browser_context);

  // TODO: !!! Location
  LogFilesMap::iterator CloseLogFile(LogFilesMap::iterator it) override;

  void OnWebRtcEventLogUploadCompleteInternal();

  // If no upload is in progress, and if uploading is currently permissible,
  // start a new upload.
  // TODO: !!! Actually check for permissibility.
  void MaybeStartUploading();

  // Get rid of pending logs whose age exceeds our retention policy.
  // TODO: !!! Consider calling this from MaybeStartUploading().
  void PrunePendingLogs();

  // The file extension to be associated with remote-bound logs while they are
  // kept on local disk.
  const base::FilePath::StringType log_extension_;

  // TODO: !!! Comment.
  WebRtcRemoteEventLogsObserver* const observer_;

  // Currently active peer connections. PeerConnections which have been closed
  // are not considered active, regardless of whether they have been torn down.
  std::set<PeerConnectionKey> active_peer_connections_;

  // Remote-bound logs which we're currently in the process of writing to disk.
  std::map<PeerConnectionKey, LogFile> active_logs_;

  // Remote-bound logs which have been written to disk before (either during
  // this Chrome session or during an earlier one), and which are no waiting to
  // be uploaded.
  std::set<PendingLog> pending_logs_;

  // TODO: !!! Only upload when no active peer connections.
  // TODO: !!! Create unit tests to show that we only log when no active peer
  // connections exist.

  // Null if no ongoing upload, or an uploader which owns a file, and is
  // currently busy uploading it to a remote server.
  // TODO(eladalon): Add support for pausing/resuming an upload.
  // https://crbug.com/775415
  std::unique_ptr<WebRtcEventLogUploader> uploader_;

  // Producer of uploader objects. (In unit tests, this would create
  // null-implementation uploaders, or uploaders whose behavior is controlled
  // by the unit test.)
  std::unique_ptr<const WebRtcEventLogUploaderFactory> uploader_factory_;

  // Active logs are subject to a global limit (no more than X active logs,
  // regardless of which context they belong to). This makes sense, because
  // performance is the limiting factor. However, pending logs are subject
  // to a per-browser-context limit, because a user that chooses to run multiple
  // profiles is resigning himself to increased disk utilization. We only keep
  // track of active_logs_counts_ - the per-browser-context active log count -
  // because active logs become pending logs once completed.
  std::map<const BrowserContext*, size_t> active_logs_counts_;
  std::map<const BrowserContext*, size_t> pending_logs_counts_;

  DISALLOW_COPY_AND_ASSIGN(WebRtcRemoteEventLogManager);
};

}  // namespace content

#endif  // CONTENT_BROWSER_WEBRTC_WEBRTC_REMOTE_EVENT_LOG_MANAGER_H_
