// Copyright 2017 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module content.mojom;

import "mojo/common/time.mojom";
import "ui/gfx/geometry/mojo/geometry.mojom";
import "services/viz/public/interfaces/compositing/begin_frame_args.mojom";
import "services/viz/public/interfaces/compositing/compositor_frame.mojom";
import "services/viz/public/interfaces/compositing/compositor_frame_metadata.mojom";
import "services/viz/public/interfaces/compositing/returned_resource.mojom";

[Native]
struct SyncCompositorDemandDrawHwParams;

[Native]
struct SyncCompositorSetSharedMemoryParams;

[Native]
struct SyncCompositorDemandDrawSwParams;

[Native]
struct SyncCompositorCommonRendererParams;

interface SynchronousCompositor {
  // Requests the compositor to send SynchronizeStateResponse on the associated
  // SynchronousCompositorControlHost.
  SynchronizeState();

  // Computes the scroll at given time.
  ComputeScroll(mojo.common.mojom.TimeTicks time);

  // Hardware draw asynchronously, ReturnFrame will return the result on
  // the associated SynchronousCompositorControlHost.
  DemandDrawHwAsync(SyncCompositorDemandDrawHwParams draw_params);

  // Synchronously hardware draws.
  [Sync]
  DemandDrawHw(SyncCompositorDemandDrawHwParams draw_params) => (SyncCompositorCommonRendererParams result, uint32 layer_tree_frame_sink_id,
                           viz.mojom.CompositorFrame? frame);

  // Synchronously sets teh shared memory.
  [Sync]
  SetSharedMemory(SyncCompositorSetSharedMemoryParams params) => (bool success, SyncCompositorCommonRendererParams result);

  // Synchronously does a software based draw.
  [Sync]
  DemandDrawSw(SyncCompositorDemandDrawSwParams draw_params) => (SyncCompositorCommonRendererParams result,
                           viz.mojom.CompositorFrameMetadata? meta_data);

  // Zero out the shared memory.
  ZeroSharedMemory();

  // Synchronously zoom by.
  [Sync]
  ZoomBy(float delta, gfx.mojom.Point anchor) => (SyncCompositorCommonRendererParams result);

  // Adjust the memory policy.
  SetMemoryPolicy(uint32 bytes_limit);

  // Attempt to reclaim resources.
  ReclaimResources(uint32 layer_tree_frame_sink_id,
                   array<viz.mojom.ReturnedResource> resources);

  // Adjust the scroll to the given offset.
  SetScroll(gfx.mojom.ScrollOffset offset);
};

// Interface that runs on the UI thread of the browser. To be used
// for responses to most messages.
interface SynchronousCompositorHost {
  // Indicates the layer tree was created.
  LayerTreeFrameSinkCreated();

  // Notification of new compositor information.
  UpdateState(SyncCompositorCommonRendererParams params);

  // Notifies the frame sink that a BeginFrame was completed, but that no
  // CompositorFrame was produced as a result of it.
  DidNotProduceFrame(viz.mojom.BeginFrameAck ack);

  // Attached
  Attached();
};

// Interface that runs on the IO thread of the browser. To be used
// for responses to messages requires events to block the UI thread of the
// browser.
interface SynchronousCompositorControlHost {
  // Response from DrawHwAsync.
  ReturnFrame(uint32 layer_tree_frame_sink_id,
              viz.mojom.CompositorFrame? frame);

  // Response from SynchronizeState.
  SynchronizeStateResponse(SyncCompositorCommonRendererParams params);
};