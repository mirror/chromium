// Copyright 2017 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module content.mojom;

// ServiceWorkerWorkerClient represents a service worker client that is a worker
// (i.e., a shared worker or dedicated worker). We use this interface to let the
// WorkerFetchContextImpl in the worker thread know about the change of
// controlling service worker by calling SetControllerServiceWorker() from the
// ServiceWorkerProviderContext in the main thread.
//
// TODO(horo): We should implement ServiceWorkerProvider in the worker thread
// instead of using this interface to support WorkerNavigator.serviceWorker
// when we can make the worker thread totally independent from the main thread
// (ex: synchronous resource loading).
interface ServiceWorkerWorkerClient {
  // Called when the worker is controlled by a new service worker.
  SetControllerServiceWorker(int64 controller_version_id);
};

// mojom::ServiceWorkerProviderHost is a browser-side interface. The renderer
// uses this interface to request the browser to do operations involving service
// worker registrations.
interface ServiceWorkerProviderHost {
  // TODO(shimazu): implement them.
  // register() => ();
  // getRegistation() => ();
  // getRegistrations() => ();
  // getRegistrationForReady() => ();
};

// mojom::ServiceWorkerProvider is a renderer-side interface.
// The browser process uses this interface to send messages to pages or
// the service worker's context.
interface ServiceWorkerProvider {
  // TODO(shimazu): implement them.
  // associateRegistration();
  // disassociateRegistration();
  // setControllerServiceWorker();
  // messageToDocument();
};
