// Copyright 2017 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module content.mojom;

import "mojo/common/time.mojom";
import "content/common/service_worker/service_worker_fetch_response_callback.mojom";
import "third_party/WebKit/public/platform/modules/fetch/fetch_api_request.mojom";
import "third_party/WebKit/public/platform/modules/serviceworker/service_worker_event_status.mojom";

// An interface for dispatching events from a controllee to a controller
// ServiceWorker.
// This interface is implemented by ControllerServiceWorker that lives
// in the renderer-side, and called by its controllees that also live in
// the renderer-side.
// This basically implements a small subset of ServiceWorkerEventDispatcher
// for the event that are dispatched from controllees.
interface ControllerServiceWorker {
  // The callback is called once the event finishes, which means the event
  // handler ran and all outstanding respondWith() and waitUntil() promises have
  // settled. |response_callback| is called once the promise to respondWith()
  // settles, or when the event handler ran without calling respondWith().
  // |fetch_event_id| is used internally when sending the response with a blob
  // body back to the browser process. In that case, |response_callback| won't
  // be called.
  DispatchFetchEvent(int32 fetch_event_id, blink.mojom.FetchAPIRequest request,
                     ServiceWorkerFetchResponseCallback response_callback)
      => (blink.mojom.ServiceWorkerEventStatus status,
          mojo.common.mojom.Time dispatch_event_time);

  // TODO(kinuko): Add DispatchExtendableMessageEvent() as well.
};
