// Copyright 2017 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module content.mojom;

import "url/mojo/origin.mojom";

// Types of media streams (see content/public/common/media_stream_request.h).
enum MediaStreamType {
  MEDIA_NO_SERVICE,
  MEDIA_DEVICE_AUDIO_CAPTURE,
  MEDIA_DEVICE_VIDEO_CAPTURE,
  MEDIA_TAB_AUDIO_CAPTURE,
  MEDIA_TAB_VIDEO_CAPTURE,
  MEDIA_DESKTOP_VIDEO_CAPTURE,
  MEDIA_DESKTOP_AUDIO_CAPTURE,
  NUM_MEDIA_TYPES
};

// See content/public/common/media_stream_request.h.
enum MediaStreamRequestResult {
  MEDIA_DEVICE_OK,
  MEDIA_DEVICE_PERMISSION_DENIED,
  MEDIA_DEVICE_PERMISSION_DISMISSED,
  MEDIA_DEVICE_INVALID_STATE,
  MEDIA_DEVICE_NO_HARDWARE,
  MEDIA_DEVICE_INVALID_SECURITY_ORIGIN_DEPRECATED,
  MEDIA_DEVICE_TAB_CAPTURE_FAILURE,
  MEDIA_DEVICE_SCREEN_CAPTURE_FAILURE,
  MEDIA_DEVICE_CAPTURE_FAILURE,
  MEDIA_DEVICE_CONSTRAINT_NOT_SATISFIED,
  MEDIA_DEVICE_TRACK_START_FAILURE,
  MEDIA_DEVICE_NOT_SUPPORTED,
  MEDIA_DEVICE_FAILED_DUE_TO_SHUTDOWN,
  MEDIA_DEVICE_KILL_SWITCH_ON,
  NUM_MEDIA_REQUEST_RESULTS
};

// See content/common/media/media_stream_options.h.
struct TrackControls {
  bool requested;
  string stream_source;
  string device_id;
};

// See content/common/media/media_stream_options.h.
struct StreamControls {
  TrackControls audio;
  TrackControls video;
  bool hotword_enabled;
  bool disable_local_echo;
};

interface MediaStreamDispatcher {
  // TODO(c.padhi): Migrate the rest of the browser-to-renderer messages,
  // see https://crbug.com/742682.

  // Informs the renderer that browser has failed to generate a stream.
  OnStreamGenerationFailed(int32 request_id, MediaStreamRequestResult result);
};

interface MediaStreamDispatcherHost {
  // Requests a new media stream.
  GenerateStream(int32 render_frame_id, int32 request_id,
                 StreamControls controls, url.mojom.Origin security_origin,
                 bool user_gesture);

  // Cancels the request for a new media stream.
  CancelGenerateStream(int32 render_frame_id, int32 request_id);

  // Closes a stream device that has been opened by GenerateStream.
  StopStreamDevice(int32 render_frame_id, string device_id);

  // Opens a device identified by |device_id|.
  OpenDevice(int32 render_frame_id, int32 request_id, string device_id,
             MediaStreamType type, url.mojom.Origin security_origin);

  // Cancels an open request identified by |label|.
  CloseDevice(string label);

  // Tells the browser process if the video capture is secure (i.e., all
  // connected video sinks meet the requirement of output protection.).
  // Note: the browser process only trusts the |is_secure| value in this Mojo
  // message if it's comimg from a trusted, whitelisted extension. Extensions
  // run in separate render processes. So it shouldn't be possible, for example,
  // for a user's visit to a malicious web page to compromise a render process
  // running a trusted extension to make it report falsehood in this Mojo
  // message.
  SetCapturingLinkSecured(int32 session_id, MediaStreamType type,
                          bool is_secure);

  // Tells the browser process that the stream has been started successfully.
  StreamStarted(string label);
};
