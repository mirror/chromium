// Copyright 2018 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module content.mojom;

import "device/bluetooth/public/mojom/test/fake_bluetooth.mojom";


// WORK IN PROGRESS.
// This interface is being developed to support Web Platform Tests for Web
// Bluetooth.
// https://docs.google.com/document/d/1Nhv_oVDCodd1pEH_jj9k8gF4rPGb_84VYaZ9IG8M_WY
//
// These interfaces are not intended to be used directly.
// `web-bluetooth-test.js` makes the Fake Bluetooth interface easier to work
// with.
// *   Calls are synchronous.
// *   IDs are cached.
//
// If another C++ client intends to use Fake Bluetooth a C++ wrapper similar to
// `web-bluetooth-test.js` should be created.
//
// When a Bluetooth service is created the `fake_bluetooth.mojom` and
// `bluetooth/test/fake_*` files should be removed and the client facing test
// wrapper `web-bluetooth-test.js` converted to implement the Bluetooth service
// as needed for tests.
//
// FakeBluetooth and its related interfaces allow clients to control the global
// Bluetooth State as well as simulate Bluetooth events including finding new
// devices, simulating GATT attributes and its descendants, and simulating
// success and error responses.
//
// The implementation details of FakeBluetoothChooser can be found in the Web
// Bluetooth Test Scanning design document.
// https://docs.google.com/document/d/1fwK4HqV41q1PuppL5By6NnlcDQefEu7BNeiOs1UMe04

// Indicates the types of Bluetooth chooser events.
enum ChooserEventType {
  CHOOSER_OPENED,
  SCAN_STARTED,
  DEVICE_UPDATE,
  ADAPTER_REMOVED,
  ADAPTER_DISABLED,
  ADAPTER_ENABLED,
  DISCOVERY_FAILED_TO_START,
  DISCOVERING,
  DISCOVERY_IDLE,
  ADD_DEVICE,
};

// FakeBluetoothChooser allows clients to control the global state of the
// Bluetooth chooser.
interface FakeBluetoothChooser {
  // Wait until at least |num_of_events| have been recorded before returning
  // |num_of_events| FakeBluetoothChooserEvents.
  WaitForEvents(
      uint32 num_of_events) => (array<FakeBluetoothChooserEvent> events);

  // Simulates a user selecting the given |peripheral_address| in the Bluetooth
  // chooser.
  SelectPeripheral(string peripheral_address) => ();

  // Close the Bluetooth chooser and stop scanning if the Bluetooth adapter is
  // still actively scanning.
  Cancel() => ();

  // Clear the devices in the chooser, repopulate with conncted devices, and
  // start scanning again.
  Rescan() => ();
};

// FakeBluetoothChooserEvent describes the type of chooser event that has been
// produced within FakeBluetoothChooser.
struct FakeBluetoothChooserEvent {
  ChooserEventType type;

  // Describes the origin in which the chooser is currently being displayed on.
  // This field will be used by the |CHOOSER_OPENED| event type.
  string? origin;

  string peripheral_address;

  // Other browser specific fields can be included in the future.
};
