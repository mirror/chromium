# Copyright 2014 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/config/features.gni")
import("//build/config/ui.gni")
import("//build/module_args/v8.gni")
import("//mojo/public/tools/bindings/mojom.gni")

content_tests_gypi_values =
    exec_script("//build/gypi_to_gn.py",
                [
                  rebase_path("../content_tests.gypi"),
                  "--replace=<(SHARED_INTERMEDIATE_DIR)=$root_gen_dir",
                ],
                "scope",
                [ "../content_tests.gypi" ])

# GYP version //content/content_tests.gypi:test_support_content
static_library("test_support") {
  testonly = true
  public_deps = []
  deps = [
    "//cc/blink",
    "//content/public/app:both",
    "//content/public/browser:browser_sources",
    "//content/public/common:common_sources",
    "//net:test_support",
    "//skia",
    "//storage/common",
    "//testing/gmock",
    "//testing/gtest",
    "//ui/accessibility:ax_gen",
    "//ui/base",
    "//ui/base:test_support",
    "//ui/events:dom4_keycode_converter",
    "//ui/events:events_base",
    "//ui/events:test_support",
    "//ui/events:gesture_detection",
    "//ui/gfx:test_support",
    "//ui/gl",
    "//ui/resources",
    "//url",
  ]

  if (!is_ios) {
    sources =
        rebase_path(content_tests_gypi_values.test_support_content_sources,
                    ".",
                    "//content")

    public_deps += [ "//third_party/WebKit/public:blink" ]
    deps += [
      "//content/browser/speech/proto",
      "//content/public/child:child_sources",
      "//content/gpu",
      "//content/public/renderer:renderer_sources",
      "//content/public/utility:utility_sources",
      "//content/shell:pak",
      "//cc",
      "//cc:test_support",
      "//ipc/mojo",
      "//media",
      "//ppapi:ppapi_host",
      "//ppapi:ppapi_proxy",
      "//ppapi:ppapi_shared",
      "//ppapi:ppapi_unittest_shared",
      "//storage/browser",
      "//storage/common",
      "//ui/surface",
      "//v8",
      "//webkit/common/gpu",
    ]

    if (enable_plugins) {
      deps += [ "//content/ppapi_plugin" ]
    }

    if (enable_webrtc) {
      # TODO(GYP) remove this when libjingle is converted.
      configs += [ "//third_party/libjingle:jingle_direct_dependent_configs" ]

      sources += [
        "../renderer/media/mock_media_stream_dispatcher.cc",
        "../renderer/media/mock_media_stream_dispatcher.h",
        "../renderer/media/mock_peer_connection_impl.cc",
        "../renderer/media/mock_peer_connection_impl.h",
        "../renderer/media/mock_web_rtc_peer_connection_handler_client.cc",
        "../renderer/media/mock_web_rtc_peer_connection_handler_client.h",
        "../renderer/media/webrtc/mock_peer_connection_dependency_factory.cc",
        "../renderer/media/webrtc/mock_peer_connection_dependency_factory.h",
      ]

      deps += [
        #"//third_party/libjingle:webrtc",  TODO(GYP)
        #"//third_party/libjingle:peerconnection",  TODO(GYP)
        "//third_party/webrtc/modules/video_capture",
      ]
    }
    if (!enable_plugins) {
      sources -= [ "ppapi_unittest.cc" ]
    }

    if (use_glib) {
      configs += [ "//build/config/linux:glib" ]
    }

    if (use_aura) {
      deps += [
        "//ui/aura:test_support",
        "//ui/resources:ui_test_pak",
        "//ui/wm",
      ]
    }

    if (use_aura || is_mac) {
      deps += [ "//ui/compositor" ]
    }

    if (use_ozone) {
      deps += [ "//ui/ozone" ]
    }

    if (is_win) {
      deps += [ "//third_party/iaccessible2" ]
    }

    if (!is_android && !is_ios) {
      deps += [ "//third_party/libvpx" ]
    }

    if (is_android) {
      deps += [
        "//ui/android",
        "//ui/shell_dialogs",
      ]
    }

    if (is_win) {
      deps += [ "//sandbox" ]
    }
  } else {  # is_ios
    sources = [
      "public/test/content_test_suite_base.cc",
      "public/test/mock_notification_observer.cc",
      "public/test/mock_resource_context.cc",
      "public/test/test_browser_thread.cc",
      "public/test/test_content_client_initializer.cc",
      "public/test/test_notification_tracker.cc",
      "public/test/test_utils.cc",
      "public/test/unittest_test_suite.cc",
      "test/content_test_suite.cc",
      "test/test_content_browser_client.cc",
      "test/test_content_client.cc",
    ]
  }
  if (v8_use_external_startup_data) {
    deps += [ "//gin:gin" ]
  }
}

source_set("browsertest_support") {
  testonly = true

  sources = [
    "../public/test/content_browser_test.cc",
    "../public/test/content_browser_test.h",
    "../public/test/content_browser_test_utils.cc",
    "../public/test/content_browser_test_utils.h",
    "../public/test/content_browser_test_utils_mac.mm",
    "content_test_launcher.cc",
  ]

  deps = [
    "//content/shell:content_shell_lib",
    "//skia",
    "//testing/gtest",
    "//ui/accessibility:ax_gen",
  ]

  if (is_android) {
    deps += [ "//content/public/app:both" ]
  } else {
    deps += [ "//content/public/browser" ]
  }
}

mojom("web_ui_test_mojo_bindings") {
  sources = [
    "data/web_ui_test_mojo_bindings.mojom",
  ]
}

if (!is_ios) {
  # GYP version //content/content_tests.gypi:layouttest_support_content
  static_library("layouttest_support") {
    testonly = true
    sources = rebase_path(
            content_tests_gypi_values.layouttest_support_content_sources,
            ".",
            "//content")

    deps = [
      ":test_support",
      "//cc",
      "//cc/blink",
      "//content/public/common",
      "//skia",
      "//v8",
      "//ui/accessibility:ax_gen",
    ]

    if (is_android) {
      deps += [ ":jni" ]
    }
  }

  if (is_android) {
    import("//build/config/android/rules.gni")

    generate_jni("jni") {
      sources = [
        "../public/test/android/javatests/src/org/chromium/content/browser/test/NestedSystemMessageHandler.java",
      ]
      jni_package = "content/public/test"
    }
  }
}  # !is_ios

# TODO(GYP) enable content_browsertests on Mac when it links.
if (!is_mac) {
  test("content_browsertests") {
    sources =
        rebase_path(content_tests_gypi_values.content_browsertests_sources,
                    ".",
                    "//content")

    defines = [ "HAS_OUT_OF_PROC_TEST_RUNNER" ]

    deps = [
      ":browsertest_support",
      ":web_ui_test_mojo_bindings",
      "//base/allocator",
      "//base/test:test_support",
      "//content/common:mojo_bindings",
      "//content/gpu",
      "//content/public/common",
      "//content/public/plugin",
      "//content/public/renderer",
      "//content:resources",
      "//content/shell:content_shell_lib",
      "//content/shell:pak",
      "//content/test:test_support",
      "//device/battery",
      "//device/battery:mojo_bindings",
      "//gin",
      "//gpu",
      "//ipc:test_support",
      "//media:test_support",
      "//media/audio:test_support",
      "//media/base:test_support",
      "//media:shared_memory_support",
      "//mojo/edk/system",
      "//mojo/edk/test:test_support",
      "//mojo/environment:chromium",
      "//mojo/public/cpp/bindings",
      "//mojo/public/js",
      "//net:test_support",
      "//ppapi:ppapi_host",
      "//ppapi:ppapi_ipc",
      "//ppapi:ppapi_proxy",
      "//ppapi:ppapi_shared",

      #"//ppapi:ppapi_tests",  TODO(GYP)
      #"//ppapi:ppapi_unittest_shared",  TODO(GYP)
      "//testing/gmock",
      "//testing/gtest",
      "//third_party/WebKit/public:blink",
      "//third_party/leveldatabase",
      "//third_party/mesa:osmesa",
      "//ui/accessibility",
      "//ui/accessibility:ax_gen",
      "//ui/base",
      "//ui/gfx",
      "//ui/gfx/geometry",
      "//ui/gl",
      "//ui/resources",
      "//ui/shell_dialogs",
      "//ui/snapshot",
    ]

    if (!is_chromeos) {
      sources -=
          [ "../browser/web_contents/touch_editable_impl_aura_browsertest.cc" ]
    }

    if (is_win) {
      sources += rebase_path(
              content_tests_gypi_values.content_browsertests_win_sources,
              ".",
              "//content")

      # TODO(GYP) Windows support
      #       'resource_include_dirs': [
      #         '<(SHARED_INTERMEDIATE_DIR)/webkit',
      #       ],
      #       'sources': [
      #         'shell/app/resource.h',
      #         'shell/app/shell.rc',
      #         # TODO:  It would be nice to have these pulled in
      #         # automatically from direct_dependent_settings in
      #         # their various targets (net.gyp:net_resources, etc.),
      #         # but that causes errors in other targets when
      #         # resulting .res files get referenced multiple times.
      #         '<(SHARED_INTERMEDIATE_DIR)/blink/public/resources/blink_resources.rc',
      #         '<(SHARED_INTERMEDIATE_DIR)/content/app/strings/content_strings_en-US.rc',
      #         '<(SHARED_INTERMEDIATE_DIR)/net/net_resources.rc',
      #       ],
      deps += [
        "//contemt/app/strings",
        "//net:net_resources",
        "//third_party/WebKit/public:resources",
        "//third_party/iaccessible2",
        "//third_party/isimpledom",
      ]

      # TODO(GYP) Windows
      #         'Debug_Base': {
      #           'msvs_settings': {
      #             'VCLinkerTool': {
      #               'LinkIncremental': '<(msvs_large_module_debug_link_mode)',
    }

    if (is_linux) {
      sources -=
          [ "../browser/accessibility/dump_accessibility_tree_browsertest.cc" ]
    }

    if (is_android) {
      sources += rebase_path(
              content_tests_gypi_values.content_browsertests_android_sources,
              ".",
              "//content")
      sources -=
          [ "../browser/battery_status/battery_monitor_impl_browsertest.cc" ]
      deps += [
        "//content/shell/android:content_shell_jni_headers",
        "//content/shell:content_shell_lib",
        "//testing/android:native_test_util",
      ]
    }

    if (is_mac) {
      sources += [ "../renderer/external_popup_menu_browsertest.cc" ]
      deps += [
        # Needed for Content Shell.app's Helper.
        #"//content/shell:content_shell",  #TODO(GYP) enable for mac
      ]
    }

    if (use_aura && !is_win) {
      deps += [ "//ui/events:test_support" ]
    }

    if (!use_aura && !is_mac) {
      sources -=
          [ "../browser/compositor/image_transport_factory_browsertest.cc" ]
    }

    if (!is_android && !is_ios && !is_linux) {
      # Npapi test plugin doesn't build on Android or iOS.
      #data_deps += [ 'copy_npapi_test_plugin' ]  TODO(GYP)
    }

    if (enable_webrtc) {
      sources += rebase_path(
              content_tests_gypi_values.content_browsertests_webrtc_sources,
              ".",
              "//content")
      deps += [ "//testing/perf" ]
    }

    if (enable_plugins) {
      sources += rebase_path(
              content_tests_gypi_values.content_browsertests_plugins_sources,
              ".",
              "//content")
      #deps += [ "//ppapi:ppapi_tests" ]  # TODO(GYP)
    }

    if (enable_web_speech) {
      sources += rebase_path(
              content_tests_gypi_values.content_browsertests_speech_sources,
              ".",
              "//content")
    }

    if (!is_chrome_branded) {
      sources += rebase_path(
              content_tests_gypi_values.content_browsertests_unofficial_build_sources,
              ".",
              "//content")
    }

    if (!use_aura) {
      sources -=
          [ "../browser/web_contents/web_contents_view_aura_browsertest.cc" ]
    }
  }
}
# TODO(GYP): Unit test targets
