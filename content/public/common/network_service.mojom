// Copyright 2017 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module content.mojom;

import "cookie_manager.mojom";
import "mojo/common/file_path.mojom";
import "proxy_config.mojom";
import "url_loader.mojom";
import "url_loader_factory.mojom";
import "url/mojo/url.mojom";

interface ProxyConfigLazyPoller {
  OnLazyPoll();
};

// Parameters for constructing a network context.
struct NetworkContextParams {
  // If true, the NetworkContext will attempt to automatically detect the
  // system proxy configuration, and |proxy_config| will be ignored.
  bool auto_detect_proxy_config = true;

  // If |auto_detect_proxy_config| is true, this value is ignored. Otherwise,
  // it's the initial proxy configuration, and SetProxyConfig() can be used to
  // update the proxy configuration. Leave empty to indicate the proxy
  // configuration is still being detected.
  ProxyConfig? proxy_config;

  // If |auto_detect_proxy_config|, this is called periodically during periods
  // of activity, and can be used as a signal for polling-based logic to
  // determine the proxy config.
  // TODO(mmenke): Can the consumer piggy back on other network events through
  // other channels (navigation, issuing requests, etc)?
  ProxyConfigLazyPoller? proxy_config_poller;

  // QUIC user agent.
  string quic_user_agent_id;

  // Points to the cookie file. Currently ignored. An in-memory cookie store is
  // always used instead.
  // TODO(mmenke): Respect this parameter.
  mojo.common.mojom.FilePath? cookie_path;

  // True if an HTTP cache should be used.
  bool http_cache_enabled = true;
  // Maximum size of the HTTP cache. 0 means to use the default size.
  // Ignored if the cache is disabled.
  int32 http_cache_max_size = 0;
  // Points to the HTTP cache directory. Ignored if the cache is disabled.
  // If null and the cache is enabled, an in-memory database is used.
  mojo.common.mojom.FilePath? http_cache_path;

  // Enabled protocols. Note that these apply to all fetches, including those
  // used to fetch PAC scripts.

  // True if data URLs should be supported.
  bool enable_data_url_support = false;
  // True if file URLs should be supported.
  // Must be false if built without file support.
  bool enable_file_url_support = false;
  // True if ftp URLs should be supported.
  // Must be false if built without FTP support.
  bool enable_ftp_url_support = false;

  // Enables HTTP/0.9 on ports other than 80 for HTTP and 443 for HTTPS.
  bool http_09_on_non_default_ports_enabled = false;
};

// Represents a distinct context for making network requests, with its own
// storage (e.g. cookies and cache).
interface NetworkContext {
  // |process_id| is 0 for requests initiated in the browser process, otherwise
  // it's the child process ID.
  CreateURLLoaderFactory(URLLoaderFactory& url_loader_factory,
                         uint32 process_id);

  // Handle a request to display cache data to the user. |url| is parsed to
  // display different parts of the cache.
  HandleViewCacheRequest(url.mojom.Url url,
                         URLLoaderClient client);

  // Get the CookieManager associated with this network context.
  GetCookieManager(CookieManager& cookie_manager);

  // If the |auto_detect_proxy_config| is false, sets the current proxy
  // configuration. Must not be called if |auto_detect_proxy_config| is true;
  SetProxyConfig(ProxyConfig proxy_config);
};

// Browser interface to the network service.
interface NetworkService {
  // Creates a new network context with the given parameters.
  CreateNetworkContext(NetworkContext& context,
                       NetworkContextParams params);

  // Disables QUIC for the NetworkService. Affects all existing NetworkContexts,
  // and all new ones that are created. Once called, QUIC cannot be re-enabled.
  DisableQuic();
};
