{
  "comments": [
    {
      "key": {
        "uuid": "73a5c366_f1d624c0",
        "filename": "third_party/WebKit/Source/core/html/forms/FormController.h",
        "patchSetId": 5
      },
      "lineNbr": 85,
      "author": {
        "id": 1002854
      },
      "writtenOn": "2017-11-13T20:49:53Z",
      "side": 1,
      "message": "side complaint (not your responsibility to fix): what a vague name this class has.",
      "revId": "8abe388df8851bbb5a5c3eac21212a1cb2e73294",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "22aef44b_7c8963c9",
        "filename": "third_party/WebKit/Source/core/html/forms/FormController.h",
        "patchSetId": 5
      },
      "lineNbr": 85,
      "author": {
        "id": 1175471
      },
      "writtenOn": "2017-11-14T15:51:47Z",
      "side": 1,
      "message": "Haha agreed. FormController has a getter method called FormElementsState() that returns the DocumentState object, maybe it should just be called that instead.",
      "parentUuid": "73a5c366_f1d624c0",
      "revId": "8abe388df8851bbb5a5c3eac21212a1cb2e73294",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "94cd5bbd_f9706e24",
        "filename": "third_party/WebKit/Source/core/html/forms/FormController.h",
        "patchSetId": 5
      },
      "lineNbr": 96,
      "author": {
        "id": 1002854
      },
      "writtenOn": "2017-11-13T20:49:53Z",
      "side": 1,
      "message": "Do we have a guarantee that this remains valid? Can the elements it points to for head/tail be collected, for instance? It might be desirable to extend DoublyLinkedList to allow it to explicitly trace the head/tail members so that at least the GC lifetime correctness is clear.",
      "revId": "8abe388df8851bbb5a5c3eac21212a1cb2e73294",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c9dd9fc4_946882ae",
        "filename": "third_party/WebKit/Source/core/html/forms/FormController.h",
        "patchSetId": 5
      },
      "lineNbr": 96,
      "author": {
        "id": 1175471
      },
      "writtenOn": "2017-11-14T15:51:47Z",
      "side": 1,
      "message": "I think right now we can guarantee it: a form element is added to this list in InsertedInto (it\u0027s only inserted if it\u0027s in a document, so if it gets collected, DocumentState is also getting collected) and is removed from the list in RemovedFrom. Although making a special DoublyLinkedList would enforce correctness if this changed, WDYT?",
      "parentUuid": "94cd5bbd_f9706e24",
      "revId": "8abe388df8851bbb5a5c3eac21212a1cb2e73294",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a3496d7b_4f5c4f8a",
        "filename": "third_party/WebKit/Source/core/html/forms/FormController.h",
        "patchSetId": 5
      },
      "lineNbr": 96,
      "author": {
        "id": 1002854
      },
      "writtenOn": "2017-11-14T16:11:17Z",
      "side": 1,
      "message": "Hmm. I think you\u0027re right, but I\u0027d still feel better if we made this properly traced. It shouldn\u0027t be insanely hard: probably just something like:\n\n  using PointerType \u003d std::conditional_t\u003cWTF::IsGarbageCollectedType\u003cT\u003e::value, Member\u003cT\u003e, T*\u003e;\n  PointerType head_;\n  PointerType tail_;\n\nand then a trace method. The trace method can be made to exist only in the GC case, like:\n\nstd::enable_if_t\u003cWTF::IsGarbageCollectedType\u003cT\u003e::value, void\u003e Trace(Visitor* visitor) {\n  visitor-\u003eTrace(head_);\n  visitor-\u003eTrace(tail_);\n}\n\nIt\u0027s slightly ugly, but it will mean that this gets traced the normal GC way, which I\u0027d somewhat prefer since keeping raw pointers to GC objects is a bit of an anti-pattern.\n\nAside: we should also almost certainly delete the copy constructor and such from DoublyLinkedList (e.g. WTF_MAKE_NONCOPYABLE); currently it would do bad things if copied.",
      "parentUuid": "c9dd9fc4_946882ae",
      "revId": "8abe388df8851bbb5a5c3eac21212a1cb2e73294",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d0e1faae_cdc5bf48",
        "filename": "third_party/WebKit/Source/core/html/forms/HTMLFormControlElementWithState.cpp",
        "patchSetId": 5
      },
      "lineNbr": 38,
      "author": {
        "id": 1002854
      },
      "writtenOn": "2017-11-13T20:49:53Z",
      "side": 1,
      "message": "nit: Member\u003c\u003e initializes to null by default, so this is unnecessary.",
      "revId": "8abe388df8851bbb5a5c3eac21212a1cb2e73294",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "82804474_3434b395",
        "filename": "third_party/WebKit/Source/core/html/forms/HTMLFormControlElementWithState.cpp",
        "patchSetId": 5
      },
      "lineNbr": 38,
      "author": {
        "id": 1175471
      },
      "writtenOn": "2017-11-14T15:51:47Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d0e1faae_cdc5bf48",
      "revId": "8abe388df8851bbb5a5c3eac21212a1cb2e73294",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ef5d3ab7_0fb32f5a",
        "filename": "third_party/WebKit/Source/core/html/forms/HTMLFormControlElementWithState.h",
        "patchSetId": 5
      },
      "lineNbr": 39,
      "author": {
        "id": 1002854
      },
      "writtenOn": "2017-11-14T16:11:17Z",
      "side": 1,
      "message": "nit: we usually put friends in the private section at the bottom (and that\u0027s reasonable enough here, as it\u0027s necessary to access those two pointers)",
      "revId": "8abe388df8851bbb5a5c3eac21212a1cb2e73294",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "89e925fe_cce69813",
        "filename": "third_party/WebKit/Source/core/html/forms/HTMLFormControlElementWithState.h",
        "patchSetId": 5
      },
      "lineNbr": 64,
      "author": {
        "id": 1002854
      },
      "writtenOn": "2017-11-13T20:49:53Z",
      "side": 1,
      "message": "Mention the list that this is a part of in DocumentState, so it\u0027s clear what list this is intended to be. Ideally also briefly clarify why it\u0027s reasonable to expect this object to only be in one such list at a time, as this is required to use DoublyLinkedList but is not immediately apparent to me (though I think I\u0027m convinced it is indeed true).",
      "revId": "8abe388df8851bbb5a5c3eac21212a1cb2e73294",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "60f0c1aa_bf6f2ae8",
        "filename": "third_party/WebKit/Source/core/html/forms/HTMLFormControlElementWithState.h",
        "patchSetId": 5
      },
      "lineNbr": 64,
      "author": {
        "id": 1175471
      },
      "writtenOn": "2017-11-14T15:51:47Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "89e925fe_cce69813",
      "revId": "8abe388df8851bbb5a5c3eac21212a1cb2e73294",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2c70fc9b_e07dd4c2",
        "filename": "third_party/WebKit/Source/core/html/forms/HTMLFormControlElementWithState.h",
        "patchSetId": 5
      },
      "lineNbr": 64,
      "author": {
        "id": 1002854
      },
      "writtenOn": "2017-11-14T16:11:17Z",
      "side": 1,
      "message": "Double-check that the HistoryItem reference to DocumentState doesn\u0027t break this. I don\u0027t *think* it does, but I\u0027m not 100% certain I understand it properly.",
      "parentUuid": "60f0c1aa_bf6f2ae8",
      "revId": "8abe388df8851bbb5a5c3eac21212a1cb2e73294",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}