{
  "comments": [
    {
      "key": {
        "uuid": "5516310d_ee0fde87",
        "filename": "components/cronet/ios/test/cronet_performance_test.mm",
        "patchSetId": 9
      },
      "lineNbr": 15,
      "author": {
        "id": 1143554
      },
      "writtenOn": "2017-10-13T21:21:54Z",
      "side": 1,
      "message": "Not used. Can be removed.",
      "revId": "9f98033645a61e042c6716803cece13094da74e6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bc9898f3_bc85495a",
        "filename": "components/cronet/ios/test/cronet_performance_test.mm",
        "patchSetId": 9
      },
      "lineNbr": 25,
      "author": {
        "id": 1002889
      },
      "writtenOn": "2017-10-13T13:06:19Z",
      "side": 1,
      "message": "Constants should be typed (like const int or const char*) and use kCamelCase naming:\n\nhttps://google.github.io/styleguide/cppguide.html#Constant_Names",
      "range": {
        "startLine": 25,
        "startChar": 8,
        "endLine": 25,
        "endChar": 23
      },
      "revId": "9f98033645a61e042c6716803cece13094da74e6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b421fecc_49ad8a58",
        "filename": "components/cronet/ios/test/cronet_performance_test.mm",
        "patchSetId": 9
      },
      "lineNbr": 27,
      "author": {
        "id": 1143554
      },
      "writtenOn": "2017-10-13T21:21:54Z",
      "side": 1,
      "message": "It is called EXTERNAL_SIZE but actually is used to generate content for the local server. Maybe we should rename it to DOWNLOAD_SIZE.",
      "revId": "9f98033645a61e042c6716803cece13094da74e6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f513a2d6_336aba01",
        "filename": "components/cronet/ios/test/cronet_performance_test.mm",
        "patchSetId": 9
      },
      "lineNbr": 32,
      "author": {
        "id": 1002889
      },
      "writtenOn": "2017-10-13T13:06:19Z",
      "side": 1,
      "message": "PerfResult, TestConfig, and module-global variables should be in anonymous namespace {}:\n\nhttps://google.github.io/styleguide/cppguide.html#Unnamed_Namespaces_and_Static_Variables",
      "range": {
        "startLine": 32,
        "startChar": 0,
        "endLine": 32,
        "endChar": 6
      },
      "revId": "9f98033645a61e042c6716803cece13094da74e6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0aeb32ed_530d4466",
        "filename": "components/cronet/ios/test/cronet_performance_test.mm",
        "patchSetId": 9
      },
      "lineNbr": 34,
      "author": {
        "id": 1002889
      },
      "writtenOn": "2017-10-13T13:06:19Z",
      "side": 1,
      "message": "Can those be NSTimeInterval?",
      "range": {
        "startLine": 34,
        "startChar": 2,
        "endLine": 34,
        "endChar": 8
      },
      "revId": "9f98033645a61e042c6716803cece13094da74e6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ab7c6965_b44ade0e",
        "filename": "components/cronet/ios/test/cronet_performance_test.mm",
        "patchSetId": 9
      },
      "lineNbr": 51,
      "author": {
        "id": 1002889
      },
      "writtenOn": "2017-10-13T13:06:19Z",
      "side": 1,
      "message": "Objects with static storage duration, including global variables, static variables, static class member variables, and function static variables, must be Plain Old Data (POD): only ints, chars, floats, or pointers, or arrays/structs of POD.\n\nhttps://google.github.io/styleguide/cppguide.html#Static_and_Global_Variables",
      "range": {
        "startLine": 51,
        "startChar": 4,
        "endLine": 51,
        "endChar": 5
      },
      "revId": "9f98033645a61e042c6716803cece13094da74e6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5c51ae1b_7f5c1e84",
        "filename": "components/cronet/ios/test/cronet_performance_test.mm",
        "patchSetId": 9
      },
      "lineNbr": 64,
      "author": {
        "id": 1002889
      },
      "writtenOn": "2017-10-13T13:06:19Z",
      "side": 1,
      "message": "Can |perftestresults| be protected instead of public?\nAlso, naming.",
      "range": {
        "startLine": 64,
        "startChar": 42,
        "endLine": 64,
        "endChar": 57
      },
      "revId": "9f98033645a61e042c6716803cece13094da74e6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1c72d98e_a8a5c99c",
        "filename": "components/cronet/ios/test/cronet_performance_test.mm",
        "patchSetId": 9
      },
      "lineNbr": 92,
      "author": {
        "id": 1143554
      },
      "writtenOn": "2017-10-13T21:21:54Z",
      "side": 1,
      "message": "These strings look very similar. Can we generate an NSString once and convert it to C-string for LOG(INFO)?",
      "range": {
        "startLine": 80,
        "startChar": 0,
        "endLine": 92,
        "endChar": 61
      },
      "revId": "9f98033645a61e042c6716803cece13094da74e6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "051572b6_50a97061",
        "filename": "components/cronet/ios/test/cronet_performance_test.mm",
        "patchSetId": 9
      },
      "lineNbr": 133,
      "author": {
        "id": 1002889
      },
      "writtenOn": "2017-10-13T13:06:19Z",
      "side": 1,
      "message": "nit: behavior (sp)",
      "range": {
        "startLine": 133,
        "startChar": 30,
        "endLine": 133,
        "endChar": 39
      },
      "revId": "9f98033645a61e042c6716803cece13094da74e6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e143eb8d_874b5240",
        "filename": "components/cronet/ios/test/cronet_performance_test.mm",
        "patchSetId": 9
      },
      "lineNbr": 158,
      "author": {
        "id": 1002889
      },
      "writtenOn": "2017-10-13T13:06:19Z",
      "side": 1,
      "message": "I think you can just comment that it is static member:\n// static",
      "range": {
        "startLine": 158,
        "startChar": 34,
        "endLine": 158,
        "endChar": 42
      },
      "revId": "9f98033645a61e042c6716803cece13094da74e6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1632c087_47d70841",
        "filename": "components/cronet/ios/test/cronet_performance_test.mm",
        "patchSetId": 9
      },
      "lineNbr": 165,
      "author": {
        "id": 1143554
      },
      "writtenOn": "2017-10-13T21:21:54Z",
      "side": 1,
      "message": "If we know the size in advance, we should test that it is equal to the size received; otherwise, it can become very misleading if the size changes in the future. I would suggest not to make the assumption about the response size but instead print the actual size once.",
      "range": {
        "startLine": 165,
        "startChar": 33,
        "endLine": 165,
        "endChar": 37
      },
      "revId": "9f98033645a61e042c6716803cece13094da74e6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "765a359b_bab24e1f",
        "filename": "components/cronet/ios/test/cronet_performance_test.mm",
        "patchSetId": 9
      },
      "lineNbr": 190,
      "author": {
        "id": 1143554
      },
      "writtenOn": "2017-10-13T21:21:54Z",
      "side": 1,
      "message": "Looks like duplication of code in StartDataTaskAndWaitForCompletion(task). Maybe we can add an overloaded method that allows to specify the whether to crash on failure and allows passing the timeout. I think we should specify a reasonable timeout.",
      "range": {
        "startLine": 188,
        "startChar": 0,
        "endLine": 190,
        "endChar": 28
      },
      "revId": "9f98033645a61e042c6716803cece13094da74e6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9359e4ed_96816982",
        "filename": "components/cronet/ios/test/cronet_performance_test.mm",
        "patchSetId": 9
      },
      "lineNbr": 194,
      "author": {
        "id": 1002889
      },
      "writtenOn": "2017-10-13T13:06:19Z",
      "side": 1,
      "message": "nit: remove this.",
      "range": {
        "startLine": 194,
        "startChar": 7,
        "endLine": 194,
        "endChar": 16
      },
      "revId": "9f98033645a61e042c6716803cece13094da74e6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "da947560_f2cff574",
        "filename": "components/cronet/ios/test/cronet_performance_test.mm",
        "patchSetId": 9
      },
      "lineNbr": 201,
      "author": {
        "id": 1143554
      },
      "writtenOn": "2017-10-13T21:21:54Z",
      "side": 1,
      "message": "Should we mark the test as failed (i.e. not to terminate it) if a request has failed? Maybe if we connect to an internal server, we should not tolerate any failures. For the external server we can fail the test if half of the request failed.",
      "range": {
        "startLine": 201,
        "startChar": 6,
        "endLine": 201,
        "endChar": 25
      },
      "revId": "9f98033645a61e042c6716803cece13094da74e6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}