// Copyright 2017 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// The <code>chrome.declarativeNetRequest</code> API is used to intercept and
// perform actions on a network request by specifying declarative rules.
namespace declarativeNetRequest {
    // This describes the resource type of the network request.
    enum ResourceType {
      // TODO(crbug.com/696822): add main_frame, csp.
      sub_frame,
      stylesheet,
      script,
      image,
      font,
      object,
      xmlhttprequest,
      ping,
      media,
      websocket,
      other
    };

    // This describes whether the request is first or third party to the frame
    // in which it originated. A request is said to be first party if it has the
    // same domain or host as the frame in which the request originated.
    enum DomainType {
      // The network request is first party to the frame in which it originated.
      first_party,
      // The network request is third party to the frame in which it originated.
      third_party,
      // The network request can be both first and third party to the frame in
      // which it originated.
      any
    };

    // Describes the kind of action to take if a given RuleCondition matches.
    enum RuleActionType {
      // Block the network request.
      block,
      // Redirect the network request.
      redirect,
      // Whitelist the network request. The request won't be blocked even if
      // there is a blocking rule which matches it.
      whitelist
    };

    // COMMENT(karandeepb): default values are not supported?
    // For a rule condition to be meaningful, it should match:
    //    - A non empty set of matching resources. (This should change after
    //      whitelist_recursive is introduced.) AND
    //    - Have either a non empty |url_filter| or a non-empty |domains| list.
    dictionary RuleCondition {
      // The pattern which is matched against the network request url.
      // Supported constructs:
      // '*'  : Wildcard: Matches any no. of characters.
      // '|'  : Left/right anchor: These specify the beginning/end of the url
      //        respectively.
      // '||' : Domain name anchor: This specifies the start of the domain name
      //        of the request.
      // '^'  : Separator character: This is anything but a letter, digit or one
      //        of the following: _ - . %. The end of the address is also
      //        accepted as a separator.
      // COMMENT: Confirm all this matches our implementation. This is the same
      // as how easylist rules specify patterns e.g.
      // https://adblockplus.org/filter-cheatsheet
      DOMString? urlFilter;

      // Whether the |urlFilter| is case sensitive. Default is false.
      boolean? urlFilterIsCaseSensitive;

      // The rule will be matched for only the network requests originating
      // from the list of |domains|. If the list is empty, the rule is applied
      // to requests from all domains.
      DOMString[]? domains;

      // The rule will not be matched for the network requests originating from
      // the list of |excludedDomains|. If the list is empty, no domains are
      // excluded.
      DOMString[]? excludedDomains;

      // List of resource types which need to be matched. An empty list will
      // match all resource types.
      ResourceType[]? resourceTypes;

      // List of resource types which won't be matched. An empty list won't
      // exclude any resource type.
      ResourceType[]? excludedResourceTypes;

      // Specifies whether the network request is first-party or third-party to
      // the domain from which it originated. Default value is "any".
      DomainType? domainType;
    };

    dictionary RuleAction {
      // The type of action to perform.
      RuleActionType type;

      // The redirect url. Only valid for a redirect rule action type.
      DOMString? redirectUrl;
    };

    dictionary Rule {
      // An id which uniquely identifies a rule. Mandatory and should be greater
      // than or equal to 0.
      long id;

      // Rule priority. Mandatory for redirect rules and should be greater than
      // or equal to 0.
      long? priority;

      // The condition which if satisfied causes the |action| to trigger.
      RuleCondition condition;

      // The action to take if this rule is triggered.
      RuleAction action;
    };
};
