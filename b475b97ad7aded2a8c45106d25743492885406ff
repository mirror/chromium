{
  "comments": [
    {
      "key": {
        "uuid": "19ff9a2d_967df495",
        "filename": "chrome/common/mac/cfbundle_blocker_unittest.mm",
        "patchSetId": 5
      },
      "lineNbr": 93,
      "author": {
        "id": 1174099
      },
      "writtenOn": "2017-07-28T21:40:16Z",
      "side": 1,
      "message": "This will break down under --gtest_repeat unless you reset it ahead of time.",
      "revId": "b475b97ad7aded2a8c45106d25743492885406ff",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "95b560e7_2aa985b1",
        "filename": "chrome/common/mac/cfbundle_blocker_unittest.mm",
        "patchSetId": 5
      },
      "lineNbr": 93,
      "author": {
        "id": 1139794
      },
      "writtenOn": "2017-07-31T06:02:06Z",
      "side": 1,
      "message": "Correct and good point. Fixed in the latest patch.",
      "parentUuid": "19ff9a2d_967df495",
      "revId": "b475b97ad7aded2a8c45106d25743492885406ff",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fd7cd655_b8758670",
        "filename": "chrome/common/mac/cfbundle_blocker_unittest.mm",
        "patchSetId": 5
      },
      "lineNbr": 97,
      "author": {
        "id": 1174099
      },
      "writtenOn": "2017-07-28T21:40:16Z",
      "side": 1,
      "message": "Don’t you think that “100 \u003e\u003d attempts” is less readable than “attempts \u003c 100”?",
      "revId": "b475b97ad7aded2a8c45106d25743492885406ff",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0fad663f_c74f80eb",
        "filename": "chrome/common/mac/cfbundle_blocker_unittest.mm",
        "patchSetId": 5
      },
      "lineNbr": 97,
      "author": {
        "id": 1139794
      },
      "writtenOn": "2017-07-31T06:02:06Z",
      "side": 1,
      "message": "Indeed, but I thought that in Chromium we put the expected/constant value first and this is why I implemented it this way. Fixed in the latest patch.",
      "parentUuid": "fd7cd655_b8758670",
      "revId": "b475b97ad7aded2a8c45106d25743492885406ff",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5b8a086d_9f1c6fa9",
        "filename": "chrome/common/mac/cfbundle_blocker_unittest.mm",
        "patchSetId": 5
      },
      "lineNbr": 97,
      "author": {
        "id": 1174099
      },
      "writtenOn": "2017-07-31T14:05:24Z",
      "side": 1,
      "message": "\u003e Indeed, but I thought that in Chromium we put the expected/constant value first and this is why I implemented it this way. Fixed in the latest patch.\n\nThat was only for {EXPECT,ASSERT}_EQ. Gtest used to want (expected, actual) and its “expectation failed” messages would be confusing if you didn’t follow this order. Nearly two years ago, it was updated to be agnostic. It took Chromium a while to catch up, but we finally got a modern gtest a few months ago, and now you’re free to use whatever order feels more natural in Chromium code too.",
      "parentUuid": "0fad663f_c74f80eb",
      "revId": "b475b97ad7aded2a8c45106d25743492885406ff",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d8a4db13_58382e96",
        "filename": "third_party/mach_override/README.chromium",
        "patchSetId": 5
      },
      "lineNbr": 20,
      "author": {
        "id": 1174099
      },
      "writtenOn": "2017-07-28T21:40:16Z",
      "side": 1,
      "message": "This is something that we might not want to upstream, I guess…",
      "range": {
        "startLine": 20,
        "startChar": 46,
        "endLine": 20,
        "endChar": 86
      },
      "revId": "b475b97ad7aded2a8c45106d25743492885406ff",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4888f9cd_9058ff52",
        "filename": "third_party/mach_override/README.chromium",
        "patchSetId": 5
      },
      "lineNbr": 20,
      "author": {
        "id": 1174099
      },
      "writtenOn": "2017-07-28T21:40:16Z",
      "side": 1,
      "message": "Stay within 80 columns.",
      "revId": "b475b97ad7aded2a8c45106d25743492885406ff",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cbe52045_9a78de77",
        "filename": "third_party/mach_override/README.chromium",
        "patchSetId": 5
      },
      "lineNbr": 20,
      "author": {
        "id": 1139794
      },
      "writtenOn": "2017-07-28T22:39:59Z",
      "side": 1,
      "message": "Why not? It should be concern for anybody that uses the library - the library attempts memory allocations within a loop and we already saw the impact on our startup time.",
      "parentUuid": "d8a4db13_58382e96",
      "range": {
        "startLine": 20,
        "startChar": 46,
        "endLine": 20,
        "endChar": 86
      },
      "revId": "b475b97ad7aded2a8c45106d25743492885406ff",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a2a51810_21f43232",
        "filename": "third_party/mach_override/README.chromium",
        "patchSetId": 5
      },
      "lineNbr": 20,
      "author": {
        "id": 1139794
      },
      "writtenOn": "2017-07-28T22:39:59Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4888f9cd_9058ff52",
      "revId": "b475b97ad7aded2a8c45106d25743492885406ff",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8bb75117_b5ce9887",
        "filename": "third_party/mach_override/README.chromium",
        "patchSetId": 5
      },
      "lineNbr": 20,
      "author": {
        "id": 1139794
      },
      "writtenOn": "2017-07-31T06:02:06Z",
      "side": 1,
      "message": "Resolving?",
      "parentUuid": "cbe52045_9a78de77",
      "range": {
        "startLine": 20,
        "startChar": 46,
        "endLine": 20,
        "endChar": 86
      },
      "revId": "b475b97ad7aded2a8c45106d25743492885406ff",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "09da6500_23d1e001",
        "filename": "third_party/mach_override/chromium.patch",
        "patchSetId": 5
      },
      "lineNbr": 74,
      "author": {
        "id": 1174099
      },
      "writtenOn": "2017-07-28T21:40:16Z",
      "side": 1,
      "message": "This should probably be an atomic increment. Same below.",
      "revId": "b475b97ad7aded2a8c45106d25743492885406ff",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "79271fdd_24ceb3e5",
        "filename": "third_party/mach_override/chromium.patch",
        "patchSetId": 5
      },
      "lineNbr": 74,
      "author": {
        "id": 1139794
      },
      "writtenOn": "2017-07-28T22:28:05Z",
      "side": 1,
      "message": "Yep, I thought about that, but I got concerned about:\n1. Dragging additional header (libkern/OSAtomic.h)\n2. Slowing down the method (+2 memory barriers). \n\nNone of these two impact Chrome, but may impact other clients of this third_party library. If you insist, I will add the OSAtomicAdd64 (OSAtomicIncrement64 requires 10.10+).",
      "parentUuid": "09da6500_23d1e001",
      "revId": "b475b97ad7aded2a8c45106d25743492885406ff",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f6c4f26d_f0d01d70",
        "filename": "third_party/mach_override/chromium.patch",
        "patchSetId": 5
      },
      "lineNbr": 74,
      "author": {
        "id": 1174099
      },
      "writtenOn": "2017-07-28T23:41:40Z",
      "side": 1,
      "message": "\u003e Yep, I thought about that, but I got concerned about:\n\u003e 1. Dragging additional header (libkern/OSAtomic.h)\n\u003e 2. Slowing down the method (+2 memory barriers). \n\u003e \n\u003e None of these two impact Chrome, but may impact other clients of this third_party library. If you insist, I will add the OSAtomicAdd64 (OSAtomicIncrement64 requires 10.10+).\n\nI can deal with the flake that this causes because it’s test-only and we don’t care about thread-safety here, but the flake is kind of why I thought that upstream might not want this.",
      "parentUuid": "79271fdd_24ceb3e5",
      "revId": "b475b97ad7aded2a8c45106d25743492885406ff",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "072c7ff1_9fc5f548",
        "filename": "third_party/mach_override/chromium.patch",
        "patchSetId": 5
      },
      "lineNbr": 74,
      "author": {
        "id": 1139794
      },
      "writtenOn": "2017-07-28T23:59:59Z",
      "side": 1,
      "message": "This is good point, although I don\u0027t believe that the function is thread safe at all. E.g. if one calls mach_override_ptr with the same parameters from two different threads, the results are fully unpredictable. Anything between silent success and crash later (due to instruction patching messed up) is possible.",
      "parentUuid": "f6c4f26d_f0d01d70",
      "revId": "b475b97ad7aded2a8c45106d25743492885406ff",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5e14dcf1_500f827c",
        "filename": "third_party/mach_override/chromium.patch",
        "patchSetId": 5
      },
      "lineNbr": 74,
      "author": {
        "id": 1174099
      },
      "writtenOn": "2017-07-29T00:17:04Z",
      "side": 1,
      "message": "\u003e This is good point, although I don\u0027t believe that the function is thread safe at all. E.g. if one calls mach_override_ptr with the same parameters from two different threads, the results are fully unpredictable. Anything between silent success and crash later (due to instruction patching messed up) is possible.\n\nSure, but I think it’s thread-safe if you call it to override two completely distinct functions from different threads simultaneously.",
      "parentUuid": "072c7ff1_9fc5f548",
      "revId": "b475b97ad7aded2a8c45106d25743492885406ff",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dc47e34b_76ae46c3",
        "filename": "third_party/mach_override/chromium.patch",
        "patchSetId": 5
      },
      "lineNbr": 74,
      "author": {
        "id": 1139794
      },
      "writtenOn": "2017-07-31T06:02:06Z",
      "side": 1,
      "message": "Sure, I use atomic operations now, including in retrieval.",
      "parentUuid": "5e14dcf1_500f827c",
      "revId": "b475b97ad7aded2a8c45106d25743492885406ff",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "94602811_74b7c13d",
        "filename": "third_party/mach_override/chromium.patch",
        "patchSetId": 5
      },
      "lineNbr": 156,
      "author": {
        "id": 1174099
      },
      "writtenOn": "2017-07-28T21:40:16Z",
      "side": 1,
      "message": "then you can remove the documented limitation.",
      "revId": "b475b97ad7aded2a8c45106d25743492885406ff",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}