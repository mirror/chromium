{
  "comments": [
    {
      "key": {
        "uuid": "1de0b3bd_eff4eaef",
        "filename": "chrome/browser/chrome_content_browser_client.cc",
        "patchSetId": 14
      },
      "lineNbr": 1237,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-11-30T17:30:54Z",
      "side": 1,
      "message": "I haven\u0027t been able to get the link doctor to show up in practice yet (even in official builds), so I haven\u0027t confirmed whether an equality check or a prefix check is needed.  It does look like we\u0027ll need to whitelist this case, since the renderer requests it with no initiator and it doesn\u0027t have CORS headers.",
      "revId": "28dfdc31a52b0a7e022215c8b8b2d554292699df",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bdff7785_5284a8f2",
        "filename": "chrome/browser/chrome_content_browser_client.cc",
        "patchSetId": 14
      },
      "lineNbr": 1237,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-12-01T01:17:30Z",
      "side": 1,
      "message": "\u003e I haven\u0027t been able to get the link doctor to show up in practice yet (even in official builds), so I haven\u0027t confirmed whether an equality check or a prefix check is needed.  It does look like we\u0027ll need to whitelist this case, since the renderer requests it with no initiator and it doesn\u0027t have CORS headers.\n\nFixed via Nick\u0027s suggestion.",
      "parentUuid": "1de0b3bd_eff4eaef",
      "revId": "28dfdc31a52b0a7e022215c8b8b2d554292699df",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d3833742_01ac76ea",
        "filename": "chrome/browser/extensions/chrome_content_browser_client_extensions_part.cc",
        "patchSetId": 14
      },
      "lineNbr": 384,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-11-30T17:30:54Z",
      "side": 1,
      "message": "This is for both extension processes and content scripts.  I\u0027ll add a comment.",
      "revId": "28dfdc31a52b0a7e022215c8b8b2d554292699df",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2facf901_d75f1b88",
        "filename": "chrome/browser/extensions/chrome_content_browser_client_extensions_part.cc",
        "patchSetId": 14
      },
      "lineNbr": 384,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-12-01T01:17:30Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d3833742_01ac76ea",
      "revId": "28dfdc31a52b0a7e022215c8b8b2d554292699df",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "62954601_a5837461",
        "filename": "chrome/test/data/extensions/api_test/webrequest/test_unload5.js",
        "patchSetId": 14
      },
      "lineNbr": 13,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-11-30T17:30:54Z",
      "side": 1,
      "message": "Nick/Devlin: This is a side effect of Nick\u0027s proposed change to ResourceFetcher.cpp, where we set the initiator differently.  Is this an ok change, or is it a problem that it\u0027s visible to extensions?",
      "revId": "28dfdc31a52b0a7e022215c8b8b2d554292699df",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3244d28b_385e14c5",
        "filename": "chrome/test/data/extensions/api_test/webrequest/test_unload5.js",
        "patchSetId": 14
      },
      "lineNbr": 13,
      "author": {
        "id": 1115745
      },
      "writtenOn": "2017-11-30T18:01:36Z",
      "side": 1,
      "message": "Hmm... interesting.  I\u0027m not *super* worried about this being visible to other extensions, though it does raise a couple interesting questions.  For instance, we protect requests made by extensions from other extensions, but we currently only apply that to requests from a dedicated extension process (and even then, I think it\u0027s mostly just a best-effort).  If we can deterministically tell whether an extension content script made a request, it might be worth protecting those requests from other extensions - though it\u0027s hard to say if that would break anything we consider important.  There\u0027s also the possibility that an extension would target another extension, blocking all its requests, but I don\u0027t think that\u0027s a much greater risk (the content script requests weren\u0027t protected before, so any determined bad extension could just look for a request pattern or similar).\n\nOne thing I would like to check, though, is whether the change in ResourceFetcher.cpp would visible to the server in any way?  We deliberately hide the fact that a request is coming from an extension when it goes to the server.",
      "parentUuid": "62954601_a5837461",
      "revId": "28dfdc31a52b0a7e022215c8b8b2d554292699df",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f238b141_4675c3df",
        "filename": "chrome/test/data/extensions/api_test/webrequest/test_unload5.js",
        "patchSetId": 14
      },
      "lineNbr": 13,
      "author": {
        "id": 1002169
      },
      "writtenOn": "2017-11-30T22:04:39Z",
      "side": 1,
      "message": "I\u0027m not worried about RequestorOrigin affecting what gets sent over the network -- it\u0027s already different from document.origin in one important case (namely, when a fetch is initiated by \u003ciframe sandbox src\u003d\"http://example.com\"\u003e, RequestorOrigin (which becomes the \"initiator\" field in the browser process) is \"http://example.com\" instead of \"null\".\n\nSo, the RequestorOrigin is already something that\u0027s intentionally maintained as a different from the Origin/Referer headers.\n\nHaving said that, I\u0027m working on auditing all the uses of RequestorOrigin to make sure this change is safe.",
      "parentUuid": "3244d28b_385e14c5",
      "revId": "28dfdc31a52b0a7e022215c8b8b2d554292699df",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b55392a7_fd3cb47a",
        "filename": "chrome/test/data/extensions/api_test/webrequest/test_unload5.js",
        "patchSetId": 14
      },
      "lineNbr": 13,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-12-04T08:37:07Z",
      "side": 1,
      "message": "Sounds like we\u0027ve resolved this.",
      "parentUuid": "f238b141_4675c3df",
      "revId": "28dfdc31a52b0a7e022215c8b8b2d554292699df",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f0903d53_2f051451",
        "filename": "content/browser/loader/cross_site_document_resource_handler.cc",
        "patchSetId": 14
      },
      "lineNbr": 127,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-11-30T17:30:54Z",
      "side": 1,
      "message": "Nick suggested just doing an origin comparison here, since we\u0027re trusting the renderer.  I could give that a try.",
      "revId": "28dfdc31a52b0a7e022215c8b8b2d554292699df",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "071cee6b_41c33f61",
        "filename": "content/browser/loader/cross_site_document_resource_handler.cc",
        "patchSetId": 14
      },
      "lineNbr": 149,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-11-30T17:30:54Z",
      "side": 1,
      "message": "The tricky thing with plugins is that (surprisingly) I haven\u0027t found a way to get to the Origin request header here.",
      "revId": "28dfdc31a52b0a7e022215c8b8b2d554292699df",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1da34d72_e1cebf7a",
        "filename": "content/browser/loader/cross_site_document_resource_handler.cc",
        "patchSetId": 14
      },
      "lineNbr": 152,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-11-30T17:30:54Z",
      "side": 1,
      "message": "I think this will be required, given how many responses are blocked on real sites (e.g., JSONP labeled as JSON, HTML, or plain text).\n\nDebating whether to make that change in this CL or a followup.",
      "revId": "28dfdc31a52b0a7e022215c8b8b2d554292699df",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d3606fd9_b19cb2a3",
        "filename": "content/browser/loader/cross_site_document_resource_handler.cc",
        "patchSetId": 14
      },
      "lineNbr": 152,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-12-04T08:37:07Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1da34d72_e1cebf7a",
      "revId": "28dfdc31a52b0a7e022215c8b8b2d554292699df",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b7391405_ae8ce0b7",
        "filename": "content/browser/loader/cross_site_document_resource_handler.cc",
        "patchSetId": 14
      },
      "lineNbr": 162,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-11-30T17:30:54Z",
      "side": 1,
      "message": "I have a draft of a console message to add instead, but it affects a lot of layout test expectations.  I\u0027m thinking about landing that in a separate CL.",
      "revId": "28dfdc31a52b0a7e022215c8b8b2d554292699df",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "02dd6231_a7f575a4",
        "filename": "content/browser/loader/cross_site_document_resource_handler.cc",
        "patchSetId": 14
      },
      "lineNbr": 162,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-12-04T08:37:07Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b7391405_ae8ce0b7",
      "revId": "28dfdc31a52b0a7e022215c8b8b2d554292699df",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "86cf7503_99546db9",
        "filename": "third_party/WebKit/LayoutTests/http/tests/security/cross-origin-script-window-onerror.html",
        "patchSetId": 14
      },
      "lineNbr": 21,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-11-30T17:30:54Z",
      "side": 1,
      "message": "With XSDB, we don\u0027t get an error from the script tag, since the response is empty instead of an invalid script.  That\u0027s even better in terms of the intention of the test.\n\nThe old expectations are still valid without XSDB, since onerror happens before onload.  I\u0027ve added a flag-specific expectations file for the --site-per-process case when XSDB is enabled.",
      "revId": "28dfdc31a52b0a7e022215c8b8b2d554292699df",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cf23026f_4e055ddc",
        "filename": "third_party/WebKit/LayoutTests/http/tests/security/cross-origin-script-window-onerror.html",
        "patchSetId": 14
      },
      "lineNbr": 21,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-12-04T08:37:07Z",
      "side": 1,
      "message": "\u003e With XSDB, we don\u0027t get an error from the script tag, since the response is empty instead of an invalid script.  That\u0027s even better in terms of the intention of the test.\n\u003e \n\u003e The old expectations are still valid without XSDB, since onerror happens before onload.  I\u0027ve added a flag-specific expectations file for the --site-per-process case when XSDB is enabled.\n\nRemoved this change and the extra expectation files after sniffing was added (since the file below doesn\u0027t sniff as a response that needs to be blocked).",
      "parentUuid": "86cf7503_99546db9",
      "revId": "28dfdc31a52b0a7e022215c8b8b2d554292699df",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a8fc156_ee6f43be",
        "filename": "third_party/WebKit/LayoutTests/http/tests/serviceworker/resources/fetch-access-control.php",
        "patchSetId": 14
      },
      "lineNbr": 107,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-11-30T17:30:54Z",
      "side": 1,
      "message": "This was just wrong before, as Nick pointed out.  Line 119 is JSONP, not JSON.  This affected a bunch of no-cors ServiceWorker layout tests.",
      "revId": "28dfdc31a52b0a7e022215c8b8b2d554292699df",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0195405d_fcd51b25",
        "filename": "third_party/WebKit/LayoutTests/http/tests/serviceworker/resources/fetch-access-control.php",
        "patchSetId": 14
      },
      "lineNbr": 107,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-12-04T08:37:07Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5a8fc156_ee6f43be",
      "revId": "28dfdc31a52b0a7e022215c8b8b2d554292699df",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b8559067_83c71f55",
        "filename": "third_party/WebKit/Source/platform/loader/fetch/ResourceFetcher.cpp",
        "patchSetId": 14
      },
      "lineNbr": 613,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-11-30T17:30:54Z",
      "side": 1,
      "message": "Devlin/Daniel: This is Nick\u0027s proposed change for updating the initiator Origin for content scripts, isolated worlds, and (as it turns out) HTML imports.  Seems to work, other than making a slightly visible change to the web request API behavior (see test_unload5.js).",
      "revId": "28dfdc31a52b0a7e022215c8b8b2d554292699df",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a3772d01_54f0e0a7",
        "filename": "third_party/WebKit/Source/platform/loader/fetch/ResourceFetcher.cpp",
        "patchSetId": 14
      },
      "lineNbr": 613,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-12-04T08:37:07Z",
      "side": 1,
      "message": "\u003e Devlin/Daniel: This is Nick\u0027s proposed change for updating the initiator Origin for content scripts, isolated worlds, and (as it turns out) HTML imports.  Seems to work, other than making a slightly visible change to the web request API behavior (see test_unload5.js).\n\nDiscussed separately.",
      "parentUuid": "b8559067_83c71f55",
      "revId": "28dfdc31a52b0a7e022215c8b8b2d554292699df",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}