{
  "comments": [
    {
      "key": {
        "uuid": "f2e61d65_aee9c586",
        "filename": "services/data_decoder/xml_parser_unittest.cc",
        "patchSetId": 9
      },
      "lineNbr": 103,
      "author": {
        "id": 1001040
      },
      "writtenOn": "2017-11-21T23:04:11Z",
      "side": 1,
      "message": "Maybe use \u0027 instead of \" to avoid needing to escape it? Would improve readability.",
      "revId": "290032be1ddcda662c71bd9a18c4ffab5d24e2f3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0f87cc3c_f452de11",
        "filename": "services/data_decoder/xml_parser_unittest.cc",
        "patchSetId": 9
      },
      "lineNbr": 103,
      "author": {
        "id": 1002808
      },
      "writtenOn": "2017-11-21T23:11:24Z",
      "side": 1,
      "message": "JSONReader doesn\u0027t support single quotes, so you\u0027d also have to translate or parse by hand if you did that. You can however use string literals:\n\n R\"({\n  \"tag\": \"hello\",\n  ...\n })\"",
      "parentUuid": "f2e61d65_aee9c586",
      "revId": "290032be1ddcda662c71bd9a18c4ffab5d24e2f3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9997d0ca_bfaaaaf0",
        "filename": "services/data_decoder/xml_parser_unittest.cc",
        "patchSetId": 9
      },
      "lineNbr": 103,
      "author": {
        "id": 1002246
      },
      "writtenOn": "2017-11-22T18:05:35Z",
      "side": 1,
      "message": "Ah, I didn\u0027t know about string literals!\nChanged to use them where appropriate.",
      "parentUuid": "0f87cc3c_f452de11",
      "revId": "290032be1ddcda662c71bd9a18c4ffab5d24e2f3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6ba52c8f_30348ffb",
        "filename": "services/data_decoder/xml_parser_unittest.cc",
        "patchSetId": 9
      },
      "lineNbr": 151,
      "author": {
        "id": 1001040
      },
      "writtenOn": "2017-11-21T23:04:11Z",
      "side": 1,
      "message": "Might be good to add some adversarial examples, like\n\n  \u003cbook id\u003d\"k456\" id\u003d\"k123\"\u003e\n\n(duplicate keys, handled differently across XML and across various JSON parsers), and\n\n  \u003cnumber\u003e18446744073709551616\u003c/number\u003e\n\n(integer larger than JavaScript can represent, and which different JSON parsers handle differently), and\n\n  \u003cthing\u003e{\"tag\": \"woop\", \"boing\": 123, 12: \"\\\\\\\"foodyums\"}\u003c/thing\u003e\n\n(JSON injection, misquoting, et c.)",
      "revId": "290032be1ddcda662c71bd9a18c4ffab5d24e2f3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "17e361f0_86663dc7",
        "filename": "services/data_decoder/xml_parser_unittest.cc",
        "patchSetId": 9
      },
      "lineNbr": 151,
      "author": {
        "id": 1002246
      },
      "writtenOn": "2017-11-22T18:05:35Z",
      "side": 1,
      "message": "Good idea, added the ones you suggested (but for the duplicate attributes which I\u0027ll add in my follow up CL that adds attribute and namespace support).",
      "parentUuid": "6ba52c8f_30348ffb",
      "revId": "290032be1ddcda662c71bd9a18c4ffab5d24e2f3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}