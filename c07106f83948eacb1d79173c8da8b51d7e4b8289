{
  "comments": [
    {
      "key": {
        "uuid": "9f2c5e0f_ac8b6693",
        "filename": "chrome/browser/resources/settings/privacy_page/privacy_page.js",
        "patchSetId": 9
      },
      "lineNbr": 355,
      "author": {
        "id": 1115893
      },
      "writtenOn": "2018-01-31T00:11:40Z",
      "side": 1,
      "message": "Is this a fake pref? Trying to understand why do we need to construct it in JS, as opposed to having it propagate through the pref mechanism that most of Settings UI uses.",
      "range": {
        "startLine": 355,
        "startChar": 9,
        "endLine": 355,
        "endChar": 43
      },
      "revId": "c07106f83948eacb1d79173c8da8b51d7e4b8289",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f3067a04_fef040d1",
        "filename": "chrome/browser/resources/settings/privacy_page/privacy_page.js",
        "patchSetId": 9
      },
      "lineNbr": 355,
      "author": {
        "id": 1168342
      },
      "writtenOn": "2018-01-31T18:16:51Z",
      "side": 1,
      "message": "No, it\u0027s a real pref. The reason everything is done manually like this is because of a past project where this checkbox could control one of two prefs and we had to be able to switch which one on the fly, while the pref mechanism only lets you bind to a single preference. \n\nhttp://go/ScoutTransition gives all the details.",
      "parentUuid": "9f2c5e0f_ac8b6693",
      "range": {
        "startLine": 355,
        "startChar": 9,
        "endLine": 355,
        "endChar": 43
      },
      "revId": "c07106f83948eacb1d79173c8da8b51d7e4b8289",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b20e99e8_08e1494e",
        "filename": "chrome/browser/resources/settings/privacy_page/privacy_page.js",
        "patchSetId": 9
      },
      "lineNbr": 355,
      "author": {
        "id": 1115893
      },
      "writtenOn": "2018-01-31T18:36:46Z",
      "side": 1,
      "message": "Even if a checkbox can dynamically change which pref it is bound to, couldn\u0027t it point to a real prefs (from |this.prefs| dictionary)? The corresponding checkbox already points to a local variable here, see [1].\n\nSo couldn\u0027t this still be (pseudo-code) \n\nif (...experiment a...)\n  this.safeBrowsingExtendedReportingPref_ \u003d pref.foo.bar.experimentA;\nelse\n  this.safeBrowsingExtendedReportingPref_ \u003d pref.foo.bar.experimentB;\n\nWhy do we need to manually populate |enforcment| and |controlledBy|? Doesn\u0027t the C++ code does that already, and places the result under some key on this.prefs?\n\nSorry for the multiple questions, but still trying to understand the need for this.\n\n[1] https://cs.chromium.org/chromium/src/chrome/browser/resources/settings/privacy_page/privacy_page.html?l\u003d84",
      "parentUuid": "f3067a04_fef040d1",
      "range": {
        "startLine": 355,
        "startChar": 9,
        "endLine": 355,
        "endChar": 43
      },
      "revId": "c07106f83948eacb1d79173c8da8b51d7e4b8289",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "adfe631d_137d5f5d",
        "filename": "chrome/browser/resources/settings/privacy_page/privacy_page.js",
        "patchSetId": 9
      },
      "lineNbr": 355,
      "author": {
        "id": 1168342
      },
      "writtenOn": "2018-02-01T18:00:19Z",
      "side": 1,
      "message": "Thanks for clarifying.\n\nRegarding the fake prefs (which they are in this context, yes), they look to have been added in https://codereview.chromium.org/2684853003 (which you reviewed so you may have more context on why it was done :). Looking back to my original change of this code, it did seem to behave more like you described - the safe_browsing_handler would figure out the value from whichever pref was active at the time. So, are you able to recall why the fake pref was added? I\u0027ll defer to whichever way you\u0027d like to go here.\n\nAs for adding enforcement and controlledby - since this pref has its own custom handler I wasn\u0027t getting the \"office building\" icon for free when this pref was managed by policy. To achieve this I\u0027m basically copying what was done for the metrics reporting pref above (on :314).",
      "parentUuid": "b20e99e8_08e1494e",
      "range": {
        "startLine": 355,
        "startChar": 9,
        "endLine": 355,
        "endChar": 43
      },
      "revId": "c07106f83948eacb1d79173c8da8b51d7e4b8289",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b5b6b693_4847fbb6",
        "filename": "chrome/browser/resources/settings/privacy_page/privacy_page.js",
        "patchSetId": 9
      },
      "lineNbr": 355,
      "author": {
        "id": 1115893
      },
      "writtenOn": "2018-02-01T18:35:43Z",
      "side": 1,
      "message": "+dbeam as FYI\n\nLooking at the past CL you linked, it seems that this was a compromise (per https://codereview.chromium.org/2684853003#msg40), to allow settings that are not backed by a real pref to still leverage a settings-toggle-button such that policy indicators are displayed as necessary.\n\nThere was some discussion about making \"virtual\" prefs either in the C++ or in JS itself, as a potential improvement. But, all these solutions are inferior to making a real C++ pref as follows:\n\n1) Whitelist the pref (if it exists already, or create one) for settingsPrivate API at [1]\n2) This could cause the pref to be registered at [2], such that any changes are propagating to the Settings UI via the normal pref mechanism, and therefore allow using settings-control-button via a normal pref, instead of a fake on-the-fly JS pref. Any changes to policies would automatically update that UI component, without having to communicate them out-of-band, like currently done via the \u0027safe-browsing-extended-reporting-change\u0027 WebUI event.\n\nFor step 1, I am still not 100% clear on whether a C++ pref already exists, but somehow it is not registered with the settingsPrivate API, or if such pref does not exist at all.\n\nI am not suggesting that the above must be done in this CL, but it would help clarifying whether any of this is possible for SBER. IMO, if a C++ pref already exists, then piping it via the API is a much better solution, and would prefer going that route.\n\n[1] https://cs.chromium.org/chromium/src/chrome/browser/extensions/api/settings_private/prefs_util.cc?l\u003d92.\n[2] https://cs.chromium.org/chromium/src/chrome/browser/extensions/api/settings_private/settings_private_event_router.cc?l\u003d98,106",
      "parentUuid": "adfe631d_137d5f5d",
      "range": {
        "startLine": 355,
        "startChar": 9,
        "endLine": 355,
        "endChar": 43
      },
      "revId": "c07106f83948eacb1d79173c8da8b51d7e4b8289",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "944e46f5_b88bdc1b",
        "filename": "chrome/test/data/webui/settings/privacy_page_test.js",
        "patchSetId": 9
      },
      "lineNbr": 426,
      "author": {
        "id": 1115893
      },
      "writtenOn": "2018-01-31T00:11:40Z",
      "side": 1,
      "message": "Maybe chain this callback on the next line, instead of nesting.",
      "range": {
        "startLine": 423,
        "startChar": 55,
        "endLine": 426,
        "endChar": 17
      },
      "revId": "c07106f83948eacb1d79173c8da8b51d7e4b8289",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "05a45bae_e46a8790",
        "filename": "chrome/test/data/webui/settings/privacy_page_test.js",
        "patchSetId": 9
      },
      "lineNbr": 426,
      "author": {
        "id": 1168342
      },
      "writtenOn": "2018-01-31T18:16:51Z",
      "side": 1,
      "message": "Done, let me know if I misunderstood this comment (i\u0027m far from a js expert).\nFyi I\u0027m basing this test on a similar one from metrics_reporting_tests.js",
      "parentUuid": "944e46f5_b88bdc1b",
      "range": {
        "startLine": 423,
        "startChar": 55,
        "endLine": 426,
        "endChar": 17
      },
      "revId": "c07106f83948eacb1d79173c8da8b51d7e4b8289",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9a8a8ad2_728d05cc",
        "filename": "chrome/test/data/webui/settings/privacy_page_test.js",
        "patchSetId": 9
      },
      "lineNbr": 426,
      "author": {
        "id": 1115893
      },
      "writtenOn": "2018-01-31T18:36:46Z",
      "side": 1,
      "message": "Not exactly what I meant. Patchset 10 simply changed the choice of \\n placement. What I meant is the following\n\n// Nested promises.\ntest(function() {\n  return foo().then(function() {\n    returrn bar().then(function() {\n      assertEquals(...);\n    });\n  });\n});\n\n\n// Chained promises\ntest(function() {\n  return foo().then(function() {\n     return bar();\n  }).then(function() {\n    assertEquals(...);\n  });\n});\n\nChained promises are preferred they reduce the levels of nesting (and indentation), and they are equivalent. In your case here, something like the following:\n\ntest(\u0027test whether extended reporting is enabled/managed\u0027, function() {\n  return testBrowserProxy.whenCalled(...).then(function() {\n     ...\n     return testBrowserProxy.whenCalled(\n            \u0027setSafeBrowsingExtendedReportingEnabled\u0027);\n  }).then(function(enabled) {\n    assertTrue(enabled);\n  });",
      "parentUuid": "05a45bae_e46a8790",
      "range": {
        "startLine": 423,
        "startChar": 55,
        "endLine": 426,
        "endChar": 17
      },
      "revId": "c07106f83948eacb1d79173c8da8b51d7e4b8289",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "26740c3f_13882ff1",
        "filename": "chrome/test/data/webui/settings/privacy_page_test.js",
        "patchSetId": 9
      },
      "lineNbr": 426,
      "author": {
        "id": 1168342
      },
      "writtenOn": "2018-02-01T18:00:19Z",
      "side": 1,
      "message": "Thanks, I missed the \"test\"-level function before, hopefully this looks better.",
      "parentUuid": "9a8a8ad2_728d05cc",
      "range": {
        "startLine": 423,
        "startChar": 55,
        "endLine": 426,
        "endChar": 17
      },
      "revId": "c07106f83948eacb1d79173c8da8b51d7e4b8289",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ef1e0b47_cdb8c48d",
        "filename": "chrome/test/data/webui/settings/test_privacy_page_browser_proxy.js",
        "patchSetId": 9
      },
      "lineNbr": 25,
      "author": {
        "id": 1115893
      },
      "writtenOn": "2018-01-31T00:11:40Z",
      "side": 1,
      "message": "If those values are hard-coded here, does that mean that this is the only case being tested? Should the (true,false) or (false, false) cases also be tested?",
      "range": {
        "startLine": 24,
        "startChar": 6,
        "endLine": 25,
        "endChar": 21
      },
      "revId": "c07106f83948eacb1d79173c8da8b51d7e4b8289",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "554f8940_62a1e6f3",
        "filename": "chrome/test/data/webui/settings/test_privacy_page_browser_proxy.js",
        "patchSetId": 9
      },
      "lineNbr": 25,
      "author": {
        "id": 1168342
      },
      "writtenOn": "2018-01-31T18:16:51Z",
      "side": 1,
      "message": "This is just the initial state. privacy_page_test.js:405 is where we change this combination.",
      "parentUuid": "ef1e0b47_cdb8c48d",
      "range": {
        "startLine": 24,
        "startChar": 6,
        "endLine": 25,
        "endChar": 21
      },
      "revId": "c07106f83948eacb1d79173c8da8b51d7e4b8289",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}