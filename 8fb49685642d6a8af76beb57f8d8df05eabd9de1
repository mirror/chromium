{
  "comments": [
    {
      "key": {
        "uuid": "7a2021f7_9a8e84f0",
        "filename": "third_party/WebKit/Source/core/dom/DocumentOrderedMap.cpp",
        "patchSetId": 14
      },
      "lineNbr": 209,
      "author": {
        "id": 1000098
      },
      "writtenOn": "2017-06-15T08:28:00Z",
      "side": 1,
      "message": "IIUC the condition that this function can be callable when\nentry has a cached |-\u003eelement|, i.e. this function should not\nbe called after the cache is cleared and before the cache is\nrecalculated (in Get\u003c\u003e function).\n\nSo if the understanding is true, rather than DCHECK(entry-\u003ecount),\nDCHECK(entry-\u003eelement);\nwill catch when the cache isn\u0027t yet calculated and this function\nshould not be called?",
      "revId": "8fb49685642d6a8af76beb57f8d8df05eabd9de1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c39ebf79_d3bbae3e",
        "filename": "third_party/WebKit/Source/core/dom/DocumentOrderedMap.cpp",
        "patchSetId": 14
      },
      "lineNbr": 209,
      "author": {
        "id": 1115903
      },
      "writtenOn": "2017-06-15T09:14:29Z",
      "side": 1,
      "message": "No, that is not intended usage of this function. This function is okay to return null here if they don\u0027t have a cache. null is one of the possible return values.\n\nWe use this fact in DCHECK() at several places. DCHECK the return value is caller\u0027s responsibility.",
      "parentUuid": "7a2021f7_9a8e84f0",
      "revId": "8fb49685642d6a8af76beb57f8d8df05eabd9de1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f22f5ccf_45f4b460",
        "filename": "third_party/WebKit/Source/core/dom/Node.cpp",
        "patchSetId": 14
      },
      "lineNbr": 2594,
      "author": {
        "id": 1000098
      },
      "writtenOn": "2017-06-16T05:54:12Z",
      "side": 1,
      "message": "nit: evalucated -\u003e evaluated",
      "revId": "8fb49685642d6a8af76beb57f8d8df05eabd9de1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "03fd057b_f8ebe811",
        "filename": "third_party/WebKit/Source/core/dom/Node.cpp",
        "patchSetId": 14
      },
      "lineNbr": 2594,
      "author": {
        "id": 1115903
      },
      "writtenOn": "2017-06-16T06:45:01Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f22f5ccf_45f4b460",
      "revId": "8fb49685642d6a8af76beb57f8d8df05eabd9de1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "74d6541f_de3c8acb",
        "filename": "third_party/WebKit/Source/core/dom/shadow/SlotAssignment.cpp",
        "patchSetId": 14
      },
      "lineNbr": 62,
      "author": {
        "id": 1000098
      },
      "writtenOn": "2017-06-15T08:28:00Z",
      "side": 1,
      "message": "How much does this change contribute to the performance gain?\ni.e. this can be replaced with FindSlotByName(slot_name) (as the old code did),\nwhich has more strong guarantee but could be slower.\nIf you expect the mapentry-\u003eelement is cached, the difference would be\nmarginal (if I read the DocumentOrderedMap::Get() correctly).",
      "revId": "8fb49685642d6a8af76beb57f8d8df05eabd9de1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "62bcdecf_cda25140",
        "filename": "third_party/WebKit/Source/core/dom/shadow/SlotAssignment.cpp",
        "patchSetId": 14
      },
      "lineNbr": 62,
      "author": {
        "id": 1115903
      },
      "writtenOn": "2017-06-15T09:14:29Z",
      "side": 1,
      "message": "This is not for the performance. This is rather for assertion that the first element is always on the cache if there is in the tree in this code path.\n\nWe can use FindSlotByName here. But it hides the fact that the first element is always on the cache. \n\nIn other words, if FindSlotByName returns an element, it always return the element from the cache without accessing node tree.\n\nSee post-condition DCHECK in DidAddSlot.",
      "parentUuid": "74d6541f_de3c8acb",
      "revId": "8fb49685642d6a8af76beb57f8d8df05eabd9de1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5a161e85_1086ec21",
        "filename": "third_party/WebKit/Source/core/dom/shadow/SlotAssignment.cpp",
        "patchSetId": 14
      },
      "lineNbr": 62,
      "author": {
        "id": 1115903
      },
      "writtenOn": "2017-06-16T04:33:12Z",
      "side": 1,
      "message": "Correction: We can\u0027t use FindSlotByName here because it might return a wrong result, based on the current tree status.\nWe *should* use GetCachedFirstSlotWithoutAccessingNodeTree here because what we are interested in the status of the tree before DOM mutation (slot insertion or slot removal) happened.",
      "parentUuid": "62bcdecf_cda25140",
      "revId": "8fb49685642d6a8af76beb57f8d8df05eabd9de1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a80b9720_8901684c",
        "filename": "third_party/WebKit/Source/core/dom/shadow/SlotAssignment.cpp",
        "patchSetId": 14
      },
      "lineNbr": 62,
      "author": {
        "id": 1000098
      },
      "writtenOn": "2017-06-16T05:54:12Z",
      "side": 1,
      "message": "Discussed offline.\n\nFor the record, the existence of the new GetCachedFirstSlotWithoutAccessingNodeTree()\ninterface is for supporting the removal case to see the old active at which point\nit is not connected and thus we have to resort to the cache to determine whether\nthe old slot was a primary slot for the name or not.",
      "parentUuid": "62bcdecf_cda25140",
      "revId": "8fb49685642d6a8af76beb57f8d8df05eabd9de1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "596bbb46_61d1a27f",
        "filename": "third_party/WebKit/Source/core/html/HTMLSlotElement.cpp",
        "patchSetId": 14
      },
      "lineNbr": 229,
      "author": {
        "id": 1000098
      },
      "writtenOn": "2017-06-16T05:54:12Z",
      "side": 1,
      "message": "nit: sr -\u003e srn (if sn \u003d s1, s2, ..., then sr1, sr2 \u003d srn)",
      "revId": "8fb49685642d6a8af76beb57f8d8df05eabd9de1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e49fae4a_892fb5c2",
        "filename": "third_party/WebKit/Source/core/html/HTMLSlotElement.cpp",
        "patchSetId": 14
      },
      "lineNbr": 229,
      "author": {
        "id": 1115903
      },
      "writtenOn": "2017-06-16T06:45:01Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "596bbb46_61d1a27f",
      "revId": "8fb49685642d6a8af76beb57f8d8df05eabd9de1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "307e4c2d_e633e4c7",
        "filename": "third_party/WebKit/Source/core/html/HTMLSlotElement.cpp",
        "patchSetId": 14
      },
      "lineNbr": 316,
      "author": {
        "id": 1000098
      },
      "writtenOn": "2017-06-16T05:54:12Z",
      "side": 1,
      "message": "nit: prefer early return style (if (!hasSlotableChild()) return;) here?",
      "revId": "8fb49685642d6a8af76beb57f8d8df05eabd9de1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0a643abc_1c903b4e",
        "filename": "third_party/WebKit/Source/core/html/HTMLSlotElement.cpp",
        "patchSetId": 14
      },
      "lineNbr": 316,
      "author": {
        "id": 1115903
      },
      "writtenOn": "2017-06-16T06:45:01Z",
      "side": 1,
      "message": "Hmm. I don\u0027t think early return is worth here.",
      "parentUuid": "307e4c2d_e633e4c7",
      "revId": "8fb49685642d6a8af76beb57f8d8df05eabd9de1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6f5cda64_eabe44a1",
        "filename": "third_party/WebKit/Source/core/html/HTMLSlotElement.cpp",
        "patchSetId": 14
      },
      "lineNbr": 325,
      "author": {
        "id": 1000098
      },
      "writtenOn": "2017-06-16T05:54:12Z",
      "side": 1,
      "message": "ditto",
      "revId": "8fb49685642d6a8af76beb57f8d8df05eabd9de1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6d2eecca_1d6774c6",
        "filename": "third_party/WebKit/Source/core/html/HTMLSlotElement.cpp",
        "patchSetId": 14
      },
      "lineNbr": 325,
      "author": {
        "id": 1115903
      },
      "writtenOn": "2017-06-16T06:45:01Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "6f5cda64_eabe44a1",
      "revId": "8fb49685642d6a8af76beb57f8d8df05eabd9de1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "41bb0646_47e32ead",
        "filename": "third_party/WebKit/Source/core/html/HTMLSlotElement.h",
        "patchSetId": 14
      },
      "lineNbr": 118,
      "author": {
        "id": 1000098
      },
      "writtenOn": "2017-06-16T05:54:12Z",
      "side": 1,
      "message": "has -\u003e Has",
      "revId": "8fb49685642d6a8af76beb57f8d8df05eabd9de1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5e1c62ae_c98e2c6a",
        "filename": "third_party/WebKit/Source/core/html/HTMLSlotElement.h",
        "patchSetId": 14
      },
      "lineNbr": 118,
      "author": {
        "id": 1115903
      },
      "writtenOn": "2017-06-16T06:45:01Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "41bb0646_47e32ead",
      "revId": "8fb49685642d6a8af76beb57f8d8df05eabd9de1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}