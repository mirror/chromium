{
  "comments": [
    {
      "key": {
        "uuid": "cd0e9ac0_2aef0587",
        "filename": "content/browser/bad_message.h",
        "patchSetId": 5
      },
      "lineNbr": 218,
      "author": {
        "id": 1001500
      },
      "writtenOn": "2017-08-14T17:34:03Z",
      "side": 1,
      "message": "This is needed for test code to be able to call this method.",
      "range": {
        "startLine": 218,
        "startChar": 0,
        "endLine": 218,
        "endChar": 14
      },
      "revId": "64c766cb6b53bd0ed2a1e069e0a29e5ddcdf0cb7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f27c26f9_6d555fb1",
        "filename": "content/browser/isolated_origin_browsertest.cc",
        "patchSetId": 5
      },
      "lineNbr": 513,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-08-15T16:57:47Z",
      "side": 1,
      "message": "Nit: explicit \u003d)",
      "revId": "64c766cb6b53bd0ed2a1e069e0a29e5ddcdf0cb7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "89c8a63f_122fd6c6",
        "filename": "content/browser/isolated_origin_browsertest.cc",
        "patchSetId": 5
      },
      "lineNbr": 514,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-08-14T23:44:43Z",
      "side": 1,
      "message": "nit: handling",
      "range": {
        "startLine": 514,
        "startChar": 37,
        "endLine": 514,
        "endChar": 45
      },
      "revId": "64c766cb6b53bd0ed2a1e069e0a29e5ddcdf0cb7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1df7248d_9013dff1",
        "filename": "content/browser/isolated_origin_browsertest.cc",
        "patchSetId": 5
      },
      "lineNbr": 514,
      "author": {
        "id": 1001500
      },
      "writtenOn": "2017-08-15T16:58:20Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "89c8a63f_122fd6c6",
      "range": {
        "startLine": 514,
        "startChar": 37,
        "endLine": 514,
        "endChar": 45
      },
      "revId": "64c766cb6b53bd0ed2a1e069e0a29e5ddcdf0cb7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fedda5ac_32c20ec0",
        "filename": "content/browser/isolated_origin_browsertest.cc",
        "patchSetId": 5
      },
      "lineNbr": 517,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-08-14T23:44:43Z",
      "side": 1,
      "message": "This feels a bit odd, like it\u0027s not testing the actual logic which is supposed to kill the renderer.  If that part regressed, we might not know it because the test would go on killing.  I don\u0027t suppose there\u0027s any alternatives?",
      "revId": "64c766cb6b53bd0ed2a1e069e0a29e5ddcdf0cb7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8bfb253c_5eb8c27a",
        "filename": "content/browser/isolated_origin_browsertest.cc",
        "patchSetId": 5
      },
      "lineNbr": 517,
      "author": {
        "id": 1001500
      },
      "writtenOn": "2017-08-15T16:58:20Z",
      "side": 1,
      "message": "There is an actual separate test which ensures that Mojo kills the renderer process if ReportBadMessage is called during processing of an interface method call.\n\nBecause I am acting as a man-in-the-middle on the interface, the connection to the real StoragePartitionService is lacking the process id, so Mojo cannot kill the process. However, the call that does process termination works with callbacks and if a generic error handler is registered, it will call it. \n\nThe goal of this part is to register this default callback, which basically restores the process termination behavior.\n\nI looked at alternatives, but couldn\u0027t find a good one. Without some support for man-in-the-middle type testing in Mojo, the only way is to add testing hooks in the actual StoragePartitionImpl code. I don\u0027t think that approach is the right way to go, as I would like us to test the real implementation without it branching on test hooks and prefer this workaround. We also have a thread on chromium-mojo@ to see if there is a way to solve this a bit more generically.",
      "parentUuid": "fedda5ac_32c20ec0",
      "revId": "64c766cb6b53bd0ed2a1e069e0a29e5ddcdf0cb7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "16e087a3_7228d19c",
        "filename": "content/browser/isolated_origin_browsertest.cc",
        "patchSetId": 5
      },
      "lineNbr": 517,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-08-16T01:18:14Z",
      "side": 1,
      "message": "\u003e There is an actual separate test which ensures that Mojo kills the renderer process if ReportBadMessage is called during processing of an interface method call.\n\nFor reference, which test is that?\n\n\u003e \n\u003e Because I am acting as a man-in-the-middle on the interface, the connection to the real StoragePartitionService is lacking the process id, so Mojo cannot kill the process. However, the call that does process termination works with callbacks and if a generic error handler is registered, it will call it. \n\u003e \n\u003e The goal of this part is to register this default callback, which basically restores the process termination behavior.\n\u003e \n\u003e I looked at alternatives, but couldn\u0027t find a good one. Without some support for man-in-the-middle type testing in Mojo, the only way is to add testing hooks in the actual StoragePartitionImpl code. I don\u0027t think that approach is the right way to go, as I would like us to test the real implementation without it branching on test hooks and prefer this workaround. We also have a thread on chromium-mojo@ to see if there is a way to solve this a bit more generically.\n\nMaybe Daniel\u0027s idea for the routing table?  :)  (I don\u0027t have any understanding of the Mojo code here, but I\u0027m hoping to find something where the test mimics an exploited renderer talking to a real browser process as much as possible.)",
      "parentUuid": "8bfb253c_5eb8c27a",
      "revId": "64c766cb6b53bd0ed2a1e069e0a29e5ddcdf0cb7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3541b969_93b15507",
        "filename": "content/browser/isolated_origin_browsertest.cc",
        "patchSetId": 5
      },
      "lineNbr": 517,
      "author": {
        "id": 1001500
      },
      "writtenOn": "2017-08-16T18:26:46Z",
      "side": 1,
      "message": "\u003e \u003e There is an actual separate test which ensures that Mojo kills the renderer process if ReportBadMessage is called during processing of an interface method call.\n\u003e \n\u003e For reference, which test is that?\n\nKillProcessOnBadMojoMessage\nhttps://cs.chromium.org/chromium/src/content/browser/renderer_host/render_process_host_browsertest.cc?q\u003dKillProcessOnBadMojoMessage\u0026l\u003d409\n\n\u003e \u003e Because I am acting as a man-in-the-middle on the interface, the connection to the real StoragePartitionService is lacking the process id, so Mojo cannot kill the process. However, the call that does process termination works with callbacks and if a generic error handler is registered, it will call it. \n\u003e \u003e \n\u003e \u003e The goal of this part is to register this default callback, which basically restores the process termination behavior.\n\u003e \u003e \n\u003e \u003e I looked at alternatives, but couldn\u0027t find a good one. Without some support for man-in-the-middle type testing in Mojo, the only way is to add testing hooks in the actual StoragePartitionImpl code. I don\u0027t think that approach is the right way to go, as I would like us to test the real implementation without it branching on test hooks and prefer this workaround. We also have a thread on chromium-mojo@ to see if there is a way to solve this a bit more generically.\n\u003e \n\u003e Maybe Daniel\u0027s idea for the routing table?  :)  (I don\u0027t have any understanding of the Mojo code here, but I\u0027m hoping to find something where the test mimics an exploited renderer talking to a real browser process as much as possible.)\n\nI agree that we need to find a better way to do this. Do you think it should block landing this CL?",
      "parentUuid": "16e087a3_7228d19c",
      "revId": "64c766cb6b53bd0ed2a1e069e0a29e5ddcdf0cb7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f89daa50_f88a096c",
        "filename": "content/browser/storage_partition_impl.cc",
        "patchSetId": 5
      },
      "lineNbr": 643,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-08-14T23:44:43Z",
      "side": 1,
      "message": "There\u0027s no documentation on ReportBadMessage.  How closely does it compare with content::ReceivedBadMessage, which kills the renderer, installs a crash key for the code, and updates a UMA metric?",
      "revId": "64c766cb6b53bd0ed2a1e069e0a29e5ddcdf0cb7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "345d050f_07353040",
        "filename": "content/browser/storage_partition_impl.cc",
        "patchSetId": 5
      },
      "lineNbr": 643,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-08-15T16:57:47Z",
      "side": 1,
      "message": "ReportBadMessage is a lot more abstract than ReceivedBadMessage. AFAICT, it invokes the error callback associated with the current message dispatch context: for messages dispatched from a message pipe associated with a renderer, this is suppose to be hooked up to kill the renderer.\n\nUnfortunately, I don\u0027t think it does a UMA today like content does, given that we\u0027re just logging a string.\n\nThat being said, I\u0027m not sure *where* the actual plumbing that sets up the callback is; rockot@ might know \u003d)",
      "parentUuid": "f89daa50_f88a096c",
      "revId": "64c766cb6b53bd0ed2a1e069e0a29e5ddcdf0cb7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "be416f46_a94ef8e3",
        "filename": "content/browser/storage_partition_impl.cc",
        "patchSetId": 5
      },
      "lineNbr": 643,
      "author": {
        "id": 1001500
      },
      "writtenOn": "2017-08-15T16:58:20Z",
      "side": 1,
      "message": "It calls ReceivedBadMessage as far as I\u0027ve traced it, but doesn\u0027t specify a different termination reason (I think it maps it all to RPH_MOJO_PROCESS_ERROR \u003d 123). Maybe a good bug to file to allow for the reason code to be plumbed through.",
      "parentUuid": "f89daa50_f88a096c",
      "revId": "64c766cb6b53bd0ed2a1e069e0a29e5ddcdf0cb7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c35d6eb3_5027de38",
        "filename": "content/browser/storage_partition_impl.cc",
        "patchSetId": 5
      },
      "lineNbr": 643,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-08-16T01:18:14Z",
      "side": 1,
      "message": "Oh dear.  From past experience, that means any bug for tracking renderer kill 123 is going to become a dumping ground for lots of random types of renderer kills.  That will make it extraordinarily difficult to triage/track/close the bug because there will always be new instances with different stacks, and it\u0027s hard to tell from the crash numbers which ones are the most pressing.\n\nWe put a lot of effort into getting unique magic signatures for different types of renderer kills in ReceivedBadMessage.  I think it\u0027s going to be critical to find a way to support something like that for Mojo.",
      "parentUuid": "be416f46_a94ef8e3",
      "revId": "64c766cb6b53bd0ed2a1e069e0a29e5ddcdf0cb7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7c6effe4_ee1ce31a",
        "filename": "content/browser/storage_partition_impl.cc",
        "patchSetId": 5
      },
      "lineNbr": 643,
      "author": {
        "id": 1001500
      },
      "writtenOn": "2017-08-16T18:26:46Z",
      "side": 1,
      "message": "Filed https://bugs.chromium.org/p/chromium/issues/detail?id\u003d756115.",
      "parentUuid": "c35d6eb3_5027de38",
      "revId": "64c766cb6b53bd0ed2a1e069e0a29e5ddcdf0cb7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b20fe634_c11981ab",
        "filename": "content/browser/storage_partition_impl.h",
        "patchSetId": 5
      },
      "lineNbr": 256,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-08-14T23:44:43Z",
      "side": 1,
      "message": "Please document what the int is.",
      "revId": "64c766cb6b53bd0ed2a1e069e0a29e5ddcdf0cb7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e6ab67bc_bdf61f37",
        "filename": "content/browser/storage_partition_impl.h",
        "patchSetId": 5
      },
      "lineNbr": 256,
      "author": {
        "id": 1001500
      },
      "writtenOn": "2017-08-15T16:58:20Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b20fe634_c11981ab",
      "revId": "64c766cb6b53bd0ed2a1e069e0a29e5ddcdf0cb7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}