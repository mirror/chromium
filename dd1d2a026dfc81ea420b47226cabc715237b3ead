{
  "comments": [
    {
      "key": {
        "uuid": "477c930e_fe9eb934",
        "filename": "third_party/WebKit/Source/platform/graphics/ImageDecodingStore.h",
        "patchSetId": 2
      },
      "lineNbr": 203,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2017-12-09T02:01:34Z",
      "side": 0,
      "message": "Why is the test of !value.gen_ being removed too? I\u0027m having a hard time understanding this code and how it\u0027s safe_to_compare_to_empty_or_deleted (per DefaultHash\u003cblink::DecoderCacheKey\u003e), and in particular who resets the fields of DecoderCacheKey, if that\u0027s what happens.",
      "revId": "dd1d2a026dfc81ea420b47226cabc715237b3ead",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bd34b93f_6fd0ca2b",
        "filename": "third_party/WebKit/Source/platform/graphics/ImageDecodingStore.h",
        "patchSetId": 2
      },
      "lineNbr": 203,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2017-12-09T02:28:02Z",
      "side": 0,
      "message": "To be explicit: I could approve this if the only change were to the comparison of value.alpha_option_. Also, you could consider adding a kIllegalAlphaOption to ImageDecoder.h and using that only in ConstructDeletedValue and here; that would also seem safe (and would eliminate the static_cast).",
      "parentUuid": "477c930e_fe9eb934",
      "revId": "dd1d2a026dfc81ea420b47226cabc715237b3ead",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "487d9d76_5e001118",
        "filename": "third_party/WebKit/Source/platform/graphics/ImageDecodingStore.h",
        "patchSetId": 2
      },
      "lineNbr": 203,
      "author": {
        "id": 1002927
      },
      "writtenOn": "2017-12-09T02:39:25Z",
      "side": 0,
      "message": "I believe (but I\u0027m not super familiar with how WTF\u0027s hash structures work) that just having a size_ that\u0027s (-1,-1) is enough mark a key as deleted. That\u0027s why I removed the gen_ comparison: it shouldn\u0027t matter.\n\nI believe safe_to_compare_to_empty_or_deleted still holds: any valid key will compare non-equal to a deleted key, because a valid key can\u0027t, I belive, have a negative size like that.\n\nThe reason I\u0027m removing gen_ also is that since I\u0027m arguing that there\u0027s no need to compare the alpha_option_, there\u0027s by the same reasoning no need to compare gen_ and it would be odd to leave it in.\n\n\nI\u0027m not sure what you mean by \"who resets the fields of DecoderCachceKey\". I don\u0027t think they need to be reset for the deleted key case, besides that the size_ fields needs to be set to -1,-1.",
      "parentUuid": "bd34b93f_6fd0ca2b",
      "revId": "dd1d2a026dfc81ea420b47226cabc715237b3ead",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7d7d3df8_df105971",
        "filename": "third_party/WebKit/Source/platform/graphics/ImageDecodingStore.h",
        "patchSetId": 2
      },
      "lineNbr": 203,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2017-12-09T03:34:10Z",
      "side": 0,
      "message": "I\u0027m not an expert on WTF\u0027s hash structures and was confused about the concept of deleted keys. Thought perhaps the DecoderCacheKeys were being deleted but left in-memory at some particular address (since DecoderCacheKey has no destructor), and that someone was supposed to come in and mutate its fields to be the deleted values.\n\nReading HashTable.h and related files I now understand that these deleted keys are only created via the traits\u0027 ConstructDeletedValue.",
      "parentUuid": "487d9d76_5e001118",
      "revId": "dd1d2a026dfc81ea420b47226cabc715237b3ead",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}