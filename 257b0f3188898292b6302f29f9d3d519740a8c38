{
  "comments": [
    {
      "key": {
        "uuid": "29437cb2_275ddff9",
        "filename": "components/safe_browsing/triggers/BUILD.gn",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 1144039
      },
      "writtenOn": "2017-07-05T16:46:04Z",
      "side": 1,
      "message": "Just a suggestion: If you make a separate target for the code and the test, you can compile and test your changes more granularly. This becomes much more useful when the directory becomes more populated.",
      "range": {
        "startLine": 11,
        "startChar": 5,
        "endLine": 11,
        "endChar": 22
      },
      "revId": "257b0f3188898292b6302f29f9d3d519740a8c38",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7bfbe3f8_a8550cbe",
        "filename": "components/safe_browsing/triggers/BUILD.gn",
        "patchSetId": 1
      },
      "lineNbr": 11,
      "author": {
        "id": 1168342
      },
      "writtenOn": "2017-07-06T16:26:38Z",
      "side": 1,
      "message": "Done for the code, i find --gtest_filter does a good job for the tests",
      "parentUuid": "29437cb2_275ddff9",
      "range": {
        "startLine": 11,
        "startChar": 5,
        "endLine": 11,
        "endChar": 22
      },
      "revId": "257b0f3188898292b6302f29f9d3d519740a8c38",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a47a91b4_8d64b20a",
        "filename": "components/safe_browsing/triggers/trigger_throttler.cc",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 1144039
      },
      "writtenOn": "2017-07-05T16:46:04Z",
      "side": 1,
      "message": "Use std::numeric_limits\u003csize_t\u003e::max() instead",
      "range": {
        "startLine": 13,
        "startChar": 10,
        "endLine": 13,
        "endChar": 32
      },
      "revId": "257b0f3188898292b6302f29f9d3d519740a8c38",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "97ea115d_4133fbc9",
        "filename": "components/safe_browsing/triggers/trigger_throttler.cc",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 1168342
      },
      "writtenOn": "2017-07-06T16:26:38Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a47a91b4_8d64b20a",
      "range": {
        "startLine": 13,
        "startChar": 10,
        "endLine": 13,
        "endChar": 32
      },
      "revId": "257b0f3188898292b6302f29f9d3d519740a8c38",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b3fef438_d7f9e756",
        "filename": "components/safe_browsing/triggers/trigger_throttler.cc",
        "patchSetId": 1
      },
      "lineNbr": 15,
      "author": {
        "id": 1144039
      },
      "writtenOn": "2017-07-05T16:46:04Z",
      "side": 1,
      "message": "This should return size_t (non-negative)",
      "range": {
        "startLine": 15,
        "startChar": 4,
        "endLine": 15,
        "endChar": 27
      },
      "revId": "257b0f3188898292b6302f29f9d3d519740a8c38",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b2bf8563_e21bea53",
        "filename": "components/safe_browsing/triggers/trigger_throttler.cc",
        "patchSetId": 1
      },
      "lineNbr": 15,
      "author": {
        "id": 1168342
      },
      "writtenOn": "2017-07-06T16:26:38Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b3fef438_d7f9e756",
      "range": {
        "startLine": 15,
        "startChar": 4,
        "endLine": 15,
        "endChar": 27
      },
      "revId": "257b0f3188898292b6302f29f9d3d519740a8c38",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "98ad8050_3a42da42",
        "filename": "components/safe_browsing/triggers/trigger_throttler.cc",
        "patchSetId": 1
      },
      "lineNbr": 21,
      "author": {
        "id": 1144039
      },
      "writtenOn": "2017-07-05T16:46:04Z",
      "side": 1,
      "message": "I am afraid that having a default here might cause silent skipping of triggers.\n\nDo you think it would be better to have a NOTREACHED here?\nWhat\u0027s a valid use-case for a trigger type with no quota?",
      "range": {
        "startLine": 21,
        "startChar": 8,
        "endLine": 21,
        "endChar": 9
      },
      "revId": "257b0f3188898292b6302f29f9d3d519740a8c38",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b624fb46_f2db8cb4",
        "filename": "components/safe_browsing/triggers/trigger_throttler.cc",
        "patchSetId": 1
      },
      "lineNbr": 21,
      "author": {
        "id": 1168342
      },
      "writtenOn": "2017-07-06T16:26:38Z",
      "side": 1,
      "message": "The goal is for most triggers to have quota configured via a Finch param (upcoming CL). Zero quota is valid if you want to disable a trigger via Finch.\n\nIn general, though, I think it\u0027s safer to err on the side of skipping triggers, except for ones that are hardcoded here.\n\nAlso note that the absence of a \"default:\" case in the switch statement will cause a compile error if new enums are added but not handled here, which will force us to remember to update this code. I imagine this function will look like this in the future:\n\nswitch(type)\n case SECURITY_INTERSTITIAL: \n   return unlimited;\n case TRIG1:\n case TRIG2:\n   return GetQuotaFromFinch(type);",
      "parentUuid": "98ad8050_3a42da42",
      "range": {
        "startLine": 21,
        "startChar": 8,
        "endLine": 21,
        "endChar": 9
      },
      "revId": "257b0f3188898292b6302f29f9d3d519740a8c38",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d0f2eb8b_ecaac86e",
        "filename": "components/safe_browsing/triggers/trigger_throttler.cc",
        "patchSetId": 1
      },
      "lineNbr": 21,
      "author": {
        "id": 1144039
      },
      "writtenOn": "2017-07-06T17:00:48Z",
      "side": 1,
      "message": "\u003e The goal is for most triggers to have quota configured via a Finch param (upcoming CL). Zero quota is valid if you want to disable a trigger via Finch.\n\u003e \nAck\n\n\u003e In general, though, I think it\u0027s safer to err on the side of skipping triggers, except for ones that are hardcoded here.\n\u003e \nAck\n\n\u003e Also note that the absence of a \"default:\" case in the switch statement will cause a compile error if new enums are added but not handled here, which will force us to remember to update this code. I imagine this function will look like this in the future:\n\u003e \n\u003e switch(type)\n\u003e  case SECURITY_INTERSTITIAL: \n\u003e    return unlimited;\n\u003e  case TRIG1:\n\u003e  case TRIG2:\n\u003e    return GetQuotaFromFinch(type);\nAck. I tend to get confused by the compiler behavior for switch (enum) unhandled value case.",
      "parentUuid": "b624fb46_f2db8cb4",
      "range": {
        "startLine": 21,
        "startChar": 8,
        "endLine": 21,
        "endChar": 9
      },
      "revId": "257b0f3188898292b6302f29f9d3d519740a8c38",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "81d961a0_97e3bed2",
        "filename": "components/safe_browsing/triggers/trigger_throttler.cc",
        "patchSetId": 1
      },
      "lineNbr": 49,
      "author": {
        "id": 1144039
      },
      "writtenOn": "2017-07-05T16:46:04Z",
      "side": 1,
      "message": "then you probably won\u0027t need this cast.",
      "range": {
        "startLine": 49,
        "startChar": 22,
        "endLine": 49,
        "endChar": 33
      },
      "revId": "257b0f3188898292b6302f29f9d3d519740a8c38",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9c1a4d86_70a96797",
        "filename": "components/safe_browsing/triggers/trigger_throttler.cc",
        "patchSetId": 1
      },
      "lineNbr": 49,
      "author": {
        "id": 1168342
      },
      "writtenOn": "2017-07-06T16:26:38Z",
      "side": 1,
      "message": "Thanks, this cleans things up nicely",
      "parentUuid": "81d961a0_97e3bed2",
      "range": {
        "startLine": 49,
        "startChar": 22,
        "endLine": 49,
        "endChar": 33
      },
      "revId": "257b0f3188898292b6302f29f9d3d519740a8c38",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b8baa237_b1e8f6e9",
        "filename": "components/safe_browsing/triggers/trigger_throttler.cc",
        "patchSetId": 1
      },
      "lineNbr": 83,
      "author": {
        "id": 1144039
      },
      "writtenOn": "2017-07-05T16:46:04Z",
      "side": 1,
      "message": "since we\u0027re using FromDays(1) in two places, I think it\u0027d be best to have a constant defined on top for this value (1) and use that in both the places.",
      "range": {
        "startLine": 83,
        "startChar": 77,
        "endLine": 83,
        "endChar": 78
      },
      "revId": "257b0f3188898292b6302f29f9d3d519740a8c38",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cbc5a941_3e36e95f",
        "filename": "components/safe_browsing/triggers/trigger_throttler.cc",
        "patchSetId": 1
      },
      "lineNbr": 83,
      "author": {
        "id": 1168342
      },
      "writtenOn": "2017-07-06T16:26:38Z",
      "side": 1,
      "message": "Added a constant for FromDays(1) so we don\u0027t have to keep constructing the TimeDelta",
      "parentUuid": "b8baa237_b1e8f6e9",
      "range": {
        "startLine": 83,
        "startChar": 77,
        "endLine": 83,
        "endChar": 78
      },
      "revId": "257b0f3188898292b6302f29f9d3d519740a8c38",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5b1852ef_61e6a7c0",
        "filename": "components/safe_browsing/triggers/trigger_throttler.cc",
        "patchSetId": 1
      },
      "lineNbr": 93,
      "author": {
        "id": 1144039
      },
      "writtenOn": "2017-07-05T16:46:04Z",
      "side": 1,
      "message": "When can this happen?\n\ntmp_trigger_times is strictly a subset of trigger_times so this condition implies that trigger_times.size() for events with \"timestamp \u003e min_timestamp.ToTimeT()\" can be greater than trigger_quota. How is that possible?",
      "range": {
        "startLine": 93,
        "startChar": 27,
        "endLine": 93,
        "endChar": 44
      },
      "revId": "257b0f3188898292b6302f29f9d3d519740a8c38",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bc92d68c_03455b0c",
        "filename": "components/safe_browsing/triggers/trigger_throttler.cc",
        "patchSetId": 1
      },
      "lineNbr": 93,
      "author": {
        "id": 1168342
      },
      "writtenOn": "2017-07-06T16:26:38Z",
      "side": 1,
      "message": "Two things I intend to add are Finch controls for quota, and having a pref to mirror this map (so we could persist quota in between restarts). So a possible corner case would be: quota is used up for the day and a Finch change is pending to reduce quota for this trigger. When the user restarts, we output the existing events and then load them on startup, and have to delete more events to match the new quota from Finch.\n\nPerhaps this is overkill, and just trimming based on timestamp is enough. Also, the current method is pretty inefficient, so I\u0027m open to discussion here :)",
      "parentUuid": "5b1852ef_61e6a7c0",
      "range": {
        "startLine": 93,
        "startChar": 27,
        "endLine": 93,
        "endChar": 44
      },
      "revId": "257b0f3188898292b6302f29f9d3d519740a8c38",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "07cfe9f7_2202e5ad",
        "filename": "components/safe_browsing/triggers/trigger_throttler.cc",
        "patchSetId": 1
      },
      "lineNbr": 93,
      "author": {
        "id": 1144039
      },
      "writtenOn": "2017-07-06T17:00:48Z",
      "side": 1,
      "message": "Thanks for the clear explanation. So, to hit the corner case, it\u0027d require that:\n1. The user has already hit their existing trigger_type limit.\n2. They restart browser.\n3. The limit for the said trigger_type ought to have been lowered recently via Finch. (Unlikely this\u0027ll happen.)\n\nI am not sure the additional complexity is worth it for such a specific corner case.\nI\u0027ll defer to you on that but if you decide to keep this check, please add a detailed comment explaining when this\u0027ll be useful because it is not clear from reading the code.",
      "parentUuid": "bc92d68c_03455b0c",
      "range": {
        "startLine": 93,
        "startChar": 27,
        "endLine": 93,
        "endChar": 44
      },
      "revId": "257b0f3188898292b6302f29f9d3d519740a8c38",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ede8d9fd_a9af19a4",
        "filename": "components/safe_browsing/triggers/trigger_throttler.cc",
        "patchSetId": 1
      },
      "lineNbr": 101,
      "author": {
        "id": 1144039
      },
      "writtenOn": "2017-07-05T16:46:04Z",
      "side": 1,
      "message": "trigger_events_[trigger_type].swap(tmp_trigger_times) might be more efficient.",
      "range": {
        "startLine": 101,
        "startChar": 4,
        "endLine": 101,
        "endChar": 53
      },
      "revId": "257b0f3188898292b6302f29f9d3d519740a8c38",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5e8a3bde_d10e1dae",
        "filename": "components/safe_browsing/triggers/trigger_throttler.cc",
        "patchSetId": 1
      },
      "lineNbr": 101,
      "author": {
        "id": 1168342
      },
      "writtenOn": "2017-07-06T16:26:38Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ede8d9fd_a9af19a4",
      "range": {
        "startLine": 101,
        "startChar": 4,
        "endLine": 101,
        "endChar": 53
      },
      "revId": "257b0f3188898292b6302f29f9d3d519740a8c38",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "020a98d1_f0ab4037",
        "filename": "components/safe_browsing/triggers/trigger_throttler.h",
        "patchSetId": 1
      },
      "lineNbr": 16,
      "author": {
        "id": 1144039
      },
      "writtenOn": "2017-07-05T16:46:04Z",
      "side": 1,
      "message": "since this is in the safe_browsing namespace, can we drop the prefix \u0027SafeBrowsing\u0027?",
      "range": {
        "startLine": 16,
        "startChar": 11,
        "endLine": 16,
        "endChar": 34
      },
      "revId": "257b0f3188898292b6302f29f9d3d519740a8c38",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "64e009a8_a1eeea0e",
        "filename": "components/safe_browsing/triggers/trigger_throttler.h",
        "patchSetId": 1
      },
      "lineNbr": 16,
      "author": {
        "id": 1168342
      },
      "writtenOn": "2017-07-06T16:26:38Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "020a98d1_f0ab4037",
      "range": {
        "startLine": 16,
        "startChar": 11,
        "endLine": 16,
        "endChar": 34
      },
      "revId": "257b0f3188898292b6302f29f9d3d519740a8c38",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5133d07b_0f57f10d",
        "filename": "components/safe_browsing/triggers/trigger_throttler.h",
        "patchSetId": 1
      },
      "lineNbr": 58,
      "author": {
        "id": 1144039
      },
      "writtenOn": "2017-07-05T16:46:04Z",
      "side": 1,
      "message": "nit: remove",
      "range": {
        "startLine": 58,
        "startChar": 3,
        "endLine": 58,
        "endChar": 12
      },
      "revId": "257b0f3188898292b6302f29f9d3d519740a8c38",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5674ee00_2fadd133",
        "filename": "components/safe_browsing/triggers/trigger_throttler.h",
        "patchSetId": 1
      },
      "lineNbr": 58,
      "author": {
        "id": 1168342
      },
      "writtenOn": "2017-07-06T16:26:38Z",
      "side": 1,
      "message": "oops, done.",
      "parentUuid": "5133d07b_0f57f10d",
      "range": {
        "startLine": 58,
        "startChar": 3,
        "endLine": 58,
        "endChar": 12
      },
      "revId": "257b0f3188898292b6302f29f9d3d519740a8c38",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "25000a5b_25339848",
        "filename": "components/safe_browsing/triggers/trigger_throttler_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 12,
      "author": {
        "id": 1144039
      },
      "writtenOn": "2017-07-05T16:46:04Z",
      "side": 1,
      "message": "Since we\u0027re adding a bunch of code for other trigger types, I am thinking if it\u0027d be worthwhile to add an UNUSED enum value so that we can test out the code. I\u0027m not sure if that\u0027s the right thing to do.",
      "range": {
        "startLine": 12,
        "startChar": 0,
        "endLine": 12,
        "endChar": 65
      },
      "revId": "257b0f3188898292b6302f29f9d3d519740a8c38",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f08c01fa_9f61c674",
        "filename": "components/safe_browsing/triggers/trigger_throttler_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 12,
      "author": {
        "id": 1168342
      },
      "writtenOn": "2017-07-06T16:26:38Z",
      "side": 1,
      "message": "I did some adhoc testing with the existing enum, and i plan to add proper coverage for the rest of the code next week. So I\u0027d prefer not add a test-only enum.",
      "parentUuid": "25000a5b_25339848",
      "range": {
        "startLine": 12,
        "startChar": 0,
        "endLine": 12,
        "endChar": 65
      },
      "revId": "257b0f3188898292b6302f29f9d3d519740a8c38",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}