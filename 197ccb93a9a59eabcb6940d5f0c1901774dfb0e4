{
  "comments": [
    {
      "key": {
        "uuid": "48121360_068959dd",
        "filename": "content/common/page_state_serialization.cc",
        "patchSetId": 1
      },
      "lineNbr": 568,
      "author": {
        "id": 1189064
      },
      "writtenOn": "2017-08-11T21:45:43Z",
      "side": 1,
      "message": "This version \u003e\u003d 26 check is a temportary workaround for the fact that unique_name_helper_unittest simulates legacy encoding by stamping an artificially low version(24) onto the encoding produced by the latest versions of WritePageState/WriteFrameState. This simulation fails if the latest versions of WritePageState/WriteFrameState alter the serialization format, since we\u0027re telling ReadFrameState to read format v24 from a v26 object. This possibility was foreseen and discussed when unique_name_helper_unittest was reviewed, but no consensus was reached on the best way to deal with it.",
      "revId": "197ccb93a9a59eabcb6940d5f0c1901774dfb0e4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7538bf29_a48407b5",
        "filename": "content/common/page_state_serialization.cc",
        "patchSetId": 1
      },
      "lineNbr": 568,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-08-11T21:47:56Z",
      "side": 1,
      "message": "Daniel, can you take a look at this?",
      "parentUuid": "48121360_068959dd",
      "revId": "197ccb93a9a59eabcb6940d5f0c1901774dfb0e4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "faec45e0_8dffae17",
        "filename": "content/common/page_state_serialization.cc",
        "patchSetId": 1
      },
      "lineNbr": 568,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-08-14T18:19:56Z",
      "side": 1,
      "message": "Hmm.... yeah I don\u0027t have good ideas on this.\n\nOn the one hand, it\u0027s nice to be able to an end-to-end test that the page serialization code works. On the other, it\u0027s kind of unfortunate that versioning is encoded in both the read and write methods now...\n\nOne random thought:\nCould we pull out the existing body into a WriteFrameStateV24(...), and change WriteFrameState() to delegate to WriteFrameStateV24() and then the other stuff? The test in question would just call WriteFrameStateV24 instead. WDYT?",
      "parentUuid": "7538bf29_a48407b5",
      "revId": "197ccb93a9a59eabcb6940d5f0c1901774dfb0e4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "574666cf_891f967f",
        "filename": "content/common/page_state_serialization.cc",
        "patchSetId": 1
      },
      "lineNbr": 568,
      "author": {
        "id": 1189064
      },
      "writtenOn": "2017-08-14T18:29:28Z",
      "side": 1,
      "message": "I think this would work and I\u0027ll give it a try. But I was curious about a comment you made in the review that introduced the tests in question:\n\"Though I really hope it doesn\u0027t happen because then we need to test 24 -\u003e 26, 24 -\u003e 25, and 25 -\u003e 25\"\n\nIf we write a WriteFrameStateV24(), would we need to test migrating from 24 to every subsequent version? Wouldn\u0027t that (eventually) require a WriteFrameStateV25(), WriteFrameStateV26, etc.?",
      "parentUuid": "faec45e0_8dffae17",
      "revId": "197ccb93a9a59eabcb6940d5f0c1901774dfb0e4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "084e46ce_5fbb3580",
        "filename": "content/common/page_state_serialization.cc",
        "patchSetId": 1
      },
      "lineNbr": 568,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-08-14T18:42:45Z",
      "side": 1,
      "message": "I think it would be limited to instances where we need to specifically test complicated migration code. I wouldn\u0027t expect this to happen with every version change.",
      "parentUuid": "574666cf_891f967f",
      "revId": "197ccb93a9a59eabcb6940d5f0c1901774dfb0e4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a802d199_4bd83254",
        "filename": "third_party/WebKit/Source/core/layout/ScrollAnchor.h",
        "patchSetId": 1
      },
      "lineNbr": 69,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-08-14T18:19:56Z",
      "side": 1,
      "message": "Consider using the default constructor + String::empty()",
      "revId": "197ccb93a9a59eabcb6940d5f0c1901774dfb0e4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "83e2cbb2_3e1e8837",
        "filename": "third_party/WebKit/Source/core/loader/HistoryItem.cpp",
        "patchSetId": 1
      },
      "lineNbr": 96,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-08-14T18:19:56Z",
      "side": 1,
      "message": "Nit: const String\u0026",
      "range": {
        "startLine": 96,
        "startChar": 42,
        "endLine": 96,
        "endChar": 49
      },
      "revId": "197ccb93a9a59eabcb6940d5f0c1901774dfb0e4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1e907257_d2d6274a",
        "filename": "third_party/WebKit/Source/core/loader/HistoryItem.cpp",
        "patchSetId": 1
      },
      "lineNbr": 102,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-08-14T18:19:56Z",
      "side": 1,
      "message": "Nit: it seems more common to pass this by ref",
      "range": {
        "startLine": 102,
        "startChar": 40,
        "endLine": 102,
        "endChar": 52
      },
      "revId": "197ccb93a9a59eabcb6940d5f0c1901774dfb0e4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}