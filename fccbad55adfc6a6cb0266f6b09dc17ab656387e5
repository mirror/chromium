{
  "comments": [
    {
      "key": {
        "uuid": "811e9158_10d998cf",
        "filename": "cc/scheduler/scheduler_state_machine.h",
        "patchSetId": 5
      },
      "lineNbr": 424,
      "author": {
        "id": 1002151
      },
      "writtenOn": "2017-07-24T21:05:25Z",
      "side": 1,
      "message": "The variable name gave me the impression that it applies to the current active tree, but it actually applies to the next.\n\nWould \"pending_tree_needs_draw_once_active\" be a better name?",
      "revId": "fccbad55adfc6a6cb0266f6b09dc17ab656387e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "34b71bd0_3a030fcf",
        "filename": "cc/scheduler/scheduler_state_machine.h",
        "patchSetId": 5
      },
      "lineNbr": 424,
      "author": {
        "id": 1145109
      },
      "writtenOn": "2017-07-24T22:23:01Z",
      "side": 1,
      "message": "How about |pending_tree_needs_first_draw_on_activation_|?",
      "parentUuid": "811e9158_10d998cf",
      "revId": "fccbad55adfc6a6cb0266f6b09dc17ab656387e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "72ea5852_7223c30b",
        "filename": "cc/scheduler/scheduler_state_machine.h",
        "patchSetId": 5
      },
      "lineNbr": 424,
      "author": {
        "id": 1002151
      },
      "writtenOn": "2017-07-24T23:55:00Z",
      "side": 1,
      "message": "sgtm",
      "parentUuid": "34b71bd0_3a030fcf",
      "revId": "fccbad55adfc6a6cb0266f6b09dc17ab656387e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6deb949b_104d720c",
        "filename": "cc/scheduler/scheduler_state_machine.h",
        "patchSetId": 5
      },
      "lineNbr": 424,
      "author": {
        "id": 1145109
      },
      "writtenOn": "2017-07-25T01:46:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "72ea5852_7223c30b",
      "revId": "fccbad55adfc6a6cb0266f6b09dc17ab656387e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "aaf48248_094f3f82",
        "filename": "cc/trees/layer_tree_host_impl.cc",
        "patchSetId": 5
      },
      "lineNbr": 1095,
      "author": {
        "id": 1002151
      },
      "writtenOn": "2017-07-24T21:05:25Z",
      "side": 1,
      "message": "It looks like this is called unconditionally from ScheduledActionPerformImplSideInvalidation.\n\nAre there any cases where this is called not from ScheduledActionPerformImplSideInvalidation?\n\nIf not, can you remove the NotifyCanSkipActiveTreeFirstDraw plumbing and just have the state machine assume it from SchedulerStateMachine::WillPerformImplSideInvalidation?",
      "revId": "fccbad55adfc6a6cb0266f6b09dc17ab656387e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "09bb675f_1b2d7209",
        "filename": "cc/trees/layer_tree_host_impl.cc",
        "patchSetId": 5
      },
      "lineNbr": 1095,
      "author": {
        "id": 1145109
      },
      "writtenOn": "2017-07-24T22:23:01Z",
      "side": 1,
      "message": "The other use-case I was planing on adding soon is animated images. In the case where we only have impl-side pending trees, it seems that this would naturally throttle pending trees and avoid doing wasted work since blocking pending tree activation keeps us from creating a new impl-side pending tree.\n\nIn the case where we have a main thread commit, may be its better to skip the active tree draw? Since we might be blocking the main thread commit on this pending tree.",
      "parentUuid": "aaf48248_094f3f82",
      "revId": "fccbad55adfc6a6cb0266f6b09dc17ab656387e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f7bcd191_7dfc0ef5",
        "filename": "cc/trees/layer_tree_host_impl.cc",
        "patchSetId": 5
      },
      "lineNbr": 1095,
      "author": {
        "id": 1002151
      },
      "writtenOn": "2017-07-24T23:55:00Z",
      "side": 1,
      "message": "Ah, ok. That\u0027s basically what your comment in the code already says. \u003d)\n\nIn the future code, would it be easy to call SetNeedsImplSideInvalidation with a parameter indicating whether the invalidation\u0027s draw can be skipped? If so, I think I\u0027d prefer that approach since it results in fewer round-trips between the scheduler and LTHI.",
      "parentUuid": "09bb675f_1b2d7209",
      "revId": "fccbad55adfc6a6cb0266f6b09dc17ab656387e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b4c56f92_fba61284",
        "filename": "cc/trees/layer_tree_host_impl.cc",
        "patchSetId": 5
      },
      "lineNbr": 1095,
      "author": {
        "id": 1145109
      },
      "writtenOn": "2017-07-25T01:46:22Z",
      "side": 1,
      "message": "That\u0027s a good idea. We can have the code requesting an invalidation for an animated image explicitly request that the draw should not be skipped. Done.",
      "parentUuid": "f7bcd191_7dfc0ef5",
      "revId": "fccbad55adfc6a6cb0266f6b09dc17ab656387e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}