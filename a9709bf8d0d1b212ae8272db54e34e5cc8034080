{
  "comments": [
    {
      "key": {
        "uuid": "a62ebbdd_1476fc26",
        "filename": "third_party/WebKit/Source/core/frame/ImageBitmap.cpp",
        "patchSetId": 1
      },
      "lineNbr": 190,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-06-19T08:39:59Z",
      "side": 1,
      "message": "So this is kind of awkward. Because Create() currently accepts the argument by rvalue reference, this is actually safe: the argument isn\u0027t moved out until inside the body of Create().\n\nHowever, since the usual convention is to pass by value, this would be unsafe anywhere else.\n\nSo...\n1. Write out the clearly safe way, even though it\u0027s necessary?\n2. Keep the original code but add move(), relying on internal implementation details?\n\nI think 1 is is more obviously safe to the reader and will optimize to the same thing.",
      "range": {
        "startLine": 190,
        "startChar": 25,
        "endLine": 190,
        "endChar": 62
      },
      "revId": "a9709bf8d0d1b212ae8272db54e34e5cc8034080",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "aa8b44c9_6a226146",
        "filename": "third_party/WebKit/Source/core/frame/ImageBitmap.cpp",
        "patchSetId": 1
      },
      "lineNbr": 190,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2017-06-19T09:15:38Z",
      "side": 1,
      "message": "Why does Create() need to accept it as a rvalue reference? Can we make it pass-by-value?",
      "parentUuid": "a62ebbdd_1476fc26",
      "range": {
        "startLine": 190,
        "startChar": 25,
        "endLine": 190,
        "endChar": 62
      },
      "revId": "a9709bf8d0d1b212ae8272db54e34e5cc8034080",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d1263556_a4afa41c",
        "filename": "third_party/WebKit/Source/core/frame/ImageBitmap.cpp",
        "patchSetId": 1
      },
      "lineNbr": 190,
      "author": {
        "id": 1103784
      },
      "writtenOn": "2017-06-19T10:44:16Z",
      "side": 1,
      "message": "I vote for 1.\n\nOriginal code already smells; it copies a RefPtr unnecessarily. If you put .Release() to fix that, then the whole function call becomes invalid (dst_buffer may become null before dst_buffer-\u003eByteLength() is evaluated), so you have to move ByteLength() call outside.\n\nYour proposed change is basically a combination of \"putting .Release() and getting the whole function call correct\" and \"replacing .Release() with std::move()\". I think this process is natural and I don\u0027t see anything wrong in your proposed change.",
      "parentUuid": "aa8b44c9_6a226146",
      "range": {
        "startLine": 190,
        "startChar": 25,
        "endLine": 190,
        "endChar": 62
      },
      "revId": "a9709bf8d0d1b212ae8272db54e34e5cc8034080",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9e27be54_de86767b",
        "filename": "third_party/WebKit/Source/core/frame/ImageBitmap.cpp",
        "patchSetId": 1
      },
      "lineNbr": 190,
      "author": {
        "id": 1002854
      },
      "writtenOn": "2017-06-19T14:34:38Z",
      "side": 1,
      "message": "+1 to 1.\n\nI tend to default to passing by value over passing by rvalue reference. For one, it avoids the fun question of whether the called function actually does unconditionally move from the rvalue. For another, it makes it legal to pass an lvalue if there is a copy constructor (which, e.g., RefPtr has) without explicitly invoking it.",
      "parentUuid": "d1263556_a4afa41c",
      "range": {
        "startLine": 190,
        "startChar": 25,
        "endLine": 190,
        "endChar": 62
      },
      "revId": "a9709bf8d0d1b212ae8272db54e34e5cc8034080",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "65677836_22edc7c9",
        "filename": "third_party/WebKit/Source/core/frame/ImageBitmap.cpp",
        "patchSetId": 1
      },
      "lineNbr": 190,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-06-19T17:20:07Z",
      "side": 1,
      "message": "I changed the constructors/factory methods to passing RefPtr by value, but left this as-is.",
      "parentUuid": "9e27be54_de86767b",
      "range": {
        "startLine": 190,
        "startChar": 25,
        "endLine": 190,
        "endChar": 62
      },
      "revId": "a9709bf8d0d1b212ae8272db54e34e5cc8034080",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a885e4c_148dd90e",
        "filename": "third_party/WebKit/Source/platform/wtf/typed_arrays/Uint8ClampedArray.h",
        "patchSetId": 1
      },
      "lineNbr": 41,
      "author": {
        "id": 1002854
      },
      "writtenOn": "2017-06-19T14:36:56Z",
      "side": 1,
      "message": "Yeah, I\u0027d just pass a RefPtr\u003cArrayBuffer\u003e here (and elsewhere). (RefPtr is incredibly cheap to move-construct, anyhow, so using rvalue reference doesn\u0027t really help anything.)",
      "revId": "a9709bf8d0d1b212ae8272db54e34e5cc8034080",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e82343c6_115434c2",
        "filename": "third_party/WebKit/Source/platform/wtf/typed_arrays/Uint8ClampedArray.h",
        "patchSetId": 1
      },
      "lineNbr": 41,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-06-19T17:20:07Z",
      "side": 1,
      "message": "It is cheap to construct. It\u0027s not necessarily cheap to destruct though \u003d)",
      "parentUuid": "1a885e4c_148dd90e",
      "revId": "a9709bf8d0d1b212ae8272db54e34e5cc8034080",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}