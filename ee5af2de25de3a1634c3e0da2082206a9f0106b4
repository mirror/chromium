{
  "comments": [
    {
      "key": {
        "uuid": "3c42d746_e58bf704",
        "filename": "base/test/android/javatests/src/org/chromium/base/test/util/AnnotationProcessingUtils.java",
        "patchSetId": 11
      },
      "lineNbr": 77,
      "author": {
        "id": 1116043
      },
      "writtenOn": "2017-11-29T23:10:17Z",
      "side": 1,
      "message": "To me, it looks like the meta-annotations would come before the class annotations.  In collectChildNodes, we add the annotations first and then the parent.  We\u0027d then process the annotations next in sweepAnnotations right?",
      "range": {
        "startLine": 77,
        "startChar": 13,
        "endLine": 77,
        "endChar": 17
      },
      "revId": "ee5af2de25de3a1634c3e0da2082206a9f0106b4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "53df4c7d_6c6b4e30",
        "filename": "base/test/android/javatests/src/org/chromium/base/test/util/AnnotationProcessingUtils.java",
        "patchSetId": 11
      },
      "lineNbr": 77,
      "author": {
        "id": 1123275
      },
      "writtenOn": "2017-11-30T13:57:47Z",
      "side": 1,
      "message": "True... Updated and added comments to make it clear on the associated test.",
      "parentUuid": "3c42d746_e58bf704",
      "range": {
        "startLine": 77,
        "startChar": 13,
        "endLine": 77,
        "endChar": 17
      },
      "revId": "ee5af2de25de3a1634c3e0da2082206a9f0106b4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f9a0e44a_3b074405",
        "filename": "base/test/android/javatests/src/org/chromium/base/test/util/AnnotationProcessingUtils.java",
        "patchSetId": 11
      },
      "lineNbr": 90,
      "author": {
        "id": 1116043
      },
      "writtenOn": "2017-11-29T23:10:17Z",
      "side": 1,
      "message": "is this used outside of this class/test?  Should this be package protected?",
      "range": {
        "startLine": 90,
        "startChar": 11,
        "endLine": 90,
        "endChar": 17
      },
      "revId": "ee5af2de25de3a1634c3e0da2082206a9f0106b4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "01216f9d_c6eac94b",
        "filename": "base/test/android/javatests/src/org/chromium/base/test/util/AnnotationProcessingUtils.java",
        "patchSetId": 11
      },
      "lineNbr": 90,
      "author": {
        "id": 1123275
      },
      "writtenOn": "2017-11-30T13:57:47Z",
      "side": 1,
      "message": "It\u0027s used in AnnotationRule. I also did not expose static methods for multiple classes to avoid having a tonne of methods that are just overloaded. The intention was be that people would just use this class directly.",
      "parentUuid": "f9a0e44a_3b074405",
      "range": {
        "startLine": 90,
        "startChar": 11,
        "endLine": 90,
        "endChar": 17
      },
      "revId": "ee5af2de25de3a1634c3e0da2082206a9f0106b4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8d97819f_566a04c1",
        "filename": "base/test/android/javatests/src/org/chromium/base/test/util/AnnotationProcessingUtils.java",
        "patchSetId": 11
      },
      "lineNbr": 103,
      "author": {
        "id": 1116043
      },
      "writtenOn": "2017-11-29T23:10:17Z",
      "side": 1,
      "message": "are the annotation types guaranteed to be in the list?  I\u0027m wondering if we should return -1 for that like indexOf will do or if MAX_INT is correct for your sorting logic.",
      "range": {
        "startLine": 103,
        "startChar": 23,
        "endLine": 103,
        "endChar": 39
      },
      "revId": "ee5af2de25de3a1634c3e0da2082206a9f0106b4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f83c2faa_4e8828cc",
        "filename": "base/test/android/javatests/src/org/chromium/base/test/util/AnnotationProcessingUtils.java",
        "patchSetId": 11
      },
      "lineNbr": 103,
      "author": {
        "id": 1123275
      },
      "writtenOn": "2017-11-30T13:57:47Z",
      "side": 1,
      "message": "The types are not guaranteed to be there, but since it would return -1 for all the ones that are not in the list we get a consistent sorting order with the unknown classes coming first, followed by the known classes in the specified order.\nWhether the unknown annotations come before or after does not matter much, they won\u0027t be added to the collected annotations anyway. It could affect subsequent iterations, by putting their meta annotations before the ones from the known annotations, but there is no strict spec for this, so I went with the current implementation because I thought it looked neat.\n\nI added tests to reflect the current behaviour, let me know it you\u0027d prefer it to be different.",
      "parentUuid": "8d97819f_566a04c1",
      "range": {
        "startLine": 103,
        "startChar": 23,
        "endLine": 103,
        "endChar": 39
      },
      "revId": "ee5af2de25de3a1634c3e0da2082206a9f0106b4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bdc67f71_002326c4",
        "filename": "base/test/android/javatests/src/org/chromium/base/test/util/AnnotationProcessingUtils.java",
        "patchSetId": 11
      },
      "lineNbr": 138,
      "author": {
        "id": 1116043
      },
      "writtenOn": "2017-11-29T23:10:17Z",
      "side": 1,
      "message": "I do find this code somewhat complicated to following.  Having it across three methods and two classes all adding to the same data structures is making this somewhat hard to follow.\n\nYou also have two directions of traversal (upward with getParent and then getting the meta annotations of the annotations is downward).\n\nI wonder if we could have something like:\n\nList\u003cAnnotation\u003e annotations;\nwhile (annotatedNode !\u003d null) {\n    List\u003cAnnotation\u003e nodeAnnotations \u003d annotatedNode.getAnnotations();\n    annotations.addAll(pruneInvalidAnnotations(nodeAnnotations));\n    for (Annotation nodeAnnotation : nodeAnnotations) {\n        annotations.addAll(pruneInvalidAnnotations(getMetaAnnotations(nodeAnnotation)));\n    }\n    annotatedNode \u003d annotatedNode.getParent();\n}\n\nList\u003cAnnotation\u003e getMetaAnnotations(Annotation) {}\n\nList\u003cAnnotation\u003e pruneInvalidAnnotations(List\u003cAnnotation\u003e) {}\n\n-------\n\nMy general thinking is we could split out the two directions of traversal, but this really depends on the desired ordering.  \u003cIF\u003e the above code could even work, it would add the meta annotations before traversing up the train, but it\u0027s hard for me to reason about how that should work.",
      "range": {
        "startLine": 138,
        "startChar": 20,
        "endLine": 138,
        "endChar": 30
      },
      "revId": "ee5af2de25de3a1634c3e0da2082206a9f0106b4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e03d5871_54f3b776",
        "filename": "base/test/android/javatests/src/org/chromium/base/test/util/AnnotationProcessingUtils.java",
        "patchSetId": 11
      },
      "lineNbr": 138,
      "author": {
        "id": 1123275
      },
      "writtenOn": "2017-11-30T13:57:47Z",
      "side": 1,
      "message": "Now in 2 methods in a single class, but could easily be a single one, hoping it helps with following the code.\n\nDoesn\u0027t address the 2 directions of traversal though. In patchset 4 I separated the 2 directions of traversal, but it was simpler (up was only up to the method\u0027s declaring class) and supporting inheritance made the code look more complex to me.\n\nBut you\u0027re right it would make more sense to completely resolve the annotation hierarchy at a level (e.g. method) before collecting the ones from the next one (e.g. class). Will update that in the next patch set.",
      "parentUuid": "bdc67f71_002326c4",
      "range": {
        "startLine": 138,
        "startChar": 20,
        "endLine": 138,
        "endChar": 30
      },
      "revId": "ee5af2de25de3a1634c3e0da2082206a9f0106b4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cec11f0d_92f50597",
        "filename": "base/test/android/javatests/src/org/chromium/base/test/util/AnnotationProcessingUtils.java",
        "patchSetId": 11
      },
      "lineNbr": 138,
      "author": {
        "id": 1123275
      },
      "writtenOn": "2017-11-30T15:30:20Z",
      "side": 1,
      "message": "Done, wdyt?",
      "parentUuid": "e03d5871_54f3b776",
      "range": {
        "startLine": 138,
        "startChar": 20,
        "endLine": 138,
        "endChar": 30
      },
      "revId": "ee5af2de25de3a1634c3e0da2082206a9f0106b4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b9fe70e7_bf11064c",
        "filename": "base/test/android/javatests/src/org/chromium/base/test/util/AnnotationProcessingUtils.java",
        "patchSetId": 11
      },
      "lineNbr": 138,
      "author": {
        "id": 1116043
      },
      "writtenOn": "2017-11-30T22:45:59Z",
      "side": 1,
      "message": "Thanks!  This looks much clearer to me.",
      "parentUuid": "cec11f0d_92f50597",
      "range": {
        "startLine": 138,
        "startChar": 20,
        "endLine": 138,
        "endChar": 30
      },
      "revId": "ee5af2de25de3a1634c3e0da2082206a9f0106b4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cfdf3fde_0d48db30",
        "filename": "base/test/android/javatests/src/org/chromium/base/test/util/AnnotationProcessingUtils.java",
        "patchSetId": 11
      },
      "lineNbr": 152,
      "author": {
        "id": 1116043
      },
      "writtenOn": "2017-11-29T23:10:17Z",
      "side": 1,
      "message": "What does this line do?  It seems like this stops processing annotations if the annotation type has ever been visited before.  What is the intent of that?  Is this to stop some sort of cycles?",
      "range": {
        "startLine": 152,
        "startChar": 33,
        "endLine": 152,
        "endChar": 43
      },
      "revId": "ee5af2de25de3a1634c3e0da2082206a9f0106b4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "888171d9_96dcdaba",
        "filename": "base/test/android/javatests/src/org/chromium/base/test/util/AnnotationProcessingUtils.java",
        "patchSetId": 11
      },
      "lineNbr": 152,
      "author": {
        "id": 1123275
      },
      "writtenOn": "2017-11-30T13:57:47Z",
      "side": 1,
      "message": "Yes\n\n    @Foo\n    public @interface Foo {}\n\nIs valid java code. Also to to shave off redundant visits. The annotations are declared on classes, but when going through annotation instances, we might encounter the same type multiple times.",
      "parentUuid": "cfdf3fde_0d48db30",
      "range": {
        "startLine": 152,
        "startChar": 33,
        "endLine": 152,
        "endChar": 43
      },
      "revId": "ee5af2de25de3a1634c3e0da2082206a9f0106b4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2f38992d_acfc1261",
        "filename": "base/test/android/javatests/src/org/chromium/base/test/util/AnnotationProcessingUtils.java",
        "patchSetId": 11
      },
      "lineNbr": 152,
      "author": {
        "id": 1123275
      },
      "writtenOn": "2017-11-30T15:30:20Z",
      "side": 1,
      "message": "Laying it out to make sure my logic is correct:\n\n    @interface Important { boolean value() default true; }\n    \n    @Important\n    @interface Bar {}\n    \n    @Important(false)\n    @interface Baz {}\n    \n    @Baz\n    @EnableFeatures(\"F1\")\n    class FooTestBase {\n    }\n    \n    @Bar\n    @EnableFeatures(\"F2\", \"F3\")\n    class FooTest extends FooTestBase{\n    \n      @Baz\n      @EnableFeatures(\"F4\")\n      void testBaz() {}\n    }\n    \n    \nWe would collect (output will be in reverse order):\n\n     - @Baz                            testBaz\n     - @EnableFeatures(\"F4\")           testBaz\n     - @Important(false)               @Baz\n     - @Bar                            FooTest\n     - @EnableFeatures(\"F2\", \"F3\")     FooTest\n     - @Important                      @Bar\n     - @Baz                            FooTestBase\n     - @EnableFeatures(\"F1\")           FooTestBase\n     - \u003c@Important(false) skipped\u003e     @Baz\n    \n    \nWe skipped an annotation that was carrying a value that could have been useful, but we already got an instance of that. Maybe the order would have been important but we don\u0027t have much control over that anyway. So I don\u0027t think skipping meta annotations on a visited annotation would cause issues. Am I missing something?",
      "parentUuid": "888171d9_96dcdaba",
      "range": {
        "startLine": 152,
        "startChar": 33,
        "endLine": 152,
        "endChar": 43
      },
      "revId": "ee5af2de25de3a1634c3e0da2082206a9f0106b4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "565dfcfa_9f8b4784",
        "filename": "base/test/android/javatests/src/org/chromium/base/test/util/AnnotationProcessingUtils.java",
        "patchSetId": 11
      },
      "lineNbr": 152,
      "author": {
        "id": 1116043
      },
      "writtenOn": "2017-11-30T22:45:59Z",
      "side": 1,
      "message": "not necessarily missing anything, just something that could be unexpected based on the documentation.  Just that we skip in certain situations that \"might\" be unexpected.",
      "parentUuid": "2f38992d_acfc1261",
      "range": {
        "startLine": 152,
        "startChar": 33,
        "endLine": 152,
        "endChar": 43
      },
      "revId": "ee5af2de25de3a1634c3e0da2082206a9f0106b4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "336950eb_5185e6c7",
        "filename": "base/test/android/javatests/src/org/chromium/base/test/util/AnnotationProcessingUtils.java",
        "patchSetId": 11
      },
      "lineNbr": 153,
      "author": {
        "id": 1116043
      },
      "writtenOn": "2017-11-29T23:10:17Z",
      "side": 1,
      "message": "should we enforce the passed in Annotation\u0027s too the Extractor are also Chromium annotations?",
      "range": {
        "startLine": 153,
        "startChar": 21,
        "endLine": 153,
        "endChar": 41
      },
      "revId": "ee5af2de25de3a1634c3e0da2082206a9f0106b4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "be16568e_dea4cf14",
        "filename": "base/test/android/javatests/src/org/chromium/base/test/util/AnnotationProcessingUtils.java",
        "patchSetId": 11
      },
      "lineNbr": 153,
      "author": {
        "id": 1123275
      },
      "writtenOn": "2017-11-30T13:57:47Z",
      "side": 1,
      "message": "It is mostly to avoid having to deal with going through meta annotations on things that we have no control on. I suppose we can restrict the collectible annotations to be ours too. The Extractor\u0027s input is explicitly specified by people so restricting seems less useful there.\n\n(Also I\u0027m using non-chromium annotations in tests because they have short names, I find it convenient \u003e.\u003e)",
      "parentUuid": "336950eb_5185e6c7",
      "range": {
        "startLine": 153,
        "startChar": 21,
        "endLine": 153,
        "endChar": 41
      },
      "revId": "ee5af2de25de3a1634c3e0da2082206a9f0106b4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b6817306_9d7cb013",
        "filename": "base/test/android/javatests/src/org/chromium/base/test/util/AnnotationProcessingUtils.java",
        "patchSetId": 11
      },
      "lineNbr": 153,
      "author": {
        "id": 1116043
      },
      "writtenOn": "2017-11-30T22:45:59Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "be16568e_dea4cf14",
      "range": {
        "startLine": 153,
        "startChar": 21,
        "endLine": 153,
        "endChar": 41
      },
      "revId": "ee5af2de25de3a1634c3e0da2082206a9f0106b4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}