{
  "comments": [
    {
      "key": {
        "uuid": "18e3c441_998a7d6f",
        "filename": "base/task_scheduler/scheduler_worker_pool_impl.cc",
        "patchSetId": 3
      },
      "lineNbr": 446,
      "author": {
        "id": 1003325
      },
      "writtenOn": "2017-08-11T16:45:09Z",
      "side": 1,
      "message": "This was previously handled by simply tracking that last_get_worker_returned_nullptr_, and then we cleaned up the worker when last_get_worker_returned_nullptr_ \u003d\u003d true. Can we do the same here?\n\nThat has the benefit of always being bound to the worker thread.",
      "range": {
        "startLine": 444,
        "startChar": 2,
        "endLine": 446,
        "endChar": 55
      },
      "revId": "f255d44c781dfc653c67996d789106d2bb646c03",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5f7b1032_40a75489",
        "filename": "base/task_scheduler/scheduler_worker_pool_impl.cc",
        "patchSetId": 3
      },
      "lineNbr": 446,
      "author": {
        "id": 1002897
      },
      "writtenOn": "2017-08-11T17:29:26Z",
      "side": 1,
      "message": "Currently, we have to scan the idle stack every time we call GetWork() (see calls to AddToIdleWorkersStack() and RemoveFromIdleWorkersStack()). Once the number of workers can grow dynamically, this might become a problem.\n\nWith this CL, there are 2 scenarios in which GetWork() can be called:\n- |is_active_| is true, worker is not on the idle stack -\u003e Check if there is work. If yes, return it. If no, add worker on top of the idle stack, set |is_active_| to false and return nullptr.\n- |is_active_| is false, worker is on the idle stack, sleep timeout just expired -\u003e Cleanup immediately, without checking for work.\n\nNote that GetWork() never scans the idle stack, except when cleaning up a worker. Are you saying that we could achieve that without |is_active_|, by using only |last_get_work_returned_nullptr_|?",
      "parentUuid": "18e3c441_998a7d6f",
      "range": {
        "startLine": 444,
        "startChar": 2,
        "endLine": 446,
        "endChar": 55
      },
      "revId": "f255d44c781dfc653c67996d789106d2bb646c03",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d7d63eb1_b7d90da4",
        "filename": "base/task_scheduler/scheduler_worker_pool_impl.cc",
        "patchSetId": 3
      },
      "lineNbr": 457,
      "author": {
        "id": 1002897
      },
      "writtenOn": "2017-08-11T17:29:26Z",
      "side": 1,
      "message": "No braces.",
      "revId": "f255d44c781dfc653c67996d789106d2bb646c03",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e41bb89c_d5a40467",
        "filename": "base/task_scheduler/scheduler_worker_pool_impl.cc",
        "patchSetId": 3
      },
      "lineNbr": 457,
      "author": {
        "id": 1212597
      },
      "writtenOn": "2017-08-11T19:39:20Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d7d63eb1_b7d90da4",
      "revId": "f255d44c781dfc653c67996d789106d2bb646c03",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "be86096a_a9016d1a",
        "filename": "base/task_scheduler/scheduler_worker_pool_impl.cc",
        "patchSetId": 3
      },
      "lineNbr": 461,
      "author": {
        "id": 1002897
      },
      "writtenOn": "2017-08-11T17:29:26Z",
      "side": 1,
      "message": "This line is reached if |is_active_| is false and this histogram is recorded at line 491 just before we set |is_active_| to false. Doesn\u0027t that mean that you don\u0027t need to record it again here?",
      "revId": "f255d44c781dfc653c67996d789106d2bb646c03",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9b12573e_7486a838",
        "filename": "base/task_scheduler/scheduler_worker_pool_impl.cc",
        "patchSetId": 3
      },
      "lineNbr": 461,
      "author": {
        "id": 1212597
      },
      "writtenOn": "2017-08-11T19:39:20Z",
      "side": 1,
      "message": "I still need to record it because I\u0027m about to do another wait.\n\nSuppose I record it @ line 491.\nThen I do a wait. I time out from the wait at call GetWork().\nI get to line 461 and I\u0027m about to return nullptr and then do another wait.\nSince the histogram records # of tasks between waits, I still need to record that I did zero tasks. (But I think you\u0027re right that it\u0027d always be zero tasks).\n\n(Also, there\u0027s a histogram unit test that fails if I don\u0027t have it here, so this seems to be the expected behavior).",
      "parentUuid": "be86096a_a9016d1a",
      "revId": "f255d44c781dfc653c67996d789106d2bb646c03",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b1b22735_17233788",
        "filename": "base/task_scheduler/scheduler_worker_pool_impl.cc",
        "patchSetId": 3
      },
      "lineNbr": 461,
      "author": {
        "id": 1002897
      },
      "writtenOn": "2017-08-11T19:59:28Z",
      "side": 1,
      "message": "ok, you\u0027re right that the worker wakes up and waits without doing work. Add this so we know it\u0027s intended:\n\nDCHECK_EQ(0, num_tasks_since_last_wait_);",
      "parentUuid": "9b12573e_7486a838",
      "revId": "f255d44c781dfc653c67996d789106d2bb646c03",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "92bc23b7_21a9639c",
        "filename": "base/task_scheduler/scheduler_worker_pool_impl.cc",
        "patchSetId": 3
      },
      "lineNbr": 461,
      "author": {
        "id": 1212597
      },
      "writtenOn": "2017-08-11T20:05:22Z",
      "side": 1,
      "message": "Done (already added in patch set 4, but I guess I should\u0027ve mentioned it)",
      "parentUuid": "b1b22735_17233788",
      "revId": "f255d44c781dfc653c67996d789106d2bb646c03",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e5486580_952405d9",
        "filename": "base/task_scheduler/scheduler_worker_pool_impl.cc",
        "patchSetId": 3
      },
      "lineNbr": 543,
      "author": {
        "id": 1002897
      },
      "writtenOn": "2017-08-11T17:29:26Z",
      "side": 1,
      "message": "assert lock acquired",
      "revId": "f255d44c781dfc653c67996d789106d2bb646c03",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fea2e16d_fa84f897",
        "filename": "base/task_scheduler/scheduler_worker_pool_impl.cc",
        "patchSetId": 3
      },
      "lineNbr": 543,
      "author": {
        "id": 1212597
      },
      "writtenOn": "2017-08-11T19:39:20Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e5486580_952405d9",
      "revId": "f255d44c781dfc653c67996d789106d2bb646c03",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}