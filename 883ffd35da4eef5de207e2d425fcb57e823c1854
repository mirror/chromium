{
  "comments": [
    {
      "key": {
        "uuid": "81157808_1bb3f5a5",
        "filename": "chrome/browser/resources/md_extensions/service.js",
        "patchSetId": 6
      },
      "lineNbr": 181,
      "author": {
        "id": 1115893
      },
      "writtenOn": "2017-12-01T22:48:05Z",
      "side": 1,
      "message": "Can non-unpacked extensions be reloaded? Would this cause an issue where a non-unpacked extension\u0027s reload fails quietly, and populateErrorForUnpacked is not applicable? Where as before it would throw an error?",
      "range": {
        "startLine": 181,
        "startChar": 17,
        "endLine": 181,
        "endChar": 66
      },
      "revId": "883ffd35da4eef5de207e2d425fcb57e823c1854",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b4a89aa8_7c9eac74",
        "filename": "chrome/browser/resources/md_extensions/service.js",
        "patchSetId": 6
      },
      "lineNbr": 181,
      "author": {
        "id": 1115745
      },
      "writtenOn": "2017-12-04T17:35:12Z",
      "side": 1,
      "message": "This behavior change *only* affects unpacked extensions.  So there is definitely a broken case where a non-unpacked extension fails to reload, and there\u0027s no actionable way for the user to easily fix it.  However, that\u0027s already the case today (again, no behavior change for packed extensions), and is also a potential problem in the current UI.  Also, it *should* be relatively rare for that to be the case (though certainly not impossible).",
      "parentUuid": "81157808_1bb3f5a5",
      "range": {
        "startLine": 181,
        "startChar": 17,
        "endLine": 181,
        "endChar": 66
      },
      "revId": "883ffd35da4eef5de207e2d425fcb57e823c1854",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "30dfe347_618b3c56",
        "filename": "chrome/browser/resources/md_extensions/service.js",
        "patchSetId": 6
      },
      "lineNbr": 181,
      "author": {
        "id": 1115893
      },
      "writtenOn": "2017-12-04T20:15:53Z",
      "side": 1,
      "message": "Verifying my understanding of your response, are you saying that \"failQuietly\" option only applies to unpacked extensions? Should it be named \"failQuietlyForUnpacked\" then? Otherwise this is not obvious.",
      "parentUuid": "b4a89aa8_7c9eac74",
      "range": {
        "startLine": 181,
        "startChar": 17,
        "endLine": 181,
        "endChar": 66
      },
      "revId": "883ffd35da4eef5de207e2d425fcb57e823c1854",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9c0d91e3_ee57e99f",
        "filename": "chrome/browser/resources/md_extensions/service.js",
        "patchSetId": 6
      },
      "lineNbr": 181,
      "author": {
        "id": 1115745
      },
      "writtenOn": "2017-12-05T00:07:01Z",
      "side": 1,
      "message": "Oh, I see, sorry, misunderstood.  You are correct that this would whether we display a noisy error (i.e., modal dialog).  We will no longer show it.\n\nI think this is okay, given the rarity of this instance (it *shouldn\u0027t* happen), and that the old page also suppressed noisy errors.",
      "parentUuid": "30dfe347_618b3c56",
      "range": {
        "startLine": 181,
        "startChar": 17,
        "endLine": 181,
        "endChar": 66
      },
      "revId": "883ffd35da4eef5de207e2d425fcb57e823c1854",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "59a9b7fa_ba86c489",
        "filename": "chrome/browser/resources/md_extensions/service.js",
        "patchSetId": 6
      },
      "lineNbr": 181,
      "author": {
        "id": 1115893
      },
      "writtenOn": "2017-12-05T00:39:42Z",
      "side": 1,
      "message": "+dschuyler\n\nThanks for clarifying. So is the change here affecting the issue at https://bugs.chromium.org/p/chromium/issues/detail?id\u003d788926 at all?",
      "parentUuid": "9c0d91e3_ee57e99f",
      "range": {
        "startLine": 181,
        "startChar": 17,
        "endLine": 181,
        "endChar": 66
      },
      "revId": "883ffd35da4eef5de207e2d425fcb57e823c1854",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "aa7dbd95_729f8c58",
        "filename": "chrome/browser/resources/md_extensions/service.js",
        "patchSetId": 6
      },
      "lineNbr": 181,
      "author": {
        "id": 1136204
      },
      "writtenOn": "2017-12-05T01:02:58Z",
      "side": 1,
      "message": "I patched this CL locally and tried it. I don\u0027t see any difference related to 788926. Is a change expected?",
      "parentUuid": "59a9b7fa_ba86c489",
      "range": {
        "startLine": 181,
        "startChar": 17,
        "endLine": 181,
        "endChar": 66
      },
      "revId": "883ffd35da4eef5de207e2d425fcb57e823c1854",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "04ab35cd_e05303e3",
        "filename": "chrome/browser/resources/md_extensions/service.js",
        "patchSetId": 6
      },
      "lineNbr": 181,
      "author": {
        "id": 1115745
      },
      "writtenOn": "2017-12-06T02:01:05Z",
      "side": 1,
      "message": "This CL will not have an effect on 788926, since they go through different flows.  I have a separate CL to improve that.",
      "parentUuid": "aa7dbd95_729f8c58",
      "range": {
        "startLine": 181,
        "startChar": 17,
        "endLine": 181,
        "endChar": 66
      },
      "revId": "883ffd35da4eef5de207e2d425fcb57e823c1854",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c61f7857_b846e3bf",
        "filename": "chrome/test/data/webui/extensions/extension_item_test.js",
        "patchSetId": 6
      },
      "lineNbr": 180,
      "author": {
        "id": 1115893
      },
      "writtenOn": "2017-12-01T22:48:05Z",
      "side": 1,
      "message": "You could simplify by using the existing TestService which is based on TestBrowserProxy, and already used by most tests, see [1], and specific example at [2]. TestBrowserProxy has a cleaner syntax for dealing with async testing I think.\n\n[1] https://cs.chromium.org/search/?q\u003dTestService+file:%5Esrc/chrome/test/data/webui/extensions/+package:%5Echromium$\u0026type\u003dcs\n[2] https://cs.chromium.org/chromium/src/chrome/test/data/webui/extensions/extension_toolbar_test.js?l\u003d51-68",
      "range": {
        "startLine": 180,
        "startChar": 9,
        "endLine": 180,
        "endChar": 42
      },
      "revId": "883ffd35da4eef5de207e2d425fcb57e823c1854",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0bbb03e6_ef6e3ad0",
        "filename": "chrome/test/data/webui/extensions/extension_item_test.js",
        "patchSetId": 6
      },
      "lineNbr": 180,
      "author": {
        "id": 1115745
      },
      "writtenOn": "2017-12-04T17:35:12Z",
      "side": 1,
      "message": "I agree that the async interaction is cleaner, but I don\u0027t see any way of validating the arguments passed to the method (e.g., verifying that item.data.id is passed to reloadItem).  This is a pretty important part of these tests overall.  Also, I\u0027d prefer to not have to update this whole test/whole file in this CL.  Is this approach okay for this CL, until we have a solution for argument matching?",
      "parentUuid": "c61f7857_b846e3bf",
      "range": {
        "startLine": 180,
        "startChar": 9,
        "endLine": 180,
        "endChar": 42
      },
      "revId": "883ffd35da4eef5de207e2d425fcb57e823c1854",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "85021ddc_b6223103",
        "filename": "chrome/test/data/webui/extensions/extension_item_test.js",
        "patchSetId": 6
      },
      "lineNbr": 180,
      "author": {
        "id": 1115893
      },
      "writtenOn": "2017-12-04T18:40:22Z",
      "side": 1,
      "message": "Validating arguments is supported. Here is how:\n\n1) Pass the arguments as a 2nd param to methodCalled(), see  example at [1]\n2) Receive the arguments from whenCalled(), and perform assertions an them, see example at [2].\n\nAlso see documentation at [3] which explains how arguments can be validated.\n\n\n[1] https://cs.chromium.org/chromium/src/chrome/test/data/webui/settings/reset_page_test.js?l\u003d123\n[2] https://cs.chromium.org/chromium/src/chrome/test/data/webui/settings/reset_page_test.js?l\u003d123\n[3] https://cs.chromium.org/chromium/src/chrome/test/data/webui/test_browser_proxy.js?q\u003dtest_browser_proxy.js\u0026dr\u0026l\u003d12-29",
      "parentUuid": "0bbb03e6_ef6e3ad0",
      "range": {
        "startLine": 180,
        "startChar": 9,
        "endLine": 180,
        "endChar": 42
      },
      "revId": "883ffd35da4eef5de207e2d425fcb57e823c1854",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7de5d708_3968d2da",
        "filename": "chrome/test/data/webui/extensions/extension_item_test.js",
        "patchSetId": 6
      },
      "lineNbr": 180,
      "author": {
        "id": 1115745
      },
      "writtenOn": "2017-12-04T19:32:50Z",
      "side": 1,
      "message": "Thanks for the pointers!  Done.  I\u0027m not sure it\u0027s a ton cleaner (there\u0027s no good way to set a return value for these mocks :/), but perhaps a bit.",
      "parentUuid": "85021ddc_b6223103",
      "range": {
        "startLine": 180,
        "startChar": 9,
        "endLine": 180,
        "endChar": 42
      },
      "revId": "883ffd35da4eef5de207e2d425fcb57e823c1854",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5562ad97_a7e76298",
        "filename": "chrome/test/data/webui/extensions/extension_item_test.js",
        "patchSetId": 6
      },
      "lineNbr": 187,
      "author": {
        "id": 1115893
      },
      "writtenOn": "2017-12-01T22:48:05Z",
      "side": 1,
      "message": "Equivalent to Promise.resolve() ?",
      "revId": "883ffd35da4eef5de207e2d425fcb57e823c1854",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ebae5ec0_e8da08d2",
        "filename": "chrome/test/data/webui/extensions/extension_item_test.js",
        "patchSetId": 6
      },
      "lineNbr": 187,
      "author": {
        "id": 1115745
      },
      "writtenOn": "2017-12-04T17:35:12Z",
      "side": 1,
      "message": "Ah!  Nifty - hadn\u0027t seen that before.  Done.",
      "parentUuid": "5562ad97_a7e76298",
      "revId": "883ffd35da4eef5de207e2d425fcb57e823c1854",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "62c65bbe_06821144",
        "filename": "chrome/test/data/webui/extensions/extension_item_test.js",
        "patchSetId": 6
      },
      "lineNbr": 195,
      "author": {
        "id": 1115893
      },
      "writtenOn": "2017-12-01T22:48:05Z",
      "side": 1,
      "message": "Equivalent to Promise.reject()",
      "range": {
        "startLine": 195,
        "startChar": 12,
        "endLine": 195,
        "endChar": 62
      },
      "revId": "883ffd35da4eef5de207e2d425fcb57e823c1854",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4f377c9e_b587d32e",
        "filename": "chrome/test/data/webui/extensions/extension_item_test.js",
        "patchSetId": 6
      },
      "lineNbr": 195,
      "author": {
        "id": 1115745
      },
      "writtenOn": "2017-12-04T17:35:12Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "62c65bbe_06821144",
      "range": {
        "startLine": 195,
        "startChar": 12,
        "endLine": 195,
        "endChar": 62
      },
      "revId": "883ffd35da4eef5de207e2d425fcb57e823c1854",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d9682e44_c3c1a82f",
        "filename": "chrome/test/data/webui/extensions/extension_item_test.js",
        "patchSetId": 6
      },
      "lineNbr": 196,
      "author": {
        "id": 1115893
      },
      "writtenOn": "2017-12-01T22:48:05Z",
      "side": 1,
      "message": "There is a helper eventToPromise() method that converts a single event occurrence to a Promise, see definition at [1] and example usage in Extensions at [2].\n\nUp to you on whether you\u0027d like to leverage that to avoid manually keeping track of the firedLoadError boolean, calling setTimeout, and wrapping it in a promise manually.\n\n[1] https://cs.chromium.org/chromium/src/chrome/test/data/webui/settings/test_util.js?$\u0026l\u003d40\n[2] https://cs.chromium.org/chromium/src/chrome/test/data/webui/extensions/toggle_row_test.js?l\u003d23",
      "revId": "883ffd35da4eef5de207e2d425fcb57e823c1854",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c570e779_0b6977b5",
        "filename": "chrome/test/data/webui/extensions/extension_item_test.js",
        "patchSetId": 6
      },
      "lineNbr": 196,
      "author": {
        "id": 1115745
      },
      "writtenOn": "2017-12-04T17:35:12Z",
      "side": 1,
      "message": "I don\u0027t think this quite makes sense here, since a part of the test is to ensure that the event *is not* fired at a certain point.  Since the fire happens async, I\u0027d prefer we test similarly in both the expect-fired and expect-not-fired cases.",
      "parentUuid": "d9682e44_c3c1a82f",
      "revId": "883ffd35da4eef5de207e2d425fcb57e823c1854",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}