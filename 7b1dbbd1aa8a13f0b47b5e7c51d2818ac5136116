{
  "comments": [
    {
      "key": {
        "uuid": "779c6526_5f07670b",
        "filename": "third_party/WebKit/Source/bindings/core/v8/GeneratedCodeHelper.cpp",
        "patchSetId": 4
      },
      "lineNbr": 34,
      "author": {
        "id": 1002507
      },
      "writtenOn": "2017-10-30T13:55:48Z",
      "side": 1,
      "message": "Let me rename this function to IsCallback*Function*Runnable because it turned out that this function will be shared with callback functions, too.",
      "range": {
        "startLine": 34,
        "startChar": 5,
        "endLine": 34,
        "endChar": 32
      },
      "revId": "7b1dbbd1aa8a13f0b47b5e7c51d2818ac5136116",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "890ee21c_fb6ba63b",
        "filename": "third_party/WebKit/Source/bindings/core/v8/GeneratedCodeHelper.cpp",
        "patchSetId": 4
      },
      "lineNbr": 41,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2017-10-27T12:18:22Z",
      "side": 1,
      "message": "How is it guaranteed that context is not suspended here?",
      "revId": "7b1dbbd1aa8a13f0b47b5e7c51d2818ac5136116",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7ebf2567_35cfc434",
        "filename": "third_party/WebKit/Source/bindings/core/v8/GeneratedCodeHelper.cpp",
        "patchSetId": 4
      },
      "lineNbr": 41,
      "author": {
        "id": 1002507
      },
      "writtenOn": "2017-10-27T13:53:54Z",
      "side": 1,
      "message": "I don\u0027t know.  This is the simple copy from the original implementation.  I can convert this into a return-value-test, if you want.",
      "parentUuid": "890ee21c_fb6ba63b",
      "revId": "7b1dbbd1aa8a13f0b47b5e7c51d2818ac5136116",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "787bc82a_33550415",
        "filename": "third_party/WebKit/Source/bindings/core/v8/GeneratedCodeHelper.cpp",
        "patchSetId": 4
      },
      "lineNbr": 41,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2017-10-27T16:38:08Z",
      "side": 1,
      "message": "The removed custom implementation of V8SQLStatementErrorCallback has this check.",
      "parentUuid": "7ebf2567_35cfc434",
      "revId": "7b1dbbd1aa8a13f0b47b5e7c51d2818ac5136116",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "74c49e38_6409bfbc",
        "filename": "third_party/WebKit/Source/bindings/core/v8/GeneratedCodeHelper.cpp",
        "patchSetId": 4
      },
      "lineNbr": 41,
      "author": {
        "id": 1002507
      },
      "writtenOn": "2017-10-30T13:55:48Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "787bc82a_33550415",
      "revId": "7b1dbbd1aa8a13f0b47b5e7c51d2818ac5136116",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "af36d660_f118a427",
        "filename": "third_party/WebKit/Source/bindings/core/v8/GeneratedCodeHelper.cpp",
        "patchSetId": 4
      },
      "lineNbr": 42,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2017-10-27T16:38:08Z",
      "side": 1,
      "message": "Why do we need to check IsContextDestroyed() while you\u0027ve already checked script_state-\u003eContextIsValid()?\n\nI think we should just remove line 37 - 38.",
      "revId": "7b1dbbd1aa8a13f0b47b5e7c51d2818ac5136116",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "02a0195a_ae0052af",
        "filename": "third_party/WebKit/Source/bindings/core/v8/GeneratedCodeHelper.cpp",
        "patchSetId": 4
      },
      "lineNbr": 42,
      "author": {
        "id": 1002507
      },
      "writtenOn": "2017-10-30T13:55:48Z",
      "side": 1,
      "message": "I\u0027m sorry that I do not fully understand the difference between them.  Is it guaranteed that !ExecutionContext::IsContextDestroyed() \u003d\u003e ScriptState::ContextIsValid()?\n\nAnyway, the current implementation is checking both conditions, and I was afraid to break something because my understanding here is not good.  IIRC, there is no good mappings between ScriptState\u0027s invalidation and ExecutionContext\u0027s invalidation.\n\nDo you really want to remove line 37-38 in this patch?  We can do that in a separate patch, I think.",
      "parentUuid": "af36d660_f118a427",
      "revId": "7b1dbbd1aa8a13f0b47b5e7c51d2818ac5136116",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d434011b_bbe3cce8",
        "filename": "third_party/WebKit/Source/bindings/core/v8/GeneratedCodeHelper.cpp",
        "patchSetId": 4
      },
      "lineNbr": 42,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2017-10-30T14:43:30Z",
      "side": 1,
      "message": "ExecutionContext::IsContextDestroyed() and ScriptState::ContextIsValid() are already mostly the same. However, I\u0027m okay with keeping it if the existing code has the check.\n\nOnce we move ScriptState to Oilpan, we can make the two checks equivalent, at which point we can confidently remove one of the checks.",
      "parentUuid": "02a0195a_ae0052af",
      "revId": "7b1dbbd1aa8a13f0b47b5e7c51d2818ac5136116",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3b8027ae_fc22ea2e",
        "filename": "third_party/WebKit/Source/bindings/core/v8/GeneratedCodeHelper.cpp",
        "patchSetId": 4
      },
      "lineNbr": 45,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2017-10-27T16:38:08Z",
      "side": 1,
      "message": "I\u0027m just curious but why do we need to check the validity of both contexts?",
      "revId": "7b1dbbd1aa8a13f0b47b5e7c51d2818ac5136116",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ed36c7d1_933e42b7",
        "filename": "third_party/WebKit/Source/bindings/core/v8/GeneratedCodeHelper.cpp",
        "patchSetId": 4
      },
      "lineNbr": 45,
      "author": {
        "id": 1002507
      },
      "writtenOn": "2017-10-30T13:55:48Z",
      "side": 1,
      "message": "I\u0027m sorry that I was too conservative because I know running a script in a detached global object causes trouble.  Now removed.",
      "parentUuid": "3b8027ae_fc22ea2e",
      "revId": "7b1dbbd1aa8a13f0b47b5e7c51d2818ac5136116",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d913994f_f4ef3500",
        "filename": "third_party/WebKit/Source/bindings/scripts/v8_callback_interface.py",
        "patchSetId": 4
      },
      "lineNbr": 43,
      "author": {
        "id": 1001470
      },
      "writtenOn": "2017-10-30T03:28:05Z",
      "side": 1,
      "message": "Does legacy callback interfaces need this?",
      "revId": "7b1dbbd1aa8a13f0b47b5e7c51d2818ac5136116",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "baec4caa_8b71393a",
        "filename": "third_party/WebKit/Source/bindings/scripts/v8_callback_interface.py",
        "patchSetId": 4
      },
      "lineNbr": 43,
      "author": {
        "id": 1002507
      },
      "writtenOn": "2017-10-30T13:55:48Z",
      "side": 1,
      "message": "No, legacy callback interfaces do not.\n\nDid you mean that we should define LEGACY_CALLBACK_INTERFACE_H_INCLUDES separately?  It seems like that NodeFilter is only the legacy callback interface.\n\nBy the way, ScopedPersistent.h has not been necessary like CallbackInterfaceBase.h.",
      "parentUuid": "d913994f_f4ef3500",
      "revId": "7b1dbbd1aa8a13f0b47b5e7c51d2818ac5136116",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4aa9f705_2d35fe91",
        "filename": "third_party/WebKit/Source/bindings/scripts/v8_callback_interface.py",
        "patchSetId": 4
      },
      "lineNbr": 43,
      "author": {
        "id": 1001470
      },
      "writtenOn": "2017-10-31T09:09:18Z",
      "side": 1,
      "message": "Yes, having LEGACY_CALLBACK_INTERFACE_H_INCLUDES seems easy and simple.",
      "parentUuid": "baec4caa_8b71393a",
      "revId": "7b1dbbd1aa8a13f0b47b5e7c51d2818ac5136116",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "24da2d38_c3ce5ca8",
        "filename": "third_party/WebKit/Source/bindings/scripts/v8_callback_interface.py",
        "patchSetId": 4
      },
      "lineNbr": 43,
      "author": {
        "id": 1002507
      },
      "writtenOn": "2017-11-01T09:05:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4aa9f705_2d35fe91",
      "revId": "7b1dbbd1aa8a13f0b47b5e7c51d2818ac5136116",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2cd5be13_d9249d1f",
        "filename": "third_party/WebKit/Source/bindings/templates/callback_interface.cpp.tmpl",
        "patchSetId": 4
      },
      "lineNbr": 50,
      "author": {
        "id": 1001470
      },
      "writtenOn": "2017-10-30T03:28:05Z",
      "side": 1,
      "message": "Can we define |maybe_call_result| in {%if%} branch in #59-77? Then we don\u0027t need ALLOW_UNUSED_LOCAL().",
      "revId": "7b1dbbd1aa8a13f0b47b5e7c51d2818ac5136116",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f04bdb22_3f02035c",
        "filename": "third_party/WebKit/Source/bindings/templates/callback_interface.cpp.tmpl",
        "patchSetId": 4
      },
      "lineNbr": 50,
      "author": {
        "id": 1002507
      },
      "writtenOn": "2017-10-30T13:55:48Z",
      "side": 1,
      "message": "I don\u0027t want to write V8ScriptRunner::CallFunction twice (once for void and the other time for non-void).  We should do the same thing, so the code should be shared between void and non-void cases.\n\nI think that this is easier to read.",
      "parentUuid": "2cd5be13_d9249d1f",
      "revId": "7b1dbbd1aa8a13f0b47b5e7c51d2818ac5136116",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3e6e3ba2_8f8bd708",
        "filename": "third_party/WebKit/Source/bindings/templates/callback_interface.cpp.tmpl",
        "patchSetId": 4
      },
      "lineNbr": 57,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2017-10-27T16:38:08Z",
      "side": 1,
      "message": "We normally use the following pattern.\n\nv8::Local\u003cv8::Value\u003e call_result;\nif (!V8ScriptRunner::CallFunction(...).ToLocal(call_result)) {\n\n}\n...;",
      "revId": "7b1dbbd1aa8a13f0b47b5e7c51d2818ac5136116",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c280ebdf_f8facb33",
        "filename": "third_party/WebKit/Source/bindings/templates/callback_interface.cpp.tmpl",
        "patchSetId": 4
      },
      "lineNbr": 57,
      "author": {
        "id": 1002507
      },
      "writtenOn": "2017-10-30T13:55:48Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3e6e3ba2_8f8bd708",
      "revId": "7b1dbbd1aa8a13f0b47b5e7c51d2818ac5136116",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "babcf959_7da92470",
        "filename": "third_party/WebKit/Source/bindings/templates/callback_interface.cpp.tmpl",
        "patchSetId": 4
      },
      "lineNbr": 71,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2017-10-27T16:38:08Z",
      "side": 1,
      "message": "It looks weird to catch an exception state and then convert it to v8::Maybe...\n\nWhy do you want to return v8::Maybe from this method (instead of making the method take ExceptionState\u0026 as an output parameter)?",
      "revId": "7b1dbbd1aa8a13f0b47b5e7c51d2818ac5136116",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "618f1827_a63c4ce4",
        "filename": "third_party/WebKit/Source/bindings/templates/callback_interface.cpp.tmpl",
        "patchSetId": 4
      },
      "lineNbr": 71,
      "author": {
        "id": 1002507
      },
      "writtenOn": "2017-10-30T13:55:48Z",
      "side": 1,
      "message": "I wrote some explanation in https://chromium-review.googlesource.com/c/chromium/src/+/732872/12/third_party/WebKit/Source/bindings/templates/callback_interface.cpp.tmpl#44\nSee the comment from line 44.\n\nMost of callback invokers are not interested in handling an exception, and the invokers currently let an exception go as is expecting that it\u0027s reported to DevTool\u0027s console.\n\nIf this function takes an ExceptionState as the last argument, then every invoker needs to prepare an ExceptionState and handle it correctly on their own responsibility.  Who guarantees that the invokers correctly manage exceptions?  Every invokers need to write:\n\n    v8::Isolate* isolate \u003d ... needs to get an isolate somehow ...\n    v8::TryCatch tryCatch(isolate);\n    tryCatch.SetVerbose(true);\n    ExceptionState exception_state(... needs class name / method name ...);\n\nIt\u0027s a burden, isn\u0027t it?\n\nAlso note that some of usage of the callbacks are:\n\n    PostTask(Bind(callback, ...arguments...));\n\nThis usage works because there is no need to prepare an ExceptionState.  If it\u0027s mandatory to prepare an ExceptionState, we need to define a helper function for |callback| here.\n\nThese are why I don\u0027t want to introduce ExceptionState in case of callbacks.",
      "parentUuid": "babcf959_7da92470",
      "revId": "7b1dbbd1aa8a13f0b47b5e7c51d2818ac5136116",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "593d59cd_4931bff5",
        "filename": "third_party/WebKit/Source/bindings/templates/callback_interface.cpp.tmpl",
        "patchSetId": 4
      },
      "lineNbr": 71,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2017-10-30T14:43:30Z",
      "side": 1,
      "message": "What is the spec saying about how to handle the exception? (e.g., void case vs. boolean case)",
      "parentUuid": "618f1827_a63c4ce4",
      "revId": "7b1dbbd1aa8a13f0b47b5e7c51d2818ac5136116",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "18eb7a4f_5c4c836d",
        "filename": "third_party/WebKit/Source/bindings/templates/callback_interface.cpp.tmpl",
        "patchSetId": 4
      },
      "lineNbr": 71,
      "author": {
        "id": 1002507
      },
      "writtenOn": "2017-10-30T15:08:44Z",
      "side": 1,
      "message": "Web IDL says to return an abrupt completion (except for promise type), i.e. to throw an exception.  Except for promise type, the behavior doesn\u0027t change depending on the return type.\n\nDOM, HTML, and many other specs (should) define how to treat an exception for each case.  It depends on invoker-side.  It\u0027s okay to let it go.  Also it\u0027s okay to capture it.",
      "parentUuid": "593d59cd_4931bff5",
      "revId": "7b1dbbd1aa8a13f0b47b5e7c51d2818ac5136116",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "92fc900b_3502ef1e",
        "filename": "third_party/WebKit/Source/bindings/templates/callback_interface.h.tmpl",
        "patchSetId": 4
      },
      "lineNbr": 15,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2017-10-27T16:38:08Z",
      "side": 1,
      "message": "who need",
      "revId": "7b1dbbd1aa8a13f0b47b5e7c51d2818ac5136116",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "68989ebf_a2c35ad6",
        "filename": "third_party/WebKit/Source/bindings/templates/callback_interface.h.tmpl",
        "patchSetId": 4
      },
      "lineNbr": 15,
      "author": {
        "id": 1002507
      },
      "writtenOn": "2017-10-30T13:55:48Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "92fc900b_3502ef1e",
      "revId": "7b1dbbd1aa8a13f0b47b5e7c51d2818ac5136116",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d5e16918_bc6448bf",
        "filename": "third_party/WebKit/Source/bindings/templates/callback_interface.h.tmpl",
        "patchSetId": 4
      },
      "lineNbr": 33,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2017-10-27T16:38:08Z",
      "side": 1,
      "message": "So... considering the void case, would it be better to use ExceptionState?",
      "revId": "7b1dbbd1aa8a13f0b47b5e7c51d2818ac5136116",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "aeeac4cc_bc0827a2",
        "filename": "third_party/WebKit/Source/bindings/templates/callback_interface.h.tmpl",
        "patchSetId": 4
      },
      "lineNbr": 33,
      "author": {
        "id": 1002507
      },
      "writtenOn": "2017-10-30T13:55:48Z",
      "side": 1,
      "message": "No, I don\u0027t think so, especially in cases like below:\n\n    PostTask(Bind(callback, ... args ...));\n\nAs I wrote in another reply, if we required an ExceptionState, it would be more inconvenient to invoke a callback than now.\n\nSeeing the use cases of the callbacks whose return type is void, no one cares about an exception, and everyone lets it go like PostTask(Bind(callback, args)).",
      "parentUuid": "d5e16918_bc6448bf",
      "revId": "7b1dbbd1aa8a13f0b47b5e7c51d2818ac5136116",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a57ca9a5_aaaa66d4",
        "filename": "third_party/WebKit/Source/bindings/templates/callback_interface.h.tmpl",
        "patchSetId": 4
      },
      "lineNbr": 51,
      "author": {
        "id": 1001470
      },
      "writtenOn": "2017-10-30T03:28:05Z",
      "side": 1,
      "message": "Is it better to use {% set is_single_oepration \u003d ... %} ?",
      "revId": "7b1dbbd1aa8a13f0b47b5e7c51d2818ac5136116",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "526bdd15_23bfa01d",
        "filename": "third_party/WebKit/Source/bindings/templates/callback_interface.h.tmpl",
        "patchSetId": 4
      },
      "lineNbr": 51,
      "author": {
        "id": 1002507
      },
      "writtenOn": "2017-10-30T13:55:48Z",
      "side": 1,
      "message": "If this is a pure question, it doesn\u0027t make much difference to me.\n\nIf this is a suggestion, I\u0027m just fine to follow it since there is no big difference to me.  The temporary variable name shouldn\u0027t start with \"is_\" though.  {% set single_operation_enum_value \u003d ... %} for example?",
      "parentUuid": "a57ca9a5_aaaa66d4",
      "revId": "7b1dbbd1aa8a13f0b47b5e7c51d2818ac5136116",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5acff1e2_3dba94c8",
        "filename": "third_party/WebKit/Source/bindings/templates/callback_interface.h.tmpl",
        "patchSetId": 4
      },
      "lineNbr": 51,
      "author": {
        "id": 1001470
      },
      "writtenOn": "2017-10-31T09:09:18Z",
      "side": 1,
      "message": "I prefer to use {% set ... %}, because it looks complex for me to have {% if .. else .. endif %} in multi-line and Jinja hacks for an argument.\nSuggested variable name looks good to me.",
      "parentUuid": "526bdd15_23bfa01d",
      "revId": "7b1dbbd1aa8a13f0b47b5e7c51d2818ac5136116",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "32d58333_db582513",
        "filename": "third_party/WebKit/Source/bindings/templates/callback_interface.h.tmpl",
        "patchSetId": 4
      },
      "lineNbr": 51,
      "author": {
        "id": 1002507
      },
      "writtenOn": "2017-11-01T09:05:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5acff1e2_3dba94c8",
      "revId": "7b1dbbd1aa8a13f0b47b5e7c51d2818ac5136116",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2541bd81_096064fb",
        "filename": "third_party/WebKit/Source/modules/webdatabase/SQLStatement.cpp",
        "patchSetId": 4
      },
      "lineNbr": 104,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2017-10-27T12:18:22Z",
      "side": 1,
      "message": "Avoid using Just, IsNothing etc as much as possible. Use To().",
      "revId": "7b1dbbd1aa8a13f0b47b5e7c51d2818ac5136116",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d741f9c4_264647d3",
        "filename": "third_party/WebKit/Source/modules/webdatabase/SQLStatement.cpp",
        "patchSetId": 4
      },
      "lineNbr": 104,
      "author": {
        "id": 1002507
      },
      "writtenOn": "2017-10-27T14:11:09Z",
      "side": 1,
      "message": "This case, it makes some sense.",
      "parentUuid": "2541bd81_096064fb",
      "revId": "7b1dbbd1aa8a13f0b47b5e7c51d2818ac5136116",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "94e8b88c_958d238a",
        "filename": "third_party/WebKit/Source/modules/webdatabase/SQLStatement.cpp",
        "patchSetId": 4
      },
      "lineNbr": 104,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2017-10-27T16:38:08Z",
      "side": 1,
      "message": "I\u0027d prefer writing it as follows:\n\nbool result;\n// When we failed at calling the callback interface.\nif (!error_callback-\u003ehandleEvent(...).To(\u0026result))\n  callback_error \u003d true;\n// When the callback returns an error.\nif (!result)\n  callback_error \u003d true;",
      "parentUuid": "d741f9c4_264647d3",
      "revId": "7b1dbbd1aa8a13f0b47b5e7c51d2818ac5136116",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "05944a70_26e38735",
        "filename": "third_party/WebKit/Source/modules/webdatabase/SQLStatement.cpp",
        "patchSetId": 4
      },
      "lineNbr": 104,
      "author": {
        "id": 1002507
      },
      "writtenOn": "2017-10-30T13:55:48Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "94e8b88c_958d238a",
      "revId": "7b1dbbd1aa8a13f0b47b5e7c51d2818ac5136116",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8da8468d_92b67eb1",
        "filename": "third_party/WebKit/Source/modules/webdatabase/SQLStatement.cpp",
        "patchSetId": 4
      },
      "lineNbr": 109,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2017-10-27T12:18:22Z",
      "side": 1,
      "message": "Ditto.",
      "revId": "7b1dbbd1aa8a13f0b47b5e7c51d2818ac5136116",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9a95cb9a_160dcd74",
        "filename": "third_party/WebKit/Source/modules/webdatabase/SQLStatement.cpp",
        "patchSetId": 4
      },
      "lineNbr": 109,
      "author": {
        "id": 1002507
      },
      "writtenOn": "2017-10-27T13:53:54Z",
      "side": 1,
      "message": "Could you elaborate why we need to avoid IsNothing, IsJust, and FromJust?  They\u0027re well-defined in V8 and seem settle for a long time.\n\nEspecially in this case, we don\u0027t use the value itself.\n\n  bool value;\n  bool had_exception \u003d call_result.To(\u0026value);\n  ALLOW_UNUSED_LOCAL(value);\n  callback_error \u003d !had_exception;\n\nLooks wierd to me.",
      "parentUuid": "8da8468d_92b67eb1",
      "revId": "7b1dbbd1aa8a13f0b47b5e7c51d2818ac5136116",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e5b7b10f_79f06035",
        "filename": "third_party/WebKit/Source/modules/webdatabase/SQLStatement.cpp",
        "patchSetId": 4
      },
      "lineNbr": 109,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2017-10-27T13:58:41Z",
      "side": 1,
      "message": "Mixing Just, IsNothing, To, ToLocal, v8Call macros etc is messy.\n\nWe discussed this in the past and have agreed on unifying the usage to To and ToLocal.\n\nhttps://groups.google.com/a/chromium.org/forum/#!searchin/platform-architecture-dev/to$20tolocal%7Csort:date/platform-architecture-dev/vGLGCaMqhCU/sEOLMz_VBQAJ",
      "parentUuid": "9a95cb9a_160dcd74",
      "revId": "7b1dbbd1aa8a13f0b47b5e7c51d2818ac5136116",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b529d807_4e3237a8",
        "filename": "third_party/WebKit/Source/modules/webdatabase/SQLStatement.cpp",
        "patchSetId": 4
      },
      "lineNbr": 109,
      "author": {
        "id": 1002507
      },
      "writtenOn": "2017-10-27T14:11:09Z",
      "side": 1,
      "message": "IIUC, that thread is discussing if we really need v8Call family and how we can replace it with To/ToLocal.  There was an assumption that we do use the resulting value, I think?\n\nAgain, in this case, we never use the resulting value itself.  It\u0027s quite strange to introduce an unused variable while it\u0027s pretty easy to avoid it.",
      "parentUuid": "e5b7b10f_79f06035",
      "revId": "7b1dbbd1aa8a13f0b47b5e7c51d2818ac5136116",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f91aeb4f_8c5807bb",
        "filename": "third_party/WebKit/Source/modules/webdatabase/SQLStatement.cpp",
        "patchSetId": 4
      },
      "lineNbr": 109,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2017-10-27T16:38:08Z",
      "side": 1,
      "message": "The discussion was about how to treat Maybe/MaybeLocal handles in the binding code base in general.\n\nI\u0027d prefer having a comment like this since not using a return value is not a common pattern.\n\nbool result;\n// When we failed at calling the callback interface.\nif (!error_callback-\u003ehandleEvent(...).To(\u0026result))\n  callback_error \u003d true;\n// We ignore the result of the callback interface.\nelse\n  callback_error \u003d false;",
      "parentUuid": "b529d807_4e3237a8",
      "revId": "7b1dbbd1aa8a13f0b47b5e7c51d2818ac5136116",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "57fcf25c_d5776ec3",
        "filename": "third_party/WebKit/Source/modules/webdatabase/SQLStatement.cpp",
        "patchSetId": 4
      },
      "lineNbr": 109,
      "author": {
        "id": 1002507
      },
      "writtenOn": "2017-10-30T13:55:48Z",
      "side": 1,
      "message": "I\u0027ve realized that the problem is that the return value is NOT used, which indicates that this code is NOT following the spec.  I checked the spec and found the following.\n\nhttps://dev.w3.org/html5/webdatabase/#sqlstatementcallback\nNote that the return value\u0027s type is void.\n\nI\u0027ve updated the implementation accordingly.",
      "parentUuid": "f91aeb4f_8c5807bb",
      "revId": "7b1dbbd1aa8a13f0b47b5e7c51d2818ac5136116",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cad442c3_2465ffca",
        "filename": "third_party/WebKit/Source/modules/webdatabase/SQLStatementCallback.h",
        "patchSetId": 4
      },
      "lineNbr": 31,
      "author": {
        "id": 1001470
      },
      "writtenOn": "2017-10-30T03:28:05Z",
      "side": 1,
      "message": "This #include looks not needed.",
      "revId": "7b1dbbd1aa8a13f0b47b5e7c51d2818ac5136116",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "759f11e1_0c631f7e",
        "filename": "third_party/WebKit/Source/modules/webdatabase/SQLStatementCallback.h",
        "patchSetId": 4
      },
      "lineNbr": 31,
      "author": {
        "id": 1002507
      },
      "writtenOn": "2017-10-30T13:55:48Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "cad442c3_2465ffca",
      "revId": "7b1dbbd1aa8a13f0b47b5e7c51d2818ac5136116",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a39b6fe_b6849e1f",
        "filename": "third_party/WebKit/Source/modules/webdatabase/SQLStatementErrorCallback.h",
        "patchSetId": 4
      },
      "lineNbr": 32,
      "author": {
        "id": 1001470
      },
      "writtenOn": "2017-10-30T03:28:05Z",
      "side": 1,
      "message": "ditto.",
      "revId": "7b1dbbd1aa8a13f0b47b5e7c51d2818ac5136116",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "001da4a0_62012ee5",
        "filename": "third_party/WebKit/Source/modules/webdatabase/SQLStatementErrorCallback.h",
        "patchSetId": 4
      },
      "lineNbr": 32,
      "author": {
        "id": 1002507
      },
      "writtenOn": "2017-10-30T13:55:48Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5a39b6fe_b6849e1f",
      "revId": "7b1dbbd1aa8a13f0b47b5e7c51d2818ac5136116",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8d7075d1_c6c477d9",
        "filename": "third_party/WebKit/Source/modules/webdatabase/SQLTransaction.cpp",
        "patchSetId": 4
      },
      "lineNbr": 163,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2017-10-27T16:38:08Z",
      "side": 1,
      "message": "Ditto.",
      "revId": "7b1dbbd1aa8a13f0b47b5e7c51d2818ac5136116",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bd8b70fa_3848e38d",
        "filename": "third_party/WebKit/Source/modules/webdatabase/SQLTransaction.cpp",
        "patchSetId": 4
      },
      "lineNbr": 163,
      "author": {
        "id": 1002507
      },
      "writtenOn": "2017-10-30T13:55:48Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8d7075d1_c6c477d9",
      "revId": "7b1dbbd1aa8a13f0b47b5e7c51d2818ac5136116",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1f23a09b_59fcc29b",
        "filename": "third_party/WebKit/Source/modules/webdatabase/SQLTransactionCallback.h",
        "patchSetId": 4
      },
      "lineNbr": 32,
      "author": {
        "id": 1001470
      },
      "writtenOn": "2017-10-30T03:28:05Z",
      "side": 1,
      "message": "ditto.",
      "revId": "7b1dbbd1aa8a13f0b47b5e7c51d2818ac5136116",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b1c08aeb_464905a2",
        "filename": "third_party/WebKit/Source/modules/webdatabase/SQLTransactionCallback.h",
        "patchSetId": 4
      },
      "lineNbr": 32,
      "author": {
        "id": 1002507
      },
      "writtenOn": "2017-10-30T13:55:48Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1f23a09b_59fcc29b",
      "revId": "7b1dbbd1aa8a13f0b47b5e7c51d2818ac5136116",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "717c2ad5_f859a13d",
        "filename": "third_party/WebKit/Source/modules/webdatabase/SQLTransactionErrorCallback.h",
        "patchSetId": 4
      },
      "lineNbr": 32,
      "author": {
        "id": 1001470
      },
      "writtenOn": "2017-10-30T03:28:05Z",
      "side": 1,
      "message": "ditto.",
      "revId": "7b1dbbd1aa8a13f0b47b5e7c51d2818ac5136116",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b48d7c2c_8ab19a5f",
        "filename": "third_party/WebKit/Source/modules/webdatabase/SQLTransactionErrorCallback.h",
        "patchSetId": 4
      },
      "lineNbr": 32,
      "author": {
        "id": 1002507
      },
      "writtenOn": "2017-10-30T13:55:48Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "717c2ad5_f859a13d",
      "revId": "7b1dbbd1aa8a13f0b47b5e7c51d2818ac5136116",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "80691661_d0e3b5b9",
        "filename": "third_party/WebKit/Source/platform/bindings/CallbackInterfaceBase.cpp",
        "patchSetId": 4
      },
      "lineNbr": 12,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2017-10-27T16:38:08Z",
      "side": 1,
      "message": "You must pass in callback_object.\n\nWhy is this CL working...? :)",
      "revId": "7b1dbbd1aa8a13f0b47b5e7c51d2818ac5136116",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "76a46f77_b22b8200",
        "filename": "third_party/WebKit/Source/platform/bindings/CallbackInterfaceBase.cpp",
        "patchSetId": 4
      },
      "lineNbr": 12,
      "author": {
        "id": 1002507
      },
      "writtenOn": "2017-10-30T13:55:48Z",
      "side": 1,
      "message": "See line 19.\n\nAnyway, this is redundant.  Removed.",
      "parentUuid": "80691661_d0e3b5b9",
      "revId": "7b1dbbd1aa8a13f0b47b5e7c51d2818ac5136116",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3596e597_99f26664",
        "filename": "third_party/WebKit/Source/platform/bindings/CallbackInterfaceBase.cpp",
        "patchSetId": 4
      },
      "lineNbr": 15,
      "author": {
        "id": 1001470
      },
      "writtenOn": "2017-10-30T03:28:05Z",
      "side": 1,
      "message": "Can we set this in the initializer list?",
      "revId": "7b1dbbd1aa8a13f0b47b5e7c51d2818ac5136116",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c4c83494_05c176b7",
        "filename": "third_party/WebKit/Source/platform/bindings/CallbackInterfaceBase.cpp",
        "patchSetId": 4
      },
      "lineNbr": 15,
      "author": {
        "id": 1002507
      },
      "writtenOn": "2017-10-30T13:55:48Z",
      "side": 1,
      "message": "Technically, yes, we can.  But we cannot put other members in the initializer list.  So, I don\u0027t think that it makes the code easier to read.  I\u0027d prefer the similar way to other members.",
      "parentUuid": "3596e597_99f26664",
      "revId": "7b1dbbd1aa8a13f0b47b5e7c51d2818ac5136116",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cf8f11a1_a118bdc4",
        "filename": "third_party/WebKit/Source/platform/bindings/CallbackInterfaceBase.cpp",
        "patchSetId": 4
      },
      "lineNbr": 21,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2017-10-27T16:38:08Z",
      "side": 1,
      "message": "single_op_or_not \u003d\u003d (kSingleOperation \u0026\u0026 callback_object-\u003eIsCallable())",
      "revId": "7b1dbbd1aa8a13f0b47b5e7c51d2818ac5136116",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e5747975_50eae913",
        "filename": "third_party/WebKit/Source/platform/bindings/CallbackInterfaceBase.cpp",
        "patchSetId": 4
      },
      "lineNbr": 21,
      "author": {
        "id": 1001470
      },
      "writtenOn": "2017-10-30T03:28:05Z",
      "side": 1,
      "message": "(single_op_or_not \u003d\u003d kSingleOperation) \u0026\u0026 callback_object-\u003eIsCallable()",
      "parentUuid": "cf8f11a1_a118bdc4",
      "revId": "7b1dbbd1aa8a13f0b47b5e7c51d2818ac5136116",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "74cd2e81_e521bee0",
        "filename": "third_party/WebKit/Source/platform/bindings/CallbackInterfaceBase.cpp",
        "patchSetId": 4
      },
      "lineNbr": 21,
      "author": {
        "id": 1002507
      },
      "writtenOn": "2017-10-30T13:55:48Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e5747975_50eae913",
      "revId": "7b1dbbd1aa8a13f0b47b5e7c51d2818ac5136116",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a760c405_ed58aa3d",
        "filename": "third_party/WebKit/Source/platform/bindings/CallbackInterfaceBase.h",
        "patchSetId": 4
      },
      "lineNbr": 18,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2017-10-27T16:38:08Z",
      "side": 1,
      "message": "it provides",
      "revId": "7b1dbbd1aa8a13f0b47b5e7c51d2818ac5136116",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "71c0da94_9a62455d",
        "filename": "third_party/WebKit/Source/platform/bindings/CallbackInterfaceBase.h",
        "patchSetId": 4
      },
      "lineNbr": 18,
      "author": {
        "id": 1002507
      },
      "writtenOn": "2017-10-30T13:55:48Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a760c405_ed58aa3d",
      "revId": "7b1dbbd1aa8a13f0b47b5e7c51d2818ac5136116",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d4ca9a62_8872dbe6",
        "filename": "third_party/WebKit/Source/platform/bindings/CallbackInterfaceBase.h",
        "patchSetId": 4
      },
      "lineNbr": 23,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2017-10-27T16:38:08Z",
      "side": 1,
      "message": "Add USING_FAST_MALLOC.",
      "revId": "7b1dbbd1aa8a13f0b47b5e7c51d2818ac5136116",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "db7020c2_68371ca9",
        "filename": "third_party/WebKit/Source/platform/bindings/CallbackInterfaceBase.h",
        "patchSetId": 4
      },
      "lineNbr": 23,
      "author": {
        "id": 1002507
      },
      "writtenOn": "2017-10-30T13:55:48Z",
      "side": 1,
      "message": "I think USING_FAST_MALLOC conflicts with GarbageCollected?",
      "parentUuid": "d4ca9a62_8872dbe6",
      "revId": "7b1dbbd1aa8a13f0b47b5e7c51d2818ac5136116",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e9a53094_5614c903",
        "filename": "third_party/WebKit/Source/platform/bindings/CallbackInterfaceBase.h",
        "patchSetId": 4
      },
      "lineNbr": 28,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2017-10-27T16:38:08Z",
      "side": 1,
      "message": "Use an enum class.",
      "revId": "7b1dbbd1aa8a13f0b47b5e7c51d2818ac5136116",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2e5a7a0d_8e3a5ae2",
        "filename": "third_party/WebKit/Source/platform/bindings/CallbackInterfaceBase.h",
        "patchSetId": 4
      },
      "lineNbr": 28,
      "author": {
        "id": 1002507
      },
      "writtenOn": "2017-10-30T13:55:48Z",
      "side": 1,
      "message": "This enum is defined inside CallbackInterfaceBase, and I thought that CallbackInterfaceBase::kSingleOperation is enough distinguishable and there is no worry about namespace pollution.\n\nDo we really want to write CallbackInterfaceBase::SingleOperationOrNot::kSingleOperation?  Isn\u0027t it too long and redundant?",
      "parentUuid": "e9a53094_5614c903",
      "revId": "7b1dbbd1aa8a13f0b47b5e7c51d2818ac5136116",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dd8a6dba_8b26eafc",
        "filename": "third_party/WebKit/Source/platform/bindings/CallbackInterfaceBase.h",
        "patchSetId": 4
      },
      "lineNbr": 44,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2017-10-27T16:38:08Z",
      "side": 1,
      "message": "CallbackRelevantScriptState (or RelevantScriptState) ?",
      "revId": "7b1dbbd1aa8a13f0b47b5e7c51d2818ac5136116",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eb798cbc_e110c277",
        "filename": "third_party/WebKit/Source/platform/bindings/CallbackInterfaceBase.h",
        "patchSetId": 4
      },
      "lineNbr": 44,
      "author": {
        "id": 1002507
      },
      "writtenOn": "2017-10-30T13:55:48Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "dd8a6dba_8b26eafc",
      "revId": "7b1dbbd1aa8a13f0b47b5e7c51d2818ac5136116",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "adb5d566_e56ab15c",
        "filename": "third_party/WebKit/Source/platform/bindings/CallbackInterfaceBase.h",
        "patchSetId": 4
      },
      "lineNbr": 47,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2017-10-27T16:38:08Z",
      "side": 1,
      "message": "Nit: We normally avoid adding two overloaded methods just for handling constness.",
      "revId": "7b1dbbd1aa8a13f0b47b5e7c51d2818ac5136116",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e40fd5ed_ddb94f7f",
        "filename": "third_party/WebKit/Source/platform/bindings/CallbackInterfaceBase.h",
        "patchSetId": 4
      },
      "lineNbr": 47,
      "author": {
        "id": 1002507
      },
      "writtenOn": "2017-10-30T13:55:48Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "adb5d566_e56ab15c",
      "revId": "7b1dbbd1aa8a13f0b47b5e7c51d2818ac5136116",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ae00fa15_2079d26c",
        "filename": "third_party/WebKit/Source/platform/bindings/CallbackInterfaceBase.h",
        "patchSetId": 4
      },
      "lineNbr": 50,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2017-10-27T16:38:08Z",
      "side": 1,
      "message": "IncumbentScriptState ?",
      "revId": "7b1dbbd1aa8a13f0b47b5e7c51d2818ac5136116",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b5f52303_7e9a720f",
        "filename": "third_party/WebKit/Source/platform/bindings/CallbackInterfaceBase.h",
        "patchSetId": 4
      },
      "lineNbr": 50,
      "author": {
        "id": 1002507
      },
      "writtenOn": "2017-10-30T13:55:48Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ae00fa15_2079d26c",
      "revId": "7b1dbbd1aa8a13f0b47b5e7c51d2818ac5136116",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dfb9e065_e66df3db",
        "filename": "third_party/WebKit/Source/platform/bindings/CallbackInterfaceBase.h",
        "patchSetId": 4
      },
      "lineNbr": 61,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2017-10-27T16:38:08Z",
      "side": 1,
      "message": "How is it guaranteed that this ScopedPersistent doesn\u0027t create a cycle?",
      "revId": "7b1dbbd1aa8a13f0b47b5e7c51d2818ac5136116",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2a588f1f_fcc73ea2",
        "filename": "third_party/WebKit/Source/platform/bindings/CallbackInterfaceBase.h",
        "patchSetId": 4
      },
      "lineNbr": 61,
      "author": {
        "id": 1002507
      },
      "writtenOn": "2017-10-30T13:55:48Z",
      "side": 1,
      "message": "This is just moved from the current implementation in callback_interface.h.tmpl.  No guarantee, of course.",
      "parentUuid": "dfb9e065_e66df3db",
      "revId": "7b1dbbd1aa8a13f0b47b5e7c51d2818ac5136116",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}