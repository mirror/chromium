{
  "comments": [
    {
      "key": {
        "uuid": "f61d0e12_7fb7375b",
        "filename": "chrome/browser/media/router/discovery/dial/dial_media_sink_service_impl.cc",
        "patchSetId": 1
      },
      "lineNbr": 90,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2017-08-01T21:16:04Z",
      "side": 1,
      "message": "Maybe OnDialSinksCleared()?",
      "revId": "b31df08426b945bfea095946fce80cd51b55a7cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8f5fb069_b0157720",
        "filename": "chrome/browser/media/router/discovery/dial/dial_media_sink_service_impl.cc",
        "patchSetId": 1
      },
      "lineNbr": 90,
      "author": {
        "id": 1212411
      },
      "writtenOn": "2017-08-02T20:10:46Z",
      "side": 1,
      "message": "Code removed.",
      "parentUuid": "f61d0e12_7fb7375b",
      "revId": "b31df08426b945bfea095946fce80cd51b55a7cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a9b46362_3da2018d",
        "filename": "chrome/browser/media/router/discovery/dial/dial_media_sink_service_impl.cc",
        "patchSetId": 1
      },
      "lineNbr": 90,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2017-08-07T22:27:58Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "8f5fb069_b0157720",
      "revId": "b31df08426b945bfea095946fce80cd51b55a7cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ba2fcb35_27c3d183",
        "filename": "chrome/browser/media/router/discovery/dial/dial_media_sink_service_impl.h",
        "patchSetId": 1
      },
      "lineNbr": 23,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2017-08-01T21:16:04Z",
      "side": 1,
      "message": "Should this be DialMediaSinkObserver instead?  Since it is not used to help implement the class - only to notify unrelated code that something happened.",
      "revId": "b31df08426b945bfea095946fce80cd51b55a7cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2a25fed5_9ce1fdbf",
        "filename": "chrome/browser/media/router/discovery/dial/dial_media_sink_service_impl.h",
        "patchSetId": 1
      },
      "lineNbr": 23,
      "author": {
        "id": 1212411
      },
      "writtenOn": "2017-08-02T20:10:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ba2fcb35_27c3d183",
      "revId": "b31df08426b945bfea095946fce80cd51b55a7cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2da8fb9c_e3a7b4e0",
        "filename": "chrome/browser/media/router/discovery/dial/dial_media_sink_service_impl.h",
        "patchSetId": 1
      },
      "lineNbr": 25,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2017-08-01T21:16:04Z",
      "side": 1,
      "message": "I assume that |sink| must be a DIAL sink - can you clarify in this comment?",
      "revId": "b31df08426b945bfea095946fce80cd51b55a7cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c369f446_30bf433d",
        "filename": "chrome/browser/media/router/discovery/dial/dial_media_sink_service_impl.h",
        "patchSetId": 1
      },
      "lineNbr": 25,
      "author": {
        "id": 1212411
      },
      "writtenOn": "2017-08-02T20:10:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2da8fb9c_e3a7b4e0",
      "revId": "b31df08426b945bfea095946fce80cd51b55a7cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0c692c67_88636349",
        "filename": "chrome/browser/media/router/discovery/dial/dial_media_sink_service_impl.h",
        "patchSetId": 1
      },
      "lineNbr": 26,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2017-08-01T21:16:04Z",
      "side": 1,
      "message": "Does this API make sense only for DIAL sinks, or for Cast sinks as well?\n\nIf so, this delegate (or observer) API could be implemented in MediaSinkService/MediaSinkServiceBase.\n\nBut I don\u0027t feel strongly, especially if there is no use case for observing Cast sinks right now.",
      "revId": "b31df08426b945bfea095946fce80cd51b55a7cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a9060b0f_31ac2578",
        "filename": "chrome/browser/media/router/discovery/dial/dial_media_sink_service_impl.h",
        "patchSetId": 1
      },
      "lineNbr": 26,
      "author": {
        "id": 1212411
      },
      "writtenOn": "2017-08-02T20:10:46Z",
      "side": 1,
      "message": "Has an initial patch adding observer to MediaSinkService class. Derek suggests that we may have DialMSS take a CastMSS object directly since dual discovery is a special case.\n\nhttps://codereview.chromium.org/2965843002/diff/20001/chrome/common/media_router/discovery/media_sink_service.h",
      "parentUuid": "0c692c67_88636349",
      "revId": "b31df08426b945bfea095946fce80cd51b55a7cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3b0427c3_32f2bd2e",
        "filename": "chrome/browser/media/router/discovery/dial/dial_media_sink_service_impl.h",
        "patchSetId": 1
      },
      "lineNbr": 26,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2017-08-07T22:27:58Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "a9060b0f_31ac2578",
      "revId": "b31df08426b945bfea095946fce80cd51b55a7cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "19be5ac0_a0f0c689",
        "filename": "chrome/browser/media/router/discovery/dial/dial_media_sink_service_impl.h",
        "patchSetId": 1
      },
      "lineNbr": 28,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2017-08-01T21:16:04Z",
      "side": 1,
      "message": "Which sinks are removed?  Can you clarify this comment?",
      "revId": "b31df08426b945bfea095946fce80cd51b55a7cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fa70c69d_5ee45456",
        "filename": "chrome/browser/media/router/discovery/dial/dial_media_sink_service_impl.h",
        "patchSetId": 1
      },
      "lineNbr": 28,
      "author": {
        "id": 1212411
      },
      "writtenOn": "2017-08-02T20:10:46Z",
      "side": 1,
      "message": "Code removed. Does not need this any more because we remove sinks from CastMSSS on ChannelError.",
      "parentUuid": "19be5ac0_a0f0c689",
      "revId": "b31df08426b945bfea095946fce80cd51b55a7cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "78cec09d_f6a11672",
        "filename": "chrome/browser/media/router/discovery/dial/dial_media_sink_service_impl.h",
        "patchSetId": 1
      },
      "lineNbr": 28,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2017-08-07T22:27:58Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "fa70c69d_5ee45456",
      "revId": "b31df08426b945bfea095946fce80cd51b55a7cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "074abe82_5704ccb4",
        "filename": "chrome/browser/media/router/discovery/dial/dial_media_sink_service_impl.h",
        "patchSetId": 1
      },
      "lineNbr": 47,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2017-08-01T21:16:04Z",
      "side": 1,
      "message": "Per my comment above, an observer pattern with Add/Remove observer seems a better fit; the lifetime guarantees are well understood for that.",
      "revId": "b31df08426b945bfea095946fce80cd51b55a7cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "aee38d12_f18559f7",
        "filename": "chrome/browser/media/router/discovery/dial/dial_media_sink_service_impl.h",
        "patchSetId": 1
      },
      "lineNbr": 47,
      "author": {
        "id": 1212411
      },
      "writtenOn": "2017-08-02T20:10:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "074abe82_5704ccb4",
      "revId": "b31df08426b945bfea095946fce80cd51b55a7cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "86d06309_cdcdcb13",
        "filename": "chrome/browser/media/router/discovery/mdns/cast_media_sink_service.h",
        "patchSetId": 1
      },
      "lineNbr": 51,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2017-08-01T21:16:04Z",
      "side": 1,
      "message": "Can this be implemented in private:?\n\nThese methods are invoked on the IO thread, and that contradicts the comment about the UI thread at the top of the class.",
      "revId": "b31df08426b945bfea095946fce80cd51b55a7cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "82d946e8_bb7d8af5",
        "filename": "chrome/browser/media/router/discovery/mdns/cast_media_sink_service.h",
        "patchSetId": 1
      },
      "lineNbr": 51,
      "author": {
        "id": 1212411
      },
      "writtenOn": "2017-08-02T20:10:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "86d06309_cdcdcb13",
      "revId": "b31df08426b945bfea095946fce80cd51b55a7cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0e9185ac_cbd80318",
        "filename": "chrome/browser/media/router/discovery/mdns/cast_media_sink_service_impl.cc",
        "patchSetId": 1
      },
      "lineNbr": 26,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2017-08-01T21:16:04Z",
      "side": 1,
      "message": "Do we need to set default capabilities for the Cast sink?\nI don\u0027t recall what the Cast MRP does around this.",
      "revId": "b31df08426b945bfea095946fce80cd51b55a7cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "66fb8e98_2172792f",
        "filename": "chrome/browser/media/router/discovery/mdns/cast_media_sink_service_impl.cc",
        "patchSetId": 1
      },
      "lineNbr": 26,
      "author": {
        "id": 1212411
      },
      "writtenOn": "2017-08-02T20:10:46Z",
      "side": 1,
      "message": "For cast_sink created from dial_sink, Cast MRP set capabilities to undefined...\n\nhttps://cs.corp.google.com/piper///depot/google3/chrome/dongle/chrome_mrp/discovery/cast_sink.js?rcl\u003d163584485\u0026l\u003d100",
      "parentUuid": "0e9185ac_cbd80318",
      "revId": "b31df08426b945bfea095946fce80cd51b55a7cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "58d44574_5a3e8f43",
        "filename": "chrome/browser/media/router/discovery/mdns/cast_media_sink_service_impl.cc",
        "patchSetId": 1
      },
      "lineNbr": 26,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2017-08-07T22:27:58Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "66fb8e98_2172792f",
      "revId": "b31df08426b945bfea095946fce80cd51b55a7cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "801e67f5_1d8e624c",
        "filename": "chrome/browser/media/router/discovery/mdns/cast_media_sink_service_impl.cc",
        "patchSetId": 1
      },
      "lineNbr": 59,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2017-08-01T21:16:04Z",
      "side": 1,
      "message": "What does it mean for the \"fetch to be completed\" for Cast sinks?\nIs this called when the discovery loop timer fires?",
      "revId": "b31df08426b945bfea095946fce80cd51b55a7cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f5bceadf_9860fc10",
        "filename": "chrome/browser/media/router/discovery/mdns/cast_media_sink_service_impl.cc",
        "patchSetId": 1
      },
      "lineNbr": 59,
      "author": {
        "id": 1212411
      },
      "writtenOn": "2017-08-02T20:10:46Z",
      "side": 1,
      "message": "Yes...",
      "parentUuid": "801e67f5_1d8e624c",
      "revId": "b31df08426b945bfea095946fce80cd51b55a7cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "18bc0c60_c01f30f4",
        "filename": "chrome/browser/media/router/discovery/mdns/cast_media_sink_service_impl.cc",
        "patchSetId": 1
      },
      "lineNbr": 59,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2017-08-07T22:27:58Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "f5bceadf_9860fc10",
      "revId": "b31df08426b945bfea095946fce80cd51b55a7cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2475ac43_fe2c572f",
        "filename": "chrome/browser/media/router/discovery/mdns/cast_media_sink_service_impl.cc",
        "patchSetId": 1
      },
      "lineNbr": 65,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2017-08-01T21:16:04Z",
      "side": 1,
      "message": "It might be helpful to log the unique id and IP address as well.",
      "revId": "b31df08426b945bfea095946fce80cd51b55a7cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b64771c5_b4cdb8c3",
        "filename": "chrome/browser/media/router/discovery/mdns/cast_media_sink_service_impl.cc",
        "patchSetId": 1
      },
      "lineNbr": 65,
      "author": {
        "id": 1212411
      },
      "writtenOn": "2017-08-02T20:10:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2475ac43_fe2c572f",
      "revId": "b31df08426b945bfea095946fce80cd51b55a7cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f327b8e1_ff8dcc9a",
        "filename": "chrome/browser/media/router/discovery/mdns/cast_media_sink_service_impl.cc",
        "patchSetId": 1
      },
      "lineNbr": 71,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2017-08-01T21:16:04Z",
      "side": 1,
      "message": "Similar comment here.",
      "revId": "b31df08426b945bfea095946fce80cd51b55a7cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e38dc40c_e72d8c8b",
        "filename": "chrome/browser/media/router/discovery/mdns/cast_media_sink_service_impl.cc",
        "patchSetId": 1
      },
      "lineNbr": 71,
      "author": {
        "id": 1212411
      },
      "writtenOn": "2017-08-02T20:10:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f327b8e1_ff8dcc9a",
      "revId": "b31df08426b945bfea095946fce80cd51b55a7cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "420d7ae3_26772908",
        "filename": "chrome/browser/media/router/discovery/mdns/cast_media_sink_service_impl.cc",
        "patchSetId": 1
      },
      "lineNbr": 134,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2017-08-01T21:16:04Z",
      "side": 1,
      "message": "Tracking sinks by ip_endpoint is okay except for some corner cases, where a sink changes its IP address because it has renewed its DHCP lease, or the user has roamed between different networks and encounters a different device with the same IP.\n\nEventually this should sort itself out, as connections to non-existent devices will eventually time out.  But I recall in the Cast MRP we are usually careful to track sinks by device id and not by IP address.\n\nI don\u0027t know if this is worth changing a bunch of code at this point.  But if we see issues with stale devices being reported to the MR, we may want to reconsider.",
      "revId": "b31df08426b945bfea095946fce80cd51b55a7cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b1b8fcc9_711660ca",
        "filename": "chrome/browser/media/router/discovery/mdns/cast_media_sink_service_impl.cc",
        "patchSetId": 1
      },
      "lineNbr": 134,
      "author": {
        "id": 1212411
      },
      "writtenOn": "2017-08-02T20:10:46Z",
      "side": 1,
      "message": "It seems fine since we implemented removing sinks on ChannelError. KeepAliveDelegate for cast channel should report channel error on stale devices after some liveness ping expires (liveness timeout is 10 seconds now)...",
      "parentUuid": "420d7ae3_26772908",
      "revId": "b31df08426b945bfea095946fce80cd51b55a7cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "05c6257e_85306940",
        "filename": "chrome/browser/media/router/discovery/mdns/cast_media_sink_service_impl.cc",
        "patchSetId": 1
      },
      "lineNbr": 134,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2017-08-07T22:27:58Z",
      "side": 1,
      "message": "Right, I think this manifests as a corner case, but is something to watch out for.  I think the DHCP renewal case we have had come up as a bug in the past.  This is something we can test for manually as we roll out the experiment.",
      "parentUuid": "b1b8fcc9_711660ca",
      "revId": "b31df08426b945bfea095946fce80cd51b55a7cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "33861210_75b2b552",
        "filename": "chrome/browser/media/router/discovery/mdns/cast_media_sink_service_impl.cc",
        "patchSetId": 1
      },
      "lineNbr": 157,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2017-08-01T21:16:04Z",
      "side": 1,
      "message": "It seems possible to have two pending requests to open a channel to the same sink discovered by both DIAL and Cast, resulting in the sink ending up in current_sinks_by_dial_ and current_sinks_by_mdns_.  I see that this is de-duped in onFetchCompleted through.  Will sinks always eventually end up in the correct map?",
      "revId": "b31df08426b945bfea095946fce80cd51b55a7cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8bd6f414_e88ae241",
        "filename": "chrome/browser/media/router/discovery/mdns/cast_media_sink_service_impl.cc",
        "patchSetId": 1
      },
      "lineNbr": 157,
      "author": {
        "id": 1212411
      },
      "writtenOn": "2017-08-02T20:10:46Z",
      "side": 1,
      "message": "OnDialSinkAdded() will skip opening channel for dial_sink whose ip_endpoint already exists in mDNS service list. But it is still possible that a sink exists in both maps...It seems acceptable because we rely on OnFetchCompleted() to dedupe, populate |current_sinks_| set and send deduped |current_sinks_| to Cast MRP.",
      "parentUuid": "33861210_75b2b552",
      "revId": "b31df08426b945bfea095946fce80cd51b55a7cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d7470405_723ad72c",
        "filename": "chrome/browser/media/router/discovery/mdns/cast_media_sink_service_impl.cc",
        "patchSetId": 1
      },
      "lineNbr": 157,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2017-08-07T22:27:58Z",
      "side": 1,
      "message": "OK, as long as there aren\u0027t duplicates propagated upwards.",
      "parentUuid": "8bd6f414_e88ae241",
      "revId": "b31df08426b945bfea095946fce80cd51b55a7cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "018094a0_dce67566",
        "filename": "chrome/browser/media/router/discovery/mdns/cast_media_sink_service_impl.cc",
        "patchSetId": 1
      },
      "lineNbr": 177,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2017-08-01T21:16:04Z",
      "side": 1,
      "message": "This means that we will attempt Cast channel connections for all DIAL sinks for each round of discovery, which is wasteful if the DIAL sink is a non-Cast device.",
      "revId": "b31df08426b945bfea095946fce80cd51b55a7cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a2170463_c1087653",
        "filename": "chrome/browser/media/router/discovery/mdns/cast_media_sink_service_impl.cc",
        "patchSetId": 1
      },
      "lineNbr": 177,
      "author": {
        "id": 1212411
      },
      "writtenOn": "2017-08-02T20:10:46Z",
      "side": 1,
      "message": "Cast MRP seems open channel without checking either...Shall we check model name \"Eureka Dongle\"?",
      "parentUuid": "018094a0_dce67566",
      "revId": "b31df08426b945bfea095946fce80cd51b55a7cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ae0f509f_72b1e49b",
        "filename": "chrome/browser/media/router/discovery/mdns/cast_media_sink_service_impl.cc",
        "patchSetId": 1
      },
      "lineNbr": 177,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2017-08-07T22:27:58Z",
      "side": 1,
      "message": "No, checking by model name isn\u0027t reliable (there are many to check).  However we should give up on a given device after some number of attempts.  Will require some thought; fine to add a TODO about this.",
      "parentUuid": "a2170463_c1087653",
      "revId": "b31df08426b945bfea095946fce80cd51b55a7cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}