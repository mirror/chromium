{
  "comments": [
    {
      "key": {
        "uuid": "c67cc3c0_5db3ba04",
        "filename": "chrome/browser/autofill/form_structure_browsertest.cc",
        "patchSetId": 2
      },
      "lineNbr": 50,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-08-17T08:07:36Z",
      "side": 1,
      "message": "Is it possible to fix the test here?",
      "revId": "a0f025c79aa423d145817de598551d9bbe6a9c0e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bb48b51e_4bbf3e6a",
        "filename": "chrome/browser/autofill/form_structure_browsertest.cc",
        "patchSetId": 2
      },
      "lineNbr": 50,
      "author": {
        "id": 1211509
      },
      "writtenOn": "2017-08-17T10:21:56Z",
      "side": 1,
      "message": "It is. But it was like 20 tests. And I was lazy. :(\n\nI guess I\u0027ll fix up the whitespace changes in the expectation files when you\u0027re happy with the rest of the patch.",
      "parentUuid": "c67cc3c0_5db3ba04",
      "revId": "a0f025c79aa423d145817de598551d9bbe6a9c0e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1845818e_dbeee2a5",
        "filename": "third_party/WebKit/LayoutTests/external/wpt/fetch/security/dangling-markup-mitigation-data-url.tentative.sub.html",
        "patchSetId": 2
      },
      "lineNbr": 69,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-08-17T08:07:36Z",
      "side": 1,
      "message": "TIL.",
      "range": {
        "startLine": 69,
        "startChar": 15,
        "endLine": 69,
        "endChar": 16
      },
      "revId": "a0f025c79aa423d145817de598551d9bbe6a9c0e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e9a0f648_b5ef357e",
        "filename": "third_party/WebKit/LayoutTests/external/wpt/fetch/security/dangling-markup-mitigation-data-url.tentative.sub.html",
        "patchSetId": 2
      },
      "lineNbr": 69,
      "author": {
        "id": 1211509
      },
      "writtenOn": "2017-08-17T10:21:56Z",
      "side": 1,
      "message": "Hooray for exciting ES6 features, right?",
      "parentUuid": "1845818e_dbeee2a5",
      "range": {
        "startLine": 69,
        "startChar": 15,
        "endLine": 69,
        "endChar": 16
      },
      "revId": "a0f025c79aa423d145817de598551d9bbe6a9c0e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2fac5018_48a2a6d8",
        "filename": "url/url_canon_etc.cc",
        "patchSetId": 2
      },
      "lineNbr": 51,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-08-17T08:07:36Z",
      "side": 1,
      "message": "How about using base::StartsWith from base/strings/string_util.h?",
      "revId": "a0f025c79aa423d145817de598551d9bbe6a9c0e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0f529819_ee325f2e",
        "filename": "url/url_canon_etc.cc",
        "patchSetId": 2
      },
      "lineNbr": 51,
      "author": {
        "id": 1211509
      },
      "writtenOn": "2017-08-17T10:21:56Z",
      "side": 1,
      "message": "There must be a simpler way to approach this than what I ended up with, which turned into something like the following (after adding a `typename STR` to the template above, and passing in `std::string`/`base::string16` from the callsites):\n\n```\nif (base::StartsWith(base::BasicStringPiece\u003cSTR\u003e(input, input_len),\n                     kDataScheme,\n                     base::CompareCase::INSENSITIVE_ASCII)) {\n  ...\n}\n\n```\n\nThat fails to compile because `const char []` can\u0027t be converted into a `base::StringPiece16`, and various hacks I\u0027ve tried haven\u0027t been successful. Can you tell me the magic words I\u0027m supposed to have typed? :)",
      "parentUuid": "2fac5018_48a2a6d8",
      "revId": "a0f025c79aa423d145817de598551d9bbe6a9c0e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a7750a4f_84b105ae",
        "filename": "url/url_canon_etc.cc",
        "patchSetId": 2
      },
      "lineNbr": 51,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-08-18T07:41:35Z",
      "side": 1,
      "message": "Oh... I missed that this function is templated on CHAR...\n\nOK I guess this is the best way to do it \u003d/\n\nNormally I would say that the nice approach would be to use plumb through a BasicStringPiece, but even that would be tricky here (as the string literal would need to have both a 8-bit and 16-bit version)",
      "parentUuid": "0f529819_ee325f2e",
      "revId": "a0f025c79aa423d145817de598551d9bbe6a9c0e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}