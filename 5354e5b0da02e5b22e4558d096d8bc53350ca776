{
  "comments": [
    {
      "key": {
        "uuid": "8010d1f7_32005241",
        "filename": "chrome/browser/extensions/api/extension_action/browser_action_interactive_test.cc",
        "patchSetId": 9
      },
      "lineNbr": 140,
      "author": {
        "id": 1115745
      },
      "writtenOn": "2018-01-18T01:59:28Z",
      "side": 1,
      "message": "This is a bit misleading, because *this* listener won\u0027t reply even if |true| is passed in.  Instead, let\u0027s only instantiate the listener if we won\u0027t reply here.  e.g.:\n\n// Opens an extension popup via the chrome.browserAction.openPopup API.\n// If |will_reply| is true, then the listener is responsible for having a\n// test message listener that replies to the extension. Otherwise, this\n// method will in order to avoid leaking an API function while waiting for\n// a reply.\nvoid OpenPopupViaAPI(bool will_reply) {\n  std::unique_ptr\u003cExtensionTestMessageListener\u003e listener;\n  if (!will_reply)\n    listener \u003d std::make_unique\u003cExtensionTestMessageListener\u003e(\"ready\", false);\n  ASSERT_TRUE(RunExtensionSubtest(...));\n  if (listener)\n    EXPECT_TRUE(listener-\u003eWaitUntilSatisfied());\n  frame_observer.Wait();\n  EnsurePopupActive();\n}",
      "revId": "5354e5b0da02e5b22e4558d096d8bc53350ca776",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f032c79e_58bc3ddd",
        "filename": "chrome/browser/extensions/api/extension_action/browser_action_interactive_test.cc",
        "patchSetId": 9
      },
      "lineNbr": 140,
      "author": {
        "id": 1115745
      },
      "writtenOn": "2018-01-18T16:01:32Z",
      "side": 1,
      "message": "Looks like the CL landed before this was addressed.  Mind adding it in a followup?",
      "parentUuid": "8010d1f7_32005241",
      "revId": "5354e5b0da02e5b22e4558d096d8bc53350ca776",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}