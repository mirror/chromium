{
  "comments": [
    {
      "key": {
        "uuid": "25753973_1dbd9944",
        "filename": "content/browser/frame_host/render_frame_host_impl.cc",
        "patchSetId": 7
      },
      "lineNbr": 1469,
      "author": {
        "id": 1001500
      },
      "writtenOn": "2017-08-11T17:35:50Z",
      "side": 1,
      "message": "I\u0027m with dcheng@ on trying to avoid calling out for test code in the main code. We should be able to intercept incoming Mojo calls and interpose testing code which in turn can call the real code. I\u0027ve added a more verbose comment in another file.",
      "revId": "62b3505f235d00875a619b562816ea09c4454dd5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fbb71fb2_7198dfdb",
        "filename": "content/browser/frame_host/render_frame_host_impl.cc",
        "patchSetId": 7
      },
      "lineNbr": 1469,
      "author": {
        "id": 1003152
      },
      "writtenOn": "2017-08-25T16:18:18Z",
      "side": 1,
      "message": "I responded on the other comment.",
      "parentUuid": "25753973_1dbd9944",
      "revId": "62b3505f235d00875a619b562816ea09c4454dd5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f8bd2ade_27b6c988",
        "filename": "content/browser/frame_host/render_frame_host_impl.cc",
        "patchSetId": 7
      },
      "lineNbr": 1474,
      "author": {
        "id": 1001500
      },
      "writtenOn": "2017-08-11T17:35:50Z",
      "side": 1,
      "message": "This should be an ok change to do. However, it will be good to grep through the codebase to ensure no perf analysis tool is using the name of the event, which this change will cause it to break.",
      "revId": "62b3505f235d00875a619b562816ea09c4454dd5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "31280c79_539168a3",
        "filename": "content/browser/frame_host/render_frame_host_impl.cc",
        "patchSetId": 7
      },
      "lineNbr": 1474,
      "author": {
        "id": 1003152
      },
      "writtenOn": "2017-08-25T16:18:18Z",
      "side": 1,
      "message": "There are no more references to OnDCPL in my checkout -- do you know what repos I should be be looking at?",
      "parentUuid": "f8bd2ade_27b6c988",
      "revId": "62b3505f235d00875a619b562816ea09c4454dd5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c4fd5bda_85c53337",
        "filename": "content/browser/frame_host/render_frame_host_impl.cc",
        "patchSetId": 7
      },
      "lineNbr": 1474,
      "author": {
        "id": 1001500
      },
      "writtenOn": "2017-08-31T23:55:26Z",
      "side": 1,
      "message": "If the chromium repo doesn\u0027t have any, that is likely good. I think some of the telemetry work happens in a separate repo, but I\u0027m not quite sure where.",
      "parentUuid": "31280c79_539168a3",
      "revId": "62b3505f235d00875a619b562816ea09c4454dd5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4486f7e6_05e15459",
        "filename": "content/browser/frame_host/render_frame_host_impl.cc",
        "patchSetId": 7
      },
      "lineNbr": 1474,
      "author": {
        "id": 1003152
      },
      "writtenOn": "2017-09-01T12:50:17Z",
      "side": 1,
      "message": "I sent a heads-up to the Speed team to make sure this is not breaking anything.",
      "parentUuid": "c4fd5bda_85c53337",
      "revId": "62b3505f235d00875a619b562816ea09c4454dd5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c53b3d60_a7ba089a",
        "filename": "content/common/frame_messages_forward.h",
        "patchSetId": 7
      },
      "lineNbr": 8,
      "author": {
        "id": 1001500
      },
      "writtenOn": "2017-08-11T17:35:50Z",
      "side": 1,
      "message": "Can you explain in the comment why this forward declaration is actually needed? It isn\u0027t obvious to me as a reader of the CL.",
      "revId": "62b3505f235d00875a619b562816ea09c4454dd5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ff41378a_56ea5f71",
        "filename": "content/common/frame_messages_forward.h",
        "patchSetId": 7
      },
      "lineNbr": 8,
      "author": {
        "id": 1003152
      },
      "writtenOn": "2017-08-25T16:18:18Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c53b3d60_a7ba089a",
      "revId": "62b3505f235d00875a619b562816ea09c4454dd5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a77fa168_3f53c0dc",
        "filename": "content/common/frame_messages_forward.h",
        "patchSetId": 7
      },
      "lineNbr": 8,
      "author": {
        "id": 1001500
      },
      "writtenOn": "2017-08-31T23:55:26Z",
      "side": 1,
      "message": "Thanks!",
      "parentUuid": "ff41378a_56ea5f71",
      "revId": "62b3505f235d00875a619b562816ea09c4454dd5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dd30db55_da02c56f",
        "filename": "content/renderer/render_frame_impl.cc",
        "patchSetId": 7
      },
      "lineNbr": 4930,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-08-09T09:29:31Z",
      "side": 1,
      "message": "Nit: auto",
      "range": {
        "startLine": 4930,
        "startChar": 2,
        "endLine": 4930,
        "endChar": 63
      },
      "revId": "62b3505f235d00875a619b562816ea09c4454dd5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "156b9b52_160500da",
        "filename": "content/renderer/render_frame_impl.cc",
        "patchSetId": 7
      },
      "lineNbr": 4930,
      "author": {
        "id": 1003152
      },
      "writtenOn": "2017-08-25T16:18:18Z",
      "side": 1,
      "message": "I\u0027d prefer spelling out the type: same amount of lines as with `auto`, but it looks better after clang-format.",
      "parentUuid": "dd30db55_da02c56f",
      "range": {
        "startLine": 4930,
        "startChar": 2,
        "endLine": 4930,
        "endChar": 63
      },
      "revId": "62b3505f235d00875a619b562816ea09c4454dd5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "eaa539e4_ac6eba41",
        "filename": "content/renderer/render_frame_impl.h",
        "patchSetId": 7
      },
      "lineNbr": 712,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-08-09T09:29:31Z",
      "side": 1,
      "message": "FWIW, it seems a bit unusual to do this.\n\nI feel like the Mojo way would be to use InterfaceProvider\u0027s test api: https://cs.chromium.org/chromium/src/services/service_manager/public/cpp/interface_provider.h?rcl\u003d57781f843c7f278b80f9b7dc1403680a9eac939a\u0026l\u003d30",
      "revId": "62b3505f235d00875a619b562816ea09c4454dd5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8b180d77_267b2758",
        "filename": "content/renderer/render_frame_impl.h",
        "patchSetId": 7
      },
      "lineNbr": 712,
      "author": {
        "id": 1002808
      },
      "writtenOn": "2017-08-09T17:30:01Z",
      "side": 1,
      "message": "Note that this is an associated interface. Though AssociatedInterfaceProvider does have a similar testing API which I had forgotten about: https://cs.chromium.org/chromium/src/content/public/common/associated_interface_provider.h?rcl\u003d86a2db9c64f749570f77bd9c944d27466511a4e6\u0026l\u003d45",
      "parentUuid": "eaa539e4_ac6eba41",
      "revId": "62b3505f235d00875a619b562816ea09c4454dd5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1addce1c_bbd71b1e",
        "filename": "content/renderer/render_frame_impl.h",
        "patchSetId": 7
      },
      "lineNbr": 712,
      "author": {
        "id": 1003152
      },
      "writtenOn": "2017-08-25T16:18:18Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8b180d77_267b2758",
      "revId": "62b3505f235d00875a619b562816ea09c4454dd5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa0bf5b6_79d8ccab",
        "filename": "content/renderer/render_frame_impl.h",
        "patchSetId": 7
      },
      "lineNbr": 712,
      "author": {
        "id": 1003152
      },
      "writtenOn": "2017-09-01T12:50:17Z",
      "side": 1,
      "message": "... and reverted because of deadlocks, which are now documented in the overriding method.",
      "parentUuid": "1addce1c_bbd71b1e",
      "revId": "62b3505f235d00875a619b562816ea09c4454dd5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "89befd0e_2ad9d305",
        "filename": "content/test/did_commit_provisional_load_interceptor.h",
        "patchSetId": 7
      },
      "lineNbr": 21,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-08-09T09:29:31Z",
      "side": 1,
      "message": "Similarly, can this just use the test API to inject a custom DidCommitProvisionalLoad() for tests? It should still be able to trivially forward to the RFH afterwards, unless I\u0027m missing something.",
      "revId": "62b3505f235d00875a619b562816ea09c4454dd5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "56dc6b45_41f6ffed",
        "filename": "content/test/did_commit_provisional_load_interceptor.h",
        "patchSetId": 7
      },
      "lineNbr": 21,
      "author": {
        "id": 1001500
      },
      "writtenOn": "2017-08-11T17:35:50Z",
      "side": 1,
      "message": "I\u0027ve also been dabbling with modifying Mojo calls and discussions with dcheng@ and rockot@ lead to https://chromium-review.googlesource.com/c/608812. It will be useful to just subclass the autogenerated interceptor and register it to proxy all incoming calls.\nOne subtlety I haven\u0027t solved yet is that being a proxy between the incoming calls and the real implementation causes the forwarding call to be process-local, which means you lose information about who the caller is and process termination doesn\u0027t work. It should be fine to use if that detail doesn\u0027t apply. An example usage is in https://chromium-review.googlesource.com/c/611102. It works, but still leaks memory and could be improved.",
      "parentUuid": "89befd0e_2ad9d305",
      "revId": "62b3505f235d00875a619b562816ea09c4454dd5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cbd37901_35786735",
        "filename": "content/test/did_commit_provisional_load_interceptor.h",
        "patchSetId": 7
      },
      "lineNbr": 21,
      "author": {
        "id": 1003152
      },
      "writtenOn": "2017-08-25T16:18:18Z",
      "side": 1,
      "message": "We only have test APIs for the InterfaceProvider side, not for\nBinderRegistry / AssociatedInterfaceRegistry. Of course, we could implement a test API for the latter side too, or simply use the production RemoveInterface/AddInterface methods.\n\nAnother disadvantage of hijacking the InterfaceRequest binding is that you can no longer intercept calls to pre-existing RFH\u0027s.\n\nIn addition, Ken prefers a solution where no manual update is needed to test helpers whenever a new method is added to mojom::FrameHost.\n\nTherefore I\u0027d use this solution for now, and then land a follow-up CL once Nasko\u0027s InterceptorForTesting lands to use that. WDYT?",
      "parentUuid": "56dc6b45_41f6ffed",
      "revId": "62b3505f235d00875a619b562816ea09c4454dd5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b0ffeb97_9185ca46",
        "filename": "content/test/did_commit_provisional_load_interceptor.h",
        "patchSetId": 7
      },
      "lineNbr": 21,
      "author": {
        "id": 1001500
      },
      "writtenOn": "2017-08-31T23:55:26Z",
      "side": 1,
      "message": "The InterceptorForTesting landed as part of the CL to enforce localStorage origin restrictions. I\u0027m following it up with even improved version of it in https://chromium-review.googlesource.com/c/chromium/src/+/644187/, so I think we can avoid adding test hooks in the main code at least on the browser side in browser tests.",
      "parentUuid": "cbd37901_35786735",
      "revId": "62b3505f235d00875a619b562816ea09c4454dd5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e260aa68_8587be7f",
        "filename": "content/test/did_commit_provisional_load_interceptor.h",
        "patchSetId": 7
      },
      "lineNbr": 21,
      "author": {
        "id": 1003152
      },
      "writtenOn": "2017-09-01T12:50:17Z",
      "side": 1,
      "message": "Woohoo, thanks a lot, Nasko, this is great! I especially love the fact that you can use this mechanism to inject the test implementation regardless of whether or not an InterfaceRequest is already bound.\n\nCurrently, my CL duplicates for AssociatedBinding what you did for Binding. Let me know if you want to add that to your CL instead.",
      "parentUuid": "b0ffeb97_9185ca46",
      "revId": "62b3505f235d00875a619b562816ea09c4454dd5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9646f387_b3564741",
        "filename": "content/test/test_render_frame.cc",
        "patchSetId": 7
      },
      "lineNbr": 39,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-08-09T09:29:31Z",
      "side": 1,
      "message": "I think I\u0027m missing something; why did this change? The typical pattern is the receiver side implements the version that returns a result via the callback, while the sender/caller side uses the sync call signature (via the proxy object in the generated mojom)\n\nWe should be able to get this behavior by just binding the interface. This is pretty easy to do in tests with something like https://cs.chromium.org/chromium/src/url/mojo/url_gurl_struct_traits_unittest.cc?rcl\u003dcdb881164c3cbea2b9b810d25027f1742f5988c9\u0026l\u003d40",
      "revId": "62b3505f235d00875a619b562816ea09c4454dd5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cac81db8_2147ad81",
        "filename": "content/test/test_render_frame.cc",
        "patchSetId": 7
      },
      "lineNbr": 39,
      "author": {
        "id": 1003152
      },
      "writtenOn": "2017-08-25T16:18:18Z",
      "side": 1,
      "message": "After changing it back, I am now seeing deadlocks whenever somebody calls this. I suppose we are not dispatching the call to the implementation from the sync-message-response-waiting loop the caller is pumping?\n\nKen, am I missing any obvious solutions here?",
      "parentUuid": "9646f387_b3564741",
      "revId": "62b3505f235d00875a619b562816ea09c4454dd5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b8ab992d_321aa5f8",
        "filename": "content/test/test_render_frame.cc",
        "patchSetId": 7
      },
      "lineNbr": 39,
      "author": {
        "id": 1002808
      },
      "writtenOn": "2017-08-28T20:39:36Z",
      "side": 1,
      "message": "Sorry, at a glance I don\u0027t really recall why this would dead-lock, but it\u0027s probably very easy to understand if you poke at it with a debugger.",
      "parentUuid": "cac81db8_2147ad81",
      "revId": "62b3505f235d00875a619b562816ea09c4454dd5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f9b03fb0_6044951b",
        "filename": "content/test/test_render_frame.cc",
        "patchSetId": 7
      },
      "lineNbr": 39,
      "author": {
        "id": 1003152
      },
      "writtenOn": "2017-08-30T15:42:07Z",
      "side": 1,
      "message": "So two deadlocks here...\n\nDEADLOCK #1:\n\n1.) GetFrameHost() called for the first time\n1.1.) GetRemoteAssociatedInterfaces()-\u003eGetInterface(\u0026frame_host_ptr_)\n1.1.1) ... plumbing ...\n1.1.2) Task is posted to bind the Mock implementation to the request end\n1.2) GetFrameHost returns the InterfacePtr end\n2.) GetFrameHost()-\u003eCreateNewWindow called\n2.1.) Sends sync message\n2.2.) Waits for sync response, while dispatching incoming sync messages\n\nHowever, posted tasks are not dispatched, so the implementation is never bound, the sync request message is never dispatched, response never arrives.\n\nDEADLOCK #2:\n\nWhen attempting to fix #1 by making sure that the task posted in 1.1.1 is processed before 1.2, the three obvious choices are:\n (1) InterfacePtr::FlushForTesting\n (2) base::RunLoop::RunUntilIdle\n (3) base::RunLoop(kNestableTasksAllowed)::RunUntilIdle\n\n(1) deadlocks and (2) does nothing if GetFrameHost() is first called while we are already inside a message loop, e.g. when handling on OnDidCommitProvisionalLoad.\n\n(3) seems to work, but it\u0027s the only use of kNestableTasksAllowed. :-/",
      "parentUuid": "b8ab992d_321aa5f8",
      "revId": "62b3505f235d00875a619b562816ea09c4454dd5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eb704aa9_bbcf0e2d",
        "filename": "content/test/test_render_frame.cc",
        "patchSetId": 7
      },
      "lineNbr": 39,
      "author": {
        "id": 1003152
      },
      "writtenOn": "2017-09-01T12:50:17Z",
      "side": 1,
      "message": "Because of the deadlocks, as per Ken\u0027s suggestions I reverted to the earlier solution where we are directly returning the Mock, and not binding it. I also described the reasons in a comment.",
      "parentUuid": "f9b03fb0_6044951b",
      "revId": "62b3505f235d00875a619b562816ea09c4454dd5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}