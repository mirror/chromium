{
  "comments": [
    {
      "key": {
        "uuid": "fc36fc3a_6d99a15d",
        "filename": "content/browser/service_worker/service_worker_provider_host.cc",
        "patchSetId": 4
      },
      "lineNbr": 1198,
      "author": {
        "id": 1000128
      },
      "writtenOn": "2017-09-08T01:48:14Z",
      "side": 1,
      "message": "destroyes -\u003e destroys\n\n(here and throughout)",
      "revId": "0cb29294c55056d589d176f418ffed81bf4a7440",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6123c54d_f1ca7d53",
        "filename": "content/browser/service_worker/service_worker_provider_host.cc",
        "patchSetId": 4
      },
      "lineNbr": 1198,
      "author": {
        "id": 1161621
      },
      "writtenOn": "2017-09-08T03:08:32Z",
      "side": 1,
      "message": "Done for all places.",
      "parentUuid": "fc36fc3a_6d99a15d",
      "revId": "0cb29294c55056d589d176f418ffed81bf4a7440",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "28ce9a4a_7cd1033f",
        "filename": "content/browser/service_worker/service_worker_provider_host.cc",
        "patchSetId": 4
      },
      "lineNbr": 1201,
      "author": {
        "id": 1000128
      },
      "writtenOn": "2017-09-08T01:48:14Z",
      "side": 1,
      "message": "ahh... I didn\u0027t realize we\u0027d need this |invalid*| thing.\n\nsorry to go in a circle, but now I\u0027m feeling a struct would be useful here after all. Does something like this work:\n\nstruct RequestForReady {\n  enum class State { kInitial, kWaiting, kCompleted, kAborted };\n  base::OnceCallback\u003cGetRregistrationForReadyCallback\u003e callback_;\n  State state;\n};\n\nThis has some niceties:\n\nif (!get_ready_callback_ || get_ready_callback_-\u003eis_null())\n\u003d\u003e\nif (request_for_ready_.state !\u003d kWaiting) \n\n\nall the conditionals about null become conditions about an explicit state.\n\nWDYT?",
      "revId": "0cb29294c55056d589d176f418ffed81bf4a7440",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "99d15d68_22d5503a",
        "filename": "content/browser/service_worker/service_worker_provider_host.cc",
        "patchSetId": 4
      },
      "lineNbr": 1201,
      "author": {
        "id": 1161621
      },
      "writtenOn": "2017-09-08T03:08:32Z",
      "side": 1,
      "message": "Yeah this unified the null conditionals into a single place. But,, maybe I did not fully understand about this but seems we still need another invalid_get_ready_callback_? Considering such a scenario:\n - The 1st request comes with callback_1, |state_| is set to kWaiting, |callback_| is set to callback_1.\n - The 2nd request comes with callback_2, as this is an invalid request, we need to mojo::ReportBadMessage(), and also need to cache callback_2, but we can\u0027t put it into |callback_|, that will destroy callback_1 which will complain it has never been run before its destruction.",
      "parentUuid": "28ce9a4a_7cd1033f",
      "revId": "0cb29294c55056d589d176f418ffed81bf4a7440",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "67d794fb_bd8c3893",
        "filename": "content/browser/service_worker/service_worker_provider_host.cc",
        "patchSetId": 4
      },
      "lineNbr": 1201,
      "author": {
        "id": 1000128
      },
      "writtenOn": "2017-09-08T03:51:52Z",
      "side": 1,
      "message": "Ah didn\u0027t thnk about that. Don\u0027t we have the same problem with invalid_callback_ though, if multiple bad  messages come in? Or can we assume after ReportBadMessage(), we never get another request?\n\nI think we might want to revisit the decision to run the callback with nonsense params... feels there should be a solution that allows us to throw away callback immediately instead of having to either keep it around or run it with nonsense params...\n\nLet me post something on the chromium-mojo email thread.",
      "parentUuid": "99d15d68_22d5503a",
      "revId": "0cb29294c55056d589d176f418ffed81bf4a7440",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "35f8b958_31eeaa6d",
        "filename": "content/browser/service_worker/service_worker_provider_host.cc",
        "patchSetId": 4
      },
      "lineNbr": 1201,
      "author": {
        "id": 1161621
      },
      "writtenOn": "2017-09-08T05:39:28Z",
      "side": 1,
      "message": "I saw the chromium-mojo email, Thanks! ReportBadMessage will kill renderer process but |binding_| will get the error notification asynchronously, so I think it\u0027s possible that multiple invalid requests rush in before |binding_| error handler. Maybe we need to get back to run callback with nonsense params.. Let\u0027s see are there some insights about this in chromium-mojo:)",
      "parentUuid": "67d794fb_bd8c3893",
      "revId": "0cb29294c55056d589d176f418ffed81bf4a7440",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "81f4d25a_753d16c0",
        "filename": "content/browser/service_worker/service_worker_provider_host.cc",
        "patchSetId": 4
      },
      "lineNbr": 1201,
      "author": {
        "id": 1000128
      },
      "writtenOn": "2017-09-08T05:47:51Z",
      "side": 1,
      "message": "Cool... yeah and I also don\u0027t wish to block you on this... so I wouldn\u0027t mind landing the \"run with dummy params\" thing now and revise it later when we learn more.",
      "parentUuid": "35f8b958_31eeaa6d",
      "revId": "0cb29294c55056d589d176f418ffed81bf4a7440",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "afab20a3_c092ec1d",
        "filename": "content/browser/service_worker/service_worker_provider_host.cc",
        "patchSetId": 4
      },
      "lineNbr": 1201,
      "author": {
        "id": 1161621
      },
      "writtenOn": "2017-09-08T06:19:16Z",
      "side": 1,
      "message": "Ah no problem I\u0027m not in hurry:) Now I can still continue preparing another CL replacing  content::ServiceWorkerRegistrationObjectInfo with mojom one based on this CL. I also very like current codes\u0027 simplicity, and the mojo method prototype is conforming with SW spec well. \nAnd even finally we decided to run callback with nonsense params for error cases, I\u0027m considering that we can still avoid the additional |error| and |error_msg| params, like bellowing:\nGetRegistrationForReady()\n     \u003d\u003e (ServiceWorkerRegistrationObjectInfo? registration,\n         ServiceWorkerVersionAttributes? attributes);\nWDYT?",
      "parentUuid": "81f4d25a_753d16c0",
      "revId": "0cb29294c55056d589d176f418ffed81bf4a7440",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e9b854fa_a2384262",
        "filename": "content/common/service_worker/service_worker_container.mojom",
        "patchSetId": 4
      },
      "lineNbr": 46,
      "author": {
        "id": 1000128
      },
      "writtenOn": "2017-09-08T01:48:14Z",
      "side": 1,
      "message": "nit: just \"Corresponds to navigator.serviceWorker.ready.\" for consistency with above?",
      "revId": "0cb29294c55056d589d176f418ffed81bf4a7440",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b75a76fa_80cd8b40",
        "filename": "content/common/service_worker/service_worker_container.mojom",
        "patchSetId": 4
      },
      "lineNbr": 46,
      "author": {
        "id": 1161621
      },
      "writtenOn": "2017-09-08T03:08:32Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e9b854fa_a2384262",
      "revId": "0cb29294c55056d589d176f418ffed81bf4a7440",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f51fb48d_372a4b7d",
        "filename": "content/common/service_worker/service_worker_container.mojom",
        "patchSetId": 4
      },
      "lineNbr": 47,
      "author": {
        "id": 1000128
      },
      "writtenOn": "2017-09-08T01:48:14Z",
      "side": 1,
      "message": "// Returns the service worker registration for the ServiceWorkerContainer that this interface hosts, once such a registration exists and has an active service worker.",
      "revId": "0cb29294c55056d589d176f418ffed81bf4a7440",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8da3c38e_248e8ee3",
        "filename": "content/common/service_worker/service_worker_container.mojom",
        "patchSetId": 4
      },
      "lineNbr": 47,
      "author": {
        "id": 1161621
      },
      "writtenOn": "2017-09-08T03:08:32Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f51fb48d_372a4b7d",
      "revId": "0cb29294c55056d589d176f418ffed81bf4a7440",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6767e82b_76460bf9",
        "filename": "content/common/service_worker/service_worker_container.mojom",
        "patchSetId": 4
      },
      "lineNbr": 50,
      "author": {
        "id": 1000128
      },
      "writtenOn": "2017-09-08T01:48:14Z",
      "side": 1,
      "message": "I don\u0027t think we need lines 49-50, this pretty strongly matches the ServiceWorkerContainer#ready spec which is guaranteed to never reject:\nhttps://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/ready",
      "revId": "0cb29294c55056d589d176f418ffed81bf4a7440",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6249c119_01779912",
        "filename": "content/common/service_worker/service_worker_container.mojom",
        "patchSetId": 4
      },
      "lineNbr": 50,
      "author": {
        "id": 1161621
      },
      "writtenOn": "2017-09-08T03:08:32Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6767e82b_76460bf9",
      "revId": "0cb29294c55056d589d176f418ffed81bf4a7440",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}