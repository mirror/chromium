{
  "comments": [
    {
      "key": {
        "uuid": "628906ee_43763013",
        "filename": "ash/public/cpp/shelf_prefs.cc",
        "patchSetId": 19
      },
      "lineNbr": 48,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2017-08-10T17:43:20Z",
      "side": 1,
      "message": "msw, can you take a look at this?\n\nsammc, when does this happen? Just in tests? If so, please document. If not, when does it happen? It might not be safe to do this, depending on the timing. (Like, does it happen during external monitor connect/disconnect? You can simulate this with --ash-dev-shortcuts --ash-debug-shortcuts and hit Ctrl-Shift-D.)\n\nThis may rely on AlignmentFromPref() having a default return value that is the same as prefs-\u003eGetDefaultPrefValue() on line 83. I suspect that\u0027s true today, but may not be a safe assumption. If you have to do something like this, is there some way to DCHECK or add a unit test that the two functions have the same default?",
      "revId": "e828b84c4ad235dccbf57e0b89a32d0b97c3853a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cf35376e_b8025e59",
        "filename": "ash/public/cpp/shelf_prefs.cc",
        "patchSetId": 19
      },
      "lineNbr": 48,
      "author": {
        "id": 1116026
      },
      "writtenOn": "2017-08-11T06:19:00Z",
      "side": 1,
      "message": "This seems to be occurring when switching account. See https://luci-logdog.appspot.com/v/?s\u003dchromium%2Fbb%2Ftryserver.chromium.linux%2Flinux_chromium_chromeos_rel_ng%2F487258%2F%2B%2Frecipes%2Fsteps%2Fbrowser_tests__with_patch_%2F0%2Flogs%2FChromeSessionManagerTest.LoginExistingUsers%2F0 and https://luci-logdog.appspot.com/v/?s\u003dchromium%2Fbb%2Ftryserver.chromium.linux%2Flinux_chromium_chromeos_rel_ng%2F487258%2F%2B%2Frecipes%2Fsteps%2Fbrowser_tests__with_patch_%2F0%2Flogs%2FNSSContextChromeOSBrowserTest.TwoUsers%2F0.\n\nIt seems the shelf prefs are needed in chrome early in the life of a profile so they need to be chrome-owned for now.",
      "parentUuid": "628906ee_43763013",
      "revId": "e828b84c4ad235dccbf57e0b89a32d0b97c3853a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1fbbdbf7_d95801fe",
        "filename": "ash/public/cpp/shelf_prefs.cc",
        "patchSetId": 19
      },
      "lineNbr": 48,
      "author": {
        "id": 1001118
      },
      "writtenOn": "2017-08-11T18:17:23Z",
      "side": 1,
      "message": "Gosh ShelfBoundsChangesProbablyWithUser is annoying, as is async nature of registering foreign prefs (but more so chrome\u0027s need to check shelf auto-hide/alignment prefs at all)... I doubt there\u0027s any way to delay calls to that function, so I guess that function should just return some default answer if the prefs haven\u0027t yet been registered (I suppose \u0027true\u0027?), and/or the GetShelf*Pref functions should themselves return default values if the prefs are not yet registered. Let me know if you need me to handle this in a separate CL [prerequisite to this one?], but I\u0027d *really* rather not see the shelf prefs moved back to chrome. I\u0027m taking the afternoon off, but I can take a closer look Monday.",
      "parentUuid": "cf35376e_b8025e59",
      "revId": "e828b84c4ad235dccbf57e0b89a32d0b97c3853a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "21a26f25_0e2299b5",
        "filename": "ash/public/cpp/shelf_prefs.cc",
        "patchSetId": 19
      },
      "lineNbr": 48,
      "author": {
        "id": 1116026
      },
      "writtenOn": "2017-08-14T05:43:50Z",
      "side": 1,
      "message": "I\u0027ve changed ShelfBoundsChangesProbablyWithUser() to early exit if the pref isn\u0027t registered.",
      "parentUuid": "1fbbdbf7_d95801fe",
      "revId": "e828b84c4ad235dccbf57e0b89a32d0b97c3853a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "73e564b4_da5a7fe5",
        "filename": "ash/public/cpp/shelf_prefs.cc",
        "patchSetId": 19
      },
      "lineNbr": 49,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2017-08-10T17:43:20Z",
      "side": 1,
      "message": "nit: return std::string() is more common in ash code",
      "revId": "e828b84c4ad235dccbf57e0b89a32d0b97c3853a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "702c0378_461d921e",
        "filename": "ash/public/cpp/shelf_prefs.cc",
        "patchSetId": 19
      },
      "lineNbr": 49,
      "author": {
        "id": 1116026
      },
      "writtenOn": "2017-08-11T06:19:00Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "73e564b4_da5a7fe5",
      "revId": "e828b84c4ad235dccbf57e0b89a32d0b97c3853a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2ad8916d_9b7d7cac",
        "filename": "ash/session/session_controller.cc",
        "patchSetId": 19
      },
      "lineNbr": 275,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2017-08-10T17:43:20Z",
      "side": 1,
      "message": "nit: add comment that it\u0027s intentional that last_active_user_prefs_ might point to the previous user for a while",
      "revId": "e828b84c4ad235dccbf57e0b89a32d0b97c3853a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f13a4f57_ce0fad5c",
        "filename": "ash/session/session_controller.cc",
        "patchSetId": 19
      },
      "lineNbr": 275,
      "author": {
        "id": 1116026
      },
      "writtenOn": "2017-08-11T06:19:00Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2ad8916d_9b7d7cac",
      "revId": "e828b84c4ad235dccbf57e0b89a32d0b97c3853a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "adf25ab3_76d140c9",
        "filename": "ash/session/session_controller.cc",
        "patchSetId": 19
      },
      "lineNbr": 283,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2017-08-10T17:43:20Z",
      "side": 1,
      "message": "Move assignment out of if() please",
      "revId": "e828b84c4ad235dccbf57e0b89a32d0b97c3853a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cd31be1e_65eb8973",
        "filename": "ash/session/session_controller.cc",
        "patchSetId": 19
      },
      "lineNbr": 283,
      "author": {
        "id": 1116026
      },
      "writtenOn": "2017-08-11T06:19:00Z",
      "side": 1,
      "message": "I just noticed this is doing the same lookup as above in a different way, so removed it.",
      "parentUuid": "adf25ab3_76d140c9",
      "revId": "e828b84c4ad235dccbf57e0b89a32d0b97c3853a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c2a55d3d_db772262",
        "filename": "ash/session/session_controller.cc",
        "patchSetId": 19
      },
      "lineNbr": 490,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2017-08-10T17:43:20Z",
      "side": 1,
      "message": "nit: comment when this can happen (tests? ash_standalone with no chrome/pref service?)",
      "revId": "e828b84c4ad235dccbf57e0b89a32d0b97c3853a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "45157dec_3e3959a9",
        "filename": "ash/session/session_controller.cc",
        "patchSetId": 19
      },
      "lineNbr": 490,
      "author": {
        "id": 1116026
      },
      "writtenOn": "2017-08-11T06:19:00Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c2a55d3d_db772262",
      "revId": "e828b84c4ad235dccbf57e0b89a32d0b97c3853a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f6158d12_7c4d6f0f",
        "filename": "ash/session/session_observer.h",
        "patchSetId": 19
      },
      "lineNbr": 48,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2017-08-10T17:43:20Z",
      "side": 1,
      "message": "Nice comment. Also, it\u0027s great to see all the null checks being removed from the observer impls.",
      "revId": "e828b84c4ad235dccbf57e0b89a32d0b97c3853a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d2526bc6_c3e20972",
        "filename": "ash/system/tray_caps_lock.cc",
        "patchSetId": 19
      },
      "lineNbr": 207,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2017-08-10T17:43:20Z",
      "side": 1,
      "message": "Just to double-check -- it\u0027s safe to do this in classic ash? This pref will be registered once as a regular pref in chrome code, then again here as a foreign pref.",
      "revId": "e828b84c4ad235dccbf57e0b89a32d0b97c3853a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d5e79fe2_5c693838",
        "filename": "ash/system/tray_caps_lock.cc",
        "patchSetId": 19
      },
      "lineNbr": 207,
      "author": {
        "id": 1116026
      },
      "writtenOn": "2017-08-11T06:19:00Z",
      "side": 1,
      "message": "Yes. This CL changes classic ash to also access prefs over mojo.",
      "parentUuid": "d2526bc6_c3e20972",
      "revId": "e828b84c4ad235dccbf57e0b89a32d0b97c3853a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6f3cd981_76512174",
        "filename": "chrome/browser/policy/policy_prefs_browsertest.cc",
        "patchSetId": 19
      },
      "lineNbr": 452,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2017-08-10T17:43:20Z",
      "side": 1,
      "message": "Q: Just for my knowledge, why does this only do LogoutButtonTray instead of everything?",
      "revId": "e828b84c4ad235dccbf57e0b89a32d0b97c3853a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "57c522c8_2696addc",
        "filename": "chrome/browser/policy/policy_prefs_browsertest.cc",
        "patchSetId": 19
      },
      "lineNbr": 452,
      "author": {
        "id": 1116026
      },
      "writtenOn": "2017-08-11T06:19:00Z",
      "side": 1,
      "message": "LogoutButtonTray doesn\u0027t share its prefs with chrome, but the test wants to make sure the corresponding policy affects the pref. Registering all ash prefs would cause double-registration for the shared prefs. Added a comment explaining what\u0027s going on here.",
      "parentUuid": "6f3cd981_76512174",
      "revId": "e828b84c4ad235dccbf57e0b89a32d0b97c3853a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9b9bbb00_4872e014",
        "filename": "chrome/browser/ui/ash/launcher/launcher_context_menu_unittest.cc",
        "patchSetId": 19
      },
      "lineNbr": 80,
      "author": {
        "id": 1001118
      },
      "writtenOn": "2017-08-10T17:50:56Z",
      "side": 1,
      "message": "Similar to James\u0027 question, why is this needed? Can AshTestBase register all the ash prefs like we would in production uses of ash?",
      "revId": "e828b84c4ad235dccbf57e0b89a32d0b97c3853a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "736f1875_05f868b0",
        "filename": "chrome/browser/ui/ash/launcher/launcher_context_menu_unittest.cc",
        "patchSetId": 19
      },
      "lineNbr": 80,
      "author": {
        "id": 1116026
      },
      "writtenOn": "2017-08-11T06:19:00Z",
      "side": 1,
      "message": "The problem is ash prefs are used from chrome in this test. In production, this relies on ash connecting to chrome to register them. In tests, AshTestBase sets up the PrefServices obtained from SessionController to match how they would look from ash; this test is on the chrome side so something needs to register them.\n\nIn any case, it does appear that the shelf prefs do need to stay in chrome for now.",
      "parentUuid": "9b9bbb00_4872e014",
      "revId": "e828b84c4ad235dccbf57e0b89a32d0b97c3853a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}