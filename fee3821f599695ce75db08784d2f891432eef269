{
  "comments": [
    {
      "key": {
        "uuid": "d27a5330_1d6ed3a4",
        "filename": "content/public/common/simple_url_loader.cc",
        "patchSetId": 5
      },
      "lineNbr": 772,
      "author": {
        "id": 1001809
      },
      "writtenOn": "2017-12-07T18:41:55Z",
      "side": 1,
      "message": "Can you say a bit more about the background to this statement?  I don\u0027t understand any of why AttachFileForUpload() would allow them to be opened in the current process, why that is desirable (unless that\u0027s as simple as \"the network service won\u0027t have privileges to open arbitrary files, so they have to be opened out of process and a handle passed in\"), or why the goal isn\u0027t to find a way to make a DataElement that allows passing files in by the usual pathway rather than adding in a new interface for it.",
      "range": {
        "startLine": 772,
        "startChar": 39,
        "endLine": 772,
        "endChar": 41
      },
      "revId": "fee3821f599695ce75db08784d2f891432eef269",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bd82ddb4_81b2f251",
        "filename": "content/public/common/simple_url_loader.cc",
        "patchSetId": 5
      },
      "lineNbr": 772,
      "author": {
        "id": 1115968
      },
      "writtenOn": "2017-12-07T19:28:11Z",
      "side": 1,
      "message": "My understanding is that we don\u0027t want the network process to be able to open arbitrary files.  Per earlier comment, the usual pathway involves threadhops in every consumer.  I plan to have this class support doing that directly, to simplify consumers.",
      "parentUuid": "d27a5330_1d6ed3a4",
      "range": {
        "startLine": 772,
        "startChar": 39,
        "endLine": 772,
        "endChar": 41
      },
      "revId": "fee3821f599695ce75db08784d2f891432eef269",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ae3b9a58_b95f768a",
        "filename": "content/public/common/simple_url_loader.cc",
        "patchSetId": 5
      },
      "lineNbr": 772,
      "author": {
        "id": 1001809
      },
      "writtenOn": "2017-12-08T19:07:58Z",
      "side": 1,
      "message": "Got it.  I\u0027d like this comment (since it\u0027s in the implementation) to acknowledge the possibility of attaching files directly as well as through AttachFileForUpload() (since I now think of AttachFileForUpload() as a convenience method that the consumer could choose to use or not).  Maybe \"Files must eventually be sent to the network service via a DataElement of type TYPE_RAW_FILE as the network service cannot open files.\"  I think that\u0027s enough, but you could optionally add \"The consumer may produce this data element by use of AttachFileForUpload with a file path.\" or something like that.",
      "parentUuid": "bd82ddb4_81b2f251",
      "range": {
        "startLine": 772,
        "startChar": 39,
        "endLine": 772,
        "endChar": 41
      },
      "revId": "fee3821f599695ce75db08784d2f891432eef269",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7ffb2d69_a08e8578",
        "filename": "content/public/common/simple_url_loader.cc",
        "patchSetId": 5
      },
      "lineNbr": 777,
      "author": {
        "id": 1001809
      },
      "writtenOn": "2017-12-07T18:41:55Z",
      "side": 1,
      "message": "I\u0027m sure it\u0027s something I\u0027m missing about the use of this enum, but why is TYPE_BYTES not allowed in the element list?",
      "range": {
        "startLine": 777,
        "startChar": 31,
        "endLine": 777,
        "endChar": 38
      },
      "revId": "fee3821f599695ce75db08784d2f891432eef269",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "208a3490_bf8c9982",
        "filename": "content/public/common/simple_url_loader.cc",
        "patchSetId": 5
      },
      "lineNbr": 777,
      "author": {
        "id": 1115968
      },
      "writtenOn": "2017-12-07T19:28:11Z",
      "side": 1,
      "message": "Because we\u0027ll potentially need to make *4* copies of it to send the string to the network process, which is kind of absurd.  Why 4?\n\n* We need to copy it into a DataElement (We can possible remove it, if the consumer gives us ownership, but the DataElement API doesn\u0027t currently support that, though I may add it)\n* We then need to copy it to the IPC buffer.\n* We then need to copy it from the IPC buffer to another DataElement.\n* We then need to copy it from the DataElement to the upload code (Again, may be able to skip that one).\n\nI\u0027m going to add a similar method to SimpleURLLoader to upload a string, and if it\u0027s too big (Over 256k with 4 copies, maybe 512-1MB if we get it down to 2?), just stream it.  Rather than DCHECK based on string size, it\u0027s simpler to just force them to use the streaming API.  If we later need to rethink that, it\u0027s easy enough to do.\n\nEven with only copying the data twice, when retries are enabled, we\u0027ll still need to keep two copies of the string around in memory, one in each process, until the request is complete.",
      "parentUuid": "7ffb2d69_a08e8578",
      "range": {
        "startLine": 777,
        "startChar": 31,
        "endLine": 777,
        "endChar": 38
      },
      "revId": "fee3821f599695ce75db08784d2f891432eef269",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "99d34b02_6833209c",
        "filename": "content/public/common/simple_url_loader.cc",
        "patchSetId": 5
      },
      "lineNbr": 777,
      "author": {
        "id": 1001809
      },
      "writtenOn": "2017-12-08T19:07:58Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "208a3490_bf8c9982",
      "range": {
        "startLine": 777,
        "startChar": 31,
        "endLine": 777,
        "endChar": 38
      },
      "revId": "fee3821f599695ce75db08784d2f891432eef269",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3ac2eb8d_45f093ea",
        "filename": "content/public/common/simple_url_loader.h",
        "patchSetId": 5
      },
      "lineNbr": 87,
      "author": {
        "id": 1001809
      },
      "writtenOn": "2017-12-07T18:41:55Z",
      "side": 1,
      "message": "I feel like there\u0027s context I\u0027m missing to understand this, which suggests to me we need more documentation.  I scanned ResourceRequest looking for a base::File data member, and didn\u0027t spot it.  Given the context for this CL, I suspect but am not sure that you mean that if there is a temporary file provided for upload through ResourceRequestBody::elements_, it will be deleted on another thread, but I think it\u0027s worthwhile being explicit about that.\n\nETA: It looks from the implementation as if it\u0027s explicitly illegal to pass in files for upload using this interface, which suggests that I\u0027m confused or the above comment is wrong.  What am I missing?",
      "range": {
        "startLine": 87,
        "startChar": 8,
        "endLine": 87,
        "endChar": 15
      },
      "revId": "fee3821f599695ce75db08784d2f891432eef269",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "48ede302_d0f741b4",
        "filename": "content/public/common/simple_url_loader.h",
        "patchSetId": 5
      },
      "lineNbr": 87,
      "author": {
        "id": 1115968
      },
      "writtenOn": "2017-12-07T19:28:11Z",
      "side": 1,
      "message": "Sorry, comment carried over from an earlier version (And by \"delete\" I actually meant \"destroyed\").  I\u0027ve removed it.  Will add something similar once I start opening the file in the current process.",
      "parentUuid": "3ac2eb8d_45f093ea",
      "range": {
        "startLine": 87,
        "startChar": 8,
        "endLine": 87,
        "endChar": 15
      },
      "revId": "fee3821f599695ce75db08784d2f891432eef269",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "18781b6b_f5daf000",
        "filename": "content/public/common/simple_url_loader.h",
        "patchSetId": 5
      },
      "lineNbr": 180,
      "author": {
        "id": 1001809
      },
      "writtenOn": "2017-12-07T18:41:55Z",
      "side": 1,
      "message": "Could you give some background about why the extra interface instead of finding a way to make the current ResourceRequest-\u003eDataElement mechanism work?  It feels like that would be a cleaner interface, which would also allow (don\u0027t know if consumers need it) the ability to have multiple different upload sources.\n\nAlso, is the file passed in deleted when the upload is complete?  If so, I think that\u0027s worth saying.",
      "range": {
        "startLine": 180,
        "startChar": 5,
        "endLine": 180,
        "endChar": 20
      },
      "revId": "fee3821f599695ce75db08784d2f891432eef269",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eee81c8f_09a59e0e",
        "filename": "content/public/common/simple_url_loader.h",
        "patchSetId": 5
      },
      "lineNbr": 180,
      "author": {
        "id": 1115968
      },
      "writtenOn": "2017-12-07T19:28:11Z",
      "side": 1,
      "message": "This will use ResourceRequest-\u003eDataElement.  The problem is that I want to pass in a base::File to the network service (Can\u0027t do it yet, but this will do it eventually).  So something needs to open the base::File.  This can\u0027t be done on the UI thread, or the IO thread.\n\nRather than having a bunch of consumers jump over to another thread, this will handle that logic for them, though I\u0027ll still allow base::Files to be attached as DataElements directly, just not base::FilePaths.\n\nMoreover, base::Files can\u0027t be destroyed on a thread that doesn\u0027t allow blocking IO, so I\u0027ll also need to post a task to delete the ResourceRequest offthread, if it has one (Regardless of whether this method was used to attach a file or not).",
      "parentUuid": "18781b6b_f5daf000",
      "range": {
        "startLine": 180,
        "startChar": 5,
        "endLine": 180,
        "endChar": 20
      },
      "revId": "fee3821f599695ce75db08784d2f891432eef269",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "45ddee43_4a08525b",
        "filename": "content/public/common/simple_url_loader.h",
        "patchSetId": 5
      },
      "lineNbr": 180,
      "author": {
        "id": 1001809
      },
      "writtenOn": "2017-12-08T19:07:58Z",
      "side": 1,
      "message": "\u003e This will use ResourceRequest-\u003eDataElement.  The problem is that I want to pass in a base::File to the network service (Can\u0027t do it yet, but this will do it eventually).  So something needs to open the base::File.  This can\u0027t be done on the UI thread, or the IO thread.\n\n\u003e Rather than having a bunch of consumers jump over to another thread, this will handle that logic for them, \n\nAh, gotcha.  How would you feel about commenting something like \"This is a helper method so that consumer won\u0027t need to open the file (with related thread hopping) themselves\"?  (I\u0027m not wedded to that, I just think it helps frame the context for the method and how it\u0027s expected to be used.)\n\nI\u0027d also keep an eye on how often consumers of this interface have to open files themselves; I find myself wondering if an async helper function to convert a base::FilePath -\u003e base::File wouldn\u0027t be a better way to address this use case.  (It\u0027s more general, but I consider that a minus unless the generality would actually be used.)\n\n\u003e though I\u0027ll still allow base::Files to be attached as DataElements directly, just not base::FilePaths.\n\nCould the Create() method have documentation on what DataElements are ok and what not?\n\n\u003e Moreover, base::Files can\u0027t be destroyed on a thread that doesn\u0027t allow blocking IO, so I\u0027ll also need to post a task to delete the ResourceRequest offthread, if it has one (Regardless of whether this method was used to attach a file or not).\n\nAck.  Where is the documentation that base::Files attached to DataElements for upload will be deleted by the request processing?  I presume that\u0027s pre-existing, but it wasn\u0027t obvious to me just based on this function.",
      "parentUuid": "eee81c8f_09a59e0e",
      "range": {
        "startLine": 180,
        "startChar": 5,
        "endLine": 180,
        "endChar": 20
      },
      "revId": "fee3821f599695ce75db08784d2f891432eef269",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}