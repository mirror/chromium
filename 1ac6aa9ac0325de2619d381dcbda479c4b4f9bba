{
  "comments": [
    {
      "key": {
        "uuid": "bac7d57d_2edff54f",
        "filename": "components/viz/host/frame_sink_manager_host.h",
        "patchSetId": 4
      },
      "lineNbr": 55,
      "author": {
        "id": 1148065
      },
      "writtenOn": "2017-06-05T18:27:20Z",
      "side": 1,
      "message": "I\u0027m not sure what \"use IPC\" really means for clients. They don\u0027t \"know\" whether the CompositorFrameSink they get uses IPCs or not. Also, which kind of IPC? It sounds like the ordering requirements mean if the CompositorFrameSink and the FrameSinkManagerHost use a different IPC channel/mojo pipe, things would break too?\n\nI guess where I\u0027m getting at is that the ContextFactory/ContextFactoryPrivate implementation (i.e. GPTF) is what \"knows\" these things (because it creates both the FrameSinkManagerHost and the CompositorFrameSinks), and so maybe this concept should be passed by the GPTF - maybe to the constructor or something, and leave the clients out of it. Thoughts?",
      "revId": "1ac6aa9ac0325de2619d381dcbda479c4b4f9bba",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6da99bd1_9264ba27",
        "filename": "components/viz/host/frame_sink_manager_host.h",
        "patchSetId": 4
      },
      "lineNbr": 55,
      "author": {
        "id": 1146978
      },
      "writtenOn": "2017-06-06T17:00:29Z",
      "side": 1,
      "message": "So I guess the issue here is that GPTF and FSMH don\u0027t keep track of all the things that submit CompositorFrames. Only the root cc::Display CompositorFrameSink gets created via ContextFactory::CreateCompositorFrameSink(). Other clients create CompositorFrameSinkSupport directly or use FSMH::CreateCompositorFrameSink() for the new MojoCompositorFrameSink based path.\n\nAlthough it would make sense to keep track of everything that submits CompositorFrames and have GPTF or FSMH store that information.\n\nAnother suggestion fsamuel had was to just always use Mojo for RegisterFrameSinkHierarchy()/UnregisterFrameSinkHierarchy(). It could add a tiny bit of delay before the first BeginFrame is received but everything works correctly as far as I can tell. Any objections to that?",
      "parentUuid": "bac7d57d_2edff54f",
      "revId": "1ac6aa9ac0325de2619d381dcbda479c4b4f9bba",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "064140fc_0e295f42",
        "filename": "components/viz/host/frame_sink_manager_host.h",
        "patchSetId": 4
      },
      "lineNbr": 55,
      "author": {
        "id": 1148065
      },
      "writtenOn": "2017-06-06T18:22:44Z",
      "side": 1,
      "message": "\u003e Another suggestion fsamuel had was to just always use Mojo for RegisterFrameSinkHierarchy()/UnregisterFrameSinkHierarchy(). It could add a tiny bit of delay before the first BeginFrame is received but everything works correctly as far as I can tell. Any objections to that?\n\nIf it\u0027s just a small latency delay and it doesn\u0027t significantly affect performance, I think I\u0027m ok with that. Your CL description suggests that doing it over IPC if frame submission is direct would cause issues, though.",
      "parentUuid": "6da99bd1_9264ba27",
      "revId": "1ac6aa9ac0325de2619d381dcbda479c4b4f9bba",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}