{
  "comments": [
    {
      "key": {
        "uuid": "cf6f028b_0539a652",
        "filename": "net/base/load_flags_list.h",
        "patchSetId": 11
      },
      "lineNbr": 93,
      "author": {
        "id": 1115968
      },
      "writtenOn": "2018-02-06T21:55:48Z",
      "side": 1,
      "message": "We shouldn\u0027t add more flags here - prefer to add top-level setters to the URLRequest.  This is a bit too much of a smorgasbord of random flags that are handles at random locations all over the network stack, which we want to work on cleaning up.",
      "range": {
        "startLine": 93,
        "startChar": 38,
        "endLine": 93,
        "endChar": 39
      },
      "revId": "baf106c126dd22f28b61d77274b8c0b1a5c8a760",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7fb9f2bf_bf6b5a18",
        "filename": "net/base/load_flags_list.h",
        "patchSetId": 11
      },
      "lineNbr": 93,
      "author": {
        "id": 1115968
      },
      "writtenOn": "2018-02-06T21:55:48Z",
      "side": 1,
      "message": "Do we trust arbitrary renderers to set this flag?  I\u0027m no authority on our security model, or same-site cookies, I\u0027m just wondering if it would make more sense to modify the request itself (Make it look like a top level request by setting a null initiator?), rather than add another way to set this information.",
      "revId": "baf106c126dd22f28b61d77274b8c0b1a5c8a760",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cd80a439_5c361d0b",
        "filename": "net/base/load_flags_list.h",
        "patchSetId": 11
      },
      "lineNbr": 93,
      "author": {
        "id": 1001500
      },
      "writtenOn": "2018-02-06T22:08:46Z",
      "side": 1,
      "message": "We currently trust the renderer with this information already, so we aren\u0027t worse off. Unless we go through the browser process to verify that the frame sending the request could have injected a content script, I don\u0027t see how we could avoid trusting the renderer.\nAlso, wouldn\u0027t modifying the request also happen in the renderer? If it does, it is no different. If it doesn\u0027t, then we could have put that logic there, but it likely would be a layering violation, no?",
      "parentUuid": "7fb9f2bf_bf6b5a18",
      "revId": "baf106c126dd22f28b61d77274b8c0b1a5c8a760",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fec2b0a1_4bcfc8e5",
        "filename": "net/base/load_flags_list.h",
        "patchSetId": 11
      },
      "lineNbr": 93,
      "author": {
        "id": 1001500
      },
      "writtenOn": "2018-02-06T22:08:46Z",
      "side": 1,
      "message": "I got the opposite guidance from jam@, so can we all agree on an approach before I make more changes? I had what you are suggesting in PS5 (or 6), so feel free to take a look at that version.",
      "parentUuid": "cf6f028b_0539a652",
      "range": {
        "startLine": 93,
        "startChar": 38,
        "endLine": 93,
        "endChar": 39
      },
      "revId": "baf106c126dd22f28b61d77274b8c0b1a5c8a760",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "69bb4831_36efa28d",
        "filename": "net/base/load_flags_list.h",
        "patchSetId": 11
      },
      "lineNbr": 93,
      "author": {
        "id": 1115968
      },
      "writtenOn": "2018-02-06T22:20:25Z",
      "side": 1,
      "message": "That earlier approach looks good to me.\n\nThe goal is to turn LoadFlags into CacheFlags, handle them all at the HttpCache::Transaction layer, and either get rid of the rest, or move them into individual setters.  At the moment, the flags are present all the way down to the socket layer, but sockets really should not know or care about most of these.",
      "parentUuid": "fec2b0a1_4bcfc8e5",
      "range": {
        "startLine": 93,
        "startChar": 38,
        "endLine": 93,
        "endChar": 39
      },
      "revId": "baf106c126dd22f28b61d77274b8c0b1a5c8a760",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ecf28dee_725e30d1",
        "filename": "net/base/load_flags_list.h",
        "patchSetId": 11
      },
      "lineNbr": 93,
      "author": {
        "id": 1115968
      },
      "writtenOn": "2018-02-06T22:20:25Z",
      "side": 1,
      "message": "We are worse off, if we ever think about tightening up on this - two things that will need a security check are inherently more likely to break than one thing.\n\nWe do have the ability to restrict what requests from the renderer can do, and renderers no longer make navigation requests.  So it would be trivial to block requests without an initiator from being sent from the renderer, and instead only let the browser process send them.  If there\u0027s cause to make such a change, there\u0027s a fair chance this path would be overlooked.\n\nWe also have the ability to restrict requests on a per-RenderFrame basis, so if only certain render frames needed the ability to set null initiators, we could just gives those renderers permissions to do so, when their URLLoaderFactories are created.",
      "parentUuid": "cd80a439_5c361d0b",
      "revId": "baf106c126dd22f28b61d77274b8c0b1a5c8a760",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "06d55247_707bb836",
        "filename": "net/base/load_flags_list.h",
        "patchSetId": 11
      },
      "lineNbr": 93,
      "author": {
        "id": 1001500
      },
      "writtenOn": "2018-02-06T23:32:12Z",
      "side": 1,
      "message": "These should only be for subresource requests, so browser process (navigations) should never use this.\n\nWhile I\u0027d love us to restrict as much as we can, I\u0027m very skeptical we will be able to curtail content scripts. I do think that ideally they should behave exactly like the rest of the scripts in the document, however the fact that we changed them to explicitly have initiator origin (which is the main reason we need this fix) makes me think that potentially other solution might be needed here if we want to lock things down.\n\nPer RenderFrame is going to be really nice, but that state will live on the Network Service side in general anyway, so the restriction can easily be implemented there once (if) we have the proper state propagated some day.",
      "parentUuid": "ecf28dee_725e30d1",
      "revId": "baf106c126dd22f28b61d77274b8c0b1a5c8a760",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}