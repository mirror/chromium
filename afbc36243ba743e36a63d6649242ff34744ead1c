{
  "comments": [
    {
      "key": {
        "uuid": "58109670_8ba72fbe",
        "filename": "base/android/java/src/org/chromium/base/library_loader/Linker.java",
        "patchSetId": 3
      },
      "lineNbr": 185,
      "author": {
        "id": 1109505
      },
      "writtenOn": "2017-12-11T20:57:31Z",
      "side": 1,
      "message": "don\u0027t want to land this presumably",
      "revId": "afbc36243ba743e36a63d6649242ff34744ead1c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a7d40828_7901d3e9",
        "filename": "base/android/java/templates/NativeLibraries.template",
        "patchSetId": 3
      },
      "lineNbr": 95,
      "author": {
        "id": 1126674
      },
      "writtenOn": "2017-12-14T14:41:43Z",
      "side": 1,
      "message": "I suspect apk_merge.py will not like this. I\u0027m think it\u0027s the case that we still expect classes.dex to be the same for arm64 and arm32 when merging.\n\nCan this be queried somehow? There appear to be some Build fields with related info, but not sure if it tells you when your own APK was built for...",
      "revId": "afbc36243ba743e36a63d6649242ff34744ead1c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d3aa0723_e1b79a7f",
        "filename": "base/android/java/templates/NativeLibraries.template",
        "patchSetId": 3
      },
      "lineNbr": 95,
      "author": {
        "id": 1000429
      },
      "writtenOn": "2017-12-14T14:47:36Z",
      "side": 1,
      "message": "oh that\u0027s really unfortunate because this defines the library name to use (obviously, before the native library is loaded). The CrazyLinker/ModernLinker have this name queried from the native code, the small part they load before they load the main libchrome*.\n\nThis code is not triggered for monochrome, can we ignore this difference in apk_merger.py somehow?",
      "parentUuid": "a7d40828_7901d3e9",
      "revId": "afbc36243ba743e36a63d6649242ff34744ead1c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4a38b444_7b6359ac",
        "filename": "base/android/java/templates/NativeLibraries.template",
        "patchSetId": 3
      },
      "lineNbr": 95,
      "author": {
        "id": 1126674
      },
      "writtenOn": "2017-12-14T14:54:34Z",
      "side": 1,
      "message": "If that\u0027s the case, could probably assign it to null if the GN variable \"requires_sdk_api_level_23\" is set. That\u0027s basically an \"is_monochrome\" flag to android_apk.",
      "parentUuid": "d3aa0723_e1b79a7f",
      "revId": "afbc36243ba743e36a63d6649242ff34744ead1c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "71fa7f84_ef0590b0",
        "filename": "base/android/java/templates/NativeLibraries.template",
        "patchSetId": 3
      },
      "lineNbr": 95,
      "author": {
        "id": 1126674
      },
      "writtenOn": "2017-12-14T15:19:48Z",
      "side": 1,
      "message": "Actually, I think this affects webview as well, which doesn\u0027t use that gn variable.\n\nProbably better to somehow query android for the value, or hardcode them all and select the active one (as before, but in java).",
      "parentUuid": "4a38b444_7b6359ac",
      "revId": "afbc36243ba743e36a63d6649242ff34744ead1c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0a9f6d50_bddb06a7",
        "filename": "base/android/java/templates/NativeLibraries.template",
        "patchSetId": 3
      },
      "lineNbr": 95,
      "author": {
        "id": 1109505
      },
      "writtenOn": "2017-12-14T15:22:48Z",
      "side": 1,
      "message": "Oops, sorry, didn\u0027t spot this :)\n\nHardcoding them all and picking the right one would work except I don\u0027t think there\u0027s a good way to tell what ABI you are running with from Java that\u0027s a public API..",
      "parentUuid": "71fa7f84_ef0590b0",
      "revId": "afbc36243ba743e36a63d6649242ff34744ead1c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9c67bccb_3ca0d60f",
        "filename": "base/android/java/templates/NativeLibraries.template",
        "patchSetId": 3
      },
      "lineNbr": 95,
      "author": {
        "id": 1126674
      },
      "writtenOn": "2017-12-14T17:00:14Z",
      "side": 1,
      "message": "Not a good way, but one way is to look for \"nativeLibraryDirectories\u003d\" within Thread.currentThread().getContextClassLoader().toString() :P.\n\nArguably more promising:\nContextUtils.getApplicationContext().getApplicationInfo().nativeLibraryDir\n\nTested on a N5x running 32-bit chrome, and it returned:\n/data/app/com.google.android.apps.chrome-KP505ypnxxaaYE55Ar9yMg\u003d\u003d/lib/arm\n\nIf all libs are within the APK though, not sure if it returns the correct thing?",
      "parentUuid": "0a9f6d50_bddb06a7",
      "revId": "afbc36243ba743e36a63d6649242ff34744ead1c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "85910ce6_e1020a5e",
        "filename": "base/android/java/templates/NativeLibraries.template",
        "patchSetId": 3
      },
      "lineNbr": 95,
      "author": {
        "id": 1000429
      },
      "writtenOn": "2017-12-14T18:15:22Z",
      "side": 1,
      "message": "\u003e Not a good way, but one way is to look for \"nativeLibraryDirectories\u003d\" within Thread.currentThread().getContextClassLoader().toString() :P.\n\u003e \n\u003e Arguably more promising:\n\u003e ContextUtils.getApplicationContext().getApplicationInfo().nativeLibraryDir\n\u003e \n\u003e Tested on a N5x running 32-bit chrome, and it returned:\n\u003e /data/app/com.google.android.apps.chrome-KP505ypnxxaaYE55Ar9yMg\u003d\u003d/lib/arm\n\u003e If all libs are within the APK though, not sure if it returns the correct thing?\n\nThis string does not look right :) we need to have \"armeabi-v7a\" as a substring somewhere. This substring seems to be coming from our build config only, nothing on the Android side would tell it.\n\nWe can open/inspect the APK .. very suboptimally, I\u0027d like to try all other ways before this.\n\nSo moving the GN variable into Java via preprocessor flag(s) sounds like an ideal solution to me, even if requires looking at requires_sdk_api_level_23. I thought this codepath is not triggered with monochrome, lemme test...\n\nQ: Do we have 32bit parts of monochrome (installed as system WV) tested on CQ or I\u0027d need to test it locally?",
      "parentUuid": "9c67bccb_3ca0d60f",
      "revId": "afbc36243ba743e36a63d6649242ff34744ead1c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bee962a6_2914dbd6",
        "filename": "base/android/java/templates/NativeLibraries.template",
        "patchSetId": 3
      },
      "lineNbr": 95,
      "author": {
        "id": 1126674
      },
      "writtenOn": "2017-12-14T18:42:26Z",
      "side": 1,
      "message": "Okay, I think I now get why the string is only in our build system - valid to specify a range of abi names and android picks the best one.\n\nHow about storing all the names in java, and using that string to know whether to use the arm32 vs arm64 one?\n\nrequires_sdk_api_level_23 is set for monochrome, but not for system_webview_apk, which also runs through the apk merger. If we don\u0027t need this for webview either, then we could add a GN arg to null it out for both.",
      "parentUuid": "85910ce6_e1020a5e",
      "revId": "afbc36243ba743e36a63d6649242ff34744ead1c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "13995a0a_5e83d53b",
        "filename": "base/android/java/templates/NativeLibraries.template",
        "patchSetId": 3
      },
      "lineNbr": 95,
      "author": {
        "id": 1000429
      },
      "writtenOn": "2017-12-14T18:58:19Z",
      "side": 1,
      "message": "\u003e Okay, I think I now get why the string is only in our build system - valid to specify a range of abi names and android picks the best one.\n\u003e\n\u003e How about storing all the names in java, and using that string to know whether to use the arm32 vs arm64 one?\n\nIt seems for arm32 we have two options (\"armeabi-v7a\", \"armeabi\"), and my brief reading suggests that we use the latter for JB (pre-MR1) APKs.\n\nthe options: https://codesearch.chromium.org/chromium/src/build/config/android/abi.gni?q\u003dbuild/config/android/abi.gni\u0026sq\u003dpackage:chromium\u0026dr\u0026l\u003d30\n\n\u003e requires_sdk_api_level_23 is set for monochrome, but not for system_webview_apk, which also runs through the apk merger. If we don\u0027t need this for webview either, then we could add a GN arg to null it out for both.\n\nAh wow, I assumed monochrome_apk can be installed as system webview, what a mistake :) What is the proper/easy way to test webview with system_webview_apk?",
      "parentUuid": "bee962a6_2914dbd6",
      "revId": "afbc36243ba743e36a63d6649242ff34744ead1c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "aa881181_7ce1df3d",
        "filename": "base/android/java/templates/NativeLibraries.template",
        "patchSetId": 3
      },
      "lineNbr": 95,
      "author": {
        "id": 1109505
      },
      "writtenOn": "2017-12-14T20:09:15Z",
      "side": 1,
      "message": "In practise that directory will probably always exist and probably always be consistently named (though they\u0027re named mostly by the generic arch names and not the full ABI names, so we\u0027d need a mapping table).\n\nIn theory this is an internal implementation detail that can\u0027t be relied on at all.\n\nSooo *shrug* :p",
      "parentUuid": "9c67bccb_3ca0d60f",
      "revId": "afbc36243ba743e36a63d6649242ff34744ead1c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "68590823_d9332531",
        "filename": "base/android/java/templates/NativeLibraries.template",
        "patchSetId": 3
      },
      "lineNbr": 95,
      "author": {
        "id": 1109505
      },
      "writtenOn": "2017-12-14T20:09:15Z",
      "side": 1,
      "message": "monochrome_apk can be used as the system webview; i\u0027m not sure what you mean. system_webview_google_apk is the corresponding standalone webview build; you can just install that on a pre-N device (that\u0027s how all the pre-N devices work).",
      "parentUuid": "13995a0a_5e83d53b",
      "revId": "afbc36243ba743e36a63d6649242ff34744ead1c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1589384f_6057b09a",
        "filename": "base/android/java/templates/NativeLibraries.template",
        "patchSetId": 3
      },
      "lineNbr": 95,
      "author": {
        "id": 1000429
      },
      "writtenOn": "2017-12-15T02:31:03Z",
      "side": 1,
      "message": "\u003e monochrome_apk can be used as the system webview; i\u0027m not sure what you mean.\n\u003e system_webview_google_apk is the corresponding standalone webview build; you\n\u003e can just install that on a pre-N device (that\u0027s how all the pre-N devices\n\u003e work).\n\nNot sure what I was thinking. For some reason I thought system webview apk is\nexclusively monochrome based (but after your comment above it seems we do update\nsystem webview for pre-N and occasionally some OEMs pick it up and do OTA\nupdates with those binaries. Impressive!). There is just a bit of moving parts\nin how webview/chrome can be compiled and shipped, and I did not fully\nappreciate all possibilities yet. And it\u0027s evening :)\n\nSo thanks!\n\n\u003e In practise that directory will probably always exist and probably always be\n\u003e consistently named (though they\u0027re named mostly by the generic arch names and\n\u003e not the full ABI names, so we\u0027d need a mapping table).\n\u003e \n\u003e In theory this is an internal implementation detail that can\u0027t be relied on at\n\u003e all.\n\u003e \n\u003e Sooo *shrug* :p\n\nAha, so let me try to deduce .. in Andrew\u0027s example \"/lib/arm\" actually tells\nthat we have \"armeabi-v7a\" (or \"armeabi\"?) and we could make a mapping entry for\nthis in the form:\n\n\"/lib/arm\" maps to \"armeabi-v7a\"\n\nIf we ship that impl detail I will lose the rest of my sleep for 3 months at\nleast :)\n\nSo lemme try to rephrase the problem:\n    The same Java/dex code needs to be able to determine which\n    platform-abi-string (or whatever it is called) to use for looking up the DSO\n    path, and it depends (roughly) on whether the webview process is 32bit or\n    64bit. And this is only a problem for pre-N APKs (which, as we know may be\n    used on N in the list of rare occasions like just after OTA from M).\nIs this correct?\n\nHmm, I did not realize this in full before.\n\nAnother possible hack: determine whether we are 32bit via /proc/self/maps and\nseeing the names of the system DSOs .. which ... looks even more brittle.\n\nDo we want this webview support for fat APK on mips64/x86-64 or it\u0027s only ARM that we ship the fat apk to?",
      "parentUuid": "aa881181_7ce1df3d",
      "revId": "afbc36243ba743e36a63d6649242ff34744ead1c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}