{
  "comments": [
    {
      "key": {
        "uuid": "ecb057ab_6dc24578",
        "filename": "third_party/WebKit/Source/platform/blob/BlobData.cpp",
        "patchSetId": 4
      },
      "lineNbr": 286,
      "author": {
        "id": 1001917
      },
      "writtenOn": "2017-06-06T00:20:17Z",
      "side": 1,
      "message": "I wonder if we could move BlobDataItem to a DataElementPtr (or even better - just hold a (mojo) DataElement).\n\nI want to do all I can to get rid of that web layer haha.",
      "range": {
        "startLine": 286,
        "startChar": 0,
        "endLine": 286,
        "endChar": 36
      },
      "revId": "a09e1d4d76a2b4dedc86e1b9ef658db33fe9d128",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d29b8752_6055e305",
        "filename": "third_party/WebKit/Source/platform/blob/BlobData.cpp",
        "patchSetId": 4
      },
      "lineNbr": 286,
      "author": {
        "id": 1110029
      },
      "writtenOn": "2017-06-06T04:46:33Z",
      "side": 1,
      "message": "As I said in my initial comment \"Ultimately it might make sense to make BlobData directly build mojo DataElements rather than converting from one type of elements to another type on BlobDataHandle, but this seemed the least invasive for now, while we still have both code paths.\"\n\nI could make such a change now, but I don\u0027t really want to change the IPC code path for now, so BlobData would have to hold both mojo DataElements and BlobDataItems, and depending on the feature flag generate one or the other, which seemed like it would result in much harder to follow code. This way there at least is only one place where we check if we\u0027re using the mojo or ipc code paths...",
      "parentUuid": "ecb057ab_6dc24578",
      "range": {
        "startLine": 286,
        "startChar": 0,
        "endLine": 286,
        "endChar": 36
      },
      "revId": "a09e1d4d76a2b4dedc86e1b9ef658db33fe9d128",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0b1919f8_bb2add58",
        "filename": "third_party/WebKit/Source/platform/blob/BlobData.cpp",
        "patchSetId": 4
      },
      "lineNbr": 292,
      "author": {
        "id": 1001917
      },
      "writtenOn": "2017-06-06T00:20:17Z",
      "side": 1,
      "message": "nit: pull length check out of switch statement.",
      "range": {
        "startLine": 292,
        "startChar": 0,
        "endLine": 292,
        "endChar": 39
      },
      "revId": "a09e1d4d76a2b4dedc86e1b9ef658db33fe9d128",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7267a8c7_e24e97dd",
        "filename": "third_party/WebKit/Source/platform/blob/BlobData.cpp",
        "patchSetId": 4
      },
      "lineNbr": 292,
      "author": {
        "id": 1110029
      },
      "writtenOn": "2017-06-06T04:46:33Z",
      "side": 1,
      "message": "The tricky part is that (afaict) kData items require looking at item.data-\u003elength() (length is always kUntilEndOfFile, while all other items require looking at item.length. So not sure what to best do here...",
      "parentUuid": "0b1919f8_bb2add58",
      "range": {
        "startLine": 292,
        "startChar": 0,
        "endLine": 292,
        "endChar": 39
      },
      "revId": "a09e1d4d76a2b4dedc86e1b9ef658db33fe9d128",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "890c480a_0ad76915",
        "filename": "third_party/WebKit/Source/platform/blob/BlobData.cpp",
        "patchSetId": 4
      },
      "lineNbr": 292,
      "author": {
        "id": 1001917
      },
      "writtenOn": "2017-06-06T18:54:40Z",
      "side": 1,
      "message": "Just to clarify, can you put the block \"if (item.data-\u003elength() \u003d\u003d 0) continue;\" before the switch statement? It looks like you do this for every case. Not sure if this conflicts with kUntilEndOfFile, which should be a -1 (or uint64_max) right?",
      "parentUuid": "7267a8c7_e24e97dd",
      "range": {
        "startLine": 292,
        "startChar": 0,
        "endLine": 292,
        "endChar": 39
      },
      "revId": "a09e1d4d76a2b4dedc86e1b9ef658db33fe9d128",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4461c6e7_33370725",
        "filename": "third_party/WebKit/Source/platform/blob/BlobData.cpp",
        "patchSetId": 4
      },
      "lineNbr": 292,
      "author": {
        "id": 1110029
      },
      "writtenOn": "2017-06-16T17:02:45Z",
      "side": 1,
      "message": "if (item.data-\u003elength() \u003d\u003d 0) wouldn\u0027t make sense outside the switch statement, as item.data is only non-null for kData items. I could probably move if (item.length \u003d\u003d 0) outside the switch statement, if we\u0027re certain that item.length is actually non-zero for all non-zero length kData items. I believe that is the case (since for Data items length is set to kUntilEndOfFile), but I don\u0027t know if I missed a subtle codepath somewhere. Currently nothing is relying on any particular value of item.length for data items.",
      "parentUuid": "890c480a_0ad76915",
      "range": {
        "startLine": 292,
        "startChar": 0,
        "endLine": 292,
        "endChar": 39
      },
      "revId": "a09e1d4d76a2b4dedc86e1b9ef658db33fe9d128",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f50b8712_37e95485",
        "filename": "third_party/WebKit/Source/platform/blob/BlobData.cpp",
        "patchSetId": 4
      },
      "lineNbr": 292,
      "author": {
        "id": 1001917
      },
      "writtenOn": "2017-06-16T22:21:07Z",
      "side": 1,
      "message": "There\u0027s a duplication of the length here - and I\u0027m surprised that data items have that length - shouldn\u0027t it match data-\u003elength()?\n\nIf we have a data item that\u0027s \u003e 128KB, then we\u0027re not putting it in the data array, so we\u0027d be using the item.length.\n\nWhat about using the item.length all the time, and then if item.data is present, check (or dcheck) that the lengths match. WDYT?",
      "parentUuid": "4461c6e7_33370725",
      "range": {
        "startLine": 292,
        "startChar": 0,
        "endLine": 292,
        "endChar": 39
      },
      "revId": "a09e1d4d76a2b4dedc86e1b9ef658db33fe9d128",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dc2d075a_16abfe41",
        "filename": "third_party/WebKit/Source/platform/blob/BlobData.cpp",
        "patchSetId": 4
      },
      "lineNbr": 292,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-06-19T06:46:50Z",
      "side": 1,
      "message": "+1 to finding this confusing in the conversion code as well\n\n(it would also help document why we skip 0 length elements; I guess they\u0027re not interesting to preserve, as the eventual Blob is the same either way?)",
      "parentUuid": "f50b8712_37e95485",
      "range": {
        "startLine": 292,
        "startChar": 0,
        "endLine": 292,
        "endChar": 39
      },
      "revId": "a09e1d4d76a2b4dedc86e1b9ef658db33fe9d128",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d3c0414b_2ba1d632",
        "filename": "third_party/WebKit/Source/platform/blob/BlobData.cpp",
        "patchSetId": 4
      },
      "lineNbr": 292,
      "author": {
        "id": 1110029
      },
      "writtenOn": "2017-06-20T18:56:52Z",
      "side": 1,
      "message": "The old code (in content::BlobConsolidation) skips 0 length elements because the browser process DCHECKs (for FileSystem URL elements) or CHECKs (for unpopulated byte elements) if it receives 0 length elements (huh, that seems wrong... the browser shouldn\u0027t be verifying IPC messages with CHECK or DCHECK...).\n\nEither way this should be less confusing once we can eliminate BlobDataItem completely after the old IPC code path goes away... Until then I\u0027d prefer not to touch the existing code path more than absolutely necessary to avoid introducing any bugs. So in particular since the existing code doesn\u0027t set BlobDataItem.length for bytes elements, I\u0027d like to keep the length check inside the various switch cases.\n\n(also from offline discussion with dmurph, his confusion was partially caused because he thought we were dealing with content::BlobConsolidation::ConsolidatedItem instances here, rather than blink::BlobDataItem instances)\n\nAdded comments explaining why we\u0027re skipping 0-byte elements.",
      "parentUuid": "dc2d075a_16abfe41",
      "range": {
        "startLine": 292,
        "startChar": 0,
        "endLine": 292,
        "endChar": 39
      },
      "revId": "a09e1d4d76a2b4dedc86e1b9ef658db33fe9d128",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "667fb072_f12fd3cb",
        "filename": "third_party/WebKit/Source/platform/blob/BlobData.cpp",
        "patchSetId": 4
      },
      "lineNbr": 348,
      "author": {
        "id": 1001917
      },
      "writtenOn": "2017-06-06T00:20:17Z",
      "side": 1,
      "message": "I wonder how performant this is - are we doing some messaging round trips here? If so, I wonder if we could make this work w/ less messaging round trips. (future issue obviously)",
      "revId": "a09e1d4d76a2b4dedc86e1b9ef658db33fe9d128",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6a975649_7c86c98d",
        "filename": "third_party/WebKit/Source/platform/blob/BlobData.cpp",
        "patchSetId": 4
      },
      "lineNbr": 348,
      "author": {
        "id": 1110029
      },
      "writtenOn": "2017-06-06T04:46:33Z",
      "side": 1,
      "message": "There\u0027s definitely no round trips, but there are of course extra messages. MakeRequest essentially just generates a random number, and calling Clone then sends that number to the blob implementation on the browser side which will add it as an increased refcount for that particular blob. None of this here is blocked on that though.\nThe register call will then effectively include the same random number to identify the blob. The only caveat being that by the time the browser gets the Register call it might not have had the clone call yet, so the browser side code might end up with a minor inefficiency where looking up the uuid for the blob might get routed back through the renderer, even though at that point everything about the blob should be known in the browser... So I definitely don\u0027t think the code here is problematic, the code in the browser that\u0027ll have to actually look up the blob UUID might introduce unfortunate round trips though...",
      "parentUuid": "667fb072_f12fd3cb",
      "revId": "a09e1d4d76a2b4dedc86e1b9ef658db33fe9d128",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fe2e799e_fb36dec5",
        "filename": "third_party/WebKit/Source/platform/blob/BlobData.cpp",
        "patchSetId": 4
      },
      "lineNbr": 348,
      "author": {
        "id": 1001917
      },
      "writtenOn": "2017-06-06T18:54:40Z",
      "side": 1,
      "message": "Interesting. sgtm. Maybe we could build some sort of \u0027const state\u0027 notion into mojo where it would pass this state to both sides of the pipe (so you can construct a blob with a uuid, and have that memory allocated and available on both sides). Anyways, future stuff that we can think about later.",
      "parentUuid": "6a975649_7c86c98d",
      "revId": "a09e1d4d76a2b4dedc86e1b9ef658db33fe9d128",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bf04e7ae_0fe0390d",
        "filename": "third_party/WebKit/Source/platform/blob/BlobData.cpp",
        "patchSetId": 4
      },
      "lineNbr": 348,
      "author": {
        "id": 1110029
      },
      "writtenOn": "2017-06-16T17:02:45Z",
      "side": 1,
      "message": "Association some data with a MessagePipeHandle is definitely something that exists (or will exist) I believe, which we could at least use to cache the UUID or some other data with the pipe. You can\u0027t always rely on the data being there (for example when pipes are fused, or other similar tricks), but we should definitely be able to use that to optimize some of the common cases. So yeah, definitely something to keep in mind for future stuff.",
      "parentUuid": "fe2e799e_fb36dec5",
      "revId": "a09e1d4d76a2b4dedc86e1b9ef658db33fe9d128",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}