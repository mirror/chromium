{
  "comments": [
    {
      "key": {
        "uuid": "521c3ed3_9f8999bd",
        "filename": "device/u2f/u2f_hid_device.cc",
        "patchSetId": 4
      },
      "lineNbr": 154,
      "author": {
        "id": 1178840
      },
      "writtenOn": "2017-12-02T01:56:41Z",
      "side": 1,
      "message": "This comment is not quite correct. All INIT messages are on the broadcast channel (0xffffffff), but they may be replies to messages sent by other clients talking to the same device.",
      "range": {
        "startLine": 154,
        "startChar": 5,
        "endLine": 154,
        "endChar": 46
      },
      "revId": "95a82ffb9676996756d2fd342377d5baf90ca1db",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8894eb14_c2f835ae",
        "filename": "device/u2f/u2f_hid_device.cc",
        "patchSetId": 4
      },
      "lineNbr": 155,
      "author": {
        "id": 1113896
      },
      "writtenOn": "2017-11-17T23:02:16Z",
      "side": 1,
      "message": "If you write this as \"received_nonce !\u003d nonce\" does the conversion happen implicitly?",
      "range": {
        "startLine": 155,
        "startChar": 6,
        "endLine": 155,
        "endChar": 50
      },
      "revId": "95a82ffb9676996756d2fd342377d5baf90ca1db",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4d7d564d_8d069a82",
        "filename": "device/u2f/u2f_hid_device.cc",
        "patchSetId": 4
      },
      "lineNbr": 155,
      "author": {
        "id": 1247602
      },
      "writtenOn": "2017-11-17T23:20:56Z",
      "side": 1,
      "message": "Writing as received_nonce !\u003d nonce results in compile error for type mismatch.",
      "parentUuid": "8894eb14_c2f835ae",
      "range": {
        "startLine": 155,
        "startChar": 6,
        "endLine": 155,
        "endChar": 50
      },
      "revId": "95a82ffb9676996756d2fd342377d5baf90ca1db",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b2bf5774_368eb533",
        "filename": "device/u2f/u2f_hid_device.cc",
        "patchSetId": 4
      },
      "lineNbr": 156,
      "author": {
        "id": 1178840
      },
      "writtenOn": "2017-12-02T01:56:41Z",
      "side": 1,
      "message": "I believe this needs to re-arm (or not cancel?) the timeout callback? Otherwise this will be recursing infinitely if the device never send a matching reply.",
      "range": {
        "startLine": 156,
        "startChar": 4,
        "endLine": 156,
        "endChar": 15
      },
      "revId": "95a82ffb9676996756d2fd342377d5baf90ca1db",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e39a83c8_b4a164f4",
        "filename": "device/u2f/u2f_hid_device.cc",
        "patchSetId": 4
      },
      "lineNbr": 156,
      "author": {
        "id": 1175054
      },
      "writtenOn": "2017-12-02T03:05:04Z",
      "side": 1,
      "message": "We should re-arm it here. The timeouts are to account for devices that hang and never respond (as opposed to being a timer for the transaction itself).",
      "parentUuid": "b2bf5774_368eb533",
      "range": {
        "startLine": 156,
        "startChar": 4,
        "endLine": 156,
        "endChar": 15
      },
      "revId": "95a82ffb9676996756d2fd342377d5baf90ca1db",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4aabd107_101c7770",
        "filename": "device/u2f/u2f_hid_device.cc",
        "patchSetId": 4
      },
      "lineNbr": 156,
      "author": {
        "id": 1178840
      },
      "writtenOn": "2017-12-04T18:59:01Z",
      "side": 1,
      "message": "I guess that leaves the possibility that the device periodically responds with â€¦ something on the broadcast channel that is not the expected reply and hence this keeps looping forever. This might be more of a theoretical concern, but I guess it would be nice if there was some kind of obvious guarantee that it wasn\u0027t a concern at all?\n\nI think re-structuring the code by wrapping the state machine switch in |Transition| in a` for(;state_ !\u003d IDLE;) { }` might make this a bit easier (the for-condition is probably a little more complicated than that)?  Then the handling methods could simply return into |Transition|, rather than having to recurse to it. That would perhaps make it easier to centralize things like the timeout and retries a little better? Just an idea, I haven\u0027t fully thought this through.",
      "parentUuid": "e39a83c8_b4a164f4",
      "range": {
        "startLine": 156,
        "startChar": 4,
        "endLine": 156,
        "endChar": 15
      },
      "revId": "95a82ffb9676996756d2fd342377d5baf90ca1db",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}