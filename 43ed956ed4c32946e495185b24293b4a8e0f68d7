{
  "comments": [
    {
      "key": {
        "uuid": "306a38c7_10f9c73c",
        "filename": "components/cbor/cbor_values.cc",
        "patchSetId": 2
      },
      "lineNbr": 16,
      "author": {
        "id": 1003152
      },
      "writtenOn": "2018-01-19T09:34:28Z",
      "side": 1,
      "message": "super nit: I think this use-case really calls for a ?: operator. :-)",
      "revId": "43ed956ed4c32946e495185b24293b4a8e0f68d7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a66f5c07_ab425591",
        "filename": "components/cbor/cbor_values.cc",
        "patchSetId": 2
      },
      "lineNbr": 16,
      "author": {
        "id": 1179305
      },
      "writtenOn": "2018-01-19T12:53:35Z",
      "side": 1,
      "message": "+1",
      "parentUuid": "306a38c7_10f9c73c",
      "revId": "43ed956ed4c32946e495185b24293b4a8e0f68d7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "44b37b34_e2d7e795",
        "filename": "components/cbor/cbor_values.h",
        "patchSetId": 2
      },
      "lineNbr": 96,
      "author": {
        "id": 1003152
      },
      "writtenOn": "2018-01-19T09:34:28Z",
      "side": 1,
      "message": "It would be nice to have this also implemented as a constructor for consistency. :-)\n\n@Jan, now that we have a dedicated const char* constructor, do you foresee any more gotchas with having a CBORValue(bool) constructor?",
      "revId": "43ed956ed4c32946e495185b24293b4a8e0f68d7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "417621ce_119bb6e3",
        "filename": "components/cbor/cbor_values.h",
        "patchSetId": 2
      },
      "lineNbr": 96,
      "author": {
        "id": 1179305
      },
      "writtenOn": "2018-01-19T12:53:35Z",
      "side": 1,
      "message": "+1 for using a constructor here instead of a static method.\n\nRegarding issues with a boolean constructor: The only issue I can think of that now some implicit conversions are ambiguous, most prominently constructing a CBORValue from a floating point value (Other possible conversions to bool can be found in [1]).\n\nThat is currently \n\n  CBORValue val(123.0);\n\ncompiles and will result in an int value with value 123. Adding a boolean constructor would break compilation, as now the compiler wouldn\u0027t know whether to convert to bool or int. However, I\u0027d consider this as a feature and not a bug. Construction of CBORValues from floats does not seem to be intended, so that breaking compilation is better than silently converting to int. \n\nTL;DR: +1 for boolean constructor, and all potential issues with that are welcome :)\n\n[1] http://en.cppreference.com/w/cpp/language/implicit_conversion#Boolean_conversions",
      "parentUuid": "44b37b34_e2d7e795",
      "revId": "43ed956ed4c32946e495185b24293b4a8e0f68d7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f322831a_cd5fc02b",
        "filename": "components/cbor/cbor_values.h",
        "patchSetId": 2
      },
      "lineNbr": 144,
      "author": {
        "id": 1179305
      },
      "writtenOn": "2018-01-19T12:53:35Z",
      "side": 1,
      "message": "nit: just use `simple_value_` here, no need for the extra CHECK induced by GetSimpleValue()",
      "range": {
        "startLine": 144,
        "startChar": 27,
        "endLine": 144,
        "endChar": 43
      },
      "revId": "43ed956ed4c32946e495185b24293b4a8e0f68d7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}