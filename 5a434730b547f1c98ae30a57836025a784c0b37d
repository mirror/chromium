{
  "comments": [
    {
      "key": {
        "uuid": "5e1d6f10_001723a8",
        "filename": "content/browser/gpu/DEPS",
        "patchSetId": 11
      },
      "lineNbr": 12,
      "author": {
        "id": 1148065
      },
      "writtenOn": "2018-01-11T18:54:57Z",
      "side": 1,
      "message": "FYI, the reason in_process_gpu_thread* is in content/gpu is because of the split DLL on Windows, it can\u0027t be part of content/browser.",
      "revId": "5a434730b547f1c98ae30a57836025a784c0b37d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "48191df7_e9b7c2e8",
        "filename": "content/browser/gpu/DEPS",
        "patchSetId": 11
      },
      "lineNbr": 12,
      "author": {
        "id": 1245462
      },
      "writtenOn": "2018-01-12T16:27:16Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "5e1d6f10_001723a8",
      "revId": "5a434730b547f1c98ae30a57836025a784c0b37d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0d59ef12_4dd93481",
        "filename": "content/browser/gpu/in_process_gpu_thread_browsertests.cc",
        "patchSetId": 11
      },
      "lineNbr": 40,
      "author": {
        "id": 1148065
      },
      "writtenOn": "2018-01-11T18:54:57Z",
      "side": 1,
      "message": "I think you need to call Stop() here, to make sure we synchronize with the GPU thread. Otherwise Init() could be running at the same time we destroy |this|, causing undefined behavior.",
      "revId": "5a434730b547f1c98ae30a57836025a784c0b37d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9df618f3_f22c10a4",
        "filename": "content/browser/gpu/in_process_gpu_thread_browsertests.cc",
        "patchSetId": 11
      },
      "lineNbr": 40,
      "author": {
        "id": 1245462
      },
      "writtenOn": "2018-01-12T16:27:16Z",
      "side": 1,
      "message": "\u003e I think you need to call Stop() here, to make sure we synchronize with the GPU thread.\n\nI don\u0027t want to change any behavior, I just want to change the timing of when things happen. \n\n\u003e Otherwise Init() could be running at the same time we destroy |this|, causing undefined behavior.\n\nRight, that\u0027s what led to the crash in ExtractInProcessMessagePipe(). I was thinking, since this timing can actually happen live (or can it not?), we better test it. My goal here is that the two threads (IO thread and GPU thread) would tolerate such an extreme timing (even tough it\u0027s quite unlikely).",
      "parentUuid": "0d59ef12_4dd93481",
      "revId": "5a434730b547f1c98ae30a57836025a784c0b37d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cda71bf0_a4c7f89d",
        "filename": "content/browser/gpu/in_process_gpu_thread_browsertests.cc",
        "patchSetId": 11
      },
      "lineNbr": 40,
      "author": {
        "id": 1148065
      },
      "writtenOn": "2018-01-12T21:25:02Z",
      "side": 1,
      "message": "I\u0027m not sure what you mean. InProcessGpuThread calls Stop in its destructor, so in production it will ensure InProcessGpuThread::Init will happen before InProcessGpuThread destruction. I think your issue was that there was no ordering guarantee wrt BrowserChildProcessHostImpl destruction.\n\nThe Stop we need to add here is to avoid adding undefined behavior in the test. I don\u0027t think it makes sense to test without it.",
      "parentUuid": "9df618f3_f22c10a4",
      "revId": "5a434730b547f1c98ae30a57836025a784c0b37d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fd302ca5_e7abc6fc",
        "filename": "content/browser/gpu/in_process_gpu_thread_browsertests.cc",
        "patchSetId": 11
      },
      "lineNbr": 40,
      "author": {
        "id": 1245462
      },
      "writtenOn": "2018-01-12T22:28:10Z",
      "side": 1,
      "message": "Just after ~SlowGpuThread, ~InProcessGpuThread runs. I\u0027m thinking of https://isocpp.org/wiki/faq/dtors#calling-base-dtor. Since ~InProcessGpuThread does Stop() already, I didn\u0027t want to add an extra Stop() here. We\u0027d do Stop() twice, which is probably harmless, but still slightly different from what happens in production?",
      "parentUuid": "cda71bf0_a4c7f89d",
      "revId": "5a434730b547f1c98ae30a57836025a784c0b37d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c61dceae_e9f8d722",
        "filename": "content/browser/gpu/in_process_gpu_thread_browsertests.cc",
        "patchSetId": 11
      },
      "lineNbr": 53,
      "author": {
        "id": 1148065
      },
      "writtenOn": "2018-01-11T18:54:57Z",
      "side": 1,
      "message": "nit: unpause_ (unpause_event_ maybe? resume_event_ even?)\n\nAlso, the event could be a direct member (not a pointer, removing new and delete). After adding the Stop() in the destructor, you\u0027re guaranteed Init() is done accessing the event before it\u0027s destructed.",
      "revId": "5a434730b547f1c98ae30a57836025a784c0b37d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}