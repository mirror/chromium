{
  "comments": [
    {
      "key": {
        "uuid": "ac6ac626_aef18989",
        "filename": "content/common/message_port.h",
        "patchSetId": 6
      },
      "lineNbr": 14,
      "author": {
        "id": 1115891
      },
      "writtenOn": "2017-08-02T20:08:08Z",
      "side": 1,
      "message": "It looks like this include should be unnecessary.",
      "revId": "775df61f3b8d97bf1515f050959f90a6282a20a1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f420f01b_92a183c7",
        "filename": "content/common/message_port.h",
        "patchSetId": 6
      },
      "lineNbr": 14,
      "author": {
        "id": 1110029
      },
      "writtenOn": "2017-08-02T20:50:26Z",
      "side": 1,
      "message": "Ah yes, accidental left-over from an earlier version of this CL. Done. Also got rid of the no longer needed string16.h include.",
      "parentUuid": "ac6ac626_aef18989",
      "revId": "775df61f3b8d97bf1515f050959f90a6282a20a1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "eab4f01d_1d685cf1",
        "filename": "content/common/message_port_message_struct_traits.h",
        "patchSetId": 6
      },
      "lineNbr": 14,
      "author": {
        "id": 1115891
      },
      "writtenOn": "2017-08-02T20:08:08Z",
      "side": 1,
      "message": "Is it normal for a *_struct_traits.h header file to also declare the struct? It seems non-obvious that the struct definition would be in here. A separate message_port_message.h would be more intuitive, albeit maybe a bit excessive. I wonder if there is a pattern here that we should be following for the sake of consistency.",
      "revId": "775df61f3b8d97bf1515f050959f90a6282a20a1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "184442c8_b8f2b02b",
        "filename": "content/common/message_port_message_struct_traits.h",
        "patchSetId": 6
      },
      "lineNbr": 14,
      "author": {
        "id": 1110029
      },
      "writtenOn": "2017-08-02T20:50:26Z",
      "side": 1,
      "message": "No, I don\u0027t believe it is normal. And I agree that it is non-obvious. As you say it seemed a bit excessive, but it\u0027s probably cleaner anyway, so I move the struct to its own message_port_message.h/.cc file",
      "parentUuid": "eab4f01d_1d685cf1",
      "revId": "775df61f3b8d97bf1515f050959f90a6282a20a1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3d5633ab_5da6f2ca",
        "filename": "third_party/WebKit/Source/bindings/core/v8/serialization/SerializedScriptValue.cpp",
        "patchSetId": 6
      },
      "lineNbr": 206,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2017-08-02T00:34:24Z",
      "side": 1,
      "message": "Would you help me understand why this change is needed?",
      "revId": "775df61f3b8d97bf1515f050959f90a6282a20a1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "72efff6a_793c32a7",
        "filename": "third_party/WebKit/Source/bindings/core/v8/serialization/SerializedScriptValue.cpp",
        "patchSetId": 6
      },
      "lineNbr": 206,
      "author": {
        "id": 1110029
      },
      "writtenOn": "2017-08-02T02:59:28Z",
      "side": 1,
      "message": "SerializedScriptValue::ToWireString and ToWireData both padded the data returned to a multiple of 2 bytes. Doing that always meant extra copies though, so GetWireData was introduced which doesn\u0027t do that padding. Since the current serialization format is just based on bytes rather than 16 bit integers anyway this should all be no problem.\nBut apparently no code was trying to parse back a SerializedScriptValue from the result of GetWireData (or if they are, I\u0027m not sure what constructor they would be using, since anyting I tried would fail in this DCHECK when the buffer isn\u0027t a multiple of 16 bits).",
      "parentUuid": "3d5633ab_5da6f2ca",
      "revId": "775df61f3b8d97bf1515f050959f90a6282a20a1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "06e5a98b_222ef155",
        "filename": "third_party/WebKit/public/platform/WebMessagePortChannel.h",
        "patchSetId": 6
      },
      "lineNbr": 56,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2017-08-02T00:34:24Z",
      "side": 1,
      "message": "Maybe stupid question: Why do you use WebVector for TryGetMessage while you use uint8_t* and size_t for PostMessage?",
      "revId": "775df61f3b8d97bf1515f050959f90a6282a20a1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fd83ec6c_51504b6b",
        "filename": "third_party/WebKit/public/platform/WebMessagePortChannel.h",
        "patchSetId": 6
      },
      "lineNbr": 56,
      "author": {
        "id": 1110029
      },
      "writtenOn": "2017-08-02T02:59:28Z",
      "side": 1,
      "message": "In the case of PostMessage no ownership of memory is transferred. The serialization to a mojo message happens directly within the PostMessage call. For TryGetMessage I need to somehow transfer ownership of the bytes for after TryGetMessage returns (at least without changing how the API is used). So pointer + size when we\u0027re only passing a reference to the bytes into PostMessage, and vector\u003cuint8_t\u003e to transfer ownership on the way out. In the future I do want to change how TryGetMessage works, but that\u0027s probably easier to do after onion-soupyfying messageport (have a mostly working CL for that, just needs some cleaning up/figuring out proper dependencies between WebKit/common, WebKit/public, etc).",
      "parentUuid": "06e5a98b_222ef155",
      "revId": "775df61f3b8d97bf1515f050959f90a6282a20a1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}