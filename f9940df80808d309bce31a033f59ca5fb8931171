{
  "comments": [
    {
      "key": {
        "uuid": "92768faa_ead8eec3",
        "filename": "components/variations/variations_params_manager.cc",
        "patchSetId": 2
      },
      "lineNbr": 113,
      "author": {
        "id": 1103654
      },
      "writtenOn": "2017-07-11T16:28:18Z",
      "side": 1,
      "message": "Nit: No {}",
      "range": {
        "startLine": 113,
        "startChar": 15,
        "endLine": 113,
        "endChar": 16
      },
      "revId": "f9940df80808d309bce31a033f59ca5fb8931171",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "42c6e5c5_6f785c9a",
        "filename": "components/variations/variations_params_manager.cc",
        "patchSetId": 2
      },
      "lineNbr": 113,
      "author": {
        "id": 1130134
      },
      "writtenOn": "2017-07-11T16:53:26Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "92768faa_ead8eec3",
      "range": {
        "startLine": 113,
        "startChar": 15,
        "endLine": 113,
        "endChar": 16
      },
      "revId": "f9940df80808d309bce31a033f59ca5fb8931171",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "526e5e43_79b78c5c",
        "filename": "components/variations/variations_params_manager.cc",
        "patchSetId": 2
      },
      "lineNbr": 135,
      "author": {
        "id": 1130134
      },
      "writtenOn": "2017-07-11T17:00:00Z",
      "side": 1,
      "message": "Depending on ::switches::kEnableFeatures from content_features.h smells a bit fishy.\n\nThis dependency is flagged by:\n\n** Presubmit ERRORS **\nYou added one or more #includes that violate checkdeps rules.\n  components/variations/variations_params_manager.cc\n      Illegal include: \"content/public/common/content_switches.h\"\n    Because of no rule applying.\n\nAny thoughts/comments/suggestions on this?  Note that the code here depends on:\n\n- Escaping done in components/variations/field_trial_config/field_trial_util.cc (this CL exposes EscapeValue from field_trial_util.h)\n\n- ::switches::kEnableFeatures from content/public/common/content_switches.h\n\n- ::variations::switches::kForceFieldTrialParams from components/variations/variations_switches.h\n\n- ::switches::kForceFieldTrials from base/base_switches.h",
      "range": {
        "startLine": 135,
        "startChar": 48,
        "endLine": 135,
        "endChar": 63
      },
      "revId": "f9940df80808d309bce31a033f59ca5fb8931171",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f2fb7be1_243c714c",
        "filename": "components/variations/variations_params_manager.cc",
        "patchSetId": 2
      },
      "lineNbr": 135,
      "author": {
        "id": 1130134
      },
      "writtenOn": "2017-07-11T17:01:21Z",
      "side": 1,
      "message": "Maybe I can just move ::switches::kEnableFeatures from //content into //base/base_switches.h?  WDYT?",
      "parentUuid": "526e5e43_79b78c5c",
      "range": {
        "startLine": 135,
        "startChar": 48,
        "endLine": 135,
        "endChar": 63
      },
      "revId": "f9940df80808d309bce31a033f59ca5fb8931171",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ea4680e7_fabad63c",
        "filename": "components/variations/variations_params_manager.cc",
        "patchSetId": 2
      },
      "lineNbr": 135,
      "author": {
        "id": 1130134
      },
      "writtenOn": "2017-07-11T19:21:40Z",
      "side": 1,
      "message": "This is resolved by moving the code handling switches::kEnableFeatures into content/public/test/test_utils.cc",
      "parentUuid": "f2fb7be1_243c714c",
      "range": {
        "startLine": 135,
        "startChar": 48,
        "endLine": 135,
        "endChar": 63
      },
      "revId": "f9940df80808d309bce31a033f59ca5fb8931171",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1d1cc00e_475a2d98",
        "filename": "components/variations/variations_params_manager.h",
        "patchSetId": 2
      },
      "lineNbr": 94,
      "author": {
        "id": 1103654
      },
      "writtenOn": "2017-07-11T16:28:18Z",
      "side": 1,
      "message": "Non-const params should be last. Same for the one above.",
      "range": {
        "startLine": 94,
        "startChar": 37,
        "endLine": 94,
        "endChar": 38
      },
      "revId": "f9940df80808d309bce31a033f59ca5fb8931171",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ea6d9966_6d131ede",
        "filename": "components/variations/variations_params_manager.h",
        "patchSetId": 2
      },
      "lineNbr": 94,
      "author": {
        "id": 1130134
      },
      "writtenOn": "2017-07-11T16:53:26Z",
      "side": 1,
      "message": "Hmmm... okay.  |command_line| acts like |self| or |this| - this is why I put it first.  I thought that I saw a thread on chromium-dev that said that both orders are okay, but I can\u0027t find it now.  Aaaand I see that Google C++ Style Guide pushes toward putting output parameters last (https://google.github.io/styleguide/cppguide.html#Function_Parameter_Ordering).\n\nDone.",
      "parentUuid": "1d1cc00e_475a2d98",
      "range": {
        "startLine": 94,
        "startChar": 37,
        "endLine": 94,
        "endChar": 38
      },
      "revId": "f9940df80808d309bce31a033f59ca5fb8931171",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ab9d30d8_f7de59ce",
        "filename": "components/variations/variations_params_manager.h",
        "patchSetId": 2
      },
      "lineNbr": 94,
      "author": {
        "id": 1130134
      },
      "writtenOn": "2017-07-11T19:21:40Z",
      "side": 1,
      "message": "Marking as resolved.",
      "parentUuid": "ea6d9966_6d131ede",
      "range": {
        "startLine": 94,
        "startChar": 37,
        "endLine": 94,
        "endChar": 38
      },
      "revId": "f9940df80808d309bce31a033f59ca5fb8931171",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f3922cc4_23678a7c",
        "filename": "components/variations/variations_params_manager.h",
        "patchSetId": 2
      },
      "lineNbr": 97,
      "author": {
        "id": 1103654
      },
      "writtenOn": "2017-07-11T16:28:18Z",
      "side": 1,
      "message": "Can this be a std::set\u003cbase::Feature\u003e?",
      "range": {
        "startLine": 97,
        "startChar": 35,
        "endLine": 97,
        "endChar": 54
      },
      "revId": "f9940df80808d309bce31a033f59ca5fb8931171",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2199548b_2b6edba2",
        "filename": "components/variations/variations_params_manager.h",
        "patchSetId": 2
      },
      "lineNbr": 97,
      "author": {
        "id": 1130134
      },
      "writtenOn": "2017-07-11T16:53:26Z",
      "side": 1,
      "message": "FWIW, I was aiming for consistency with SetVariationParamsWithFeatureAssociations.\n\nMaybe there should be another overload:\n\n  static void AppendVariationParamsWithFeatureAssociations(\n      const base::Feature\u0026 associated_feature,\n      const std::string\u0026 param_name,\n      const std::string\u0026 param_value,\n      base::CommandLine* command_line);\n\n- Is |trial_name| really needed?  Can\u0027t I hardcode something like \"TestTrialName\"?\n- |const std::string\u0026 param_name|, and |const std::string\u0026 param_value| instead of const |std::map\u003cstd::string, std::string\u003e\u0026 param_values|\n- |const base::Feature\u0026 associated_feature| instead of |const std::set\u003cstd::string\u003e\u0026 associated_features|\n\nWDYT?\n\n\nPS. Please note kSpeculativeResourcePrefetchingFeatureName and how it is in calls to VariationParamsManager from chrome/browser/predictors/resource_prefetch_common_unittest.cc and from chrome/browser/predictors/resource_prefetch_predictor_browsertest.cc.  Do you think SetVariationParamsWithFeatureAssociations (and the constructor of VariationParamsManager) should also take |base::Feature| instead of |std::string|?",
      "parentUuid": "f3922cc4_23678a7c",
      "range": {
        "startLine": 97,
        "startChar": 35,
        "endLine": 97,
        "endChar": 54
      },
      "revId": "f9940df80808d309bce31a033f59ca5fb8931171",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "da853e73_350543f3",
        "filename": "components/variations/variations_params_manager.h",
        "patchSetId": 2
      },
      "lineNbr": 97,
      "author": {
        "id": 1130134
      },
      "writtenOn": "2017-07-11T19:21:40Z",
      "side": 1,
      "message": "This is resolved now - the helper function in content/public/test/test_utils.h does indeed take |const base::Feature\u0026| as an argument.",
      "parentUuid": "2199548b_2b6edba2",
      "range": {
        "startLine": 97,
        "startChar": 35,
        "endLine": 97,
        "endChar": 54
      },
      "revId": "f9940df80808d309bce31a033f59ca5fb8931171",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}