{
  "comments": [
    {
      "key": {
        "uuid": "a6aa9f13_f08c02e3",
        "filename": "remoting/host/linux/linux_me2me_host.py",
        "patchSetId": 4
      },
      "lineNbr": 574,
      "author": {
        "id": 1000528
      },
      "writtenOn": "2017-09-01T17:40:50Z",
      "side": 1,
      "message": "I had to look up for...else--it looks like an indentation error. Maybe someone more familiar with Python would be fine with this, but it seems simpler to turn the break into a return and get rid of the else.",
      "range": {
        "startLine": 574,
        "startChar": 9,
        "endLine": 574,
        "endChar": 0
      },
      "revId": "f17b0bedb48674065178311d09e1d8b04525b1a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "09fe8798_587a24f2",
        "filename": "remoting/host/linux/linux_me2me_host.py",
        "patchSetId": 4
      },
      "lineNbr": 574,
      "author": {
        "id": 1144161
      },
      "writtenOn": "2017-09-01T20:40:02Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a6aa9f13_f08c02e3",
      "range": {
        "startLine": 574,
        "startChar": 9,
        "endLine": 574,
        "endChar": 0
      },
      "revId": "f17b0bedb48674065178311d09e1d8b04525b1a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4d842fe3_803dde44",
        "filename": "remoting/host/linux/linux_me2me_host.py",
        "patchSetId": 4
      },
      "lineNbr": 1618,
      "author": {
        "id": 1000528
      },
      "writtenOn": "2017-09-01T17:40:50Z",
      "side": 1,
      "message": "You\u0027re not using this variable. Some languages have a convention of using an underscore for things that need to be bound to a variable, but which aren\u0027t going to be used; does Python have anything like that?",
      "range": {
        "startLine": 1618,
        "startChar": 21,
        "endLine": 1618,
        "endChar": 35
      },
      "revId": "f17b0bedb48674065178311d09e1d8b04525b1a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cdf2fbcd_5f308bc6",
        "filename": "remoting/host/linux/linux_me2me_host.py",
        "patchSetId": 4
      },
      "lineNbr": 1618,
      "author": {
        "id": 1144161
      },
      "writtenOn": "2017-09-01T20:40:02Z",
      "side": 1,
      "message": "After some research, I don\u0027t think there\u0027s a common rule in Python. Some people like to use _ (which is just a normal identifier in Python), while other\u0027s avoid it because it\u0027s given a special meaning by both the interactive interpreter (contains the result of the last statement), and gettext ( _(\"Some string\") is used to look up a translation). Some people use __ to avoid that confusion, while others do _name to signify that a local variable is unused (but this clashes with the private member convention).\n\nPersonally, I\u0027d probably pick one of these two:\nfor inhibitor, _ in all_inhibitors: # We don\u0027t use gettext\nfor inhibitor in (i[0] for i in all_inhibitors): # Avoids creating an extra variable altogether.\n\nI went with the first one for now.",
      "parentUuid": "4d842fe3_803dde44",
      "range": {
        "startLine": 1618,
        "startChar": 21,
        "endLine": 1618,
        "endChar": 35
      },
      "revId": "f17b0bedb48674065178311d09e1d8b04525b1a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1154c8f2_f0bcd0c3",
        "filename": "remoting/host/linux/linux_me2me_host.py",
        "patchSetId": 4
      },
      "lineNbr": 1618,
      "author": {
        "id": 1000528
      },
      "writtenOn": "2017-09-01T21:11:54Z",
      "side": 1,
      "message": "SGTM. The second option is cute, but not very readable :)",
      "parentUuid": "cdf2fbcd_5f308bc6",
      "range": {
        "startLine": 1618,
        "startChar": 21,
        "endLine": 1618,
        "endChar": 35
      },
      "revId": "f17b0bedb48674065178311d09e1d8b04525b1a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1b8d1799_a43e75f2",
        "filename": "remoting/host/linux/linux_me2me_host.py",
        "patchSetId": 4
      },
      "lineNbr": 1654,
      "author": {
        "id": 1000528
      },
      "writtenOn": "2017-09-01T17:40:50Z",
      "side": 1,
      "message": "wait",
      "range": {
        "startLine": 1654,
        "startChar": 19,
        "endLine": 1654,
        "endChar": 22
      },
      "revId": "f17b0bedb48674065178311d09e1d8b04525b1a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "020441bc_a981d434",
        "filename": "remoting/host/linux/linux_me2me_host.py",
        "patchSetId": 4
      },
      "lineNbr": 1654,
      "author": {
        "id": 1144161
      },
      "writtenOn": "2017-09-01T20:40:02Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1b8d1799_a43e75f2",
      "range": {
        "startLine": 1654,
        "startChar": 19,
        "endLine": 1654,
        "endChar": 22
      },
      "revId": "f17b0bedb48674065178311d09e1d8b04525b1a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "29d3748a_025ed894",
        "filename": "remoting/host/linux/linux_me2me_host.py",
        "patchSetId": 4
      },
      "lineNbr": 1656,
      "author": {
        "id": 1000528
      },
      "writtenOn": "2017-09-01T17:40:50Z",
      "side": 1,
      "message": "I find this code hard to follow. You\u0027re not actually waiting here, although this would seem the logical place to do so (wouldn\u0027t it mean you don\u0027t need an else, and can simply restart everything when waitpid returns?)\n\nThe way this is structured as a big while True loop that maintains state seems rather error prone. For example, could you simply call desktop.shutdown_all_procs() everywhere you\u0027re currently setting tear_down \u003d True and get rid of that variable?",
      "range": {
        "startLine": 1656,
        "startChar": 48,
        "endLine": 1656,
        "endChar": 0
      },
      "revId": "f17b0bedb48674065178311d09e1d8b04525b1a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fb10e5c7_6e66ccd7",
        "filename": "remoting/host/linux/linux_me2me_host.py",
        "patchSetId": 4
      },
      "lineNbr": 1656,
      "author": {
        "id": 1144161
      },
      "writtenOn": "2017-09-01T20:40:02Z",
      "side": 1,
      "message": "wait could return before the timeout is reached if another child process exits in the meantime. E.g., maybe only the host died and we want to relaunch it it 60 seconds, but before that time elapses the session exits. Now, instead of waiting the remaining time and trying to start the host, we want (according to the previous logic, here) to initiate tear down and stop the X server, too, and then relaunch everything.\n\nIt wouldn\u0027t be enough to call desktop.shutdown_all_procs() everywhere I\u0027m setting tear_down \u003d True; the entire contents of the \"if tear_down:\" block would have to be duplicated.\n\nIn general, the code was a giant mess of a while True loop before. In implementing this change, I cleaned it up some and fixed several instances of poor behavior. It could surely be cleaned up further, but I\u0027m not sure that that\u0027s in scope for this bug. The changes I\u0027ve made are already more extensive than I was expecting, and I intentionally avoided rewriting the whole thing.",
      "parentUuid": "29d3748a_025ed894",
      "range": {
        "startLine": 1656,
        "startChar": 48,
        "endLine": 1656,
        "endChar": 0
      },
      "revId": "f17b0bedb48674065178311d09e1d8b04525b1a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dccf3bad_88363901",
        "filename": "remoting/host/linux/linux_me2me_host.py",
        "patchSetId": 4
      },
      "lineNbr": 1656,
      "author": {
        "id": 1000528
      },
      "writtenOn": "2017-09-01T21:11:54Z",
      "side": 1,
      "message": "Fair enough. I agree that you haven\u0027t made anything worse here and we should keep the bug scope small. Thanks for keeping me on point :) How about moving the log line to just before we call wait?",
      "parentUuid": "fb10e5c7_6e66ccd7",
      "range": {
        "startLine": 1656,
        "startChar": 48,
        "endLine": 1656,
        "endChar": 0
      },
      "revId": "f17b0bedb48674065178311d09e1d8b04525b1a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d575368f_6c5e61de",
        "filename": "remoting/host/linux/linux_me2me_host.py",
        "patchSetId": 4
      },
      "lineNbr": 1656,
      "author": {
        "id": 1144161
      },
      "writtenOn": "2017-09-01T22:00:34Z",
      "side": 1,
      "message": "The message still needs to be conditional on relaunch_times not being empty. The message is meant to indicate that there are components with a launch pending, but we decided not to launch them this time through the loop. The waitpid_handle_exceptions call below happens every time through the loop, not just when there\u0027s a launch pending, and most of the time is only waiting for child processes to exit. The difference is that when there *is* a launch pending, the call to wait will include a timeout so we loop again when it\u0027s time to relaunch.\n\nI could swap the if and else clauses on this conditional if you think it would make things more readable:\n\n    if not relaunch_times:\n      # Launch stuff\n    else:\n      # Print message\n\n    deadline \u003d …\n\n    pid, status \u003d waitpid_handle_exceptions(-1, deadline)",
      "parentUuid": "dccf3bad_88363901",
      "range": {
        "startLine": 1656,
        "startChar": 48,
        "endLine": 1656,
        "endChar": 0
      },
      "revId": "f17b0bedb48674065178311d09e1d8b04525b1a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1885f1b3_47ba5c47",
        "filename": "remoting/host/linux/linux_me2me_host.py",
        "patchSetId": 4
      },
      "lineNbr": 1695,
      "author": {
        "id": 1000528
      },
      "writtenOn": "2017-09-01T17:40:50Z",
      "side": 1,
      "message": "its",
      "range": {
        "startLine": 1695,
        "startChar": 39,
        "endLine": 1695,
        "endChar": 43
      },
      "revId": "f17b0bedb48674065178311d09e1d8b04525b1a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "32c0d439_a6658dd5",
        "filename": "remoting/host/linux/linux_me2me_host.py",
        "patchSetId": 4
      },
      "lineNbr": 1695,
      "author": {
        "id": 1144161
      },
      "writtenOn": "2017-09-01T20:40:02Z",
      "side": 1,
      "message": "I know the difference between these, I swear!\n\nFixed.",
      "parentUuid": "1885f1b3_47ba5c47",
      "range": {
        "startLine": 1695,
        "startChar": 39,
        "endLine": 1695,
        "endChar": 43
      },
      "revId": "f17b0bedb48674065178311d09e1d8b04525b1a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "af7d3e8b_016ba372",
        "filename": "remoting/host/remoting_me2me_host.cc",
        "patchSetId": 4
      },
      "lineNbr": 186,
      "author": {
        "id": 1144161
      },
      "writtenOn": "2017-08-30T22:12:14Z",
      "side": 1,
      "message": "Should this flag be added to the usage message?",
      "revId": "f17b0bedb48674065178311d09e1d8b04525b1a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "06865c24_b7b0bf81",
        "filename": "remoting/host/remoting_me2me_host.cc",
        "patchSetId": 4
      },
      "lineNbr": 186,
      "author": {
        "id": 1000528
      },
      "writtenOn": "2017-09-01T17:40:50Z",
      "side": 1,
      "message": "Only if we\u0027re currently reporting every command-line option. TBH, this binary isn\u0027t really intended to be run by users, so it could simply state that if there\u0027s a command-line parse error, similar to what the Python script does.",
      "parentUuid": "af7d3e8b_016ba372",
      "revId": "f17b0bedb48674065178311d09e1d8b04525b1a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bce0b1e2_0f66c901",
        "filename": "remoting/host/remoting_me2me_host.cc",
        "patchSetId": 4
      },
      "lineNbr": 186,
      "author": {
        "id": 1144161
      },
      "writtenOn": "2017-09-01T20:40:02Z",
      "side": 1,
      "message": "Well, the Python script will actually output a nice usage message if you pass it --help. It seems kind of hit-or-miss whether a given command-line option is in the usage message for the host. E.g., --audio-pipe-name is in it, but --enable-vp9 is not. I left --report-offline-reason out because --signal-parent isn\u0027t included, and they seemed to be of about equivalent \"internalness\". I wasn\u0027t sure if there was a more general principal in play.",
      "parentUuid": "06865c24_b7b0bf81",
      "revId": "f17b0bedb48674065178311d09e1d8b04525b1a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1130d6df_788bade4",
        "filename": "remoting/host/remoting_me2me_host.cc",
        "patchSetId": 4
      },
      "lineNbr": 186,
      "author": {
        "id": 1000528
      },
      "writtenOn": "2017-09-01T21:11:54Z",
      "side": 1,
      "message": "Nope. I think it\u0027s fine to leave this undocumented, and I\u0027m inclined to say we should get rid of command-line help altogether in a follow-up as a way of making things consistent.",
      "parentUuid": "bce0b1e2_0f66c901",
      "revId": "f17b0bedb48674065178311d09e1d8b04525b1a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c5f3c8ba_ec544984",
        "filename": "remoting/host/remoting_me2me_host.cc",
        "patchSetId": 4
      },
      "lineNbr": 924,
      "author": {
        "id": 1000528
      },
      "writtenOn": "2017-09-01T17:40:50Z",
      "side": 1,
      "message": "Add a comment clarifying that this will be called on successful offline-reason reporting?\n\nBetter still, if you have an explicit state for that (or if it can be inferred from the state and the report_offline_reason_ member), log something like \"Offline reason saved.\"",
      "range": {
        "startLine": 924,
        "startChar": 31,
        "endLine": 924,
        "endChar": 0
      },
      "revId": "f17b0bedb48674065178311d09e1d8b04525b1a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "41533895_c18ce27e",
        "filename": "remoting/host/remoting_me2me_host.cc",
        "patchSetId": 4
      },
      "lineNbr": 924,
      "author": {
        "id": 1144161
      },
      "writtenOn": "2017-09-01T20:40:02Z",
      "side": 1,
      "message": "The offline reason code already logs a message stating whether it was successful. I figured that in general, we don\u0027t want to say the host is ready to receive connections if it happens to be in *any* other state, such as if the host decided to shut down for a different reason before the signaling finished connecting.",
      "parentUuid": "c5f3c8ba_ec544984",
      "range": {
        "startLine": 924,
        "startChar": 31,
        "endLine": 924,
        "endChar": 0
      },
      "revId": "f17b0bedb48674065178311d09e1d8b04525b1a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "af81486b_e83029db",
        "filename": "remoting/host/remoting_me2me_host.cc",
        "patchSetId": 4
      },
      "lineNbr": 924,
      "author": {
        "id": 1000528
      },
      "writtenOn": "2017-09-01T21:11:54Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "41533895_c18ce27e",
      "range": {
        "startLine": 924,
        "startChar": 31,
        "endLine": 924,
        "endChar": 0
      },
      "revId": "f17b0bedb48674065178311d09e1d8b04525b1a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e718c762_fa087e42",
        "filename": "remoting/host/remoting_me2me_host.cc",
        "patchSetId": 4
      },
      "lineNbr": 1702,
      "author": {
        "id": 1144161
      },
      "writtenOn": "2017-08-30T22:12:14Z",
      "side": 1,
      "message": "This doesn\u0027t seem particularly clean, but I\u0027m also not sure what would be better.",
      "revId": "f17b0bedb48674065178311d09e1d8b04525b1a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "41db47cf_45a44ca1",
        "filename": "remoting/host/remoting_me2me_host.cc",
        "patchSetId": 4
      },
      "lineNbr": 1702,
      "author": {
        "id": 1000528
      },
      "writtenOn": "2017-09-01T17:40:50Z",
      "side": 1,
      "message": "I think this is okay. I\u0027ve seen this pattern of explicitly testing via HasSwitch outside of command-line-parsing code elsewhere.",
      "parentUuid": "e718c762_fa087e42",
      "revId": "f17b0bedb48674065178311d09e1d8b04525b1a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "43f9e829_02efaf37",
        "filename": "remoting/resources/remoting_strings.grd",
        "patchSetId": 4
      },
      "lineNbr": 1131,
      "author": {
        "id": 1144161
      },
      "writtenOn": "2017-08-30T22:12:14Z",
      "side": 1,
      "message": "Suggestions for better messages appreciated. I *think* just adding these is enough for the Android client to pick them up, and it looks like the iOS client doesn\u0027t report offline reasons at all.",
      "revId": "f17b0bedb48674065178311d09e1d8b04525b1a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d340bfa2_f0f5e783",
        "filename": "remoting/resources/remoting_strings.grd",
        "patchSetId": 4
      },
      "lineNbr": 1131,
      "author": {
        "id": 1000528
      },
      "writtenOn": "2017-09-01T17:40:50Z",
      "side": 1,
      "message": "I think they\u0027re a bit too technical. For the X server and host, you can say something like \"\u003ccomponent\u003e crashed or failed to start.\" For the session, I like the fact that you\u0027ve given more detail, and would probably go further; something like \"Session crashed or failed to start. If ~/.chrome-remote-desktop-session exists on the remote computer, make sure that runs a long-running process such as a desktop environment or window manager.\" I realize that technically it might be the global script that that\u0027s broken, but let\u0027s focus on the cases we know are causing problems and provide enough information to fix it.",
      "parentUuid": "43f9e829_02efaf37",
      "revId": "f17b0bedb48674065178311d09e1d8b04525b1a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "80ad0aa1_b4d64163",
        "filename": "remoting/resources/remoting_strings.grd",
        "patchSetId": 4
      },
      "lineNbr": 1131,
      "author": {
        "id": 1000528
      },
      "writtenOn": "2017-09-01T21:11:54Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d340bfa2_f0f5e783",
      "revId": "f17b0bedb48674065178311d09e1d8b04525b1a7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}