{
  "comments": [
    {
      "key": {
        "uuid": "b258946b_8676ab3a",
        "filename": "third_party/WebKit/Source/modules/compositorworker/AnimationWorkletProxyClientImpl.cpp",
        "patchSetId": 24
      },
      "lineNbr": 46,
      "author": {
        "id": 1115976
      },
      "writtenOn": "2017-10-27T00:40:50Z",
      "side": 1,
      "message": "DCHECK(!IsMainThread() \u0026\u0026 !global_scope_-\u003eIsContextThread()) ?",
      "revId": "172269f1a548abbcc7712a3a56483b5b2ee036e7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "82400732_a17fc403",
        "filename": "third_party/WebKit/Source/modules/compositorworker/AnimationWorkletProxyClientImpl.cpp",
        "patchSetId": 24
      },
      "lineNbr": 46,
      "author": {
        "id": 1000279
      },
      "writtenOn": "2017-10-27T15:45:08Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b258946b_8676ab3a",
      "revId": "172269f1a548abbcc7712a3a56483b5b2ee036e7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a3b6ef31_620ca474",
        "filename": "third_party/WebKit/Source/modules/compositorworker/AnimationWorkletProxyClientImpl.cpp",
        "patchSetId": 24
      },
      "lineNbr": 50,
      "author": {
        "id": 1115976
      },
      "writtenOn": "2017-10-27T00:40:50Z",
      "side": 1,
      "message": "I\u0027d recommend avoiding |global_scope_| access on non-context thread because it sometimes causes race conditions. In this case, is it guaranteed that Mutate() is never called during Dispose()?",
      "range": {
        "startLine": 50,
        "startChar": 6,
        "endLine": 50,
        "endChar": 19
      },
      "revId": "172269f1a548abbcc7712a3a56483b5b2ee036e7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3537598a_ee720a2a",
        "filename": "third_party/WebKit/Source/modules/compositorworker/AnimationWorkletProxyClientImpl.cpp",
        "patchSetId": 24
      },
      "lineNbr": 50,
      "author": {
        "id": 1000279
      },
      "writtenOn": "2017-10-27T15:45:08Z",
      "side": 1,
      "message": "(I presume you mean AnimationWorkletGlobalScope:Dispose) No, it is not guaranteed. It was, in fact, happening quite repeatedly in testing.  So long as there isn\u0027t an access violation caused by reading the same/modified variable, we are now correct whichever branch of this if is taken (IIUC). The Mutate gets handled emptily after PrepareForShutdownOnWorkerThread, causing is_done to be signalled and allowing progress here emptily.\n\nThere is a defined ordering on the backing thread, since the scheduler gives us one or the other (PrepareForShutdownOnWorkerThread|Mutate) at a time.",
      "parentUuid": "a3b6ef31_620ca474",
      "range": {
        "startLine": 50,
        "startChar": 6,
        "endLine": 50,
        "endChar": 19
      },
      "revId": "172269f1a548abbcc7712a3a56483b5b2ee036e7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "83854871_7255daa8",
        "filename": "third_party/WebKit/Source/modules/compositorworker/AnimationWorkletProxyClientImpl.cpp",
        "patchSetId": 24
      },
      "lineNbr": 50,
      "author": {
        "id": 1115976
      },
      "writtenOn": "2017-10-30T17:03:31Z",
      "side": 1,
      "message": "\u003e (I presume you mean AnimationWorkletGlobalScope:Dispose)\n\nYes. To be more accurate, I meant AnimationWorkletProxyClientImpl::Dispose().\n\n\u003e No, it is not guaranteed. It was, in fact, happening quite repeatedly in testing.  So long as there isn\u0027t an access violation caused by reading the same/modified variable, we are now correct whichever branch of this if is taken (IIUC). The Mutate gets handled emptily after PrepareForShutdownOnWorkerThread, causing is_done to be signalled and allowing progress here emptily.\n\nThe access violation seems to happen when Dispose() nullifies |global_scope_| at line 41 on the worker thread while Mutate() is running line 54-60 on the compositor thread. In the case, nullptr is captured by WTF::Bind() as a receiver object and the task will crash.\n\n\u003e There is a defined ordering on the backing thread, since the scheduler gives us one or the other (PrepareForShutdownOnWorkerThread|Mutate) at a time.",
      "parentUuid": "3537598a_ee720a2a",
      "range": {
        "startLine": 50,
        "startChar": 6,
        "endLine": 50,
        "endChar": 19
      },
      "revId": "172269f1a548abbcc7712a3a56483b5b2ee036e7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "85acd0c7_fad05d09",
        "filename": "third_party/WebKit/Source/modules/compositorworker/AnimationWorkletProxyClientImpl.cpp",
        "patchSetId": 24
      },
      "lineNbr": 55,
      "author": {
        "id": 1115976
      },
      "writtenOn": "2017-10-27T00:40:50Z",
      "side": 1,
      "message": "As majidvp@ commented, this should be TaskRunnerHelper::Get()-\u003ePostTask() to post a task to a per-global-scope scheduler. GetSingleThreadTaskRunner()-\u003ePostTask() posts a task to thread\u0027s default task queue that may run the posted task even after the AnimationWorkletGlobalScope is gone.\n\nI guess you hit DCHECK(IsContextThread()) in the WorkerOrWorkletGlobalScope::GetTaskRunner(), right? GlobalScope is not thread-safe and it\u0027s generally discouraged to access it from a non-context thread. To post a task to the context thread, we need to...\n\n1) take context\u0027s task runner on the context thread and then pass it to the non-context thread, OR\n2) take context\u0027s task runner in some thread-safe way. TaskRunnerHelper::Get(WorkerThread*) is available on the main thread.",
      "revId": "172269f1a548abbcc7712a3a56483b5b2ee036e7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "79d59b9a_ca41d790",
        "filename": "third_party/WebKit/Source/modules/compositorworker/AnimationWorkletProxyClientImpl.cpp",
        "patchSetId": 24
      },
      "lineNbr": 55,
      "author": {
        "id": 1000279
      },
      "writtenOn": "2017-10-27T15:45:08Z",
      "side": 1,
      "message": "Does using that scheduler not give us a starvation condition in the compositor thread if we have posted a Mutate, but the Shutdown/Dispose is handled first?  It Kills that scheduler, causing us is_done to never get signalled below, correct?",
      "parentUuid": "85acd0c7_fad05d09",
      "revId": "172269f1a548abbcc7712a3a56483b5b2ee036e7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a5f91cc2_720d5ea8",
        "filename": "third_party/WebKit/Source/modules/compositorworker/AnimationWorkletProxyClientImpl.cpp",
        "patchSetId": 24
      },
      "lineNbr": 55,
      "author": {
        "id": 1115976
      },
      "writtenOn": "2017-10-30T17:03:31Z",
      "side": 1,
      "message": "That\u0027s possible. We need to remove the waitable event as a TODO comment above, or to wake up the compositor thread from another thread when termination starts. For example of the latter case, we could move |is_done| to a member field of this class and signal it in AnimationWorkletProxyClientImpl::Dispose() on the worker thread.",
      "parentUuid": "79d59b9a_ca41d790",
      "revId": "172269f1a548abbcc7712a3a56483b5b2ee036e7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "40113153_7fd4a802",
        "filename": "third_party/WebKit/Source/modules/compositorworker/AnimationWorkletProxyClientImpl.cpp",
        "patchSetId": 24
      },
      "lineNbr": 55,
      "author": {
        "id": 1125304
      },
      "writtenOn": "2017-10-31T19:32:13Z",
      "side": 1,
      "message": "Given this, I suggest the following: \n- In this patch, continue using the GetSingleThreadTaskRunner()-\u003ePostTask() as before but\n  make a change [1] to avoid any access violation.\n\n- In a follow-up patch, start to use the per-global-scope scheduler as suggested in (1) while also\n  remove the waitable event.\n\n[1] Here a simple solution that Peter and I came up with for the current access violation issue.\nInstead of posting task that captures the |global_scope_|, we post a task that captures |this|.\nThat task then runs on worklet thread and can safely check if |global_scope_| is still valid and\ncan be used. Here is a sketch:\n\nAnimationWorkletProxyClientImpl::Mutate(...) {\n WaitableEvent is_done;\n AnimationWorkletThread::GetSharedBackingThread()\n    -\u003eGetSingleThreadTaskRunner()\n    -\u003ePostTask(\n            BLINK_FROM_HERE,\n            ConvertToBaseCallback(WTF::Bind(\n                \u0026AnimationWorkletProxyClientImpl::MutateOnWorkletThread, this,\n                CrossThreadUnretained(\u0026state), CrossThreadUnretained(\u0026output),\n                CrossThreadUnretained(\u0026is_done))));\n \n is_done.Wait();\n  mutator_-\u003eSetMutationUpdate(std::move(output));\n\n }\n\n AnimationWorkletProxyClientImpl::MutateOnWorkletThread(state, output, is_done) {\n   if (global_scope_) {\n     DCHECK(global_scope_-\u003eIsContextThread());\n     *output \u003d global_scope_-\u003eMutate(state)\n   }\n   id_done-\u003eSignal();\n }\n\nSide note:  Once we do this, we can also change global_scope_ to be a raw pointer (or a\n WeakMember) instead of it being a CrossThreadPersistent reference.\n\npetermayo@: Please correct me if anything is not accurate here.\nnhiroki@: wdyt?",
      "parentUuid": "a5f91cc2_720d5ea8",
      "revId": "172269f1a548abbcc7712a3a56483b5b2ee036e7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cf9276c7_aae471a0",
        "filename": "third_party/WebKit/Source/modules/compositorworker/AnimationWorkletProxyClientImpl.h",
        "patchSetId": 24
      },
      "lineNbr": 27,
      "author": {
        "id": 1115976
      },
      "writtenOn": "2017-10-27T00:40:50Z",
      "side": 1,
      "message": "Can you update this comment? Looks like this class is constructed on the main thread, and used on both a worklet backing thread (worker thread) and the compositor thread (I assume Mutate() is still accessed on the compositor thread after this CL).",
      "revId": "172269f1a548abbcc7712a3a56483b5b2ee036e7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}