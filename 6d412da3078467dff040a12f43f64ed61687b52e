{
  "comments": [
    {
      "key": {
        "uuid": "13e0daac_abf2c0d9",
        "filename": "content/browser/child_process_security_policy_impl.cc",
        "patchSetId": 6
      },
      "lineNbr": 1055,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-11-20T22:31:43Z",
      "side": 1,
      "message": "nit: perhaps we can rephrase this so people who aren\u0027t familiar with these terms can understand this?  Something like:\n\nCheck two kinds of access:\n- isolated origins should only be allowed to access data for the same origin (\"jail\" enforcement)\n- other sites should not be allowed to access data of an isolated origin (\"citadel\" enforcement)",
      "range": {
        "startLine": 1054,
        "startChar": 50,
        "endLine": 1055,
        "endChar": 17
      },
      "revId": "6d412da3078467dff040a12f43f64ed61687b52e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f94dc421_d92d0e4f",
        "filename": "content/browser/child_process_security_policy_impl.cc",
        "patchSetId": 6
      },
      "lineNbr": 1055,
      "author": {
        "id": 1130134
      },
      "writtenOn": "2017-11-21T16:57:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "13e0daac_abf2c0d9",
      "range": {
        "startLine": 1054,
        "startChar": 50,
        "endLine": 1055,
        "endChar": 17
      },
      "revId": "6d412da3078467dff040a12f43f64ed61687b52e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c2137cb9_dffa7caf",
        "filename": "content/browser/isolated_origin_browsertest.cc",
        "patchSetId": 6
      },
      "lineNbr": 1004,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-11-20T22:31:43Z",
      "side": 1,
      "message": "nit: EXPECT_TRUE",
      "range": {
        "startLine": 1004,
        "startChar": 0,
        "endLine": 1004,
        "endChar": 43
      },
      "revId": "6d412da3078467dff040a12f43f64ed61687b52e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c5f90441_7dd09784",
        "filename": "content/browser/isolated_origin_browsertest.cc",
        "patchSetId": 6
      },
      "lineNbr": 1004,
      "author": {
        "id": 1130134
      },
      "writtenOn": "2017-11-21T16:57:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c2137cb9_dffa7caf",
      "range": {
        "startLine": 1004,
        "startChar": 0,
        "endLine": 1004,
        "endChar": 43
      },
      "revId": "6d412da3078467dff040a12f43f64ed61687b52e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9e8c96d1_9ea29d76",
        "filename": "content/browser/isolated_origin_browsertest.cc",
        "patchSetId": 6
      },
      "lineNbr": 1005,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-11-20T22:31:43Z",
      "side": 1,
      "message": "nit: not needed, can just use \"web_contents()\" helper defined in this class.",
      "range": {
        "startLine": 1005,
        "startChar": 19,
        "endLine": 1005,
        "endChar": 22
      },
      "revId": "6d412da3078467dff040a12f43f64ed61687b52e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "29c32509_3e654a84",
        "filename": "content/browser/isolated_origin_browsertest.cc",
        "patchSetId": 6
      },
      "lineNbr": 1005,
      "author": {
        "id": 1130134
      },
      "writtenOn": "2017-11-21T16:57:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9e8c96d1_9ea29d76",
      "range": {
        "startLine": 1005,
        "startChar": 19,
        "endLine": 1005,
        "endChar": 22
      },
      "revId": "6d412da3078467dff040a12f43f64ed61687b52e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ead4ab74_3749f028",
        "filename": "content/browser/isolated_origin_browsertest.cc",
        "patchSetId": 6
      },
      "lineNbr": 1013,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-11-20T22:31:43Z",
      "side": 1,
      "message": "nit: main frame\u0027s? (there\u0027s no subframe here)",
      "range": {
        "startLine": 1013,
        "startChar": 44,
        "endLine": 1013,
        "endChar": 54
      },
      "revId": "6d412da3078467dff040a12f43f64ed61687b52e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "83e32a9d_3d26fe75",
        "filename": "content/browser/isolated_origin_browsertest.cc",
        "patchSetId": 6
      },
      "lineNbr": 1013,
      "author": {
        "id": 1130134
      },
      "writtenOn": "2017-11-21T16:57:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ead4ab74_3749f028",
      "range": {
        "startLine": 1013,
        "startChar": 44,
        "endLine": 1013,
        "endChar": 54
      },
      "revId": "6d412da3078467dff040a12f43f64ed61687b52e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "167b9140_ffdde060",
        "filename": "content/browser/isolated_origin_browsertest.cc",
        "patchSetId": 6
      },
      "lineNbr": 1032,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-11-20T22:31:43Z",
      "side": 1,
      "message": "nit: s/accessed/set/",
      "range": {
        "startLine": 1032,
        "startChar": 23,
        "endLine": 1032,
        "endChar": 31
      },
      "revId": "6d412da3078467dff040a12f43f64ed61687b52e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b3e08a69_a1e16ab5",
        "filename": "content/browser/isolated_origin_browsertest.cc",
        "patchSetId": 6
      },
      "lineNbr": 1032,
      "author": {
        "id": 1130134
      },
      "writtenOn": "2017-11-21T16:57:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "167b9140_ffdde060",
      "range": {
        "startLine": 1032,
        "startChar": 23,
        "endLine": 1032,
        "endChar": 31
      },
      "revId": "6d412da3078467dff040a12f43f64ed61687b52e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "94eef6bb_3cb4b196",
        "filename": "content/browser/isolated_origin_browsertest.cc",
        "patchSetId": 6
      },
      "lineNbr": 1048,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-11-20T22:31:43Z",
      "side": 1,
      "message": "EXPECT_TRUE",
      "range": {
        "startLine": 1048,
        "startChar": 2,
        "endLine": 1048,
        "endChar": 15
      },
      "revId": "6d412da3078467dff040a12f43f64ed61687b52e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3b30ca55_2ed64aef",
        "filename": "content/browser/isolated_origin_browsertest.cc",
        "patchSetId": 6
      },
      "lineNbr": 1048,
      "author": {
        "id": 1130134
      },
      "writtenOn": "2017-11-21T16:57:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "94eef6bb_3cb4b196",
      "range": {
        "startLine": 1048,
        "startChar": 2,
        "endLine": 1048,
        "endChar": 15
      },
      "revId": "6d412da3078467dff040a12f43f64ed61687b52e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cbc5586e_9b0d2c7d",
        "filename": "content/browser/isolated_origin_browsertest.cc",
        "patchSetId": 6
      },
      "lineNbr": 1050,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-11-20T22:31:43Z",
      "side": 1,
      "message": "web_contents()",
      "range": {
        "startLine": 1050,
        "startChar": 32,
        "endLine": 1050,
        "endChar": 35
      },
      "revId": "6d412da3078467dff040a12f43f64ed61687b52e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f60bc18c_5029658a",
        "filename": "content/browser/isolated_origin_browsertest.cc",
        "patchSetId": 6
      },
      "lineNbr": 1050,
      "author": {
        "id": 1130134
      },
      "writtenOn": "2017-11-21T16:57:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "cbc5586e_9b0d2c7d",
      "range": {
        "startLine": 1050,
        "startChar": 32,
        "endLine": 1050,
        "endChar": 35
      },
      "revId": "6d412da3078467dff040a12f43f64ed61687b52e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4cc7be82_7fa5bd34",
        "filename": "content/browser/isolated_origin_browsertest.cc",
        "patchSetId": 6
      },
      "lineNbr": 1057,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-11-20T22:31:43Z",
      "side": 1,
      "message": "s/subframe/main frame/",
      "range": {
        "startLine": 1057,
        "startChar": 44,
        "endLine": 1057,
        "endChar": 54
      },
      "revId": "6d412da3078467dff040a12f43f64ed61687b52e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "df10fc83_2cb9da3f",
        "filename": "content/browser/isolated_origin_browsertest.cc",
        "patchSetId": 6
      },
      "lineNbr": 1057,
      "author": {
        "id": 1130134
      },
      "writtenOn": "2017-11-21T16:57:11Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4cc7be82_7fa5bd34",
      "range": {
        "startLine": 1057,
        "startChar": 44,
        "endLine": 1057,
        "endChar": 54
      },
      "revId": "6d412da3078467dff040a12f43f64ed61687b52e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a2967e75_94563b5c",
        "filename": "content/browser/renderer_host/render_process_host_impl.cc",
        "patchSetId": 6
      },
      "lineNbr": 2035,
      "author": {
        "id": 1001934
      },
      "writtenOn": "2017-11-21T21:32:48Z",
      "side": 1,
      "message": "Can you do \"g_storage_partition_service_factory.Pointer()\" here instead?",
      "revId": "6d412da3078467dff040a12f43f64ed61687b52e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "44fc4cdd_763ff836",
        "filename": "content/browser/renderer_host/render_process_host_impl.cc",
        "patchSetId": 6
      },
      "lineNbr": 2035,
      "author": {
        "id": 1130134
      },
      "writtenOn": "2017-11-21T21:56:35Z",
      "side": 1,
      "message": "\u003e Can you do \"g_storage_partition_service_factory.Pointer()\" here instead?\n\nSince you phrased that as a question, let me for now stay on the current patchset and explain my thinking a bit further.  I thought that:\n\n1) future users of base::LazyInstance\u003c...\u003e might benefit from having an inequality operator (and avoid head-scratching I did when I saw that |\u003d\u003d nullptr| works but |!\u003d nullptr| doesn\u0027t)\n\n2) adding an inequality operator would be non-controversial given that the equality operator is already present.  In fact, I was fairly surprised that one of these operators would be implemented without implementing the other one.\n\n\nBut, I did check that your |...Pointer()| suggestion compiles and I can definitely switch if you think adding the inequality operator is harmful.\n\nWDYT?",
      "parentUuid": "a2967e75_94563b5c",
      "revId": "6d412da3078467dff040a12f43f64ed61687b52e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c471d600_aa5afea0",
        "filename": "content/browser/renderer_host/render_process_host_impl.cc",
        "patchSetId": 6
      },
      "lineNbr": 2035,
      "author": {
        "id": 1130134
      },
      "writtenOn": "2017-11-27T23:25:18Z",
      "side": 1,
      "message": "I\u0027ve realized that I don\u0027t want to use LazyInstance::Pointer(), because this would cause an unnecessary allocation (allocating the lazy instance is only needed for tests).  I can replace |x !\u003d nullptr| with |!(x \u003d\u003d nullptr)| as is already done for LazyInstance comparisons in ui/gfx/font_list.cc [1], base/logging.cc [2] and a few other places).\n\nI talked with dcheng@ and he suggested getting rid of operator\u003d\u003d altogether and replacing it with something like empty() / is_initialized() / etc.  I\u0027ll try doing this in https://chromium-review.googlesource.com/c/chromium/src/+/792124\n\n[1] https://chromium.googlesource.com/chromium/src/+/c3d017eb59cfe91c1aae384a8339bf76e53e34a6/ui/gfx/font_list.cc#223\n\n[2] https://chromium.googlesource.com/chromium/src/+/c3d017eb59cfe91c1aae384a8339bf76e53e34a6/base/logging.cc#818",
      "parentUuid": "44fc4cdd_763ff836",
      "revId": "6d412da3078467dff040a12f43f64ed61687b52e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4cdc4d39_75487613",
        "filename": "content/browser/renderer_host/render_process_host_impl.cc",
        "patchSetId": 6
      },
      "lineNbr": 2035,
      "author": {
        "id": 1130134
      },
      "writtenOn": "2017-11-27T23:28:50Z",
      "side": 1,
      "message": "\u003e I\u0027ve realized that I don\u0027t want to use LazyInstance::Pointer(), because this would cause an unnecessary allocation.\n\nAaaand as soon as I hit \"send\" I realized that what I wrote is not quite accurate - calling LazyInstance::Pointer would default-construct the T (without doing an allocation as I\u0027ve incorrectly said above).  Still - this is something that we want to avoid doing outside of tests.",
      "parentUuid": "c471d600_aa5afea0",
      "revId": "6d412da3078467dff040a12f43f64ed61687b52e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3de9538c_9dbce9dd",
        "filename": "content/browser/renderer_host/render_process_host_impl.cc",
        "patchSetId": 6
      },
      "lineNbr": 2035,
      "author": {
        "id": 1001934
      },
      "writtenOn": "2017-11-28T00:29:53Z",
      "side": 1,
      "message": "Ack. If you want to leave the base/ change out and use the same pattern as other existing code, that works for me. Plus you don\u0027t have to wait for any approvals from me now.\n\nTo further explain my initial reaction - we\u0027ve managed to live without operator!\u003d for ~10 years, so it wasn\u0027t obvious why need it now. Also, since I didn\u0027t write LazyInstance, and I didn\u0027t look at it too closely, I wasn\u0027t sure what the right answer was either. Thus I asked a question and ran off for a few days. Happy to see you did all the research.",
      "parentUuid": "4cdc4d39_75487613",
      "revId": "6d412da3078467dff040a12f43f64ed61687b52e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}