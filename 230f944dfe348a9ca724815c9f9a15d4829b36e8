{
  "comments": [
    {
      "key": {
        "uuid": "b592e07f_2c8bf3a6",
        "filename": "third_party/WebKit/Source/platform/bindings/ScriptWrappableVisitor.h",
        "patchSetId": 3
      },
      "lineNbr": 221,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2018-01-17T14:35:54Z",
      "side": 1,
      "message": "What is Visit?\n\nWe already have Trace and Mark, so I\u0027m not sure if we want to introduce yet another concept.",
      "revId": "230f944dfe348a9ca724815c9f9a15d4829b36e8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "09f80d74_7283d35f",
        "filename": "third_party/WebKit/Source/platform/bindings/ScriptWrappableVisitor.h",
        "patchSetId": 3
      },
      "lineNbr": 221,
      "author": {
        "id": 1002405
      },
      "writtenOn": "2018-01-17T15:06:16Z",
      "side": 1,
      "message": "This is a more general version of the current Mark method. The name comes from the standard visitor design pattern. It is the method that derived visitors override to \"visit\" the object:\n- the marking visitor implements Visit to mark the object.\n- the heap snapshot visitor will implement Visit to record the object.\n- the verifying visitor will implement Visit object to verify the object.\n\nSubsequent CL will replace MarkAndTraceWrappers(traceable) with Visit(traceable), so the code becomes uniform:\n- Objects call non-virtual visitor.TraceWrappers(object.member) and visitor.TraceWrappers(object.v8ref).\n- visitor.TraceWrappers(x) forwards to virtual visitor.Visit(x).\n\nCustom visitors need to only override Visit methods to implement visiting logic.",
      "parentUuid": "b592e07f_2c8bf3a6",
      "revId": "230f944dfe348a9ca724815c9f9a15d4829b36e8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b38b1f13_49992c67",
        "filename": "third_party/WebKit/Source/platform/bindings/ScriptWrappableVisitor.h",
        "patchSetId": 3
      },
      "lineNbr": 221,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2018-01-17T15:29:05Z",
      "side": 1,
      "message": "Then how is it different from Trace?\n\nTrace is intended to be a general method to visit objects. What the Trace actually does is different depending on visitors (Mark, Record, Verify etc).\n\nMaybe the confusing part is that we also use \"Trace\" (or \"TraceWrappers\") for developer-facing APIs. If you really want to distinguish the developer-facing APIs from the visiting methods, you\u0027ll need to rename all visiting methods from \"Trace\" to \"Visit\" for consistency. (i.e., Oilpan\u0027s infrastructure uses Visit and Mark/Record/Verify. Developers use Trace/TraceWrappers.) (But I\u0027m not sure if it\u0027s worth an effort :-)",
      "parentUuid": "09f80d74_7283d35f",
      "revId": "230f944dfe348a9ca724815c9f9a15d4829b36e8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "789f7729_04c753ac",
        "filename": "third_party/WebKit/Source/platform/bindings/ScriptWrappableVisitor.h",
        "patchSetId": 3
      },
      "lineNbr": 221,
      "author": {
        "id": 1002405
      },
      "writtenOn": "2018-01-17T15:45:03Z",
      "side": 1,
      "message": "The intention is to keep TraceWrappers as developer-facing API and use Visit internally (that\u0027s why it is declared as protected).\n\nThe word \"trace\" is very ambiguous as it is also used to denote marking. For example: AdvanceTracing, AbortTracing. These methods will go to ScriptWrappableMarkingVisitor after the whole refactoring is done.\n\nThe general ScriptWrappableVisitor interface will have only \"TraceWrappers\" (developer-facing) and \"Visit\" (overridable by derived visitors) methods.\n\nIf I understood you correctly this should be similar to the Oilpan infra.",
      "parentUuid": "b38b1f13_49992c67",
      "revId": "230f944dfe348a9ca724815c9f9a15d4829b36e8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}