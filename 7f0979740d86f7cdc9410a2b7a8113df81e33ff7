{
  "comments": [
    {
      "key": {
        "uuid": "c7169b94_52de02fb",
        "filename": "base/trace_event/process_memory_dump.cc",
        "patchSetId": 1
      },
      "lineNbr": 428,
      "author": {
        "id": 1115913
      },
      "writtenOn": "2017-06-15T11:30:42Z",
      "side": 1,
      "message": "I started to think this change might be wrong and even the current SharedMemoryTracker::GetDumpGUIDForTracing might be wrong.\n\nNow Create(Weak)SharedGlobalAllocatorDump creates a shared global dump with a given id, and the dump has:\n  absolute name: \u0027global/(id)\u0027\n  guid:           id\n\nI was misunderstanding that the new shared global dump would have a new generated id but this was not true. The dump uses the given id as it is.\n\nBTW, a local shm dump created at SharedMemoryTracker has:\n  absolute name: \u0027shared_memory/...\u0027\n  guid:          MemoryAllocatorDumpGuid(\u0027(process_id)/(abosolute_name)\u0027)\n\nOn the other hand, the local shm dump guid at ProcessMemoryDump is \n  guid:          MemoryAllocatorDumpGuid(\u0027shared_memory/...\u0027)\n\nThus, the two guids should be same but actually not. I think we should fix SharedMemoryTracker::GetDumpGUIDForTracing, or am I missing something?",
      "revId": "7f0979740d86f7cdc9410a2b7a8113df81e33ff7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f101ba76_53e0d9eb",
        "filename": "base/trace_event/process_memory_dump.cc",
        "patchSetId": 1
      },
      "lineNbr": 428,
      "author": {
        "id": 1125359
      },
      "writtenOn": "2017-06-15T20:33:43Z",
      "side": 1,
      "message": "Yeah I never realized this is a bug in SharedMemoryTracker and we cannot use the same guid for both local dump and global dump. I agree that this is actually an issue with ProcessMemoryDump interface that creates global dumps. It should handle the hashing better to avoid such trivial collision. But at the moment I am not sure how the UI deals with this issue. If the UI actually expects that the global dumps to have the same guid as given then it could end up being a large change in memory-infra side.\n\nSo, I\u0027d go for the safe option of fixing the SharedMemoryTracker::GetGlobalDumpGUIDForTracing( to be different from the local dump guid.\nIt should be an easy fix:\nlocal dumps have \"shared_memory/ID\"\nglobal dumps have \"shared_memory_global/ID\".\n\nSharedMemoryTracker::GetDumpGUIDForTracing and GetGlobalDumpGUIDForTracing will return different unique GUIDs.\n\n\nAs far as the current CL, we should land this any way. This does not depend on the change i suggested above and this CL does the right thing.",
      "parentUuid": "c7169b94_52de02fb",
      "revId": "7f0979740d86f7cdc9410a2b7a8113df81e33ff7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0772eddd_f43d8ae1",
        "filename": "base/trace_event/process_memory_dump.cc",
        "patchSetId": 1
      },
      "lineNbr": 428,
      "author": {
        "id": 1115913
      },
      "writtenOn": "2017-06-16T04:54:37Z",
      "side": 1,
      "message": "Hmm, your suggestion will fix the cyclic ownership edges, but |local_shm_guid| is still wrong even after you change the global dump to be \u0027shared_memory_global/ID\u0027. I think we should fix |local_shm_guid| first. IIUC the root cause is wrong |local_shm_guid|, not wrong |global_shm_guid|.\n\nInstead of generating an ID from a string directly, should we get a GUID from a dump, like |GetOrCreateAllocatorDump(name)-\u003eguid()| for |local_shm_guid|?\n\nIn long term, it\u0027d be better if we could have a better API for dumps to avoid such this things.",
      "parentUuid": "f101ba76_53e0d9eb",
      "revId": "7f0979740d86f7cdc9410a2b7a8113df81e33ff7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}