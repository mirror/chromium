{
  "comments": [
    {
      "key": {
        "uuid": "1fb20816_6c7e2a9a",
        "filename": "chrome/renderer/resources/extensions/platform_keys/subtle_crypto.js",
        "patchSetId": 2
      },
      "lineNbr": 22,
      "author": {
        "id": 1001727
      },
      "writtenOn": "2017-08-09T23:59:50Z",
      "side": 1,
      "message": "lastError.clear?",
      "range": {
        "startLine": 22,
        "startChar": 39,
        "endLine": 22,
        "endChar": 48
      },
      "revId": "4f6fdceee4124a52ef5fe7bdeeb3bfc247e9582f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "632e5571_eedb5127",
        "filename": "chrome/renderer/resources/extensions/platform_keys/subtle_crypto.js",
        "patchSetId": 2
      },
      "lineNbr": 22,
      "author": {
        "id": 1115745
      },
      "writtenOn": "2017-08-10T01:31:25Z",
      "side": 1,
      "message": "Good catch; done.",
      "parentUuid": "1fb20816_6c7e2a9a",
      "range": {
        "startLine": 22,
        "startChar": 39,
        "endLine": 22,
        "endChar": 48
      },
      "revId": "4f6fdceee4124a52ef5fe7bdeeb3bfc247e9582f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "308799ad_64994926",
        "filename": "chrome/renderer/resources/extensions/platform_keys/subtle_crypto.js",
        "patchSetId": 2
      },
      "lineNbr": 57,
      "author": {
        "id": 1001727
      },
      "writtenOn": "2017-08-09T23:59:50Z",
      "side": 1,
      "message": "I find this pattern subtle enough that we should add some comment around it.\n\nNormally, clearLastError() should turn chrome.runtime.lastError to be undefined? so the next line is surprising.",
      "range": {
        "startLine": 57,
        "startChar": 4,
        "endLine": 57,
        "endChar": 18
      },
      "revId": "4f6fdceee4124a52ef5fe7bdeeb3bfc247e9582f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c24a50f3_859d6675",
        "filename": "chrome/renderer/resources/extensions/platform_keys/subtle_crypto.js",
        "patchSetId": 2
      },
      "lineNbr": 57,
      "author": {
        "id": 1115745
      },
      "writtenOn": "2017-08-10T01:31:25Z",
      "side": 1,
      "message": "Good call; inversed the order of these operations (apparently testing here is a bit lacking :/).  I also find it surprising that we reject with chrome.runtime.lastError (instead of chrome.runtime.lastError.message), but hard to say if that\u0027s intentional or if anyone is relying on that behavior now...",
      "parentUuid": "308799ad_64994926",
      "range": {
        "startLine": 57,
        "startChar": 4,
        "endLine": 57,
        "endChar": 18
      },
      "revId": "4f6fdceee4124a52ef5fe7bdeeb3bfc247e9582f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "90a6036d_d91ee8c7",
        "filename": "chrome/renderer/resources/extensions/platform_keys/subtle_crypto.js",
        "patchSetId": 2
      },
      "lineNbr": 101,
      "author": {
        "id": 1115745
      },
      "writtenOn": "2017-08-04T23:58:33Z",
      "side": 1,
      "message": "This one\u0027s a bit interesting.\n\nConceptually, this really should be clearing the error if it didn\u0027t care about it, but it\u0027s strange that it passes with JS-based bindings but not native bindings.  The reason it does is because the rejection from the promise (which runs a callback in the test that asserts there\u0027s no last error) is run asynchronously (as all promise resolves/rejects are), and so immediately after this callback is invoked, the lastError is cleared.  However, when run from native bindings, this callback here is invoked *and* the callback in the test (the rejection) is run before control returns to the C++ code.\n\nI\u0027m not sure if this is a big deal or not, or if we need to do more than just this here.  Any thoughts?  jbroman@, do you know why control stays in JS so long?",
      "revId": "4f6fdceee4124a52ef5fe7bdeeb3bfc247e9582f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f2c2a245_57b7e159",
        "filename": "chrome/renderer/resources/extensions/platform_keys/subtle_crypto.js",
        "patchSetId": 2
      },
      "lineNbr": 101,
      "author": {
        "id": 1002854
      },
      "writtenOn": "2017-08-08T22:14:11Z",
      "side": 1,
      "message": "Without looking deeply, I\u0027d guess it\u0027s where the microtask scope ends up with each bindings system.\n\nPromise resolution doesn\u0027t happen at the top of the event loop, but when the microtask scope finishes, and that\u0027s associated with when JS is entered/left.",
      "parentUuid": "90a6036d_d91ee8c7",
      "revId": "4f6fdceee4124a52ef5fe7bdeeb3bfc247e9582f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}