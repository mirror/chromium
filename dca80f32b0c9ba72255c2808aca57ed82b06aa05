{
  "comments": [
    {
      "key": {
        "uuid": "9b80eb3f_5298d0ac",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 7,
      "author": {
        "id": 1000111
      },
      "writtenOn": "2017-08-30T21:49:24Z",
      "side": 1,
      "message": "Update.",
      "revId": "dca80f32b0c9ba72255c2808aca57ed82b06aa05",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "150f3671_c182a15e",
        "filename": "ui/events/platform/key_event_filter.h",
        "patchSetId": 2
      },
      "lineNbr": 19,
      "author": {
        "id": 1000111
      },
      "writtenOn": "2017-08-30T21:49:24Z",
      "side": 1,
      "message": "Can this be:\n\n  virtual void OnKeyEvent(ui::KeyEvent* event) \u003d 0\n\nAnd the override is responsible for calling event-\u003eSetHandled() or event-\u003eStopPropagation() to mark the event as having been handled? That\u0027s how we currently do this for event dispatch.",
      "revId": "dca80f32b0c9ba72255c2808aca57ed82b06aa05",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a4acc637_3f37b410",
        "filename": "ui/events/platform/key_event_filter.h",
        "patchSetId": 2
      },
      "lineNbr": 19,
      "author": {
        "id": 1196069
      },
      "writtenOn": "2017-08-30T22:22:31Z",
      "side": 1,
      "message": "Done.\nBut to be clear, this ui::KeyEvent will never reach the regular input pipeline on Windows and Mac OSX, because of the design of low level keyboard proc on these two platforms.",
      "parentUuid": "150f3671_c182a15e",
      "revId": "dca80f32b0c9ba72255c2808aca57ed82b06aa05",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b84826e6_fc1fb446",
        "filename": "ui/events/platform/key_event_filter.h",
        "patchSetId": 2
      },
      "lineNbr": 19,
      "author": {
        "id": 1000111
      },
      "writtenOn": "2017-08-30T22:44:04Z",
      "side": 1,
      "message": "Can you explain why not? For Windows, we talked about the events going through DesktopWindowTreeHostWin, where the regular input events go through. Is that not what you have in mind?\n\nFor mac, I am thinking the entry point will be somewhere in RenderWidgetHostViewMac, which is the entry point for regular input events? But I am less familiar with mac (and I couldn\u0027t find mac-specific code in https://codereview.chromium.org/2879033002/, but I may have missed it).",
      "parentUuid": "a4acc637_3f37b410",
      "revId": "dca80f32b0c9ba72255c2808aca57ed82b06aa05",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "752f9cca_7430ea92",
        "filename": "ui/events/platform/key_event_filter.h",
        "patchSetId": 2
      },
      "lineNbr": 19,
      "author": {
        "id": 1196069
      },
      "writtenOn": "2017-08-30T23:48:54Z",
      "side": 1,
      "message": "On Windows and Mac OSX, this function is for the callback of native API. So if this function returns false (or event-\u003ehandled() \u003d\u003d false in the latest version), the regular input pipeline will be used on Windows and Mac OSX. OS will send the PlatformEvent back to the message loop, i.e. WinWindow on Windows and RenderWidgetHostViewMac on Mac OSX will receive the PlatformEvent again.\n\nThere is no implementation for Mac OSX in the prototype: it uses the same mechanism as Windows, so we do not need to prove it\u0027s workable on Mac OSX.",
      "parentUuid": "b84826e6_fc1fb446",
      "revId": "dca80f32b0c9ba72255c2808aca57ed82b06aa05",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}