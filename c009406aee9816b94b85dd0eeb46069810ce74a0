{
  "comments": [
    {
      "key": {
        "uuid": "644a68a5_8d700cb0",
        "filename": "content/browser/service_worker/service_worker_version.cc",
        "patchSetId": 4
      },
      "lineNbr": 1062,
      "author": {
        "id": 1000128
      },
      "writtenOn": "2017-12-11T05:33:29Z",
      "side": 1,
      "message": "The old code was sending an error IPC when there is no live registration.\n\nAlso, I think we\u0027d crash here if we don\u0027t invoke the registration.\n\nGetLiveRegistration() should not return null though. Since the service worker is running at the time it calls ClaimClients(), ServiceWorkerGlobalScope#registration should be keeping alive the LiveRegistration.  Was there some IPC/Mojo ordering bug before?\n\nHowever, I guess a compromised renderer can send a bad IPC message so we have to defend against it.\n\nServiceWorkerRegistration* registration \u003d\n          context_-\u003eGetLiveRegistration(registration_id_));\n// Registration must be kept alive by ServiceWorkerGlobalScope#registration.\nif (!registration) {\n  BadMessageReceived(\"bad\");\n  return;\n}\n\nregistration-\u003eClaimClients();\nstd::move(callback).Run(blink::mojom::ServiceWorkerErrorType::kNone,                            base::nullopt);\n\nIn the past when we\u0027ve written code like this, we get a lot of crash reports though. But I just don\u0027t see how it can be nullptr here...",
      "revId": "c009406aee9816b94b85dd0eeb46069810ce74a0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0a63d30c_9310f790",
        "filename": "content/browser/service_worker/service_worker_version.cc",
        "patchSetId": 4
      },
      "lineNbr": 1062,
      "author": {
        "id": 1223459
      },
      "writtenOn": "2017-12-12T01:16:14Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "644a68a5_8d700cb0",
      "revId": "c009406aee9816b94b85dd0eeb46069810ce74a0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a1dac33_5d08619d",
        "filename": "content/renderer/service_worker/service_worker_context_client.cc",
        "patchSetId": 4
      },
      "lineNbr": 395,
      "author": {
        "id": 1001472
      },
      "writtenOn": "2017-12-11T06:17:51Z",
      "side": 1,
      "message": "nit: only one owner -\u003e only owner",
      "revId": "c009406aee9816b94b85dd0eeb46069810ce74a0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5c34b11d_1146d129",
        "filename": "content/renderer/service_worker/service_worker_context_client.cc",
        "patchSetId": 4
      },
      "lineNbr": 395,
      "author": {
        "id": 1223459
      },
      "writtenOn": "2017-12-12T01:16:14Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "5a1dac33_5d08619d",
      "revId": "c009406aee9816b94b85dd0eeb46069810ce74a0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "86d7d490_f7dd9920",
        "filename": "content/renderer/service_worker/service_worker_context_client.cc",
        "patchSetId": 4
      },
      "lineNbr": 1263,
      "author": {
        "id": 1001472
      },
      "writtenOn": "2017-12-11T06:17:51Z",
      "side": 1,
      "message": "service_worker_host is ref-counted and in my understanding the internal interface is destructed on the IO thread, did we check how the callbacks are owned internally?",
      "revId": "c009406aee9816b94b85dd0eeb46069810ce74a0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c301089f_b99fcbc7",
        "filename": "content/renderer/service_worker/service_worker_context_client.cc",
        "patchSetId": 4
      },
      "lineNbr": 1263,
      "author": {
        "id": 1223459
      },
      "writtenOn": "2017-12-12T01:16:14Z",
      "side": 1,
      "message": "service_worker_host is scoped_refptr, but |this| is the only owner. And based on the implementation of ThreadSafeInterfacePtr, async calls are posted to the sequence that the InterfacePtr is bound to, and the responses are posted back, when the InterfacePtr encounters error or destroyes, it destroy the response callbacks directly on the binding thread and destroy them also on the caller thread, so I think it\u0027s safe to use base::Unretained(this). Does that make sense?",
      "parentUuid": "86d7d490_f7dd9920",
      "revId": "c009406aee9816b94b85dd0eeb46069810ce74a0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4c4be243_fdadec24",
        "filename": "content/renderer/service_worker/service_worker_context_client.cc",
        "patchSetId": 4
      },
      "lineNbr": 1263,
      "author": {
        "id": 1001472
      },
      "writtenOn": "2017-12-12T03:41:55Z",
      "side": 1,
      "message": "Thanks for the explanation, was unsure about how the destruction sequence works with ThreadSafeInterfacePtr but sounds like we\u0027re safe.\n\nnit: \u0027which is owned by |this|\u0027 -\u003e \u0027whose only owner is |this|\u0027 ?",
      "parentUuid": "c301089f_b99fcbc7",
      "revId": "c009406aee9816b94b85dd0eeb46069810ce74a0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "213d1fb4_ac9fb17e",
        "filename": "third_party/WebKit/common/service_worker/service_worker.mojom",
        "patchSetId": 4
      },
      "lineNbr": 32,
      "author": {
        "id": 1000128
      },
      "writtenOn": "2017-12-11T05:33:29Z",
      "side": 1,
      "message": "Don\u0027t think we need a line break here.",
      "revId": "c009406aee9816b94b85dd0eeb46069810ce74a0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}