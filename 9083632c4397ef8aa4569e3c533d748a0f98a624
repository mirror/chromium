{
  "comments": [
    {
      "key": {
        "uuid": "0bd2f7cb_26ddee6c",
        "filename": "chrome/browser/vr/elements/transient_element.cc",
        "patchSetId": 2
      },
      "lineNbr": 17,
      "author": {
        "id": 1117479
      },
      "writtenOn": "2017-09-15T20:10:08Z",
      "side": 1,
      "message": "I\u0027m wrestling with this a bit.  It\u0027s weird to me that this element should have to concern itself at all with animation.  I thought it would worry about desired opacity (is visible), and time.  Can\u0027t we just override SetVisible(), track the set value as a boolean in this class, and rely on the base class to handle animation?",
      "revId": "9083632c4397ef8aa4569e3c533d748a0f98a624",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1160e734_fcf15d1f",
        "filename": "chrome/browser/vr/elements/transient_element.cc",
        "patchSetId": 2
      },
      "lineNbr": 17,
      "author": {
        "id": 1000537
      },
      "writtenOn": "2017-09-15T20:12:10Z",
      "side": 1,
      "message": "Agree that the name is weird. I think it might make more sense to rename this OnBeginFrame and the base class happens to animate in it.",
      "parentUuid": "0bd2f7cb_26ddee6c",
      "revId": "9083632c4397ef8aa4569e3c533d748a0f98a624",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "44fcf524_7ac2cc73",
        "filename": "chrome/browser/vr/elements/transient_element.cc",
        "patchSetId": 2
      },
      "lineNbr": 17,
      "author": {
        "id": 1117479
      },
      "writtenOn": "2017-09-15T20:32:41Z",
      "side": 1,
      "message": "That would be much clearer.",
      "parentUuid": "1160e734_fcf15d1f",
      "revId": "9083632c4397ef8aa4569e3c533d748a0f98a624",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "15c1aa8e_f05b6394",
        "filename": "chrome/browser/vr/elements/transient_element.cc",
        "patchSetId": 2
      },
      "lineNbr": 20,
      "author": {
        "id": 1000537
      },
      "writtenOn": "2017-09-15T20:05:30Z",
      "side": 1,
      "message": "Rather than using will_be_visible_ and maintaining it, please add and use vr::AnimationPlayer::GetTargetFloatValue. Also, if you add the other \"Target\" methods for the other animated types while you\u0027re in there, you can close crbug.com/754822",
      "revId": "9083632c4397ef8aa4569e3c533d748a0f98a624",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "88f67cff_a89c9f08",
        "filename": "chrome/browser/vr/elements/transient_element.cc",
        "patchSetId": 2
      },
      "lineNbr": 20,
      "author": {
        "id": 1117479
      },
      "writtenOn": "2017-09-15T20:32:41Z",
      "side": 1,
      "message": "Heh, I had suggested losing all knowledge of animation.  To me, whether the thing is set to be visible or not is separate from whether it happens to be animating.  Personally I would have also used the extra flag or a variant of.  But, the \"flag\" could be done differently, like keeping the timestamp of the future timeout time.  If the timestamp is 0, we\u0027re not visible.  If it\u0027s non zero, we\u0027re visible.  If it\u0027s non-zero but less than the current time, we\u0027ve timed out, and should go invisible and zero the timestamp.  *handwaves*  Or something.",
      "parentUuid": "15c1aa8e_f05b6394",
      "revId": "9083632c4397ef8aa4569e3c533d748a0f98a624",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "589717e8_bce23a36",
        "filename": "chrome/browser/vr/elements/transient_element.cc",
        "patchSetId": 2
      },
      "lineNbr": 20,
      "author": {
        "id": 1144349
      },
      "writtenOn": "2017-09-15T20:44:30Z",
      "side": 1,
      "message": "Given that visibility is just a wrapper around opacity anyway, Ian\u0027s suggestion makes sense. I do agree that changing will_be_visible to something like visible_until representing the future timeout is a better way to do the \u0027flag\u0027.\n\nIan do you have a preference for using opacity over this?",
      "parentUuid": "88f67cff_a89c9f08",
      "revId": "9083632c4397ef8aa4569e3c533d748a0f98a624",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7bc26af2_bb36c66c",
        "filename": "chrome/browser/vr/elements/transient_element.cc",
        "patchSetId": 2
      },
      "lineNbr": 20,
      "author": {
        "id": 1000537
      },
      "writtenOn": "2017-09-15T21:22:50Z",
      "side": 1,
      "message": "What I\u0027d like to avoid is ad hoc workarounds to deal with the fact that you can\u0027t currently ask the question \"what value will a you have when your animation is done\". If that\u0027s not what the flag or timeout is doing, then this seems fine.\n\nIf we do want to ask this question (we do in other places in the vr code), my concrete suggestion is this\n * we add the AnimationPlayer methods, and\n * we add UiElement::GetTargetFoo methods that, internally, talk to the animation system.\n * update other code to talk to the GetTargetFoo methods and never the AnimationPlayer.\n\nThere is precedent for this: https://cs.chromium.org/chromium/src/ui/compositor/layer.h?rcl\u003ddb89c2a839aa591ed52093c71d6a05893c50765d\u0026l\u003d157",
      "parentUuid": "589717e8_bce23a36",
      "revId": "9083632c4397ef8aa4569e3c533d748a0f98a624",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d1d2531b_25a3cec5",
        "filename": "chrome/browser/vr/elements/transient_element.cc",
        "patchSetId": 2
      },
      "lineNbr": 20,
      "author": {
        "id": 1117479
      },
      "writtenOn": "2017-09-18T13:55:40Z",
      "side": 1,
      "message": "The flag pertains to the value after the transient timeout, rather than after animation.\n\nBut, this spawns a tangent that Yash shouldn\u0027t be gated by. :)  Maybe we can chat about this again.  I don\u0027t have a history with animation frameworks, but I feel like the state of animation should be invisible to everything except the rendering system.  In the case of a color, it feels like I\u0027d want to be able to \"set red, get red, set blue, get blue\", and have the getters return the target/final value even if the actual color hasn\u0027t yet reached that color.\n\nIn the example you linked, presumably Transform() yields the mid-animation \"current\" value, while GetTargetTransform() is what I suggested above.  My first instinct would have been to reverse them, such that Transform() is the post-animation steady-state version, and there\u0027s a GetCurrentTransform() or something to return the transient animating version.  Then you don\u0027t get weird things like:\n\nSetTranform(A)\nDCHECK(GetTransform() \u003d\u003d A)   \u003c---  Fails.  What the heck?!?",
      "parentUuid": "7bc26af2_bb36c66c",
      "revId": "9083632c4397ef8aa4569e3c533d748a0f98a624",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d95ed610_6081c115",
        "filename": "chrome/browser/vr/elements/transient_element.cc",
        "patchSetId": 2
      },
      "lineNbr": 23,
      "author": {
        "id": 1117479
      },
      "writtenOn": "2017-09-15T20:32:41Z",
      "side": 1,
      "message": "initialization",
      "range": {
        "startLine": 23,
        "startChar": 44,
        "endLine": 23,
        "endChar": 57
      },
      "revId": "9083632c4397ef8aa4569e3c533d748a0f98a624",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d75ef677_dcc1e143",
        "filename": "chrome/browser/vr/elements/transient_element.cc",
        "patchSetId": 2
      },
      "lineNbr": 42,
      "author": {
        "id": 1117479
      },
      "writtenOn": "2017-09-15T20:10:08Z",
      "side": 1,
      "message": "SetVisible() is already just a wrapper around opacity.  Since we\u0027re changing what it does here, why not just go at base\u0027s opacity, so you don\u0027t need to use the dangerous super:: approach?",
      "revId": "9083632c4397ef8aa4569e3c533d748a0f98a624",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "32798ffc_7acff6cc",
        "filename": "chrome/browser/vr/elements/transient_element.h",
        "patchSetId": 2
      },
      "lineNbr": 20,
      "author": {
        "id": 1117479
      },
      "writtenOn": "2017-09-15T20:10:08Z",
      "side": 1,
      "message": "- Need docs on both of these (the override and refresh).\n- LOL @ Kick -\u003e Refresh.  I\u0027ll bury my affinity to \"timer kicking\". :)",
      "revId": "9083632c4397ef8aa4569e3c533d748a0f98a624",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "336b786a_1618a1fc",
        "filename": "chrome/browser/vr/elements/transient_element.h",
        "patchSetId": 2
      },
      "lineNbr": 23,
      "author": {
        "id": 1117479
      },
      "writtenOn": "2017-09-15T20:10:08Z",
      "side": 1,
      "message": "Is this just saving characters?  What\u0027s the point?",
      "revId": "9083632c4397ef8aa4569e3c533d748a0f98a624",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "06e323c8_fb768b71",
        "filename": "chrome/browser/vr/elements/transient_element_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 18,
      "author": {
        "id": 1117479
      },
      "writtenOn": "2017-09-15T20:10:08Z",
      "side": 1,
      "message": "I don\u0027t think this is needed anymore (here and below).",
      "revId": "9083632c4397ef8aa4569e3c533d748a0f98a624",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "53b52068_c5146834",
        "filename": "chrome/browser/vr/elements/transient_element_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 36,
      "author": {
        "id": 1117479
      },
      "writtenOn": "2017-09-15T20:10:08Z",
      "side": 1,
      "message": "typo: refershing",
      "range": {
        "startLine": 36,
        "startChar": 13,
        "endLine": 36,
        "endChar": 23
      },
      "revId": "9083632c4397ef8aa4569e3c533d748a0f98a624",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e6cd4f01_9e1e8640",
        "filename": "chrome/browser/vr/elements/transient_element_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 48,
      "author": {
        "id": 1117479
      },
      "writtenOn": "2017-09-15T20:10:08Z",
      "side": 1,
      "message": "Suggestion: \"... that the element still transiently disappears, but at a later time.\"",
      "revId": "9083632c4397ef8aa4569e3c533d748a0f98a624",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "11dc5f91_7c329af8",
        "filename": "chrome/browser/vr/elements/ui_element.h",
        "patchSetId": 2
      },
      "lineNbr": 313,
      "author": {
        "id": 1117479
      },
      "writtenOn": "2017-09-15T20:10:08Z",
      "side": 1,
      "message": "You\u0027re right, this is a hack.  I think we want CanBeVisible() instead.  False by default in UiElement, overridden by TexturedElement and others.  Biao has a similar hack when polling the scene for viewport aware elements, and we could solve both issues.\n\nWhat we want is \"does the element implement Draw()\".  So maybe CanDraw()?",
      "revId": "9083632c4397ef8aa4569e3c533d748a0f98a624",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "add538b2_aa226872",
        "filename": "chrome/browser/vr/elements/ui_element.h",
        "patchSetId": 2
      },
      "lineNbr": 313,
      "author": {
        "id": 1000537
      },
      "writtenOn": "2017-09-15T20:15:06Z",
      "side": 1,
      "message": "I have wrestled with a number of options for solving this in my patch https://chromium-review.googlesource.com/c/chromium/src/+/658068\n\nI\u0027ve considered\n * an is-renderable or can-be-visible bit as you say\n * a variant of Render which takes an out parameter to which you can write error conditions (including not having a Render routine)\n * deriving from a Renderable class.\n\nI\u0027ve tried the last of the three.",
      "parentUuid": "11dc5f91_7c329af8",
      "revId": "9083632c4397ef8aa4569e3c533d748a0f98a624",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5b121eb5_3b11843c",
        "filename": "chrome/browser/vr/elements/ui_element.h",
        "patchSetId": 2
      },
      "lineNbr": 313,
      "author": {
        "id": 1144349
      },
      "writtenOn": "2017-09-15T20:44:30Z",
      "side": 1,
      "message": "I was hoping to just leverage what Ian had in mind, which is why I added this intermediate hack to not block this on his solution. It looks like his patch is ready, so perhaps it makes sense to depend this patch on that?",
      "parentUuid": "add538b2_aa226872",
      "revId": "9083632c4397ef8aa4569e3c533d748a0f98a624",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5ebfc25d_cf8ef080",
        "filename": "chrome/browser/vr/elements/ui_element.h",
        "patchSetId": 2
      },
      "lineNbr": 313,
      "author": {
        "id": 1117479
      },
      "writtenOn": "2017-09-15T20:48:31Z",
      "side": 1,
      "message": "Yep, cool.  I hadn\u0027t seen Ian\u0027s solution until now, and Ian explained off-line.  Sounds good.",
      "parentUuid": "5b121eb5_3b11843c",
      "revId": "9083632c4397ef8aa4569e3c533d748a0f98a624",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "71fa092e_2f0c088f",
        "filename": "chrome/browser/vr/ui_scene.cc",
        "patchSetId": 2
      },
      "lineNbr": 132,
      "author": {
        "id": 1117479
      },
      "writtenOn": "2017-09-15T20:10:08Z",
      "side": 1,
      "message": "See other comments.  I don\u0027t think we want to do this.\n\nThis probably runs deeper too.  Like, only a viewport aware root element should need the viewport_aware flag, and it\u0027s subtree should inherit the property.  So this search should be looking for \"are there any drawable elements that are children of a viewport aware element\".",
      "revId": "9083632c4397ef8aa4569e3c533d748a0f98a624",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "13363b04_8a9f02f0",
        "filename": "chrome/browser/vr/ui_scene_manager.h",
        "patchSetId": 2
      },
      "lineNbr": 8,
      "author": {
        "id": 1000537
      },
      "writtenOn": "2017-09-15T20:05:30Z",
      "side": 1,
      "message": "That\u0027s this for?",
      "revId": "9083632c4397ef8aa4569e3c533d748a0f98a624",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}