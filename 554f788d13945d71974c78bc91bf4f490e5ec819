{
  "comments": [
    {
      "key": {
        "uuid": "8eb0ca15_c283dfe9",
        "filename": "content/child/service_worker/controller_service_worker_connector.cc",
        "patchSetId": 11
      },
      "lineNbr": 42,
      "author": {
        "id": 1125915
      },
      "writtenOn": "2017-09-12T10:08:31Z",
      "side": 1,
      "message": "How will we implement the mechanism?\n\nI assume the case where the controller service worker goes down is that the worker is timed out, or the renderer is crashed somehow. We can handle crashes as errors, and we can just abort the fetch event. However, if the service worker is timed out, what\u0027s the appropriate way to handle?\nAlso, do we have any plans of how to implement the timeout feature?\n\nIf we can assume that the failure case is only the two which I mentioned, we might not need to have the error handler for |controller_service_worker_|.",
      "revId": "554f788d13945d71974c78bc91bf4f490e5ec819",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e9d428fb_7ceb06b2",
        "filename": "content/child/service_worker/controller_service_worker_connector.cc",
        "patchSetId": 11
      },
      "lineNbr": 42,
      "author": {
        "id": 1001472
      },
      "writtenOn": "2017-09-12T14:10:56Z",
      "side": 1,
      "message": "I\u0027m imagining a race case like: a resource loading has started about the same time as the service worker is killing itself after being idle for a while. I think in this case we should restart the service worker and resend the request to it?  We probably would need to be careful not to repeat this multiple times though if we get multiple connection errors in a row. For fetch timeout cases my current thinking is that the sender (i.e. the controllee) times it and asks the browser-process to kill it if it takes too long.",
      "parentUuid": "8eb0ca15_c283dfe9",
      "revId": "554f788d13945d71974c78bc91bf4f490e5ec819",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "37c41e72_52320a5b",
        "filename": "content/child/service_worker/controller_service_worker_connector.cc",
        "patchSetId": 11
      },
      "lineNbr": 42,
      "author": {
        "id": 1000128
      },
      "writtenOn": "2017-09-12T14:53:11Z",
      "side": 1,
      "message": "There are a couple meanings of \"timeout\". One is the idle timeout, one is the \"abusive/stuck sw\" timeout. The idle timeout will happen regularly (you have a tab open which is controlled by a SW and don\u0027t go back to it for a while) and isn\u0027t really a failure case.\n\nI think S13nServiceWorker will want a timeout mechanism in the renderer instead of having the browser process control everything, since browser process will no longer know everything. So yeah the design is TBD. The \"detailed design doc\" has a brief mention about this: the caller of ControllerServiceWorker is expected to implement their own timeout if they don\u0027t want to wait forever, but yeah we need an answer for how to stop the browser process from trying to stop the sw because it wrongly thinks it\u0027s idle.",
      "parentUuid": "8eb0ca15_c283dfe9",
      "revId": "554f788d13945d71974c78bc91bf4f490e5ec819",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c975c72d_19803e89",
        "filename": "content/child/service_worker/controller_service_worker_connector.cc",
        "patchSetId": 11
      },
      "lineNbr": 42,
      "author": {
        "id": 1000128
      },
      "writtenOn": "2017-09-12T14:58:02Z",
      "side": 1,
      "message": "(ah i wrote that before reading Kinuko\u0027s response so it\u0027s a bit redundant)",
      "parentUuid": "37c41e72_52320a5b",
      "revId": "554f788d13945d71974c78bc91bf4f490e5ec819",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d873c3f7_0713d60f",
        "filename": "content/child/service_worker/controller_service_worker_connector.cc",
        "patchSetId": 11
      },
      "lineNbr": 42,
      "author": {
        "id": 1125915
      },
      "writtenOn": "2017-09-13T01:13:03Z",
      "side": 1,
      "message": "Thanks a lot for detailed explanation! The race case sounds a bit scary and seems difficult to manage the restarting logic. It\u0027d be better to have an additional ping-pong IPC for the controller to tell the controllee that it\u0027s about to shutting down and wait for all of the reply. However, it also seems a bit unsafe because the controller cannot be shutted down if a bad controllee doesn\u0027t reply to it...\nAnyway, that\u0027s just my curious and I think this doesn\u0027t block this CL. We can work it on later.",
      "parentUuid": "c975c72d_19803e89",
      "revId": "554f788d13945d71974c78bc91bf4f490e5ec819",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d4e01621_8dd9f0a8",
        "filename": "content/child/service_worker/service_worker_provider_context.cc",
        "patchSetId": 11
      },
      "lineNbr": 180,
      "author": {
        "id": 1000128
      },
      "writtenOn": "2017-09-12T14:53:11Z",
      "side": 1,
      "message": "Hm, there is no guarantee that SWProviderContext outlives SWSubresourceLoaderFactory? Kinda seems overly complex that both SWProviderContext and SWSubresourceLaoder{,Factory} have to own ControllerSWConnector, but I guess we can\u0027t avoid it? Ah, yea, especially since LoaderFactory manages its own lifetime.",
      "revId": "554f788d13945d71974c78bc91bf4f490e5ec819",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8ee364c8_78e59677",
        "filename": "content/child/service_worker/service_worker_provider_context.cc",
        "patchSetId": 11
      },
      "lineNbr": 180,
      "author": {
        "id": 1001472
      },
      "writtenOn": "2017-09-13T05:38:17Z",
      "side": 1,
      "message": "Yeah we can\u0027t really guarantee the lifetime between these. (I\u0027m happy to cleanup this further whenever we find out better lifetime/ownership model)",
      "parentUuid": "d4e01621_8dd9f0a8",
      "revId": "554f788d13945d71974c78bc91bf4f490e5ec819",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "695ce623_389bf18b",
        "filename": "content/child/service_worker/service_worker_provider_context.cc",
        "patchSetId": 11
      },
      "lineNbr": 242,
      "author": {
        "id": 1000128
      },
      "writtenOn": "2017-09-12T14:53:11Z",
      "side": 1,
      "message": "(not about your patch, but seeing this makes me think OnNetworkProviderDestroyed() should be renamed to something like DestroyContainerHost(). Seems more direct to describe what the function does than when it\u0027s called.)",
      "revId": "554f788d13945d71974c78bc91bf4f490e5ec819",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b7fa46a6_b5c02326",
        "filename": "content/child/service_worker/service_worker_provider_context.cc",
        "patchSetId": 11
      },
      "lineNbr": 242,
      "author": {
        "id": 1001472
      },
      "writtenOn": "2017-09-13T05:38:17Z",
      "side": 1,
      "message": "Yep, +1.",
      "parentUuid": "695ce623_389bf18b",
      "revId": "554f788d13945d71974c78bc91bf4f490e5ec819",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4274c00c_25ab08dc",
        "filename": "content/common/service_worker/service_worker_container.mojom",
        "patchSetId": 11
      },
      "lineNbr": 56,
      "author": {
        "id": 1000128
      },
      "writtenOn": "2017-09-12T14:53:11Z",
      "side": 1,
      "message": "may start",
      "range": {
        "startLine": 56,
        "startChar": 69,
        "endLine": 56,
        "endChar": 75
      },
      "revId": "554f788d13945d71974c78bc91bf4f490e5ec819",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "540d55f0_d898e27b",
        "filename": "content/common/service_worker/service_worker_container.mojom",
        "patchSetId": 11
      },
      "lineNbr": 56,
      "author": {
        "id": 1001472
      },
      "writtenOn": "2017-09-13T05:38:17Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4274c00c_25ab08dc",
      "range": {
        "startLine": 56,
        "startChar": 69,
        "endLine": 56,
        "endChar": 75
      },
      "revId": "554f788d13945d71974c78bc91bf4f490e5ec819",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7db33bd7_1ab2485b",
        "filename": "content/common/service_worker/service_worker_container.mojom",
        "patchSetId": 11
      },
      "lineNbr": 63,
      "author": {
        "id": 1000128
      },
      "writtenOn": "2017-09-12T14:53:11Z",
      "side": 1,
      "message": "the \"should be\" made me think this was a TODO briefly. Maybe \"they should be\" -\u003e \"are\" or something like \"as the browser process is responsible for...\"",
      "revId": "554f788d13945d71974c78bc91bf4f490e5ec819",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2589126d_bac01fcb",
        "filename": "content/common/service_worker/service_worker_container.mojom",
        "patchSetId": 11
      },
      "lineNbr": 63,
      "author": {
        "id": 1001472
      },
      "writtenOn": "2017-09-13T05:38:17Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7db33bd7_1ab2485b",
      "revId": "554f788d13945d71974c78bc91bf4f490e5ec819",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6e822bee_f2b045d6",
        "filename": "content/common/service_worker/service_worker_fetch_response_callback.mojom",
        "patchSetId": 11
      },
      "lineNbr": 14,
      "author": {
        "id": 1000128
      },
      "writtenOn": "2017-09-12T14:53:11Z",
      "side": 1,
      "message": "service worker",
      "range": {
        "startLine": 14,
        "startChar": 53,
        "endLine": 14,
        "endChar": 67
      },
      "revId": "554f788d13945d71974c78bc91bf4f490e5ec819",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "73cabcac_d31b0e72",
        "filename": "content/common/service_worker/service_worker_fetch_response_callback.mojom",
        "patchSetId": 11
      },
      "lineNbr": 14,
      "author": {
        "id": 1001472
      },
      "writtenOn": "2017-09-13T05:38:17Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6e822bee_f2b045d6",
      "range": {
        "startLine": 14,
        "startChar": 53,
        "endLine": 14,
        "endChar": 67
      },
      "revId": "554f788d13945d71974c78bc91bf4f490e5ec819",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}