{
  "comments": [
    {
      "key": {
        "uuid": "505db04a_fe8c964e",
        "filename": "chrome/browser/history/history_browsertest.cc",
        "patchSetId": 11
      },
      "lineNbr": 491,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-11-01T22:45:13Z",
      "side": 1,
      "message": "sky@: The old expectation here seemed incorrect to me.  It matched Chrome\u0027s behavior for same-process client redirects due to the bug I mentioned in NavigationControllerImpl::RendererDidNavigate (line 864), but it doesn\u0027t match the intent of the client redirect code in HistoryBackend::AddPage:\n\nhttps://cs.chromium.org/chromium/src/components/history/core/browser/history_backend.cc?rcl\u003ddcffc143aeb27bfb9a7cf25909573c7f9cc43e88\u0026l\u003d539\n\nIndeed, chrome://history already lists only the landing URL for cross-process client redirects (e.g., to the Chrome Web Store), as the new test I added below shows in --site-per-process mode.  (That\u0027s true before the changes in this CL.)\n\nMy change makes the same-process client redirect behavior consistent with cross-process case, so that we don\u0027t show the redirecting URL in chrome://history for either case.  I\u0027ve verified manually that the omnibox autocomplete code isn\u0027t affected-- you can still type the redirector URL and have it autocomplete, even though it doesn\u0027t appear in chrome://history.\n\nDo you agree with the change?",
      "revId": "3fef5755753535ce28094d20c21ec3e80a6836af",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bb8dfe77_97433386",
        "filename": "chrome/browser/history/history_browsertest.cc",
        "patchSetId": 11
      },
      "lineNbr": 507,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-11-03T00:41:32Z",
      "side": 1,
      "message": "We\u0027ve got a \"DO NOT USE!\" comment on this in the public API. :)  Should this be GetVisibleURL?",
      "range": {
        "startLine": 507,
        "startChar": 66,
        "endLine": 507,
        "endChar": 75
      },
      "revId": "3fef5755753535ce28094d20c21ec3e80a6836af",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ad04e5e7_4e144fad",
        "filename": "chrome/browser/history/history_browsertest.cc",
        "patchSetId": 11
      },
      "lineNbr": 507,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-11-08T19:50:19Z",
      "side": 1,
      "message": "Heh, good point.  Fixed both this and the other calls in this file.",
      "parentUuid": "bb8dfe77_97433386",
      "range": {
        "startLine": 507,
        "startChar": 66,
        "endLine": 507,
        "endChar": 75
      },
      "revId": "3fef5755753535ce28094d20c21ec3e80a6836af",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "84edbcbe_52d820fd",
        "filename": "chrome/browser/translate/translate_browsertest.cc",
        "patchSetId": 11
      },
      "lineNbr": 294,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-11-01T22:45:13Z",
      "side": 1,
      "message": "toyoshim@: I\u0027m curious for your thoughts on this expectation change.\n\nAt first glance, it seems to be regressing https://crbug.com/236781, since the translate infobar now sticks around after a client redirect.  However, similar to the history case I mentioned to sky@, this is already broken today for cross-process client redirects (e.g., for a foreign page redirecting to the Chrome Web Store).\n\nThe behavior change is due to my fix in NavigationControllerImpl::RendererDidNavigate (line 864).  Before, we were incorrectly setting did_replace_entry to false for cross-document navigations, including same-process client redirects and location.replace.\n\nAfter pkasting@\u0027s work on on InfoBarDelegate::ShouldExpire in https://codereview.chromium.org/1142153002/ and https://codereview.chromium.org/1215053007, we have code that tries to keep infobars around if did_replace_entry is true (in contrast to what was expected for the translate infobar):\n\nhttps://cs.chromium.org/chromium/src/components/infobars/core/infobar_delegate.cc?type\u003dcs\u0026q\u003dinfobardelegate::shouldexpire\u0026l\u003d67\n\nIt seems that the motivation is that other types of infobars do want to stick around after a client redirect (e.g., the session crashed infobar).  I can see that the translate case is a bit different, but maybe there should be something custom within the translate code to make the infobar expire in that case?\n\n(I was planning to ask pkasting@ about this as well, but he\u0027s OOO for a while.)\n\nMy current change makes the same-process case consistent with the cross-process case, such that ShouldExpire always returns false when the navigation replaces the current entry.  That changes the expectation of these tests.  Should we proceed with that and fix infobars to dismiss on cross-document redirects separately, or is there a way to make them dismiss here in this CL?",
      "revId": "3fef5755753535ce28094d20c21ec3e80a6836af",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "29df7817_f4d87d9b",
        "filename": "chrome/browser/translate/translate_browsertest.cc",
        "patchSetId": 11
      },
      "lineNbr": 294,
      "author": {
        "id": 1002172
      },
      "writtenOn": "2017-11-06T14:11:07Z",
      "side": 1,
      "message": "Hum... code has been changed drastically after my fix for years, but let me try...\n\nYour suggestion to modify InfoBarDelegate to have a custom behavior for transalte sounds a right fix here. It\u0027s ok not to fix this issue in this CL. But I prefer to disable this with TODO and crbug link rather than changing the expectation.",
      "parentUuid": "84edbcbe_52d820fd",
      "revId": "3fef5755753535ce28094d20c21ec3e80a6836af",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5eba7465_214afe6f",
        "filename": "chrome/browser/translate/translate_browsertest.cc",
        "patchSetId": 11
      },
      "lineNbr": 294,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-11-08T19:50:19Z",
      "side": 1,
      "message": "Thanks-- I filed https://crbug.com/781879 to track this.  Given the discussion there (and that the bug already exists on Android), I\u0027ll plan to proceed with this test disabled for now.",
      "parentUuid": "29df7817_f4d87d9b",
      "revId": "3fef5755753535ce28094d20c21ec3e80a6836af",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1fff5551_f7305fa1",
        "filename": "chrome/browser/translate/translate_browsertest.cc",
        "patchSetId": 11
      },
      "lineNbr": 294,
      "author": {
        "id": 1002172
      },
      "writtenOn": "2017-11-09T06:49:17Z",
      "side": 1,
      "message": "agreed",
      "parentUuid": "5eba7465_214afe6f",
      "revId": "3fef5755753535ce28094d20c21ec3e80a6836af",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a17e246d_707498fa",
        "filename": "content/browser/frame_host/navigation_controller_impl_browsertest.cc",
        "patchSetId": 11
      },
      "lineNbr": 1009,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-11-03T00:41:32Z",
      "side": 1,
      "message": "Just curious - this isn\u0027t simulating a location.replace or client redirect, so why does it still end up changing the navigation type?  Because navigating to the same URL sets ReplacesCurrentHistoryItem(), so that also matches the new condition for setting did_create_new_entry?",
      "range": {
        "startLine": 1009,
        "startChar": 4,
        "endLine": 1009,
        "endChar": 40
      },
      "revId": "3fef5755753535ce28094d20c21ec3e80a6836af",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "daee535c_ca2ac641",
        "filename": "content/browser/frame_host/navigation_controller_impl_browsertest.cc",
        "patchSetId": 11
      },
      "lineNbr": 1009,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-11-08T19:50:19Z",
      "side": 1,
      "message": "\u003e Just curious - this isn\u0027t simulating a location.replace or client redirect, so why does it still end up changing the navigation type?  Because navigating to the same URL sets ReplacesCurrentHistoryItem(), so that also matches the new condition for setting did_create_new_entry?\n\nRight-- document_loader-\u003eReplacesCurrentHistoryItem() is true in this case.  I think it\u0027s probably ok to classify it as new with replacement.",
      "parentUuid": "a17e246d_707498fa",
      "range": {
        "startLine": 1009,
        "startChar": 4,
        "endLine": 1009,
        "endChar": 40
      },
      "revId": "3fef5755753535ce28094d20c21ec3e80a6836af",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "69f514db_641b5a91",
        "filename": "content/browser/frame_host/navigation_controller_impl_browsertest.cc",
        "patchSetId": 11
      },
      "lineNbr": 1277,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-11-01T22:45:13Z",
      "side": 1,
      "message": "Technically I could remove this block (since this test is about EXISTING_PAGE rather than NEW_PAGE), but I left it so that it didn\u0027t affect the session history progression in the test.",
      "revId": "3fef5755753535ce28094d20c21ec3e80a6836af",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "20f86e7b_174a327b",
        "filename": "content/browser/frame_host/navigation_controller_impl_browsertest.cc",
        "patchSetId": 11
      },
      "lineNbr": 1277,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-11-03T00:41:32Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "69f514db_641b5a91",
      "revId": "3fef5755753535ce28094d20c21ec3e80a6836af",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3d194969_38e159c9",
        "filename": "content/browser/frame_host/navigation_controller_impl_unittest.cc",
        "patchSetId": 11
      },
      "lineNbr": 2620,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-11-01T22:45:13Z",
      "side": 1,
      "message": "This is updated to more closely match what happens in practice.",
      "revId": "3fef5755753535ce28094d20c21ec3e80a6836af",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a2ff5e78_41fcf7b1",
        "filename": "content/browser/frame_host/navigation_controller_impl_unittest.cc",
        "patchSetId": 11
      },
      "lineNbr": 2742,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-11-01T22:45:13Z",
      "side": 1,
      "message": "I think this is what the test intended, given line 2756 and the test\u0027s name.",
      "revId": "3fef5755753535ce28094d20c21ec3e80a6836af",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "55a5f5f4_7e0fc740",
        "filename": "content/browser/frame_host/navigation_controller_impl_unittest.cc",
        "patchSetId": 11
      },
      "lineNbr": 2746,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-11-03T00:41:32Z",
      "side": 1,
      "message": "In the SendDidCommitProvisionalLoad params.did_create_new_entry assignment, the new case explicitly skips the was_within_same_document case (line 5145).  Since location.replace should be an inert commit, shouldn\u0027t did_create_new_entry be false here and in ClientRedirectAfterInPageNavigation on line 2796 below, to be consistent with what SendDidCommitProvisionalLoad would assign in this case?",
      "range": {
        "startLine": 2746,
        "startChar": 0,
        "endLine": 2746,
        "endChar": 37
      },
      "revId": "3fef5755753535ce28094d20c21ec3e80a6836af",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b1133408_f7fedc06",
        "filename": "content/browser/frame_host/navigation_controller_impl_unittest.cc",
        "patchSetId": 11
      },
      "lineNbr": 2746,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-11-08T19:50:19Z",
      "side": 1,
      "message": "\u003e In the SendDidCommitProvisionalLoad params.did_create_new_entry assignment, the new case explicitly skips the was_within_same_document case (line 5145).  Since location.replace should be an inert commit, shouldn\u0027t did_create_new_entry be false here and in ClientRedirectAfterInPageNavigation on line 2796 below, to be consistent with what SendDidCommitProvisionalLoad would assign in this case?\n\nYes, good point!  I\u0027d missed the same-document aspect of this.  (I was under the impression location.replace would always be cross-document.)  I\u0027ve added a browser test for this and confirmed it, so I\u0027ve put this value back.\n\nSame in ClientRedirectAfterInPageNavigation below.",
      "parentUuid": "55a5f5f4_7e0fc740",
      "range": {
        "startLine": 2746,
        "startChar": 0,
        "endLine": 2746,
        "endChar": 37
      },
      "revId": "3fef5755753535ce28094d20c21ec3e80a6836af",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5de1f5aa_96360cac",
        "filename": "content/renderer/render_frame_impl.cc",
        "patchSetId": 11
      },
      "lineNbr": 5136,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-11-03T00:41:32Z",
      "side": 1,
      "message": "Is it ok to not check that the commit is inert below?  I suppose this shouldn\u0027t ever affect the other commit types (kWebBackForwardCommit, kWebInitialCommitInChildFrame)?",
      "range": {
        "startLine": 5136,
        "startChar": 16,
        "endLine": 5136,
        "endChar": 23
      },
      "revId": "3fef5755753535ce28094d20c21ec3e80a6836af",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "af6f80af_f36eba1f",
        "filename": "content/renderer/render_frame_impl.cc",
        "patchSetId": 11
      },
      "lineNbr": 5136,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-11-08T19:50:19Z",
      "side": 1,
      "message": "\u003e Is it ok to not check that the commit is inert below?  I suppose this shouldn\u0027t ever affect the other commit types (kWebBackForwardCommit, kWebInitialCommitInChildFrame)?\n\nIt should be equivalent since back/forward and the initial child commit shouldn\u0027t set should_replace_current_entry, but you\u0027re right that it would be clearer if we added that condition as well.  Done.",
      "parentUuid": "5de1f5aa_96360cac",
      "range": {
        "startLine": 5136,
        "startChar": 16,
        "endLine": 5136,
        "endChar": 23
      },
      "revId": "3fef5755753535ce28094d20c21ec3e80a6836af",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e7b6a7de_be817d0e",
        "filename": "content/renderer/render_frame_impl.cc",
        "patchSetId": 11
      },
      "lineNbr": 5145,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-11-03T00:41:32Z",
      "side": 1,
      "message": "So this means that this won\u0027t apply to a location.replace(\"#foo\"), but we don\u0027t care about that case as it doesn\u0027t replace all subframes, right?",
      "range": {
        "startLine": 5145,
        "startChar": 7,
        "endLine": 5145,
        "endChar": 40
      },
      "revId": "3fef5755753535ce28094d20c21ec3e80a6836af",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c2b3ec93_4913851c",
        "filename": "content/renderer/render_frame_impl.cc",
        "patchSetId": 11
      },
      "lineNbr": 5145,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-11-08T19:50:19Z",
      "side": 1,
      "message": "\u003e So this means that this won\u0027t apply to a location.replace(\"#foo\"), but we don\u0027t care about that case as it doesn\u0027t replace all subframes, right?\n\nHa, I didn\u0027t think that would be same-document, but it is!  Still, we do the right thing-- we want it to be considered EXISTING_PAGE since we\u0027re on the same document (preserving SiteInstance, subframes, etc).  I\u0027ve added a test for it.",
      "parentUuid": "e7b6a7de_be817d0e",
      "range": {
        "startLine": 5145,
        "startChar": 7,
        "endLine": 5145,
        "endChar": 40
      },
      "revId": "3fef5755753535ce28094d20c21ec3e80a6836af",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}