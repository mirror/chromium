{
  "comments": [
    {
      "key": {
        "uuid": "95bf49e9_1440cbc9",
        "filename": "components/cronet/ios/test/cronet_performance_test.mm",
        "patchSetId": 21
      },
      "lineNbr": 83,
      "author": {
        "id": 1143554
      },
      "writtenOn": "2017-10-27T16:57:21Z",
      "side": 1,
      "message": "Should we also print whether the test succeeded or not? If we are planning to track the results in the future, I wonder whether it will help us to ignore failed runs since they may produce skewed data.",
      "revId": "7560a379d74f4f3ad77d8aad4afd831f46731af8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "458766e3_a9d56ced",
        "filename": "components/cronet/ios/test/cronet_performance_test.mm",
        "patchSetId": 21
      },
      "lineNbr": 83,
      "author": {
        "id": 1230519
      },
      "writtenOn": "2017-10-27T17:49:33Z",
      "side": 1,
      "message": "The test themselves will print if they\u0027ve failed or succeeded, so I think it will be hard to ignore.\n\nIs it possible for |TearDownTestCase| to access the results of the test, or will we have to keep track of that ourselves?",
      "parentUuid": "95bf49e9_1440cbc9",
      "revId": "7560a379d74f4f3ad77d8aad4afd831f46731af8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1385e311_8f92b9b8",
        "filename": "components/cronet/ios/test/cronet_performance_test.mm",
        "patchSetId": 21
      },
      "lineNbr": 85,
      "author": {
        "id": 1143554
      },
      "writtenOn": "2017-10-27T16:57:21Z",
      "side": 1,
      "message": "Could you add the total number of requests? The number of failed requests make sense in comparison with the total number of requests.",
      "revId": "7560a379d74f4f3ad77d8aad4afd831f46731af8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fe921fb3_bbb90acd",
        "filename": "components/cronet/ios/test/cronet_performance_test.mm",
        "patchSetId": 21
      },
      "lineNbr": 85,
      "author": {
        "id": 1230519
      },
      "writtenOn": "2017-10-27T17:49:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1385e311_8f92b9b8",
      "revId": "7560a379d74f4f3ad77d8aad4afd831f46731af8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a93df4f1_eaf650d4",
        "filename": "components/cronet/ios/test/cronet_performance_test.mm",
        "patchSetId": 21
      },
      "lineNbr": 88,
      "author": {
        "id": 1143554
      },
      "writtenOn": "2017-10-27T16:57:21Z",
      "side": 1,
      "message": "We should check that |entry.second.total| is not 0 to avoid possible devision by 0. That is the case when all requests failed.",
      "range": {
        "startLine": 88,
        "startChar": 56,
        "endLine": 88,
        "endChar": 74
      },
      "revId": "7560a379d74f4f3ad77d8aad4afd831f46731af8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b8f1febc_7ac5b999",
        "filename": "components/cronet/ios/test/cronet_performance_test.mm",
        "patchSetId": 21
      },
      "lineNbr": 88,
      "author": {
        "id": 1230519
      },
      "writtenOn": "2017-10-27T17:49:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a93df4f1_eaf650d4",
      "range": {
        "startLine": 88,
        "startChar": 56,
        "endLine": 88,
        "endChar": 74
      },
      "revId": "7560a379d74f4f3ad77d8aad4afd831f46731af8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d05e0d8b_f9de1124",
        "filename": "components/cronet/ios/test/cronet_performance_test.mm",
        "patchSetId": 21
      },
      "lineNbr": 143,
      "author": {
        "id": 1143554
      },
      "writtenOn": "2017-10-27T16:57:21Z",
      "side": 1,
      "message": "We should add the following line before the if statement:\nconfig.requestCachePolicy \u003d NSURLRequestReloadIgnoringLocalCacheData;\notherwise, the responses may be cached in memory. My understanding is that ephemeralSessionConfiguration is not going to persist any cache on disk but can still cache data in memory.",
      "revId": "7560a379d74f4f3ad77d8aad4afd831f46731af8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c05dc80d_a8c18ecf",
        "filename": "components/cronet/ios/test/cronet_performance_test.mm",
        "patchSetId": 21
      },
      "lineNbr": 143,
      "author": {
        "id": 1230519
      },
      "writtenOn": "2017-10-27T17:49:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d05e0d8b_f9de1124",
      "revId": "7560a379d74f4f3ad77d8aad4afd831f46731af8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c7453377_1fc0ae24",
        "filename": "components/cronet/ios/test/cronet_performance_test.mm",
        "patchSetId": 21
      },
      "lineNbr": 189,
      "author": {
        "id": 1143554
      },
      "writtenOn": "2017-10-27T16:57:21Z",
      "side": 1,
      "message": "Do we need to call it? I assume that this is a brand new delegate that wasn\u0027t used before.",
      "range": {
        "startLine": 189,
        "startChar": 2,
        "endLine": 189,
        "endChar": 20
      },
      "revId": "7560a379d74f4f3ad77d8aad4afd831f46731af8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a715bf63_e58a392d",
        "filename": "components/cronet/ios/test/cronet_performance_test.mm",
        "patchSetId": 21
      },
      "lineNbr": 189,
      "author": {
        "id": 1230519
      },
      "writtenOn": "2017-10-27T17:49:33Z",
      "side": 1,
      "message": "I\u0027m not sure how true that is, but I think |reset| is necessary for initialization anyway?",
      "parentUuid": "c7453377_1fc0ae24",
      "range": {
        "startLine": 189,
        "startChar": 2,
        "endLine": 189,
        "endChar": 20
      },
      "revId": "7560a379d74f4f3ad77d8aad4afd831f46731af8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "00b7bdcc_3be3de3c",
        "filename": "components/cronet/ios/test/cronet_performance_test.mm",
        "patchSetId": 21
      },
      "lineNbr": 189,
      "author": {
        "id": 1143554
      },
      "writtenOn": "2017-10-27T21:31:18Z",
      "side": 1,
      "message": "We should be able to use a newly created delegate immediately without explicitly reseting it.",
      "parentUuid": "a715bf63_e58a392d",
      "range": {
        "startLine": 189,
        "startChar": 2,
        "endLine": 189,
        "endChar": 20
      },
      "revId": "7560a379d74f4f3ad77d8aad4afd831f46731af8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eca098a7_42e33d90",
        "filename": "components/cronet/ios/test/cronet_performance_test.mm",
        "patchSetId": 21
      },
      "lineNbr": 189,
      "author": {
        "id": 1179923
      },
      "writtenOn": "2017-10-27T21:51:42Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "00b7bdcc_3be3de3c",
      "range": {
        "startLine": 189,
        "startChar": 2,
        "endLine": 189,
        "endChar": 20
      },
      "revId": "7560a379d74f4f3ad77d8aad4afd831f46731af8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7bf47cf0_5f67d447",
        "filename": "components/cronet/ios/test/cronet_performance_test.mm",
        "patchSetId": 21
      },
      "lineNbr": 213,
      "author": {
        "id": 1143554
      },
      "writtenOn": "2017-10-27T16:57:21Z",
      "side": 1,
      "message": "There is possibility that the first request can fail. Should we print the length of the first successful response?",
      "range": {
        "startLine": 213,
        "startChar": 4,
        "endLine": 213,
        "endChar": 34
      },
      "revId": "7560a379d74f4f3ad77d8aad4afd831f46731af8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "89a352cb_cdfb20ed",
        "filename": "components/cronet/ios/test/cronet_performance_test.mm",
        "patchSetId": 21
      },
      "lineNbr": 213,
      "author": {
        "id": 1230519
      },
      "writtenOn": "2017-10-27T17:49:33Z",
      "side": 1,
      "message": "Sure; done.",
      "parentUuid": "7bf47cf0_5f67d447",
      "range": {
        "startLine": 213,
        "startChar": 4,
        "endLine": 213,
        "endChar": 34
      },
      "revId": "7560a379d74f4f3ad77d8aad4afd831f46731af8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7bbccb5f_70067504",
        "filename": "components/cronet/ios/test/cronet_performance_test.mm",
        "patchSetId": 21
      },
      "lineNbr": 234,
      "author": {
        "id": 1143554
      },
      "writtenOn": "2017-10-27T16:57:21Z",
      "side": 1,
      "message": "nit: Can we write it as\nelapsed_max \u003d MAX(elapsed, elapsed_max)?",
      "range": {
        "startLine": 233,
        "startChar": 0,
        "endLine": 234,
        "endChar": 30
      },
      "revId": "7560a379d74f4f3ad77d8aad4afd831f46731af8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "efe99d33_e6774ffd",
        "filename": "components/cronet/ios/test/cronet_performance_test.mm",
        "patchSetId": 21
      },
      "lineNbr": 234,
      "author": {
        "id": 1230519
      },
      "writtenOn": "2017-10-27T17:49:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7bbccb5f_70067504",
      "range": {
        "startLine": 233,
        "startChar": 0,
        "endLine": 234,
        "endChar": 30
      },
      "revId": "7560a379d74f4f3ad77d8aad4afd831f46731af8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4fa65c3c_1f34958f",
        "filename": "components/cronet/ios/test/cronet_test_base.h",
        "patchSetId": 21
      },
      "lineNbr": 34,
      "author": {
        "id": 1143554
      },
      "writtenOn": "2017-10-27T16:57:21Z",
      "side": 1,
      "message": "Can we add generics to specify the types in the dictionary, e.g. NSMutableDictionary\u003cNSURLSessionTask*, NSError*\u003e?\n\nSame for all new properties.",
      "range": {
        "startLine": 34,
        "startChar": 26,
        "endLine": 34,
        "endChar": 46
      },
      "revId": "7560a379d74f4f3ad77d8aad4afd831f46731af8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0b54aa1c_1305124c",
        "filename": "components/cronet/ios/test/cronet_test_base.h",
        "patchSetId": 21
      },
      "lineNbr": 34,
      "author": {
        "id": 1230519
      },
      "writtenOn": "2017-10-27T17:49:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4fa65c3c_1f34958f",
      "range": {
        "startLine": 34,
        "startChar": 26,
        "endLine": 34,
        "endChar": 46
      },
      "revId": "7560a379d74f4f3ad77d8aad4afd831f46731af8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4dcfc30a_5e3b5cfe",
        "filename": "components/cronet/ios/test/cronet_test_base.mm",
        "patchSetId": 21
      },
      "lineNbr": 29,
      "author": {
        "id": 1143554
      },
      "writtenOn": "2017-10-27T16:57:21Z",
      "side": 1,
      "message": "Is it used somewhere?",
      "range": {
        "startLine": 29,
        "startChar": 2,
        "endLine": 29,
        "endChar": 30
      },
      "revId": "7560a379d74f4f3ad77d8aad4afd831f46731af8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8819ae3b_5102d7e6",
        "filename": "components/cronet/ios/test/cronet_test_base.mm",
        "patchSetId": 21
      },
      "lineNbr": 29,
      "author": {
        "id": 1230519
      },
      "writtenOn": "2017-10-27T17:49:33Z",
      "side": 1,
      "message": "Nope",
      "parentUuid": "4dcfc30a_5e3b5cfe",
      "range": {
        "startLine": 29,
        "startChar": 2,
        "endLine": 29,
        "endChar": 30
      },
      "revId": "7560a379d74f4f3ad77d8aad4afd831f46731af8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1f610e69_3a4cdc4f",
        "filename": "components/cronet/ios/test/cronet_test_base.mm",
        "patchSetId": 21
      },
      "lineNbr": 98,
      "author": {
        "id": 1143554
      },
      "writtenOn": "2017-10-27T16:57:21Z",
      "side": 1,
      "message": "Maybe we should rename |deadline_ns| to |timeout_ns| for consistency with the method signature.",
      "range": {
        "startLine": 98,
        "startChar": 8,
        "endLine": 98,
        "endChar": 40
      },
      "revId": "7560a379d74f4f3ad77d8aad4afd831f46731af8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2661c29d_0f240295",
        "filename": "components/cronet/ios/test/cronet_test_base.mm",
        "patchSetId": 21
      },
      "lineNbr": 98,
      "author": {
        "id": 1230519
      },
      "writtenOn": "2017-10-27T17:49:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1f610e69_3a4cdc4f",
      "range": {
        "startLine": 98,
        "startChar": 8,
        "endLine": 98,
        "endChar": 40
      },
      "revId": "7560a379d74f4f3ad77d8aad4afd831f46731af8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b677ab5a_3ddb1c2b",
        "filename": "components/cronet/ios/test/cronet_test_base.mm",
        "patchSetId": 21
      },
      "lineNbr": 101,
      "author": {
        "id": 1143554
      },
      "writtenOn": "2017-10-27T16:57:21Z",
      "side": 1,
      "message": "Can there be a concurrency issue (deadlock) if we create the semaphore inside \"waitForDone\"? Imagine someone started a request and the request completed before waitForDone is called. In that scenario, the semaphore in never going to be signaled.",
      "range": {
        "startLine": 99,
        "startChar": 0,
        "endLine": 101,
        "endChar": 3
      },
      "revId": "7560a379d74f4f3ad77d8aad4afd831f46731af8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "51e7d325_2adab4e2",
        "filename": "components/cronet/ios/test/cronet_test_base.mm",
        "patchSetId": 21
      },
      "lineNbr": 101,
      "author": {
        "id": 1230519
      },
      "writtenOn": "2017-10-27T17:49:33Z",
      "side": 1,
      "message": "The semaphore is only created if it doesn\u0027t already exist.  If someone creates a request, even it completes before waitForDone is called, the semaphore will still exist in the _semaphores dictionary, and so waitForDone will wait on that instead of creating a new one.",
      "parentUuid": "b677ab5a_3ddb1c2b",
      "range": {
        "startLine": 99,
        "startChar": 0,
        "endLine": 101,
        "endChar": 3
      },
      "revId": "7560a379d74f4f3ad77d8aad4afd831f46731af8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "99ee6be1_21dd7d5e",
        "filename": "components/cronet/ios/test/cronet_test_base.mm",
        "patchSetId": 21
      },
      "lineNbr": 101,
      "author": {
        "id": 1143554
      },
      "writtenOn": "2017-10-27T21:31:18Z",
      "side": 1,
      "message": "I am still not convinced that there is no issue. First, |_semaphores| dictionary is manipulated on multiple threads without synchronization, which can lead to corrupted data by itself. Second, since waitForDone: and URLSession:task:didCompleteWithError: are executed on different threads, it can happen that the methods simultaneously create and reference their own instances of semaphore. As the result, the semaphore referenced by waitForDone: is never going to be signaled.",
      "parentUuid": "51e7d325_2adab4e2",
      "range": {
        "startLine": 99,
        "startChar": 0,
        "endLine": 101,
        "endChar": 3
      },
      "revId": "7560a379d74f4f3ad77d8aad4afd831f46731af8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8be24e72_022d1689",
        "filename": "components/cronet/ios/test/cronet_test_base.mm",
        "patchSetId": 21
      },
      "lineNbr": 101,
      "author": {
        "id": 1179923
      },
      "writtenOn": "2017-10-27T21:51:42Z",
      "side": 1,
      "message": "Ah, I see now, thanks.  What do you think the best way to deal with this is?",
      "parentUuid": "99ee6be1_21dd7d5e",
      "range": {
        "startLine": 99,
        "startChar": 0,
        "endLine": 101,
        "endChar": 3
      },
      "revId": "7560a379d74f4f3ad77d8aad4afd831f46731af8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9f8c7d0b_edc49b43",
        "filename": "components/cronet/ios/test/cronet_test_base.mm",
        "patchSetId": 21
      },
      "lineNbr": 124,
      "author": {
        "id": 1143554
      },
      "writtenOn": "2017-10-27T16:57:21Z",
      "side": 1,
      "message": "I suggest we create a new semaphore before we resume (start) the corresponding task.",
      "range": {
        "startLine": 122,
        "startChar": 0,
        "endLine": 124,
        "endChar": 3
      },
      "revId": "7560a379d74f4f3ad77d8aad4afd831f46731af8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3a56999b_4e375c8e",
        "filename": "components/cronet/ios/test/cronet_test_base.mm",
        "patchSetId": 21
      },
      "lineNbr": 124,
      "author": {
        "id": 1230519
      },
      "writtenOn": "2017-10-27T17:49:33Z",
      "side": 1,
      "message": "I think that\u0027s what the line above is doing, unless I misunderstand.  Whichever of waitForDone oor didCompleteWithError gets called first creates a semaphore associated with a specific task; and the other then waits on that.\n\nUnless we can guarantee that they are called in a specific order, I don\u0027t think there\u0027s any other way to do it.",
      "parentUuid": "9f8c7d0b_edc49b43",
      "range": {
        "startLine": 122,
        "startChar": 0,
        "endLine": 124,
        "endChar": 3
      },
      "revId": "7560a379d74f4f3ad77d8aad4afd831f46731af8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}