{
  "comments": [
    {
      "key": {
        "uuid": "e7134048_a74c4da0",
        "filename": "components/cronet/ios/cronet_environment.mm",
        "patchSetId": 5
      },
      "lineNbr": 232,
      "author": {
        "id": 1143554
      },
      "writtenOn": "2017-08-14T22:17:28Z",
      "side": 1,
      "message": "Since there are multiple I/O threads (e.g. network_thread, file_user_blocking_thread, network_cache_thread), could we rename GetIOThreadTaskRunner() to GetNetworkIOThreadTaskRunner() to make it more descriptive?",
      "revId": "c2616a5a0f7a83f3b6310bce5dd35596885d47ac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6e887bd9_e0c2c41b",
        "filename": "components/cronet/ios/ios_global_state_configuration.cc",
        "patchSetId": 5
      },
      "lineNbr": 9,
      "author": {
        "id": 1123009
      },
      "writtenOn": "2017-08-14T20:36:56Z",
      "side": 1,
      "message": "nit: This could be a static local variable instead.",
      "range": {
        "startLine": 9,
        "startChar": 18,
        "endLine": 9,
        "endChar": 51
      },
      "revId": "c2616a5a0f7a83f3b6310bce5dd35596885d47ac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f14babc9_4ac429bf",
        "filename": "components/cronet/ios/ios_global_state_configuration.cc",
        "patchSetId": 5
      },
      "lineNbr": 9,
      "author": {
        "id": 1143554
      },
      "writtenOn": "2017-08-14T22:17:28Z",
      "side": 1,
      "message": "Theoretically, we should be able to create multiple Cronet Engines with different configurations. Will having g_cronet_configuration global prohibit it?\n\nAlso, in our tests we shutdown one Cronet engine and start another one that includes creating a new network thread. There should be a way to do it with this change.",
      "revId": "c2616a5a0f7a83f3b6310bce5dd35596885d47ac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3aa0c6c3_97641f11",
        "filename": "components/cronet/ios/ios_global_state_configuration.cc",
        "patchSetId": 5
      },
      "lineNbr": 16,
      "author": {
        "id": 1143554
      },
      "writtenOn": "2017-08-14T22:17:28Z",
      "side": 1,
      "message": "Can we return the Thread object instead of SingleThreadTaskRunner? In some cases, we may need to access the thread object directly instead of the task runner. E.g., a thread has useful method Stop() that signals the thread to stop and blocks until all tasks are done. I am not sure what is the best way to achieve it having the reference to the task runner only.",
      "revId": "c2616a5a0f7a83f3b6310bce5dd35596885d47ac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9bc617d6_4ec16fd8",
        "filename": "components/cronet/ios/ios_global_state_cronet_configuration.cc",
        "patchSetId": 5
      },
      "lineNbr": 1,
      "author": {
        "id": 1143554
      },
      "writtenOn": "2017-08-14T22:17:28Z",
      "side": 1,
      "message": "Is there any disadvantage in moving all logic from here to ios_global_state_configuration.cc and get rid of this and ios_global_state_cronet_configuration.h files?â–¼",
      "revId": "c2616a5a0f7a83f3b6310bce5dd35596885d47ac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "42bab2a5_bf44c8ef",
        "filename": "components/cronet/ios/ios_global_state_cronet_configuration.cc",
        "patchSetId": 5
      },
      "lineNbr": 10,
      "author": {
        "id": 1123009
      },
      "writtenOn": "2017-08-14T20:36:56Z",
      "side": 1,
      "message": "nit: base::MakeUnique?",
      "range": {
        "startLine": 10,
        "startChar": 29,
        "endLine": 10,
        "endChar": 33
      },
      "revId": "c2616a5a0f7a83f3b6310bce5dd35596885d47ac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fe6fa1ab_ae312960",
        "filename": "ios/web_view/internal/chrome_web_view.mm",
        "patchSetId": 5
      },
      "lineNbr": 15,
      "author": {
        "id": 1123009
      },
      "writtenOn": "2017-08-14T20:36:56Z",
      "side": 1,
      "message": "nit:\nnamespace {\nNSString* gUserAgentProduct \u003d nil;\n}",
      "range": {
        "startLine": 15,
        "startChar": 17,
        "endLine": 15,
        "endChar": 34
      },
      "revId": "c2616a5a0f7a83f3b6310bce5dd35596885d47ac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "827c8d62_7ea5baf1",
        "filename": "ios/web_view/public/chrome_web_view.h",
        "patchSetId": 5
      },
      "lineNbr": 14,
      "author": {
        "id": 1123009
      },
      "writtenOn": "2017-08-14T20:36:56Z",
      "side": 1,
      "message": "This is a significant change which makes API pretty inconvenient. Did we have a discussion where we considered all alternative solution and concluded that we absolutely must have this code? If no, then I would suggest to start with design doc.\n\nDid we consider calling Initialize inside +initialize of CWVWebView, CVWConfiguration, Cronet classes?",
      "range": {
        "startLine": 14,
        "startChar": 35,
        "endLine": 14,
        "endChar": 0
      },
      "revId": "c2616a5a0f7a83f3b6310bce5dd35596885d47ac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}