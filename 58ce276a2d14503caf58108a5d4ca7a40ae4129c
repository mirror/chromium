{
  "comments": [
    {
      "key": {
        "uuid": "30493e5a_0277143c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 9
      },
      "lineNbr": 14,
      "author": {
        "id": 1002871
      },
      "writtenOn": "2017-07-27T14:58:33Z",
      "side": 1,
      "message": "can you plz clarify that this is 1-2 ms in total per process, not per OnMemoryDump call?",
      "range": {
        "startLine": 14,
        "startChar": 44,
        "endLine": 14,
        "endChar": 71
      },
      "revId": "58ce276a2d14503caf58108a5d4ca7a40ae4129c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d14d75fd_62092966",
        "filename": "/COMMIT_MSG",
        "patchSetId": 9
      },
      "lineNbr": 14,
      "author": {
        "id": 1115913
      },
      "writtenOn": "2017-07-28T05:20:05Z",
      "side": 1,
      "message": "Done (it\u0027s not per process. This adds 1-2[ms] in total per whole (three) processes.)",
      "parentUuid": "30493e5a_0277143c",
      "range": {
        "startLine": 14,
        "startChar": 44,
        "endLine": 14,
        "endChar": 71
      },
      "revId": "58ce276a2d14503caf58108a5d4ca7a40ae4129c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "10e46b55_5a1cf503",
        "filename": "base/memory/shared_memory_tracker.cc",
        "patchSetId": 9
      },
      "lineNbr": 70,
      "author": {
        "id": 1125359
      },
      "writtenOn": "2017-07-26T20:11:41Z",
      "side": 1,
      "message": "It\u0027d would be nice if only the browser process does this expensive operation and adds the size. But it\u0027s fine for now.",
      "range": {
        "startLine": 70,
        "startChar": 23,
        "endLine": 70,
        "endChar": 74
      },
      "revId": "58ce276a2d14503caf58108a5d4ca7a40ae4129c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ebe68744_3be07fec",
        "filename": "base/memory/shared_memory_tracker.cc",
        "patchSetId": 9
      },
      "lineNbr": 70,
      "author": {
        "id": 1115913
      },
      "writtenOn": "2017-07-27T05:52:12Z",
      "side": 1,
      "message": "I don\u0027t think it is feasible. Actually most of SharedMemory objects are in browser process whichever they are mmap-ed or not, but we\u0027d need to mmap all SharedMemory to get resident size.",
      "parentUuid": "10e46b55_5a1cf503",
      "range": {
        "startLine": 70,
        "startChar": 23,
        "endLine": 70,
        "endChar": 74
      },
      "revId": "58ce276a2d14503caf58108a5d4ca7a40ae4129c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1187c0a9_6465e6b8",
        "filename": "base/memory/shared_memory_tracker.cc",
        "patchSetId": 9
      },
      "lineNbr": 87,
      "author": {
        "id": 1002871
      },
      "writtenOn": "2017-07-27T14:58:33Z",
      "side": 1,
      "message": "not sure if that is easily possible but would be nice if, in the case when COUNT_RESIDENT_BYTES_SUPPORTED is defined, we also emit a \"virtual_size\" column, mostly to double check the results in the trace. \nI know that other columns won\u0027t be propagate across edges, but I think that is fine, it wuold at least show up in the shared_memory column right?",
      "range": {
        "startLine": 87,
        "startChar": 16,
        "endLine": 87,
        "endChar": 25
      },
      "revId": "58ce276a2d14503caf58108a5d4ca7a40ae4129c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0ecaf66f_859a1690",
        "filename": "base/memory/shared_memory_tracker.cc",
        "patchSetId": 9
      },
      "lineNbr": 87,
      "author": {
        "id": 1115913
      },
      "writtenOn": "2017-07-28T05:20:05Z",
      "side": 1,
      "message": "Hmm, sorry but not sure what the \u0027virtual_size\u0027 is. Are you talking about DiscardableSharedMemoryHeap?",
      "parentUuid": "1187c0a9_6465e6b8",
      "range": {
        "startLine": 87,
        "startChar": 16,
        "endLine": 87,
        "endChar": 25
      },
      "revId": "58ce276a2d14503caf58108a5d4ca7a40ae4129c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "078badf1_78eddacf",
        "filename": "base/memory/shared_memory_tracker.cc",
        "patchSetId": 9
      },
      "lineNbr": 87,
      "author": {
        "id": 1002871
      },
      "writtenOn": "2017-07-28T09:27:34Z",
      "side": 1,
      "message": "No I meant: the number that we know here right now (before this CL that uses CountResidentBytes) is the virtual size right (or am I misunderstanding)? In essence the size passed as argument to mmap(). What I was suggesting is that we could keep that as a side FYI column (even if it doesn\u0027t back-propagate to owners). Does it make sense (even if it does, maybe do in a separate CL?)",
      "parentUuid": "0ecaf66f_859a1690",
      "range": {
        "startLine": 87,
        "startChar": 16,
        "endLine": 87,
        "endChar": 25
      },
      "revId": "58ce276a2d14503caf58108a5d4ca7a40ae4129c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ece37921_94865e92",
        "filename": "base/memory/shared_memory_tracker.cc",
        "patchSetId": 9
      },
      "lineNbr": 88,
      "author": {
        "id": 1125359
      },
      "writtenOn": "2017-07-26T20:11:41Z",
      "side": 1,
      "message": "Now, if the resident size is less than the allocated size, and the dump providers report a size that they allocated instead of the resident size, we will have an error in UI saying the owner of this dump is smaller in size.",
      "range": {
        "startLine": 88,
        "startChar": 73,
        "endLine": 88,
        "endChar": 77
      },
      "revId": "58ce276a2d14503caf58108a5d4ca7a40ae4129c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "37496058_a3aacf35",
        "filename": "base/memory/shared_memory_tracker.cc",
        "patchSetId": 9
      },
      "lineNbr": 88,
      "author": {
        "id": 1115913
      },
      "writtenOn": "2017-07-27T05:52:12Z",
      "side": 1,
      "message": "Hmm, so is this a kind of TODO? I\u0027m still not sure what to do about the issue.",
      "parentUuid": "ece37921_94865e92",
      "range": {
        "startLine": 88,
        "startChar": 73,
        "endLine": 88,
        "endChar": 77
      },
      "revId": "58ce276a2d14503caf58108a5d4ca7a40ae4129c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "985e1f9e_110c8f22",
        "filename": "base/memory/shared_memory_tracker.cc",
        "patchSetId": 9
      },
      "lineNbr": 88,
      "author": {
        "id": 1002871
      },
      "writtenOn": "2017-07-27T14:58:33Z",
      "side": 1,
      "message": "I think we just have to file bugs and try to fix them if that happens. IIRC (ssid to confirm) we back-propagate a zero effective-size in the case that ssid mentioned (as in: you can\u0027t declare more memory than what it\u0027s actually reported by the owned dump).\nAt the end we are after actual (resident) memory usage, so this seems sort of WAI. ssid do you agree?",
      "parentUuid": "37496058_a3aacf35",
      "range": {
        "startLine": 88,
        "startChar": 73,
        "endLine": 88,
        "endChar": 77
      },
      "revId": "58ce276a2d14503caf58108a5d4ca7a40ae4129c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0823b3a3_7a6314fb",
        "filename": "base/memory/shared_memory_tracker.cc",
        "patchSetId": 9
      },
      "lineNbr": 88,
      "author": {
        "id": 1125359
      },
      "writtenOn": "2017-07-28T01:21:37Z",
      "side": 1,
      "message": "I think it works the other way: if the size here is 0 here and the other dumps have a size, we make the shared_memory dump size as the size of the largest owner, with an error message \"the size of the dump is less than the largest owner\". But yes, lets deal with it when we actulally see it. Hoping it won\u0027t happen.",
      "parentUuid": "985e1f9e_110c8f22",
      "range": {
        "startLine": 88,
        "startChar": 73,
        "endLine": 88,
        "endChar": 77
      },
      "revId": "58ce276a2d14503caf58108a5d4ca7a40ae4129c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "efce82cc_1e3ec25d",
        "filename": "base/memory/shared_memory_tracker.cc",
        "patchSetId": 9
      },
      "lineNbr": 88,
      "author": {
        "id": 1115913
      },
      "writtenOn": "2017-07-28T05:20:05Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "0823b3a3_7a6314fb",
      "range": {
        "startLine": 88,
        "startChar": 73,
        "endLine": 88,
        "endChar": 77
      },
      "revId": "58ce276a2d14503caf58108a5d4ca7a40ae4129c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}