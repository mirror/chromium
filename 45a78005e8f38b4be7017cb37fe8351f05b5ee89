{
  "comments": [
    {
      "key": {
        "uuid": "9fc2e842_d0ae7215",
        "filename": "chrome/browser/vr/transition.cc",
        "patchSetId": 3
      },
      "lineNbr": 10,
      "author": {
        "id": 1117479
      },
      "writtenOn": "2017-07-18T21:35:55Z",
      "side": 1,
      "message": "nit (that I\u0027m not confident of, but personally prefer): style guide says to treat acronyms like words (eg. Url, Ms, Http, etc).  But Chrome often doesn\u0027t.",
      "range": {
        "startLine": 10,
        "startChar": 21,
        "endLine": 10,
        "endChar": 49
      },
      "revId": "45a78005e8f38b4be7017cb37fe8351f05b5ee89",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e291c7b8_4ff40e68",
        "filename": "chrome/browser/vr/ui_scene_manager.cc",
        "patchSetId": 3
      },
      "lineNbr": 274,
      "author": {
        "id": 1117479
      },
      "writtenOn": "2017-07-18T21:35:55Z",
      "side": 1,
      "message": "Since we\u0027re shooting for sugar, what about these wrappers that just configure the animation_player under the hood:\n\nelement-\u003eset_transitions(cc::TargetProperty::TRANSFORM | cc::TargetProperty::OPACITY);\nor\nelement-\u003eset_transitions({cc::TargetProperty::TRANSFORM, cc::TargetProperty::OPACITY});",
      "revId": "45a78005e8f38b4be7017cb37fe8351f05b5ee89",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d78dcf08_f70dd2fd",
        "filename": "chrome/browser/vr/ui_scene_manager.cc",
        "patchSetId": 3
      },
      "lineNbr": 275,
      "author": {
        "id": 1117479
      },
      "writtenOn": "2017-07-18T21:35:55Z",
      "side": 1,
      "message": "Can we do a \"using cc\" to shorten the defines?  Might not work due to enums?",
      "revId": "45a78005e8f38b4be7017cb37fe8351f05b5ee89",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e8e1b154_7d912a35",
        "filename": "chrome/browser/vr/ui_scene_manager_unittest.cc",
        "patchSetId": 3
      },
      "lineNbr": 281,
      "author": {
        "id": 1117479
      },
      "writtenOn": "2017-07-18T21:35:55Z",
      "side": 1,
      "message": "This is really drilling deep.  What about any of:\n\ncontent_quad-\u003eIsAnimating()     or\nNewIsAnimatingHelper(content_quad)   or\njust check that the element moved after a period of time?",
      "revId": "45a78005e8f38b4be7017cb37fe8351f05b5ee89",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c68c7f10_ccac62a5",
        "filename": "chrome/browser/vr/ui_scene_manager_unittest.cc",
        "patchSetId": 3
      },
      "lineNbr": 284,
      "author": {
        "id": 1117479
      },
      "writtenOn": "2017-07-18T21:35:55Z",
      "side": 1,
      "message": "I\u0027ve been working on getting our \"Let x seconds elapse\" tool working.  I think we should try to make this look more like that.  As the animation players aren\u0027t timer based, what about something like:\n\nscene-\u003eFastForwardSceneBy(1000000);\n\nIe, a handy wrapper that will let all animations tick ahead and finish, without having to poke an individual element?  As is, it feels like your test is manually enacting a change, then checking to make sure the change happened.",
      "revId": "45a78005e8f38b4be7017cb37fe8351f05b5ee89",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6a6fca7b_715d0a45",
        "filename": "chrome/browser/vr/ui_scene_manager_unittest.cc",
        "patchSetId": 3
      },
      "lineNbr": 296,
      "author": {
        "id": 1117479
      },
      "writtenOn": "2017-07-18T21:35:55Z",
      "side": 1,
      "message": "Could save the original position earlier in the test, fast forward time, and make sure we go back to that spot?",
      "range": {
        "startLine": 296,
        "startChar": 1,
        "endLine": 296,
        "endChar": 2
      },
      "revId": "45a78005e8f38b4be7017cb37fe8351f05b5ee89",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}