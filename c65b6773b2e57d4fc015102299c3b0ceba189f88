{
  "comments": [
    {
      "key": {
        "uuid": "def8cad6_b54f5c9b",
        "filename": "third_party/WebKit/Source/web/tests/WebFrameTest.cpp",
        "patchSetId": 4
      },
      "lineNbr": 7843,
      "author": {
        "id": 1116039
      },
      "writtenOn": "2017-06-08T00:13:59Z",
      "side": 1,
      "message": "PLC::ScrollLayer is RLS aware.  Why is it null here?",
      "range": {
        "startLine": 7843,
        "startChar": 28,
        "endLine": 7843,
        "endChar": 29
      },
      "revId": "c65b6773b2e57d4fc015102299c3b0ceba189f88",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "208233e5_1906e885",
        "filename": "third_party/WebKit/Source/web/tests/WebFrameTest.cpp",
        "patchSetId": 4
      },
      "lineNbr": 7843,
      "author": {
        "id": 1001706
      },
      "writtenOn": "2017-06-13T23:58:55Z",
      "side": 1,
      "message": "Because there\u0027s no overflow, so the LayoutView\u0027s CLM has no scrolling contents layer.",
      "parentUuid": "def8cad6_b54f5c9b",
      "range": {
        "startLine": 7843,
        "startChar": 28,
        "endLine": 7843,
        "endChar": 29
      },
      "revId": "c65b6773b2e57d4fc015102299c3b0ceba189f88",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "89f809a7_8e900267",
        "filename": "third_party/WebKit/Source/web/tests/WebFrameTest.cpp",
        "patchSetId": 4
      },
      "lineNbr": 7843,
      "author": {
        "id": 1116039
      },
      "writtenOn": "2017-06-14T01:36:36Z",
      "side": 1,
      "message": "The intent of this test case is to verify that changing the body\u0027s overflow style from \u0027hidden\u0027 to \u0027auto\u0027 changes the values of WebLayer::UserScrollable{Horizontal,Vertical}.\n\nIf there\u0027s no overflow, that seems like a bug - the #a element has height: 1000px and the WebView is sized to 100 x 100.",
      "parentUuid": "208233e5_1906e885",
      "range": {
        "startLine": 7843,
        "startChar": 28,
        "endLine": 7843,
        "endChar": 29
      },
      "revId": "c65b6773b2e57d4fc015102299c3b0ceba189f88",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fbf64a85_9e6576cf",
        "filename": "third_party/WebKit/Source/web/tests/WebFrameTest.cpp",
        "patchSetId": 4
      },
      "lineNbr": 11898,
      "author": {
        "id": 1116039
      },
      "writtenOn": "2017-06-08T00:13:59Z",
      "side": 1,
      "message": "This doesn\u0027t sound right to me... can you point me to where WebLayer is aware of scroll origin?",
      "range": {
        "startLine": 11898,
        "startChar": 21,
        "endLine": 11898,
        "endChar": 29
      },
      "revId": "c65b6773b2e57d4fc015102299c3b0ceba189f88",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d183d791_f877210c",
        "filename": "third_party/WebKit/Source/web/tests/WebFrameTest.cpp",
        "patchSetId": 4
      },
      "lineNbr": 11898,
      "author": {
        "id": 1001706
      },
      "writtenOn": "2017-06-13T23:58:55Z",
      "side": 1,
      "message": "https://cs.chromium.org/chromium/src/third_party/WebKit/Source/core/layout/compositing/CompositedLayerMapping.cpp?rcl\u003d061d80fa409b0723b83c0c96661c550761021e1d\u0026l\u003d1473\n\nScrollableArea::ScrollPosition() includes ScrollOrigin",
      "parentUuid": "fbf64a85_9e6576cf",
      "range": {
        "startLine": 11898,
        "startChar": 21,
        "endLine": 11898,
        "endChar": 29
      },
      "revId": "c65b6773b2e57d4fc015102299c3b0ceba189f88",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6bf666f8_0e48cdbc",
        "filename": "third_party/WebKit/Source/web/tests/WebFrameTest.cpp",
        "patchSetId": 4
      },
      "lineNbr": 11898,
      "author": {
        "id": 1116039
      },
      "writtenOn": "2017-06-14T01:36:36Z",
      "side": 1,
      "message": "So it is not the WebLayer that adds the scroll offset, but the caller of WebLayer::SetScrollPosition.  That makes more sense.\n\nBut my point remains: since nothing below WebLayer knows about scroll origins, it doesn\u0027t seem possible for the scroll position of the layout viewport\u0027s LayerForScrolling() to have different values depending on RLS.  So I am suspicious of these if (RLS) ... expectations.",
      "parentUuid": "d183d791_f877210c",
      "range": {
        "startLine": 11898,
        "startChar": 21,
        "endLine": 11898,
        "endChar": 29
      },
      "revId": "c65b6773b2e57d4fc015102299c3b0ceba189f88",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "52293cfe_cc5eb59d",
        "filename": "third_party/WebKit/Source/web/tests/WebFrameTest.cpp",
        "patchSetId": 4
      },
      "lineNbr": 11898,
      "author": {
        "id": 1116039
      },
      "writtenOn": "2017-06-24T00:10:33Z",
      "side": 1,
      "message": "Brain-dumping my thoughts after today\u0027s discussion:\n\n- cc::Layer::Inputs has two different fields: position and scroll_offset\n\n- both are exposed to blink via WebLayer:\n- GetPosition() / SetPosition() \u003c\u003d\u003d\u003e cc::Layer::Inputs::position\n- ScrollPosition() / SetScrollPosition() \u003c\u003d\u003d\u003e cc::Layer::Inputs::scroll_offset\n\n- in addition there is GraphicsLayer::position_, this should be in sync with cc::Layer::Inputs::position (assuming no one is doing WebLayer::SetPosition behind the GraphicsLayer\u0027s back)\n\n- one can imagine two possible strategies for scroll origin:\n\n- (A) Propagate scroll origin into cc::Layer::Inputs::position, let cc::Layer::Inputs::scroll_offset be the offset relative to the scroll origin.  In this case scroll_offset really is the \"scroll offset\" as we have defined it in core/layout/README.md, and the WebLayer methods should be renamed (s/ScrollPosition/ScrollOffset/).\n\n- (B) Let the scroll layer\u0027s cc::Layer::Inputs::position be (0, 0), and include the scroll origin in the value stored in cc::Layer::Inputs::scroll_offset.  In this case scroll_offset is actually \"scroll position\" and should be renamed as per the TODO in ui/gfx/geometry/scroll_offset.h.\n\n- it looks like PLC::FrameViewDidScroll is using strategy (A) but CLM::UpdateScrollingLayerGeometry is using strategy (B)?\n\n- I don\u0027t know which strategy is better.  I don\u0027t care which we use as long as CLM treats root layer the same as non-root layers.\n\n- It would be good to assert as much as possible in the test - i.e. check both WebLayer::GetPosition() and WebLayer::ScrollPosition().  And maybe GraphicsLayer::GetPosition() too just for fun.",
      "parentUuid": "6bf666f8_0e48cdbc",
      "range": {
        "startLine": 11898,
        "startChar": 21,
        "endLine": 11898,
        "endChar": 29
      },
      "revId": "c65b6773b2e57d4fc015102299c3b0ceba189f88",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "11fef704_b96f6f45",
        "filename": "third_party/WebKit/Source/web/tests/WebFrameTest.cpp",
        "patchSetId": 4
      },
      "lineNbr": 11898,
      "author": {
        "id": 1116039
      },
      "writtenOn": "2017-06-27T18:28:12Z",
      "side": 1,
      "message": "It now occurs to me that cc needs to do bounds clamping, and it assumes the minimum scroll_offset is (0, 0) in ScrollTree::ClampScrollOffsetToLimits.  That makes me think we have to use strategy (A) origin in position.  But how does it work today if CLM uses (B)?  I\u0027m missing something.",
      "parentUuid": "52293cfe_cc5eb59d",
      "range": {
        "startLine": 11898,
        "startChar": 21,
        "endLine": 11898,
        "endChar": 29
      },
      "revId": "c65b6773b2e57d4fc015102299c3b0ceba189f88",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}