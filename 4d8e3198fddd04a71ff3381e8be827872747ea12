{
  "comments": [
    {
      "key": {
        "uuid": "2c5ff9ad_a8d769b0",
        "filename": "chrome/browser/autocomplete/chrome_autocomplete_provider_client.cc",
        "patchSetId": 6
      },
      "lineNbr": 231,
      "author": {
        "id": 1001310
      },
      "writtenOn": "2018-01-24T20:44:06Z",
      "side": 1,
      "message": "What happens if we turn on contextual suggestions for Android and forget to update this?  What are the consequences?",
      "revId": "4d8e3198fddd04a71ff3381e8be827872747ea12",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ce8e2e09_c1d96c84",
        "filename": "chrome/browser/autocomplete/chrome_autocomplete_provider_client.cc",
        "patchSetId": 6
      },
      "lineNbr": 231,
      "author": {
        "id": 1183604
      },
      "writtenOn": "2018-01-24T21:33:31Z",
      "side": 1,
      "message": "If we decide to use contextual suggestions for mobile services, then the timestamp will always be 0, which will be used by the the server-side service to ignore the logging process. If we decide to provide contextual suggestions for mobile users and we want to do logging for that usage, then we would need to change this code.",
      "parentUuid": "2c5ff9ad_a8d769b0",
      "revId": "4d8e3198fddd04a71ff3381e8be827872747ea12",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "40211470_ae99c79c",
        "filename": "chrome/browser/autocomplete/chrome_autocomplete_provider_client.cc",
        "patchSetId": 6
      },
      "lineNbr": 231,
      "author": {
        "id": 1001310
      },
      "writtenOn": "2018-01-24T23:06:43Z",
      "side": 1,
      "message": "Nice to know the behavior is sane. (Logging is disabled.)",
      "parentUuid": "ce8e2e09_c1d96c84",
      "revId": "4d8e3198fddd04a71ff3381e8be827872747ea12",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "49e5a0b2_d4de5701",
        "filename": "components/omnibox/browser/autocomplete_provider_client.h",
        "patchSetId": 6
      },
      "lineNbr": 95,
      "author": {
        "id": 1001310
      },
      "writtenOn": "2018-01-24T20:44:06Z",
      "side": 1,
      "message": "nit: typo",
      "range": {
        "startLine": 95,
        "startChar": 9,
        "endLine": 95,
        "endChar": 18
      },
      "revId": "4d8e3198fddd04a71ff3381e8be827872747ea12",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a8a569cf_1d70c394",
        "filename": "components/omnibox/browser/autocomplete_provider_client.h",
        "patchSetId": 6
      },
      "lineNbr": 95,
      "author": {
        "id": 1183604
      },
      "writtenOn": "2018-01-24T21:33:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "49e5a0b2_d4de5701",
      "range": {
        "startLine": 95,
        "startChar": 9,
        "endLine": 95,
        "endChar": 18
      },
      "revId": "4d8e3198fddd04a71ff3381e8be827872747ea12",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "645ed636_f7988011",
        "filename": "components/omnibox/browser/contextual_suggestions_service.cc",
        "patchSetId": 6
      },
      "lineNbr": 77,
      "author": {
        "id": 1001310
      },
      "writtenOn": "2018-01-24T20:44:06Z",
      "side": 1,
      "message": "Are you sure you want to append something to the request if visit_time is null?\n(What does the code below do when it is null?)",
      "revId": "4d8e3198fddd04a71ff3381e8be827872747ea12",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b676629a_0f3b638a",
        "filename": "components/omnibox/browser/contextual_suggestions_service.cc",
        "patchSetId": 6
      },
      "lineNbr": 77,
      "author": {
        "id": 1183604
      },
      "writtenOn": "2018-01-24T21:33:31Z",
      "side": 1,
      "message": "I assume that by \"null\" you mean \"base::Time()\". If |visit_time| is base::Time(), then the computation below results in 0, which can be used by our service to distinguish requests that come from clients which were not set up to send the timestamp from requests that send a 0 timestamp (e.g. the call comes from an Android/test client which did not provide the timestamp by design).",
      "parentUuid": "645ed636_f7988011",
      "revId": "4d8e3198fddd04a71ff3381e8be827872747ea12",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2db07c25_282f234e",
        "filename": "components/omnibox/browser/contextual_suggestions_service.cc",
        "patchSetId": 6
      },
      "lineNbr": 79,
      "author": {
        "id": 1001310
      },
      "writtenOn": "2018-01-24T20:44:06Z",
      "side": 1,
      "message": "I know you\u0027re sending this to pair with sync data.  Does this calculation actually correspond with what sync is doing?",
      "range": {
        "startLine": 79,
        "startChar": 21,
        "endLine": 79,
        "endChar": 75
      },
      "revId": "4d8e3198fddd04a71ff3381e8be827872747ea12",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6182ceb3_3805ccd9",
        "filename": "components/omnibox/browser/contextual_suggestions_service.cc",
        "patchSetId": 6
      },
      "lineNbr": 79,
      "author": {
        "id": 1183604
      },
      "writtenOn": "2018-01-24T21:33:31Z",
      "side": 1,
      "message": "Note that this number can be easily converted to an actual Date object, which is independent of the way that ChromeSync is maintaining the time for corresponding navigations. Please let me know if you still see any concern.",
      "parentUuid": "2db07c25_282f234e",
      "range": {
        "startLine": 79,
        "startChar": 21,
        "endLine": 79,
        "endChar": 75
      },
      "revId": "4d8e3198fddd04a71ff3381e8be827872747ea12",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b09df6ac_74c615ea",
        "filename": "components/omnibox/browser/contextual_suggestions_service.cc",
        "patchSetId": 6
      },
      "lineNbr": 79,
      "author": {
        "id": 1001310
      },
      "writtenOn": "2018-01-24T23:06:43Z",
      "side": 1,
      "message": "I don\u0027t know if ChromeSync uses timestamps relative to windows epoch.  If it uses a different relative value, then there\u0027s no way to convert between a timestamp like this with one of theirs.  That\u0027s why I ask.\n\nI\u0027m also slightly concerned that the user\u0027s clock may change between the navigation and the omnibox request (e.g., for those computers that sync their clocks from a server periodically, and correct any error they see), and then you\u0027ll be sending a different time.  This minor corrections could prevent matching, as if you\u0027re sending times in microseconds, any revision, no matter how small, will produce a different result.",
      "parentUuid": "6182ceb3_3805ccd9",
      "range": {
        "startLine": 79,
        "startChar": 21,
        "endLine": 79,
        "endChar": 75
      },
      "revId": "4d8e3198fddd04a71ff3381e8be827872747ea12",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7d75c9d5_51f307b0",
        "filename": "components/omnibox/browser/contextual_suggestions_service.cc",
        "patchSetId": 6
      },
      "lineNbr": 79,
      "author": {
        "id": 1183604
      },
      "writtenOn": "2018-01-25T18:16:57Z",
      "side": 1,
      "message": "WRT to your first comment, I checked with the ChromeSync team (cc-ed you on the thread) to confirm that they are using timestamps relative to Windows epoch. See https://cs.chromium.org/chromium/src/components/sync/protocol/user_event_specifics.proto?l\u003d18.\n\nWRT to your second concern, you make a good point. If the minor corrections are in the order of milliseconds, then we can account for this by making sure that the \"timestamp\" equality is not too rigid. For example, for a request to remove from Chrome history a navigation to http://www.url1.com/, made at time t, then the contextual suggestion service can remove all logs corresponding to http://www.url1.com/ made at time t plus/minus a few seconds. What do you think?",
      "parentUuid": "b09df6ac_74c615ea",
      "range": {
        "startLine": 79,
        "startChar": 21,
        "endLine": 79,
        "endChar": 75
      },
      "revId": "4d8e3198fddd04a71ff3381e8be827872747ea12",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9b9e8e5f_64d7fdf8",
        "filename": "components/omnibox/browser/contextual_suggestions_service.cc",
        "patchSetId": 6
      },
      "lineNbr": 79,
      "author": {
        "id": 1001310
      },
      "writtenOn": "2018-01-25T20:08:55Z",
      "side": 1,
      "message": "\u003e\u003e\u003e\nFor example, for a request to remove from Chrome history a navigation to http://www.url1.com/, made at time t, then the contextual suggestion service can remove all logs corresponding to http://www.url1.com/ made at time t plus/minus a few seconds. What do you think?\n\u003e\u003e\u003e\nThat sounds fine to me.  I wasn\u0027t aware that you\u0027d be handling the deletions and would be able to write policies / code like that.  (The thread with the sync folks seemed to me to imply exact matches are necessary.)\n\nIf you truly need exact matches to delete, you should check with sync and privacy to see if they are concerned about clocks revisions.",
      "parentUuid": "7d75c9d5_51f307b0",
      "range": {
        "startLine": 79,
        "startChar": 21,
        "endLine": 79,
        "endChar": 75
      },
      "revId": "4d8e3198fddd04a71ff3381e8be827872747ea12",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "20c23bbf_8b2dcf52",
        "filename": "components/omnibox/browser/contextual_suggestions_service.cc",
        "patchSetId": 6
      },
      "lineNbr": 79,
      "author": {
        "id": 1183604
      },
      "writtenOn": "2018-01-25T21:25:00Z",
      "side": 1,
      "message": "Aha. You were right! There is some inconsistency in how timestamps are logged. There is a timestamp for the UserEventSpecifics proto (which is computed since Windows epoch), then there is the timestamp for TabNavigation, which is computing since Unix epoch (see https://cs.chromium.org/chromium/src/components/sessions/core/serialized_navigation_entry.cc?type\u003dcs\u0026q\u003dTabNavigation+set_timestamp_msec\u0026l\u003d466). \n\nWith the latest patch, both the contextual suggestion service and SerializedNavigationEntry::ToSyncData() are using syncer::TimeToProtoTime on the same base::Time object (coming from the navigation entry), therefore they are guaranteed to match. Even if the user\u0027s clock may change between the navigation and the omnibox request, the base::Time object associated with the navigation is the same - we are guaranteed to log the same thing.",
      "parentUuid": "9b9e8e5f_64d7fdf8",
      "range": {
        "startLine": 79,
        "startChar": 21,
        "endLine": 79,
        "endChar": 75
      },
      "revId": "4d8e3198fddd04a71ff3381e8be827872747ea12",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}