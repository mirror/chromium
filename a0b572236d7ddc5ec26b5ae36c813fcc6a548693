{
  "comments": [
    {
      "key": {
        "uuid": "e61c9117_c4c95dbd",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 7,
      "author": {
        "id": 1115949
      },
      "writtenOn": "2017-08-15T01:37:27Z",
      "side": 1,
      "message": "Would you add a single line summary so that it would show nicely when you \"git log --oneline\"?",
      "revId": "a0b572236d7ddc5ec26b5ae36c813fcc6a548693",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "87888a21_6b5f3708",
        "filename": "third_party/WebKit/LayoutTests/TestExpectations",
        "patchSetId": 6
      },
      "lineNbr": 1639,
      "author": {
        "id": 1211509
      },
      "writtenOn": "2017-08-11T09:14:32Z",
      "side": 1,
      "message": "Why add a test that you then skip?",
      "revId": "a0b572236d7ddc5ec26b5ae36c813fcc6a548693",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a79d07b3_c0777619",
        "filename": "third_party/WebKit/LayoutTests/TestExpectations",
        "patchSetId": 6
      },
      "lineNbr": 1639,
      "author": {
        "id": 1212278
      },
      "writtenOn": "2017-08-16T15:27:31Z",
      "side": 1,
      "message": "I\u0027ve made images work as well now.",
      "parentUuid": "87888a21_6b5f3708",
      "revId": "a0b572236d7ddc5ec26b5ae36c813fcc6a548693",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d993a1f0_cf039e05",
        "filename": "third_party/WebKit/Source/platform/loader/fetch/Resource.h",
        "patchSetId": 6
      },
      "lineNbr": 492,
      "author": {
        "id": 1115924
      },
      "writtenOn": "2017-08-14T07:50:25Z",
      "side": 1,
      "message": "Could you move |violation_data_container_| to ResourceError?\nThis is to keep Resource::FinishAsError() and ResourceError the single, unified code path to\nhandle error cases and their error information.\nKeeping SecurityViolationEventDataContainer separately here has a risk of inconsistencies between SecurityViolationEventDataContainer and other error handling code (in the future).\n\nWe can remove plumbing in Resource, and instead have to add e.g. CrossThreadCopier of SecurityViolationEventDataContainer and use it from the CrossThreadCopier of ResourceError.\n\n(FYI memo: SRI also stores SRI error information in Resource, but I\u0027d also like to move it to ResourceError -- when I have bandwidth for that in the future)",
      "revId": "a0b572236d7ddc5ec26b5ae36c813fcc6a548693",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "aa2f74e6_42a4ff7e",
        "filename": "third_party/WebKit/Source/platform/loader/fetch/Resource.h",
        "patchSetId": 6
      },
      "lineNbr": 492,
      "author": {
        "id": 1212278
      },
      "writtenOn": "2017-08-16T08:46:30Z",
      "side": 1,
      "message": "I tried that initially but I abandoned it because violation events will not necessarily be coupled with a ResourceError (because report-only policies exist and they will fire an event but won\u0027t block the resource from loading).",
      "parentUuid": "d993a1f0_cf039e05",
      "revId": "a0b572236d7ddc5ec26b5ae36c813fcc6a548693",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f8c750be_e60d176a",
        "filename": "third_party/WebKit/Source/platform/loader/fetch/Resource.h",
        "patchSetId": 6
      },
      "lineNbr": 492,
      "author": {
        "id": 1114080
      },
      "writtenOn": "2017-08-17T12:34:53Z",
      "side": 1,
      "message": "Sorry I overlooked \"report\" disposition. Then I think having a new callback in ResourceClient (NotifyCSPViolationAsynchronously, for example?) makes sense. hiroshige@, what do you think?",
      "parentUuid": "aa2f74e6_42a4ff7e",
      "revId": "a0b572236d7ddc5ec26b5ae36c813fcc6a548693",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0cba313f_06806543",
        "filename": "third_party/WebKit/Source/platform/loader/fetch/Resource.h",
        "patchSetId": 6
      },
      "lineNbr": 492,
      "author": {
        "id": 1115924
      },
      "writtenOn": "2017-08-18T04:29:43Z",
      "side": 1,
      "message": "The violation events can be processed within NotifyFinished() in success/error cases, as the current PatchSet does, right?\nThen I think we can (and should) avoid adding a new callback in ResourceClient to avoid ordering dependencies/problems.\n\nAnother problem with report-only cases is the violation data is reused across frames.\nFor example:\n1. a Resource is loaded in Frame A -\u003e CSP causes violation data to be set, but doesn\u0027t cause load failure. The events are fired in Frame A.\n2. The Resource is reused from Frame B -\u003e the violation data is also reused, and the events are fired in Frame B, which is wrong.\n\nyhirano@ suggested a solution: make DetermineRevalidationPolicy() to return kReload if a non-empty violation data is set (perhaps by modifying Resource::CanReuse()?).\n\nHowever, this is not completely correct, because CSP result with \"no violation to report\" is wrongly shared across frames.\nFor example:\n1. a Resource is loaded in Frame A -\u003e CSP causes no violation data to be set. Load succeeds, and no CSP violation events are fired in Frame A.\n2. The Resource is reused from Frame B -\u003e the violation data is also reused, and thus any CSP violation events are NOT fired in Frame B. This is wrong if the CSP setting should cause violation events to be reported (but doesn\u0027t cause the loading to fail).\n\nThis stems from the existing problem in resource loading and cross-frame Resource sharing.\nBecause CSP results are frame-specific and Resource can be shared across frames (via MemoryCache), there are many subtle issues around there.\nCurrently, CSP correctness is achieved by calling FetchContext::CheckCSPForRequest/CanAccess() everytime, even when the Resources are reused.\nHowever, this scheme currently doesn\u0027t support cases where \"Load succeeds, but something frame-specific is left\", because if these checks pass, Resource is shared across frames.\n\nAn alternative is to notify of violation events immediately after CheckCSPForRequest()/CanAccess() without caching the violation data in Resource (which is like the initial patch set of this CL).\nBut I prefer to manage to fix the issue above with keeping the scheme of the latest patch set (process events in NotifyFinished()) and keeping ResourceClient untouched, because the new notification (perhaps synchronously within FooResource::Fetch()?) is more problematic.",
      "parentUuid": "f8c750be_e60d176a",
      "revId": "a0b572236d7ddc5ec26b5ae36c813fcc6a548693",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ee96cf14_56553b00",
        "filename": "third_party/WebKit/Source/platform/loader/fetch/Resource.h",
        "patchSetId": 6
      },
      "lineNbr": 492,
      "author": {
        "id": 1212278
      },
      "writtenOn": "2017-08-24T09:26:25Z",
      "side": 1,
      "message": "Sorry I just realized I did not reply to the comment chain when I wrote my reply:\n\n\nCurrently, the violation data is always overridden using the result from CheckCSPForRequest which means that (if I understand correctly), a race condition might be introduced where the violation data of a frame will override the one of another frame before it processed by the ResourceClient.\n\nIt seems that attempting to fix this might cause bigger problems from what I understand.\n\nIs it possible to save the violation data per FetchContext and then have the ResourceClient retrieve the appropriate violation data for that FetchContext?",
      "parentUuid": "0cba313f_06806543",
      "revId": "a0b572236d7ddc5ec26b5ae36c813fcc6a548693",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ed4a108d_04083ae6",
        "filename": "third_party/WebKit/Source/platform/loader/fetch/ResourceFetcher.cpp",
        "patchSetId": 6
      },
      "lineNbr": 464,
      "author": {
        "id": 1115924
      },
      "writtenOn": "2017-08-14T07:50:25Z",
      "side": 1,
      "message": "const SecurityViolationEventDataContainer*",
      "revId": "a0b572236d7ddc5ec26b5ae36c813fcc6a548693",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "65be39db_57763842",
        "filename": "third_party/WebKit/Source/platform/loader/fetch/ResourceFetcher.cpp",
        "patchSetId": 6
      },
      "lineNbr": 464,
      "author": {
        "id": 1212278
      },
      "writtenOn": "2017-08-16T15:27:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ed4a108d_04083ae6",
      "revId": "a0b572236d7ddc5ec26b5ae36c813fcc6a548693",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}