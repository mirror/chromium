{
  "comments": [
    {
      "key": {
        "uuid": "bcda6560_0e9e8cca",
        "filename": "ios/chrome/browser/metrics/tab_usage_recorder_unittest.mm",
        "patchSetId": 5
      },
      "lineNbr": 5,
      "author": {
        "id": 1123009
      },
      "writtenOn": "2017-12-01T21:16:15Z",
      "side": 1,
      "message": "nit: s/include/import",
      "range": {
        "startLine": 5,
        "startChar": 8,
        "endLine": 5,
        "endChar": 9
      },
      "revId": "6b17eed635a15d88530061a544812181d5867bf1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6fbbbb49_2dc535e7",
        "filename": "ios/chrome/browser/metrics/tab_usage_recorder_unittest.mm",
        "patchSetId": 5
      },
      "lineNbr": 5,
      "author": {
        "id": 1125535
      },
      "writtenOn": "2017-12-01T21:29:56Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "bcda6560_0e9e8cca",
      "range": {
        "startLine": 5,
        "startChar": 8,
        "endLine": 5,
        "endChar": 9
      },
      "revId": "6b17eed635a15d88530061a544812181d5867bf1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "32360122_341ffe29",
        "filename": "ios/chrome/browser/metrics/tab_usage_recorder_unittest.mm",
        "patchSetId": 5
      },
      "lineNbr": 78,
      "author": {
        "id": 1123009
      },
      "writtenOn": "2017-12-01T21:16:15Z",
      "side": 1,
      "message": "Can we avoid casting and return TestWebState from InsertTestWebState?",
      "revId": "6b17eed635a15d88530061a544812181d5867bf1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4b8531ee_5082b36a",
        "filename": "ios/chrome/browser/metrics/tab_usage_recorder_unittest.mm",
        "patchSetId": 5
      },
      "lineNbr": 78,
      "author": {
        "id": 1125535
      },
      "writtenOn": "2017-12-01T21:29:56Z",
      "side": 1,
      "message": "I think returning web::WebState* from InsertTestWebState() is slightly better in encapsulation and we limit this cast to just one place.",
      "parentUuid": "32360122_341ffe29",
      "revId": "6b17eed635a15d88530061a544812181d5867bf1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "72691b99_e151a9c5",
        "filename": "ios/chrome/browser/metrics/tab_usage_recorder_unittest.mm",
        "patchSetId": 5
      },
      "lineNbr": 78,
      "author": {
        "id": 1123009
      },
      "writtenOn": "2017-12-01T21:41:09Z",
      "side": 1,
      "message": "Every test relies on the fact that web_state is TestWebState, so I\u0027m not sure if I understand \"encapsulation\" argument.\n\nEvery test casts 2 times:\n1.) TestWebState -\u003e WebState\n2.) WebState -\u003e TestWebState\nwhich is confusing.\n\nAlso casting requires a helper function which adds another layer of complexity.",
      "parentUuid": "4b8531ee_5082b36a",
      "revId": "6b17eed635a15d88530061a544812181d5867bf1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a0c90d16_088aaf5d",
        "filename": "ios/chrome/browser/metrics/tab_usage_recorder_unittest.mm",
        "patchSetId": 5
      },
      "lineNbr": 78,
      "author": {
        "id": 1125535
      },
      "writtenOn": "2017-12-01T22:52:14Z",
      "side": 1,
      "message": "I\u0027m referring to the fact that each individual TEST_F() does not know that the mock_tab_* objects are not real WebState*. It\u0027s hard for TEST_F() to exploit that knowledge without explicit casting. The moment InsertTestTabState() returns a TestWebState, that \"encapsultion\" is gone. \n\nThe casting TestWebState -\u003e WebState -\u003e TestWebState limits the \"implementation secret\" to the unit tests setup/teardown.\n\n(If this doesn\u0027t convince you, I\u0027m willing to let this go.)",
      "parentUuid": "72691b99_e151a9c5",
      "revId": "6b17eed635a15d88530061a544812181d5867bf1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "29c1f333_1c0dbd27",
        "filename": "ios/chrome/browser/metrics/tab_usage_recorder_unittest.mm",
        "patchSetId": 5
      },
      "lineNbr": 78,
      "author": {
        "id": 1191445
      },
      "writtenOn": "2017-12-01T23:14:38Z",
      "side": 1,
      "message": "Doesn\u0027t seem out of bounds for TEST_F functions to know about the implementation of TestWebState. Each TEST_F could need to mutate WebState differently.",
      "parentUuid": "a0c90d16_088aaf5d",
      "revId": "6b17eed635a15d88530061a544812181d5867bf1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "696b5042_50317494",
        "filename": "ios/chrome/browser/metrics/tab_usage_recorder_unittest.mm",
        "patchSetId": 5
      },
      "lineNbr": 78,
      "author": {
        "id": 1123009
      },
      "writtenOn": "2017-12-01T23:47:32Z",
      "side": 1,
      "message": "There is no harm for test to know about TestWebState. I do feel strongly, but arguing will not be productive :)",
      "parentUuid": "29c1f333_1c0dbd27",
      "revId": "6b17eed635a15d88530061a544812181d5867bf1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "93ac5274_7729aec0",
        "filename": "ios/chrome/browser/metrics/tab_usage_recorder_unittest.mm",
        "patchSetId": 5
      },
      "lineNbr": 326,
      "author": {
        "id": 1191445
      },
      "writtenOn": "2017-12-01T23:14:38Z",
      "side": 1,
      "message": "Why add WasHidden() calls?\nThe only tests that verify this are StateAtRendererTermination... \n\nIf there is a concern about malformed WebStates, then should this be called each time a TestWebState is created?",
      "revId": "6b17eed635a15d88530061a544812181d5867bf1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "99d458b2_31317599",
        "filename": "ios/chrome/browser/metrics/tab_usage_recorder_unittest.mm",
        "patchSetId": 5
      },
      "lineNbr": 379,
      "author": {
        "id": 1123009
      },
      "writtenOn": "2017-12-01T21:16:15Z",
      "side": 1,
      "message": "nit: /*in_memory\u003d*/true",
      "range": {
        "startLine": 379,
        "startChar": 55,
        "endLine": 379,
        "endChar": 59
      },
      "revId": "6b17eed635a15d88530061a544812181d5867bf1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "10a9c639_9daf635b",
        "filename": "ios/chrome/browser/metrics/tab_usage_recorder_unittest.mm",
        "patchSetId": 5
      },
      "lineNbr": 379,
      "author": {
        "id": 1125535
      },
      "writtenOn": "2017-12-01T21:29:56Z",
      "side": 1,
      "message": "But we don\u0027t do this anywhere else?",
      "parentUuid": "99d458b2_31317599",
      "range": {
        "startLine": 379,
        "startChar": 55,
        "endLine": 379,
        "endChar": 59
      },
      "revId": "6b17eed635a15d88530061a544812181d5867bf1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3ab88795_0f887276",
        "filename": "ios/chrome/browser/metrics/tab_usage_recorder_unittest.mm",
        "patchSetId": 5
      },
      "lineNbr": 379,
      "author": {
        "id": 1123009
      },
      "writtenOn": "2017-12-01T21:41:09Z",
      "side": 1,
      "message": "It is true. But also it is not very readable and does not follow recommendations from C++ Style Guide (see Function Argument Comments from here: https://google.github.io/styleguide/cppguide.html#Implementation_Comments)",
      "parentUuid": "10a9c639_9daf635b",
      "range": {
        "startLine": 379,
        "startChar": 55,
        "endLine": 379,
        "endChar": 59
      },
      "revId": "6b17eed635a15d88530061a544812181d5867bf1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fb5ccb5e_ca6fc75f",
        "filename": "ios/chrome/browser/metrics/tab_usage_recorder_unittest.mm",
        "patchSetId": 5
      },
      "lineNbr": 379,
      "author": {
        "id": 1125535
      },
      "writtenOn": "2017-12-01T22:52:14Z",
      "side": 1,
      "message": "Thanks for the reference. I don\u0027t want to muddle up this CL with general cleanup that\u0027s not related to the main goal. Maybe as a separate CL?",
      "parentUuid": "3ab88795_0f887276",
      "range": {
        "startLine": 379,
        "startChar": 55,
        "endLine": 379,
        "endChar": 59
      },
      "revId": "6b17eed635a15d88530061a544812181d5867bf1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e0e7fc33_0325b9b2",
        "filename": "ios/chrome/browser/metrics/tab_usage_recorder_unittest.mm",
        "patchSetId": 5
      },
      "lineNbr": 379,
      "author": {
        "id": 1123009
      },
      "writtenOn": "2017-12-01T23:47:32Z",
      "side": 1,
      "message": "I was suggesting to use /**/ for the new code. There is no need to be consistent with code, which does not follow Style Guide.",
      "parentUuid": "fb5ccb5e_ca6fc75f",
      "range": {
        "startLine": 379,
        "startChar": 55,
        "endLine": 379,
        "endChar": 59
      },
      "revId": "6b17eed635a15d88530061a544812181d5867bf1",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}