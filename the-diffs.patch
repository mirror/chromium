diff --git a/chrome/browser/apps/guest_view/web_view_interactive_browsertest.cc b/chrome/browser/apps/guest_view/web_view_interactive_browsertest.cc
index 8827ad632e62..b583da34c381 100644
--- a/chrome/browser/apps/guest_view/web_view_interactive_browsertest.cc
+++ b/chrome/browser/apps/guest_view/web_view_interactive_browsertest.cc
@@ -1355,7 +1355,7 @@ IN_PROC_BROWSER_TEST_P(WebViewInteractiveTest, TextSelection) {
   ExtensionTestMessageListener ctx_listener("MSG_CONTEXTMENU", false);
   ContextMenuNotificationObserver menu_observer(IDC_CONTENT_CONTEXT_COPY);
   SimulateRWHMouseClick(guest_web_contents()->GetRenderViewHost()->GetWidget(),
-                        blink::WebMouseEvent::Button::kRight, 20, 20);
+                        blink::WebMouseEvent::Button::Right, 20, 20);
   ASSERT_TRUE(ctx_listener.WaitUntilSatisfied());
 
   // Now verify that the selection text propagates properly to RWHV.
@@ -1565,7 +1565,7 @@ IN_PROC_BROWSER_TEST_P(WebViewImeInteractiveTest,
           : guest_view::GuestViewBase::FromWebContents(guest_web_contents)
                 ->embedder_web_contents();
   content::SimulateMouseClickAt(target_web_contents, 0,
-                                blink::WebMouseEvent::Button::kLeft,
+                                blink::WebMouseEvent::Button::Left,
                                 gfx::Point(50, 50));
   focus_listener.WaitUntilSatisfied();
 
diff --git a/chrome/browser/download/download_request_limiter_unittest.cc b/chrome/browser/download/download_request_limiter_unittest.cc
index a46441550dd6..dac8e49eb131 100644
--- a/chrome/browser/download/download_request_limiter_unittest.cc
+++ b/chrome/browser/download/download_request_limiter_unittest.cc
@@ -595,7 +595,7 @@ TEST_F(DownloadRequestLimiterTest, DownloadRequestLimiter_RawWebContents) {
   EXPECT_EQ(DownloadRequestLimiter::PROMPT_BEFORE_DOWNLOAD,
             download_request_limiter_->GetDownloadStatus(web_contents.get()));
   OnUserInteractionFor(web_contents.get(),
-                       blink::WebInputEvent::kTouchStart);
+                       blink::WebInputEvent::TouchStart);
   EXPECT_EQ(DownloadRequestLimiter::ALLOW_ONE_DOWNLOAD,
             download_request_limiter_->GetDownloadStatus(web_contents.get()));
   CanDownloadFor(web_contents.get());
@@ -606,7 +606,7 @@ TEST_F(DownloadRequestLimiterTest, DownloadRequestLimiter_RawWebContents) {
   ExpectAndResetCounts(0, 1, 0, __LINE__);
   EXPECT_EQ(DownloadRequestLimiter::DOWNLOADS_NOT_ALLOWED,
             download_request_limiter_->GetDownloadStatus(web_contents.get()));
-  OnUserInteractionFor(web_contents.get(), blink::WebInputEvent::kRawKeyDown);
+  OnUserInteractionFor(web_contents.get(), blink::WebInputEvent::RawKeyDown);
   EXPECT_EQ(DownloadRequestLimiter::ALLOW_ONE_DOWNLOAD,
             download_request_limiter_->GetDownloadStatus(web_contents.get()));
   CanDownloadFor(web_contents.get());
diff --git a/chrome/browser/pdf/pdf_extension_test.cc b/chrome/browser/pdf/pdf_extension_test.cc
index 11940f13915a..c6924393502f 100644
--- a/chrome/browser/pdf/pdf_extension_test.cc
+++ b/chrome/browser/pdf/pdf_extension_test.cc
@@ -67,7 +67,7 @@ using content::WebContents;
 const int kNumberLoadTestParts = 10;
 
 #if defined(OS_MACOSX)
-const int kDefaultKeyModifier = blink::WebInputEvent::kMetaKey;
+const int kDefaultKeyModifier = blink::WebInputEvent::MetaKey;
 #else
 const int kDefaultKeyModifier = blink::WebInputEvent::kControlKey;
 #endif
diff --git a/chrome/browser/ui/blocked_content/popup_blocker_browsertest.cc b/chrome/browser/ui/blocked_content/popup_blocker_browsertest.cc
index c299b6c9bbc1..c0a5b211324f 100644
--- a/chrome/browser/ui/blocked_content/popup_blocker_browsertest.cc
+++ b/chrome/browser/ui/blocked_content/popup_blocker_browsertest.cc
@@ -869,7 +869,7 @@ IN_PROC_BROWSER_TEST_F(PopupBlockerBrowserTest, TapGestureWithCtrlKey) {
       content::NotificationService::AllSources());
 
 #if defined(OS_MACOSX)
-  unsigned modifiers = blink::WebInputEvent::kMetaKey;
+  unsigned modifiers = blink::WebInputEvent::MetaKey;
 #else
   unsigned modifiers = blink::WebInputEvent::kControlKey;
 #endif
diff --git a/chrome/browser/ui/browser_browsertest.cc b/chrome/browser/ui/browser_browsertest.cc
index fe15009dee0f..acb93b218afa 100644
--- a/chrome/browser/ui/browser_browsertest.cc
+++ b/chrome/browser/ui/browser_browsertest.cc
@@ -2423,7 +2423,7 @@ IN_PROC_BROWSER_TEST_F(ClickModifierTest, WindowOpenShiftClickTest) {
 // On OSX meta [the command key] takes the place of control.
 IN_PROC_BROWSER_TEST_F(ClickModifierTest, WindowOpenControlClickTest) {
 #if defined(OS_MACOSX)
-  int modifiers = blink::WebInputEvent::kMetaKey;
+  int modifiers = blink::WebInputEvent::MetaKey;
 #else
   int modifiers = blink::WebInputEvent::kControlKey;
 #endif
@@ -2436,7 +2436,7 @@ IN_PROC_BROWSER_TEST_F(ClickModifierTest, WindowOpenControlClickTest) {
 // On OSX meta [the command key] takes the place of control.
 IN_PROC_BROWSER_TEST_F(ClickModifierTest, WindowOpenControlShiftClickTest) {
 #if defined(OS_MACOSX)
-  int modifiers = blink::WebInputEvent::kMetaKey;
+  int modifiers = blink::WebInputEvent::MetaKey;
 #else
   int modifiers = blink::WebInputEvent::kControlKey;
 #endif
@@ -2470,7 +2470,7 @@ IN_PROC_BROWSER_TEST_F(ClickModifierTest, HrefShiftClickTest) {
 // On OSX meta [the command key] takes the place of control.
 IN_PROC_BROWSER_TEST_F(ClickModifierTest, HrefControlClickTest) {
 #if defined(OS_MACOSX)
-  int modifiers = blink::WebInputEvent::kMetaKey;
+  int modifiers = blink::WebInputEvent::MetaKey;
 #else
   int modifiers = blink::WebInputEvent::kControlKey;
 #endif
@@ -2484,7 +2484,7 @@ IN_PROC_BROWSER_TEST_F(ClickModifierTest, HrefControlClickTest) {
 // http://crbug.com/396347
 IN_PROC_BROWSER_TEST_F(ClickModifierTest, DISABLED_HrefControlShiftClickTest) {
 #if defined(OS_MACOSX)
-  int modifiers = blink::WebInputEvent::kMetaKey;
+  int modifiers = blink::WebInputEvent::MetaKey;
 #else
   int modifiers = blink::WebInputEvent::kControlKey;
 #endif
diff --git a/chrome/browser/ui/browser_command_controller.cc b/chrome/browser/ui/browser_command_controller.cc
index 04ba4cbcb6e7..ae5774e209b4 100644
--- a/chrome/browser/ui/browser_command_controller.cc
+++ b/chrome/browser/ui/browser_command_controller.cc
@@ -179,7 +179,7 @@ bool BrowserCommandController::IsReservedCommandOrKey(
   // behavior of these keys.  Ash handles F4 and up; this leaves us needing to
   // reserve browser back/forward and refresh here.
   ui::KeyboardCode key_code =
-    static_cast<ui::KeyboardCode>(event.windows_key_code);
+    static_cast<ui::KeyboardCode>(event.windowsKeyCode);
   if ((key_code == ui::VKEY_BROWSER_BACK && command_id == IDC_BACK) ||
       (key_code == ui::VKEY_BROWSER_FORWARD && command_id == IDC_FORWARD) ||
       (key_code == ui::VKEY_BROWSER_REFRESH && command_id == IDC_RELOAD)) {
diff --git a/chrome/browser/ui/views/frame/browser_view.cc b/chrome/browser/ui/views/frame/browser_view.cc
index a1cbb8380692..da8074dbc762 100644
--- a/chrome/browser/ui/views/frame/browser_view.cc
+++ b/chrome/browser/ui/views/frame/browser_view.cc
@@ -1349,7 +1349,7 @@ content::KeyboardEventProcessingResult BrowserView::PreHandleKeyboardEvent(
 
 #if defined(OS_CHROMEOS)
   if (ash_util::IsAcceleratorDeprecated(accelerator)) {
-    return (event.GetType() == blink::WebInputEvent::kRawKeyDown)
+    return (event.type() == blink::WebInputEvent::RawKeyDown)
                ? content::KeyboardEventProcessingResult::NOT_HANDLED_IS_SHORTCUT
                : content::KeyboardEventProcessingResult::NOT_HANDLED;
   }
diff --git a/chrome/renderer/chrome_content_renderer_client.cc b/chrome/renderer/chrome_content_renderer_client.cc
index 9d526e396591..dba610071c4b 100644
--- a/chrome/renderer/chrome_content_renderer_client.cc
+++ b/chrome/renderer/chrome_content_renderer_client.cc
@@ -449,8 +449,8 @@ void ChromeContentRendererClient::RenderThreadStarted() {
   WebSecurityPolicy::RegisterURLSchemeAsDisplayIsolated(dom_distiller_scheme);
 
 #if defined(OS_ANDROID)
-  WebSecurityPolicy::RegisterURLSchemeAsAllowedForReferrer(
-      WebString::FromUTF8(chrome::kAndroidAppScheme));
+  WebSecurityPolicy::registerURLSchemeAsAllowedForReferrer(
+      WebString::fromUTF8(chrome::kAndroidAppScheme));
 #endif
 
   // chrome-search: pages should not be accessible by bookmarklets
diff --git a/components/printing/renderer/print_web_view_helper.cc b/components/printing/renderer/print_web_view_helper.cc
index c5ad7b603362..8a6b2e4d732d 100644
--- a/components/printing/renderer/print_web_view_helper.cc
+++ b/components/printing/renderer/print_web_view_helper.cc
@@ -1896,7 +1896,7 @@ void PrintWebViewHelper::PrintPageInternal(
   // TODO(thestig): Figure out why Linux is different.
 #if defined(OS_WIN)
   float webkit_page_shrink_factor =
-      frame->GetPrintPageShrink(params.page_number);
+      frame->getPrintPageShrink(params.page_number);
   float scale_factor = css_scale_factor * webkit_page_shrink_factor;
 #else
   float scale_factor = css_scale_factor;
diff --git a/components/printing/test/print_web_view_helper_browsertest.cc b/components/printing/test/print_web_view_helper_browsertest.cc
index d594191449dc..dd20f628035b 100644
--- a/components/printing/test/print_web_view_helper_browsertest.cc
+++ b/components/printing/test/print_web_view_helper_browsertest.cc
@@ -355,15 +355,15 @@ TEST_F(MAYBE_PrintWebViewHelperTest, AllowUserOriginatedPrinting) {
 
   gfx::Rect bounds = GetElementBounds("print");
   EXPECT_FALSE(bounds.IsEmpty());
-  blink::WebMouseEvent mouse_event(blink::WebInputEvent::kMouseDown,
-                                   blink::WebInputEvent::kNoModifiers,
-                                   blink::WebInputEvent::kTimeStampForTesting);
-  mouse_event.button = blink::WebMouseEvent::Button::kLeft;
-  mouse_event.SetPositionInWidget(bounds.CenterPoint().x(),
+  blink::WebMouseEvent mouse_event(blink::WebInputEvent::MouseDown,
+                                   blink::WebInputEvent::NoModifiers,
+                                   blink::WebInputEvent::TimeStampForTesting);
+  mouse_event.button = blink::WebMouseEvent::Button::Left;
+  mouse_event.setPositionInWidget(bounds.CenterPoint().x(),
                                   bounds.CenterPoint().y());
-  mouse_event.click_count = 1;
+  mouse_event.clickCount = 1;
   SendWebMouseEvent(mouse_event);
-  mouse_event.SetType(blink::WebInputEvent::kMouseUp);
+  mouse_event.setType(blink::WebInputEvent::MouseUp);
   SendWebMouseEvent(mouse_event);
   ProcessPendingMessages();
 
@@ -413,10 +413,10 @@ TEST_F(MAYBE_PrintWebViewHelperTest, PrintWithIframe) {
   // Find the frame and set it as the focused one.  This should mean that that
   // the printout should only contain the contents of that frame.
   auto* web_view = view_->GetWebView();
-  WebFrame* sub1_frame = web_view->FindFrameByName(WebString::FromUTF8("sub1"));
+  WebFrame* sub1_frame = web_view->findFrameByName(WebString::fromUTF8("sub1"));
   ASSERT_TRUE(sub1_frame);
-  web_view->SetFocusedFrame(sub1_frame);
-  ASSERT_NE(web_view->FocusedFrame(), web_view->MainFrame());
+  web_view->setFocusedFrame(sub1_frame);
+  ASSERT_NE(web_view->focusedFrame(), web_view->mainFrame());
 
   // Initiate printing.
   OnPrintPages();
diff --git a/components/spellcheck/renderer/spellcheck_panel.cc b/components/spellcheck/renderer/spellcheck_panel.cc
index 0e96ef4fe151..6f1539bd3169 100644
--- a/components/spellcheck/renderer/spellcheck_panel.cc
+++ b/components/spellcheck/renderer/spellcheck_panel.cc
@@ -36,7 +36,7 @@ void SpellCheckPanel::UpdateSpellingUIWithMisspelledWord(
     const WebString& word) {
 #if BUILDFLAG(USE_BROWSER_SPELLCHECKER)
   Send(new SpellCheckHostMsg_UpdateSpellingPanelWithMisspelledWord(
-      routing_id(), word.Utf16()));
+      routing_id(), word.utf16()));
 #endif
 }
 
@@ -60,8 +60,8 @@ bool SpellCheckPanel::OnMessageReceived(const IPC::Message& message) {
 void SpellCheckPanel::OnAdvanceToNextMisspelling() {
   if (!render_view()->GetWebView())
     return;
-  render_view()->GetWebView()->FocusedFrame()->ExecuteCommand(
-      WebString::FromUTF8("AdvanceToNextMisspelling"));
+  render_view()->GetWebView()->focusedFrame()->executeCommand(
+      WebString::fromUTF8("AdvanceToNextMisspelling"));
 }
 
 void SpellCheckPanel::OnToggleSpellPanel(bool is_currently_visible) {
@@ -70,8 +70,8 @@ void SpellCheckPanel::OnToggleSpellPanel(bool is_currently_visible) {
   // We need to tell the webView whether the spelling panel is visible or not so
   // that it won't need to make ipc calls later.
   spelling_panel_visible_ = is_currently_visible;
-  render_view()->GetWebView()->FocusedFrame()->ExecuteCommand(
-      WebString::FromUTF8("ToggleSpellPanel"));
+  render_view()->GetWebView()->focusedFrame()->executeCommand(
+      WebString::fromUTF8("ToggleSpellPanel"));
 }
 #endif
 
diff --git a/components/spellcheck/renderer/spellcheck_provider.cc b/components/spellcheck/renderer/spellcheck_provider.cc
index a33c687a8864..4734539ec274 100644
--- a/components/spellcheck/renderer/spellcheck_provider.cc
+++ b/components/spellcheck/renderer/spellcheck_provider.cc
@@ -98,11 +98,11 @@ bool SpellCheckProvider::OnMessageReceived(const IPC::Message& message) {
 
 void SpellCheckProvider::FocusedNodeChanged(const blink::WebNode& unused) {
 #if BUILDFLAG(USE_BROWSER_SPELLCHECKER)
-  WebLocalFrame* frame = render_view()->GetWebView()->FocusedFrame();
-  WebElement element = frame->GetDocument().IsNull() ? WebElement() :
-      frame->GetDocument().FocusedElement();
-  bool enabled = !element.IsNull() && element.IsEditable();
-  bool checked = enabled && frame->IsSpellCheckingEnabled();
+  WebLocalFrame* frame = render_view()->GetWebView()->focusedFrame();
+  WebElement element = frame->document().isNull() ? WebElement() :
+      frame->document().focusedElement();
+  bool enabled = !element.isNull() && element.isEditable();
+  bool checked = enabled && frame->isSpellCheckingEnabled();
 
   Send(new SpellCheckHostMsg_ToggleSpellCheck(routing_id(), enabled, checked));
 #endif  // USE_BROWSER_SPELLCHECKER
@@ -216,11 +216,11 @@ void SpellCheckProvider::OnRespondTextCheck(
                                          line,
                                          results,
                                          &textcheck_results);
-  completion->DidFinishCheckingText(textcheck_results);
+  completion->didFinishCheckingText(textcheck_results);
 
   // Cache the request and the converted results.
   last_request_ = line;
-  last_results_.Swap(textcheck_results);
+  last_results_.swap(textcheck_results);
 }
 #endif
 
diff --git a/content/child/runtime_features.cc b/content/child/runtime_features.cc
index 403231da5244..d82dc487f44c 100644
--- a/content/child/runtime_features.cc
+++ b/content/child/runtime_features.cc
@@ -26,26 +26,26 @@ namespace content {
 static void SetRuntimeFeatureDefaultsForPlatform() {
 #if defined(OS_ANDROID)
   // Android does not have support for PagePopup
-  WebRuntimeFeatures::EnablePagePopup(false);
+  WebRuntimeFeatures::enablePagePopup(false);
   // No plan to support complex UI for date/time INPUT types.
-  WebRuntimeFeatures::EnableInputMultipleFieldsUI(false);
+  WebRuntimeFeatures::enableInputMultipleFieldsUI(false);
   // Android does not yet support SharedWorker. crbug.com/154571
-  WebRuntimeFeatures::EnableSharedWorker(false);
+  WebRuntimeFeatures::enableSharedWorker(false);
   // Android does not yet support NavigatorContentUtils.
-  WebRuntimeFeatures::EnableNavigatorContentUtils(false);
-  WebRuntimeFeatures::EnableOrientationEvent(true);
-  WebRuntimeFeatures::EnableFastMobileScrolling(true);
-  WebRuntimeFeatures::EnableMediaCapture(true);
+  WebRuntimeFeatures::enableNavigatorContentUtils(false);
+  WebRuntimeFeatures::enableOrientationEvent(true);
+  WebRuntimeFeatures::enableFastMobileScrolling(true);
+  WebRuntimeFeatures::enableMediaCapture(true);
   // Android won't be able to reliably support non-persistent notifications, the
   // intended behavior for which is in flux by itself.
-  WebRuntimeFeatures::EnableNotificationConstructor(false);
+  WebRuntimeFeatures::enableNotificationConstructor(false);
   // Android does not yet support switching of audio output devices
-  WebRuntimeFeatures::EnableAudioOutputDevices(false);
-  WebRuntimeFeatures::EnableAutoplayMutedVideos(true);
+  WebRuntimeFeatures::enableAudioOutputDevices(false);
+  WebRuntimeFeatures::enableAutoplayMutedVideos(true);
   // Android does not yet support SystemMonitor.
-  WebRuntimeFeatures::EnableOnDeviceChange(false);
-  WebRuntimeFeatures::EnableMediaSession(true);
-  WebRuntimeFeatures::EnableMediaControlsOverlayPlayButton(true);
+  WebRuntimeFeatures::enableOnDeviceChange(false);
+  WebRuntimeFeatures::enableMediaSession(true);
+  WebRuntimeFeatures::enableMediaControlsOverlayPlayButton(true);
 #else  // defined(OS_ANDROID)
   WebRuntimeFeatures::EnableNavigatorContentUtils(true);
   if (base::FeatureList::IsEnabled(
@@ -66,12 +66,12 @@ static void SetRuntimeFeatureDefaultsForPlatform() {
 // Web Bluetooth is shipped on Android, ChromeOS & MacOS, experimental
 // otherwise.
 #if defined(OS_CHROMEOS) || defined(OS_ANDROID) || defined(OS_MACOSX)
-  WebRuntimeFeatures::EnableWebBluetooth(true);
+  WebRuntimeFeatures::enableWebBluetooth(true);
 #endif
 
 // The Notification Center on Mac OS X does not support content images.
 #if defined(OS_MACOSX)
-  WebRuntimeFeatures::EnableNotificationContentImage(false);
+  WebRuntimeFeatures::enableNotificationContentImage(false);
 #endif
 }
 
@@ -327,9 +327,9 @@ void SetRuntimeFeaturesDefaultsAndUpdateFromArgs(
 
 #if defined(OS_ANDROID)
   if (command_line.HasSwitch(switches::kDisableMediaSessionAPI))
-    WebRuntimeFeatures::EnableMediaSession(false);
+    WebRuntimeFeatures::enableMediaSession(false);
 
-  WebRuntimeFeatures::EnablePaymentRequest(
+  WebRuntimeFeatures::enablePaymentRequest(
       base::FeatureList::IsEnabled(features::kWebPayments));
 #endif
 
diff --git a/content/child/web_url_loader_impl.cc b/content/child/web_url_loader_impl.cc
index 65f553a21889..88ad2402a9f6 100644
--- a/content/child/web_url_loader_impl.cc
+++ b/content/child/web_url_loader_impl.cc
@@ -940,7 +940,7 @@ bool WebURLLoaderImpl::Context::CanHandleDataURLRequestLocally() const {
   // need to be loaded locally.
   // For PlzNavigate, navigation requests were already checked in the browser.
   if (resource_dispatcher_ &&
-      request_.GetFrameType() == WebURLRequest::kFrameTypeTopLevel) {
+      request_.getFrameType() == WebURLRequest::FrameTypeTopLevel) {
     if (!IsBrowserSideNavigationEnabled())
       return false;
   }
diff --git a/content/common/cursors/webcursor_unittest.cc b/content/common/cursors/webcursor_unittest.cc
index ccfd06403498..371cc650a03b 100644
--- a/content/common/cursors/webcursor_unittest.cc
+++ b/content/common/cursors/webcursor_unittest.cc
@@ -326,7 +326,7 @@ void ScaleCursor(float scale_factor, int hotspot_x, int hotspot_y) {
   display.set_device_scale_factor(scale_factor);
 
   WebCursor::CursorInfo info;
-  info.type = WebCursorInfo::kTypeCustom;
+  info.type = WebCursorInfo::TypeCustom;
   info.hotspot = gfx::Point(hotspot_x, hotspot_y);
 
   info.custom_image = SkBitmap();
diff --git a/content/ppapi_plugin/ppapi_blink_platform_impl.cc b/content/ppapi_plugin/ppapi_blink_platform_impl.cc
index 9ec116d00af8..04e58224690c 100644
--- a/content/ppapi_plugin/ppapi_blink_platform_impl.cc
+++ b/content/ppapi_plugin/ppapi_blink_platform_impl.cc
@@ -43,7 +43,7 @@ class PpapiBlinkPlatformImpl::SandboxSupport : public WebSandboxSupport {
   virtual ~SandboxSupport() {}
 
 #if defined(OS_MACOSX)
-  bool LoadFont(NSFont* srcFont, CGFontRef* out, uint32_t* fontID) override;
+  bool loadFont(NSFont* srcFont, CGFontRef* out, uint32_t* fontID) override;
 #elif defined(OS_POSIX)
   SandboxSupport();
   void GetFallbackFontForCharacter(
@@ -66,7 +66,7 @@ class PpapiBlinkPlatformImpl::SandboxSupport : public WebSandboxSupport {
 
 #if defined(OS_MACOSX)
 
-bool PpapiBlinkPlatformImpl::SandboxSupport::LoadFont(NSFont* src_font,
+bool PpapiBlinkPlatformImpl::SandboxSupport::loadFont(NSFont* src_font,
                                                       CGFontRef* out,
                                                       uint32_t* font_id) {
   // TODO(brettw) this should do the something similar to what
diff --git a/content/ppapi_plugin/ppapi_plugin_main.cc b/content/ppapi_plugin/ppapi_plugin_main.cc
index 146a4ff454c3..df524aff513c 100644
--- a/content/ppapi_plugin/ppapi_plugin_main.cc
+++ b/content/ppapi_plugin/ppapi_plugin_main.cc
@@ -137,20 +137,20 @@ int PpapiPluginMain(const MainFunctionParams& parameters) {
   base::StringToDouble(
       command_line.GetSwitchValueASCII(switches::kDeviceScaleFactor),
       &device_scale_factor);
-  blink::WebFontRendering::SetDeviceScaleFactor(device_scale_factor);
+  blink::WebFontRendering::setDeviceScaleFactor(device_scale_factor);
 
   int antialiasing_enabled = 1;
   base::StringToInt(
       command_line.GetSwitchValueASCII(switches::kPpapiAntialiasedTextEnabled),
       &antialiasing_enabled);
-  blink::WebFontRendering::SetAntialiasedTextEnabled(
+  blink::WebFontRendering::setAntialiasedTextEnabled(
       antialiasing_enabled ? true : false);
 
   int subpixel_rendering = 0;
   base::StringToInt(command_line.GetSwitchValueASCII(
                         switches::kPpapiSubpixelRenderingSetting),
                     &subpixel_rendering);
-  blink::WebFontRendering::SetLCDTextEnabled(
+  blink::WebFontRendering::setLCDTextEnabled(
       subpixel_rendering != gfx::FontRenderParams::SUBPIXEL_RENDERING_NONE);
 #endif
 
diff --git a/content/renderer/accessibility/blink_ax_tree_source.cc b/content/renderer/accessibility/blink_ax_tree_source.cc
index d0feaaf3a01b..8a48ee10a6d2 100644
--- a/content/renderer/accessibility/blink_ax_tree_source.cc
+++ b/content/renderer/accessibility/blink_ax_tree_source.cc
@@ -786,9 +786,9 @@ void BlinkAXTreeSource::SerializeNode(blink::WebAXObject src,
 // TODO(nektar): Turn off kHTMLAccessibilityMode for automation and Mac
 // and remove ifdef.
 #if defined(OS_WIN)
-      if (dst->role == ui::AX_ROLE_MATH && element.InnerHTML().length()) {
+      if (dst->role == ui::AX_ROLE_MATH && element.innerHTML().length()) {
         dst->AddStringAttribute(ui::AX_ATTR_INNER_HTML,
-                                element.InnerHTML().Utf8());
+                                element.innerHTML().utf8());
       }
 #endif
     }
@@ -800,7 +800,7 @@ void BlinkAXTreeSource::SerializeNode(blink::WebAXObject src,
 #if defined(OS_CHROMEOS)
       // This attribute will soon be deprecated; see crbug.com/669134.
       WebVector<int> src_line_breaks;
-      src.LineBreaks(src_line_breaks);
+      src.lineBreaks(src_line_breaks);
       if (src_line_breaks.size()) {
         std::vector<int32_t> line_breaks;
         line_breaks.reserve(src_line_breaks.size());
diff --git a/content/renderer/accessibility/render_accessibility_impl.cc b/content/renderer/accessibility/render_accessibility_impl.cc
index 49f76909ecef..f7ae616123df 100644
--- a/content/renderer/accessibility/render_accessibility_impl.cc
+++ b/content/renderer/accessibility/render_accessibility_impl.cc
@@ -100,7 +100,7 @@ RenderAccessibilityImpl::RenderAccessibilityImpl(RenderFrameImpl* render_frame,
 
 #if defined(OS_ANDROID)
   // Password values are only passed through on Android.
-  settings->SetAccessibilityPasswordValuesEnabled(true);
+  settings->setAccessibilityPasswordValuesEnabled(true);
 #endif
 
 #if !defined(OS_ANDROID)
diff --git a/content/renderer/drop_data_builder.cc b/content/renderer/drop_data_builder.cc
index 7454c0392e88..31831a6afd0e 100644
--- a/content/renderer/drop_data_builder.cc
+++ b/content/renderer/drop_data_builder.cc
@@ -61,7 +61,7 @@ DropData DropDataBuilder::Build(const WebDragData& drag_data) {
         result.file_contents_source_url = item.binary_data_source_url;
 #if defined(OS_WIN)
         result.file_contents_filename_extension =
-            item.binary_data_filename_extension.Utf16();
+            item.binaryDataFilenameExtension.utf16();
 #else
         result.file_contents_filename_extension =
             item.binary_data_filename_extension.Utf8();
diff --git a/content/renderer/gpu/gpu_benchmarking_extension.cc b/content/renderer/gpu/gpu_benchmarking_extension.cc
index 65ad9e91c455..74c0d8b11c23 100644
--- a/content/renderer/gpu/gpu_benchmarking_extension.cc
+++ b/content/renderer/gpu/gpu_benchmarking_extension.cc
@@ -488,7 +488,7 @@ static void PrintDocument(blink::WebFrame* frame, SkDocument* doc) {
     canvas.translate(kMarginLeft, kMarginTop);
 
 #if defined(OS_WIN) || defined(OS_MACOSX)
-    float page_shrink = frame->GetPrintPageShrink(i);
+    float page_shrink = frame->getPrintPageShrink(i);
     DCHECK(page_shrink > 0);
     canvas.scale(page_shrink, page_shrink);
 #endif
diff --git a/content/renderer/input/render_widget_input_handler.cc b/content/renderer/input/render_widget_input_handler.cc
index 68667b7f12fe..62e7b57118fe 100644
--- a/content/renderer/input/render_widget_input_handler.cc
+++ b/content/renderer/input/render_widget_input_handler.cc
@@ -281,9 +281,9 @@ void RenderWidgetInputHandler::HandleInputEvent(
     // but at this point we have to swallow the event for the scenario (2).
     const WebKeyboardEvent& key_event =
         static_cast<const WebKeyboardEvent&>(input_event);
-    if (key_event.native_key_code == AKEYCODE_DPAD_CENTER &&
+    if (key_event.nativeKeyCode == AKEYCODE_DPAD_CENTER &&
         widget_->GetTextInputType() != ui::TEXT_INPUT_TYPE_NONE) {
-      widget_->ShowVirtualKeyboardOnElementFocus();
+      widget_->showVirtualKeyboardOnElementFocus();
       prevent_default = true;
     }
 #endif
@@ -418,8 +418,8 @@ void RenderWidgetInputHandler::HandleInputEvent(
 #if defined(OS_ANDROID)
   // Allow the IME to be shown when the focus changes as a consequence
   // of a processed touch end event.
-  if (input_event.GetType() == WebInputEvent::kTouchEnd &&
-      processed != WebInputEventResult::kNotHandled) {
+  if (input_event.type() == WebInputEvent::TouchEnd &&
+      processed != WebInputEventResult::NotHandled) {
     delegate_->ShowVirtualKeyboard();
   }
 #elif defined(USE_AURA)
diff --git a/content/renderer/media/webmediaplayer_ms.cc b/content/renderer/media/webmediaplayer_ms.cc
index 98f53696015e..bf9c0160ac23 100644
--- a/content/renderer/media/webmediaplayer_ms.cc
+++ b/content/renderer/media/webmediaplayer_ms.cc
@@ -525,7 +525,7 @@ void WebMediaPlayerMS::OnFrameHidden() {
 void WebMediaPlayerMS::OnFrameClosed() {
 #if defined(OS_ANDROID)
   if (!paused_) {
-    Pause();
+    pause();
     should_play_upon_shown_ = true;
   }
 
@@ -551,7 +551,7 @@ void WebMediaPlayerMS::OnFrameShown() {
 
   // Resume playback on visibility. play() clears |should_play_upon_shown_|.
   if (should_play_upon_shown_)
-    Play();
+    play();
 #endif  // defined(OS_ANDROID)
 }
 
diff --git a/content/renderer/media/webmediaplayer_ms_unittest.cc b/content/renderer/media/webmediaplayer_ms_unittest.cc
index 783b184c52b9..751310f2cb0f 100644
--- a/content/renderer/media/webmediaplayer_ms_unittest.cc
+++ b/content/renderer/media/webmediaplayer_ms_unittest.cc
@@ -930,45 +930,45 @@ TEST_F(WebMediaPlayerMSTest, HiddenPlayerTests) {
 
   // Hidden status should not affect playback.
   delegate_.set_hidden(true);
-  player_->Play();
-  EXPECT_FALSE(player_->Paused());
+  player_->play();
+  EXPECT_FALSE(player_->paused());
 
   // A pause delivered via the delegate should not pause the video since these
   // calls are currently ignored.
   player_->OnPause();
-  EXPECT_FALSE(player_->Paused());
+  EXPECT_FALSE(player_->paused());
 
   // A hidden player should start still be playing upon shown.
   delegate_.set_hidden(false);
   player_->OnFrameShown();
-  EXPECT_FALSE(player_->Paused());
+  EXPECT_FALSE(player_->paused());
 
   // A hidden event should not pause the player.
   delegate_.set_hidden(true);
   player_->OnFrameHidden();
-  EXPECT_FALSE(player_->Paused());
+  EXPECT_FALSE(player_->paused());
 
   // A user generated pause() should clear the automatic resumption.
-  player_->Pause();
+  player_->pause();
   delegate_.set_hidden(false);
   player_->OnFrameShown();
-  EXPECT_TRUE(player_->Paused());
+  EXPECT_TRUE(player_->paused());
 
   // A user generated play() should start playback.
-  player_->Play();
-  EXPECT_FALSE(player_->Paused());
+  player_->play();
+  EXPECT_FALSE(player_->paused());
 
   // An OnSuspendRequested() without forced suspension should do nothing.
   player_->OnIdleTimeout();
-  EXPECT_FALSE(player_->Paused());
+  EXPECT_FALSE(player_->paused());
 
   // An OnSuspendRequested() with forced suspension should pause playback.
   player_->OnFrameClosed();
-  EXPECT_TRUE(player_->Paused());
+  EXPECT_TRUE(player_->paused());
 
   // OnShown() should restart after a forced suspension.
   player_->OnFrameShown();
-  EXPECT_FALSE(player_->Paused());
+  EXPECT_FALSE(player_->paused());
   EXPECT_CALL(*this, DoSetWebLayer(false));
 
   base::RunLoop().RunUntilIdle();
diff --git a/content/renderer/pepper/event_conversion.cc b/content/renderer/pepper/event_conversion.cc
index 9b936e46f630..916aa04560d4 100644
--- a/content/renderer/pepper/event_conversion.cc
+++ b/content/renderer/pepper/event_conversion.cc
@@ -687,8 +687,8 @@ std::vector<std::unique_ptr<WebInputEvent>> CreateSimulatedWebInputEvents(
 #if defined(OS_WIN)
       WebKeyboardEvent* web_keyboard_event =
           static_cast<WebKeyboardEvent*>(original_event.get());
-      if (web_keyboard_event->GetType() == WebInputEvent::kKeyDown)
-        web_keyboard_event->SetType(WebInputEvent::kRawKeyDown);
+      if (web_keyboard_event->type() == WebInputEvent::KeyDown)
+        web_keyboard_event->setType(WebInputEvent::RawKeyDown);
 #endif
       events.push_back(std::move(original_event));
       break;
diff --git a/content/renderer/pepper/pepper_plugin_instance_impl.cc b/content/renderer/pepper/pepper_plugin_instance_impl.cc
index 74fa5a29e609..2cc547f63438 100644
--- a/content/renderer/pepper/pepper_plugin_instance_impl.cc
+++ b/content/renderer/pepper/pepper_plugin_instance_impl.cc
@@ -321,12 +321,12 @@ std::unique_ptr<const char* []> StringVectorToArgArray(
 // for things like screen brightness and volume control.
 bool IsReservedSystemInputEvent(const blink::WebInputEvent& event) {
 #if defined(OS_CHROMEOS)
-  if (event.GetType() != WebInputEvent::kKeyDown &&
-      event.GetType() != WebInputEvent::kKeyUp)
+  if (event.type() != WebInputEvent::KeyDown &&
+      event.type() != WebInputEvent::KeyUp)
     return false;
   const blink::WebKeyboardEvent& key_event =
       static_cast<const blink::WebKeyboardEvent&>(event);
-  switch (key_event.windows_key_code) {
+  switch (key_event.windowsKeyCode) {
     case ui::VKEY_BRIGHTNESS_DOWN:
     case ui::VKEY_BRIGHTNESS_UP:
     case ui::VKEY_KBD_BRIGHTNESS_DOWN:
diff --git a/content/renderer/render_frame_impl.cc b/content/renderer/render_frame_impl.cc
index 368ff995fde6..c4bce76e15f4 100644
--- a/content/renderer/render_frame_impl.cc
+++ b/content/renderer/render_frame_impl.cc
@@ -1869,8 +1869,8 @@ void RenderFrameImpl::OnPasteAndMatchStyle() {
 void RenderFrameImpl::OnCopyToFindPboard() {
   // Since the find pasteboard supports only plain text, this can be simpler
   // than the |OnCopy()| case.
-  if (frame_->HasSelection()) {
-    base::string16 selection = frame_->SelectionAsText().Utf16();
+  if (frame_->hasSelection()) {
+    base::string16 selection = frame_->selectionAsText().utf16();
     RenderThread::Get()->Send(
         new ClipboardHostMsg_FindPboardWriteStringAsync(selection));
   }
@@ -4223,7 +4223,7 @@ bool RenderFrameImpl::RunFileChooser(
     ipc_params.accept_types.push_back(type.Utf16());
   ipc_params.need_local_path = params.need_local_path;
 #if defined(OS_ANDROID)
-  ipc_params.capture = params.use_media_capture;
+  ipc_params.capture = params.useMediaCapture;
 #endif
   ipc_params.requestor = params.requestor;
 
@@ -5358,13 +5358,13 @@ WebNavigationPolicy RenderFrameImpl::DecidePolicyForNavigation(
   // crbug.com/325351 is resolved.
   if (GetContentClient()->renderer()->HandleNavigation(
           this, is_content_initiated, render_view_was_created_by_renderer,
-          frame_, info.url_request, info.navigation_type, info.default_policy,
+          frame_, info.urlRequest, info.navigationType, info.defaultPolicy,
           is_redirect)) {
     if (IsBrowserSideNavigationEnabled()) {
       // Need to let the browser know so it can notify its observers.
       Send(new FrameHostMsg_NavigationHandledByEmbedder(routing_id_));
     }
-    return blink::kWebNavigationPolicyIgnore;
+    return blink::WebNavigationPolicyIgnore;
   }
 #endif
 
@@ -5819,12 +5819,12 @@ void RenderFrameImpl::OnActivateNearestFindResult(int request_id,
                                                   float y) {
   WebRect selection_rect;
   int ordinal =
-      frame_->SelectNearestFindMatch(WebFloatPoint(x, y), &selection_rect);
+      frame_->selectNearestFindMatch(WebFloatPoint(x, y), &selection_rect);
   if (ordinal == -1) {
     // Something went wrong, so send a no-op reply (force the frame to report
     // the current match count) in case the host is waiting for a response due
     // to rate-limiting.
-    frame_->IncreaseMatchCount(0, request_id);
+    frame_->increaseMatchCount(0, request_id);
     return;
   }
 
@@ -5835,7 +5835,7 @@ void RenderFrameImpl::OnActivateNearestFindResult(int request_id,
 void RenderFrameImpl::OnGetNearestFindResult(int nfr_request_id,
                                              float x,
                                              float y) {
-  float distance = frame_->DistanceToNearestFindMatch(WebFloatPoint(x, y));
+  float distance = frame_->distanceToNearestFindMatch(WebFloatPoint(x, y));
   Send(new FrameHostMsg_GetNearestFindResult_Reply(
       routing_id_, nfr_request_id, distance));
 }
@@ -5843,16 +5843,16 @@ void RenderFrameImpl::OnGetNearestFindResult(int nfr_request_id,
 void RenderFrameImpl::OnFindMatchRects(int current_version) {
   std::vector<gfx::RectF> match_rects;
 
-  int rects_version = frame_->FindMatchMarkersVersion();
+  int rects_version = frame_->findMatchMarkersVersion();
   if (current_version != rects_version) {
     WebVector<WebFloatRect> web_match_rects;
-    frame_->FindMatchRects(web_match_rects);
+    frame_->findMatchRects(web_match_rects);
     match_rects.reserve(web_match_rects.size());
     for (size_t i = 0; i < web_match_rects.size(); ++i)
       match_rects.push_back(gfx::RectF(web_match_rects[i]));
   }
 
-  gfx::RectF active_rect = frame_->ActiveFindMatchRect();
+  gfx::RectF active_rect = frame_->activeFindMatchRect();
   Send(new FrameHostMsg_FindMatchRects_Reply(routing_id_, rects_version,
                                              match_rects, active_rect));
 }
@@ -6010,7 +6010,7 @@ void RenderFrameImpl::NavigateInternal(
   bool has_history_navigation_in_frame = false;
 
 #if defined(OS_ANDROID)
-  request.SetHasUserGesture(request_params.has_user_gesture);
+  request.setHasUserGesture(request_params.has_user_gesture);
 #endif
 
   if (browser_side_navigation) {
diff --git a/content/renderer/render_thread_impl.cc b/content/renderer/render_thread_impl.cc
index 80b432aa9729..f85f5707c756 100644
--- a/content/renderer/render_thread_impl.cc
+++ b/content/renderer/render_thread_impl.cc
@@ -615,7 +615,7 @@ void RenderThreadImpl::Init(
 
 #if BUILDFLAG(USE_EXTERNAL_POPUP_MENU)
   // On Mac and Android Java UI, the select popups are rendered by the browser.
-  blink::WebView::SetUseExternalPopupMenus(true);
+  blink::WebView::setUseExternalPopupMenus(true);
 #endif
 
   lazy_tls.Pointer()->Set(this);
@@ -2172,10 +2172,10 @@ void RenderThreadImpl::UpdateScrollbarTheme(
     mojom::UpdateScrollbarThemeParamsPtr params) {
 #if defined(OS_MACOSX)
   static_cast<WebScrollbarBehaviorImpl*>(
-      blink_platform_impl_->ScrollbarBehavior())
+      blink_platform_impl_->scrollbarBehavior())
       ->set_jump_on_track_click(params->jump_on_track_click);
 
-  blink::WebScrollbarTheme::UpdateScrollbarsWithNSDefaults(
+  blink::WebScrollbarTheme::updateScrollbarsWithNSDefaults(
       params->initial_button_delay, params->autoscroll_button_delay,
       params->preferred_scroller_style, params->redraw,
       params->button_placement);
diff --git a/content/renderer/render_view_impl.cc b/content/renderer/render_view_impl.cc
index 3c4d7fa79989..8ed4ad868c6f 100644
--- a/content/renderer/render_view_impl.cc
+++ b/content/renderer/render_view_impl.cc
@@ -996,48 +996,48 @@ void RenderView::ApplyWebPreferences(const WebPreferences& prefs,
       prefs.expensive_background_throttling_max_delay);
 
 #if defined(OS_ANDROID)
-  settings->SetAllowCustomScrollbarInMainFrame(false);
-  settings->SetTextAutosizingEnabled(prefs.text_autosizing_enabled);
-  settings->SetAccessibilityFontScaleFactor(prefs.font_scale_factor);
-  settings->SetDeviceScaleAdjustment(prefs.device_scale_adjustment);
-  settings->SetFullscreenSupported(prefs.fullscreen_supported);
-  web_view->SetIgnoreViewportTagScaleLimits(prefs.force_enable_zoom);
-  settings->SetAutoZoomFocusedNodeToLegibleScale(true);
-  settings->SetDoubleTapToZoomEnabled(prefs.double_tap_to_zoom_enabled);
-  settings->SetMediaPlaybackRequiresUserGesture(
+  settings->setAllowCustomScrollbarInMainFrame(false);
+  settings->setTextAutosizingEnabled(prefs.text_autosizing_enabled);
+  settings->setAccessibilityFontScaleFactor(prefs.font_scale_factor);
+  settings->setDeviceScaleAdjustment(prefs.device_scale_adjustment);
+  settings->setFullscreenSupported(prefs.fullscreen_supported);
+  web_view->setIgnoreViewportTagScaleLimits(prefs.force_enable_zoom);
+  settings->setAutoZoomFocusedNodeToLegibleScale(true);
+  settings->setDoubleTapToZoomEnabled(prefs.double_tap_to_zoom_enabled);
+  settings->setMediaPlaybackRequiresUserGesture(
       prefs.user_gesture_required_for_media_playback);
-  settings->SetMediaPlaybackGestureWhitelistScope(
-      blink::WebString::FromUTF8(prefs.media_playback_gesture_whitelist_scope));
-  settings->SetDefaultVideoPosterURL(
-      WebString::FromASCII(prefs.default_video_poster_url.spec()));
-  settings->SetSupportDeprecatedTargetDensityDPI(
+  settings->setMediaPlaybackGestureWhitelistScope(
+      blink::WebString::fromUTF8(prefs.media_playback_gesture_whitelist_scope));
+  settings->setDefaultVideoPosterURL(
+      WebString::fromASCII(prefs.default_video_poster_url.spec()));
+  settings->setSupportDeprecatedTargetDensityDPI(
       prefs.support_deprecated_target_density_dpi);
-  settings->SetUseLegacyBackgroundSizeShorthandBehavior(
+  settings->setUseLegacyBackgroundSizeShorthandBehavior(
       prefs.use_legacy_background_size_shorthand_behavior);
-  settings->SetWideViewportQuirkEnabled(prefs.wide_viewport_quirk);
-  settings->SetUseWideViewport(prefs.use_wide_viewport);
-  settings->SetForceZeroLayoutHeight(prefs.force_zero_layout_height);
-  settings->SetViewportMetaLayoutSizeQuirk(
+  settings->setWideViewportQuirkEnabled(prefs.wide_viewport_quirk);
+  settings->setUseWideViewport(prefs.use_wide_viewport);
+  settings->setForceZeroLayoutHeight(prefs.force_zero_layout_height);
+  settings->setViewportMetaLayoutSizeQuirk(
       prefs.viewport_meta_layout_size_quirk);
-  settings->SetViewportMetaMergeContentQuirk(
+  settings->setViewportMetaMergeContentQuirk(
       prefs.viewport_meta_merge_content_quirk);
-  settings->SetViewportMetaNonUserScalableQuirk(
+  settings->setViewportMetaNonUserScalableQuirk(
       prefs.viewport_meta_non_user_scalable_quirk);
-  settings->SetViewportMetaZeroValuesQuirk(
+  settings->setViewportMetaZeroValuesQuirk(
       prefs.viewport_meta_zero_values_quirk);
-  settings->SetClobberUserAgentInitialScaleQuirk(
+  settings->setClobberUserAgentInitialScaleQuirk(
       prefs.clobber_user_agent_initial_scale_quirk);
-  settings->SetIgnoreMainFrameOverflowHiddenQuirk(
+  settings->setIgnoreMainFrameOverflowHiddenQuirk(
       prefs.ignore_main_frame_overflow_hidden_quirk);
-  settings->SetReportScreenSizeInPhysicalPixelsQuirk(
+  settings->setReportScreenSizeInPhysicalPixelsQuirk(
       prefs.report_screen_size_in_physical_pixels_quirk);
-  settings->SetShouldReuseGlobalForUnownedMainFrame(
+  settings->setShouldReuseGlobalForUnownedMainFrame(
       prefs.resue_global_for_unowned_main_frame);
-  settings->SetProgressBarCompletion(
+  settings->setProgressBarCompletion(
       static_cast<WebSettings::ProgressBarCompletion>(
           prefs.progress_bar_completion));
-  settings->SetPreferHiddenVolumeControls(true);
-  settings->SetSpellCheckEnabledByDefault(prefs.spellcheck_enabled_by_default);
+  settings->setPreferHiddenVolumeControls(true);
+  settings->setSpellCheckEnabledByDefault(prefs.spellcheck_enabled_by_default);
 
   // Force preload=none and disable autoplay on older or low end Android
   // platforms because their media pipelines are not stable enough to handle
@@ -1047,15 +1047,15 @@ void RenderView::ApplyWebPreferences(const WebPreferences& prefs,
           base::android::SDK_VERSION_JELLY_BEAN_MR2 ||
       base::SysInfo::IsLowEndDevice();
   // TODO(mlamouri): rename this setting "isLowEndDevice".
-  settings->SetForcePreloadNoneForMediaElements(is_low_end_device);
+  settings->setForcePreloadNoneForMediaElements(is_low_end_device);
 
-  WebRuntimeFeatures::EnableVideoFullscreenOrientationLock(
+  WebRuntimeFeatures::enableVideoFullscreenOrientationLock(
       prefs.video_fullscreen_orientation_lock_enabled);
-  WebRuntimeFeatures::EnableVideoFullscreenDetection(
+  WebRuntimeFeatures::enableVideoFullscreenDetection(
       prefs.video_fullscreen_detection_enabled);
-  settings->SetEmbeddedMediaExperienceEnabled(
+  settings->setEmbeddedMediaExperienceEnabled(
       prefs.embedded_media_experience_enabled);
-  settings->SetDoNotUpdateSelectionOnMutatingSelectionRange(
+  settings->setDoNotUpdateSelectionOnMutatingSelectionRange(
       prefs.do_not_update_selection_on_mutating_selection_range);
 #else   // defined(OS_ANDROID)
   settings->SetCrossOriginMediaPlaybackRequiresUserGesture(
@@ -1088,12 +1088,12 @@ void RenderView::ApplyWebPreferences(const WebPreferences& prefs,
   settings->SetMediaControlsEnabled(prefs.media_controls_enabled);
 
 #if defined(OS_MACOSX)
-  settings->SetDoubleTapToZoomEnabled(true);
-  web_view->SetMaximumLegibleScale(prefs.default_maximum_page_scale_factor);
+  settings->setDoubleTapToZoomEnabled(true);
+  web_view->setMaximumLegibleScale(prefs.default_maximum_page_scale_factor);
 #endif
 
 #if defined(OS_WIN)
-  WebRuntimeFeatures::EnableMiddleClickAutoscroll(true);
+  WebRuntimeFeatures::enableMiddleClickAutoscroll(true);
 #endif
 }
 
@@ -1141,7 +1141,7 @@ void RenderViewImpl::OnGetRenderedText() {
   if (!webview())
     return;
 
-  if (!webview()->MainFrame()->IsWebLocalFrame())
+  if (!webview()->mainFrame()->isWebLocalFrame())
     return;
 
   // Get rendered text from WebLocalFrame.
@@ -1154,8 +1154,8 @@ void RenderViewImpl::OnGetRenderedText() {
   // TODO(dglazkov): WebFrameContentDumper should only be used for
   // testing purposes. See http://crbug.com/585164.
   std::string text =
-      WebFrameContentDumper::DumpWebViewAsText(webview(), kMaximumMessageSize)
-          .Utf8();
+      WebFrameContentDumper::dumpWebViewAsText(webview(), kMaximumMessageSize)
+          .utf8();
 
   Send(new ViewMsg_GetRenderedTextCompleted(GetRoutingID(), text));
 }
@@ -2407,7 +2407,7 @@ void RenderViewImpl::PageImportanceSignalsChanged() {
 }
 
 #if defined(OS_ANDROID)
-bool RenderViewImpl::OpenDateTimeChooser(
+bool RenderViewImpl::openDateTimeChooser(
     const blink::WebDateTimeChooserParams& params,
     blink::WebDateTimeChooserCompletion* completion) {
   // JavaScript may try to open a date time chooser while one is already open.
@@ -2436,7 +2436,7 @@ void RenderViewImpl::OnShowContextMenu(
 }
 
 #if defined(OS_ANDROID)
-bool RenderViewImpl::DidTapMultipleTargets(
+bool RenderViewImpl::didTapMultipleTargets(
     const WebSize& inner_viewport_offset,
     const WebRect& touch_rect,
     const WebVector<WebRect>& target_rects) {
@@ -2453,15 +2453,15 @@ bool RenderViewImpl::DidTapMultipleTargets(
   float new_total_scale =
       DisambiguationPopupHelper::ComputeZoomAreaAndScaleFactor(
           touch_rect, target_rects, GetSize(),
-          gfx::Rect(webview()->MainFrame()->VisibleContentRect()).size(),
-          device_scale_factor_ * webview()->PageScaleFactor(), &zoom_rect);
+          gfx::Rect(webview()->mainFrame()->visibleContentRect()).size(),
+          device_scale_factor_ * webview()->pageScaleFactor(), &zoom_rect);
   if (!new_total_scale || zoom_rect.IsEmpty())
     return false;
 
   bool handled = false;
   switch (renderer_preferences_.tap_multiple_targets_strategy) {
     case TAP_MULTIPLE_TARGETS_STRATEGY_ZOOM:
-      handled = webview()->ZoomToMultipleTargetsRect(zoom_rect);
+      handled = webview()->zoomToMultipleTargetsRect(zoom_rect);
       break;
     case TAP_MULTIPLE_TARGETS_STRATEGY_POPUP: {
       gfx::Size canvas_size =
@@ -2487,8 +2487,8 @@ bool RenderViewImpl::DidTapMultipleTargets(
         canvas.translate(-zoom_rect.x() * device_scale_factor_,
                          -zoom_rect.y() * device_scale_factor_);
 
-        DCHECK(webview_->IsAcceleratedCompositingActive());
-        webview_->PaintIgnoringCompositing(&canvas, zoom_rect);
+        DCHECK(webview_->isAcceleratedCompositingActive());
+        webview_->paintIgnoringCompositing(&canvas, zoom_rect);
       }
 
       gfx::Rect zoom_rect_in_screen =
diff --git a/content/renderer/render_widget.cc b/content/renderer/render_widget.cc
index 7df21eb51e38..079a5959ccda 100644
--- a/content/renderer/render_widget.cc
+++ b/content/renderer/render_widget.cc
@@ -2000,7 +2000,7 @@ void RenderWidget::UpdateSelectionBounds() {
   // directly by the compositor, in which case explicit IPC selection
   // notifications should be suppressed.
   bool send_ipc =
-      !blink::WebRuntimeFeatures::IsCompositedSelectionUpdateEnabled();
+      !blink::WebRuntimeFeatures::isCompositedSelectionUpdateEnabled();
 #endif
   if (send_ipc) {
     ViewHostMsg_SelectionBounds_Params params;
@@ -2136,14 +2136,14 @@ blink::WebScreenInfo RenderWidget::GetScreenInfo() {
 }
 
 #if defined(OS_ANDROID)
-void RenderWidget::ShowUnhandledTapUIIfNeeded(
+void RenderWidget::showUnhandledTapUIIfNeeded(
     const WebPoint& tapped_position,
     const WebNode& tapped_node,
     bool page_changed) {
   DCHECK(input_handler_->handling_input_event());
-  bool should_trigger = !page_changed && tapped_node.IsTextNode() &&
-                        !tapped_node.IsContentEditable() &&
-                        !tapped_node.IsInsideFocusableElementOrARIAWidget();
+  bool should_trigger = !page_changed && tapped_node.isTextNode() &&
+                        !tapped_node.isContentEditable() &&
+                        !tapped_node.isInsideFocusableElementOrARIAWidget();
   if (should_trigger) {
     Send(new ViewHostMsg_ShowUnhandledTapUIIfNeeded(routing_id_,
         tapped_position.x, tapped_position.y));
@@ -2170,17 +2170,17 @@ void RenderWidget::DidHandleGestureEvent(
 // TODO(ananta): Piggyback off existing IPCs to communicate this information,
 // crbug/420130.
 #if defined(OS_WIN)
-  if (event.GetType() != blink::WebGestureEvent::kGestureTap)
+  if (event.type() != blink::WebGestureEvent::GestureTap)
     return;
 
   // TODO(estade): hit test the event against focused node to make sure
   // the tap actually hit the focused node.
   blink::WebInputMethodController* controller = GetInputMethodController();
   blink::WebTextInputType text_input_type =
-      controller ? controller->TextInputType() : blink::kWebTextInputTypeNone;
+      controller ? controller->textInputType() : blink::WebTextInputTypeNone;
 
   Send(new ViewHostMsg_FocusedNodeTouched(
-      routing_id_, text_input_type != blink::kWebTextInputTypeNone));
+      routing_id_, text_input_type != blink::WebTextInputTypeNone));
 #endif
 #endif
 }
diff --git a/content/renderer/render_widget_fullscreen_pepper.cc b/content/renderer/render_widget_fullscreen_pepper.cc
index 5b3212b2f0ab..c793e428e44d 100644
--- a/content/renderer/render_widget_fullscreen_pepper.cc
+++ b/content/renderer/render_widget_fullscreen_pepper.cc
@@ -215,14 +215,14 @@ class PepperWidget : public WebWidget {
       // On Windows, we handle it on mouse up.
 #if defined(OS_WIN)
       send_context_menu_event =
-          mouse_event.GetType() == WebInputEvent::kMouseUp &&
-          mouse_event.button == WebMouseEvent::Button::kRight;
+          mouse_event.type() == WebInputEvent::MouseUp &&
+          mouse_event.button == WebMouseEvent::Button::Right;
 #elif defined(OS_MACOSX)
       send_context_menu_event =
-          mouse_event.GetType() == WebInputEvent::kMouseDown &&
-          (mouse_event.button == WebMouseEvent::Button::kRight ||
-           (mouse_event.button == WebMouseEvent::Button::kLeft &&
-            mouse_event.GetModifiers() & WebMouseEvent::kControlKey));
+          mouse_event.type() == WebInputEvent::MouseDown &&
+          (mouse_event.button == WebMouseEvent::Button::Right ||
+           (mouse_event.button == WebMouseEvent::Button::Left &&
+            mouse_event.modifiers() & WebMouseEvent::ControlKey));
 #else
       send_context_menu_event =
           mouse_event.GetType() == WebInputEvent::kMouseDown &&
diff --git a/content/renderer/renderer_blink_platform_impl.cc b/content/renderer/renderer_blink_platform_impl.cc
index 4b04fe960c61..bf448787bf38 100644
--- a/content/renderer/renderer_blink_platform_impl.cc
+++ b/content/renderer/renderer_blink_platform_impl.cc
@@ -213,7 +213,7 @@ class RendererBlinkPlatformImpl::SandboxSupport
   virtual ~SandboxSupport() {}
 
 #if defined(OS_MACOSX)
-  bool LoadFont(NSFont* src_font,
+  bool loadFont(NSFont* src_font,
                 CGFontRef* container,
                 uint32_t* font_id) override;
 #elif defined(OS_POSIX)
@@ -520,7 +520,7 @@ bool RendererBlinkPlatformImpl::FileUtilities::SendSyncMessageFromAnyThread(
 
 #if defined(OS_MACOSX)
 
-bool RendererBlinkPlatformImpl::SandboxSupport::LoadFont(NSFont* src_font,
+bool RendererBlinkPlatformImpl::SandboxSupport::loadFont(NSFont* src_font,
                                                          CGFontRef* out,
                                                          uint32_t* font_id) {
   uint32_t font_data_size;
diff --git a/content/renderer/text_input_client_observer.cc b/content/renderer/text_input_client_observer.cc
index 07b4863f4055..604969b49aa7 100644
--- a/content/renderer/text_input_client_observer.cc
+++ b/content/renderer/text_input_client_observer.cc
@@ -106,7 +106,7 @@ void TextInputClientObserver::OnStringAtPoint(gfx::Point point) {
   NSAttributedString* string = nil;
 
   if (auto* frame_widget = GetWebFrameWidget()) {
-    string = blink::WebSubstringUtil::AttributedWordAtPoint(frame_widget, point,
+    string = blink::WebSubstringUtil::attributedWordAtPoint(frame_widget, point,
                                                    baselinePoint);
   }
 
@@ -163,7 +163,7 @@ void TextInputClientObserver::OnStringForRange(gfx::Range range) {
   // TODO(yabinh): Null check should not be necessary.
   // See crbug.com/304341
   if (frame) {
-    string = blink::WebSubstringUtil::AttributedSubstringInRange(
+    string = blink::WebSubstringUtil::attributedSubstringInRange(
         frame, range.start(), range.length(), &baselinePoint);
   }
   std::unique_ptr<const mac::AttributedStringCoder::EncodedString> encoded(
diff --git a/content/shell/test_runner/event_sender.cc b/content/shell/test_runner/event_sender.cc
index c86dfc25d0e7..06630aad886c 100644
--- a/content/shell/test_runner/event_sender.cc
+++ b/content/shell/test_runner/event_sender.cc
@@ -269,7 +269,7 @@ int GetKeyModifier(const std::string& modifier_name) {
 #ifdef __APPLE__
   } else if (!strcmp(characters, "metaKey") ||
              !strcmp(characters, "addSelectionKey")) {
-    return WebInputEvent::kMetaKey;
+    return WebInputEvent::MetaKey;
 #else
   } else if (!strcmp(characters, "metaKey")) {
     return WebInputEvent::kMetaKey;
@@ -278,13 +278,13 @@ int GetKeyModifier(const std::string& modifier_name) {
     return WebInputEvent::kIsAutoRepeat;
   } else if (!strcmp(characters, "copyKey")) {
 #ifdef __APPLE__
-    return WebInputEvent::kAltKey;
+    return WebInputEvent::AltKey;
 #else
     return WebInputEvent::kControlKey;
 #endif
   } else if (!strcmp(characters, "accessKey")) {
 #ifdef __APPLE__
-    return WebInputEvent::kAltKey | WebInputEvent::kControlKey;
+    return WebInputEvent::AltKey | WebInputEvent::ControlKey;
 #else
     return WebInputEvent::kAltKey;
 #endif
@@ -480,11 +480,11 @@ bool GetEditCommand(const WebKeyboardEvent& event, std::string* name) {
   // modifiers. These key events correspond to some special movement and
   // selection editor commands. These keys will be marked as system key, which
   // prevents them from being handled. Thus they must be handled specially.
-  if ((event.GetModifiers() & ~WebKeyboardEvent::kShiftKey) !=
-      WebKeyboardEvent::kMetaKey)
+  if ((event.modifiers() & ~WebKeyboardEvent::ShiftKey) !=
+      WebKeyboardEvent::MetaKey)
     return false;
 
-  switch (event.windows_key_code) {
+  switch (event.windowsKeyCode) {
     case ui::VKEY_LEFT:
       *name = "MoveToBeginningOfLine";
       break;
@@ -501,7 +501,7 @@ bool GetEditCommand(const WebKeyboardEvent& event, std::string* name) {
       return false;
   }
 
-  if (event.GetModifiers() & WebKeyboardEvent::kShiftKey)
+  if (event.modifiers() & WebKeyboardEvent::ShiftKey)
     name->append("AndModifySelection");
 
   return true;
@@ -512,9 +512,9 @@ bool GetEditCommand(const WebKeyboardEvent& event, std::string* name) {
 
 bool IsSystemKeyEvent(const WebKeyboardEvent& event) {
 #if defined(OS_MACOSX)
-  return event.GetModifiers() & WebInputEvent::kMetaKey &&
-         event.windows_key_code != ui::VKEY_B &&
-         event.windows_key_code != ui::VKEY_I;
+  return event.modifiers() & WebInputEvent::MetaKey &&
+         event.windowsKeyCode != ui::VKEY_B &&
+         event.windowsKeyCode != ui::VKEY_I;
 #else
   return !!(event.GetModifiers() & WebInputEvent::kAltKey);
 #endif
@@ -1772,14 +1772,14 @@ std::vector<std::string> EventSender::ContextClick() {
 
 #if defined(OS_WIN)
   current_pointer_state_[kRawMousePointerId].current_buttons_ &=
-      ~GetWebMouseEventModifierForButton(WebMouseEvent::Button::kRight);
+      ~GetWebMouseEventModifierForButton(WebMouseEvent::Button::Right);
   current_pointer_state_[kRawMousePointerId].pressed_button_ =
-      WebMouseEvent::Button::kNoButton;
+      WebMouseEvent::Button::NoButton;
 
-  WebMouseEvent mouseUpEvent(WebInputEvent::kMouseUp,
+  WebMouseEvent mouseUpEvent(WebInputEvent::MouseUp,
                              ModifiersForPointer(kRawMousePointerId),
                              GetCurrentEventTimeSec());
-  InitMouseEvent(WebMouseEvent::Button::kRight,
+  InitMouseEvent(WebMouseEvent::Button::Right,
                  current_pointer_state_[kRawMousePointerId].current_buttons_,
                  current_pointer_state_[kRawMousePointerId].last_pos_,
                  click_count_, &mouseUpEvent);
@@ -1908,7 +1908,7 @@ void EventSender::DumpFilenameBeingDragged() {
                                 std::string(),   // mime_type
                                 std::string());  // default_name
 #if defined(OS_WIN)
-      filename = filename.ReplaceExtension(filename_extension.Utf16());
+      filename = filename.ReplaceExtension(filename_extension.utf16());
 #else
       filename = filename.ReplaceExtension(filename_extension.Utf8());
 #endif
diff --git a/content/shell/test_runner/test_preferences.cc b/content/shell/test_runner/test_preferences.cc
index 534fc1835fbb..2440f409fa6c 100644
--- a/content/shell/test_runner/test_preferences.cc
+++ b/content/shell/test_runner/test_preferences.cc
@@ -37,7 +37,7 @@ void TestPreferences::Reset() {
   allow_universal_access_from_file_urls = true;
 
 #if defined(OS_MACOSX)
-  editing_behavior = WebSettings::kEditingBehaviorMac;
+  editing_behavior = WebSettings::EditingBehaviorMac;
 #else
   editing_behavior = WebSettings::kEditingBehaviorWin;
 #endif
diff --git a/content/test/layouttest_support.cc b/content/test/layouttest_support.cc
index 444bab4f37f7..719ecca61b99 100644
--- a/content/test/layouttest_support.cc
+++ b/content/test/layouttest_support.cc
@@ -160,7 +160,7 @@ void RegisterSideloadedTypefaces(SkFontMgr* fontmgr) {
        i != files.end();
        ++i) {
     SkTypeface* typeface = fontmgr->createFromFile(i->c_str());
-    blink::WebFontRendering::AddSideloadedFontForTesting(typeface);
+    blink::WebFontRendering::addSideloadedFontForTesting(typeface);
   }
 }
 #endif  // OS_WIN
diff --git a/extensions/browser/guest_view/web_view/web_view_guest.cc b/extensions/browser/guest_view/web_view/web_view_guest.cc
index a72785d88f30..dc0b84cd1af2 100644
--- a/extensions/browser/guest_view/web_view/web_view_guest.cc
+++ b/extensions/browser/guest_view/web_view/web_view_guest.cc
@@ -1095,15 +1095,15 @@ bool WebViewGuest::HandleKeyboardShortcuts(
   }
 
 #if defined(OS_MACOSX)
-  if (event.GetModifiers() != blink::WebInputEvent::kMetaKey)
+  if (event.modifiers() != blink::WebInputEvent::MetaKey)
     return false;
 
-  if (event.windows_key_code == ui::VKEY_OEM_4) {
+  if (event.windowsKeyCode == ui::VKEY_OEM_4) {
     Go(-1);
     return true;
   }
 
-  if (event.windows_key_code == ui::VKEY_OEM_6) {
+  if (event.windowsKeyCode == ui::VKEY_OEM_6) {
     Go(1);
     return true;
   }
diff --git a/media/blink/webmediaplayer_impl.cc b/media/blink/webmediaplayer_impl.cc
index 8adc3491371e..9a199a5cab72 100644
--- a/media/blink/webmediaplayer_impl.cc
+++ b/media/blink/webmediaplayer_impl.cc
@@ -436,7 +436,7 @@ void WebMediaPlayerImpl::Play() {
     video_locked_when_paused_when_hidden_ = false;
 
 #if defined(OS_ANDROID)  // WMPI_CAST
-  if (IsRemote()) {
+  if (isRemote()) {
     cast_impl_.play();
     return;
   }
@@ -476,7 +476,7 @@ void WebMediaPlayerImpl::Pause() {
     video_locked_when_paused_when_hidden_ = true;
 
 #if defined(OS_ANDROID)  // WMPI_CAST
-  if (IsRemote()) {
+  if (isRemote()) {
     cast_impl_.pause();
     return;
   }
@@ -517,7 +517,7 @@ void WebMediaPlayerImpl::DoSeek(base::TimeDelta time, bool time_updated) {
   DCHECK(main_task_runner_->BelongsToCurrentThread());
 
 #if defined(OS_ANDROID)  // WMPI_CAST
-  if (IsRemote()) {
+  if (isRemote()) {
     cast_impl_.seek(time);
     return;
   }
@@ -695,7 +695,7 @@ bool WebMediaPlayerImpl::Paused() const {
   DCHECK(main_task_runner_->BelongsToCurrentThread());
 
 #if defined(OS_ANDROID)  // WMPI_CAST
-  if (IsRemote())
+  if (isRemote())
     return cast_impl_.IsPaused();
 #endif
 
@@ -753,7 +753,7 @@ double WebMediaPlayerImpl::CurrentTime() const {
     return seek_time_.InSecondsF();
 
 #if defined(OS_ANDROID)  // WMPI_CAST
-  if (IsRemote())
+  if (isRemote())
     return cast_impl_.currentTime();
 #endif
 
@@ -1102,7 +1102,7 @@ void WebMediaPlayerImpl::OnPipelineSeeked(bool time_updated) {
 
   if (paused_) {
 #if defined(OS_ANDROID)  // WMPI_CAST
-    if (IsRemote()) {
+    if (isRemote()) {
       paused_time_ = base::TimeDelta::FromSecondsD(cast_impl_.currentTime());
     } else {
       paused_time_ = pipeline_controller_.GetMediaTime();
@@ -1128,7 +1128,7 @@ void WebMediaPlayerImpl::OnPipelineSeeked(bool time_updated) {
 
 void WebMediaPlayerImpl::OnPipelineSuspended() {
 #if defined(OS_ANDROID)
-  if (IsRemote()) {
+  if (isRemote()) {
     scoped_refptr<VideoFrame> frame = cast_impl_.GetCastingBanner();
     if (frame)
       compositor_->PaintSingleFrame(frame);
@@ -1529,7 +1529,7 @@ void WebMediaPlayerImpl::RequestRemotePlaybackDisabled(bool disabled) {
 }
 
 #if defined(OS_ANDROID)  // WMPI_CAST
-bool WebMediaPlayerImpl::IsRemote() const {
+bool WebMediaPlayerImpl::isRemote() const {
   return cast_impl_.isRemote();
 }
 
@@ -1538,15 +1538,15 @@ void WebMediaPlayerImpl::SetMediaPlayerManager(
   cast_impl_.SetMediaPlayerManager(media_player_manager);
 }
 
-void WebMediaPlayerImpl::RequestRemotePlayback() {
+void WebMediaPlayerImpl::requestRemotePlayback() {
   cast_impl_.requestRemotePlayback();
 }
 
-void WebMediaPlayerImpl::RequestRemotePlaybackControl() {
+void WebMediaPlayerImpl::requestRemotePlaybackControl() {
   cast_impl_.requestRemotePlaybackControl();
 }
 
-void WebMediaPlayerImpl::RequestRemotePlaybackStop() {
+void WebMediaPlayerImpl::requestRemotePlaybackStop() {
   cast_impl_.requestRemotePlaybackStop();
 }
 
@@ -1555,15 +1555,15 @@ void WebMediaPlayerImpl::OnRemotePlaybackEnded() {
   DCHECK(main_task_runner_->BelongsToCurrentThread());
 
   ended_ = true;
-  client_->TimeChanged();
+  client_->timeChanged();
 }
 
 void WebMediaPlayerImpl::OnDisconnectedFromRemoteDevice(double t) {
   DoSeek(base::TimeDelta::FromSecondsD(t), false);
 
   // We already told the delegate we're paused when remoting started.
-  client_->PlaybackStateChanged();
-  client_->DisconnectedFromRemoteDevice();
+  client_->playbackStateChanged();
+  client_->disconnectedFromRemoteDevice();
 
   UpdatePlayState();
 }
@@ -1582,7 +1582,7 @@ gfx::Size WebMediaPlayerImpl::GetCanvasSize() const {
   if (!video_weblayer_)
     return pipeline_metadata_.natural_size;
 
-  return video_weblayer_->Bounds();
+  return video_weblayer_->bounds();
 }
 
 void WebMediaPlayerImpl::SetDeviceScaleFactor(float scale_factor) {
@@ -1618,7 +1618,7 @@ void WebMediaPlayerImpl::DataSourceInitialized(bool success) {
   if (data_source_ && !use_fallback_path_) {
     const GURL url_after_redirects = data_source_->GetUrlAfterRedirects();
     if (MediaCodecUtil::IsHLSURL(url_after_redirects)) {
-      client_->RequestReload(url_after_redirects);
+      client_->requestReload(url_after_redirects);
       // |this| may be destructed, do nothing after this.
       return;
     }
@@ -1846,7 +1846,7 @@ void WebMediaPlayerImpl::UpdatePlayState() {
   DCHECK(main_task_runner_->BelongsToCurrentThread());
 
 #if defined(OS_ANDROID)  // WMPI_CAST
-  bool is_remote = IsRemote();
+  bool is_remote = isRemote();
   bool can_auto_suspend = true;
 #else
   bool is_remote = false;
@@ -2120,7 +2120,7 @@ void WebMediaPlayerImpl::ScheduleIdlePauseTimer() {
 
 #if defined(OS_ANDROID)
   // Remote players will be suspended and locally paused.
-  if (IsRemote())
+  if (isRemote())
     return;
 #endif
 
@@ -2171,7 +2171,7 @@ bool WebMediaPlayerImpl::ShouldPauseVideoWhenHidden() const {
       return false;
 
 #if defined(OS_ANDROID)
-    if (IsRemote())
+    if (isRemote())
       return false;
 #endif
 
@@ -2201,12 +2201,12 @@ bool WebMediaPlayerImpl::IsBackgroundOptimizationCandidate() const {
 
 #if defined(OS_ANDROID)  // WMPI_CAST
   // Don't optimize players being Cast.
-  if (IsRemote())
+  if (isRemote())
     return false;
 
   // Video-only players are always optimized (paused) on Android.
   // Don't check the keyframe distance and duration.
-  if (!HasAudio() && HasVideo())
+  if (!hasAudio() && hasVideo())
     return true;
 #endif  // defined(OS_ANDROID)
 
diff --git a/third_party/WebKit/Source/bindings/core/v8/custom/V8DevToolsHostCustom.cpp b/third_party/WebKit/Source/bindings/core/v8/custom/V8DevToolsHostCustom.cpp
index 4aa4ec5f370f..e7eec3a20867 100644
--- a/third_party/WebKit/Source/bindings/core/v8/custom/V8DevToolsHostCustom.cpp
+++ b/third_party/WebKit/Source/bindings/core/v8/custom/V8DevToolsHostCustom.cpp
@@ -47,9 +47,9 @@ namespace blink {
 void V8DevToolsHost::platformMethodCustom(
     const v8::FunctionCallbackInfo<v8::Value>& info) {
 #if OS(MACOSX)
-  V8SetReturnValue(info, V8AtomicString(info.GetIsolate(), "mac"));
+  v8SetReturnValue(info, v8AtomicString(info.GetIsolate(), "mac"));
 #elif OS(WIN)
-  V8SetReturnValue(info, V8AtomicString(info.GetIsolate(), "windows"));
+  v8SetReturnValue(info, v8AtomicString(info.GetIsolate(), "windows"));
 #else  // Unix-like systems
   V8SetReturnValue(info, V8AtomicString(info.GetIsolate(), "linux"));
 #endif
diff --git a/third_party/WebKit/Source/bindings/core/v8/serialization/V8ScriptValueSerializerTest.cpp b/third_party/WebKit/Source/bindings/core/v8/serialization/V8ScriptValueSerializerTest.cpp
index 8ebd14907777..7cffbb3cc5fd 100644
--- a/third_party/WebKit/Source/bindings/core/v8/serialization/V8ScriptValueSerializerTest.cpp
+++ b/third_party/WebKit/Source/bindings/core/v8/serialization/V8ScriptValueSerializerTest.cpp
@@ -410,7 +410,7 @@ TEST(V8ScriptValueSerializerTest, DecodeImageBitmap) {
 // other platform writes BGRA.
 #if OS(ANDROID)
   RefPtr<SerializedScriptValue> input =
-      SerializedValue({0xff, 0x09, 0x3f, 0x00, 0x67, 0x01, 0x01, 0x02, 0x01,
+      serializedValue({0xff, 0x09, 0x3f, 0x00, 0x67, 0x01, 0x01, 0x02, 0x01,
                        0x08, 0xff, 0x00, 0x00, 0xff, 0x00, 0xff, 0x00, 0xff});
 #else
   RefPtr<SerializedScriptValue> input =
diff --git a/third_party/WebKit/Source/core/animation/ElementAnimations.cpp b/third_party/WebKit/Source/core/animation/ElementAnimations.cpp
index 8b54fa3a9af3..57a9d5a477af 100644
--- a/third_party/WebKit/Source/core/animation/ElementAnimations.cpp
+++ b/third_party/WebKit/Source/core/animation/ElementAnimations.cpp
@@ -95,8 +95,8 @@ DEFINE_TRACE(ElementAnimations) {
 
 const ComputedStyle* ElementAnimations::BaseComputedStyle() const {
 #if !DCHECK_IS_ON()
-  if (IsAnimationStyleChange())
-    return base_computed_style_.Get();
+  if (isAnimationStyleChange())
+    return m_baseComputedStyle.get();
 #endif
   return nullptr;
 }
diff --git a/third_party/WebKit/Source/core/animation/css/CSSAnimations.cpp b/third_party/WebKit/Source/core/animation/css/CSSAnimations.cpp
index 9c848b4eb9a1..7f26fdd54524 100644
--- a/third_party/WebKit/Source/core/animation/css/CSSAnimations.cpp
+++ b/third_party/WebKit/Source/core/animation/css/CSSAnimations.cpp
@@ -289,8 +289,8 @@ void CSSAnimations::CalculateAnimationUpdate(CSSAnimationUpdate& update,
   // If we're in an animation style change, no animations can have started, been
   // cancelled or changed play state. When DCHECK is enabled, we verify this
   // optimization.
-  if (is_animation_style_change) {
-    CalculateAnimationActiveInterpolations(update, animating_element);
+  if (isAnimationStyleChange) {
+    calculateAnimationActiveInterpolations(update, animatingElement);
     return;
   }
 #endif
diff --git a/third_party/WebKit/Source/core/clipboard/DataTransfer.cpp b/third_party/WebKit/Source/core/clipboard/DataTransfer.cpp
index 2e9e21a07c48..e2a2122b4b99 100644
--- a/third_party/WebKit/Source/core/clipboard/DataTransfer.cpp
+++ b/third_party/WebKit/Source/core/clipboard/DataTransfer.cpp
@@ -338,7 +338,7 @@ void DataTransfer::WriteSelection(const FrameSelection& selection) {
 
   String str = selection.SelectedTextForClipboard();
 #if OS(WIN)
-  ReplaceNewlinesWithWindowsStyleNewlines(str);
+  replaceNewlinesWithWindowsStyleNewlines(str);
 #endif
   ReplaceNBSPWithSpace(str);
   data_object_->SetData(kMimeTypeTextPlain, str);
diff --git a/third_party/WebKit/Source/core/clipboard/Pasteboard.cpp b/third_party/WebKit/Source/core/clipboard/Pasteboard.cpp
index 0fd7f170cb57..e64df2269740 100644
--- a/third_party/WebKit/Source/core/clipboard/Pasteboard.cpp
+++ b/third_party/WebKit/Source/core/clipboard/Pasteboard.cpp
@@ -62,9 +62,9 @@ void Pasteboard::SetSelectionMode(bool selection_mode) {
 void Pasteboard::WritePlainText(const String& text, SmartReplaceOption) {
 // FIXME: add support for smart replace
 #if OS(WIN)
-  String plain_text(text);
-  ReplaceNewlinesWithWindowsStyleNewlines(plain_text);
-  Platform::Current()->Clipboard()->WritePlainText(plain_text);
+  String plainText(text);
+  replaceNewlinesWithWindowsStyleNewlines(plainText);
+  Platform::current()->clipboard()->writePlainText(plainText);
 #else
   Platform::Current()->Clipboard()->WritePlainText(text);
 #endif
@@ -125,7 +125,7 @@ void Pasteboard::WriteHTML(const String& markup,
                            bool can_smart_copy_or_delete) {
   String text = plain_text;
 #if OS(WIN)
-  ReplaceNewlinesWithWindowsStyleNewlines(text);
+  replaceNewlinesWithWindowsStyleNewlines(text);
 #endif
   ReplaceNBSPWithSpace(text);
 
diff --git a/third_party/WebKit/Source/core/css/CSSFontSelector.cpp b/third_party/WebKit/Source/core/css/CSSFontSelector.cpp
index f71dd692cff9..1a712e61da85 100644
--- a/third_party/WebKit/Source/core/css/CSSFontSelector.cpp
+++ b/third_party/WebKit/Source/core/css/CSSFontSelector.cpp
@@ -91,13 +91,13 @@ static AtomicString FamilyNameFromSettings(
     const FontDescription& font_description,
     const AtomicString& generic_family_name) {
 #if OS(ANDROID)
-  if (font_description.GenericFamily() == FontDescription::kStandardFamily)
-    return FontCache::GetGenericFamilyNameForScript(
-        FontFamilyNames::webkit_standard, font_description);
+  if (fontDescription.genericFamily() == FontDescription::StandardFamily)
+    return FontCache::getGenericFamilyNameForScript(
+        FontFamilyNames::webkit_standard, fontDescription);
 
-  if (generic_family_name.StartsWith("-webkit-"))
-    return FontCache::GetGenericFamilyNameForScript(generic_family_name,
-                                                    font_description);
+  if (genericFamilyName.startsWith("-webkit-"))
+    return FontCache::getGenericFamilyNameForScript(genericFamilyName,
+                                                    fontDescription);
 #else
   UScriptCode script = font_description.Script();
   if (font_description.GenericFamily() == FontDescription::kStandardFamily)
diff --git a/third_party/WebKit/Source/core/css/parser/CSSParserFastPaths.cpp b/third_party/WebKit/Source/core/css/parser/CSSParserFastPaths.cpp
index 78687de262ab..588382460715 100644
--- a/third_party/WebKit/Source/core/css/parser/CSSParserFastPaths.cpp
+++ b/third_party/WebKit/Source/core/css/parser/CSSParserFastPaths.cpp
@@ -764,8 +764,8 @@ bool CSSParserFastPaths::IsValidKeywordPropertyAndValue(
              value_id == CSSValueWrapReverse;
     case CSSPropertyHyphens:
 #if OS(ANDROID) || OS(MACOSX)
-      return value_id == CSSValueAuto || value_id == CSSValueNone ||
-             value_id == CSSValueManual;
+      return valueID == CSSValueAuto || valueID == CSSValueNone ||
+             valueID == CSSValueManual;
 #else
       return value_id == CSSValueNone || value_id == CSSValueManual;
 #endif
diff --git a/third_party/WebKit/Source/core/css/resolver/StyleBuilderConverter.cpp b/third_party/WebKit/Source/core/css/resolver/StyleBuilderConverter.cpp
index ee3bb4d44f53..77da324d309f 100644
--- a/third_party/WebKit/Source/core/css/resolver/StyleBuilderConverter.cpp
+++ b/third_party/WebKit/Source/core/css/resolver/StyleBuilderConverter.cpp
@@ -195,9 +195,9 @@ static bool ConvertFontFamilyName(
     generic_family = FontDescription::kNoFamily;
     family_name = AtomicString(ToCSSFontFamilyValue(value).Value());
 #if OS(MACOSX)
-    if (family_name == FontCache::LegacySystemFontFamily()) {
-      UseCounter::Count(state.GetDocument(), UseCounter::kBlinkMacSystemFont);
-      family_name = FontFamilyNames::system_ui;
+    if (familyName == FontCache::legacySystemFontFamily()) {
+      UseCounter::count(state.document(), UseCounter::BlinkMacSystemFont);
+      familyName = FontFamilyNames::system_ui;
     }
 #endif
   } else if (state.GetDocument().GetSettings()) {
diff --git a/third_party/WebKit/Source/core/dom/ViewportDescription.cpp b/third_party/WebKit/Source/core/dom/ViewportDescription.cpp
index 565273fa99af..f07c165366e7 100644
--- a/third_party/WebKit/Source/core/dom/ViewportDescription.cpp
+++ b/third_party/WebKit/Source/core/dom/ViewportDescription.cpp
@@ -239,62 +239,62 @@ void ViewportDescription::ReportMobilePageStats(
     const LocalFrame* main_frame) const {
 #if OS(ANDROID)
   enum ViewportUMAType {
-    kNoViewportTag,
-    kDeviceWidth,
-    kConstantWidth,
-    kMetaWidthOther,
-    kMetaHandheldFriendly,
-    kMetaMobileOptimized,
-    kXhtmlMobileProfile,
-    kTypeCount
+    NoViewportTag,
+    DeviceWidth,
+    ConstantWidth,
+    MetaWidthOther,
+    MetaHandheldFriendly,
+    MetaMobileOptimized,
+    XhtmlMobileProfile,
+    TypeCount
   };
 
-  if (!main_frame || !main_frame->GetPage() || !main_frame->View() ||
-      !main_frame->GetDocument())
+  if (!mainFrame || !mainFrame->page() || !mainFrame->view() ||
+      !mainFrame->document())
     return;
 
   // Avoid chrome:// pages like the new-tab page (on Android new tab is
   // non-http).
-  if (!main_frame->GetDocument()->Url().ProtocolIsInHTTPFamily())
+  if (!mainFrame->document()->url().protocolIsInHTTPFamily())
     return;
 
-  DEFINE_STATIC_LOCAL(EnumerationHistogram, meta_tag_type_histogram,
-                      ("Viewport.MetaTagType", kTypeCount));
-  if (!IsSpecifiedByAuthor()) {
-    meta_tag_type_histogram.Count(main_frame->GetDocument()->IsMobileDocument()
-                                   ? kXhtmlMobileProfile
-                                   : kNoViewportTag);
+  DEFINE_STATIC_LOCAL(EnumerationHistogram, metaTagTypeHistogram,
+                      ("Viewport.MetaTagType", TypeCount));
+  if (!isSpecifiedByAuthor()) {
+    metaTagTypeHistogram.count(mainFrame->document()->isMobileDocument()
+                                   ? XhtmlMobileProfile
+                                   : NoViewportTag);
     return;
   }
 
-  if (IsMetaViewportType()) {
-    if (max_width.GetType() == blink::kFixed) {
-      meta_tag_type_histogram.Count(kConstantWidth);
+  if (isMetaViewportType()) {
+    if (maxWidth.type() == blink::Fixed) {
+      metaTagTypeHistogram.count(ConstantWidth);
 
-      if (main_frame->View()) {
+      if (mainFrame->view()) {
         // To get an idea of how "far" the viewport is from the device's ideal
         // width, we report the zoom level that we'd need to be at for the
         // entire page to be visible.
-        int viewport_width = max_width.IntValue();
-        int window_width = main_frame->GetPage()->GetVisualViewport().size().Width();
-        int overview_zoom_percent =
-            100 * window_width / static_cast<float>(viewport_width);
-        DEFINE_STATIC_LOCAL(SparseHistogram, overview_zoom_histogram,
+        int viewportWidth = maxWidth.intValue();
+        int windowWidth = mainFrame->page()->visualViewport().size().width();
+        int overviewZoomPercent =
+            100 * windowWidth / static_cast<float>(viewportWidth);
+        DEFINE_STATIC_LOCAL(SparseHistogram, overviewZoomHistogram,
                             ("Viewport.OverviewZoom"));
-        overview_zoom_histogram.Sample(overview_zoom_percent);
+        overviewZoomHistogram.sample(overviewZoomPercent);
       }
 
-    } else if (max_width.GetType() == blink::kDeviceWidth ||
-               max_width.GetType() == blink::kExtendToZoom) {
-      meta_tag_type_histogram.Count(kDeviceWidth);
+    } else if (maxWidth.type() == blink::DeviceWidth ||
+               maxWidth.type() == blink::ExtendToZoom) {
+      metaTagTypeHistogram.count(DeviceWidth);
     } else {
       // Overflow bucket for cases we may be unaware of.
-      meta_tag_type_histogram.Count(kMetaWidthOther);
+      metaTagTypeHistogram.count(MetaWidthOther);
     }
-  } else if (type == ViewportDescription::kHandheldFriendlyMeta) {
-    meta_tag_type_histogram.Count(kMetaHandheldFriendly);
-  } else if (type == ViewportDescription::kMobileOptimizedMeta) {
-    meta_tag_type_histogram.Count(kMetaMobileOptimized);
+  } else if (type == ViewportDescription::HandheldFriendlyMeta) {
+    metaTagTypeHistogram.count(MetaHandheldFriendly);
+  } else if (type == ViewportDescription::MobileOptimizedMeta) {
+    metaTagTypeHistogram.count(MetaMobileOptimized);
   }
 #endif
 }
diff --git a/third_party/WebKit/Source/core/editing/EditingBehavior.cpp b/third_party/WebKit/Source/core/editing/EditingBehavior.cpp
index 1bd775730744..901840565e3b 100644
--- a/third_party/WebKit/Source/core/editing/EditingBehavior.cpp
+++ b/third_party/WebKit/Source/core/editing/EditingBehavior.cpp
@@ -45,14 +45,14 @@ const unsigned kMetaKey = WebInputEvent::kMetaKey;
 #if OS(MACOSX)
 // Aliases for the generic key defintions to make kbd shortcuts definitions more
 // readable on OS X.
-const unsigned kOptionKey = kAltKey;
+const unsigned OptionKey = AltKey;
 
 // Do not use this constant for anything but cursor movement commands. Keys
 // with cmd set have their |isSystemKey| bit set, so chances are the shortcut
 // will not be executed. Another, less important, reason is that shortcuts
 // defined in the layoutObject do not blink the menu item that they triggered.
 // See http://crbug.com/25856 and the bugs linked from there for details.
-const unsigned kCommandKey = kMetaKey;
+const unsigned CommandKey = MetaKey;
 #endif
 
 // Keys with special meaning. These will be delegated to the editor using
@@ -86,8 +86,8 @@ const KeyboardCodeKeyDownEntry kKeyboardCodeKeyDownEntries[] = {
     {VKEY_LEFT, 0, "MoveLeft"},
     {VKEY_LEFT, kShiftKey, "MoveLeftAndModifySelection"},
 #if OS(MACOSX)
-    {VKEY_LEFT, kOptionKey, "MoveWordLeft"},
-    {VKEY_LEFT, kOptionKey | kShiftKey, "MoveWordLeftAndModifySelection"},
+    {VKEY_LEFT, OptionKey, "MoveWordLeft"},
+    {VKEY_LEFT, OptionKey | ShiftKey, "MoveWordLeftAndModifySelection"},
 #else
     {VKEY_LEFT, kCtrlKey, "MoveWordLeft"},
     {VKEY_LEFT, kCtrlKey | kShiftKey, "MoveWordLeftAndModifySelection"},
@@ -95,8 +95,8 @@ const KeyboardCodeKeyDownEntry kKeyboardCodeKeyDownEntries[] = {
     {VKEY_RIGHT, 0, "MoveRight"},
     {VKEY_RIGHT, kShiftKey, "MoveRightAndModifySelection"},
 #if OS(MACOSX)
-    {VKEY_RIGHT, kOptionKey, "MoveWordRight"},
-    {VKEY_RIGHT, kOptionKey | kShiftKey, "MoveWordRightAndModifySelection"},
+    {VKEY_RIGHT, OptionKey, "MoveWordRight"},
+    {VKEY_RIGHT, OptionKey | ShiftKey, "MoveWordRightAndModifySelection"},
 #else
     {VKEY_RIGHT, kCtrlKey, "MoveWordRight"},
     {VKEY_RIGHT, kCtrlKey | kShiftKey, "MoveWordRightAndModifySelection"},
@@ -118,8 +118,8 @@ const KeyboardCodeKeyDownEntry kKeyboardCodeKeyDownEntries[] = {
     {VKEY_HOME, 0, "MoveToBeginningOfLine"},
     {VKEY_HOME, kShiftKey, "MoveToBeginningOfLineAndModifySelection"},
 #if OS(MACOSX)
-    {VKEY_PRIOR, kOptionKey, "MovePageUp"},
-    {VKEY_NEXT, kOptionKey, "MovePageDown"},
+    {VKEY_PRIOR, OptionKey, "MovePageUp"},
+    {VKEY_NEXT, OptionKey, "MovePageDown"},
 #endif
 #if !OS(MACOSX)
     {VKEY_HOME, kCtrlKey, "MoveToBeginningOfDocument"},
@@ -136,15 +136,15 @@ const KeyboardCodeKeyDownEntry kKeyboardCodeKeyDownEntries[] = {
     {VKEY_BACK, kShiftKey, "DeleteBackward"},
     {VKEY_DELETE, 0, "DeleteForward"},
 #if OS(MACOSX)
-    {VKEY_BACK, kOptionKey, "DeleteWordBackward"},
-    {VKEY_DELETE, kOptionKey, "DeleteWordForward"},
+    {VKEY_BACK, OptionKey, "DeleteWordBackward"},
+    {VKEY_DELETE, OptionKey, "DeleteWordForward"},
 #else
     {VKEY_BACK, kCtrlKey, "DeleteWordBackward"},
     {VKEY_DELETE, kCtrlKey, "DeleteWordForward"},
 #endif
 #if OS(MACOSX)
-    {'B', kCommandKey, "ToggleBold"},
-    {'I', kCommandKey, "ToggleItalic"},
+    {'B', CommandKey, "ToggleBold"},
+    {'I', CommandKey, "ToggleItalic"},
 #else
     {'B', kCtrlKey, "ToggleBold"},
     {'I', kCtrlKey, "ToggleItalic"},
diff --git a/third_party/WebKit/Source/core/editing/EphemeralRange.cpp b/third_party/WebKit/Source/core/editing/EphemeralRange.cpp
index 312917f54e57..ef36b6015475 100644
--- a/third_party/WebKit/Source/core/editing/EphemeralRange.cpp
+++ b/third_party/WebKit/Source/core/editing/EphemeralRange.cpp
@@ -154,7 +154,7 @@ bool EphemeralRangeTemplate<Strategy>::IsValid() const {
 }
 #else
 template <typename Strategy>
-bool EphemeralRangeTemplate<Strategy>::IsValid() const {
+bool EphemeralRangeTemplate<Strategy>::isValid() const {
   return true;
 }
 #endif
diff --git a/third_party/WebKit/Source/core/editing/SelectionTemplate.cpp b/third_party/WebKit/Source/core/editing/SelectionTemplate.cpp
index b15f73920f74..95b219d0928f 100644
--- a/third_party/WebKit/Source/core/editing/SelectionTemplate.cpp
+++ b/third_party/WebKit/Source/core/editing/SelectionTemplate.cpp
@@ -106,7 +106,7 @@ bool SelectionTemplate<Strategy>::AssertValid() const {
 }
 #else
 template <typename Strategy>
-bool SelectionTemplate<Strategy>::AssertValid() const {
+bool SelectionTemplate<Strategy>::assertValid() const {
   return true;
 }
 #endif
diff --git a/third_party/WebKit/Source/core/events/KeyboardEvent.cpp b/third_party/WebKit/Source/core/events/KeyboardEvent.cpp
index a95461360d5f..2686556e96c4 100644
--- a/third_party/WebKit/Source/core/events/KeyboardEvent.cpp
+++ b/third_party/WebKit/Source/core/events/KeyboardEvent.cpp
@@ -158,8 +158,8 @@ int KeyboardEvent::keyCode() const {
 #if OS(ANDROID)
   // FIXME: Check to see if this applies to other OS.
   // If the key event belongs to IME composition then propagate to JS.
-  if (key_event_->native_key_code == 0xE5)  // VKEY_PROCESSKEY
-    return key_event_->native_key_code;
+  if (m_keyEvent->nativeKeyCode == 0xE5)  // VKEY_PROCESSKEY
+    return m_keyEvent->nativeKeyCode;
 #endif
 
   if (type() == EventTypeNames::keydown || type() == EventTypeNames::keyup)
diff --git a/third_party/WebKit/Source/core/events/UIEventWithKeyState.cpp b/third_party/WebKit/Source/core/events/UIEventWithKeyState.cpp
index 3acf4c046e46..c3ef706607f4 100644
--- a/third_party/WebKit/Source/core/events/UIEventWithKeyState.cpp
+++ b/third_party/WebKit/Source/core/events/UIEventWithKeyState.cpp
@@ -73,7 +73,7 @@ void UIEventWithKeyState::DidCreateEventInIsolatedWorld(bool ctrl_key,
                                                         bool alt_key,
                                                         bool meta_key) {
 #if OS(MACOSX)
-  const bool new_tab_modifier_set = meta_key;
+  const bool newTabModifierSet = metaKey;
 #else
   const bool new_tab_modifier_set = ctrl_key;
 #endif
@@ -118,7 +118,7 @@ bool UIEventWithKeyState::getModifierState(const String& key_identifier) const {
       {"AltGraph", WebInputEvent::kAltGrKey},
       {"Accel",
 #if OS(MACOSX)
-       WebInputEvent::kMetaKey
+       WebInputEvent::MetaKey
 #else
        WebInputEvent::kControlKey
 #endif
diff --git a/third_party/WebKit/Source/core/frame/FrameViewTest.cpp b/third_party/WebKit/Source/core/frame/FrameViewTest.cpp
index f318888b8b13..c8c6c58a6064 100644
--- a/third_party/WebKit/Source/core/frame/FrameViewTest.cpp
+++ b/third_party/WebKit/Source/core/frame/FrameViewTest.cpp
@@ -35,7 +35,7 @@ class MockChromeClient : public EmptyChromeClient {
 
   // ChromeClient
   MOCK_METHOD2(AttachRootGraphicsLayer,
-               void(GraphicsLayer*, LocalFrame* localRoot));
+               void(GraphicsLayer*, LocalFrame* local_root));
   MOCK_METHOD3(MockSetToolTip, void(LocalFrame*, const String&, TextDirection));
   void SetToolTip(LocalFrame& frame,
                   const String& tooltip_text,
diff --git a/third_party/WebKit/Source/core/frame/Settings.cpp b/third_party/WebKit/Source/core/frame/Settings.cpp
index a8a85c6d75fb..016ab3446a32 100644
--- a/third_party/WebKit/Source/core/frame/Settings.cpp
+++ b/third_party/WebKit/Source/core/frame/Settings.cpp
@@ -43,11 +43,11 @@ namespace blink {
 static EditingBehaviorType EditingBehaviorTypeForPlatform() {
   return
 #if OS(MACOSX)
-      kEditingMacBehavior
+      EditingMacBehavior
 #elif OS(WIN)
-      kEditingWindowsBehavior
+      EditingWindowsBehavior
 #elif OS(ANDROID)
-      kEditingAndroidBehavior
+      EditingAndroidBehavior
 #else  // Rest of the UNIX-like systems
       kEditingUnixBehavior
 #endif
@@ -55,7 +55,7 @@ static EditingBehaviorType EditingBehaviorTypeForPlatform() {
 }
 
 #if OS(WIN)
-static const bool kDefaultSelectTrailingWhitespaceEnabled = true;
+static const bool defaultSelectTrailingWhitespaceEnabled = true;
 #else
 static const bool kDefaultSelectTrailingWhitespaceEnabled = false;
 #endif
diff --git a/third_party/WebKit/Source/core/html/HTMLCanvasElement.cpp b/third_party/WebKit/Source/core/html/HTMLCanvasElement.cpp
index 192b4e7b8ecf..cf2046f2c865 100644
--- a/third_party/WebKit/Source/core/html/HTMLCanvasElement.cpp
+++ b/third_party/WebKit/Source/core/html/HTMLCanvasElement.cpp
@@ -96,7 +96,7 @@ const int kDefaultHeight = 150;
 #if OS(ANDROID)
 // We estimate that the max limit for android phones is a quarter of that for
 // desktops based on local experimental results on Android One.
-const int kMaxGlobalAcceleratedImageBufferCount = 25;
+const int MaxGlobalAcceleratedImageBufferCount = 25;
 #else
 const int kMaxGlobalAcceleratedImageBufferCount = 100;
 #endif
diff --git a/third_party/WebKit/Source/core/html/HTMLSelectElement.cpp b/third_party/WebKit/Source/core/html/HTMLSelectElement.cpp
index f85afb2d0bb0..922ccdf449bc 100644
--- a/third_party/WebKit/Source/core/html/HTMLSelectElement.cpp
+++ b/third_party/WebKit/Source/core/html/HTMLSelectElement.cpp
@@ -1485,8 +1485,8 @@ void HTMLSelectElement::ListBoxDefaultEventHandler(Event* event) {
     if (HTMLOptionElement* option = EventTargetOption(*mouse_event)) {
       if (!IsDisabledFormControl()) {
 #if OS(MACOSX)
-        UpdateSelectedState(option, mouse_event->metaKey(),
-                            mouse_event->shiftKey());
+        updateSelectedState(option, mouseEvent->metaKey(),
+                            mouseEvent->shiftKey());
 #else
         UpdateSelectedState(option, mouse_event->ctrlKey(),
                             mouse_event->shiftKey());
diff --git a/third_party/WebKit/Source/core/html/canvas/CanvasAsyncBlobCreator.cpp b/third_party/WebKit/Source/core/html/canvas/CanvasAsyncBlobCreator.cpp
index fed14d470e9a..6075b4c99fee 100644
--- a/third_party/WebKit/Source/core/html/canvas/CanvasAsyncBlobCreator.cpp
+++ b/third_party/WebKit/Source/core/html/canvas/CanvasAsyncBlobCreator.cpp
@@ -44,7 +44,7 @@ const double kIdleTaskStartTimeoutDelay = 200.0;
 const double kIdleTaskCompleteTimeoutDelay = 6700.0;
 #else
 // Png image encoding on 4k by 4k canvas on Android One takes 9.0+ seconds
-const double kIdleTaskCompleteTimeoutDelay = 10000.0;
+const double IdleTaskCompleteTimeoutDelay = 10000.0;
 #endif
 
 bool IsDeadlineNearOrPassed(double deadline_seconds) {
diff --git a/third_party/WebKit/Source/core/input/EventHandler.cpp b/third_party/WebKit/Source/core/input/EventHandler.cpp
index 752a4feb8e39..d35e64215425 100644
--- a/third_party/WebKit/Source/core/input/EventHandler.cpp
+++ b/third_party/WebKit/Source/core/input/EventHandler.cpp
@@ -1234,12 +1234,12 @@ WebInputEventResult EventHandler::HandleWheelEvent(
   // TODO(chongz): EventSender sends events with
   // |WebMouseWheelEvent::PhaseNone|,
   // but it shouldn't.
-  const int kWheelEventPhaseNoEventMask = WebMouseWheelEvent::kPhaseEnded |
-                                          WebMouseWheelEvent::kPhaseCancelled |
-                                          WebMouseWheelEvent::kPhaseMayBegin;
+  const int kWheelEventPhaseNoEventMask = WebMouseWheelEvent::PhaseEnded |
+                                          WebMouseWheelEvent::PhaseCancelled |
+                                          WebMouseWheelEvent::PhaseMayBegin;
   if ((event.phase & kWheelEventPhaseNoEventMask) ||
-      (event.momentum_phase & kWheelEventPhaseNoEventMask))
-    return WebInputEventResult::kNotHandled;
+      (event.momentumPhase & kWheelEventPhaseNoEventMask))
+    return WebInputEventResult::NotHandled;
 #endif
   Document* doc = frame_->GetDocument();
 
@@ -1780,7 +1780,7 @@ WebInputEventResult EventHandler::SendContextMenuEventForKey(
   static const int kContextMenuMargin = 1;
 
 #if OS(WIN)
-  int right_aligned = ::GetSystemMetrics(SM_MENUDROPALIGNMENT);
+  int rightAligned = ::GetSystemMetrics(SM_MENUDROPALIGNMENT);
 #else
   int right_aligned = 0;
 #endif
diff --git a/third_party/WebKit/Source/core/input/KeyboardEventManager.cpp b/third_party/WebKit/Source/core/input/KeyboardEventManager.cpp
index 8b492f013e03..d0ee5ae28aba 100644
--- a/third_party/WebKit/Source/core/input/KeyboardEventManager.cpp
+++ b/third_party/WebKit/Source/core/input/KeyboardEventManager.cpp
@@ -36,7 +36,7 @@ namespace blink {
 namespace {
 
 #if OS(WIN)
-static const unsigned short kHIGHBITMASKSHORT = 0x8000;
+static const unsigned short HIGHBITMASKSHORT = 0x8000;
 #endif
 
 const int kVKeyProcessKey = 229;
@@ -247,9 +247,9 @@ WebInputEventResult KeyboardEventManager::KeyEvent(
   // function keys. However, some actual private use characters happen to be
   // in this range, e.g. the Apple logo (Option+Shift+K). 0xF7FF is an
   // arbitrary cut-off.
-  if (initial_key_event.text[0U] >= 0xF700 &&
-      initial_key_event.text[0U] <= 0xF7FF) {
-    return WebInputEventResult::kNotHandled;
+  if (initialKeyEvent.text[0U] >= 0xF700 &&
+      initialKeyEvent.text[0U] <= 0xF7FF) {
+    return WebInputEventResult::NotHandled;
   }
 #endif
 
@@ -452,22 +452,22 @@ bool KeyboardEventManager::CurrentCapsLockState() {
 WebInputEvent::Modifiers KeyboardEventManager::GetCurrentModifierState() {
   unsigned modifiers = 0;
 #if OS(WIN)
-  if (GetKeyState(VK_SHIFT) & kHIGHBITMASKSHORT)
-    modifiers |= WebInputEvent::kShiftKey;
-  if (GetKeyState(VK_CONTROL) & kHIGHBITMASKSHORT)
-    modifiers |= WebInputEvent::kControlKey;
-  if (GetKeyState(VK_MENU) & kHIGHBITMASKSHORT)
-    modifiers |= WebInputEvent::kAltKey;
+  if (GetKeyState(VK_SHIFT) & HIGHBITMASKSHORT)
+    modifiers |= WebInputEvent::ShiftKey;
+  if (GetKeyState(VK_CONTROL) & HIGHBITMASKSHORT)
+    modifiers |= WebInputEvent::ControlKey;
+  if (GetKeyState(VK_MENU) & HIGHBITMASKSHORT)
+    modifiers |= WebInputEvent::AltKey;
 #elif OS(MACOSX)
-  UInt32 current_modifiers = GetCurrentKeyModifiers();
-  if (current_modifiers & ::shiftKey)
-    modifiers |= WebInputEvent::kShiftKey;
-  if (current_modifiers & ::controlKey)
-    modifiers |= WebInputEvent::kControlKey;
-  if (current_modifiers & ::optionKey)
-    modifiers |= WebInputEvent::kAltKey;
-  if (current_modifiers & ::cmdKey)
-    modifiers |= WebInputEvent::kMetaKey;
+  UInt32 currentModifiers = GetCurrentKeyModifiers();
+  if (currentModifiers & ::shiftKey)
+    modifiers |= WebInputEvent::ShiftKey;
+  if (currentModifiers & ::controlKey)
+    modifiers |= WebInputEvent::ControlKey;
+  if (currentModifiers & ::optionKey)
+    modifiers |= WebInputEvent::AltKey;
+  if (currentModifiers & ::cmdKey)
+    modifiers |= WebInputEvent::MetaKey;
 #else
   // TODO(crbug.com/538289): Implement on other platforms.
   return static_cast<WebInputEvent::Modifiers>(0);
diff --git a/third_party/WebKit/Source/core/input/MouseEventManager.cpp b/third_party/WebKit/Source/core/input/MouseEventManager.cpp
index f4c508606e89..b970d5577ade 100644
--- a/third_party/WebKit/Source/core/input/MouseEventManager.cpp
+++ b/third_party/WebKit/Source/core/input/MouseEventManager.cpp
@@ -242,9 +242,9 @@ WebInputEventResult MouseEventManager::DispatchMouseClickIfNeeded(
   // FIXME: The Mac port achieves the same behavior by checking whether the
   // context menu is currently open in WebPage::mouseEvent(). Consider merging
   // the implementations.
-  if (mev.Event().button == WebPointerProperties::Button::kLeft &&
-      mev.Event().GetModifiers() & WebInputEvent::Modifiers::kControlKey)
-    context_menu_event = true;
+  if (mev.event().button == WebPointerProperties::Button::Left &&
+      mev.event().modifiers() & WebInputEvent::Modifiers::ControlKey)
+    contextMenuEvent = true;
 #endif
 
   WebInputEventResult click_event_result = WebInputEventResult::kNotHandled;
diff --git a/third_party/WebKit/Source/core/layout/LayoutBlockFlowLine.cpp b/third_party/WebKit/Source/core/layout/LayoutBlockFlowLine.cpp
index 3bd0992d99cb..2cebd35dbcb7 100644
--- a/third_party/WebKit/Source/core/layout/LayoutBlockFlowLine.cpp
+++ b/third_party/WebKit/Source/core/layout/LayoutBlockFlowLine.cpp
@@ -572,9 +572,9 @@ static inline void SetLogicalWidthForTextRun(
 #if OS(MACOSX)
   // FIXME: Having any font feature settings enabled can lead to selection gaps
   // on Chromium-mac. https://bugs.webkit.org/show_bug.cgi?id=113418
-  bool can_use_cached_word_measurements =
-      font.CanShapeWordByWord() &&
-      !font.GetFontDescription().FeatureSettings() && layout_text.Is8Bit();
+  bool canUseCachedWordMeasurements =
+      font.canShapeWordByWord() &&
+      !font.getFontDescription().featureSettings() && layoutText.is8Bit();
 #else
   bool can_use_cached_word_measurements =
       font.CanShapeWordByWord() && layout_text.Is8Bit();
diff --git a/third_party/WebKit/Source/core/layout/LayoutBoxTest.cpp b/third_party/WebKit/Source/core/layout/LayoutBoxTest.cpp
index ccc2e79416bc..8ba8ff20f9a8 100644
--- a/third_party/WebKit/Source/core/layout/LayoutBoxTest.cpp
+++ b/third_party/WebKit/Source/core/layout/LayoutBoxTest.cpp
@@ -225,7 +225,7 @@ TEST_F(LayoutBoxTest, ControlClip) {
   EXPECT_TRUE(target->HasClipRelatedProperty());
   EXPECT_TRUE(target->ShouldClipOverflow());
 #if OS(MACOSX)
-  EXPECT_EQ(LayoutRect(0, 0, 100, 18), target->ClippingRect());
+  EXPECT_EQ(LayoutRect(0, 0, 100, 18), target->clippingRect());
 #else
   EXPECT_EQ(LayoutRect(2, 2, 96, 46), target->ClippingRect());
 #endif
diff --git a/third_party/WebKit/Source/core/layout/LayoutThemeMobile.cpp b/third_party/WebKit/Source/core/layout/LayoutThemeMobile.cpp
index 558afbcf6687..96918d9bc8a0 100644
--- a/third_party/WebKit/Source/core/layout/LayoutThemeMobile.cpp
+++ b/third_party/WebKit/Source/core/layout/LayoutThemeMobile.cpp
@@ -70,8 +70,8 @@ bool LayoutThemeMobile::ShouldUseFallbackTheme(
     const ComputedStyle& style) const {
 #if OS(MACOSX)
   // Mac WebThemeEngine cannot handle these controls.
-  ControlPart part = style.Appearance();
-  if (part == kCheckboxPart || part == kRadioPart)
+  ControlPart part = style.appearance();
+  if (part == CheckboxPart || part == RadioPart)
     return true;
 #endif
   return LayoutThemeDefault::ShouldUseFallbackTheme(style);
diff --git a/third_party/WebKit/Source/core/loader/NavigationPolicy.cpp b/third_party/WebKit/Source/core/loader/NavigationPolicy.cpp
index d1caf3c4bf05..8482fd0d8ff9 100644
--- a/third_party/WebKit/Source/core/loader/NavigationPolicy.cpp
+++ b/third_party/WebKit/Source/core/loader/NavigationPolicy.cpp
@@ -41,7 +41,7 @@ bool NavigationPolicyFromMouseEvent(unsigned short button,
                                     bool meta,
                                     NavigationPolicy* policy) {
 #if OS(MACOSX)
-  const bool new_tab_modifier = (button == 1) || meta;
+  const bool newTabModifier = (button == 1) || meta;
 #else
   const bool new_tab_modifier = (button == 1) || ctrl;
 #endif
diff --git a/third_party/WebKit/Source/core/page/DragController.cpp b/third_party/WebKit/Source/core/page/DragController.cpp
index a340d4b80170..d49c92dd3ac8 100644
--- a/third_party/WebKit/Source/core/page/DragController.cpp
+++ b/third_party/WebKit/Source/core/page/DragController.cpp
@@ -972,7 +972,7 @@ static IntPoint DragLocationForSelectionDrag(LocalFrame* source_frame) {
 static const IntSize MaxDragImageSize(float device_scale_factor) {
 #if OS(MACOSX)
   // Match Safari's drag image size.
-  static const IntSize kMaxDragImageSize(400, 400);
+  static const IntSize maxDragImageSize(400, 400);
 #else
   static const IntSize kMaxDragImageSize(200, 200);
 #endif
@@ -1241,7 +1241,7 @@ bool DragController::IsCopyKeyDown(DragData* drag_data) {
   int modifiers = drag_data->GetModifiers();
 
 #if OS(MACOSX)
-  return modifiers & WebInputEvent::kAltKey;
+  return modifiers & WebInputEvent::AltKey;
 #else
   return modifiers & WebInputEvent::kControlKey;
 #endif
diff --git a/third_party/WebKit/Source/core/paint/PaintLayerClipperTest.cpp b/third_party/WebKit/Source/core/paint/PaintLayerClipperTest.cpp
index 87bc225dd8e1..adf5bb1a1632 100644
--- a/third_party/WebKit/Source/core/paint/PaintLayerClipperTest.cpp
+++ b/third_party/WebKit/Source/core/paint/PaintLayerClipperTest.cpp
@@ -101,10 +101,10 @@ TEST_P(PaintLayerClipperTest, ControlClip) {
 #if OS(MACOSX)
   // If the PaintLayer clips overflow, the background rect is intersected with
   // the PaintLayer bounds...
-  EXPECT_EQ(LayoutRect(3, 4, 210, 28), background_rect.Rect());
+  EXPECT_EQ(LayoutRect(3, 4, 210, 28), backgroundRect.rect());
   // and the foreground rect is intersected with the control clip in this case.
-  EXPECT_EQ(LayoutRect(8, 8, 200, 18), foreground_rect.Rect());
-  EXPECT_EQ(LayoutRect(8, 8, 200, 18), layer_bounds);
+  EXPECT_EQ(LayoutRect(8, 8, 200, 18), foregroundRect.rect());
+  EXPECT_EQ(LayoutRect(8, 8, 200, 18), layerBounds);
 #else
   // If the PaintLayer clips overflow, the background rect is intersected with
   // the PaintLayer bounds...
@@ -214,9 +214,9 @@ TEST_P(PaintLayerClipperTest, ControlClipSelect) {
       background_rect, foreground_rect);
 // The control clip for a select excludes the area for the down arrow.
 #if OS(MACOSX)
-  EXPECT_EQ(LayoutRect(16, 9, 79, 13), foreground_rect.Rect());
+  EXPECT_EQ(LayoutRect(16, 9, 79, 13), foregroundRect.rect());
 #elif OS(WIN)
-  EXPECT_EQ(LayoutRect(17, 9, 60, 16), foreground_rect.Rect());
+  EXPECT_EQ(LayoutRect(17, 9, 60, 16), foregroundRect.rect());
 #else
   EXPECT_EQ(LayoutRect(17, 9, 60, 15), foreground_rect.Rect());
 #endif
diff --git a/third_party/WebKit/Source/core/style/ComputedStyle.cpp b/third_party/WebKit/Source/core/style/ComputedStyle.cpp
index 69aa36a11299..c98ecfcda9be 100644
--- a/third_party/WebKit/Source/core/style/ComputedStyle.cpp
+++ b/third_party/WebKit/Source/core/style/ComputedStyle.cpp
@@ -2322,7 +2322,7 @@ int ComputedStyle::OutlineOutsetExtent() const {
 
 float ComputedStyle::GetOutlineStrokeWidthForFocusRing() const {
 #if OS(MACOSX)
-  return OutlineWidth();
+  return outlineWidth();
 #else
   // Draw an outline with thickness in proportion to the zoom level, but never
   // less than 1 pixel so that it remains visible.
diff --git a/third_party/WebKit/Source/core/style/ComputedStyleTest.cpp b/third_party/WebKit/Source/core/style/ComputedStyleTest.cpp
index 5d615bd9a17a..25272246336e 100644
--- a/third_party/WebKit/Source/core/style/ComputedStyleTest.cpp
+++ b/third_party/WebKit/Source/core/style/ComputedStyleTest.cpp
@@ -47,8 +47,8 @@ TEST(ComputedStyleTest, FocusRingWidth) {
   RefPtr<ComputedStyle> style = ComputedStyle::Create();
   style->SetEffectiveZoom(3.5);
 #if OS(MACOSX)
-  style->SetOutlineStyle(kBorderStyleSolid);
-  ASSERT_EQ(3, style->GetOutlineStrokeWidthForFocusRing());
+  style->setOutlineStyle(BorderStyleSolid);
+  ASSERT_EQ(3, style->getOutlineStrokeWidthForFocusRing());
 #else
   ASSERT_EQ(3.5, style->GetOutlineStrokeWidthForFocusRing());
   style->SetEffectiveZoom(0.5);
@@ -62,7 +62,7 @@ TEST(ComputedStyleTest, FocusRingOutset) {
   style->SetOutlineStyleIsAuto(kOutlineIsAutoOn);
   style->SetEffectiveZoom(4.75);
 #if OS(MACOSX)
-  ASSERT_EQ(4, style->OutlineOutsetExtent());
+  ASSERT_EQ(4, style->outlineOutsetExtent());
 #else
   ASSERT_EQ(3, style->OutlineOutsetExtent());
 #endif
diff --git a/third_party/WebKit/Source/core/svg/SVGMatrixTearOff.cpp b/third_party/WebKit/Source/core/svg/SVGMatrixTearOff.cpp
index c8b7089dc549..e431a6f2553b 100644
--- a/third_party/WebKit/Source/core/svg/SVGMatrixTearOff.cpp
+++ b/third_party/WebKit/Source/core/svg/SVGMatrixTearOff.cpp
@@ -73,9 +73,9 @@ void SVGMatrixTearOff::CommitChange() {
 
 #define DEFINE_SETTER(ATTRIBUTE)                                          \
   void SVGMatrixTearOff::set##ATTRIBUTE(double f,                         \
-                                        ExceptionState& exceptionState) { \
+                                        ExceptionState& exception_state) { \
     if (context_transform_ && context_transform_->IsImmutable()) {        \
-      SVGPropertyTearOffBase::ThrowReadOnly(exceptionState);              \
+      SVGPropertyTearOffBase::ThrowReadOnly(exception_state);              \
       return;                                                             \
     }                                                                     \
     MutableValue()->Set##ATTRIBUTE(f);                                    \
diff --git a/third_party/WebKit/Source/core/workers/WorkerThreadTest.cpp b/third_party/WebKit/Source/core/workers/WorkerThreadTest.cpp
index 7cbca2b42120..b02be683d0be 100644
--- a/third_party/WebKit/Source/core/workers/WorkerThreadTest.cpp
+++ b/third_party/WebKit/Source/core/workers/WorkerThreadTest.cpp
@@ -30,7 +30,7 @@ class MockWorkerReportingProxy final : public WorkerReportingProxy {
   MOCK_METHOD1(DidCreateWorkerGlobalScope, void(WorkerOrWorkletGlobalScope*));
   MOCK_METHOD0(DidInitializeWorkerContext, void());
   MOCK_METHOD2(WillEvaluateWorkerScriptMock,
-               void(size_t scriptSize, size_t cachedMetadataSize));
+               void(size_t script_size, size_t cached_metadata_size));
   MOCK_METHOD1(DidEvaluateWorkerScript, void(bool success));
   MOCK_METHOD0(DidCloseWorkerGlobalScope, void());
   MOCK_METHOD0(WillDestroyWorkerGlobalScope, void());
diff --git a/third_party/WebKit/Source/modules/payments/PaymentRequestUpdateEventTest.cpp b/third_party/WebKit/Source/modules/payments/PaymentRequestUpdateEventTest.cpp
index c5bc819c9eb5..54c807735c69 100644
--- a/third_party/WebKit/Source/modules/payments/PaymentRequestUpdateEventTest.cpp
+++ b/third_party/WebKit/Source/modules/payments/PaymentRequestUpdateEventTest.cpp
@@ -29,7 +29,7 @@ class MockPaymentUpdater : public GarbageCollectedFinalized<MockPaymentUpdater>,
   ~MockPaymentUpdater() override {}
 
   MOCK_METHOD1(OnUpdatePaymentDetails,
-               void(const ScriptValue& detailsScriptValue));
+               void(const ScriptValue& details_script_value));
   MOCK_METHOD1(OnUpdatePaymentDetailsFailure, void(const String& error));
 
   DEFINE_INLINE_TRACE() {}
diff --git a/third_party/WebKit/Source/modules/presentation/PresentationReceiverTest.cpp b/third_party/WebKit/Source/modules/presentation/PresentationReceiverTest.cpp
index ae132a0a77ad..f74c76fd87a3 100644
--- a/third_party/WebKit/Source/modules/presentation/PresentationReceiverTest.cpp
+++ b/third_party/WebKit/Source/modules/presentation/PresentationReceiverTest.cpp
@@ -30,7 +30,7 @@ class MockEventListener : public EventListener {
     return this == &other;
   }
 
-  MOCK_METHOD2(handleEvent, void(ExecutionContext* executionContext, Event*));
+  MOCK_METHOD2(handleEvent, void(ExecutionContext* execution_context, Event*));
 };
 
 class MockWebPresentationClient : public WebPresentationClient {
@@ -58,45 +58,45 @@ class MockWebPresentationClient : public WebPresentationClient {
   MOCK_METHOD1(SetReceiver, void(WebPresentationReceiver*));
 
   MOCK_METHOD2(startPresentation_,
-               void(const WebVector<WebURL>& presentationUrls,
+               void(const WebVector<WebURL>& presentation_urls,
                     std::unique_ptr<WebPresentationConnectionCallbacks>&));
 
   MOCK_METHOD3(reconnectPresentation_,
-               void(const WebVector<WebURL>& presentationUrls,
-                    const WebString& presentationId,
+               void(const WebVector<WebURL>& presentation_urls,
+                    const WebString& presentation_id,
                     std::unique_ptr<WebPresentationConnectionCallbacks>&));
 
   MOCK_METHOD4(SendString,
-               void(const WebURL& presentationUrl,
-                    const WebString& presentationId,
+               void(const WebURL& presentation_url,
+                    const WebString& presentation_id,
                     const WebString& message,
                     const WebPresentationConnectionProxy* proxy));
 
   MOCK_METHOD5(SendArrayBuffer,
-               void(const WebURL& presentationUrl,
-                    const WebString& presentationId,
+               void(const WebURL& presentation_url,
+                    const WebString& presentation_id,
                     const uint8_t* data,
                     size_t length,
                     const WebPresentationConnectionProxy* proxy));
 
   MOCK_METHOD5(SendBlobData,
-               void(const WebURL& presentationUrl,
-                    const WebString& presentationId,
+               void(const WebURL& presentation_url,
+                    const WebString& presentation_id,
                     const uint8_t* data,
                     size_t length,
                     const WebPresentationConnectionProxy* proxy));
 
   MOCK_METHOD3(CloseConnection,
-               void(const WebURL& presentationUrl,
-                    const WebString& presentationId,
+               void(const WebURL& presentation_url,
+                    const WebString& presentation_id,
                     const WebPresentationConnectionProxy*));
 
   MOCK_METHOD2(TerminatePresentation,
-               void(const WebURL& presentationUrl,
-                    const WebString& presentationId));
+               void(const WebURL& presentation_url,
+                    const WebString& presentation_id));
 
   MOCK_METHOD2(getAvailability_,
-               void(const WebVector<WebURL>& availabilityUrls,
+               void(const WebVector<WebURL>& availability_urls,
                     std::unique_ptr<WebPresentationAvailabilityCallbacks>&));
 
   MOCK_METHOD1(StartListening, void(WebPresentationAvailabilityObserver*));
diff --git a/third_party/WebKit/Source/modules/remoteplayback/RemotePlaybackTest.cpp b/third_party/WebKit/Source/modules/remoteplayback/RemotePlaybackTest.cpp
index 7838441ba10d..1d5375a20ecb 100644
--- a/third_party/WebKit/Source/modules/remoteplayback/RemotePlaybackTest.cpp
+++ b/third_party/WebKit/Source/modules/remoteplayback/RemotePlaybackTest.cpp
@@ -43,7 +43,7 @@ class MockEventListener : public EventListener {
     return this == &other;
   }
 
-  MOCK_METHOD2(handleEvent, void(ExecutionContext* executionContext, Event*));
+  MOCK_METHOD2(handleEvent, void(ExecutionContext* execution_context, Event*));
 };
 
 class RemotePlaybackTest : public ::testing::Test {
diff --git a/third_party/WebKit/Source/modules/webgl/WebGLRenderingContextBase.cpp b/third_party/WebKit/Source/modules/webgl/WebGLRenderingContextBase.cpp
index db1ddc714076..a8f0926b48cb 100644
--- a/third_party/WebKit/Source/modules/webgl/WebGLRenderingContextBase.cpp
+++ b/third_party/WebKit/Source/modules/webgl/WebGLRenderingContextBase.cpp
@@ -114,7 +114,7 @@ const int kMaxGLErrorsAllowedToConsole = 256;
 const unsigned kMaxGLActiveContextsOnWorker = 4;
 
 #if OS(ANDROID)
-const unsigned kMaxGLActiveContexts = 8;
+const unsigned maxGLActiveContexts = 8;
 #else   // OS(ANDROID)
 const unsigned kMaxGLActiveContexts = 16;
 #endif  // OS(ANDROID)
diff --git a/third_party/WebKit/Source/platform/SecureTextInput.cpp b/third_party/WebKit/Source/platform/SecureTextInput.cpp
index 3a28130b6929..f163750b64b0 100644
--- a/third_party/WebKit/Source/platform/SecureTextInput.cpp
+++ b/third_party/WebKit/Source/platform/SecureTextInput.cpp
@@ -30,13 +30,13 @@
 
 namespace blink {
 
-void EnableSecureTextInput() {
+void enableSecureTextInput() {
   if (IsSecureEventInputEnabled())
     return;
   EnableSecureEventInput();
 }
 
-void DisableSecureTextInput() {
+void disableSecureTextInput() {
   if (!IsSecureEventInputEnabled())
     return;
   DisableSecureEventInput();
diff --git a/third_party/WebKit/Source/platform/audio/Biquad.cpp b/third_party/WebKit/Source/platform/audio/Biquad.cpp
index 51944e38075b..b4ab89c726dd 100644
--- a/third_party/WebKit/Source/platform/audio/Biquad.cpp
+++ b/third_party/WebKit/Source/platform/audio/Biquad.cpp
@@ -48,8 +48,8 @@ const int kBufferSize = 1024;
 Biquad::Biquad() : has_sample_accurate_values_(false) {
 #if OS(MACOSX)
   // Allocate two samples more for filter history
-  input_buffer_.Allocate(kBufferSize + 2);
-  output_buffer_.Allocate(kBufferSize + 2);
+  m_inputBuffer.allocate(kBufferSize + 2);
+  m_outputBuffer.allocate(kBufferSize + 2);
 #endif
 
   // Allocate enough space for the a-rate filter coefficients to handle a
@@ -119,19 +119,19 @@ void Biquad::Process(const float* source_p,
     // documented so it's not clear how to update them anyway.
   } else {
 #if OS(MACOSX)
-    double* input_p = input_buffer_.Data();
-    double* output_p = output_buffer_.Data();
+    double* inputP = m_inputBuffer.data();
+    double* outputP = m_outputBuffer.data();
 
     // Set up filter state.  This is needed in case we're switching from
     // filtering with variable coefficients (i.e., with automations) to
     // fixed coefficients (without automations).
-    input_p[0] = x2_;
-    input_p[1] = x1_;
-    output_p[0] = y2_;
-    output_p[1] = y1_;
+    inputP[0] = m_x2;
+    inputP[1] = m_x1;
+    outputP[0] = m_y2;
+    outputP[1] = m_y1;
 
     // Use vecLib if available
-    ProcessFast(source_p, dest_p, frames_to_process);
+    processFast(sourceP, destP, framesToProcess);
 
     // Copy the last inputs and outputs to the filter memory variables.
     // This is needed because the next rendering quantum might be an
@@ -139,10 +139,10 @@ void Biquad::Process(const float* source_p,
     // sourceP and destP can be the same block of memory, we can't read from
     // sourceP to get the last inputs.  Fortunately, processFast has put the
     // last inputs in input[0] and input[1].
-    x1_ = input_p[1];
-    x2_ = input_p[0];
-    y1_ = dest_p[frames_to_process - 1];
-    y2_ = dest_p[frames_to_process - 2];
+    m_x1 = inputP[1];
+    m_x2 = inputP[0];
+    m_y1 = destP[framesToProcess - 1];
+    m_y2 = destP[framesToProcess - 2];
 
 #else
     int n = frames_to_process;
@@ -187,58 +187,58 @@ void Biquad::Process(const float* source_p,
 
 // Here we have optimized version using Accelerate.framework
 
-void Biquad::ProcessFast(const float* source_p,
-                         float* dest_p,
-                         size_t frames_to_process) {
-  double filter_coefficients[5];
-  filter_coefficients[0] = b0_[0];
-  filter_coefficients[1] = b1_[0];
-  filter_coefficients[2] = b2_[0];
-  filter_coefficients[3] = a1_[0];
-  filter_coefficients[4] = a2_[0];
+void Biquad::processFast(const float* sourceP,
+                         float* destP,
+                         size_t framesToProcess) {
+  double filterCoefficients[5];
+  filterCoefficients[0] = m_b0[0];
+  filterCoefficients[1] = m_b1[0];
+  filterCoefficients[2] = m_b2[0];
+  filterCoefficients[3] = m_a1[0];
+  filterCoefficients[4] = m_a2[0];
 
-  double* input_p = input_buffer_.Data();
-  double* output_p = output_buffer_.Data();
+  double* inputP = m_inputBuffer.data();
+  double* outputP = m_outputBuffer.data();
 
-  double* input2p = input_p + 2;
-  double* output2p = output_p + 2;
+  double* input2P = inputP + 2;
+  double* output2P = outputP + 2;
 
   // Break up processing into smaller slices (kBufferSize) if necessary.
 
-  int n = frames_to_process;
+  int n = framesToProcess;
 
   while (n > 0) {
-    int frames_this_time = n < kBufferSize ? n : kBufferSize;
+    int framesThisTime = n < kBufferSize ? n : kBufferSize;
 
     // Copy input to input buffer
-    for (int i = 0; i < frames_this_time; ++i)
-      input2p[i] = *source_p++;
+    for (int i = 0; i < framesThisTime; ++i)
+      input2P[i] = *sourceP++;
 
-    ProcessSliceFast(input_p, output_p, filter_coefficients, frames_this_time);
+    processSliceFast(inputP, outputP, filterCoefficients, framesThisTime);
 
     // Copy output buffer to output (converts float -> double).
-    for (int i = 0; i < frames_this_time; ++i)
-      *dest_p++ = static_cast<float>(output2p[i]);
+    for (int i = 0; i < framesThisTime; ++i)
+      *destP++ = static_cast<float>(output2P[i]);
 
-    n -= frames_this_time;
+    n -= framesThisTime;
   }
 }
 
-void Biquad::ProcessSliceFast(double* source_p,
-                              double* dest_p,
-                              double* coefficients_p,
-                              size_t frames_to_process) {
+void Biquad::processSliceFast(double* sourceP,
+                              double* destP,
+                              double* coefficientsP,
+                              size_t framesToProcess) {
   // Use double-precision for filter stability
-  vDSP_deq22D(source_p, 1, coefficients_p, dest_p, 1, frames_to_process);
+  vDSP_deq22D(sourceP, 1, coefficientsP, destP, 1, framesToProcess);
 
   // Save history.  Note that sourceP and destP reference m_inputBuffer and
   // m_outputBuffer respectively.  These buffers are allocated (in the
   // constructor) with space for two extra samples so it's OK to access array
   // values two beyond framesToProcess.
-  source_p[0] = source_p[frames_to_process - 2 + 2];
-  source_p[1] = source_p[frames_to_process - 1 + 2];
-  dest_p[0] = dest_p[frames_to_process - 2 + 2];
-  dest_p[1] = dest_p[frames_to_process - 1 + 2];
+  sourceP[0] = sourceP[framesToProcess - 2 + 2];
+  sourceP[1] = sourceP[framesToProcess - 1 + 2];
+  destP[0] = destP[framesToProcess - 2 + 2];
+  destP[1] = destP[framesToProcess - 1 + 2];
 }
 
 #endif  // OS(MACOSX)
@@ -246,13 +246,13 @@ void Biquad::ProcessSliceFast(double* source_p,
 void Biquad::Reset() {
 #if OS(MACOSX)
   // Two extra samples for filter history
-  double* input_p = input_buffer_.Data();
-  input_p[0] = 0;
-  input_p[1] = 0;
+  double* inputP = m_inputBuffer.data();
+  inputP[0] = 0;
+  inputP[1] = 0;
 
-  double* output_p = output_buffer_.Data();
-  output_p[0] = 0;
-  output_p[1] = 0;
+  double* outputP = m_outputBuffer.data();
+  outputP[0] = 0;
+  outputP[1] = 0;
 
 #endif
   x1_ = x2_ = y1_ = y2_ = 0;
diff --git a/third_party/WebKit/Source/platform/audio/DirectConvolver.cpp b/third_party/WebKit/Source/platform/audio/DirectConvolver.cpp
index 746cc9490fda..d1b05b19a5b8 100644
--- a/third_party/WebKit/Source/platform/audio/DirectConvolver.cpp
+++ b/third_party/WebKit/Source/platform/audio/DirectConvolver.cpp
@@ -78,8 +78,8 @@ void DirectConvolver::Process(AudioFloatArray* convolution_kernel,
   conv(inputP - kernelSize + 1, 1, kernelP + kernelSize - 1, -1, destP, 1,
        framesToProcess, kernelSize);
 #else
-  vDSP_conv(input_p - kernel_size + 1, 1, kernel_p + kernel_size - 1, -1, dest_p, 1,
-            frames_to_process, kernel_size);
+  vDSP_conv(inputP - kernelSize + 1, 1, kernelP + kernelSize - 1, -1, destP, 1,
+            framesToProcess, kernelSize);
 #endif  // CPU(X86)
 #else
   size_t i = 0;
diff --git a/third_party/WebKit/Source/platform/audio/PushPullFIFO.cpp b/third_party/WebKit/Source/platform/audio/PushPullFIFO.cpp
index fdfafd7a37b7..f6678b2964b5 100644
--- a/third_party/WebKit/Source/platform/audio/PushPullFIFO.cpp
+++ b/third_party/WebKit/Source/platform/audio/PushPullFIFO.cpp
@@ -84,7 +84,7 @@ void PushPullFIFO::Push(const AudioBus* input_bus) {
 // is less than the frames to pull, provides remaining frame plus the silence.
 void PushPullFIFO::Pull(AudioBus* output_bus, size_t frames_requested) {
 #if OS(ANDROID)
-  if (!output_bus) {
+  if (!outputBus) {
     // Log when outputBus or FIFO object is invalid. (crbug.com/692423)
     LOG(WARNING) << "[WebAudio/PushPullFIFO::pull <" << static_cast<void*>(this)
                  << ">] |outputBus| is invalid.";
@@ -94,20 +94,20 @@ void PushPullFIFO::Pull(AudioBus* output_bus, size_t frames_requested) {
 
   // The following checks are in place to catch the inexplicable crash.
   // (crbug.com/692423)
-  if (frames_requested > output_bus->length()) {
+  if (framesRequested > outputBus->length()) {
     LOG(WARNING) << "[WebAudio/PushPullFIFO::pull <" << static_cast<void*>(this)
                  << ">] framesRequested > outputBus->length() ("
-                 << frames_requested << " > " << output_bus->length() << ")";
+                 << framesRequested << " > " << outputBus->length() << ")";
   }
-  if (frames_requested > fifo_length_) {
+  if (framesRequested > m_fifoLength) {
     LOG(WARNING) << "[WebAudio/PushPullFIFO::pull <" << static_cast<void*>(this)
-                 << ">] framesRequested > m_fifoLength (" << frames_requested
-                 << " > " << fifo_length_ << ")";
+                 << ">] framesRequested > m_fifoLength (" << framesRequested
+                 << " > " << m_fifoLength << ")";
   }
-  if (index_read_ >= fifo_length_) {
+  if (m_indexRead >= m_fifoLength) {
     LOG(WARNING) << "[WebAudio/PushPullFIFO::pull <" << static_cast<void*>(this)
-                 << ">] m_indexRead >= m_fifoLength (" << index_read_
-                 << " >= " << fifo_length_ << ")";
+                 << ">] m_indexRead >= m_fifoLength (" << m_indexRead
+                 << " >= " << m_fifoLength << ")";
   }
 #endif
   CHECK(output_bus);
diff --git a/third_party/WebKit/Source/platform/audio/VectorMath.cpp b/third_party/WebKit/Source/platform/audio/VectorMath.cpp
index 936bfb50064d..aba820e1915d 100644
--- a/third_party/WebKit/Source/platform/audio/VectorMath.cpp
+++ b/third_party/WebKit/Source/platform/audio/VectorMath.cpp
@@ -60,109 +60,109 @@ namespace VectorMath {
 // our namespaced function names, so we must handle this case differently. Other
 // architectures (64bit, ARM, etc.) do not include this header file.
 
-void Vsmul(const float* source_p,
-           int source_stride,
+void vsmul(const float* sourceP,
+           int sourceStride,
            const float* scale,
-           float* dest_p,
-           int dest_stride,
-           size_t frames_to_process) {
+           float* destP,
+           int destStride,
+           size_t framesToProcess) {
 #if CPU(X86)
   ::vsmul(sourceP, sourceStride, scale, destP, destStride, framesToProcess);
 #else
-  vDSP_vsmul(source_p, source_stride, scale, dest_p, dest_stride, frames_to_process);
+  vDSP_vsmul(sourceP, sourceStride, scale, destP, destStride, framesToProcess);
 #endif
 }
 
-void Vadd(const float* source1p,
-          int source_stride1,
-          const float* source2p,
-          int source_stride2,
-          float* dest_p,
-          int dest_stride,
-          size_t frames_to_process) {
+void vadd(const float* source1P,
+          int sourceStride1,
+          const float* source2P,
+          int sourceStride2,
+          float* destP,
+          int destStride,
+          size_t framesToProcess) {
 #if CPU(X86)
   ::vadd(source1P, sourceStride1, source2P, sourceStride2, destP, destStride,
          framesToProcess);
 #else
-  vDSP_vadd(source1p, source_stride1, source2p, source_stride2, dest_p, dest_stride,
-            frames_to_process);
+  vDSP_vadd(source1P, sourceStride1, source2P, sourceStride2, destP, destStride,
+            framesToProcess);
 #endif
 }
 
-void Vmul(const float* source1p,
-          int source_stride1,
-          const float* source2p,
-          int source_stride2,
-          float* dest_p,
-          int dest_stride,
-          size_t frames_to_process) {
+void vmul(const float* source1P,
+          int sourceStride1,
+          const float* source2P,
+          int sourceStride2,
+          float* destP,
+          int destStride,
+          size_t framesToProcess) {
 #if CPU(X86)
   ::vmul(source1P, sourceStride1, source2P, sourceStride2, destP, destStride,
          framesToProcess);
 #else
-  vDSP_vmul(source1p, source_stride1, source2p, source_stride2, dest_p, dest_stride,
-            frames_to_process);
+  vDSP_vmul(source1P, sourceStride1, source2P, sourceStride2, destP, destStride,
+            framesToProcess);
 #endif
 }
 
-void Zvmul(const float* real1p,
-           const float* imag1p,
-           const float* real2p,
-           const float* imag2p,
-           float* real_dest_p,
-           float* imag_dest_p,
-           size_t frames_to_process) {
+void zvmul(const float* real1P,
+           const float* imag1P,
+           const float* real2P,
+           const float* imag2P,
+           float* realDestP,
+           float* imagDestP,
+           size_t framesToProcess) {
   DSPSplitComplex sc1;
   DSPSplitComplex sc2;
   DSPSplitComplex dest;
-  sc1.realp = const_cast<float*>(real1p);
-  sc1.imagp = const_cast<float*>(imag1p);
-  sc2.realp = const_cast<float*>(real2p);
-  sc2.imagp = const_cast<float*>(imag2p);
-  dest.realp = real_dest_p;
-  dest.imagp = imag_dest_p;
+  sc1.realp = const_cast<float*>(real1P);
+  sc1.imagp = const_cast<float*>(imag1P);
+  sc2.realp = const_cast<float*>(real2P);
+  sc2.imagp = const_cast<float*>(imag2P);
+  dest.realp = realDestP;
+  dest.imagp = imagDestP;
 #if CPU(X86)
   ::zvmul(&sc1, 1, &sc2, 1, &dest, 1, framesToProcess, 1);
 #else
-  vDSP_zvmul(&sc1, 1, &sc2, 1, &dest, 1, frames_to_process, 1);
+  vDSP_zvmul(&sc1, 1, &sc2, 1, &dest, 1, framesToProcess, 1);
 #endif
 }
 
-void Vsma(const float* source_p,
-          int source_stride,
+void vsma(const float* sourceP,
+          int sourceStride,
           const float* scale,
-          float* dest_p,
-          int dest_stride,
-          size_t frames_to_process) {
-  vDSP_vsma(source_p, source_stride, scale, dest_p, dest_stride, dest_p, dest_stride,
-            frames_to_process);
+          float* destP,
+          int destStride,
+          size_t framesToProcess) {
+  vDSP_vsma(sourceP, sourceStride, scale, destP, destStride, destP, destStride,
+            framesToProcess);
 }
 
-void Vmaxmgv(const float* source_p,
-             int source_stride,
-             float* max_p,
-             size_t frames_to_process) {
-  vDSP_maxmgv(source_p, source_stride, max_p, frames_to_process);
+void vmaxmgv(const float* sourceP,
+             int sourceStride,
+             float* maxP,
+             size_t framesToProcess) {
+  vDSP_maxmgv(sourceP, sourceStride, maxP, framesToProcess);
 }
 
-void Vsvesq(const float* source_p,
-            int source_stride,
-            float* sum_p,
-            size_t frames_to_process) {
-  vDSP_svesq(const_cast<float*>(source_p), source_stride, sum_p, frames_to_process);
+void vsvesq(const float* sourceP,
+            int sourceStride,
+            float* sumP,
+            size_t framesToProcess) {
+  vDSP_svesq(const_cast<float*>(sourceP), sourceStride, sumP, framesToProcess);
 }
 
-void Vclip(const float* source_p,
-           int source_stride,
-           const float* low_threshold_p,
-           const float* high_threshold_p,
-           float* dest_p,
-           int dest_stride,
-           size_t frames_to_process) {
-  vDSP_vclip(const_cast<float*>(source_p), source_stride,
-             const_cast<float*>(low_threshold_p),
-             const_cast<float*>(high_threshold_p), dest_p, dest_stride,
-             frames_to_process);
+void vclip(const float* sourceP,
+           int sourceStride,
+           const float* lowThresholdP,
+           const float* highThresholdP,
+           float* destP,
+           int destStride,
+           size_t framesToProcess) {
+  vDSP_vclip(const_cast<float*>(sourceP), sourceStride,
+             const_cast<float*>(lowThresholdP),
+             const_cast<float*>(highThresholdP), destP, destStride,
+             framesToProcess);
 }
 #else
 
@@ -217,22 +217,22 @@ void Vsma(const float* source_p,
     n = tail_frames;
   }
 #elif HAVE(ARM_NEON_INTRINSICS)
-  if ((source_stride == 1) && (dest_stride == 1)) {
-    int tail_frames = n % 4;
-    const float* end_p = dest_p + n - tail_frames;
+  if ((sourceStride == 1) && (destStride == 1)) {
+    int tailFrames = n % 4;
+    const float* endP = destP + n - tailFrames;
 
     float32x4_t k = vdupq_n_f32(*scale);
-    while (dest_p < end_p) {
-      float32x4_t source = vld1q_f32(source_p);
-      float32x4_t dest = vld1q_f32(dest_p);
+    while (destP < endP) {
+      float32x4_t source = vld1q_f32(sourceP);
+      float32x4_t dest = vld1q_f32(destP);
 
       dest = vmlaq_f32(dest, source, k);
-      vst1q_f32(dest_p, dest);
+      vst1q_f32(destP, dest);
 
-      source_p += 4;
-      dest_p += 4;
+      sourceP += 4;
+      destP += 4;
     }
-    n = tail_frames;
+    n = tailFrames;
   }
 #elif HAVE(MIPS_MSA_INTRINSICS)
   if ((sourceStride == 1) && (destStride == 1)) {
@@ -322,19 +322,19 @@ void Vsmul(const float* source_p,
     }
   } else {  // If strides are not 1, rollback to normal algorithm.
 #elif HAVE(ARM_NEON_INTRINSICS)
-  if ((source_stride == 1) && (dest_stride == 1)) {
+  if ((sourceStride == 1) && (destStride == 1)) {
     float k = *scale;
-    int tail_frames = n % 4;
-    const float* end_p = dest_p + n - tail_frames;
+    int tailFrames = n % 4;
+    const float* endP = destP + n - tailFrames;
 
-    while (dest_p < end_p) {
-      float32x4_t source = vld1q_f32(source_p);
-      vst1q_f32(dest_p, vmulq_n_f32(source, k));
+    while (destP < endP) {
+      float32x4_t source = vld1q_f32(sourceP);
+      vst1q_f32(destP, vmulq_n_f32(source, k));
 
-      source_p += 4;
-      dest_p += 4;
+      sourceP += 4;
+      destP += 4;
     }
-    n = tail_frames;
+    n = tailFrames;
   }
 #elif HAVE(MIPS_MSA_INTRINSICS)
   if ((sourceStride == 1) && (destStride == 1)) {
@@ -460,20 +460,20 @@ void Vadd(const float* source1p,
     }
   } else {  // if strides are not 1, rollback to normal algorithm
 #elif HAVE(ARM_NEON_INTRINSICS)
-  if ((source_stride1 == 1) && (source_stride2 == 1) && (dest_stride == 1)) {
-    int tail_frames = n % 4;
-    const float* end_p = dest_p + n - tail_frames;
+  if ((sourceStride1 == 1) && (sourceStride2 == 1) && (destStride == 1)) {
+    int tailFrames = n % 4;
+    const float* endP = destP + n - tailFrames;
 
-    while (dest_p < end_p) {
-      float32x4_t source1 = vld1q_f32(source1p);
-      float32x4_t source2 = vld1q_f32(source2p);
-      vst1q_f32(dest_p, vaddq_f32(source1, source2));
+    while (destP < endP) {
+      float32x4_t source1 = vld1q_f32(source1P);
+      float32x4_t source2 = vld1q_f32(source2P);
+      vst1q_f32(destP, vaddq_f32(source1, source2));
 
-      source1p += 4;
-      source2p += 4;
-      dest_p += 4;
+      source1P += 4;
+      source2P += 4;
+      destP += 4;
     }
-    n = tail_frames;
+    n = tailFrames;
   }
 #elif HAVE(MIPS_MSA_INTRINSICS)
   if ((sourceStride1 == 1) && (sourceStride2 == 1) && (destStride == 1)) {
@@ -563,20 +563,20 @@ void Vmul(const float* source1p,
     n = tail_frames;
   }
 #elif HAVE(ARM_NEON_INTRINSICS)
-  if ((source_stride1 == 1) && (source_stride2 == 1) && (dest_stride == 1)) {
-    int tail_frames = n % 4;
-    const float* end_p = dest_p + n - tail_frames;
+  if ((sourceStride1 == 1) && (sourceStride2 == 1) && (destStride == 1)) {
+    int tailFrames = n % 4;
+    const float* endP = destP + n - tailFrames;
 
-    while (dest_p < end_p) {
-      float32x4_t source1 = vld1q_f32(source1p);
-      float32x4_t source2 = vld1q_f32(source2p);
-      vst1q_f32(dest_p, vmulq_f32(source1, source2));
+    while (destP < endP) {
+      float32x4_t source1 = vld1q_f32(source1P);
+      float32x4_t source2 = vld1q_f32(source2P);
+      vst1q_f32(destP, vmulq_f32(source1, source2));
 
-      source1p += 4;
-      source2p += 4;
-      dest_p += 4;
+      source1P += 4;
+      source2P += 4;
+      destP += 4;
     }
-    n = tail_frames;
+    n = tailFrames;
   }
 #elif HAVE(MIPS_MSA_INTRINSICS)
   if ((sourceStride1 == 1) && (sourceStride2 == 1) && (destStride == 1)) {
@@ -641,18 +641,18 @@ void Zvmul(const float* real1p,
     }
   }
 #elif HAVE(ARM_NEON_INTRINSICS)
-  unsigned end_size = frames_to_process - frames_to_process % 4;
-  while (i < end_size) {
-    float32x4_t real1 = vld1q_f32(real1p + i);
-    float32x4_t real2 = vld1q_f32(real2p + i);
-    float32x4_t imag1 = vld1q_f32(imag1p + i);
-    float32x4_t imag2 = vld1q_f32(imag2p + i);
+  unsigned endSize = framesToProcess - framesToProcess % 4;
+  while (i < endSize) {
+    float32x4_t real1 = vld1q_f32(real1P + i);
+    float32x4_t real2 = vld1q_f32(real2P + i);
+    float32x4_t imag1 = vld1q_f32(imag1P + i);
+    float32x4_t imag2 = vld1q_f32(imag2P + i);
 
-    float32x4_t real_result = vmlsq_f32(vmulq_f32(real1, real2), imag1, imag2);
-    float32x4_t imag_result = vmlaq_f32(vmulq_f32(real1, imag2), imag1, real2);
+    float32x4_t realResult = vmlsq_f32(vmulq_f32(real1, real2), imag1, imag2);
+    float32x4_t imagResult = vmlaq_f32(vmulq_f32(real1, imag2), imag1, real2);
 
-    vst1q_f32(real_dest_p + i, real_result);
-    vst1q_f32(imag_dest_p + i, imag_result);
+    vst1q_f32(realDestP + i, realResult);
+    vst1q_f32(imagDestP + i, imagResult);
 
     i += 4;
   }
@@ -706,24 +706,24 @@ void Vsvesq(const float* source_p,
     n = tail_frames;
   }
 #elif HAVE(ARM_NEON_INTRINSICS)
-  if (source_stride == 1) {
-    int tail_frames = n % 4;
-    const float* end_p = source_p + n - tail_frames;
-
-    float32x4_t four_sum = vdupq_n_f32(0);
-    while (source_p < end_p) {
-      float32x4_t source = vld1q_f32(source_p);
-      four_sum = vmlaq_f32(four_sum, source, source);
-      source_p += 4;
+  if (sourceStride == 1) {
+    int tailFrames = n % 4;
+    const float* endP = sourceP + n - tailFrames;
+
+    float32x4_t fourSum = vdupq_n_f32(0);
+    while (sourceP < endP) {
+      float32x4_t source = vld1q_f32(sourceP);
+      fourSum = vmlaq_f32(fourSum, source, source);
+      sourceP += 4;
     }
-    float32x2_t two_sum =
-        vadd_f32(vget_low_f32(four_sum), vget_high_f32(four_sum));
+    float32x2_t twoSum =
+        vadd_f32(vget_low_f32(fourSum), vget_high_f32(fourSum));
 
-    float group_sum[2];
-    vst1_f32(group_sum, two_sum);
-    sum += group_sum[0] + group_sum[1];
+    float groupSum[2];
+    vst1_f32(groupSum, twoSum);
+    sum += groupSum[0] + groupSum[1];
 
-    n = tail_frames;
+    n = tailFrames;
   }
 #endif
 
@@ -781,24 +781,24 @@ void Vmaxmgv(const float* source_p,
     n = tail_frames;
   }
 #elif HAVE(ARM_NEON_INTRINSICS)
-  if (source_stride == 1) {
-    int tail_frames = n % 4;
-    const float* end_p = source_p + n - tail_frames;
-
-    float32x4_t four_max = vdupq_n_f32(0);
-    while (source_p < end_p) {
-      float32x4_t source = vld1q_f32(source_p);
-      four_max = vmaxq_f32(four_max, vabsq_f32(source));
-      source_p += 4;
+  if (sourceStride == 1) {
+    int tailFrames = n % 4;
+    const float* endP = sourceP + n - tailFrames;
+
+    float32x4_t fourMax = vdupq_n_f32(0);
+    while (sourceP < endP) {
+      float32x4_t source = vld1q_f32(sourceP);
+      fourMax = vmaxq_f32(fourMax, vabsq_f32(source));
+      sourceP += 4;
     }
-    float32x2_t two_max =
-        vmax_f32(vget_low_f32(four_max), vget_high_f32(four_max));
+    float32x2_t twoMax =
+        vmax_f32(vget_low_f32(fourMax), vget_high_f32(fourMax));
 
-    float group_max[2];
-    vst1_f32(group_max, two_max);
-    max = std::max(group_max[0], group_max[1]);
+    float groupMax[2];
+    vst1_f32(groupMax, twoMax);
+    max = std::max(groupMax[0], groupMax[1]);
 
-    n = tail_frames;
+    n = tailFrames;
   }
 #elif HAVE(MIPS_MSA_INTRINSICS)
   if (sourceStride == 1) {
@@ -846,19 +846,19 @@ void Vclip(const float* source_p,
 
 // FIXME: Optimize for SSE2.
 #if HAVE(ARM_NEON_INTRINSICS)
-  if ((source_stride == 1) && (dest_stride == 1)) {
-    int tail_frames = n % 4;
-    const float* end_p = dest_p + n - tail_frames;
-
-    float32x4_t low = vdupq_n_f32(low_threshold);
-    float32x4_t high = vdupq_n_f32(high_threshold);
-    while (dest_p < end_p) {
-      float32x4_t source = vld1q_f32(source_p);
-      vst1q_f32(dest_p, vmaxq_f32(vminq_f32(source, high), low));
-      source_p += 4;
-      dest_p += 4;
+  if ((sourceStride == 1) && (destStride == 1)) {
+    int tailFrames = n % 4;
+    const float* endP = destP + n - tailFrames;
+
+    float32x4_t low = vdupq_n_f32(lowThreshold);
+    float32x4_t high = vdupq_n_f32(highThreshold);
+    while (destP < endP) {
+      float32x4_t source = vld1q_f32(sourceP);
+      vst1q_f32(destP, vmaxq_f32(vminq_f32(source, high), low));
+      sourceP += 4;
+      destP += 4;
     }
-    n = tail_frames;
+    n = tailFrames;
   }
 #elif HAVE(MIPS_MSA_INTRINSICS)
   if ((sourceStride == 1) && (destStride == 1)) {
diff --git a/third_party/WebKit/Source/platform/exported/FilePathConversion.cpp b/third_party/WebKit/Source/platform/exported/FilePathConversion.cpp
index d8fcaa53ff9c..652b7299e184 100644
--- a/third_party/WebKit/Source/platform/exported/FilePathConversion.cpp
+++ b/third_party/WebKit/Source/platform/exported/FilePathConversion.cpp
@@ -25,7 +25,7 @@ base::FilePath WebStringToFilePath(const WebString& web_string) {
   StringUTF8Adaptor utf8(str);
   return base::FilePath::FromUTF8Unsafe(utf8.AsStringPiece());
 #else
-  const LChar* data8 = str.Characters8();
+  const LChar* data8 = str.characters8();
   return base::FilePath::FromUTF16Unsafe(
       base::string16(data8, data8 + str.length()));
 #endif
@@ -38,7 +38,7 @@ WebString FilePathToWebString(const base::FilePath& path) {
 #if OS(POSIX)
   return WebString::FromUTF8(path.value());
 #else
-  return WebString::FromUTF16(path.AsUTF16Unsafe());
+  return WebString::fromUTF16(path.AsUTF16Unsafe());
 #endif
 }
 
diff --git a/third_party/WebKit/Source/platform/exported/WebCursorInfo.cpp b/third_party/WebKit/Source/platform/exported/WebCursorInfo.cpp
index 58a4721b9514..09b145d285eb 100644
--- a/third_party/WebKit/Source/platform/exported/WebCursorInfo.cpp
+++ b/third_party/WebKit/Source/platform/exported/WebCursorInfo.cpp
@@ -41,7 +41,7 @@ WebCursorInfo::WebCursorInfo(const Cursor& cursor)
       custom_image(cursor.GetImage())
 #ifdef WIN32
       ,
-      external_handle(0)
+      externalHandle(0)
 #endif
 {
 }
diff --git a/third_party/WebKit/Source/platform/fonts/FontCache.cpp b/third_party/WebKit/Source/platform/fonts/FontCache.cpp
index 8c17f94d913b..424e1470f944 100644
--- a/third_party/WebKit/Source/platform/fonts/FontCache.cpp
+++ b/third_party/WebKit/Source/platform/fonts/FontCache.cpp
@@ -64,7 +64,7 @@ using namespace WTF;
 namespace blink {
 
 #if !OS(WIN) && !OS(LINUX)
-FontCache::FontCache() : purge_prevent_count_(0), font_manager_(nullptr) {}
+FontCache::FontCache() : m_purgePreventCount(0), m_fontManager(nullptr) {}
 #endif  // !OS(WIN) && !OS(LINUX)
 
 typedef HashMap<unsigned,
@@ -89,10 +89,10 @@ static FallbackListShaperCache* g_fallback_list_shaper_cache = nullptr;
 SkFontMgr* FontCache::static_font_manager_ = nullptr;
 
 #if OS(WIN)
-bool FontCache::antialiased_text_enabled_ = false;
-bool FontCache::lcd_text_enabled_ = false;
-float FontCache::device_scale_factor_ = 1.0;
-bool FontCache::use_skia_font_fallback_ = false;
+bool FontCache::s_antialiasedTextEnabled = false;
+bool FontCache::s_lcdTextEnabled = false;
+float FontCache::s_deviceScaleFactor = 1.0;
+bool FontCache::s_useSkiaFontFallback = false;
 #endif  // OS(WIN)
 
 FontCache* FontCache::GetFontCache() {
@@ -108,7 +108,7 @@ FontPlatformData* FontCache::SystemFontPlatformData(
   if (family.IsEmpty() || family == FontFamilyNames::system_ui)
     return nullptr;
 #else
-  DCHECK(!family.IsEmpty() && family != FontFamilyNames::system_ui);
+  DCHECK(!family.isEmpty() && family != FontFamilyNames::system_ui);
 #endif
   return GetFontPlatformData(font_description, FontFaceCreationParams(family),
                              AlternateFontName::kNoAlternate);
@@ -202,7 +202,7 @@ std::unique_ptr<FontPlatformData> FontCache::ScaleFontPlatformData(
     const FontFaceCreationParams& creation_params,
     float font_size) {
 #if OS(MACOSX)
-  return CreateFontPlatformData(font_description, creation_params, font_size);
+  return createFontPlatformData(fontDescription, creationParams, fontSize);
 #else
   return WTF::MakeUnique<FontPlatformData>(font_platform_data, font_size);
 #endif
diff --git a/third_party/WebKit/Source/platform/fonts/FontDataCache.cpp b/third_party/WebKit/Source/platform/fonts/FontDataCache.cpp
index 8286a5156633..314c20ee550b 100644
--- a/third_party/WebKit/Source/platform/fonts/FontDataCache.cpp
+++ b/third_party/WebKit/Source/platform/fonts/FontDataCache.cpp
@@ -40,8 +40,8 @@ namespace blink {
 const unsigned kCMaxInactiveFontData = 250;
 const unsigned kCTargetInactiveFontData = 200;
 #else
-const unsigned kCMaxInactiveFontData = 225;
-const unsigned kCTargetInactiveFontData = 200;
+const unsigned cMaxInactiveFontData = 225;
+const unsigned cTargetInactiveFontData = 200;
 #endif
 
 PassRefPtr<SimpleFontData> FontDataCache::Get(
diff --git a/third_party/WebKit/Source/platform/fonts/FontPlatformData.cpp b/third_party/WebKit/Source/platform/fonts/FontPlatformData.cpp
index 2e696a8bd421..f4f4fc87af57 100644
--- a/third_party/WebKit/Source/platform/fonts/FontPlatformData.cpp
+++ b/third_party/WebKit/Source/platform/fonts/FontPlatformData.cpp
@@ -48,7 +48,7 @@ FontPlatformData::FontPlatformData(WTF::HashTableDeletedValueType)
       is_hash_table_deleted_value_(true)
 #if OS(WIN)
       ,
-      paint_text_flags_(0)
+      m_paintTextFlags(0)
 #endif
 {
 }
@@ -62,7 +62,7 @@ FontPlatformData::FontPlatformData()
       is_hash_table_deleted_value_(false)
 #if OS(WIN)
       ,
-      paint_text_flags_(0)
+      m_paintTextFlags(0)
 #endif
 {
 }
@@ -79,7 +79,7 @@ FontPlatformData::FontPlatformData(float size,
       is_hash_table_deleted_value_(false)
 #if OS(WIN)
       ,
-      paint_text_flags_(0)
+      m_paintTextFlags(0)
 #endif
 {
 }
@@ -100,7 +100,7 @@ FontPlatformData::FontPlatformData(const FontPlatformData& source)
       is_hash_table_deleted_value_(false)
 #if OS(WIN)
       ,
-      paint_text_flags_(source.paint_text_flags_)
+      m_paintTextFlags(source.m_paintTextFlags)
 #endif
 {
 }
@@ -123,11 +123,11 @@ FontPlatformData::FontPlatformData(const FontPlatformData& src, float text_size)
       is_hash_table_deleted_value_(false)
 #if OS(WIN)
       ,
-      paint_text_flags_(src.paint_text_flags_)
+      m_paintTextFlags(src.m_paintTextFlags)
 #endif
 {
 #if OS(WIN)
-  QuerySystemForRenderStyle();
+  querySystemForRenderStyle();
 #endif
 }
 
@@ -153,23 +153,23 @@ FontPlatformData::FontPlatformData(sk_sp<SkTypeface> tf,
       is_hash_table_deleted_value_(false)
 #if OS(WIN)
       ,
-      paint_text_flags_(0)
+      m_paintTextFlags(0)
 #endif
 {
 #if OS(WIN)
-  QuerySystemForRenderStyle();
+  querySystemForRenderStyle();
 #endif
 }
 
 FontPlatformData::~FontPlatformData() {}
 
 #if OS(MACOSX)
-CTFontRef FontPlatformData::CtFont() const {
-  return SkTypeface_GetCTFontRef(typeface_.get());
+CTFontRef FontPlatformData::ctFont() const {
+  return SkTypeface_GetCTFontRef(m_typeface.get());
 };
 
-CGFontRef FontPlatformData::CgFont() const {
-  return CTFontCopyGraphicsFont(CtFont(), 0);
+CGFontRef FontPlatformData::cgFont() const {
+  return CTFontCopyGraphicsFont(ctFont(), 0);
 }
 #endif
 
@@ -193,7 +193,7 @@ const FontPlatformData& FontPlatformData::operator=(
 #endif
 
 #if OS(WIN)
-  paint_text_flags_ = 0;
+  m_paintTextFlags = 0;
 #endif
 
   return *this;
diff --git a/third_party/WebKit/Source/platform/fonts/SimpleFontData.cpp b/third_party/WebKit/Source/platform/fonts/SimpleFontData.cpp
index 5f7323629e8a..f7eebd672cf0 100644
--- a/third_party/WebKit/Source/platform/fonts/SimpleFontData.cpp
+++ b/third_party/WebKit/Source/platform/fonts/SimpleFontData.cpp
@@ -167,12 +167,12 @@ void SimpleFontData::PlatformInit(bool subpixel_ascent_descent) {
   // web standard. The AppKit adjustment of 20% is too big and is
   // incorrectly added to line spacing, so we use a 15% adjustment instead
   // and add it to the ascent.
-  DEFINE_STATIC_LOCAL(AtomicString, times_name, ("Times"));
-  DEFINE_STATIC_LOCAL(AtomicString, helvetica_name, ("Helvetica"));
-  DEFINE_STATIC_LOCAL(AtomicString, courier_name, ("Courier"));
-  String family_name = platform_data_.FontFamilyName();
-  if (family_name == times_name || family_name == helvetica_name ||
-      family_name == courier_name)
+  DEFINE_STATIC_LOCAL(AtomicString, timesName, ("Times"));
+  DEFINE_STATIC_LOCAL(AtomicString, helveticaName, ("Helvetica"));
+  DEFINE_STATIC_LOCAL(AtomicString, courierName, ("Courier"));
+  String familyName = m_platformData.fontFamilyName();
+  if (familyName == timesName || familyName == helveticaName ||
+      familyName == courierName)
     ascent += floorf(((ascent + descent) * 0.15f) + 0.5f);
 #endif
 
@@ -188,11 +188,11 @@ void SimpleFontData::PlatformInit(bool subpixel_ascent_descent) {
     // value from the OS/2 table. However, the CSS ex unit
     // expects only parts above the baseline, hence measuring the glyph:
     // http://www.w3.org/TR/css3-values/#ex-unit
-    const Glyph x_glyph = GlyphForCharacter('x');
-    if (x_glyph) {
-      FloatRect glyph_bounds(BoundsForGlyph(x_glyph));
+    const Glyph xGlyph = glyphForCharacter('x');
+    if (xGlyph) {
+      FloatRect glyphBounds(boundsForGlyph(xGlyph));
       // SkGlyph bounds, y down, based on rendering at (0,0).
-      x_height = -glyph_bounds.Y();
+      xHeight = -glyphBounds.y();
     }
 #endif
     font_metrics_.SetXHeight(x_height);
@@ -220,19 +220,19 @@ void SimpleFontData::PlatformInit(bool subpixel_ascent_descent) {
 // calculated for us, but we need to calculate m_maxCharWidth and
 // m_avgCharWidth in order for text entry widgets to be sized correctly.
 #if OS(WIN)
-  max_char_width_ = SkScalarRoundToInt(metrics.fMaxCharWidth);
+  m_maxCharWidth = SkScalarRoundToInt(metrics.fMaxCharWidth);
 
   // Older version of the DirectWrite API doesn't implement support for max
   // char width. Fall back on a multiple of the ascent. This is entirely
   // arbitrary but comes pretty close to the expected value in most cases.
-  if (max_char_width_ < 1)
-    max_char_width_ = ascent * 2;
+  if (m_maxCharWidth < 1)
+    m_maxCharWidth = ascent * 2;
 #elif OS(MACOSX)
   // FIXME: The current avg/max character width calculation is not ideal,
   // it should check either the OS2 table or, better yet, query FontMetrics.
   // Sadly FontMetrics provides incorrect data on Mac at the moment.
   // https://crbug.com/420901
-  max_char_width_ = std::max(avg_char_width_, font_metrics_.FloatAscent());
+  m_maxCharWidth = std::max(m_avgCharWidth, m_fontMetrics.floatAscent());
 #else
   // Better would be to rely on either fMaxCharWidth or fAveCharWidth.
   // skbug.com/3087
diff --git a/third_party/WebKit/Source/platform/fonts/WebFontDecoder.cpp b/third_party/WebKit/Source/platform/fonts/WebFontDecoder.cpp
index aa5e7bded9f9..5aadc5665e67 100644
--- a/third_party/WebKit/Source/platform/fonts/WebFontDecoder.cpp
+++ b/third_party/WebKit/Source/platform/fonts/WebFontDecoder.cpp
@@ -219,7 +219,7 @@ sk_sp<SkTypeface> WebFontDecoder::Decode(SharedBuffer* buffer) {
   SkMemoryStream* stream = new SkMemoryStream(sk_data);
 #if OS(WIN)
   sk_sp<SkTypeface> typeface(
-      FontCache::GetFontCache()->FontManager()->createFromStream(stream));
+      FontCache::fontCache()->fontManager()->createFromStream(stream));
 #else
   sk_sp<SkTypeface> typeface = SkTypeface::MakeFromStream(stream);
 #endif
diff --git a/third_party/WebKit/Source/platform/fonts/linux/FontRenderStyle.cpp b/third_party/WebKit/Source/platform/fonts/linux/FontRenderStyle.cpp
index ddc96d7975e3..bc992959441e 100644
--- a/third_party/WebKit/Source/platform/fonts/linux/FontRenderStyle.cpp
+++ b/third_party/WebKit/Source/platform/fonts/linux/FontRenderStyle.cpp
@@ -53,7 +53,7 @@ FontRenderStyle FontRenderStyle::QuerySystem(const CString& family,
                                              SkFontStyle font_style) {
   WebFontRenderStyle style;
 #if OS(ANDROID)
-  style.SetDefaults();
+  style.setDefaults();
 #else
   // If the font name is missing (i.e. probably a web font) or the sandbox is
   // disabled, use the system defaults.
diff --git a/third_party/WebKit/Source/platform/fonts/shaping/HarfBuzzFace.cpp b/third_party/WebKit/Source/platform/fonts/shaping/HarfBuzzFace.cpp
index 4474b33656c3..ca627a1bd9a3 100644
--- a/third_party/WebKit/Source/platform/fonts/shaping/HarfBuzzFace.cpp
+++ b/third_party/WebKit/Source/platform/fonts/shaping/HarfBuzzFace.cpp
@@ -335,7 +335,7 @@ static void DeleteTypefaceStream(void* stream_asset_ptr) {
 
 hb_face_t* HarfBuzzFace::CreateFace() {
 #if OS(MACOSX)
-  hb_face_t* face = hb_coretext_face_create(platform_data_->CgFont());
+  hb_face_t* face = hb_coretext_face_create(m_platformData->cgFont());
 #else
   hb_face_t* face = nullptr;
 
diff --git a/third_party/WebKit/Source/platform/fonts/skia/FontCacheSkia.cpp b/third_party/WebKit/Source/platform/fonts/skia/FontCacheSkia.cpp
index 27f8346fcb3d..937b96620c2a 100644
--- a/third_party/WebKit/Source/platform/fonts/skia/FontCacheSkia.cpp
+++ b/third_party/WebKit/Source/platform/fonts/skia/FontCacheSkia.cpp
@@ -162,43 +162,43 @@ PassRefPtr<SimpleFontData> FontCache::GetLastResortFallbackFont(
   }
 #if OS(WIN)
   // Try some more Windows-specific fallbacks.
-  if (!font_platform_data) {
-    DEFINE_STATIC_LOCAL(const FontFaceCreationParams, msuigothic_creation_params,
+  if (!fontPlatformData) {
+    DEFINE_STATIC_LOCAL(const FontFaceCreationParams, msuigothicCreationParams,
                         (AtomicString("MS UI Gothic")));
-    font_platform_data = GetFontPlatformData(
-        description, msuigothic_creation_params, AlternateFontName::kLastResort);
+    fontPlatformData = getFontPlatformData(
+        description, msuigothicCreationParams, AlternateFontName::LastResort);
   }
-  if (!font_platform_data) {
-    DEFINE_STATIC_LOCAL(const FontFaceCreationParams, mssansserif_creation_params,
+  if (!fontPlatformData) {
+    DEFINE_STATIC_LOCAL(const FontFaceCreationParams, mssansserifCreationParams,
                         (AtomicString("Microsoft Sans Serif")));
-    font_platform_data = GetFontPlatformData(
-        description, mssansserif_creation_params, AlternateFontName::kLastResort);
+    fontPlatformData = getFontPlatformData(
+        description, mssansserifCreationParams, AlternateFontName::LastResort);
   }
-  if (!font_platform_data) {
-    DEFINE_STATIC_LOCAL(const FontFaceCreationParams, segoeui_creation_params,
+  if (!fontPlatformData) {
+    DEFINE_STATIC_LOCAL(const FontFaceCreationParams, segoeuiCreationParams,
                         (AtomicString("Segoe UI")));
-    font_platform_data = GetFontPlatformData(description, segoeui_creation_params,
-                                           AlternateFontName::kLastResort);
+    fontPlatformData = getFontPlatformData(description, segoeuiCreationParams,
+                                           AlternateFontName::LastResort);
   }
-  if (!font_platform_data) {
-    DEFINE_STATIC_LOCAL(const FontFaceCreationParams, calibri_creation_params,
+  if (!fontPlatformData) {
+    DEFINE_STATIC_LOCAL(const FontFaceCreationParams, calibriCreationParams,
                         (AtomicString("Calibri")));
-    font_platform_data = GetFontPlatformData(description, calibri_creation_params,
-                                           AlternateFontName::kLastResort);
+    fontPlatformData = getFontPlatformData(description, calibriCreationParams,
+                                           AlternateFontName::LastResort);
   }
-  if (!font_platform_data) {
+  if (!fontPlatformData) {
     DEFINE_STATIC_LOCAL(const FontFaceCreationParams,
-                        timesnewroman_creation_params,
+                        timesnewromanCreationParams,
                         (AtomicString("Times New Roman")));
-    font_platform_data =
-        GetFontPlatformData(description, timesnewroman_creation_params,
-                            AlternateFontName::kLastResort);
+    fontPlatformData =
+        getFontPlatformData(description, timesnewromanCreationParams,
+                            AlternateFontName::LastResort);
   }
-  if (!font_platform_data) {
-    DEFINE_STATIC_LOCAL(const FontFaceCreationParams, couriernew_creation_params,
+  if (!fontPlatformData) {
+    DEFINE_STATIC_LOCAL(const FontFaceCreationParams, couriernewCreationParams,
                         (AtomicString("Courier New")));
-    font_platform_data = GetFontPlatformData(
-        description, couriernew_creation_params, AlternateFontName::kLastResort);
+    fontPlatformData = getFontPlatformData(
+        description, couriernewCreationParams, AlternateFontName::LastResort);
   }
 #endif
 
@@ -232,11 +232,11 @@ sk_sp<SkTypeface> FontCache::CreateTypeface(
   }
 
 #if OS(WIN)
-  if (sideloaded_fonts_) {
-    HashMap<String, sk_sp<SkTypeface>>::iterator sideloaded_font =
-        sideloaded_fonts_->Find(name.Data());
-    if (sideloaded_font != sideloaded_fonts_->end())
-      return sideloaded_font->value;
+  if (s_sideloadedFonts) {
+    HashMap<String, sk_sp<SkTypeface>>::iterator sideloadedFont =
+        s_sideloadedFonts->find(name.data());
+    if (sideloadedFont != s_sideloadedFonts->end())
+      return sideloadedFont->value;
   }
 #endif
 
diff --git a/third_party/WebKit/Source/platform/fonts/skia/SkiaTextMetrics.cpp b/third_party/WebKit/Source/platform/fonts/skia/SkiaTextMetrics.cpp
index 285bad7f3fe5..a75398a320f0 100644
--- a/third_party/WebKit/Source/platform/fonts/skia/SkiaTextMetrics.cpp
+++ b/third_party/WebKit/Source/platform/fonts/skia/SkiaTextMetrics.cpp
@@ -64,7 +64,7 @@ void SkiaTextMetrics::GetSkiaBoundsForGlyph(Glyph glyph, SkRect* bounds) {
   // TODO(drott): Remove this once we have better metrics bounds
   // on Mac, https://bugs.chromium.org/p/skia/issues/detail?id=5328
   SkPath path;
-  paint_->getTextPath(&glyph, sizeof(glyph), 0, 0, &path);
+  m_paint->getTextPath(&glyph, sizeof(glyph), 0, 0, &path);
   *bounds = path.getBounds();
 #else
   paint_->getTextWidths(&glyph, sizeof(glyph), nullptr, bounds);
diff --git a/third_party/WebKit/Source/platform/graphics/Canvas2DLayerBridge.cpp b/third_party/WebKit/Source/platform/graphics/Canvas2DLayerBridge.cpp
index b9b9cfbce8b0..a6ed0f02d2a2 100644
--- a/third_party/WebKit/Source/platform/graphics/Canvas2DLayerBridge.cpp
+++ b/third_party/WebKit/Source/platform/graphics/Canvas2DLayerBridge.cpp
@@ -67,18 +67,18 @@ namespace blink {
 #if USE_IOSURFACE_FOR_2D_CANVAS
 struct Canvas2DLayerBridge::ImageInfo : public RefCounted<ImageInfo> {
   ImageInfo(std::unique_ptr<gfx::GpuMemoryBuffer>,
-            GLuint image_id,
-            GLuint texture_id);
+            GLuint imageId,
+            GLuint textureId);
   ~ImageInfo();
 
   // The backing buffer.
-  std::unique_ptr<gfx::GpuMemoryBuffer> gpu_memory_buffer_;
+  std::unique_ptr<gfx::GpuMemoryBuffer> m_gpuMemoryBuffer;
 
   // The id of the CHROMIUM image.
-  const GLuint image_id_;
+  const GLuint m_imageId;
 
   // The id of the texture bound to the CHROMIUM image.
-  const GLuint texture_id_;
+  const GLuint m_textureId;
 };
 #endif  // USE_IOSURFACE_FOR_2D_CANVAS
 
@@ -163,7 +163,7 @@ Canvas2DLayerBridge::Canvas2DLayerBridge(
 Canvas2DLayerBridge::~Canvas2DLayerBridge() {
   DCHECK(destruction_in_progress_);
 #if USE_IOSURFACE_FOR_2D_CANVAS
-  ClearCHROMIUMImageCache();
+  clearCHROMIUMImageCache();
 #endif  // USE_IOSURFACE_FOR_2D_CANVAS
 
   layer_.reset();
@@ -241,128 +241,128 @@ GLenum Canvas2DLayerBridge::GetGLFilter() {
 }
 
 #if USE_IOSURFACE_FOR_2D_CANVAS
-bool Canvas2DLayerBridge::PrepareIOSurfaceMailboxFromImage(
+bool Canvas2DLayerBridge::prepareIOSurfaceMailboxFromImage(
     SkImage* image,
-    cc::TextureMailbox* out_mailbox) {
+    cc::TextureMailbox* outMailbox) {
   // Need to flush skia's internal queue, because the texture is about to be
   // accessed directly.
-  GrContext* gr_context = context_provider_->GetGrContext();
-  gr_context->flush();
+  GrContext* grContext = m_contextProvider->grContext();
+  grContext->flush();
 
-  RefPtr<ImageInfo> image_info = CreateIOSurfaceBackedTexture();
-  if (!image_info)
+  RefPtr<ImageInfo> imageInfo = createIOSurfaceBackedTexture();
+  if (!imageInfo)
     return false;
 
-  gpu::gles2::GLES2Interface* gl = ContextGL();
+  gpu::gles2::GLES2Interface* gl = contextGL();
   if (!gl)
     return false;
 
-  GLuint image_texture =
+  GLuint imageTexture =
       skia::GrBackendObjectToGrGLTextureInfo(image->getTextureHandle(true))
           ->fID;
-  GLenum texture_target = GC3D_TEXTURE_RECTANGLE_ARB;
+  GLenum textureTarget = GC3D_TEXTURE_RECTANGLE_ARB;
   gl->CopySubTextureCHROMIUM(
-      image_texture, 0, texture_target, image_info->texture_id_, 0, 0, 0, 0, 0,
-      size_.Width(), size_.Height(), GL_FALSE, GL_FALSE, GL_FALSE);
+      imageTexture, 0, textureTarget, imageInfo->m_textureId, 0, 0, 0, 0, 0,
+      m_size.width(), m_size.height(), GL_FALSE, GL_FALSE, GL_FALSE);
 
-  MailboxInfo& info = mailboxes_.front();
+  MailboxInfo& info = m_mailboxes.front();
   gpu::Mailbox mailbox;
   gl->GenMailboxCHROMIUM(mailbox.name);
-  gl->ProduceTextureDirectCHROMIUM(image_info->texture_id_, texture_target,
+  gl->ProduceTextureDirectCHROMIUM(imageInfo->m_textureId, textureTarget,
                                    mailbox.name);
 
-  const GLuint64 fence_sync = gl->InsertFenceSyncCHROMIUM();
+  const GLuint64 fenceSync = gl->InsertFenceSyncCHROMIUM();
   gl->Flush();
-  gpu::SyncToken sync_token;
-  gl->GenSyncTokenCHROMIUM(fence_sync, sync_token.GetData());
+  gpu::SyncToken syncToken;
+  gl->GenSyncTokenCHROMIUM(fenceSync, syncToken.GetData());
 
-  info.image_info_ = image_info;
-  bool is_overlay_candidate = true;
-  bool secure_output_only = false;
-  info.mailbox_ = mailbox;
+  info.m_imageInfo = imageInfo;
+  bool isOverlayCandidate = true;
+  bool secureOutputOnly = false;
+  info.m_mailbox = mailbox;
 
-  *out_mailbox =
-      cc::TextureMailbox(mailbox, sync_token, texture_target, gfx::Size(size_),
-                         is_overlay_candidate, secure_output_only);
+  *outMailbox =
+      cc::TextureMailbox(mailbox, syncToken, textureTarget, gfx::Size(m_size),
+                         isOverlayCandidate, secureOutputOnly);
   if (RuntimeEnabledFeatures::colorCorrectRenderingEnabled()) {
-    out_mailbox->set_color_space(color_space_);
-    image_info->gpu_memory_buffer_->SetColorSpaceForScanout(color_space_);
+    outMailbox->set_color_space(m_colorSpace);
+    imageInfo->m_gpuMemoryBuffer->SetColorSpaceForScanout(m_colorSpace);
   }
 
   gl->BindTexture(GC3D_TEXTURE_RECTANGLE_ARB, 0);
 
   // Because we are changing the texture binding without going through skia,
   // we must dirty the context.
-  gr_context->resetContext(kTextureBinding_GrGLBackendState);
+  grContext->resetContext(kTextureBinding_GrGLBackendState);
 
   return true;
 }
 
 RefPtr<Canvas2DLayerBridge::ImageInfo>
-Canvas2DLayerBridge::CreateIOSurfaceBackedTexture() {
-  if (!image_info_cache_.IsEmpty()) {
-    RefPtr<Canvas2DLayerBridge::ImageInfo> info = image_info_cache_.back();
-    image_info_cache_.pop_back();
+Canvas2DLayerBridge::createIOSurfaceBackedTexture() {
+  if (!m_imageInfoCache.isEmpty()) {
+    RefPtr<Canvas2DLayerBridge::ImageInfo> info = m_imageInfoCache.back();
+    m_imageInfoCache.pop_back();
     return info;
   }
 
-  gpu::gles2::GLES2Interface* gl = ContextGL();
+  gpu::gles2::GLES2Interface* gl = contextGL();
   if (!gl)
     return nullptr;
 
-  gpu::GpuMemoryBufferManager* gpu_memory_buffer_manager =
-      Platform::Current()->GetGpuMemoryBufferManager();
-  if (!gpu_memory_buffer_manager)
+  gpu::GpuMemoryBufferManager* gpuMemoryBufferManager =
+      Platform::current()->getGpuMemoryBufferManager();
+  if (!gpuMemoryBufferManager)
     return nullptr;
 
-  std::unique_ptr<gfx::GpuMemoryBuffer> gpu_memory_buffer =
-      gpu_memory_buffer_manager->CreateGpuMemoryBuffer(
-          gfx::Size(size_), gfx::BufferFormat::RGBA_8888,
+  std::unique_ptr<gfx::GpuMemoryBuffer> gpuMemoryBuffer =
+      gpuMemoryBufferManager->CreateGpuMemoryBuffer(
+          gfx::Size(m_size), gfx::BufferFormat::RGBA_8888,
           gfx::BufferUsage::SCANOUT, gpu::kNullSurfaceHandle);
-  if (!gpu_memory_buffer)
+  if (!gpuMemoryBuffer)
     return nullptr;
 
-  GLuint image_id =
-      gl->CreateImageCHROMIUM(gpu_memory_buffer->AsClientBuffer(), size_.Width(),
-                              size_.Height(), GL_RGBA);
-  if (!image_id)
+  GLuint imageId =
+      gl->CreateImageCHROMIUM(gpuMemoryBuffer->AsClientBuffer(), m_size.width(),
+                              m_size.height(), GL_RGBA);
+  if (!imageId)
     return nullptr;
 
-  GLuint texture_id;
-  gl->GenTextures(1, &texture_id);
+  GLuint textureId;
+  gl->GenTextures(1, &textureId);
   GLenum target = GC3D_TEXTURE_RECTANGLE_ARB;
-  gl->BindTexture(target, texture_id);
-  gl->TexParameteri(target, GL_TEXTURE_MAG_FILTER, GetGLFilter());
-  gl->TexParameteri(target, GL_TEXTURE_MIN_FILTER, GetGLFilter());
+  gl->BindTexture(target, textureId);
+  gl->TexParameteri(target, GL_TEXTURE_MAG_FILTER, getGLFilter());
+  gl->TexParameteri(target, GL_TEXTURE_MIN_FILTER, getGLFilter());
   gl->TexParameteri(target, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);
   gl->TexParameteri(target, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);
-  gl->BindTexImage2DCHROMIUM(target, image_id);
+  gl->BindTexImage2DCHROMIUM(target, imageId);
 
-  return AdoptRef(new Canvas2DLayerBridge::ImageInfo(std::move(gpu_memory_buffer),
-                                                     image_id, texture_id));
+  return adoptRef(new Canvas2DLayerBridge::ImageInfo(std::move(gpuMemoryBuffer),
+                                                     imageId, textureId));
 }
 
-void Canvas2DLayerBridge::DeleteCHROMIUMImage(RefPtr<ImageInfo> info) {
-  gpu::gles2::GLES2Interface* gl = ContextGL();
+void Canvas2DLayerBridge::deleteCHROMIUMImage(RefPtr<ImageInfo> info) {
+  gpu::gles2::GLES2Interface* gl = contextGL();
   if (!gl)
     return;
 
   GLenum target = GC3D_TEXTURE_RECTANGLE_ARB;
-  gl->BindTexture(target, info->texture_id_);
-  gl->ReleaseTexImage2DCHROMIUM(target, info->image_id_);
-  gl->DestroyImageCHROMIUM(info->image_id_);
-  gl->DeleteTextures(1, &info->texture_id_);
+  gl->BindTexture(target, info->m_textureId);
+  gl->ReleaseTexImage2DCHROMIUM(target, info->m_imageId);
+  gl->DestroyImageCHROMIUM(info->m_imageId);
+  gl->DeleteTextures(1, &info->m_textureId);
   gl->BindTexture(target, 0);
-  info->gpu_memory_buffer_.reset();
+  info->m_gpuMemoryBuffer.reset();
 
-  ResetSkiaTextureBinding();
+  resetSkiaTextureBinding();
 }
 
-void Canvas2DLayerBridge::ClearCHROMIUMImageCache() {
-  for (const auto& it : image_info_cache_) {
-    DeleteCHROMIUMImage(it);
+void Canvas2DLayerBridge::clearCHROMIUMImageCache() {
+  for (const auto& it : m_imageInfoCache) {
+    deleteCHROMIUMImage(it);
   }
-  image_info_cache_.Clear();
+  m_imageInfoCache.clear();
 }
 #endif  // USE_IOSURFACE_FOR_2D_CANVAS
 
@@ -387,7 +387,7 @@ bool Canvas2DLayerBridge::PrepareMailboxFromImage(
 
 #if USE_IOSURFACE_FOR_2D_CANVAS
   if (RuntimeEnabledFeatures::canvas2dImageChromiumEnabled()) {
-    if (PrepareIOSurfaceMailboxFromImage(image.get(), out_mailbox))
+    if (prepareIOSurfaceMailboxFromImage(image.get(), outMailbox))
       return true;
     // Note: if IOSurface backed texture creation failed we fall back to the
     // non-IOSurface path.
@@ -525,7 +525,7 @@ void Canvas2DLayerBridge::Hibernate() {
   ResetSurface();
   layer_->ClearTexture();
 #if USE_IOSURFACE_FOR_2D_CANVAS
-  ClearCHROMIUMImageCache();
+  clearCHROMIUMImageCache();
 #endif  // USE_IOSURFACE_FOR_2D_CANVAS
   logger_->DidStartHibernating();
 }
@@ -965,11 +965,11 @@ void Canvas2DLayerBridge::MailboxReleased(const gpu::Mailbox& mailbox,
   }
 
 #if USE_IOSURFACE_FOR_2D_CANVAS
-  if (released_mailbox_info->image_info_ && !lost_resource) {
-    if (context_lost) {
-      DeleteCHROMIUMImage(released_mailbox_info->image_info_);
+  if (releasedMailboxInfo->m_imageInfo && !lostResource) {
+    if (contextLost) {
+      deleteCHROMIUMImage(releasedMailboxInfo->m_imageInfo);
     } else {
-      image_info_cache_.push_back(released_mailbox_info->image_info_);
+      m_imageInfoCache.push_back(releasedMailboxInfo->m_imageInfo);
     }
   }
 #endif  // USE_IOSURFACE_FOR_2D_CANVAS
@@ -979,7 +979,7 @@ void Canvas2DLayerBridge::MailboxReleased(const gpu::Mailbox& mailbox,
     // copy-on-write.
     if (released_mailbox_info->image_) {
 #if USE_IOSURFACE_FOR_2D_CANVAS
-      DCHECK(!released_mailbox_info->image_info_);
+      DCHECK(!releasedMailboxInfo->m_imageInfo);
 #endif  // USE_IOSURFACE_FOR_2D_CANVAS
       gpu::gles2::GLES2Interface* gl = ContextGL();
       if (sync_token.HasData() && gl) {
@@ -1097,15 +1097,15 @@ void Canvas2DLayerBridge::WillOverwriteCanvas() {
 
 #if USE_IOSURFACE_FOR_2D_CANVAS
 Canvas2DLayerBridge::ImageInfo::ImageInfo(
-    std::unique_ptr<gfx::GpuMemoryBuffer> gpu_memory_buffer,
-    GLuint image_id,
-    GLuint texture_id)
-    : gpu_memory_buffer_(std::move(gpu_memory_buffer)),
-      image_id_(image_id),
-      texture_id_(texture_id) {
-  DCHECK(gpu_memory_buffer_);
-  DCHECK(image_id_);
-  DCHECK(texture_id_);
+    std::unique_ptr<gfx::GpuMemoryBuffer> gpuMemoryBuffer,
+    GLuint imageId,
+    GLuint textureId)
+    : m_gpuMemoryBuffer(std::move(gpuMemoryBuffer)),
+      m_imageId(imageId),
+      m_textureId(textureId) {
+  DCHECK(m_gpuMemoryBuffer);
+  DCHECK(m_imageId);
+  DCHECK(m_textureId);
 }
 
 Canvas2DLayerBridge::ImageInfo::~ImageInfo() {}
diff --git a/third_party/WebKit/Source/platform/graphics/GraphicsContext.cpp b/third_party/WebKit/Source/platform/graphics/GraphicsContext.cpp
index 5d2c3d2cdcf9..ca10eb437f24 100644
--- a/third_party/WebKit/Source/platform/graphics/GraphicsContext.cpp
+++ b/third_party/WebKit/Source/platform/graphics/GraphicsContext.cpp
@@ -583,9 +583,9 @@ sk_sp<PaintRecord> RecordMarker(
 
 #else  // OS(MACOSX)
 
-sk_sp<PaintRecord> RecordMarker(
+sk_sp<PaintRecord> recordMarker(
     GraphicsContext::DocumentMarkerLineStyle style) {
-  SkColor color = (style == GraphicsContext::kDocumentMarkerGrammarLineStyle)
+  SkColor color = (style == GraphicsContext::DocumentMarkerGrammarLineStyle)
       ? SkColorSetRGB(0x6B, 0x6B, 0x6B)
       : SkColorSetRGB(0xFB, 0x2D, 0x1D);
 
diff --git a/third_party/WebKit/Source/platform/graphics/gpu/DrawingBuffer.cpp b/third_party/WebKit/Source/platform/graphics/gpu/DrawingBuffer.cpp
index 61d8a4145a78..8e4af05c6182 100644
--- a/third_party/WebKit/Source/platform/graphics/gpu/DrawingBuffer.cpp
+++ b/third_party/WebKit/Source/platform/graphics/gpu/DrawingBuffer.cpp
@@ -379,7 +379,7 @@ bool DrawingBuffer::FinishPrepareTextureMailboxGpu(
                                        color_buffer_for_mailbox->mailbox.name);
     const GLuint64 fence_sync = gl_->InsertFenceSyncCHROMIUM();
 #if OS(MACOSX)
-    gl_->DescheduleUntilFinishedCHROMIUM();
+    m_gl->DescheduleUntilFinishedCHROMIUM();
 #endif
     gl_->Flush();
     gl_->GenSyncTokenCHROMIUM(
@@ -524,23 +524,23 @@ DrawingBuffer::GpuMemoryBufferColorBufferParameters() {
   ColorBufferParameters parameters;
   parameters.target = GC3D_TEXTURE_RECTANGLE_ARB;
 
-  if (want_alpha_channel_) {
-    parameters.creation_internal_color_format = GL_RGBA;
-    parameters.internal_color_format = GL_RGBA;
-  } else if (ContextProvider()
-                 ->GetCapabilities()
+  if (m_wantAlphaChannel) {
+    parameters.creationInternalColorFormat = GL_RGBA;
+    parameters.internalColorFormat = GL_RGBA;
+  } else if (contextProvider()
+                 ->getCapabilities()
                  .chromium_image_rgb_emulation) {
-    parameters.creation_internal_color_format = GL_RGB;
-    parameters.internal_color_format = GL_RGBA;
+    parameters.creationInternalColorFormat = GL_RGB;
+    parameters.internalColorFormat = GL_RGBA;
   } else {
     GLenum format =
-        DefaultBufferRequiresAlphaChannelToBePreserved() ? GL_RGBA : GL_RGB;
-    parameters.creation_internal_color_format = format;
-    parameters.internal_color_format = format;
+        defaultBufferRequiresAlphaChannelToBePreserved() ? GL_RGBA : GL_RGB;
+    parameters.creationInternalColorFormat = format;
+    parameters.internalColorFormat = format;
   }
 
   // Unused when CHROMIUM_image is being used.
-  parameters.color_format = 0;
+  parameters.colorFormat = 0;
   return parameters;
 #else
   return TextureColorBufferParameters();
diff --git a/third_party/WebKit/Source/platform/graphics/gpu/WebGLImageConversion.cpp b/third_party/WebKit/Source/platform/graphics/gpu/WebGLImageConversion.cpp
index adf3abdb8293..1390d3e1beec 100644
--- a/third_party/WebKit/Source/platform/graphics/gpu/WebGLImageConversion.cpp
+++ b/third_party/WebKit/Source/platform/graphics/gpu/WebGLImageConversion.cpp
@@ -471,7 +471,7 @@ void Unpack<WebGLImageConversion::kDataFormatRGBA5551, uint16_t, uint8_t>(
   SIMD::UnpackOneRowOfRGBA5551LittleToRGBA8(source, destination, pixels_per_row);
 #endif
 #if HAVE(ARM_NEON_INTRINSICS)
-  SIMD::UnpackOneRowOfRGBA5551ToRGBA8(source, destination, pixels_per_row);
+  SIMD::unpackOneRowOfRGBA5551ToRGBA8(source, destination, pixelsPerRow);
 #endif
 #if HAVE(MIPS_MSA_INTRINSICS)
   SIMD::unpackOneRowOfRGBA5551ToRGBA8MSA(source, destination, pixelsPerRow);
@@ -500,7 +500,7 @@ void Unpack<WebGLImageConversion::kDataFormatRGBA4444, uint16_t, uint8_t>(
   SIMD::UnpackOneRowOfRGBA4444LittleToRGBA8(source, destination, pixels_per_row);
 #endif
 #if HAVE(ARM_NEON_INTRINSICS)
-  SIMD::UnpackOneRowOfRGBA4444ToRGBA8(source, destination, pixels_per_row);
+  SIMD::unpackOneRowOfRGBA4444ToRGBA8(source, destination, pixelsPerRow);
 #endif
 #if HAVE(MIPS_MSA_INTRINSICS)
   SIMD::unpackOneRowOfRGBA4444ToRGBA8MSA(source, destination, pixelsPerRow);
@@ -911,7 +911,7 @@ void Pack<WebGLImageConversion::kDataFormatRGBA4444,
                     uint16_t* destination,
                     unsigned pixels_per_row) {
 #if HAVE(ARM_NEON_INTRINSICS)
-  SIMD::PackOneRowOfRGBA8ToUnsignedShort4444(source, destination, pixels_per_row);
+  SIMD::packOneRowOfRGBA8ToUnsignedShort4444(source, destination, pixelsPerRow);
 #endif
 #if HAVE(MIPS_MSA_INTRINSICS)
   SIMD::packOneRowOfRGBA8ToUnsignedShort4444MSA(source, destination,
@@ -978,7 +978,7 @@ void Pack<WebGLImageConversion::kDataFormatRGBA5551,
                     uint16_t* destination,
                     unsigned pixels_per_row) {
 #if HAVE(ARM_NEON_INTRINSICS)
-  SIMD::PackOneRowOfRGBA8ToUnsignedShort5551(source, destination, pixels_per_row);
+  SIMD::packOneRowOfRGBA8ToUnsignedShort5551(source, destination, pixelsPerRow);
 #endif
 #if HAVE(MIPS_MSA_INTRINSICS)
   SIMD::packOneRowOfRGBA8ToUnsignedShort5551MSA(source, destination,
@@ -1045,7 +1045,7 @@ void Pack<WebGLImageConversion::kDataFormatRGB565,
                     uint16_t* destination,
                     unsigned pixels_per_row) {
 #if HAVE(ARM_NEON_INTRINSICS)
-  SIMD::PackOneRowOfRGBA8ToUnsignedShort565(source, destination, pixels_per_row);
+  SIMD::packOneRowOfRGBA8ToUnsignedShort565(source, destination, pixelsPerRow);
 #endif
 #if HAVE(MIPS_MSA_INTRINSICS)
   SIMD::packOneRowOfRGBA8ToUnsignedShort565MSA(source, destination,
diff --git a/third_party/WebKit/Source/platform/graphics/paint/DisplayItemList.cpp b/third_party/WebKit/Source/platform/graphics/paint/DisplayItemList.cpp
index d2243e1cd984..8c358489f1f9 100644
--- a/third_party/WebKit/Source/platform/graphics/paint/DisplayItemList.cpp
+++ b/third_party/WebKit/Source/platform/graphics/paint/DisplayItemList.cpp
@@ -82,7 +82,7 @@ std::unique_ptr<JSONArray> DisplayItemList::SubsequenceAsJSON(
       } else {
 #else
 
-      if (options & kShowClientDebugName) {
+      if (options & ShowClientDebugName) {
 #endif
         json->SetString(
             "clientDebugName",
diff --git a/third_party/WebKit/Source/platform/graphics/paint/GeometryMapperTest.cpp b/third_party/WebKit/Source/platform/graphics/paint/GeometryMapperTest.cpp
index 74a849fa5f41..978462ea6d3b 100644
--- a/third_party/WebKit/Source/platform/graphics/paint/GeometryMapperTest.cpp
+++ b/third_party/WebKit/Source/platform/graphics/paint/GeometryMapperTest.cpp
@@ -162,7 +162,8 @@ TEST_F(GeometryMapperTest, Root) {
   bool has_radius = false;
   CHECK_MAPPINGS(input, input, input,
                  TransformPaintPropertyNode::Root()->Matrix(), FloatClipRect(),
-                 PropertyTreeState::Root(), PropertyTreeState::Root());
+                 PropertyTreeState::Root(), PropertyTreeState::Root(),
+                 has_radius);
 }
 
 TEST_F(GeometryMapperTest, IdentityTransform) {
@@ -177,7 +178,7 @@ TEST_F(GeometryMapperTest, IdentityTransform) {
 
   bool has_radius = false;
   CHECK_MAPPINGS(input, input, input, transform->Matrix(), FloatClipRect(),
-                 local_state, PropertyTreeState::Root());
+                 local_state, PropertyTreeState::Root(), has_radius);
 }
 
 TEST_F(GeometryMapperTest, TranslationTransform) {
@@ -194,7 +195,7 @@ TEST_F(GeometryMapperTest, TranslationTransform) {
 
   bool has_radius = false;
   CHECK_MAPPINGS(input, output, output, transform->Matrix(), FloatClipRect(),
-                 local_state, PropertyTreeState::Root());
+                 local_state, PropertyTreeState::Root(), has_radius);
 
   GeometryMapper::AncestorToLocalRect(TransformPaintPropertyNode::Root(),
                                       local_state.Transform(), output);
@@ -217,7 +218,7 @@ TEST_F(GeometryMapperTest, RotationAndScaleTransform) {
 
   bool has_radius = false;
   CHECK_MAPPINGS(input, output, output, transform_matrix, FloatClipRect(),
-                 local_state, PropertyTreeState::Root());
+                 local_state, PropertyTreeState::Root(), has_radius);
 }
 
 TEST_F(GeometryMapperTest, RotationAndScaleTransformWithTransformOrigin) {
@@ -237,7 +238,7 @@ TEST_F(GeometryMapperTest, RotationAndScaleTransformWithTransformOrigin) {
 
   bool has_radius = false;
   CHECK_MAPPINGS(input, output, output, transform_matrix, FloatClipRect(),
-                 local_state, PropertyTreeState::Root());
+                 local_state, PropertyTreeState::Root(), has_radius);
 }
 
 TEST_F(GeometryMapperTest, NestedTransforms) {
@@ -262,7 +263,7 @@ TEST_F(GeometryMapperTest, NestedTransforms) {
 
   bool has_radius = false;
   CHECK_MAPPINGS(input, output, output, final, FloatClipRect(), local_state,
-                 PropertyTreeState::Root());
+                 PropertyTreeState::Root(), has_radius);
 
   // Check the cached matrix for the intermediate transform.
   EXPECT_EQ(rotate_transform, *GetTransform(transform1.Get(),
@@ -292,7 +293,7 @@ TEST_F(GeometryMapperTest, NestedTransformsFlattening) {
   FloatRect output = final.MapRect(input);
   bool has_radius = false;
   CHECK_MAPPINGS(input, output, output, final, FloatClipRect(), local_state,
-                 PropertyTreeState::Root());
+                 PropertyTreeState::Root(), has_radius);
 }
 
 TEST_F(GeometryMapperTest, NestedTransformsScaleAndTranslation) {
@@ -319,7 +320,7 @@ TEST_F(GeometryMapperTest, NestedTransformsScaleAndTranslation) {
 
   bool has_radius = false;
   CHECK_MAPPINGS(input, output, output, final, FloatClipRect(), local_state,
-                 PropertyTreeState::Root());
+                 PropertyTreeState::Root(), has_radius);
 
   // Check the cached matrix for the intermediate transform.
   EXPECT_EQ(scale_transform, *GetTransform(transform1.Get(),
@@ -350,7 +351,7 @@ TEST_F(GeometryMapperTest, NestedTransformsIntermediateDestination) {
 
   bool has_radius = false;
   CHECK_MAPPINGS(input, output, output, scale_transform, FloatClipRect(),
-                 local_state, intermediate_state);
+                 local_state, intermediate_state, has_radius);
 }
 
 TEST_F(GeometryMapperTest, SimpleClip) {
@@ -372,7 +373,7 @@ TEST_F(GeometryMapperTest, SimpleClip) {
                      ->Matrix(),  // Transform matrix to ancestor space
                  FloatClipRect(clip->ClipRect().Rect()),  // Clip rect in
                                                           // ancestor space
-                 local_state, PropertyTreeState::Root());
+                 local_state, PropertyTreeState::Root(), has_radius);
 }
 
 TEST_F(GeometryMapperTest, RoundedClip) {
@@ -398,7 +399,7 @@ TEST_F(GeometryMapperTest, RoundedClip) {
                  TransformPaintPropertyNode::Root()
                      ->Matrix(),  // Transform matrix to ancestor space
                  expected_clip,    // Clip rect in ancestor space
-                 local_state, PropertyTreeState::Root());
+                 local_state, PropertyTreeState::Root(), has_radius);
 }
 
 TEST_F(GeometryMapperTest, TwoClips) {
@@ -433,7 +434,7 @@ TEST_F(GeometryMapperTest, TwoClips) {
                      ->Matrix(),  // Transform matrix to ancestor space
                  clip_rect,        // Clip rect in ancestor space
                  local_state,
-                 ancestor_state);
+                 ancestor_state, has_radius);
 
   ancestor_state.SetClip(clip1.Get());
   FloatRect output2(10, 10, 50, 50);
@@ -448,7 +449,7 @@ TEST_F(GeometryMapperTest, TwoClips) {
                  TransformPaintPropertyNode::Root()
                      ->Matrix(),  // Transform matrix to ancestor space
                  clip_rect2,       // Clip rect in ancestor space
-                 local_state, ancestor_state);
+                 local_state, ancestor_state, has_radius);
 }
 
 TEST_F(GeometryMapperTest, TwoClipsTransformAbove) {
@@ -486,7 +487,7 @@ TEST_F(GeometryMapperTest, TwoClipsTransformAbove) {
                      ->Matrix(),  // Transform matrix to ancestor space
                  expected_clip,    // Clip rect in ancestor space
                  local_state,
-                 ancestor_state);
+                 ancestor_state, has_radius);
 
   expected_clip.SetRect(clip1->ClipRect().Rect());
   local_state.SetClip(clip1.Get());
@@ -498,7 +499,7 @@ TEST_F(GeometryMapperTest, TwoClipsTransformAbove) {
                      ->Matrix(),  // Transform matrix to ancestor space
                  expected_clip,    // Clip rect in ancestor space
                  local_state,
-                 ancestor_state);
+                 ancestor_state, has_radius);
 }
 
 TEST_F(GeometryMapperTest, ClipBeforeTransform) {
@@ -529,7 +530,7 @@ TEST_F(GeometryMapperTest, ClipBeforeTransform) {
       rotate_transform,                 // Transform matrix to ancestor space
       FloatClipRect(rotate_transform.MapRect(
           clip->ClipRect().Rect())),  // Clip rect in ancestor space
-      local_state, PropertyTreeState::Root());
+      local_state, PropertyTreeState::Root(), has_radius);
 }
 
 TEST_F(GeometryMapperTest, ClipAfterTransform) {
@@ -559,7 +560,7 @@ TEST_F(GeometryMapperTest, ClipAfterTransform) {
       rotate_transform.MapRect(input),  // Transformed rect (not clipped)
       rotate_transform,                 // Transform matrix to ancestor space
       FloatClipRect(clip->ClipRect().Rect()),  // Clip rect in ancestor space
-      local_state, PropertyTreeState::Root());
+      local_state, PropertyTreeState::Root(), has_radius);
 }
 
 TEST_F(GeometryMapperTest, TwoClipsWithTransformBetween) {
@@ -594,7 +595,7 @@ TEST_F(GeometryMapperTest, TwoClipsWithTransformBetween) {
         rotate_transform.MapRect(input),  // Transformed rect (not clipped)
         rotate_transform,                 // Transform matrix to ancestor space
         FloatClipRect(clip1->ClipRect().Rect()),  // Clip rect in ancestor space
-        local_state, PropertyTreeState::Root());
+        local_state, PropertyTreeState::Root(), has_radius);
   }
 
   {
@@ -620,7 +621,7 @@ TEST_F(GeometryMapperTest, TwoClipsWithTransformBetween) {
         rotate_transform.MapRect(input),  // Transformed rect (not clipped)
         rotate_transform,                 // Transform matrix to ancestor space
         FloatClipRect(mapped_clip),       // Clip rect in ancestor space
-        local_state, PropertyTreeState::Root());
+        local_state, PropertyTreeState::Root(), has_radius);
   }
 }
 
@@ -843,7 +844,7 @@ TEST_F(GeometryMapperTest, FilterWithClipsAndTransforms) {
       transform_above_effect->Matrix() * transform_below_effect->Matrix();
   CHECK_MAPPINGS(input, output, FloatRect(0, 0, 300, 300), combined_transform,
                  FloatClipRect(FloatRect(30, 30, 270, 270)), local_state,
-                 PropertyTreeState::Root());
+                 PropertyTreeState::Root(), has_radius);
 }
 
 TEST_F(GeometryMapperTest, ReflectionWithPaintOffset) {
@@ -865,7 +866,7 @@ TEST_F(GeometryMapperTest, ReflectionWithPaintOffset) {
 
   bool has_radius = false;
   CHECK_MAPPINGS(input, output, input, TransformationMatrix(), FloatClipRect(),
-                 local_state, PropertyTreeState::Root());
+                 local_state, PropertyTreeState::Root(), has_radius);
 }
 
 }  // namespace blink
diff --git a/third_party/WebKit/Source/platform/graphics/skia/SkiaUtils.cpp b/third_party/WebKit/Source/platform/graphics/skia/SkiaUtils.cpp
index fa57166259d0..6d33e21afa44 100644
--- a/third_party/WebKit/Source/platform/graphics/skia/SkiaUtils.cpp
+++ b/third_party/WebKit/Source/platform/graphics/skia/SkiaUtils.cpp
@@ -348,7 +348,7 @@ void DrawPlatformFocusRing(const PrimitiveType& primitive,
 
 #if OS(MACOSX)
   flags.setAlpha(64);
-  const float corner_radius = (width - 1) * 0.5f;
+  const float cornerRadius = (width - 1) * 0.5f;
 #else
   const float corner_radius = width;
 #endif
@@ -359,7 +359,7 @@ void DrawPlatformFocusRing(const PrimitiveType& primitive,
   // Inner part
   flags.setAlpha(128);
   flags.setStrokeWidth(flags.getStrokeWidth() * 0.5f);
-  DrawFocusRingPrimitive(primitive, canvas, flags, corner_radius);
+  drawFocusRingPrimitive(primitive, canvas, flags, cornerRadius);
 #endif
 }
 
diff --git a/third_party/WebKit/Source/platform/heap/GCInfo.cpp b/third_party/WebKit/Source/platform/heap/GCInfo.cpp
index c07236292cb0..3b9a882c7a67 100644
--- a/third_party/WebKit/Source/platform/heap/GCInfo.cpp
+++ b/third_party/WebKit/Source/platform/heap/GCInfo.cpp
@@ -68,7 +68,7 @@ void AssertObjectHasGCInfo(const void* payload, size_t gc_info_index) {
 #if !defined(COMPONENT_BUILD)
   // On component builds we cannot compare the gcInfos as they are statically
   // defined in each of the components and hence will not match.
-  ASSERT(HeapObjectHeader::FromPayload(payload)->GcInfoIndex() == gc_info_index);
+  ASSERT(HeapObjectHeader::fromPayload(payload)->gcInfoIndex() == gcInfoIndex);
 #endif
 }
 #endif
diff --git a/third_party/WebKit/Source/platform/heap/Heap.cpp b/third_party/WebKit/Source/platform/heap/Heap.cpp
index 45c1b98552c0..6028805285c2 100644
--- a/third_party/WebKit/Source/platform/heap/Heap.cpp
+++ b/third_party/WebKit/Source/platform/heap/Heap.cpp
@@ -171,7 +171,7 @@ Address ThreadHeap::CheckAndMarkPointer(Visitor* visitor, Address address) {
   ASSERT(ThreadState::Current()->IsInGC());
 
 #if !DCHECK_IS_ON()
-  if (heap_does_not_contain_cache_->Lookup(address))
+  if (m_heapDoesNotContainCache->lookup(address))
     return nullptr;
 #endif
 
@@ -184,7 +184,7 @@ Address ThreadHeap::CheckAndMarkPointer(Visitor* visitor, Address address) {
   }
 
 #if !DCHECK_IS_ON()
-  heap_does_not_contain_cache_->AddEntry(address);
+  m_heapDoesNotContainCache->addEntry(address);
 #else
   if (!heap_does_not_contain_cache_->Lookup(address))
     heap_does_not_contain_cache_->AddEntry(address);
diff --git a/third_party/WebKit/Source/platform/heap/HeapPage.cpp b/third_party/WebKit/Source/platform/heap/HeapPage.cpp
index 2748ca43588e..29edff298507 100644
--- a/third_party/WebKit/Source/platform/heap/HeapPage.cpp
+++ b/third_party/WebKit/Source/platform/heap/HeapPage.cpp
@@ -90,9 +90,9 @@ namespace blink {
 
 #if DCHECK_IS_ON() && CPU(64BIT)
 NO_SANITIZE_ADDRESS
-void HeapObjectHeader::ZapMagic() {
-  CheckHeader();
-  magic_ = kZappedMagic;
+void HeapObjectHeader::zapMagic() {
+  checkHeader();
+  m_magic = zappedMagic;
 }
 #endif
 
@@ -542,9 +542,9 @@ void NormalPageArena::SweepAndCompact() {
     //
     // If in a debug setting, the unused page contents will have been
     // zapped already; leave it in that state.
-    DCHECK(!available_pages->IsLargeObjectPage());
-    NormalPage* unused_page = reinterpret_cast<NormalPage*>(available_pages);
-    memset(unused_page->Payload(), 0, unused_page->PayloadSize());
+    DCHECK(!availablePages->isLargeObjectPage());
+    NormalPage* unusedPage = reinterpret_cast<NormalPage*>(availablePages);
+    memset(unusedPage->payload(), 0, unusedPage->payloadSize());
 #endif
     available_pages->RemoveFromHeap();
     available_pages = static_cast<NormalPage*>(next_page);
@@ -1275,14 +1275,14 @@ void NormalPage::RemoveFromHeap() {
 }
 
 #if !DCHECK_IS_ON() && !defined(LEAK_SANITIZER) && !defined(ADDRESS_SANITIZER)
-static void DiscardPages(Address begin, Address end) {
-  uintptr_t begin_address =
+static void discardPages(Address begin, Address end) {
+  uintptr_t beginAddress =
       WTF::RoundUpToSystemPage(reinterpret_cast<uintptr_t>(begin));
-  uintptr_t end_address =
+  uintptr_t endAddress =
       WTF::RoundDownToSystemPage(reinterpret_cast<uintptr_t>(end));
-  if (begin_address < end_address)
-    WTF::DiscardSystemPages(reinterpret_cast<void*>(begin_address),
-                            end_address - begin_address);
+  if (beginAddress < endAddress)
+    WTF::DiscardSystemPages(reinterpret_cast<void*>(beginAddress),
+                            endAddress - beginAddress);
 }
 #endif
 
@@ -1333,8 +1333,8 @@ void NormalPage::Sweep() {
 #if !DCHECK_IS_ON() && !defined(LEAK_SANITIZER) && !defined(ADDRESS_SANITIZER)
       // Discarding pages increases page faults and may regress performance.
       // So we enable this only on low-RAM devices.
-      if (MemoryCoordinator::IsLowEndDevice())
-        DiscardPages(start_of_gap + sizeof(FreeListEntry), header_address);
+      if (MemoryCoordinator::isLowEndDevice())
+        discardPages(startOfGap + sizeof(FreeListEntry), headerAddress);
 #endif
     }
     header->Unmark();
@@ -1345,8 +1345,8 @@ void NormalPage::Sweep() {
   if (start_of_gap != PayloadEnd()) {
     page_arena->AddToFreeList(start_of_gap, PayloadEnd() - start_of_gap);
 #if !DCHECK_IS_ON() && !defined(LEAK_SANITIZER) && !defined(ADDRESS_SANITIZER)
-    if (MemoryCoordinator::IsLowEndDevice())
-      DiscardPages(start_of_gap + sizeof(FreeListEntry), PayloadEnd());
+    if (MemoryCoordinator::isLowEndDevice())
+      discardPages(startOfGap + sizeof(FreeListEntry), payloadEnd());
 #endif
   }
 
diff --git a/third_party/WebKit/Source/platform/heap/HeapTest.cpp b/third_party/WebKit/Source/platform/heap/HeapTest.cpp
index 071a06ccb1d3..42f18e282cca 100644
--- a/third_party/WebKit/Source/platform/heap/HeapTest.cpp
+++ b/third_party/WebKit/Source/platform/heap/HeapTest.cpp
@@ -5821,12 +5821,12 @@ TEST(HeapTest, TraceDeepEagerly) {
     obj = new DeepEagerly(obj);
 
   Persistent<DeepEagerly> persistent(obj);
-  PreciselyCollectGarbage();
+  preciselyCollectGarbage();
 
   // Verify that the DeepEagerly chain isn't completely unravelled
   // by performing eager trace() calls, but the explicit mark
   // stack is switched once some nesting limit is exceeded.
-  EXPECT_GT(DeepEagerly::s_trace_lazy_, 2);
+  EXPECT_GT(DeepEagerly::sTraceLazy, 2);
 #endif
 }
 
diff --git a/third_party/WebKit/Source/platform/image-encoders/JPEGImageEncoder.cpp b/third_party/WebKit/Source/platform/image-encoders/JPEGImageEncoder.cpp
index a859f695aa7b..4f8bcff1d25d 100644
--- a/third_party/WebKit/Source/platform/image-encoders/JPEGImageEncoder.cpp
+++ b/third_party/WebKit/Source/platform/image-encoders/JPEGImageEncoder.cpp
@@ -67,10 +67,10 @@ void RGBAtoRGBScalar(const unsigned char* pixels,
 // TODO(cavalcantii): use regular macro, see https://crbug.com/673067.
 #ifdef __ARM_NEON__
 void RGBAtoRGBNeon(const unsigned char* input,
-                   const unsigned pixel_count,
+                   const unsigned pixelCount,
                    unsigned char* output) {
-  const unsigned kPixelsPerLoad = 16;
-  const unsigned kRgbaStep = kPixelsPerLoad * 4, kRgbStep = kPixelsPerLoad * 3;
+  const unsigned pixelsPerLoad = 16;
+  const unsigned rgbaStep = pixelsPerLoad * 4, rgbStep = pixelsPerLoad * 3;
   // Input registers.
   uint8x16x4_t rgba;
   // Output registers.
@@ -79,7 +79,7 @@ void RGBAtoRGBNeon(const unsigned char* input,
   uint8x8_t low, high;
   uint8x16_t result;
   unsigned counter;
-  auto transform_color = [&](size_t channel) {
+  auto transformColor = [&](size_t channel) {
     // Extracts the low/high part of the 128 bits.
     low = vget_low_u8(rgba.val[channel]);
     high = vget_high_u8(rgba.val[channel]);
@@ -93,27 +93,27 @@ void RGBAtoRGBNeon(const unsigned char* input,
     rgb.val[channel] = result;
   };
 
-  for (counter = 0; counter + kPixelsPerLoad <= pixel_count;
-       counter += kPixelsPerLoad) {
+  for (counter = 0; counter + pixelsPerLoad <= pixelCount;
+       counter += pixelsPerLoad) {
     // Reads 16 pixels at once, each color channel in a different
     // 128 bits register.
     rgba = vld4q_u8(input);
 
-    transform_color(0);
-    transform_color(1);
-    transform_color(2);
+    transformColor(0);
+    transformColor(1);
+    transformColor(2);
 
     // Write back (interleaved) results to output.
     vst3q_u8(output, rgb);
 
     // Advance to next elements (could be avoided loading register with
     // increment after i.e. "vld4 {vector}, [r1]!").
-    input += kRgbaStep;
-    output += kRgbStep;
+    input += rgbaStep;
+    output += rgbStep;
   }
 
   // Handle the tail elements.
-  unsigned remaining = pixel_count;
+  unsigned remaining = pixelCount;
   remaining -= counter;
   if (remaining != 0) {
     RGBAtoRGBScalar(input, remaining, output);
diff --git a/third_party/WebKit/Source/platform/image-encoders/JPEGImageEncoderTest.cpp b/third_party/WebKit/Source/platform/image-encoders/JPEGImageEncoderTest.cpp
index 58565098ca2c..c2432d90ac94 100644
--- a/third_party/WebKit/Source/platform/image-encoders/JPEGImageEncoderTest.cpp
+++ b/third_party/WebKit/Source/platform/image-encoders/JPEGImageEncoderTest.cpp
@@ -35,11 +35,10 @@ TEST_F(RGBAtoRGBTest, testOpaqueCaseEven8pixels) {
 
   unsigned char expected[] = {255, 0, 0, 255, 0, 0, 255, 0, 0, 255, 0, 0, 0,
                               255, 0, 0, 255, 0, 0, 255, 0, 0, 255, 0};
-  // TODO(dcheng): Make this all constexpr.
 #if OS(WIN)
   // Windows release bot can't be reasoned with (compiler error C2131).
-  static const constexpr size_t pixels = sizeof(canvas) / kChannelsRGBA;
-  static const constexpr size_t rgb_size = pixels * kChannelsRGB;
+  static const constexpr size_t pixels = sizeof(canvas) / channelsRGBA;
+  static const constexpr size_t rgbSize = pixels * channelsRGB;
 #else
   const size_t pixels = CalculateRGBAPixels(sizeof(canvas));
   const size_t rgb_size = CalculateRGBOutputSize(sizeof(canvas));
@@ -62,17 +61,17 @@ TEST_F(RGBAtoRGBTest, testCaseEven16pixels) {
       128, 0,   0,   255, 128, 0,   0,   255, 128, 128, 128, 128, 128,
       128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128};
 
-  const size_t pixels = CalculateRGBAPixels(sizeof(canvas));
-  const size_t rgb_size = CalculateRGBOutputSize(sizeof(canvas));
-  unsigned char output[rgb_size];
-  unsigned char expected[rgb_size];
-  memset(output, 0, rgb_size);
-  memset(expected, 0, rgb_size);
+  const size_t pixels = calculateRGBAPixels(sizeof(canvas));
+  const size_t rgbSize = calculateRGBOutputSize(sizeof(canvas));
+  unsigned char output[rgbSize];
+  unsigned char expected[rgbSize];
+  memset(output, 0, rgbSize);
+  memset(expected, 0, rgbSize);
 
   blink::RGBAtoRGBScalar(canvas, static_cast<unsigned>(pixels), expected);
   blink::RGBAtoRGBNeon(canvas, static_cast<unsigned>(pixels), output);
 
-  EXPECT_EQ(memcmp(expected, output, rgb_size), 0);
+  EXPECT_EQ(memcmp(expected, output, rgbSize), 0);
 }
 
 TEST_F(RGBAtoRGBTest, testCaseOdd17pixels) {
@@ -83,17 +82,17 @@ TEST_F(RGBAtoRGBTest, testCaseOdd17pixels) {
       255, 128, 0,   0,   255, 128, 128, 128, 128, 128, 128, 128, 128, 128,
       128, 128, 128, 128, 128, 128, 128, 128, 10,  10,  10,  100};
 
-  const size_t pixels = CalculateRGBAPixels(sizeof(canvas));
-  const size_t rgb_size = CalculateRGBOutputSize(sizeof(canvas));
-  unsigned char output[rgb_size];
-  unsigned char expected[rgb_size];
-  memset(output, 0, rgb_size);
-  memset(expected, 0, rgb_size);
+  const size_t pixels = calculateRGBAPixels(sizeof(canvas));
+  const size_t rgbSize = calculateRGBOutputSize(sizeof(canvas));
+  unsigned char output[rgbSize];
+  unsigned char expected[rgbSize];
+  memset(output, 0, rgbSize);
+  memset(expected, 0, rgbSize);
 
   blink::RGBAtoRGBScalar(canvas, static_cast<unsigned>(pixels), expected);
   blink::RGBAtoRGBNeon(canvas, static_cast<unsigned>(pixels), output);
 
-  EXPECT_EQ(memcmp(expected, output, rgb_size), 0);
+  EXPECT_EQ(memcmp(expected, output, rgbSize), 0);
 }
 
 TEST_F(RGBAtoRGBTest, testCaseEven32pixels) {
@@ -108,28 +107,28 @@ TEST_F(RGBAtoRGBTest, testCaseEven32pixels) {
       255, 0,   255, 0,   255, 0,   255, 0,   0,   255, 128, 0,   0,   255, 128,
       0,   0,   255, 128, 0,   0,   255, 128};
 
-  const size_t pixels = CalculateRGBAPixels(sizeof(canvas));
-  const size_t rgb_size = CalculateRGBOutputSize(sizeof(canvas));
-  unsigned char output[rgb_size];
-  unsigned char expected[rgb_size];
-  memset(output, 0, rgb_size);
-  memset(expected, 0, rgb_size);
+  const size_t pixels = calculateRGBAPixels(sizeof(canvas));
+  const size_t rgbSize = calculateRGBOutputSize(sizeof(canvas));
+  unsigned char output[rgbSize];
+  unsigned char expected[rgbSize];
+  memset(output, 0, rgbSize);
+  memset(expected, 0, rgbSize);
 
   blink::RGBAtoRGBScalar(canvas, static_cast<unsigned>(pixels), expected);
   blink::RGBAtoRGBNeon(canvas, static_cast<unsigned>(pixels), output);
 
-  EXPECT_EQ(memcmp(expected, output, rgb_size), 0);
+  EXPECT_EQ(memcmp(expected, output, rgbSize), 0);
 }
 
-static base::TimeDelta TestNpixels(bool fast_path = true,
+static base::TimeDelta testNpixels(bool fastPath = true,
                                    const size_t width = 1024,
                                    const size_t height = 1024,
-                                   bool set_alpha = true) {
+                                   bool setAlpha = true) {
   const size_t pixels = width * height;
-  const size_t canvas_len = kChannelsRGBA * width * height;
-  const size_t output_len = kChannelsRGB * width * height;
-  unsigned char* canvas = new unsigned char[canvas_len];
-  unsigned char* output = new unsigned char[output_len];
+  const size_t canvasLen = channelsRGBA * width * height;
+  const size_t outputLen = channelsRGB * width * height;
+  unsigned char* canvas = new unsigned char[canvasLen];
+  unsigned char* output = new unsigned char[outputLen];
 
   auto cleanup = [&]() {
     if (canvas)
@@ -143,50 +142,50 @@ static base::TimeDelta TestNpixels(bool fast_path = true,
     return base::TimeDelta();
   }
 
-  if (set_alpha) {
-    memset(canvas, 128, canvas_len);
+  if (setAlpha) {
+    memset(canvas, 128, canvasLen);
   } else {
-    memset(canvas, 200, canvas_len);
+    memset(canvas, 200, canvasLen);
   }
 
-  base::ElapsedTimer run_time;
-  if (fast_path) {
+  base::ElapsedTimer runTime;
+  if (fastPath) {
     blink::RGBAtoRGBNeon(canvas, static_cast<unsigned>(pixels), output);
   } else {
     blink::RGBAtoRGBScalar(canvas, static_cast<unsigned>(pixels), output);
   }
 
-  auto result = run_time.Elapsed();
+  auto result = runTime.Elapsed();
   cleanup();
   return result;
 }
 
 TEST_F(RGBAtoRGBTest, testPerf1k) {
-  auto neon_elapsed = TestNpixels();
-  auto scalar_elapsed = TestNpixels(false);
+  auto neonElapsed = testNpixels();
+  auto scalarElapsed = testNpixels(false);
 
-  EXPECT_TRUE(neon_elapsed < scalar_elapsed)
-      << "Neon: " << neon_elapsed << "\tScalar: " << scalar_elapsed << std::endl;
+  EXPECT_TRUE(neonElapsed < scalarElapsed)
+      << "Neon: " << neonElapsed << "\tScalar: " << scalarElapsed << std::endl;
 }
 
 TEST_F(RGBAtoRGBTest, testPerf4k) {
-  auto neon_elapsed = TestNpixels(true, 4000, 4000);
-  auto scalar_elapsed = TestNpixels(false, 4000, 4000);
+  auto neonElapsed = testNpixels(true, 4000, 4000);
+  auto scalarElapsed = testNpixels(false, 4000, 4000);
 
-  EXPECT_TRUE(neon_elapsed < scalar_elapsed)
-      << "Neon: " << neon_elapsed << "\tScalar: " << scalar_elapsed << std::endl;
+  EXPECT_TRUE(neonElapsed < scalarElapsed)
+      << "Neon: " << neonElapsed << "\tScalar: " << scalarElapsed << std::endl;
 }
 
 // This width will force the tail case, cause width = (16 * 64) + 15.
-static bool TestRandNpixels(const size_t width = 1039,
+static bool testRandNpixels(const size_t width = 1039,
                             const size_t height = 1024,
-                            bool set_alpha = true) {
+                            bool setAlpha = true) {
   const size_t pixels = width * height;
-  const size_t canvas_len = kChannelsRGBA * pixels;
-  const size_t output_len = kChannelsRGB * pixels;
-  unsigned char* canvas = new unsigned char[canvas_len];
-  unsigned char* expected = new unsigned char[output_len];
-  unsigned char* output = new unsigned char[output_len];
+  const size_t canvasLen = channelsRGBA * pixels;
+  const size_t outputLen = channelsRGB * pixels;
+  unsigned char* canvas = new unsigned char[canvasLen];
+  unsigned char* expected = new unsigned char[outputLen];
+  unsigned char* output = new unsigned char[outputLen];
 
   auto cleanup = [&]() {
     if (canvas)
@@ -202,10 +201,10 @@ static bool TestRandNpixels(const size_t width = 1039,
     return false;
   }
 
-  if (set_alpha) {
-    memset(canvas, 128, canvas_len);
+  if (setAlpha) {
+    memset(canvas, 128, canvasLen);
   } else {
-    memset(canvas, 200, canvas_len);
+    memset(canvas, 200, canvasLen);
   }
 
   srand(time(0));
@@ -220,14 +219,14 @@ static bool TestRandNpixels(const size_t width = 1039,
   blink::RGBAtoRGBScalar(canvas, static_cast<unsigned>(pixels), expected);
   blink::RGBAtoRGBNeon(canvas, static_cast<unsigned>(pixels), output);
 
-  bool result = memcmp(expected, output, output_len) == 0;
+  bool result = memcmp(expected, output, outputLen) == 0;
 
   cleanup();
   return result;
 }
 
 TEST_F(RGBAtoRGBTest, randomPixels) {
-  EXPECT_TRUE(TestRandNpixels());
+  EXPECT_TRUE(testRandNpixels());
 }
 
 #endif
diff --git a/third_party/WebKit/Source/platform/mhtml/MHTMLArchive.cpp b/third_party/WebKit/Source/platform/mhtml/MHTMLArchive.cpp
index f1b41ad406a5..2b1c4edd5a05 100644
--- a/third_party/WebKit/Source/platform/mhtml/MHTMLArchive.cpp
+++ b/third_party/WebKit/Source/platform/mhtml/MHTMLArchive.cpp
@@ -119,7 +119,7 @@ bool MHTMLArchive::CanLoadArchive(const KURL& url) {
   if (url.ProtocolIsInHTTPFamily())
     return true;
 #if OS(ANDROID)
-  if (url.ProtocolIs("content"))
+  if (url.protocolIs("content"))
     return true;
 #endif
   return false;
diff --git a/third_party/WebKit/Source/platform/scroll/ScrollableArea.cpp b/third_party/WebKit/Source/platform/scroll/ScrollableArea.cpp
index a7e3576861ac..b6a5412a6c0b 100644
--- a/third_party/WebKit/Source/platform/scroll/ScrollableArea.cpp
+++ b/third_party/WebKit/Source/platform/scroll/ScrollableArea.cpp
@@ -74,8 +74,8 @@ ScrollableArea::~ScrollableArea() {}
 
 void ScrollableArea::ClearScrollableArea() {
 #if OS(MACOSX)
-  if (scroll_animator_)
-    scroll_animator_->Dispose();
+  if (m_scrollAnimator)
+    m_scrollAnimator->dispose();
 #endif
   scroll_animator_.Clear();
   programmatic_scroll_animator_.Clear();
diff --git a/third_party/WebKit/Source/platform/scroll/ScrollbarTheme.cpp b/third_party/WebKit/Source/platform/scroll/ScrollbarTheme.cpp
index 4951704e2b45..a9a7131dc9c8 100644
--- a/third_party/WebKit/Source/platform/scroll/ScrollbarTheme.cpp
+++ b/third_party/WebKit/Source/platform/scroll/ScrollbarTheme.cpp
@@ -210,7 +210,7 @@ void ScrollbarTheme::PaintScrollCorner(
   DrawingRecorder recorder(context, display_item_client,
                            DisplayItem::kScrollbarCorner, corner_rect);
 #if OS(MACOSX)
-  context.FillRect(corner_rect, Color::kWhite);
+  context.fillRect(cornerRect, Color::white);
 #else
   Platform::Current()->ThemeEngine()->Paint(
       context.Canvas(), WebThemeEngine::kPartScrollbarCorner,
diff --git a/third_party/WebKit/Source/platform/testing/ImageDecodeBench.cpp b/third_party/WebKit/Source/platform/testing/ImageDecodeBench.cpp
index dabf920593eb..055f8019bc52 100644
--- a/third_party/WebKit/Source/platform/testing/ImageDecodeBench.cpp
+++ b/third_party/WebKit/Source/platform/testing/ImageDecodeBench.cpp
@@ -48,27 +48,27 @@ namespace {
 // counter from WTF
 // http://trac.webkit.org/browser/trunk/Source/WTF/wtf/CurrentTime.cpp?rev=152438
 
-static double LowResUTCTime() {
-  FILETIME file_time;
-  GetSystemTimeAsFileTime(&file_time);
+static double lowResUTCTime() {
+  FILETIME fileTime;
+  GetSystemTimeAsFileTime(&fileTime);
 
   // As per Windows documentation for FILETIME, copy the resulting FILETIME
   // structure to a ULARGE_INTEGER structure using memcpy (using memcpy instead
   // of direct assignment can prevent alignment faults on 64-bit Windows).
-  ULARGE_INTEGER date_time;
-  memcpy(&date_time, &file_time, sizeof(date_time));
+  ULARGE_INTEGER dateTime;
+  memcpy(&dateTime, &fileTime, sizeof(dateTime));
 
   // Number of 100 nanosecond between January 1, 1601 and January 1, 1970.
-  static const ULONGLONG kEpochBias = 116444736000000000ULL;
+  static const ULONGLONG epochBias = 116444736000000000ULL;
   // Windows file times are in 100s of nanoseconds.
-  static const double kHundredsOfNanosecondsPerMillisecond = 10000;
-  return (date_time.QuadPart - kEpochBias) / kHundredsOfNanosecondsPerMillisecond;
+  static const double hundredsOfNanosecondsPerMillisecond = 10000;
+  return (dateTime.QuadPart - epochBias) / hundredsOfNanosecondsPerMillisecond;
 }
 
-static LARGE_INTEGER g_qpc_frequency;
-static bool g_synced_time;
+static LARGE_INTEGER qpcFrequency;
+static bool syncedTime;
 
-static double HighResUpTime() {
+static double highResUpTime() {
   // We use QPC, but only after sanity checking its result, due to bugs:
   // http://support.microsoft.com/kb/274323
   // http://support.microsoft.com/kb/895980
@@ -76,54 +76,54 @@ static double HighResUpTime() {
   // different results on different processors due to bugs in the basic
   // input/output system (BIOS) or the hardware abstraction layer (HAL).").
 
-  static LARGE_INTEGER qpc_last;
-  static DWORD tick_count_last;
+  static LARGE_INTEGER qpcLast;
+  static DWORD tickCountLast;
   static bool inited;
 
   LARGE_INTEGER qpc;
   QueryPerformanceCounter(&qpc);
-  DWORD tick_count = GetTickCount();
+  DWORD tickCount = GetTickCount();
 
   if (inited) {
-    __int64 qpc_elapsed =
-        ((qpc.QuadPart - qpc_last.QuadPart) * 1000) / g_qpc_frequency.QuadPart;
-    __int64 tick_count_elapsed;
-    if (tick_count >= tick_count_last) {
-      tick_count_elapsed = (tick_count - tick_count_last);
+    __int64 qpcElapsed =
+        ((qpc.QuadPart - qpcLast.QuadPart) * 1000) / qpcFrequency.QuadPart;
+    __int64 tickCountElapsed;
+    if (tickCount >= tickCountLast) {
+      tickCountElapsed = (tickCount - tickCountLast);
     } else {
-      __int64 tick_count_large = tick_count + 0x100000000I64;
-      tick_count_elapsed = tick_count_large - tick_count_last;
+      __int64 tickCountLarge = tickCount + 0x100000000I64;
+      tickCountElapsed = tickCountLarge - tickCountLast;
     }
 
     // Force a re-sync if QueryPerformanceCounter differs from GetTickCount() by
     // more than 500ms. (The 500ms value is from
     // http://support.microsoft.com/kb/274323).
-    __int64 diff = tick_count_elapsed - qpc_elapsed;
+    __int64 diff = tickCountElapsed - qpcElapsed;
     if (diff > 500 || diff < -500)
-      g_synced_time = false;
+      syncedTime = false;
   } else {
     inited = true;
   }
 
-  qpc_last = qpc;
-  tick_count_last = tick_count;
+  qpcLast = qpc;
+  tickCountLast = tickCount;
 
-  return (1000.0 * qpc.QuadPart) / static_cast<double>(g_qpc_frequency.QuadPart);
+  return (1000.0 * qpc.QuadPart) / static_cast<double>(qpcFrequency.QuadPart);
 }
 
-static bool QpcAvailable() {
+static bool qpcAvailable() {
   static bool available;
   static bool checked;
 
   if (checked)
     return available;
 
-  available = QueryPerformanceFrequency(&g_qpc_frequency);
+  available = QueryPerformanceFrequency(&qpcFrequency);
   checked = true;
   return available;
 }
 
-static double GetCurrentTime() {
+static double getCurrentTime() {
   // Use a combination of ftime and QueryPerformanceCounter.
   // ftime returns the information we want, but doesn't have sufficient
   // resolution.  QueryPerformanceCounter has high resolution, but is only
@@ -131,40 +131,40 @@ static double GetCurrentTime() {
   // QueryPerformanceCounter initially. Later calls will use
   // QueryPerformanceCounter by itself, adding the delta to the saved ftime.  We
   // periodically re-sync to correct for drift.
-  static double sync_low_res_utc_time;
-  static double sync_high_res_up_time;
-  static double last_utc_time;
+  static double syncLowResUTCTime;
+  static double syncHighResUpTime;
+  static double lastUTCTime;
 
-  double low_res_time = LowResUTCTime();
-  if (!QpcAvailable())
-    return low_res_time * (1.0 / 1000.0);
+  double lowResTime = lowResUTCTime();
+  if (!qpcAvailable())
+    return lowResTime * (1.0 / 1000.0);
 
-  double high_res_time = HighResUpTime();
-  if (!g_synced_time) {
+  double highResTime = highResUpTime();
+  if (!syncedTime) {
     timeBeginPeriod(1);  // increase time resolution around low-res time getter
-    sync_low_res_utc_time = low_res_time = LowResUTCTime();
+    syncLowResUTCTime = lowResTime = lowResUTCTime();
     timeEndPeriod(1);  // restore time resolution
-    sync_high_res_up_time = high_res_time;
-    g_synced_time = true;
+    syncHighResUpTime = highResTime;
+    syncedTime = true;
   }
 
-  double high_res_elapsed = high_res_time - sync_high_res_up_time;
-  double utc = sync_low_res_utc_time + high_res_elapsed;
+  double highResElapsed = highResTime - syncHighResUpTime;
+  double utc = syncLowResUTCTime + highResElapsed;
 
   // Force a clock re-sync if we've drifted.
-  double low_res_elapsed = low_res_time - sync_low_res_utc_time;
-  const double kMaximumAllowedDriftMsec =
+  double lowResElapsed = lowResTime - syncLowResUTCTime;
+  const double maximumAllowedDriftMsec =
       15.625 * 2.0;  // 2x the typical low-res accuracy
-  if (fabs(high_res_elapsed - low_res_elapsed) > kMaximumAllowedDriftMsec)
-    g_synced_time = false;
+  if (fabs(highResElapsed - lowResElapsed) > maximumAllowedDriftMsec)
+    syncedTime = false;
 
   // Make sure time doesn't run backwards (only correct if the difference is < 2
   // seconds, since DST or clock changes could occur).
-  const double kBackwardTimeLimit = 2000.0;
-  if (utc < last_utc_time && (last_utc_time - utc) < kBackwardTimeLimit)
-    return last_utc_time * (1.0 / 1000.0);
+  const double backwardTimeLimit = 2000.0;
+  if (utc < lastUTCTime && (lastUTCTime - utc) < backwardTimeLimit)
+    return lastUTCTime * (1.0 / 1000.0);
 
-  last_utc_time = utc;
+  lastUTCTime = utc;
   return utc * (1.0 / 1000.0);
 }
 
diff --git a/third_party/WebKit/Source/platform/text/HyphenationTest.cpp b/third_party/WebKit/Source/platform/text/HyphenationTest.cpp
index f60bbf30bd57..d5ed9c44e9a1 100644
--- a/third_party/WebKit/Source/platform/text/HyphenationTest.cpp
+++ b/third_party/WebKit/Source/platform/text/HyphenationTest.cpp
@@ -45,17 +45,17 @@ TEST(HyphenationTest, LastHyphenLocation) {
     return;
   }
   RefPtr<Hyphenation> hyphenation =
-      HyphenationMinikin::FromFileForTesting(std::move(file));
+      HyphenationMinikin::fromFileForTesting(std::move(file));
 #else
-  const LayoutLocale* locale = LayoutLocale::Get("en-us");
+  const LayoutLocale* locale = LayoutLocale::get("en-us");
   ASSERT_TRUE(locale);
-  Hyphenation* hyphenation = locale->GetHyphenation();
+  Hyphenation* hyphenation = locale->getHyphenation();
 #endif
   ASSERT_TRUE(hyphenation) << "Cannot find the hyphenation engine";
 
   // Get all hyphenation points by |hyphenLocations|.
   const String word("hyphenation");
-  Vector<size_t, 8> locations = hyphenation->HyphenLocations(word);
+  Vector<size_t, 8> locations = hyphenation->hyphenLocations(word);
   for (unsigned i = 1; i < locations.size(); i++) {
     ASSERT_GT(locations[i - 1], locations[i])
         << "hyphenLocations must return locations in the descending order";
@@ -63,20 +63,20 @@ TEST(HyphenationTest, LastHyphenLocation) {
 
   // Test |lastHyphenLocation| returns all hyphenation points.
   locations.push_back(0);
-  size_t location_index = locations.size() - 1;
-  for (size_t before_index = 0; before_index < word.length(); before_index++) {
-    size_t location = hyphenation->LastHyphenLocation(word, before_index);
+  size_t locationIndex = locations.size() - 1;
+  for (size_t beforeIndex = 0; beforeIndex < word.length(); beforeIndex++) {
+    size_t location = hyphenation->lastHyphenLocation(word, beforeIndex);
 
     if (location)
-      EXPECT_LT(location, before_index);
+      EXPECT_LT(location, beforeIndex);
 
-    if (location_index > 0 && location == locations[location_index - 1])
-      location_index--;
-    EXPECT_EQ(locations[location_index], location) << String::Format(
-        "lastHyphenLocation(%s, %zd)", word.Utf8().Data(), before_index);
+    if (locationIndex > 0 && location == locations[locationIndex - 1])
+      locationIndex--;
+    EXPECT_EQ(locations[locationIndex], location) << String::format(
+        "lastHyphenLocation(%s, %zd)", word.utf8().data(), beforeIndex);
   }
 
-  EXPECT_EQ(location_index, 0u)
+  EXPECT_EQ(locationIndex, 0u)
       << "Not all locations are found by lastHyphenLocation";
 }
 #endif
diff --git a/third_party/WebKit/Source/platform/transforms/TransformationMatrix.cpp b/third_party/WebKit/Source/platform/transforms/TransformationMatrix.cpp
index 4d7f9e507a85..258fef25b584 100644
--- a/third_party/WebKit/Source/platform/transforms/TransformationMatrix.cpp
+++ b/third_party/WebKit/Source/platform/transforms/TransformationMatrix.cpp
@@ -1440,127 +1440,127 @@ TransformationMatrix& TransformationMatrix::Multiply(
 #elif defined(TRANSFORMATION_MATRIX_USE_X86_64_SSE2)
   // x86_64 has 16 XMM registers which is enough to do the multiplication fully
   // in registers.
-  __m128d matrix_block_a = _mm_load_pd(&(matrix_[0][0]));
-  __m128d matrix_block_c = _mm_load_pd(&(matrix_[1][0]));
-  __m128d matrix_block_e = _mm_load_pd(&(matrix_[2][0]));
-  __m128d matrix_block_g = _mm_load_pd(&(matrix_[3][0]));
+  __m128d matrixBlockA = _mm_load_pd(&(m_matrix[0][0]));
+  __m128d matrixBlockC = _mm_load_pd(&(m_matrix[1][0]));
+  __m128d matrixBlockE = _mm_load_pd(&(m_matrix[2][0]));
+  __m128d matrixBlockG = _mm_load_pd(&(m_matrix[3][0]));
 
   // First row.
-  __m128d other_matrix_first_param = _mm_set1_pd(mat.matrix_[0][0]);
-  __m128d other_matrix_second_param = _mm_set1_pd(mat.matrix_[0][1]);
-  __m128d other_matrix_third_param = _mm_set1_pd(mat.matrix_[0][2]);
-  __m128d other_matrix_fourth_param = _mm_set1_pd(mat.matrix_[0][3]);
+  __m128d otherMatrixFirstParam = _mm_set1_pd(mat.m_matrix[0][0]);
+  __m128d otherMatrixSecondParam = _mm_set1_pd(mat.m_matrix[0][1]);
+  __m128d otherMatrixThirdParam = _mm_set1_pd(mat.m_matrix[0][2]);
+  __m128d otherMatrixFourthParam = _mm_set1_pd(mat.m_matrix[0][3]);
 
   // output00 and output01.
-  __m128d accumulator = _mm_mul_pd(matrix_block_a, other_matrix_first_param);
-  __m128d temp1 = _mm_mul_pd(matrix_block_c, other_matrix_second_param);
-  __m128d temp2 = _mm_mul_pd(matrix_block_e, other_matrix_third_param);
-  __m128d temp3 = _mm_mul_pd(matrix_block_g, other_matrix_fourth_param);
+  __m128d accumulator = _mm_mul_pd(matrixBlockA, otherMatrixFirstParam);
+  __m128d temp1 = _mm_mul_pd(matrixBlockC, otherMatrixSecondParam);
+  __m128d temp2 = _mm_mul_pd(matrixBlockE, otherMatrixThirdParam);
+  __m128d temp3 = _mm_mul_pd(matrixBlockG, otherMatrixFourthParam);
 
-  __m128d matrix_block_b = _mm_load_pd(&(matrix_[0][2]));
-  __m128d matrix_block_d = _mm_load_pd(&(matrix_[1][2]));
-  __m128d matrix_block_f = _mm_load_pd(&(matrix_[2][2]));
-  __m128d matrix_block_h = _mm_load_pd(&(matrix_[3][2]));
+  __m128d matrixBlockB = _mm_load_pd(&(m_matrix[0][2]));
+  __m128d matrixBlockD = _mm_load_pd(&(m_matrix[1][2]));
+  __m128d matrixBlockF = _mm_load_pd(&(m_matrix[2][2]));
+  __m128d matrixBlockH = _mm_load_pd(&(m_matrix[3][2]));
 
   accumulator = _mm_add_pd(accumulator, temp1);
   accumulator = _mm_add_pd(accumulator, temp2);
   accumulator = _mm_add_pd(accumulator, temp3);
-  _mm_store_pd(&matrix_[0][0], accumulator);
+  _mm_store_pd(&m_matrix[0][0], accumulator);
 
   // output02 and output03.
-  accumulator = _mm_mul_pd(matrix_block_b, other_matrix_first_param);
-  temp1 = _mm_mul_pd(matrix_block_d, other_matrix_second_param);
-  temp2 = _mm_mul_pd(matrix_block_f, other_matrix_third_param);
-  temp3 = _mm_mul_pd(matrix_block_h, other_matrix_fourth_param);
+  accumulator = _mm_mul_pd(matrixBlockB, otherMatrixFirstParam);
+  temp1 = _mm_mul_pd(matrixBlockD, otherMatrixSecondParam);
+  temp2 = _mm_mul_pd(matrixBlockF, otherMatrixThirdParam);
+  temp3 = _mm_mul_pd(matrixBlockH, otherMatrixFourthParam);
 
   accumulator = _mm_add_pd(accumulator, temp1);
   accumulator = _mm_add_pd(accumulator, temp2);
   accumulator = _mm_add_pd(accumulator, temp3);
-  _mm_store_pd(&matrix_[0][2], accumulator);
+  _mm_store_pd(&m_matrix[0][2], accumulator);
 
   // Second row.
-  other_matrix_first_param = _mm_set1_pd(mat.matrix_[1][0]);
-  other_matrix_second_param = _mm_set1_pd(mat.matrix_[1][1]);
-  other_matrix_third_param = _mm_set1_pd(mat.matrix_[1][2]);
-  other_matrix_fourth_param = _mm_set1_pd(mat.matrix_[1][3]);
+  otherMatrixFirstParam = _mm_set1_pd(mat.m_matrix[1][0]);
+  otherMatrixSecondParam = _mm_set1_pd(mat.m_matrix[1][1]);
+  otherMatrixThirdParam = _mm_set1_pd(mat.m_matrix[1][2]);
+  otherMatrixFourthParam = _mm_set1_pd(mat.m_matrix[1][3]);
 
   // output10 and output11.
-  accumulator = _mm_mul_pd(matrix_block_a, other_matrix_first_param);
-  temp1 = _mm_mul_pd(matrix_block_c, other_matrix_second_param);
-  temp2 = _mm_mul_pd(matrix_block_e, other_matrix_third_param);
-  temp3 = _mm_mul_pd(matrix_block_g, other_matrix_fourth_param);
+  accumulator = _mm_mul_pd(matrixBlockA, otherMatrixFirstParam);
+  temp1 = _mm_mul_pd(matrixBlockC, otherMatrixSecondParam);
+  temp2 = _mm_mul_pd(matrixBlockE, otherMatrixThirdParam);
+  temp3 = _mm_mul_pd(matrixBlockG, otherMatrixFourthParam);
 
   accumulator = _mm_add_pd(accumulator, temp1);
   accumulator = _mm_add_pd(accumulator, temp2);
   accumulator = _mm_add_pd(accumulator, temp3);
-  _mm_store_pd(&matrix_[1][0], accumulator);
+  _mm_store_pd(&m_matrix[1][0], accumulator);
 
   // output12 and output13.
-  accumulator = _mm_mul_pd(matrix_block_b, other_matrix_first_param);
-  temp1 = _mm_mul_pd(matrix_block_d, other_matrix_second_param);
-  temp2 = _mm_mul_pd(matrix_block_f, other_matrix_third_param);
-  temp3 = _mm_mul_pd(matrix_block_h, other_matrix_fourth_param);
+  accumulator = _mm_mul_pd(matrixBlockB, otherMatrixFirstParam);
+  temp1 = _mm_mul_pd(matrixBlockD, otherMatrixSecondParam);
+  temp2 = _mm_mul_pd(matrixBlockF, otherMatrixThirdParam);
+  temp3 = _mm_mul_pd(matrixBlockH, otherMatrixFourthParam);
 
   accumulator = _mm_add_pd(accumulator, temp1);
   accumulator = _mm_add_pd(accumulator, temp2);
   accumulator = _mm_add_pd(accumulator, temp3);
-  _mm_store_pd(&matrix_[1][2], accumulator);
+  _mm_store_pd(&m_matrix[1][2], accumulator);
 
   // Third row.
-  other_matrix_first_param = _mm_set1_pd(mat.matrix_[2][0]);
-  other_matrix_second_param = _mm_set1_pd(mat.matrix_[2][1]);
-  other_matrix_third_param = _mm_set1_pd(mat.matrix_[2][2]);
-  other_matrix_fourth_param = _mm_set1_pd(mat.matrix_[2][3]);
+  otherMatrixFirstParam = _mm_set1_pd(mat.m_matrix[2][0]);
+  otherMatrixSecondParam = _mm_set1_pd(mat.m_matrix[2][1]);
+  otherMatrixThirdParam = _mm_set1_pd(mat.m_matrix[2][2]);
+  otherMatrixFourthParam = _mm_set1_pd(mat.m_matrix[2][3]);
 
   // output20 and output21.
-  accumulator = _mm_mul_pd(matrix_block_a, other_matrix_first_param);
-  temp1 = _mm_mul_pd(matrix_block_c, other_matrix_second_param);
-  temp2 = _mm_mul_pd(matrix_block_e, other_matrix_third_param);
-  temp3 = _mm_mul_pd(matrix_block_g, other_matrix_fourth_param);
+  accumulator = _mm_mul_pd(matrixBlockA, otherMatrixFirstParam);
+  temp1 = _mm_mul_pd(matrixBlockC, otherMatrixSecondParam);
+  temp2 = _mm_mul_pd(matrixBlockE, otherMatrixThirdParam);
+  temp3 = _mm_mul_pd(matrixBlockG, otherMatrixFourthParam);
 
   accumulator = _mm_add_pd(accumulator, temp1);
   accumulator = _mm_add_pd(accumulator, temp2);
   accumulator = _mm_add_pd(accumulator, temp3);
-  _mm_store_pd(&matrix_[2][0], accumulator);
+  _mm_store_pd(&m_matrix[2][0], accumulator);
 
   // output22 and output23.
-  accumulator = _mm_mul_pd(matrix_block_b, other_matrix_first_param);
-  temp1 = _mm_mul_pd(matrix_block_d, other_matrix_second_param);
-  temp2 = _mm_mul_pd(matrix_block_f, other_matrix_third_param);
-  temp3 = _mm_mul_pd(matrix_block_h, other_matrix_fourth_param);
+  accumulator = _mm_mul_pd(matrixBlockB, otherMatrixFirstParam);
+  temp1 = _mm_mul_pd(matrixBlockD, otherMatrixSecondParam);
+  temp2 = _mm_mul_pd(matrixBlockF, otherMatrixThirdParam);
+  temp3 = _mm_mul_pd(matrixBlockH, otherMatrixFourthParam);
 
   accumulator = _mm_add_pd(accumulator, temp1);
   accumulator = _mm_add_pd(accumulator, temp2);
   accumulator = _mm_add_pd(accumulator, temp3);
-  _mm_store_pd(&matrix_[2][2], accumulator);
+  _mm_store_pd(&m_matrix[2][2], accumulator);
 
   // Fourth row.
-  other_matrix_first_param = _mm_set1_pd(mat.matrix_[3][0]);
-  other_matrix_second_param = _mm_set1_pd(mat.matrix_[3][1]);
-  other_matrix_third_param = _mm_set1_pd(mat.matrix_[3][2]);
-  other_matrix_fourth_param = _mm_set1_pd(mat.matrix_[3][3]);
+  otherMatrixFirstParam = _mm_set1_pd(mat.m_matrix[3][0]);
+  otherMatrixSecondParam = _mm_set1_pd(mat.m_matrix[3][1]);
+  otherMatrixThirdParam = _mm_set1_pd(mat.m_matrix[3][2]);
+  otherMatrixFourthParam = _mm_set1_pd(mat.m_matrix[3][3]);
 
   // output30 and output31.
-  accumulator = _mm_mul_pd(matrix_block_a, other_matrix_first_param);
-  temp1 = _mm_mul_pd(matrix_block_c, other_matrix_second_param);
-  temp2 = _mm_mul_pd(matrix_block_e, other_matrix_third_param);
-  temp3 = _mm_mul_pd(matrix_block_g, other_matrix_fourth_param);
+  accumulator = _mm_mul_pd(matrixBlockA, otherMatrixFirstParam);
+  temp1 = _mm_mul_pd(matrixBlockC, otherMatrixSecondParam);
+  temp2 = _mm_mul_pd(matrixBlockE, otherMatrixThirdParam);
+  temp3 = _mm_mul_pd(matrixBlockG, otherMatrixFourthParam);
 
   accumulator = _mm_add_pd(accumulator, temp1);
   accumulator = _mm_add_pd(accumulator, temp2);
   accumulator = _mm_add_pd(accumulator, temp3);
-  _mm_store_pd(&matrix_[3][0], accumulator);
+  _mm_store_pd(&m_matrix[3][0], accumulator);
 
   // output32 and output33.
-  accumulator = _mm_mul_pd(matrix_block_b, other_matrix_first_param);
-  temp1 = _mm_mul_pd(matrix_block_d, other_matrix_second_param);
-  temp2 = _mm_mul_pd(matrix_block_f, other_matrix_third_param);
-  temp3 = _mm_mul_pd(matrix_block_h, other_matrix_fourth_param);
+  accumulator = _mm_mul_pd(matrixBlockB, otherMatrixFirstParam);
+  temp1 = _mm_mul_pd(matrixBlockD, otherMatrixSecondParam);
+  temp2 = _mm_mul_pd(matrixBlockF, otherMatrixThirdParam);
+  temp3 = _mm_mul_pd(matrixBlockH, otherMatrixFourthParam);
 
   accumulator = _mm_add_pd(accumulator, temp1);
   accumulator = _mm_add_pd(accumulator, temp2);
   accumulator = _mm_add_pd(accumulator, temp3);
-  _mm_store_pd(&matrix_[3][2], accumulator);
+  _mm_store_pd(&m_matrix[3][2], accumulator);
 #else
   Matrix4 tmp;
 
diff --git a/third_party/WebKit/Source/platform/wtf/DataLog.cpp b/third_party/WebKit/Source/platform/wtf/DataLog.cpp
index 41c5c9b1b858..f941a29ec378 100644
--- a/third_party/WebKit/Source/platform/wtf/DataLog.cpp
+++ b/third_party/WebKit/Source/platform/wtf/DataLog.cpp
@@ -79,8 +79,8 @@ static void InitializeLogFile() {
 #if OS(POSIX)
   pthread_once(&g_initialize_log_file_once_key, InitializeLogFileOnce);
 #else
-  if (!g_file)
-    InitializeLogFileOnce();
+  if (!file)
+    initializeLogFileOnce();
 #endif
 }
 
diff --git a/third_party/WebKit/Source/platform/wtf/DateMath.cpp b/third_party/WebKit/Source/platform/wtf/DateMath.cpp
index f6bcf725905b..68c136564d56 100644
--- a/third_party/WebKit/Source/platform/wtf/DateMath.cpp
+++ b/third_party/WebKit/Source/platform/wtf/DateMath.cpp
@@ -110,7 +110,7 @@ static const int kFirstDayOfMonth[2][12] = {
 
 static inline void GetLocalTime(const time_t* local_time, struct tm* local_tm) {
 #if COMPILER(MSVC)
-  localtime_s(local_tm, local_time);
+  localtime_s(localTM, localTime);
 #else
   localtime_r(local_time, local_tm);
 #endif
@@ -333,9 +333,9 @@ static int EquivalentYearForDST(int year) {
 
 static double CalculateUTCOffset() {
 #if OS(WIN)
-  TIME_ZONE_INFORMATION time_zone_information;
-  GetTimeZoneInformation(&time_zone_information);
-  int32_t bias = time_zone_information.Bias + time_zone_information.StandardBias;
+  TIME_ZONE_INFORMATION timeZoneInformation;
+  GetTimeZoneInformation(&timeZoneInformation);
+  int32_t bias = timeZoneInformation.Bias + timeZoneInformation.StandardBias;
   return -bias * 60 * 1000;
 #else
   time_t local_time = time(0);
diff --git a/third_party/WebKit/Source/platform/wtf/StackUtil.cpp b/third_party/WebKit/Source/platform/wtf/StackUtil.cpp
index 54499caf2c47..84de727d0c68 100644
--- a/third_party/WebKit/Source/platform/wtf/StackUtil.cpp
+++ b/third_party/WebKit/Source/platform/wtf/StackUtil.cpp
@@ -87,7 +87,7 @@ size_t GetUnderestimatedStackSize() {
   }
   return pthread_get_stacksize_np(pthread_self());
 #elif OS(WIN) && COMPILER(MSVC)
-  return WTFThreadData::ThreadStackSize();
+  return WTFThreadData::threadStackSize();
 #else
 #error "Stack frame size estimation not supported on this platform."
   return 0;
@@ -161,20 +161,20 @@ void InitializeMainThreadStackEstimate() {
 }
 
 #if OS(WIN) && COMPILER(MSVC)
-size_t ThreadStackSize() {
+size_t threadStackSize() {
   // Notice that we cannot use the TIB's StackLimit for the stack end, as i
   // tracks the end of the committed range. We're after the end of the reserved
   // stack area (most of which will be uncommitted, most times.)
-  MEMORY_BASIC_INFORMATION stack_info;
-  memset(&stack_info, 0, sizeof(MEMORY_BASIC_INFORMATION));
-  size_t result_size =
-      VirtualQuery(&stack_info, &stack_info, sizeof(MEMORY_BASIC_INFORMATION));
-  DCHECK_GE(result_size, sizeof(MEMORY_BASIC_INFORMATION));
-  uint8_t* stack_end = reinterpret_cast<uint8_t*>(stack_info.AllocationBase);
-
-  uint8_t* stack_start = reinterpret_cast<uint8_t*>(WTF::GetStackStart());
-  RELEASE_ASSERT(stack_start && stack_start > stack_end);
-  size_t thread_stack_size = static_cast<size_t>(stack_start - stack_end);
+  MEMORY_BASIC_INFORMATION stackInfo;
+  memset(&stackInfo, 0, sizeof(MEMORY_BASIC_INFORMATION));
+  size_t resultSize =
+      VirtualQuery(&stackInfo, &stackInfo, sizeof(MEMORY_BASIC_INFORMATION));
+  DCHECK_GE(resultSize, sizeof(MEMORY_BASIC_INFORMATION));
+  uint8_t* stackEnd = reinterpret_cast<uint8_t*>(stackInfo.AllocationBase);
+
+  uint8_t* stackStart = reinterpret_cast<uint8_t*>(WTF::getStackStart());
+  RELEASE_ASSERT(stackStart && stackStart > stackEnd);
+  size_t s_threadStackSize = static_cast<size_t>(stackStart - stackEnd);
   // When the third last page of the reserved stack is accessed as a
   // guard page, the second last page will be committed (along with removing
   // the guard bit on the third last) _and_ a stack overflow exception
@@ -186,9 +186,9 @@ size_t ThreadStackSize() {
   //
   // http://blogs.msdn.com/b/satyem/archive/2012/08/13/thread-s-stack-memory-management.aspx
   // explains the details.
-  RELEASE_ASSERT(thread_stack_size > 4 * 0x1000);
-  thread_stack_size -= 4 * 0x1000;
-  return thread_stack_size;
+  RELEASE_ASSERT(s_threadStackSize > 4 * 0x1000);
+  s_threadStackSize -= 4 * 0x1000;
+  return s_threadStackSize;
 }
 #endif
 
diff --git a/third_party/WebKit/Source/platform/wtf/StringExtrasTest.cpp b/third_party/WebKit/Source/platform/wtf/StringExtrasTest.cpp
index 449306f46847..d8618ab39524 100644
--- a/third_party/WebKit/Source/platform/wtf/StringExtrasTest.cpp
+++ b/third_party/WebKit/Source/platform/wtf/StringExtrasTest.cpp
@@ -60,7 +60,7 @@ struct PrintfFormatTrait<long long> {
   static const char kFormat[];
 };
 #if OS(WIN)
-const char PrintfFormatTrait<long long>::kFormat[] = "%I64i";
+const char PrintfFormatTrait<long long>::format[] = "%I64i";
 #else
 const char PrintfFormatTrait<long long>::kFormat[] = "%lli";
 #endif  // OS(WIN)
@@ -88,7 +88,7 @@ struct PrintfFormatTrait<unsigned long long> {
   static const char kFormat[];
 };
 #if OS(WIN)
-const char PrintfFormatTrait<unsigned long long>::kFormat[] = "%I64u";
+const char PrintfFormatTrait<unsigned long long>::format[] = "%I64u";
 #else
 const char PrintfFormatTrait<unsigned long long>::kFormat[] = "%llu";
 #endif  // OS(WIN)
diff --git a/third_party/WebKit/Source/platform/wtf/WTFThreadData.cpp b/third_party/WebKit/Source/platform/wtf/WTFThreadData.cpp
index dc137a634377..09c1936ed2a7 100644
--- a/third_party/WebKit/Source/platform/wtf/WTFThreadData.cpp
+++ b/third_party/WebKit/Source/platform/wtf/WTFThreadData.cpp
@@ -48,16 +48,16 @@ void WTFThreadData::Initialize() {
 }
 
 #if OS(WIN) && COMPILER(MSVC)
-size_t WTFThreadData::ThreadStackSize() {
+size_t WTFThreadData::threadStackSize() {
   // Needed to bootstrap WTFThreadData on Windows, because this value is needed
   // before the main thread data is fully initialized.
-  if (!WTFThreadData::static_data_->IsSet())
-    return internal::ThreadStackSize();
+  if (!WTFThreadData::staticData->isSet())
+    return internal::threadStackSize();
 
-  WTFThreadData& data = WtfThreadData();
-  if (!data.thread_stack_size_)
-    data.thread_stack_size_ = internal::ThreadStackSize();
-  return data.thread_stack_size_;
+  WTFThreadData& data = wtfThreadData();
+  if (!data.m_threadStackSize)
+    data.m_threadStackSize = internal::threadStackSize();
+  return data.m_threadStackSize;
 }
 #endif
 
diff --git a/third_party/WebKit/Source/platform/wtf/text/StringOperatorsTest.cpp b/third_party/WebKit/Source/platform/wtf/text/StringOperatorsTest.cpp
index de05d0256723..7489a338be3f 100644
--- a/third_party/WebKit/Source/platform/wtf/text/StringOperatorsTest.cpp
+++ b/third_party/WebKit/Source/platform/wtf/text/StringOperatorsTest.cpp
@@ -183,8 +183,8 @@ TEST(StringOperatorsTest, DISABLED_StringOperators) {
 #if COMPILER(MSVC)
   EXPECT_N_WTF_STRING_COPIES(1, L"wide string" + string);
   EXPECT_N_WTF_STRING_COPIES(1, string + L"wide string");
-  EXPECT_N_WTF_STRING_COPIES(1, L"wide string" + atomic_string);
-  EXPECT_N_WTF_STRING_COPIES(1, atomic_string + L"wide string");
+  EXPECT_N_WTF_STRING_COPIES(1, L"wide string" + atomicString);
+  EXPECT_N_WTF_STRING_COPIES(1, atomicString + L"wide string");
 
   EXPECT_N_WTF_STRING_COPIES(2,
                              L"wide string" + string + L"wide string" + string);
@@ -200,43 +200,43 @@ TEST(StringOperatorsTest, DISABLED_StringOperators) {
       2, (string + L"wide string") + (string + L"wide string"));
 
   EXPECT_N_WTF_STRING_COPIES(
-      2, L"wide string" + atomic_string + L"wide string" + atomic_string);
+      2, L"wide string" + atomicString + L"wide string" + atomicString);
   EXPECT_N_WTF_STRING_COPIES(
-      2, L"wide string" + (atomic_string + L"wide string" + atomic_string));
+      2, L"wide string" + (atomicString + L"wide string" + atomicString));
   EXPECT_N_WTF_STRING_COPIES(
-      2, (L"wide string" + atomic_string) + (L"wide string" + atomic_string));
+      2, (L"wide string" + atomicString) + (L"wide string" + atomicString));
   EXPECT_N_WTF_STRING_COPIES(
-      2, atomic_string + L"wide string" + atomic_string + L"wide string");
+      2, atomicString + L"wide string" + atomicString + L"wide string");
   EXPECT_N_WTF_STRING_COPIES(
-      2, atomic_string + (L"wide string" + atomic_string + L"wide string"));
+      2, atomicString + (L"wide string" + atomicString + L"wide string"));
   EXPECT_N_WTF_STRING_COPIES(
-      2, (atomic_string + L"wide string") + (atomic_string + L"wide string"));
+      2, (atomicString + L"wide string") + (atomicString + L"wide string"));
 
   EXPECT_N_WTF_STRING_COPIES(
-      2, L"wide string" + string + L"wide string" + atomic_string);
+      2, L"wide string" + string + L"wide string" + atomicString);
   EXPECT_N_WTF_STRING_COPIES(
-      2, L"wide string" + (string + L"wide string" + atomic_string));
+      2, L"wide string" + (string + L"wide string" + atomicString));
   EXPECT_N_WTF_STRING_COPIES(
-      2, (L"wide string" + string) + (L"wide string" + atomic_string));
+      2, (L"wide string" + string) + (L"wide string" + atomicString));
   EXPECT_N_WTF_STRING_COPIES(
-      2, string + L"wide string" + atomic_string + L"wide string");
+      2, string + L"wide string" + atomicString + L"wide string");
   EXPECT_N_WTF_STRING_COPIES(
-      2, string + (L"wide string" + atomic_string + L"wide string"));
+      2, string + (L"wide string" + atomicString + L"wide string"));
   EXPECT_N_WTF_STRING_COPIES(
-      2, (string + L"wide string") + (atomic_string + L"wide string"));
+      2, (string + L"wide string") + (atomicString + L"wide string"));
 
   EXPECT_N_WTF_STRING_COPIES(
-      2, L"wide string" + atomic_string + L"wide string" + string);
+      2, L"wide string" + atomicString + L"wide string" + string);
   EXPECT_N_WTF_STRING_COPIES(
-      2, L"wide string" + (atomic_string + L"wide string" + string));
+      2, L"wide string" + (atomicString + L"wide string" + string));
   EXPECT_N_WTF_STRING_COPIES(
-      2, (L"wide string" + atomic_string) + (L"wide string" + string));
+      2, (L"wide string" + atomicString) + (L"wide string" + string));
   EXPECT_N_WTF_STRING_COPIES(
-      2, atomic_string + L"wide string" + string + L"wide string");
+      2, atomicString + L"wide string" + string + L"wide string");
   EXPECT_N_WTF_STRING_COPIES(
-      2, atomic_string + (L"wide string" + string + L"wide string"));
+      2, atomicString + (L"wide string" + string + L"wide string"));
   EXPECT_N_WTF_STRING_COPIES(
-      2, (atomic_string + L"wide string") + (string + L"wide string"));
+      2, (atomicString + L"wide string") + (string + L"wide string"));
 #endif
 }
 
diff --git a/third_party/WebKit/Source/web/ChromeClientImpl.cpp b/third_party/WebKit/Source/web/ChromeClientImpl.cpp
index 2d6190182d2d..6a55089aa44a 100644
--- a/third_party/WebKit/Source/web/ChromeClientImpl.cpp
+++ b/third_party/WebKit/Source/web/ChromeClientImpl.cpp
@@ -770,7 +770,7 @@ void ChromeClientImpl::SetCursor(const WebCursorInfo& cursor,
 #if OS(MACOSX)
   // On Mac the mousemove event propagates to both the popup and main window.
   // If a popup is open we don't want the main window to change the cursor.
-  if (web_view_->HasOpenedPopup())
+  if (m_webView->hasOpenedPopup())
     return;
 #endif
 
diff --git a/third_party/WebKit/Source/web/ExternalPopupMenu.cpp b/third_party/WebKit/Source/web/ExternalPopupMenu.cpp
index bb8d0a281ad7..3c90e7ee6dd1 100644
--- a/third_party/WebKit/Source/web/ExternalPopupMenu.cpp
+++ b/third_party/WebKit/Source/web/ExternalPopupMenu.cpp
@@ -113,12 +113,12 @@ void ExternalPopupMenu::Show() {
   if (!ShowInternal())
     return;
 #if OS(MACOSX)
-  const WebInputEvent* current_event = WebViewImpl::CurrentInputEvent();
-  if (current_event && current_event->GetType() == WebInputEvent::kMouseDown) {
-    synthetic_event_ = WTF::WrapUnique(new WebMouseEvent);
-    *synthetic_event_ = *static_cast<const WebMouseEvent*>(current_event);
-    synthetic_event_->SetType(WebInputEvent::kMouseUp);
-    dispatch_event_timer_.StartOneShot(0, BLINK_FROM_HERE);
+  const WebInputEvent* currentEvent = WebViewImpl::currentInputEvent();
+  if (currentEvent && currentEvent->type() == WebInputEvent::MouseDown) {
+    m_syntheticEvent = WTF::wrapUnique(new WebMouseEvent);
+    *m_syntheticEvent = *static_cast<const WebMouseEvent*>(currentEvent);
+    m_syntheticEvent->setType(WebInputEvent::MouseUp);
+    m_dispatchEventTimer.startOneShot(0, BLINK_FROM_HERE);
     // FIXME: show() is asynchronous. If preparing a popup is slow and a
     // user released the mouse button before showing the popup, mouseup and
     // click events are correctly dispatched. Dispatching the synthetic
diff --git a/third_party/WebKit/Source/web/InspectorOverlay.cpp b/third_party/WebKit/Source/web/InspectorOverlay.cpp
index 38888fd409bb..5eb652f4a412 100644
--- a/third_party/WebKit/Source/web/InspectorOverlay.cpp
+++ b/third_party/WebKit/Source/web/InspectorOverlay.cpp
@@ -574,9 +574,9 @@ Page* InspectorOverlay::OverlayPage() {
       .ToChecked();
 
 #if OS(WIN)
-  EvaluateInOverlay("setPlatform", "windows");
+  evaluateInOverlay("setPlatform", "windows");
 #elif OS(MACOSX)
-  EvaluateInOverlay("setPlatform", "mac");
+  evaluateInOverlay("setPlatform", "mac");
 #elif OS(POSIX)
   EvaluateInOverlay("setPlatform", "linux");
 #endif
diff --git a/third_party/WebKit/Source/web/WebFrameWidgetImpl.cpp b/third_party/WebKit/Source/web/WebFrameWidgetImpl.cpp
index 4bd731577030..f23a730d0ed0 100644
--- a/third_party/WebKit/Source/web/WebFrameWidgetImpl.cpp
+++ b/third_party/WebKit/Source/web/WebFrameWidgetImpl.cpp
@@ -811,10 +811,10 @@ void WebFrameWidgetImpl::HandleMouseDown(LocalFrame& main_frame,
   // Dispatch the contextmenu event regardless of if the click was swallowed.
   if (!GetPage()->GetSettings().GetShowContextMenuOnMouseUp()) {
 #if OS(MACOSX)
-    if (event.button == WebMouseEvent::Button::kRight ||
-        (event.button == WebMouseEvent::Button::kLeft &&
-         event.GetModifiers() & WebMouseEvent::kControlKey))
-      MouseContextMenu(event);
+    if (event.button == WebMouseEvent::Button::Right ||
+        (event.button == WebMouseEvent::Button::Left &&
+         event.modifiers() & WebMouseEvent::ControlKey))
+      mouseContextMenu(event);
 #else
     if (event.button == WebMouseEvent::Button::kRight)
       MouseContextMenu(event);
@@ -943,7 +943,7 @@ WebInputEventResult WebFrameWidgetImpl::HandleKeyEvent(
 #if !OS(MACOSX)
   const WebInputEvent::Type kContextMenuKeyTriggeringEventType =
 #if OS(WIN)
-      WebInputEvent::kKeyUp;
+      WebInputEvent::KeyUp;
 #else
       WebInputEvent::kRawKeyDown;
 #endif
diff --git a/third_party/WebKit/Source/web/WebLocalFrameImpl.cpp b/third_party/WebKit/Source/web/WebLocalFrameImpl.cpp
index 72c22e7fe6bc..8c2eee5a29bd 100644
--- a/third_party/WebKit/Source/web/WebLocalFrameImpl.cpp
+++ b/third_party/WebKit/Source/web/WebLocalFrameImpl.cpp
@@ -355,8 +355,8 @@ class ChromePrintContext : public PrintContext {
 #if OS(WIN) || OS(MACOSX)
       // Account for the disabling of scaling in spoolPage. In the context
       // of spoolAllPagesWithBoundaries the scale HAS NOT been pre-applied.
-      float scale = GetPageShrink(page_index);
-      transform.Scale(scale, scale);
+      float scale = getPageShrink(pageIndex);
+      transform.scale(scale, scale);
 #endif
       context.Save();
       context.ConcatCTM(transform);
@@ -1140,7 +1140,7 @@ WebString WebLocalFrameImpl::SelectionAsText() const {
   String text = GetFrame()->Selection().SelectedText(
       TextIteratorBehavior::EmitsObjectReplacementCharacterBehavior());
 #if OS(WIN)
-  ReplaceNewlinesWithWindowsStyleNewlines(text);
+  replaceNewlinesWithWindowsStyleNewlines(text);
 #endif
   ReplaceNBSPWithSpace(text);
   return text;
diff --git a/third_party/WebKit/Source/web/WebPluginContainerImpl.cpp b/third_party/WebKit/Source/web/WebPluginContainerImpl.cpp
index 6902f48615fd..bd9f257e5bd7 100644
--- a/third_party/WebKit/Source/web/WebPluginContainerImpl.cpp
+++ b/third_party/WebKit/Source/web/WebPluginContainerImpl.cpp
@@ -782,8 +782,8 @@ void WebPluginContainerImpl::HandleKeyboardEvent(KeyboardEvent* event) {
 
   if (web_event.GetType() == WebInputEvent::kKeyDown) {
 #if OS(MACOSX)
-    if ((web_event.GetModifiers() & WebInputEvent::kInputModifiers) ==
-            WebInputEvent::kMetaKey
+    if ((webEvent.modifiers() & WebInputEvent::InputModifiers) ==
+            WebInputEvent::MetaKey
 #else
     if ((web_event.GetModifiers() & WebInputEvent::kInputModifiers) ==
             WebInputEvent::kControlKey
diff --git a/third_party/WebKit/Source/web/WebViewImpl.cpp b/third_party/WebKit/Source/web/WebViewImpl.cpp
index f773933ab816..b8b8dd42eee8 100644
--- a/third_party/WebKit/Source/web/WebViewImpl.cpp
+++ b/third_party/WebKit/Source/web/WebViewImpl.cpp
@@ -530,10 +530,10 @@ void WebViewImpl::HandleMouseDown(LocalFrame& main_frame,
   // Dispatch the contextmenu event regardless of if the click was swallowed.
   if (!GetPage()->GetSettings().GetShowContextMenuOnMouseUp()) {
 #if OS(MACOSX)
-    if (event.button == WebMouseEvent::Button::kRight ||
-        (event.button == WebMouseEvent::Button::kLeft &&
-         event.GetModifiers() & WebMouseEvent::kControlKey))
-      MouseContextMenu(event);
+    if (event.button == WebMouseEvent::Button::Right ||
+        (event.button == WebMouseEvent::Button::Left &&
+         event.modifiers() & WebMouseEvent::ControlKey))
+      mouseContextMenu(event);
 #else
     if (event.button == WebMouseEvent::Button::kRight)
       MouseContextMenu(event);
@@ -1209,7 +1209,7 @@ WebInputEventResult WebViewImpl::HandleKeyEvent(const WebKeyboardEvent& event) {
 #if !OS(MACOSX)
   const WebInputEvent::Type kContextMenuKeyTriggeringEventType =
 #if OS(WIN)
-      WebInputEvent::kKeyUp;
+      WebInputEvent::KeyUp;
 #else
       WebInputEvent::kRawKeyDown;
 #endif
@@ -2094,13 +2094,13 @@ void WebViewImpl::Paint(WebCanvas* canvas, const WebRect& rect) {
 }
 
 #if OS(ANDROID)
-void WebViewImpl::PaintIgnoringCompositing(WebCanvas* canvas,
+void WebViewImpl::paintIgnoringCompositing(WebCanvas* canvas,
                                            const WebRect& rect) {
   // This is called on a composited WebViewImpl, but we will ignore it,
   // producing all possible content of the WebViewImpl into the WebCanvas.
-  DCHECK(IsAcceleratedCompositingActive());
-  PageWidgetDelegate::PaintIgnoringCompositing(
-      *page_, canvas, rect, *page_->DeprecatedLocalMainFrame());
+  DCHECK(isAcceleratedCompositingActive());
+  PageWidgetDelegate::paintIgnoringCompositing(
+      *m_page, canvas, rect, *m_page->deprecatedLocalMainFrame());
 }
 #endif
 
diff --git a/third_party/WebKit/Source/web/tests/ChromeClientImplTest.cpp b/third_party/WebKit/Source/web/tests/ChromeClientImplTest.cpp
index ad6d3bba05cd..b482cba4a4d0 100644
--- a/third_party/WebKit/Source/web/tests/ChromeClientImplTest.cpp
+++ b/third_party/WebKit/Source/web/tests/ChromeClientImplTest.cpp
@@ -140,7 +140,7 @@ TEST_F(GetNavigationPolicyTest, ShiftLeftClickPopup) {
 
 TEST_F(GetNavigationPolicyTest, ControlOrMetaLeftClick) {
 #if OS(MACOSX)
-  int modifiers = WebInputEvent::kMetaKey;
+  int modifiers = WebInputEvent::MetaKey;
 #else
   int modifiers = WebInputEvent::kControlKey;
 #endif
@@ -152,7 +152,7 @@ TEST_F(GetNavigationPolicyTest, ControlOrMetaLeftClick) {
 
 TEST_F(GetNavigationPolicyTest, ControlOrMetaLeftClickPopup) {
 #if OS(MACOSX)
-  int modifiers = WebInputEvent::kMetaKey;
+  int modifiers = WebInputEvent::MetaKey;
 #else
   int modifiers = WebInputEvent::kControlKey;
 #endif
@@ -164,7 +164,7 @@ TEST_F(GetNavigationPolicyTest, ControlOrMetaLeftClickPopup) {
 
 TEST_F(GetNavigationPolicyTest, ControlOrMetaAndShiftLeftClick) {
 #if OS(MACOSX)
-  int modifiers = WebInputEvent::kMetaKey;
+  int modifiers = WebInputEvent::MetaKey;
 #else
   int modifiers = WebInputEvent::kControlKey;
 #endif
@@ -177,7 +177,7 @@ TEST_F(GetNavigationPolicyTest, ControlOrMetaAndShiftLeftClick) {
 
 TEST_F(GetNavigationPolicyTest, ControlOrMetaAndShiftLeftClickPopup) {
 #if OS(MACOSX)
-  int modifiers = WebInputEvent::kMetaKey;
+  int modifiers = WebInputEvent::MetaKey;
 #else
   int modifiers = WebInputEvent::kControlKey;
 #endif
diff --git a/third_party/WebKit/Source/web/tests/KeyboardTest.cpp b/third_party/WebKit/Source/web/tests/KeyboardTest.cpp
index 3bea53f1db42..9eace2ca9f60 100644
--- a/third_party/WebKit/Source/web/tests/KeyboardTest.cpp
+++ b/third_party/WebKit/Source/web/tests/KeyboardTest.cpp
@@ -69,7 +69,7 @@ class KeyboardTest : public testing::Test {
   // platforms, but meta (command) on Mac.
   const char* InterpretOSModifierKeyPress(char key_code) {
 #if OS(MACOSX)
-    WebInputEvent::Modifiers os_modifier = WebInputEvent::kMetaKey;
+    WebInputEvent::Modifiers osModifier = WebInputEvent::MetaKey;
 #else
     WebInputEvent::Modifiers os_modifier = WebInputEvent::kControlKey;
 #endif
diff --git a/third_party/WebKit/Source/web/tests/LinkSelectionTest.cpp b/third_party/WebKit/Source/web/tests/LinkSelectionTest.cpp
index ab74af4a242f..03001083bdaf 100644
--- a/third_party/WebKit/Source/web/tests/LinkSelectionTest.cpp
+++ b/third_party/WebKit/Source/web/tests/LinkSelectionTest.cpp
@@ -115,8 +115,8 @@ class TestFrameClient : public FrameTestHelpers::TestWebFrameClient {
   MOCK_METHOD4(LoadURLExternally,
                void(const WebURLRequest&,
                     WebNavigationPolicy,
-                    const WebString& downloadName,
-                    bool shouldReplaceCurrentEntry));
+                    const WebString& download_name,
+                    bool should_replace_current_entry));
 };
 
 class LinkSelectionTest : public LinkSelectionTestBase {
@@ -248,7 +248,7 @@ class LinkSelectionClickEventsTest : public LinkSelectionTestBase {
       return this == &other;
     }
 
-    MOCK_METHOD2(handleEvent, void(ExecutionContext* executionContext, Event*));
+    MOCK_METHOD2(handleEvent, void(ExecutionContext* execution_context, Event*));
 
    private:
     MockEventListener() : EventListener(kCPPEventListenerType) {}
diff --git a/third_party/WebKit/Source/web/tests/MHTMLTest.cpp b/third_party/WebKit/Source/web/tests/MHTMLTest.cpp
index 1e2bba16aca1..e4c96bb29e00 100644
--- a/third_party/WebKit/Source/web/tests/MHTMLTest.cpp
+++ b/third_party/WebKit/Source/web/tests/MHTMLTest.cpp
@@ -253,7 +253,7 @@ TEST_F(MHTMLTest, MHTMLFromScheme) {
   // schemes, and content scheme(Android specific).
   EXPECT_NE(nullptr, MHTMLArchive::Create(http_url, data.Get()));
 #if OS(ANDROID)
-  EXPECT_NE(nullptr, MHTMLArchive::Create(content_url, data.Get()));
+  EXPECT_NE(nullptr, MHTMLArchive::create(contentURL, data.get()));
 #else
   EXPECT_EQ(nullptr, MHTMLArchive::Create(content_url, data.Get()));
 #endif
diff --git a/third_party/WebKit/Source/web/tests/ScrollingCoordinatorTest.cpp b/third_party/WebKit/Source/web/tests/ScrollingCoordinatorTest.cpp
index e106345bf2bd..c3a198ab3b8b 100644
--- a/third_party/WebKit/Source/web/tests/ScrollingCoordinatorTest.cpp
+++ b/third_party/WebKit/Source/web/tests/ScrollingCoordinatorTest.cpp
@@ -577,12 +577,12 @@ TEST_P(ScrollingCoordinatorTest, overflowScrolling) {
 
 #if OS(ANDROID)
   // Now verify we've attached impl-side scrollbars onto the scrollbar layers
-  ASSERT_TRUE(composited_layer_mapping->LayerForHorizontalScrollbar());
-  ASSERT_TRUE(composited_layer_mapping->LayerForHorizontalScrollbar()
-                  ->HasContentsLayer());
-  ASSERT_TRUE(composited_layer_mapping->LayerForVerticalScrollbar());
+  ASSERT_TRUE(compositedLayerMapping->layerForHorizontalScrollbar());
+  ASSERT_TRUE(compositedLayerMapping->layerForHorizontalScrollbar()
+                  ->hasContentsLayer());
+  ASSERT_TRUE(compositedLayerMapping->layerForVerticalScrollbar());
   ASSERT_TRUE(
-      composited_layer_mapping->LayerForVerticalScrollbar()->HasContentsLayer());
+      compositedLayerMapping->layerForVerticalScrollbar()->hasContentsLayer());
 #endif
 }
 
@@ -685,16 +685,16 @@ TEST_P(ScrollingCoordinatorTest, iframeScrolling) {
 
 #if OS(ANDROID)
   // Now verify we've attached impl-side scrollbars onto the scrollbar layers
-  GraphicsLayer* horizontal_scrollbar_layer =
-      inner_frame_view->LayoutViewportScrollableArea()
-          ->LayerForHorizontalScrollbar();
-  ASSERT_TRUE(horizontal_scrollbar_layer);
-  ASSERT_TRUE(horizontal_scrollbar_layer->HasContentsLayer());
-  GraphicsLayer* vertical_scrollbar_layer =
-      inner_frame_view->LayoutViewportScrollableArea()
-          ->LayerForVerticalScrollbar();
-  ASSERT_TRUE(vertical_scrollbar_layer);
-  ASSERT_TRUE(vertical_scrollbar_layer->HasContentsLayer());
+  GraphicsLayer* horizontalScrollbarLayer =
+      innerFrameView->layoutViewportScrollableArea()
+          ->layerForHorizontalScrollbar();
+  ASSERT_TRUE(horizontalScrollbarLayer);
+  ASSERT_TRUE(horizontalScrollbarLayer->hasContentsLayer());
+  GraphicsLayer* verticalScrollbarLayer =
+      innerFrameView->layoutViewportScrollableArea()
+          ->layerForVerticalScrollbar();
+  ASSERT_TRUE(verticalScrollbarLayer);
+  ASSERT_TRUE(verticalScrollbarLayer->hasContentsLayer());
 #endif
 }
 
diff --git a/third_party/WebKit/Source/web/tests/WebFrameTest.cpp b/third_party/WebKit/Source/web/tests/WebFrameTest.cpp
index 0f0531efb726..c0c3eb4ac389 100644
--- a/third_party/WebKit/Source/web/tests/WebFrameTest.cpp
+++ b/third_party/WebKit/Source/web/tests/WebFrameTest.cpp
@@ -5521,76 +5521,76 @@ TEST_P(ParameterizedWebFrameTest, DISABLED_PositionForPointTest) {
 #if !OS(MACOSX) && !OS(LINUX)
 TEST_P(ParameterizedWebFrameTest,
        SelectRangeStaysHorizontallyAlignedWhenMoved) {
-  RegisterMockedHttpURLLoad("move_caret.html");
+  registerMockedHttpURLLoad("move_caret.html");
 
-  FrameTestHelpers::WebViewHelper web_view_helper;
-  InitializeTextSelectionWebView(base_url_ + "move_caret.html", &web_view_helper);
-  WebLocalFrameImpl* frame = web_view_helper.WebView()->MainFrameImpl();
+  FrameTestHelpers::WebViewHelper webViewHelper;
+  initializeTextSelectionWebView(m_baseURL + "move_caret.html", &webViewHelper);
+  WebLocalFrameImpl* frame = webViewHelper.webView()->mainFrameImpl();
 
-  WebRect initial_start_rect;
-  WebRect initial_end_rect;
-  WebRect start_rect;
-  WebRect end_rect;
+  WebRect initialStartRect;
+  WebRect initialEndRect;
+  WebRect startRect;
+  WebRect endRect;
 
-  frame->ExecuteScript(WebScriptSource("selectRange();"));
-  web_view_helper.WebView()->SelectionBounds(initial_start_rect, initial_end_rect);
-  WebPoint moved_start(TopLeft(initial_start_rect));
+  frame->executeScript(WebScriptSource("selectRange();"));
+  webViewHelper.webView()->selectionBounds(initialStartRect, initialEndRect);
+  WebPoint movedStart(topLeft(initialStartRect));
 
-  moved_start.y += 40;
-  frame->SelectRange(moved_start, BottomRightMinusOne(initial_end_rect));
-  web_view_helper.WebView()->SelectionBounds(start_rect, end_rect);
-  EXPECT_EQ(start_rect, initial_start_rect);
-  EXPECT_EQ(end_rect, initial_end_rect);
+  movedStart.y += 40;
+  frame->selectRange(movedStart, bottomRightMinusOne(initialEndRect));
+  webViewHelper.webView()->selectionBounds(startRect, endRect);
+  EXPECT_EQ(startRect, initialStartRect);
+  EXPECT_EQ(endRect, initialEndRect);
 
-  moved_start.y -= 80;
-  frame->SelectRange(moved_start, BottomRightMinusOne(initial_end_rect));
-  web_view_helper.WebView()->SelectionBounds(start_rect, end_rect);
-  EXPECT_EQ(start_rect, initial_start_rect);
-  EXPECT_EQ(end_rect, initial_end_rect);
+  movedStart.y -= 80;
+  frame->selectRange(movedStart, bottomRightMinusOne(initialEndRect));
+  webViewHelper.webView()->selectionBounds(startRect, endRect);
+  EXPECT_EQ(startRect, initialStartRect);
+  EXPECT_EQ(endRect, initialEndRect);
 
-  WebPoint moved_end(BottomRightMinusOne(initial_end_rect));
+  WebPoint movedEnd(bottomRightMinusOne(initialEndRect));
 
-  moved_end.y += 40;
-  frame->SelectRange(TopLeft(initial_start_rect), moved_end);
-  web_view_helper.WebView()->SelectionBounds(start_rect, end_rect);
-  EXPECT_EQ(start_rect, initial_start_rect);
-  EXPECT_EQ(end_rect, initial_end_rect);
+  movedEnd.y += 40;
+  frame->selectRange(topLeft(initialStartRect), movedEnd);
+  webViewHelper.webView()->selectionBounds(startRect, endRect);
+  EXPECT_EQ(startRect, initialStartRect);
+  EXPECT_EQ(endRect, initialEndRect);
 
-  moved_end.y -= 80;
-  frame->SelectRange(TopLeft(initial_start_rect), moved_end);
-  web_view_helper.WebView()->SelectionBounds(start_rect, end_rect);
-  EXPECT_EQ(start_rect, initial_start_rect);
-  EXPECT_EQ(end_rect, initial_end_rect);
+  movedEnd.y -= 80;
+  frame->selectRange(topLeft(initialStartRect), movedEnd);
+  webViewHelper.webView()->selectionBounds(startRect, endRect);
+  EXPECT_EQ(startRect, initialStartRect);
+  EXPECT_EQ(endRect, initialEndRect);
 }
 
 TEST_P(ParameterizedWebFrameTest, MoveCaretStaysHorizontallyAlignedWhenMoved) {
   WebLocalFrameImpl* frame;
-  RegisterMockedHttpURLLoad("move_caret.html");
-
-  FrameTestHelpers::WebViewHelper web_view_helper;
-  InitializeTextSelectionWebView(base_url_ + "move_caret.html", &web_view_helper);
-  frame = (WebLocalFrameImpl*)web_view_helper.WebView()->MainFrame();
-
-  WebRect initial_start_rect;
-  WebRect initial_end_rect;
-  WebRect start_rect;
-  WebRect end_rect;
-
-  frame->ExecuteScript(WebScriptSource("selectCaret();"));
-  web_view_helper.WebView()->SelectionBounds(initial_start_rect, initial_end_rect);
-  WebPoint move_to(TopLeft(initial_start_rect));
-
-  move_to.y += 40;
-  frame->MoveCaretSelection(move_to);
-  web_view_helper.WebView()->SelectionBounds(start_rect, end_rect);
-  EXPECT_EQ(start_rect, initial_start_rect);
-  EXPECT_EQ(end_rect, initial_end_rect);
-
-  move_to.y -= 80;
-  frame->MoveCaretSelection(move_to);
-  web_view_helper.WebView()->SelectionBounds(start_rect, end_rect);
-  EXPECT_EQ(start_rect, initial_start_rect);
-  EXPECT_EQ(end_rect, initial_end_rect);
+  registerMockedHttpURLLoad("move_caret.html");
+
+  FrameTestHelpers::WebViewHelper webViewHelper;
+  initializeTextSelectionWebView(m_baseURL + "move_caret.html", &webViewHelper);
+  frame = (WebLocalFrameImpl*)webViewHelper.webView()->mainFrame();
+
+  WebRect initialStartRect;
+  WebRect initialEndRect;
+  WebRect startRect;
+  WebRect endRect;
+
+  frame->executeScript(WebScriptSource("selectCaret();"));
+  webViewHelper.webView()->selectionBounds(initialStartRect, initialEndRect);
+  WebPoint moveTo(topLeft(initialStartRect));
+
+  moveTo.y += 40;
+  frame->moveCaretSelection(moveTo);
+  webViewHelper.webView()->selectionBounds(startRect, endRect);
+  EXPECT_EQ(startRect, initialStartRect);
+  EXPECT_EQ(endRect, initialEndRect);
+
+  moveTo.y -= 80;
+  frame->moveCaretSelection(moveTo);
+  webViewHelper.webView()->selectionBounds(startRect, endRect);
+  EXPECT_EQ(startRect, initialStartRect);
+  EXPECT_EQ(endRect, initialEndRect);
 }
 #endif
 
diff --git a/third_party/WebKit/Source/web/tests/WebPluginContainerTest.cpp b/third_party/WebKit/Source/web/tests/WebPluginContainerTest.cpp
index 0feab8925a53..498d4191339a 100644
--- a/third_party/WebKit/Source/web/tests/WebPluginContainerTest.cpp
+++ b/third_party/WebKit/Source/web/tests/WebPluginContainerTest.cpp
@@ -404,9 +404,9 @@ TEST_F(WebPluginContainerTest, CopyInsertKeyboardEventsTest) {
       WebInputEvent::kControlKey | WebInputEvent::kNumLockOn |
       WebInputEvent::kIsLeft);
 #if OS(MACOSX)
-  modifier_key = static_cast<WebInputEvent::Modifiers>(WebInputEvent::kMetaKey |
-                                                      WebInputEvent::kNumLockOn |
-                                                      WebInputEvent::kIsLeft);
+  modifierKey = static_cast<WebInputEvent::Modifiers>(WebInputEvent::MetaKey |
+                                                      WebInputEvent::NumLockOn |
+                                                      WebInputEvent::IsLeft);
 #endif
   WebKeyboardEvent web_keyboard_event_c(WebInputEvent::kRawKeyDown, modifier_key,
                                      WebInputEvent::kTimeStampForTesting);
diff --git a/third_party/WebKit/Source/web/tests/WebViewTest.cpp b/third_party/WebKit/Source/web/tests/WebViewTest.cpp
index e6d9364c11b7..0d2d75a7a221 100644
--- a/third_party/WebKit/Source/web/tests/WebViewTest.cpp
+++ b/third_party/WebKit/Source/web/tests/WebViewTest.cpp
@@ -3810,96 +3810,96 @@ TEST_P(WebViewTest, StopLoadingIfJavaScriptURLReturnsNoStringResult) {
 
 #if OS(MACOSX)
 TEST_P(WebViewTest, WebSubstringUtil) {
-  RegisterMockedHttpURLLoad("content_editable_populated.html");
-  WebViewImpl* web_view = web_view_helper_.InitializeAndLoad(
-      base_url_ + "content_editable_populated.html");
-  web_view->GetSettings()->SetDefaultFontSize(12);
-  web_view->Resize(WebSize(400, 400));
-  WebLocalFrameImpl* frame = web_view->MainFrameImpl();
-
-  WebPoint baseline_point;
-  NSAttributedString* result = WebSubstringUtil::AttributedSubstringInRange(
-      frame, 10, 3, &baseline_point);
+  registerMockedHttpURLLoad("content_editable_populated.html");
+  WebViewImpl* webView = m_webViewHelper.initializeAndLoad(
+      m_baseURL + "content_editable_populated.html");
+  webView->settings()->setDefaultFontSize(12);
+  webView->resize(WebSize(400, 400));
+  WebLocalFrameImpl* frame = webView->mainFrameImpl();
+
+  WebPoint baselinePoint;
+  NSAttributedString* result = WebSubstringUtil::attributedSubstringInRange(
+      frame, 10, 3, &baselinePoint);
   ASSERT_TRUE(!!result);
 
-  WebPoint point(baseline_point.x, baseline_point.y);
-  result = WebSubstringUtil::AttributedWordAtPoint(frame->FrameWidget(), point,
-                                                   baseline_point);
+  WebPoint point(baselinePoint.x, baselinePoint.y);
+  result = WebSubstringUtil::attributedWordAtPoint(frame->frameWidget(), point,
+                                                   baselinePoint);
   ASSERT_TRUE(!!result);
 
-  web_view->SetZoomLevel(3);
+  webView->setZoomLevel(3);
 
   result =
-      WebSubstringUtil::AttributedSubstringInRange(frame, 5, 5, &baseline_point);
+      WebSubstringUtil::attributedSubstringInRange(frame, 5, 5, &baselinePoint);
   ASSERT_TRUE(!!result);
 
-  point = WebPoint(baseline_point.x, baseline_point.y);
-  result = WebSubstringUtil::AttributedWordAtPoint(frame->FrameWidget(), point,
-                                                   baseline_point);
+  point = WebPoint(baselinePoint.x, baselinePoint.y);
+  result = WebSubstringUtil::attributedWordAtPoint(frame->frameWidget(), point,
+                                                   baselinePoint);
   ASSERT_TRUE(!!result);
 }
 
 TEST_P(WebViewTest, WebSubstringUtilPinchZoom) {
-  RegisterMockedHttpURLLoad("content_editable_populated.html");
-  WebViewImpl* web_view = web_view_helper_.InitializeAndLoad(
-      base_url_ + "content_editable_populated.html");
-  web_view->GetSettings()->SetDefaultFontSize(12);
-  web_view->Resize(WebSize(400, 400));
-  WebLocalFrameImpl* frame = web_view->MainFrameImpl();
+  registerMockedHttpURLLoad("content_editable_populated.html");
+  WebViewImpl* webView = m_webViewHelper.initializeAndLoad(
+      m_baseURL + "content_editable_populated.html");
+  webView->settings()->setDefaultFontSize(12);
+  webView->resize(WebSize(400, 400));
+  WebLocalFrameImpl* frame = webView->mainFrameImpl();
   NSAttributedString* result = nil;
 
-  WebPoint baseline_point;
-  result = WebSubstringUtil::AttributedSubstringInRange(frame, 10, 3,
-                                                        &baseline_point);
+  WebPoint baselinePoint;
+  result = WebSubstringUtil::attributedSubstringInRange(frame, 10, 3,
+                                                        &baselinePoint);
   ASSERT_TRUE(!!result);
 
-  web_view->SetPageScaleFactor(3);
+  webView->setPageScaleFactor(3);
 
-  WebPoint point_after_zoom;
-  result = WebSubstringUtil::AttributedSubstringInRange(frame, 10, 3,
-                                                        &point_after_zoom);
+  WebPoint pointAfterZoom;
+  result = WebSubstringUtil::attributedSubstringInRange(frame, 10, 3,
+                                                        &pointAfterZoom);
   ASSERT_TRUE(!!result);
 
   // We won't have moved by a full factor of 3 because of the translations, but
   // we should move by a factor of >2.
-  EXPECT_LT(2 * baseline_point.x, point_after_zoom.x);
-  EXPECT_LT(2 * baseline_point.y, point_after_zoom.y);
+  EXPECT_LT(2 * baselinePoint.x, pointAfterZoom.x);
+  EXPECT_LT(2 * baselinePoint.y, pointAfterZoom.y);
 }
 
 TEST_P(WebViewTest, WebSubstringUtilIframe) {
-  RegisterMockedHttpURLLoad("single_iframe.html");
-  RegisterMockedHttpURLLoad("visible_iframe.html");
-  WebViewImpl* web_view =
-      web_view_helper_.InitializeAndLoad(base_url_ + "single_iframe.html");
-  web_view->GetSettings()->SetDefaultFontSize(12);
-  web_view->GetSettings()->SetJavaScriptEnabled(true);
-  web_view->Resize(WebSize(400, 400));
-  WebLocalFrameImpl* main_frame = web_view->MainFrameImpl();
-  WebLocalFrameImpl* child_frame = WebLocalFrameImpl::FromFrame(
-      ToLocalFrame(main_frame->GetFrame()->Tree().FirstChild()));
-
-  WebPoint baseline_point;
-  NSAttributedString* result = WebSubstringUtil::AttributedSubstringInRange(
-      child_frame, 11, 7, &baseline_point);
+  registerMockedHttpURLLoad("single_iframe.html");
+  registerMockedHttpURLLoad("visible_iframe.html");
+  WebViewImpl* webView =
+      m_webViewHelper.initializeAndLoad(m_baseURL + "single_iframe.html");
+  webView->settings()->setDefaultFontSize(12);
+  webView->settings()->setJavaScriptEnabled(true);
+  webView->resize(WebSize(400, 400));
+  WebLocalFrameImpl* mainFrame = webView->mainFrameImpl();
+  WebLocalFrameImpl* childFrame = WebLocalFrameImpl::fromFrame(
+      toLocalFrame(mainFrame->frame()->tree().firstChild()));
+
+  WebPoint baselinePoint;
+  NSAttributedString* result = WebSubstringUtil::attributedSubstringInRange(
+      childFrame, 11, 7, &baselinePoint);
   ASSERT_NE(result, nullptr);
 
-  WebPoint point(baseline_point.x, baseline_point.y);
-  result = WebSubstringUtil::AttributedWordAtPoint(main_frame->FrameWidget(),
-                                                   point, baseline_point);
+  WebPoint point(baselinePoint.x, baselinePoint.y);
+  result = WebSubstringUtil::attributedWordAtPoint(mainFrame->frameWidget(),
+                                                   point, baselinePoint);
   ASSERT_NE(result, nullptr);
 
-  int y_before_change = baseline_point.y;
+  int yBeforeChange = baselinePoint.y;
 
   // Now move the <iframe> down by 100px.
-  main_frame->ExecuteScript(WebScriptSource(
+  mainFrame->executeScript(WebScriptSource(
       "document.querySelector('iframe').style.marginTop = '100px';"));
 
   point = WebPoint(point.x, point.y + 100);
-  result = WebSubstringUtil::AttributedWordAtPoint(main_frame->FrameWidget(),
-                                                   point, baseline_point);
+  result = WebSubstringUtil::attributedWordAtPoint(mainFrame->frameWidget(),
+                                                   point, baselinePoint);
   ASSERT_NE(result, nullptr);
 
-  EXPECT_EQ(y_before_change, baseline_point.y - 100);
+  EXPECT_EQ(yBeforeChange, baselinePoint.y - 100);
 }
 
 #endif
diff --git a/third_party/WebKit/Source/wtf/Dummy.cpp b/third_party/WebKit/Source/wtf/Dummy.cpp
index 1c657bb7a33c..8bf499740c5a 100644
--- a/third_party/WebKit/Source/wtf/Dummy.cpp
+++ b/third_party/WebKit/Source/wtf/Dummy.cpp
@@ -15,7 +15,7 @@
 
 namespace WTF {
 
-__declspec(dllexport) int g_dummy_exported_value_to_force_msvc_to_generate_lib_file;
+__declspec(dllexport) int dummyExportedValueToForceMSVCToGenerateLibFile;
 
 }
 
diff --git a/ui/content_accelerators/accelerator_util.cc b/ui/content_accelerators/accelerator_util.cc
index 789e93d24349..a2654d29f222 100644
--- a/ui/content_accelerators/accelerator_util.cc
+++ b/ui/content_accelerators/accelerator_util.cc
@@ -23,7 +23,7 @@ int GetModifiersFromNativeWebKeyboardEvent(
   if (event.GetModifiers() & content::NativeWebKeyboardEvent::kAltKey)
     modifiers |= ui::EF_ALT_DOWN;
 #if defined(OS_MACOSX) || defined(OS_CHROMEOS)
-  if (event.GetModifiers() & content::NativeWebKeyboardEvent::kMetaKey)
+  if (event.modifiers() & content::NativeWebKeyboardEvent::MetaKey)
     modifiers |= ui::EF_COMMAND_DOWN;
 #endif
 #if defined(USE_AURA)
diff --git a/ui/events/blink/web_input_event.cc b/ui/events/blink/web_input_event.cc
index 0459e722250b..433142ee75ea 100644
--- a/ui/events/blink/web_input_event.cc
+++ b/ui/events/blink/web_input_event.cc
@@ -319,10 +319,10 @@ blink::WebKeyboardEvent MakeWebKeyboardEvent(const KeyEvent& event) {
     // Key events require no translation.
     blink::WebKeyboardEvent webkit_event(MakeWebKeyboardEventFromNativeEvent(
         event.native_event(), event.time_stamp()));
-    webkit_event.SetModifiers(webkit_event.GetModifiers() |
+    webkit_event.setModifiers(webkit_event.modifiers() |
                               DomCodeToWebInputEventModifiers(event.code()));
-    webkit_event.dom_code = static_cast<int>(event.code());
-    webkit_event.dom_key = static_cast<int>(event.GetDomKey());
+    webkit_event.domCode = static_cast<int>(event.code());
+    webkit_event.domKey = static_cast<int>(event.GetDomKey());
     return webkit_event;
   }
 #endif
