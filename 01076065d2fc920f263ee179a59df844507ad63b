{
  "comments": [
    {
      "key": {
        "uuid": "e9f12aa5_0f465265",
        "filename": "/COMMIT_MSG",
        "patchSetId": 9
      },
      "lineNbr": 17,
      "author": {
        "id": 1002681
      },
      "writtenOn": "2018-01-12T20:22:53Z",
      "side": 1,
      "message": "I think it\u0027s more accurate to say it must be in DIPs since CSS pixels are affected by browser zoom (Ctrl+/- zooming) which I\u0027m quite certain this isn\u0027t.",
      "range": {
        "startLine": 17,
        "startChar": 56,
        "endLine": 17,
        "endChar": 71
      },
      "revId": "01076065d2fc920f263ee179a59df844507ad63b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "13cca55b_ceffa08f",
        "filename": "/COMMIT_MSG",
        "patchSetId": 9
      },
      "lineNbr": 17,
      "author": {
        "id": 1237911
      },
      "writtenOn": "2018-01-15T02:47:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e9f12aa5_0f465265",
      "range": {
        "startLine": 17,
        "startChar": 56,
        "endLine": 17,
        "endChar": 71
      },
      "revId": "01076065d2fc920f263ee179a59df844507ad63b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cf030fb7_9c98cb6d",
        "filename": "android_webview/browser/browser_view_renderer.cc",
        "patchSetId": 9
      },
      "lineNbr": 366,
      "author": {
        "id": 1002681
      },
      "writtenOn": "2018-01-12T20:22:53Z",
      "side": 1,
      "message": "Is the comment on this member in the .h wrong? It says it\u0027s in CSS pixels.",
      "range": {
        "startLine": 366,
        "startChar": 33,
        "endLine": 366,
        "endChar": 51
      },
      "revId": "01076065d2fc920f263ee179a59df844507ad63b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f4a68faf_ae151a94",
        "filename": "android_webview/browser/browser_view_renderer.cc",
        "patchSetId": 9
      },
      "lineNbr": 366,
      "author": {
        "id": 1237911
      },
      "writtenOn": "2018-01-15T02:47:43Z",
      "side": 1,
      "message": "In my personal understanding, it is because Android does not actually use page zoom (i.e., ctrl +-) except the device scale factor. In other words, in Android, DIP scaled value is the same with CSS pixel scaled value. This causes a confusion, so we might need refactoring for this ..",
      "parentUuid": "cf030fb7_9c98cb6d",
      "range": {
        "startLine": 366,
        "startChar": 33,
        "endLine": 366,
        "endChar": 51
      },
      "revId": "01076065d2fc920f263ee179a59df844507ad63b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dc805d87_020b5ab1",
        "filename": "android_webview/browser/browser_view_renderer.cc",
        "patchSetId": 9
      },
      "lineNbr": 366,
      "author": {
        "id": 1002681
      },
      "writtenOn": "2018-01-17T15:19:21Z",
      "side": 1,
      "message": "Right, the terminology is confusing there. Please remove the comment, the member name is descriptive enough.",
      "parentUuid": "f4a68faf_ae151a94",
      "range": {
        "startLine": 366,
        "startChar": 33,
        "endLine": 366,
        "endChar": 51
      },
      "revId": "01076065d2fc920f263ee179a59df844507ad63b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bf64ecf2_2eda4ef9",
        "filename": "third_party/WebKit/Source/platform/scroll/ScrollableArea.cpp",
        "patchSetId": 9
      },
      "lineNbr": 291,
      "author": {
        "id": 1002681
      },
      "writtenOn": "2018-01-12T20:22:53Z",
      "side": 1,
      "message": "We can\u0027t get rid of the scroll offset truncation in Blink like this. It\u0027s something we\u0027ve wanted to do for a while but it\u0027s not quite this simple. Doing this will break various other things inside Blink.\n\nCan you help me understand why this change is needed in Blink? Blink offsets have always been integers and you\u0027re doing the DIP adjustment above Blink in AndroidWebView code so I don\u0027t understand why we need to make this change.\n\nIt might be helpful if you show me the path from how LocalDOMWindow::scrollX|Y gets to SynchronousCompositor::DidChangeRootLayerScrollOffset. My assumption was that these values will all come from CC which has all the fractional parts of the scroll offset.",
      "range": {
        "startLine": 291,
        "startChar": 2,
        "endLine": 291,
        "endChar": 42
      },
      "revId": "01076065d2fc920f263ee179a59df844507ad63b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e92577ed_70795d44",
        "filename": "third_party/WebKit/Source/platform/scroll/ScrollableArea.cpp",
        "patchSetId": 9
      },
      "lineNbr": 291,
      "author": {
        "id": 1002725
      },
      "writtenOn": "2018-01-12T20:41:28Z",
      "side": 1,
      "message": "\u003e We can\u0027t get rid of the scroll offset truncation in Blink like this. It\u0027s something we\u0027ve wanted to do for a while but it\u0027s not quite this simple. Doing this will break various other things inside Blink.\n\nRight :p the original question was how close is this.\n\nWe were only toggling things in the CL to see if it fixes webview tests.\n\n\u003e \n\u003e Can you help me understand why this change is needed in Blink? Blink offsets have always been integers and you\u0027re doing the DIP adjustment above Blink in AndroidWebView code so I don\u0027t understand why we need to make this change.\n\nCame from me not wanting to relax webview scroll test constraints:\nhttps://chromium-review.googlesource.com/c/chromium/src/+/844266/5/android_webview/javatests/src/org/chromium/android_webview/test/AndroidScrollIntegrationTest.java#265\n\nApps in webview can set scroll directly in physical pixels from browser side. My concern is that app try to set scroll to X, but then bubble up as scrolled to X-1 or X+1 due to rounding.\n\nJaebaek did all the investigation here, and honestly, I don\u0027t really understand how things work currently. But webview has this weird way to do scale to avoid issues at end points: https://cs.chromium.org/chromium/src/android_webview/browser/browser_view_renderer.cc?rcl\u003dffb5de3934abd4e16399b2f79e7100823c6076fd\u0026l\u003d576\n\nand that\u0027s going to be skipped over in the new code path, so Jaebaek was trying to find where rounding was happening.\n\n\u003e \n\u003e It might be helpful if you show me the path from how LocalDOMWindow::scrollX|Y gets to SynchronousCompositor::DidChangeRootLayerScrollOffset. My assumption was that these values will all come from CC which has all the fractional parts of the scroll offset.\n\nDidChangeRootLayerScrollOffset happens when app directly sets webview scroll, so shouldn\u0027t come from LocalDOMWindow::scrollX|Y. Otherwise than that, your assumption is correct, scroll in SynchronousCompositorHost comes from cc.",
      "parentUuid": "bf64ecf2_2eda4ef9",
      "range": {
        "startLine": 291,
        "startChar": 2,
        "endLine": 291,
        "endChar": 42
      },
      "revId": "01076065d2fc920f263ee179a59df844507ad63b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "89056771_7b3849a3",
        "filename": "third_party/WebKit/Source/platform/scroll/ScrollableArea.cpp",
        "patchSetId": 9
      },
      "lineNbr": 291,
      "author": {
        "id": 1237911
      },
      "writtenOn": "2018-01-15T02:47:43Z",
      "side": 1,
      "message": "boliu@, thank you for explanation.\n\nIn summary, the issue I am facing is:\nWhen enabling --use-zoom-for-dsf, some tests in AndroidScrollIntegrationTest (e.g., testTouchScrollCanBeAlteredByUi) fail because scrollX|Y return float values (i.e., not integer values). For example, the --use-zoom-for-dsf disabled one returns 38,80 but the enabled one returns 38.4754, 80.3793.\n\nThere are three places that intentionally convert those float values of scroll delta (e.g., 38.4754, 80.3793) to integer values (e.g., 38, 80) when --use-zoom-for-dsf is disabled:\nR1. ScrollTree::PullDeltaForMainThread()\nR2. ScrollTree::CollectScrollDeltas()\nR3. ScrollableArea::ScrollOffsetChanged()\n\nHowever, when --use-zoom-for-dsf is enabled, in R1 ~ R3, the scroll delta is already integer in physical pixel scale (e.g., 38.4754 * DSF \u003d 101, 80.3793 * DSF \u003d 211). LocalDOMWindow::scrollX|Y finally divides them by DSF.\n\nI tried to remove those three conversions (R1 ~ R3) to make it behave as the same regardless of --use-zoom-for-dsf. However, as bokan@ mentioned, if we cannot get rid of the scroll offset truncation (R3), then I think we have two options:\n\n1. Add conversion from float to integer at the end of LocalDOMWindow::scrollX|Y\n2. Modify AndroidScrollIntegrationTest to allow small rounding error (for the --use-zoom-for-dsf enabled one).\n\nWhich option would be correct? Are there other options?",
      "parentUuid": "e92577ed_70795d44",
      "range": {
        "startLine": 291,
        "startChar": 2,
        "endLine": 291,
        "endChar": 42
      },
      "revId": "01076065d2fc920f263ee179a59df844507ad63b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2ba8b2fa_bad67fb1",
        "filename": "third_party/WebKit/Source/platform/scroll/ScrollableArea.cpp",
        "patchSetId": 9
      },
      "lineNbr": 291,
      "author": {
        "id": 1002681
      },
      "writtenOn": "2018-01-17T15:19:21Z",
      "side": 1,
      "message": "I think I\u0027ve finally wrapped my head around this. If I understand correctly, the current behavior is lossy. i.e. if a WebView app, running on a 2x DSF screen, sets the y scroll offset in physical pixels to 3, window.scrollY should really return 3/2\u003d1.5. Today it will return 1. (Though the offset will be correct on screen since the .5 is kept in CC)\n\nSo the problem boils down to the fact that Blink now gets scroll offsets in physical pixels. This means it now gets the fractional (fractional because Blink returns values in CSS pixels) part of the scroll offset that was previously truncated out when committing from the compositor.\n\nThis will affect more than just WebView and would be exposed to content on the web. e.g. if you compare Windows on a high DPI laptop (you can also use --force-device-scale-factor\u003d2 on a low-DPI machine) with the flag on and off, you\u0027ll see that scrollY returns floating point values when the flag is on but truncates when it\u0027s off. This isn\u0027t as much of an issue on desktops since browser zoom is common and already results in fractional scroll values - pages have to expect it. We\u0027ll have to be careful with Android since many pages might assume integer values (pinch-zoom will cause fractionals but a page can disable zooming). We\u0027ll need an intent-to-ship to Blink-dev when we\u0027re ready to ship since this will have a developer-visible effect.\n\nThe new patch that leaves Blink as-is lgtm but I\u0027m concerned about compatibility with existing apps. I couldn\u0027t guess how badly or how many apps this would affect. IMHO, we should give it a try and if we find many breakages we could add a WebView quirk setting that truncates out the DSF portion of a scroll offset (but this will affect many APIs: Element.getBoundingClientRect, Element.scrollLeft, MouseEvent.pageX, etc.) It\u0027d be best if our web and WebView behaviors matched so we should avoid adding a quirk unless necessary.\n\nBo, Jaebaek: does that roughly match your conclusion?",
      "parentUuid": "89056771_7b3849a3",
      "range": {
        "startLine": 291,
        "startChar": 2,
        "endLine": 291,
        "endChar": 42
      },
      "revId": "01076065d2fc920f263ee179a59df844507ad63b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1eca1684_aa9ac30d",
        "filename": "third_party/WebKit/Source/platform/scroll/ScrollableArea.cpp",
        "patchSetId": 9
      },
      "lineNbr": 291,
      "author": {
        "id": 1002725
      },
      "writtenOn": "2018-01-17T19:37:32Z",
      "side": 1,
      "message": "\u003e I think I\u0027ve finally wrapped my head around this. If I understand correctly, the current behavior is lossy. i.e. if a WebView app, running on a 2x DSF screen, sets the y scroll offset in physical pixels to 3, window.scrollY should really return 3/2\u003d1.5. Today it will return 1. (Though the offset will be correct on screen since the .5 is kept in CC)\n\u003e \n\u003e So the problem boils down to the fact that Blink now gets scroll offsets in physical pixels. This means it now gets the fractional (fractional because Blink returns values in CSS pixels) part of the scroll offset that was previously truncated out when committing from the compositor.\n\u003e \n\u003e This will affect more than just WebView and would be exposed to content on the web. e.g. if you compare Windows on a high DPI laptop (you can also use --force-device-scale-factor\u003d2 on a low-DPI machine) with the flag on and off, you\u0027ll see that scrollY returns floating point values when the flag is on but truncates when it\u0027s off. This isn\u0027t as much of an issue on desktops since browser zoom is common and already results in fractional scroll values - pages have to expect it. We\u0027ll have to be careful with Android since many pages might assume integer values (pinch-zoom will cause fractionals but a page can disable zooming). We\u0027ll need an intent-to-ship to Blink-dev when we\u0027re ready to ship since this will have a developer-visible effect.\n\nRe-iterating for Jaebaek. This needs an blink-dev intent to ship before enabling use-zoom-for-dsf for android.\n\nLooks like it\u0027s already turned on for linux and windows, but not mac: https://cs.chromium.org/chromium/src/content/public/common/use_zoom_for_dsf_policy.cc?rcl\u003d22a43311691cdfbc518dc30c0c12a110fd96e35b\u0026l\u003d19\n\nSo I guess all these things you are saying are already be happening on windows and linux on high DPI machines?\n\n\u003e \n\u003e The new patch that leaves Blink as-is lgtm but I\u0027m concerned about compatibility with existing apps. I couldn\u0027t guess how badly or how many apps this would affect. IMHO, we should give it a try and if we find many breakages we could add a WebView quirk setting that truncates out the DSF portion of a scroll offset (but this will affect many APIs: Element.getBoundingClientRect, Element.scrollLeft, MouseEvent.pageX, etc.) It\u0027d be best if our web and WebView behaviors matched so we should avoid adding a quirk unless necessary.\n\u003e \n\u003e Bo, Jaebaek: does that roughly match your conclusion?\n\nYep. Thank you for putting this so clearly :)",
      "parentUuid": "2ba8b2fa_bad67fb1",
      "range": {
        "startLine": 291,
        "startChar": 2,
        "endLine": 291,
        "endChar": 42
      },
      "revId": "01076065d2fc920f263ee179a59df844507ad63b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "91040925_2ec44cad",
        "filename": "third_party/WebKit/Source/platform/scroll/ScrollableArea.cpp",
        "patchSetId": 9
      },
      "lineNbr": 291,
      "author": {
        "id": 1002681
      },
      "writtenOn": "2018-01-17T19:46:26Z",
      "side": 1,
      "message": "\u003e So I guess all these things you are saying are already be happening on windows and linux on high DPI machines?\n\nThat\u0027s correct. I think Android should work the same way but is a bit riskier in terms of compat since the only time you can get fractional scroll offsets today is under pinch-zoom. Pages have historically been pretty broken while zoomed so there isn\u0027t really an expectation of working while zoomed.",
      "parentUuid": "1eca1684_aa9ac30d",
      "range": {
        "startLine": 291,
        "startChar": 2,
        "endLine": 291,
        "endChar": 42
      },
      "revId": "01076065d2fc920f263ee179a59df844507ad63b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}