{
  "comments": [
    {
      "key": {
        "uuid": "3e6a5370_f2405ab2",
        "filename": "base/memory/swap_thrashing_monitor.h",
        "patchSetId": 6
      },
      "lineNbr": 10,
      "author": {
        "id": 1001385
      },
      "writtenOn": "2017-10-16T19:11:21Z",
      "side": 1,
      "message": "This comment defines the implementation, but doesn\u0027t give any hint or recommendation as to what the caller is expected to do.\n\nIs the expectation that some core part of the system polls this, or checks it before doing certain actions, for example?",
      "revId": "d6a56f9b64953c661a730a82a7db409285d82a7d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d88f1840_069acb10",
        "filename": "base/memory/swap_thrashing_monitor.h",
        "patchSetId": 6
      },
      "lineNbr": 10,
      "author": {
        "id": 1161299
      },
      "writtenOn": "2017-10-17T10:04:38Z",
      "side": 1,
      "message": "Hum, I\u0027m not convinced that it\u0027s worth detailing this here? Especially considering that this will probably evolve over time (it\u0027ll initially only be used to observe the impact on metrics, but we\u0027ll need to decide how to plumb these signals to the TabManager etc if needed).",
      "parentUuid": "3e6a5370_f2405ab2",
      "revId": "d6a56f9b64953c661a730a82a7db409285d82a7d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7ca65298_40f9b5cc",
        "filename": "base/memory/swap_thrashing_monitor.h",
        "patchSetId": 6
      },
      "lineNbr": 10,
      "author": {
        "id": 1161299
      },
      "writtenOn": "2017-10-18T05:25:20Z",
      "side": 1,
      "message": "Added some comments about what the users of the system should (and shouldn\u0027t) do.",
      "parentUuid": "d88f1840_069acb10",
      "revId": "d6a56f9b64953c661a730a82a7db409285d82a7d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "81291640_e2a10b84",
        "filename": "base/memory/swap_thrashing_monitor.h",
        "patchSetId": 6
      },
      "lineNbr": 39,
      "author": {
        "id": 1001385
      },
      "writtenOn": "2017-10-16T19:11:21Z",
      "side": 1,
      "message": "nit: This doesn\u0027t fit with your diagram, which has no direct transition from Confirmed-\u003eNone. :)",
      "revId": "d6a56f9b64953c661a730a82a7db409285d82a7d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8f65081d_dde1af91",
        "filename": "base/memory/swap_thrashing_monitor.h",
        "patchSetId": 6
      },
      "lineNbr": 39,
      "author": {
        "id": 1161299
      },
      "writtenOn": "2017-10-17T10:04:38Z",
      "side": 1,
      "message": "Ha! I dropped this arc as I don\u0027t think it really make sense, I think that it\u0027s better to always have a \"cooldown\" period and to only allow dropping from Confirmed to Suspected.",
      "parentUuid": "81291640_e2a10b84",
      "revId": "d6a56f9b64953c661a730a82a7db409285d82a7d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6850167e_603a7e40",
        "filename": "base/memory/swap_thrashing_monitor.h",
        "patchSetId": 6
      },
      "lineNbr": 74,
      "author": {
        "id": 1001385
      },
      "writtenOn": "2017-10-16T19:11:21Z",
      "side": 1,
      "message": "Do these intervals actually need to be public?",
      "revId": "d6a56f9b64953c661a730a82a7db409285d82a7d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "14f36429_518b99cd",
        "filename": "base/memory/swap_thrashing_monitor.h",
        "patchSetId": 6
      },
      "lineNbr": 74,
      "author": {
        "id": 1161299
      },
      "writtenOn": "2017-10-17T10:04:38Z",
      "side": 1,
      "message": "Nop, moving them.",
      "parentUuid": "6850167e_603a7e40",
      "revId": "d6a56f9b64953c661a730a82a7db409285d82a7d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c568398d_c1682086",
        "filename": "base/memory/swap_thrashing_monitor.h",
        "patchSetId": 6
      },
      "lineNbr": 118,
      "author": {
        "id": 1001385
      },
      "writtenOn": "2017-10-16T19:11:21Z",
      "side": 1,
      "message": "Rather that having this class be partially common and partially platform-specific, consider either having a platform-specific SwapThrashingMonitorDelegate, which you could define a no-op dummy impl for, and then have platform-specific impls as we flesh those out - the impls would be defined in their own .cc/.h and would contain all the platform-specific goop, and the only constraint would be that they would need to implement this set of functions.\n\nYou wouldn\u0027t need an actual C++ interface definition for that; you can rely on compile-time binding to the platform-specific Delegate implementation, and just have the Delegate be a member of this class, for example.\n\nWDYT?\n\nAlternatively, since SwapThrashingMonitor\u0027s impl is just the global setter/getter, you could define it as a C++ interface, and have each platform implement a specialization.",
      "revId": "d6a56f9b64953c661a730a82a7db409285d82a7d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c932d722_994d29d1",
        "filename": "base/memory/swap_thrashing_monitor.h",
        "patchSetId": 6
      },
      "lineNbr": 118,
      "author": {
        "id": 1161299
      },
      "writtenOn": "2017-10-17T10:04:38Z",
      "side": 1,
      "message": "Ha, I like the delegate approach, I\u0027ll do this.\n\nI don\u0027t really want to define this as an interface that get specialized on each platform. In the long term I\u0027d like to enforce more parts of the state system here (e.g. make sure that the transitions between states are enforced in the base class). I didn\u0027t did it here because it makes me make some cross-platform assumptions of how things should be, but it\u0027ll be a discussion we need to have once we try to expand this to more platforms :)",
      "parentUuid": "c568398d_c1682086",
      "revId": "d6a56f9b64953c661a730a82a7db409285d82a7d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d4cf3a6a_a3423e47",
        "filename": "base/memory/swap_thrashing_monitor.h",
        "patchSetId": 6
      },
      "lineNbr": 132,
      "author": {
        "id": 1001385
      },
      "writtenOn": "2017-10-16T19:11:21Z",
      "side": 1,
      "message": "Why is this Windows-specific? It\u0027s possible to disable swap on other platforms as well - or is the fact that this is inside the OS_WIN check just about the fact these are only need on Windows?",
      "revId": "d6a56f9b64953c661a730a82a7db409285d82a7d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fc471133_b5f37b7a",
        "filename": "base/memory/swap_thrashing_monitor.h",
        "patchSetId": 6
      },
      "lineNbr": 132,
      "author": {
        "id": 1161299
      },
      "writtenOn": "2017-10-17T10:04:38Z",
      "side": 1,
      "message": "It\u0027s just that I\u0027m trying to not make assumptions or design things for !Win platforms yet, I\u0027m trying to keep the cross-platform set of functions as simple as possible.",
      "parentUuid": "d4cf3a6a_a3423e47",
      "revId": "d6a56f9b64953c661a730a82a7db409285d82a7d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}