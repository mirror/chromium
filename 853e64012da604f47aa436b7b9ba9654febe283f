{
  "comments": [
    {
      "key": {
        "uuid": "3ec660c6_4519f60f",
        "filename": "components/viz/common/surfaces/child_local_surface_id_allocator.h",
        "patchSetId": 2
      },
      "lineNbr": 26,
      "author": {
        "id": 1189229
      },
      "writtenOn": "2018-01-11T09:26:01Z",
      "side": 1,
      "message": "Where this gets used currently we wouldn\u0027t have received the first parent-generated LocalSurfaceId.\n\nI would have preferred to not be able to construct this class without providing it. (I prefer avoiding invalid states.) There are ways but they seemed non-ideal.",
      "range": {
        "startLine": 26,
        "startChar": 7,
        "endLine": 26,
        "endChar": 16
      },
      "revId": "853e64012da604f47aa436b7b9ba9654febe283f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "31e06bd6_3ec86cb0",
        "filename": "components/viz/common/surfaces/child_local_surface_id_allocator.h",
        "patchSetId": 2
      },
      "lineNbr": 26,
      "author": {
        "id": 1221484
      },
      "writtenOn": "2018-01-12T09:03:11Z",
      "side": 1,
      "message": "Seems unavoidable :/... GenerateId will return an invalid ID in these cases, so should be ok. You could DCHECK in GenerateId if we feel this should never happen.",
      "parentUuid": "3ec660c6_4519f60f",
      "range": {
        "startLine": 26,
        "startChar": 7,
        "endLine": 26,
        "endChar": 16
      },
      "revId": "853e64012da604f47aa436b7b9ba9654febe283f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "97d839fb_157594eb",
        "filename": "components/viz/common/surfaces/parent_local_surface_id_allocator.h",
        "patchSetId": 2
      },
      "lineNbr": 21,
      "author": {
        "id": 1221484
      },
      "writtenOn": "2018-01-12T09:03:11Z",
      "side": 1,
      "message": "Where are these changes used?",
      "range": {
        "startLine": 21,
        "startChar": 24,
        "endLine": 21,
        "endChar": 53
      },
      "revId": "853e64012da604f47aa436b7b9ba9654febe283f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "453be282_68061d22",
        "filename": "content/browser/renderer_host/render_widget_host_impl.cc",
        "patchSetId": 2
      },
      "lineNbr": 2028,
      "author": {
        "id": 1115911
      },
      "writtenOn": "2018-01-11T09:52:43Z",
      "side": 1,
      "message": "This needs to be plumbed all the way to RenderWidgetHostView* which is the source of LocalSurfaceIds.\n\nSo on Aura platforms, the aura::Window generates the LocalSurfaceIds so the new LocalSurfaceId needs to be plumbed there.",
      "revId": "853e64012da604f47aa436b7b9ba9654febe283f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f738525e_e48a6350",
        "filename": "content/browser/renderer_host/render_widget_host_impl.cc",
        "patchSetId": 2
      },
      "lineNbr": 2028,
      "author": {
        "id": 1221484
      },
      "writtenOn": "2018-01-12T09:03:11Z",
      "side": 1,
      "message": "Seems like if we do this plumbing we can maybe avoid storing this here as well? Just overwrite the current Id there and then send the new Id down to this class.",
      "parentUuid": "453be282_68061d22",
      "revId": "853e64012da604f47aa436b7b9ba9654febe283f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bc2ead2a_4e89b7fa",
        "filename": "content/browser/renderer_host/render_widget_host_impl.cc",
        "patchSetId": 2
      },
      "lineNbr": 2480,
      "author": {
        "id": 1189229
      },
      "writtenOn": "2018-01-11T09:26:01Z",
      "side": 1,
      "message": "Check me here:\n\nIt seems like this is where the browser-generated LocalSurfaceId would have normally been generated, right?",
      "revId": "853e64012da604f47aa436b7b9ba9654febe283f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f70d98aa_5b3a7ac3",
        "filename": "content/browser/renderer_host/render_widget_host_impl.cc",
        "patchSetId": 2
      },
      "lineNbr": 2480,
      "author": {
        "id": 1115911
      },
      "writtenOn": "2018-01-11T09:52:43Z",
      "side": 1,
      "message": "Yes, hence why the \"received_local_surface_id_\" needs to be plumbed all the way to the same place.",
      "parentUuid": "bc2ead2a_4e89b7fa",
      "revId": "853e64012da604f47aa436b7b9ba9654febe283f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0e0c57ce_05813eef",
        "filename": "content/common/view_messages.h",
        "patchSetId": 2
      },
      "lineNbr": 306,
      "author": {
        "id": 1115911
      },
      "writtenOn": "2018-01-11T09:52:43Z",
      "side": 1,
      "message": "I\u0027d make this a base::Optional\u003cviz::LocalSurfaceId\u003e.",
      "revId": "853e64012da604f47aa436b7b9ba9654febe283f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d83279bd_380a4438",
        "filename": "content/common/view_messages.h",
        "patchSetId": 2
      },
      "lineNbr": 306,
      "author": {
        "id": 1189229
      },
      "writtenOn": "2018-01-17T08:56:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0e0c57ce_05813eef",
      "revId": "853e64012da604f47aa436b7b9ba9654febe283f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bbc1d266_d26d95dd",
        "filename": "content/renderer/render_widget.cc",
        "patchSetId": 2
      },
      "lineNbr": 2238,
      "author": {
        "id": 1189229
      },
      "writtenOn": "2018-01-11T09:26:01Z",
      "side": 1,
      "message": "At some point, the parent-generated LocalSurfaceId would have been passed to the renderer. I assume this is it, right?",
      "revId": "853e64012da604f47aa436b7b9ba9654febe283f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f96da444_5657fe77",
        "filename": "content/renderer/render_widget.cc",
        "patchSetId": 2
      },
      "lineNbr": 2238,
      "author": {
        "id": 1115911
      },
      "writtenOn": "2018-01-11T09:52:43Z",
      "side": 1,
      "message": "No this isn\u0027t quite right. Do this here:\n\nhttps://cs.chromium.org/chromium/src/content/renderer/render_widget.cc?q\u003dRenderWidget::Resize\u0026sq\u003dpackage:chromium\u0026l\u003d1321\n\nand/or here\n\nhttps://cs.chromium.org/chromium/src/content/renderer/render_widget.cc?q\u003dRenderWidget::Resize\u0026sq\u003dpackage:chromium\u0026l\u003d617\n\nIn either case, you can have a conflict and you might need to reject the new LocalSurfaceId from the parent.",
      "parentUuid": "bbc1d266_d26d95dd",
      "revId": "853e64012da604f47aa436b7b9ba9654febe283f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "68021e23_5f517be4",
        "filename": "content/renderer/render_widget.cc",
        "patchSetId": 2
      },
      "lineNbr": 2238,
      "author": {
        "id": 1221484
      },
      "writtenOn": "2018-01-12T09:03:11Z",
      "side": 1,
      "message": "To clarify, what would lead to a conflict where we would reject the LocalSurfaceId from the parent? If the parent sends the ID with a size which doesn\u0027t match the one we\u0027ve previously requested? Does this happen if we send a child ID to the parent while a new parent ID is already in flight (or vis-versa)? Is there a more sophisticated method of conflict resolution needed (can the parent sometimes win)?",
      "parentUuid": "f96da444_5657fe77",
      "revId": "853e64012da604f47aa436b7b9ba9654febe283f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eb073011_6a2401d6",
        "filename": "content/renderer/render_widget.cc",
        "patchSetId": 2
      },
      "lineNbr": 2238,
      "author": {
        "id": 1189229
      },
      "writtenOn": "2018-01-17T08:56:24Z",
      "side": 1,
      "message": "I\u0027ve moved this to where Fady suggested and added a TODO for the conflict resolution. We\u0027ll need to address it before we can land, so I\u0027ll update the patch title with \"DO NOT LAND\".\n\nEric, you are right about what can cause the conflict. Both sides can start a new-size request before realizing the other side also wanted a resize (which is different).\n\nFady and I talked a little about conflict resolution methods. It is something I wanted to show you in my design doc. The issue at hand here is the live lock. If both sides attempt to accept the other side\u0027s suggestion, before reissuing their own suggestion they can live lock. The general solution to live locks is to give one side preference.\n\nFady and I both have ideas of how we can give one side preference. They are effectively the same with only detail differences. So I think we\u0027re in agreement of what to do.",
      "parentUuid": "68021e23_5f517be4",
      "revId": "853e64012da604f47aa436b7b9ba9654febe283f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}