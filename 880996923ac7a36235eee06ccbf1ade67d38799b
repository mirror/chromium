{
  "comments": [
    {
      "key": {
        "uuid": "deff8f10_8752f006",
        "filename": "content/browser/dom_storage/local_storage_context_mojo.cc",
        "patchSetId": 2
      },
      "lineNbr": 182,
      "author": {
        "id": 1115884
      },
      "writtenOn": "2017-10-17T21:11:34Z",
      "side": 1,
      "message": "Instead of checking specifically for Android, how about using base::SysInfo::IsLowEndDevice()?",
      "revId": "880996923ac7a36235eee06ccbf1ade67d38799b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "56bba5b5_6fbd26ac",
        "filename": "content/browser/dom_storage/local_storage_context_mojo.cc",
        "patchSetId": 2
      },
      "lineNbr": 182,
      "author": {
        "id": 1125359
      },
      "writtenOn": "2017-10-19T01:45:22Z",
      "side": 1,
      "message": "I would like to make change for all Android devices since most of the users only have one renderer process (90% from UMA). This is not really true for other platforms. I have added IsLowEnd check for non-android.",
      "parentUuid": "deff8f10_8752f006",
      "revId": "880996923ac7a36235eee06ccbf1ade67d38799b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f4bf885e_6bb87e8d",
        "filename": "content/browser/dom_storage/local_storage_context_mojo.cc",
        "patchSetId": 2
      },
      "lineNbr": 182,
      "author": {
        "id": 1115884
      },
      "writtenOn": "2017-10-24T18:22:30Z",
      "side": 1,
      "message": "Then how about using content::RenderProcessHost::GetMaxRendererProcessCount()? I\u0027d rather not couple to this to a platform whose characteristics may change, when what we really care about is the characteristics. I\u0027m sure we\u0027ll have other Chrome ports for low end devices that aren\u0027t Android.",
      "parentUuid": "56bba5b5_6fbd26ac",
      "revId": "880996923ac7a36235eee06ccbf1ade67d38799b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f31667f4_c7e8de5a",
        "filename": "content/browser/dom_storage/local_storage_context_mojo.cc",
        "patchSetId": 2
      },
      "lineNbr": 182,
      "author": {
        "id": 1125359
      },
      "writtenOn": "2017-10-25T22:52:57Z",
      "side": 1,
      "message": "I do not understand how GetMaxRendererProcessCount() would help. It always returns 100 for Linux and 20 for Android. How can I use that?\n\nThe change is to clear cache when only one renderer process is using the local storage. When more processes try to use we switch to storing the full cache. This saves memory and affects performance a little (extra loading the database from disk when second process opens the storage).\n\nGiven the metrics on Android the users have only one renderer process 90% of the times. So, this change would work very well on Android since the reload performance is not significant compared to memory usage.\nOn any other desktop platforms we might regress performance due to disk loads since typical user has many renderer processes. If you think this characteristic about Android would change then maybe I can make this behavior a Finch experiment and if it changes in future we can switch to storing cache for Android. I believe that this behavior won\u0027t change and it saves memory for these devices as such.\n\nSince you said we have other low-end devices than Android I made the else part check for low-end devices.\n\nI could also try some more complicated behavior here to store the history of the current user to see if in the past we had too many extra disk loads and use this factor to store values. But, it seems complicated and may not be worth it. If you feel strongly about the behavior change I can give this a try.",
      "parentUuid": "f4bf885e_6bb87e8d",
      "revId": "880996923ac7a36235eee06ccbf1ade67d38799b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "76677d8a_03d54990",
        "filename": "content/browser/dom_storage/local_storage_context_mojo.cc",
        "patchSetId": 2
      },
      "lineNbr": 183,
      "author": {
        "id": 1110029
      },
      "writtenOn": "2017-10-17T20:09:04Z",
      "side": 1,
      "message": "nit: const would be more consistent with the surrounding code",
      "revId": "880996923ac7a36235eee06ccbf1ade67d38799b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "399b848d_54946993",
        "filename": "content/browser/dom_storage/local_storage_context_mojo.cc",
        "patchSetId": 2
      },
      "lineNbr": 183,
      "author": {
        "id": 1125359
      },
      "writtenOn": "2017-10-19T01:45:22Z",
      "side": 1,
      "message": "not const anymore..",
      "parentUuid": "76677d8a_03d54990",
      "revId": "880996923ac7a36235eee06ccbf1ade67d38799b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "52341ffd_f3450a38",
        "filename": "content/browser/dom_storage/local_storage_context_mojo_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 135,
      "author": {
        "id": 1115884
      },
      "writtenOn": "2017-10-17T21:11:34Z",
      "side": 1,
      "message": "EXPECT_TRUE. https://github.com/google/googletest/blob/master/googletest/docs/Primer.md#assertions",
      "revId": "880996923ac7a36235eee06ccbf1ade67d38799b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5145c920_79fc173a",
        "filename": "content/browser/dom_storage/local_storage_context_mojo_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 135,
      "author": {
        "id": 1125359
      },
      "writtenOn": "2017-10-19T01:45:22Z",
      "side": 1,
      "message": "Done, thanks!",
      "parentUuid": "52341ffd_f3450a38",
      "revId": "880996923ac7a36235eee06ccbf1ade67d38799b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "62bbaac8_23d0c155",
        "filename": "content/browser/dom_storage/local_storage_context_mojo_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 232,
      "author": {
        "id": 1110029
      },
      "writtenOn": "2017-10-17T20:09:04Z",
      "side": 1,
      "message": "nit: I\u0027d prefer just returning the value and having the actual expectations in the code calling this method. That way when an expectation fails it\u0027s clearer which get actually failed.",
      "revId": "880996923ac7a36235eee06ccbf1ade67d38799b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fa4a093a_095b01e6",
        "filename": "content/browser/dom_storage/local_storage_context_mojo_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 232,
      "author": {
        "id": 1125359
      },
      "writtenOn": "2017-10-19T01:45:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "62bbaac8_23d0c155",
      "revId": "880996923ac7a36235eee06ccbf1ade67d38799b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "152b29f3_bb0a9e32",
        "filename": "content/browser/dom_storage/local_storage_context_mojo_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 238,
      "author": {
        "id": 1110029
      },
      "writtenOn": "2017-10-17T20:09:04Z",
      "side": 1,
      "message": "nit: not really any reason to call this, since it\u0027s about to go out of scope anyway (but if you call it, at least be consistent and also reset dummy_wrapper)",
      "revId": "880996923ac7a36235eee06ccbf1ade67d38799b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3b00a186_f82c8911",
        "filename": "content/browser/dom_storage/local_storage_context_mojo_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 238,
      "author": {
        "id": 1125359
      },
      "writtenOn": "2017-10-19T01:45:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "152b29f3_bb0a9e32",
      "revId": "880996923ac7a36235eee06ccbf1ade67d38799b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0fdcfb8b_f48b2c55",
        "filename": "content/browser/dom_storage/local_storage_context_mojo_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 956,
      "author": {
        "id": 1110029
      },
      "writtenOn": "2017-10-17T20:09:04Z",
      "side": 1,
      "message": "not sure why you need this callback? GetAll is sync, so you should just be able to call the sync overload directly to get it to fill data. In which case you probably don\u0027t need to wait for GetAllCallback to get called anymore either.",
      "revId": "880996923ac7a36235eee06ccbf1ade67d38799b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "21185dda_ffcaf511",
        "filename": "content/browser/dom_storage/local_storage_context_mojo_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 956,
      "author": {
        "id": 1125359
      },
      "writtenOn": "2017-10-19T01:45:22Z",
      "side": 1,
      "message": "If I try to use the GetAll sync api, it hangs at mojo::SyncHandleRegistry::Wait() and never calls WrapperImpl::GetAll(). I assumed sync api is not supported in service_manager::test::ServiceTest. Do you know how to fix this? I did:\n\n    std::vector\u003ccontent::mojom::KeyValuePtr\u003e data;\n    leveldb::mojom::DatabaseError status;\n    wrapper-\u003eGetAll(GetAllCallback::CreateAndBind(base::Closure()),\n                    \u0026status, \u0026data);",
      "parentUuid": "0fdcfb8b_f48b2c55",
      "revId": "880996923ac7a36235eee06ccbf1ade67d38799b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fd0fd730_b8ff3a43",
        "filename": "content/browser/dom_storage/local_storage_context_mojo_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 956,
      "author": {
        "id": 1110029
      },
      "writtenOn": "2017-10-31T22:33:14Z",
      "side": 1,
      "message": "The problem probably is that if the call is made from the same thread that is supposed to handle the call it\u0027ll never actually handle the call, since the thread will be blocked. So you\u0027d have to either create the LocalStoragecontextMojo instance on a different thread, or change this method to post a task to a different thread to call GetAll, and then wait for a reply, but at that point there isn\u0027t really any benefit anymore to using the sync GetAll method, so yeah, might as well keep the code as you have it now.",
      "parentUuid": "21185dda_ffcaf511",
      "revId": "880996923ac7a36235eee06ccbf1ade67d38799b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d3913a6d_fc927e8f",
        "filename": "content/browser/dom_storage/local_storage_context_mojo_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 968,
      "author": {
        "id": 1110029
      },
      "writtenOn": "2017-10-17T20:09:04Z",
      "side": 1,
      "message": "nit: std::move()",
      "revId": "880996923ac7a36235eee06ccbf1ade67d38799b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9ebddbbf_a05b7998",
        "filename": "content/browser/dom_storage/local_storage_context_mojo_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 968,
      "author": {
        "id": 1125359
      },
      "writtenOn": "2017-10-19T01:45:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d3913a6d_fc927e8f",
      "revId": "880996923ac7a36235eee06ccbf1ade67d38799b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "67897db4_a446fc73",
        "filename": "content/browser/dom_storage/local_storage_context_mojo_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 1389,
      "author": {
        "id": 1110029
      },
      "writtenOn": "2017-10-17T20:09:04Z",
      "side": 1,
      "message": "this comment definitely doesn\u0027t match the implementation of the test anymore.",
      "revId": "880996923ac7a36235eee06ccbf1ade67d38799b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cb0a6804_88954c99",
        "filename": "content/browser/dom_storage/local_storage_context_mojo_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 1389,
      "author": {
        "id": 1125359
      },
      "writtenOn": "2017-10-19T01:45:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "67897db4_a446fc73",
      "revId": "880996923ac7a36235eee06ccbf1ade67d38799b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0776fd6b_965c9727",
        "filename": "content/browser/leveldb_wrapper_impl.cc",
        "patchSetId": 2
      },
      "lineNbr": 194,
      "author": {
        "id": 1110029
      },
      "writtenOn": "2017-10-17T20:09:04Z",
      "side": 1,
      "message": "return after ReportBadMessage?",
      "revId": "880996923ac7a36235eee06ccbf1ade67d38799b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8f39fc5c_05a5955d",
        "filename": "content/browser/leveldb_wrapper_impl.cc",
        "patchSetId": 2
      },
      "lineNbr": 194,
      "author": {
        "id": 1125359
      },
      "writtenOn": "2017-10-19T01:45:22Z",
      "side": 1,
      "message": "I thought we should continue inserting new item even if the old value was wrong. fixed.",
      "parentUuid": "0776fd6b_965c9727",
      "revId": "880996923ac7a36235eee06ccbf1ade67d38799b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fd3a5970_38d81af4",
        "filename": "content/browser/leveldb_wrapper_impl.cc",
        "patchSetId": 2
      },
      "lineNbr": 232,
      "author": {
        "id": 1110029
      },
      "writtenOn": "2017-10-17T20:09:04Z",
      "side": 1,
      "message": "nit: I\u0027d reword this to something like \"No need to store values in |commit_batch_| if values are already available in |keys_values_map_|, since CommitChanges() will take values from there.\"",
      "revId": "880996923ac7a36235eee06ccbf1ade67d38799b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1d345769_c917bcab",
        "filename": "content/browser/leveldb_wrapper_impl.cc",
        "patchSetId": 2
      },
      "lineNbr": 232,
      "author": {
        "id": 1125359
      },
      "writtenOn": "2017-10-19T01:45:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fd3a5970_38d81af4",
      "revId": "880996923ac7a36235eee06ccbf1ade67d38799b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "30d579ae_8338da7a",
        "filename": "content/browser/leveldb_wrapper_impl.cc",
        "patchSetId": 2
      },
      "lineNbr": 236,
      "author": {
        "id": 1110029
      },
      "writtenOn": "2017-10-17T20:09:04Z",
      "side": 1,
      "message": "nit: I think I\u0027d find it clearer if this explicitly assigned nullopt",
      "revId": "880996923ac7a36235eee06ccbf1ade67d38799b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "94e8fbdb_d3120c62",
        "filename": "content/browser/leveldb_wrapper_impl.cc",
        "patchSetId": 2
      },
      "lineNbr": 236,
      "author": {
        "id": 1125359
      },
      "writtenOn": "2017-10-19T01:45:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "30d579ae_8338da7a",
      "revId": "880996923ac7a36235eee06ccbf1ade67d38799b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "26e8fb9a_423b062c",
        "filename": "content/browser/leveldb_wrapper_impl.cc",
        "patchSetId": 2
      },
      "lineNbr": 281,
      "author": {
        "id": 1110029
      },
      "writtenOn": "2017-10-17T20:09:04Z",
      "side": 1,
      "message": "return after ReportBadMessage?",
      "revId": "880996923ac7a36235eee06ccbf1ade67d38799b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "05249687_c1e7ee20",
        "filename": "content/browser/leveldb_wrapper_impl.cc",
        "patchSetId": 2
      },
      "lineNbr": 281,
      "author": {
        "id": 1125359
      },
      "writtenOn": "2017-10-19T01:45:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "26e8fb9a_423b062c",
      "revId": "880996923ac7a36235eee06ccbf1ade67d38799b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "22bad7e5_7c8071e0",
        "filename": "content/browser/leveldb_wrapper_impl.cc",
        "patchSetId": 2
      },
      "lineNbr": 301,
      "author": {
        "id": 1110029
      },
      "writtenOn": "2017-10-17T20:09:04Z",
      "side": 1,
      "message": "nit: here too I think the code is clearer if it is explicit that this actually modified something, probably by assigning nullopt to the key.",
      "revId": "880996923ac7a36235eee06ccbf1ade67d38799b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "34f4e502_65ff2a79",
        "filename": "content/browser/leveldb_wrapper_impl.cc",
        "patchSetId": 2
      },
      "lineNbr": 301,
      "author": {
        "id": 1125359
      },
      "writtenOn": "2017-10-19T01:45:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "22bad7e5_7c8071e0",
      "revId": "880996923ac7a36235eee06ccbf1ade67d38799b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1224e5a4_ed66bcc6",
        "filename": "content/browser/leveldb_wrapper_impl.cc",
        "patchSetId": 2
      },
      "lineNbr": 348,
      "author": {
        "id": 1110029
      },
      "writtenOn": "2017-10-17T20:09:04Z",
      "side": 1,
      "message": "no NOTREACHED, just calling the callback with false is enough (or reporting a bad message). Although if that really is the API we\u0027re going for we should just get rid of Get entirely.",
      "revId": "880996923ac7a36235eee06ccbf1ade67d38799b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "664731ab_7d6f0163",
        "filename": "content/browser/leveldb_wrapper_impl.cc",
        "patchSetId": 2
      },
      "lineNbr": 348,
      "author": {
        "id": 1125359
      },
      "writtenOn": "2017-10-19T01:45:22Z",
      "side": 1,
      "message": "I added a TODO to remove Get(). I will remove once Chris also agrees on the api.",
      "parentUuid": "1224e5a4_ed66bcc6",
      "revId": "880996923ac7a36235eee06ccbf1ade67d38799b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "68cb21f1_d2868695",
        "filename": "content/browser/leveldb_wrapper_impl.cc",
        "patchSetId": 2
      },
      "lineNbr": 400,
      "author": {
        "id": 1110029
      },
      "writtenOn": "2017-10-17T20:09:04Z",
      "side": 1,
      "message": "what would happen if this unconditionally calls UnloadMapIfDesired? From the name of that method it sounds like it should only unload the map if it is actually desired, but from this code is seems like it might sometimes unload the map even when it isn\u0027t desired?\n(in other words, either the name of UnloadMapIfDesired is wrong, or this check isn\u0027t needed)",
      "revId": "880996923ac7a36235eee06ccbf1ade67d38799b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e5e0af18_3fb1c37f",
        "filename": "content/browser/leveldb_wrapper_impl.cc",
        "patchSetId": 2
      },
      "lineNbr": 400,
      "author": {
        "id": 1125359
      },
      "writtenOn": "2017-10-19T01:45:22Z",
      "side": 1,
      "message": "renamed to UnloadMapIfPossible. I am not calling unload if we can still use keys_values_map, unless we need to purge. This is in anticipation that some other process can die and respan quickly and we don\u0027t cause reloads (in case in future we tried to purge when process dies, which is not currently the case). This function still supports this case So, the comment and check.",
      "parentUuid": "68cb21f1_d2868695",
      "revId": "880996923ac7a36235eee06ccbf1ade67d38799b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bbe27c6f_fb0946ca",
        "filename": "content/browser/leveldb_wrapper_impl.cc",
        "patchSetId": 2
      },
      "lineNbr": 465,
      "author": {
        "id": 1110029
      },
      "writtenOn": "2017-10-17T20:09:04Z",
      "side": 1,
      "message": "nit (and not your change), but I wonder if we could std::move from it-\u003evalue into the keys_values_map_ here? Of course we\u0027d have to make sure the next line still somehow gets the correct value size, but otherwise that seems like it might be a nice (small) performance improvement?",
      "revId": "880996923ac7a36235eee06ccbf1ade67d38799b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e53a9963_6a189043",
        "filename": "content/browser/leveldb_wrapper_impl.cc",
        "patchSetId": 2
      },
      "lineNbr": 465,
      "author": {
        "id": 1125359
      },
      "writtenOn": "2017-10-19T01:45:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "bbe27c6f_fb0946ca",
      "revId": "880996923ac7a36235eee06ccbf1ade67d38799b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0df9bc57_f78d3063",
        "filename": "content/browser/leveldb_wrapper_impl.cc",
        "patchSetId": 2
      },
      "lineNbr": 490,
      "author": {
        "id": 1110029
      },
      "writtenOn": "2017-10-17T20:09:04Z",
      "side": 1,
      "message": "nit: here too I think the code is cleaner if it explicitly assigns something to changed_values, rather than relying on the implicit insertion that is part of operator[]",
      "revId": "880996923ac7a36235eee06ccbf1ade67d38799b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dc3fb2ff_a7d06d42",
        "filename": "content/browser/leveldb_wrapper_impl.cc",
        "patchSetId": 2
      },
      "lineNbr": 490,
      "author": {
        "id": 1125359
      },
      "writtenOn": "2017-10-19T01:45:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0df9bc57_f78d3063",
      "revId": "880996923ac7a36235eee06ccbf1ade67d38799b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "09cbd5aa_869447a6",
        "filename": "content/browser/leveldb_wrapper_impl.cc",
        "patchSetId": 2
      },
      "lineNbr": 530,
      "author": {
        "id": 1110029
      },
      "writtenOn": "2017-10-17T20:09:04Z",
      "side": 1,
      "message": "here too, either UnloadMapIfDesired is named badly, or the if condition isn\u0027t really needed.",
      "revId": "880996923ac7a36235eee06ccbf1ade67d38799b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3bc55f6e_97e50a43",
        "filename": "content/browser/leveldb_wrapper_impl.cc",
        "patchSetId": 2
      },
      "lineNbr": 530,
      "author": {
        "id": 1125359
      },
      "writtenOn": "2017-10-19T01:45:22Z",
      "side": 1,
      "message": "renamed the function. I feel the condition here makes the code more readable.",
      "parentUuid": "09cbd5aa_869447a6",
      "revId": "880996923ac7a36235eee06ccbf1ade67d38799b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "940a8c78_a17c38b4",
        "filename": "content/browser/leveldb_wrapper_impl.cc",
        "patchSetId": 2
      },
      "lineNbr": 603,
      "author": {
        "id": 1110029
      },
      "writtenOn": "2017-10-17T20:09:04Z",
      "side": 1,
      "message": "nit: make this a non-const iterator and you should somehow be able to move the value from the commit batch into the mojom structs, avoiding a copy",
      "revId": "880996923ac7a36235eee06ccbf1ade67d38799b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fd7f0e03_0dde31a1",
        "filename": "content/browser/leveldb_wrapper_impl.cc",
        "patchSetId": 2
      },
      "lineNbr": 603,
      "author": {
        "id": 1125359
      },
      "writtenOn": "2017-10-19T01:45:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "940a8c78_a17c38b4",
      "revId": "880996923ac7a36235eee06ccbf1ade67d38799b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0614bbe6_2e68a586",
        "filename": "content/browser/leveldb_wrapper_impl.cc",
        "patchSetId": 2
      },
      "lineNbr": 694,
      "author": {
        "id": 1110029
      },
      "writtenOn": "2017-10-17T20:09:04Z",
      "side": 1,
      "message": "nit: maybe add a DCHECK that at most one of keys_only_map_ and keys_values_map_ is non-null?",
      "revId": "880996923ac7a36235eee06ccbf1ade67d38799b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "21d93e56_9c86e25b",
        "filename": "content/browser/leveldb_wrapper_impl.cc",
        "patchSetId": 2
      },
      "lineNbr": 694,
      "author": {
        "id": 1125359
      },
      "writtenOn": "2017-10-19T01:45:22Z",
      "side": 1,
      "message": "no both can be null when load is not done, or unload is done, or purge was donw.",
      "parentUuid": "0614bbe6_2e68a586",
      "revId": "880996923ac7a36235eee06ccbf1ade67d38799b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c9b155f8_0f99b70d",
        "filename": "content/browser/leveldb_wrapper_impl.cc",
        "patchSetId": 2
      },
      "lineNbr": 694,
      "author": {
        "id": 1110029
      },
      "writtenOn": "2017-10-31T22:33:14Z",
      "side": 1,
      "message": "both can be null, but both can\u0027t be non-null, right? (if keys_only_map_ is set, keys_values_map_ has to be null and vice versa)",
      "parentUuid": "21d93e56_9c86e25b",
      "revId": "880996923ac7a36235eee06ccbf1ade67d38799b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f64d0a5a_0c87d5bc",
        "filename": "content/browser/leveldb_wrapper_impl.h",
        "patchSetId": 2
      },
      "lineNbr": 70,
      "author": {
        "id": 1110029
      },
      "writtenOn": "2017-10-17T20:09:04Z",
      "side": 1,
      "message": "Could you change the bool to some kind of enum? Or maybe even replace all of max_size, default_commit_delay, max_bytes_per_hour, max_commits_per_hour and cache_only_keys_when_possible with an Options struct (per the Function Argument Comments section of https://google.github.io/styleguide/cppguide.html#Implementation_Comments)",
      "revId": "880996923ac7a36235eee06ccbf1ade67d38799b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1a587f2b_7b3920d8",
        "filename": "content/browser/leveldb_wrapper_impl.h",
        "patchSetId": 2
      },
      "lineNbr": 70,
      "author": {
        "id": 1125359
      },
      "writtenOn": "2017-10-19T01:45:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f64d0a5a_0c87d5bc",
      "revId": "880996923ac7a36235eee06ccbf1ade67d38799b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b15dee49_9a5d95a2",
        "filename": "content/browser/leveldb_wrapper_impl.h",
        "patchSetId": 2
      },
      "lineNbr": 155,
      "author": {
        "id": 1110029
      },
      "writtenOn": "2017-10-17T20:09:04Z",
      "side": 1,
      "message": "I think I\u0027d prefer to not have order be important and instead just change IsMapReloadNeeded to state \u003d\u003d UNLOADED || (state \u003d\u003d KEYS_ONLY \u0026\u0026 desired_state \u003d\u003d KEYS_AND_VALUES) or something like that that makes it explicit what we\u0027re checking for. Also change the enum to an enum class.",
      "revId": "880996923ac7a36235eee06ccbf1ade67d38799b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a993805c_c384c827",
        "filename": "content/browser/leveldb_wrapper_impl.h",
        "patchSetId": 2
      },
      "lineNbr": 155,
      "author": {
        "id": 1125359
      },
      "writtenOn": "2017-10-19T01:45:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b15dee49_9a5d95a2",
      "revId": "880996923ac7a36235eee06ccbf1ade67d38799b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c286dcf8_5e895a6e",
        "filename": "content/browser/leveldb_wrapper_impl_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 155,
      "author": {
        "id": 1110029
      },
      "writtenOn": "2017-10-17T20:09:04Z",
      "side": 1,
      "message": "not quite sure why we need this method? GetAll is already sync after all. And the one usage of this method doesn\u0027t really care if the GetAllCallback is called with the correct value or not (or not called at all), it just wants the data.",
      "revId": "880996923ac7a36235eee06ccbf1ade67d38799b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f7bdf34a_97679bdd",
        "filename": "content/browser/leveldb_wrapper_impl_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 155,
      "author": {
        "id": 1125359
      },
      "writtenOn": "2017-10-19T01:45:22Z",
      "side": 1,
      "message": "Oh I never realized there is mojo magic that makes GetAll sync. removed",
      "parentUuid": "c286dcf8_5e895a6e",
      "revId": "880996923ac7a36235eee06ccbf1ade67d38799b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "df4c2d3f_49900ae1",
        "filename": "content/browser/leveldb_wrapper_impl_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 634,
      "author": {
        "id": 1110029
      },
      "writtenOn": "2017-10-17T20:09:04Z",
      "side": 1,
      "message": "nit: *synchronously",
      "range": {
        "startLine": 634,
        "startChar": 31,
        "endLine": 634,
        "endChar": 44
      },
      "revId": "880996923ac7a36235eee06ccbf1ade67d38799b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "32e0f613_3bd3d6d6",
        "filename": "content/browser/leveldb_wrapper_impl_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 634,
      "author": {
        "id": 1110029
      },
      "writtenOn": "2017-10-17T20:09:04Z",
      "side": 1,
      "message": "why should they happen synchronously? And your assertions below don\u0027t actually check that they are happening synchronously. As in you have no EXPECT_ after calling the methods to make sure the callbacks were actually called.",
      "revId": "880996923ac7a36235eee06ccbf1ade67d38799b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1576b64e_09050e15",
        "filename": "content/browser/leveldb_wrapper_impl_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 634,
      "author": {
        "id": 1125359
      },
      "writtenOn": "2017-10-19T01:45:22Z",
      "side": 1,
      "message": "The test would actually crash if they are not run synchronously since the test destroys the task runner. I am trying to check if no reload happens when trying to Put() since there is no database. It need not happen synchronously according to the documentation, but this just tests implementation detail. It\u0027s good to keep the behavior of synchronous replies on these calls instead of unnecessary post tasks.",
      "parentUuid": "32e0f613_3bd3d6d6",
      "revId": "880996923ac7a36235eee06ccbf1ade67d38799b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "93a127d8_093cd2fb",
        "filename": "content/browser/leveldb_wrapper_impl_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 634,
      "author": {
        "id": 1125359
      },
      "writtenOn": "2017-10-19T01:45:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "df4c2d3f_49900ae1",
      "range": {
        "startLine": 634,
        "startChar": 31,
        "endLine": 634,
        "endChar": 44
      },
      "revId": "880996923ac7a36235eee06ccbf1ade67d38799b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4ed3103f_bf007e97",
        "filename": "content/browser/leveldb_wrapper_impl_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 634,
      "author": {
        "id": 1110029
      },
      "writtenOn": "2017-10-31T22:33:14Z",
      "side": 1,
      "message": "I generally dislike tests that rely on implementation details for their tests (i.e. the fact that put and get call they callbacks sync).\n\nAlso not sure what would cause a crash if they aren\u0027t run sync? I thought task runners are flushed at the end of a test? Either way, relying on implementation details of other parts of the system (and possibly undefined behavior?) to catch problems in the implementation seems pretty bad. So if you\u0027re going to write this test to rely on callbacks being called sync at least add explicit assertions that the callbacks have in fact been called. Don\u0027t rely on implementation details without asserting that those details actually are true.",
      "parentUuid": "1576b64e_09050e15",
      "revId": "880996923ac7a36235eee06ccbf1ade67d38799b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2c6111c8_1bfe5a95",
        "filename": "content/browser/leveldb_wrapper_impl_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 648,
      "author": {
        "id": 1110029
      },
      "writtenOn": "2017-10-17T20:09:04Z",
      "side": 1,
      "message": "this is a very long test, that seems to test all kinds of things, but I\u0027m not entirely sure what all. Is it possible to split it up into separate tests, and preferably add some comments about what it is testing/verifying?",
      "revId": "880996923ac7a36235eee06ccbf1ade67d38799b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7f3e35b3_97934ab6",
        "filename": "content/browser/leveldb_wrapper_impl_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 648,
      "author": {
        "id": 1125359
      },
      "writtenOn": "2017-10-19T01:45:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2c6111c8_1bfe5a95",
      "revId": "880996923ac7a36235eee06ccbf1ade67d38799b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "39a71a58_abead58b",
        "filename": "content/common/leveldb_wrapper.mojom",
        "patchSetId": 2
      },
      "lineNbr": 75,
      "author": {
        "id": 1110029
      },
      "writtenOn": "2017-10-17T20:09:04Z",
      "side": 1,
      "message": "I\u0027m not sure what I make of change Get to be essentially useless. Especially combined with the comment below for GetAll (\"Only used with small databases\") this doesn\u0027t really make sense anymore.\n\nMaybe we should give up on this being a generic key-value store interface (but then I\u0027d be in favor of renaming it to something like DOMStorageArea) or we should figure out a way to keep the interface sane for a generic key-value store while still providing the optimizations we want for DOMStorage (or another option would be to make the value-caching it does explicit in the interface, get rid of the Get method entirely, etc...). Adding cmumford@ since he has in the past expressed some thoughts about this interface as a generic key value store interface, and as such might have some opinions here too....",
      "revId": "880996923ac7a36235eee06ccbf1ade67d38799b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f3a90848_671b5300",
        "filename": "content/common/leveldb_wrapper.mojom",
        "patchSetId": 2
      },
      "lineNbr": 75,
      "author": {
        "id": 1125359
      },
      "writtenOn": "2017-10-19T01:45:22Z",
      "side": 1,
      "message": "I did not understand why GetAll only for small databases. The local storage already can be big and we still use GetAll. I added a TODO here for now. Waiting for Chris\u0027 reply",
      "parentUuid": "39a71a58_abead58b",
      "revId": "880996923ac7a36235eee06ccbf1ade67d38799b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}