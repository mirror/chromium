{
  "comments": [
    {
      "key": {
        "uuid": "edd0d652_7286e4e3",
        "filename": "content/browser/renderer_host/media/audio_output_delegate_impl.cc",
        "patchSetId": 13
      },
      "lineNbr": 137,
      "author": {
        "id": 1153409
      },
      "writtenOn": "2017-11-27T10:28:18Z",
      "side": 1,
      "message": "According to Max, we should DCHECK it in the constructor and later rely on it not being nullptr",
      "revId": "903b7acd549b1ebddd3e5c5b2cdadce3206832db",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "40162f22_a775da94",
        "filename": "content/browser/renderer_host/media/audio_output_delegate_impl.cc",
        "patchSetId": 13
      },
      "lineNbr": 137,
      "author": {
        "id": 1143639
      },
      "writtenOn": "2017-11-27T16:37:39Z",
      "side": 1,
      "message": "Added DCHECK assuming |observer_| must be bound at this point, but keeping the |observer_| checks since |observer_| could become unbound later on.",
      "parentUuid": "edd0d652_7286e4e3",
      "revId": "903b7acd549b1ebddd3e5c5b2cdadce3206832db",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1a0c2c47_e7747901",
        "filename": "content/browser/renderer_host/media/audio_output_delegate_impl.cc",
        "patchSetId": 13
      },
      "lineNbr": 137,
      "author": {
        "id": 1153409
      },
      "writtenOn": "2017-11-27T17:53:02Z",
      "side": 1,
      "message": "Generally speaking - yes. But do we have a usecase for it, or can we make it a part of the contract that observer remains valid throughout AudioOutputDelegate lifetime and just add DCKECKs? As far as I see, MojoAudioOutputStreamProvider::Acquire() will delete AudioOutputDelegate when unbinding |observer_| anyways.\n\nIf you prefer to keep a possibility for |observer_| being unbound on-the-flight - could you add a comment for that (in the header file maybe)? And a unit test for when |observer_| gets unbound is critical: we should not crash in this case. (If there is one and I missed it - please add a comment to it explaining what we are testing.)",
      "parentUuid": "40162f22_a775da94",
      "revId": "903b7acd549b1ebddd3e5c5b2cdadce3206832db",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7e769fe2_25eb46c1",
        "filename": "content/browser/renderer_host/media/audio_output_delegate_impl.cc",
        "patchSetId": 13
      },
      "lineNbr": 137,
      "author": {
        "id": 1143639
      },
      "writtenOn": "2017-11-27T19:08:38Z",
      "side": 1,
      "message": "The unit test is already there. You actually asked for it in a previous patchset and made comments on it in this patchset.",
      "parentUuid": "1a0c2c47_e7747901",
      "revId": "903b7acd549b1ebddd3e5c5b2cdadce3206832db",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e5a11100_e886fce1",
        "filename": "content/browser/renderer_host/media/audio_output_delegate_impl_unittest.cc",
        "patchSetId": 13
      },
      "lineNbr": 208,
      "author": {
        "id": 1153409
      },
      "writtenOn": "2017-11-27T17:53:02Z",
      "side": 1,
      "message": "Should we expect them once and in sequence?",
      "revId": "903b7acd549b1ebddd3e5c5b2cdadce3206832db",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "89c5d85f_f4fcf6e0",
        "filename": "content/browser/renderer_host/media/audio_output_delegate_impl_unittest.cc",
        "patchSetId": 13
      },
      "lineNbr": 208,
      "author": {
        "id": 1143639
      },
      "writtenOn": "2017-11-27T19:08:38Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e5a11100_e886fce1",
      "revId": "903b7acd549b1ebddd3e5c5b2cdadce3206832db",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e3cdc15d_ff6904fe",
        "filename": "content/browser/renderer_host/media/audio_output_delegate_impl_unittest.cc",
        "patchSetId": 13
      },
      "lineNbr": 278,
      "author": {
        "id": 1153409
      },
      "writtenOn": "2017-11-27T17:53:02Z",
      "side": 1,
      "message": "Can we set InSequence expectations here as well?",
      "revId": "903b7acd549b1ebddd3e5c5b2cdadce3206832db",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1d0bd85f_6dcefc3f",
        "filename": "content/browser/renderer_host/media/audio_output_delegate_impl_unittest.cc",
        "patchSetId": 13
      },
      "lineNbr": 278,
      "author": {
        "id": 1143639
      },
      "writtenOn": "2017-11-27T19:08:38Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e3cdc15d_ff6904fe",
      "revId": "903b7acd549b1ebddd3e5c5b2cdadce3206832db",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "65d83c9c_2f3c658a",
        "filename": "content/browser/renderer_host/media/audio_output_delegate_impl_unittest.cc",
        "patchSetId": 13
      },
      "lineNbr": 314,
      "author": {
        "id": 1153409
      },
      "writtenOn": "2017-11-27T17:53:02Z",
      "side": 1,
      "message": "Same here and in other places like that",
      "revId": "903b7acd549b1ebddd3e5c5b2cdadce3206832db",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0909081c_f02b3b85",
        "filename": "content/browser/renderer_host/media/audio_output_delegate_impl_unittest.cc",
        "patchSetId": 13
      },
      "lineNbr": 314,
      "author": {
        "id": 1143639
      },
      "writtenOn": "2017-11-27T19:08:38Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "65d83c9c_2f3c658a",
      "revId": "903b7acd549b1ebddd3e5c5b2cdadce3206832db",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0b0f515d_c2d82546",
        "filename": "content/browser/renderer_host/media/audio_output_stream_observer_impl.cc",
        "patchSetId": 13
      },
      "lineNbr": 21,
      "author": {
        "id": 1153409
      },
      "writtenOn": "2017-11-27T10:28:18Z",
      "side": 1,
      "message": "It lives in a strong binding and will be deleted on connection error. So should we track \"stream started\" state here and send StopMonitoringStream() in the destructor if StartMonitoringStream has been sent previously?\n- That is instead of calling DidStopPlaying in AudioOutputDelegateImpl destructor.",
      "revId": "903b7acd549b1ebddd3e5c5b2cdadce3206832db",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4a657f1b_57fc173e",
        "filename": "content/browser/renderer_host/media/audio_output_stream_observer_impl.cc",
        "patchSetId": 13
      },
      "lineNbr": 21,
      "author": {
        "id": 1143639
      },
      "writtenOn": "2017-11-27T16:37:39Z",
      "side": 1,
      "message": "Done. Removed the call to DidStopPlaying from MAOSP\u0027s destructor.",
      "parentUuid": "0b0f515d_c2d82546",
      "revId": "903b7acd549b1ebddd3e5c5b2cdadce3206832db",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}