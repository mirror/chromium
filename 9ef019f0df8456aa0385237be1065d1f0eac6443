{
  "comments": [
    {
      "key": {
        "uuid": "12dc27b3_fb4ecae1",
        "filename": "base/allocator/partition_allocator/partition_alloc.h",
        "patchSetId": 1
      },
      "lineNbr": 562,
      "author": {
        "id": 1001040
      },
      "writtenOn": "2017-12-04T19:52:01Z",
      "side": 1,
      "message": "a â†’ are",
      "revId": "9ef019f0df8456aa0385237be1065d1f0eac6443",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7cff7dd8_90f5ac6a",
        "filename": "base/allocator/partition_allocator/partition_alloc.h",
        "patchSetId": 1
      },
      "lineNbr": 563,
      "author": {
        "id": 1001040
      },
      "writtenOn": "2017-12-04T19:52:01Z",
      "side": 1,
      "message": "\"prevents the allocator from handing out...\"",
      "revId": "9ef019f0df8456aa0385237be1065d1f0eac6443",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7c1bed7f_8c43367e",
        "filename": "base/allocator/partition_allocator/partition_alloc.h",
        "patchSetId": 1
      },
      "lineNbr": 566,
      "author": {
        "id": 1000046
      },
      "writtenOn": "2017-12-04T19:16:08Z",
      "side": 1,
      "message": "masked -\u003e offset?",
      "range": {
        "startLine": 566,
        "startChar": 2,
        "endLine": 566,
        "endChar": 11
      },
      "revId": "9ef019f0df8456aa0385237be1065d1f0eac6443",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ada5737c_a20a23e0",
        "filename": "base/allocator/partition_allocator/partition_alloc.h",
        "patchSetId": 1
      },
      "lineNbr": 575,
      "author": {
        "id": 1135824
      },
      "writtenOn": "2017-12-04T13:59:08Z",
      "side": 1,
      "message": "Not sure we want to keep this or not - partial pointer overwrite is still potentially an issue with the offset-only approach, although much less severe?",
      "range": {
        "startLine": 568,
        "startChar": 0,
        "endLine": 575,
        "endChar": 69
      },
      "revId": "9ef019f0df8456aa0385237be1065d1f0eac6443",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a9bebd9d_5b88b966",
        "filename": "base/allocator/partition_allocator/partition_alloc.h",
        "patchSetId": 1
      },
      "lineNbr": 575,
      "author": {
        "id": 1000046
      },
      "writtenOn": "2017-12-04T19:16:08Z",
      "side": 1,
      "message": "Yeah...I was dubious about this as well.  I think the right thing here is to replace this masking with some sort of cookie as suggested by the rickyz/jschuh/palmer IRC conversation.",
      "parentUuid": "ada5737c_a20a23e0",
      "range": {
        "startLine": 568,
        "startChar": 0,
        "endLine": 575,
        "endChar": 69
      },
      "revId": "9ef019f0df8456aa0385237be1065d1f0eac6443",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "052867c1_f86a164a",
        "filename": "base/allocator/partition_allocator/partition_alloc.h",
        "patchSetId": 1
      },
      "lineNbr": 577,
      "author": {
        "id": 1000046
      },
      "writtenOn": "2017-12-04T19:16:08Z",
      "side": 1,
      "message": "Use \n  return ~offset;\n\nhere instead of a local variable?",
      "revId": "9ef019f0df8456aa0385237be1065d1f0eac6443",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3385d90d_63ec960b",
        "filename": "base/allocator/partition_allocator/partition_alloc.h",
        "patchSetId": 1
      },
      "lineNbr": 588,
      "author": {
        "id": 1000046
      },
      "writtenOn": "2017-12-04T19:16:08Z",
      "side": 1,
      "message": "Call this masked_offset?",
      "range": {
        "startLine": 588,
        "startChar": 12,
        "endLine": 588,
        "endChar": 18
      },
      "revId": "9ef019f0df8456aa0385237be1065d1f0eac6443",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "549d097f_fb58f4af",
        "filename": "base/allocator/partition_allocator/partition_alloc.h",
        "patchSetId": 1
      },
      "lineNbr": 592,
      "author": {
        "id": 1000046
      },
      "writtenOn": "2017-12-04T19:16:08Z",
      "side": 1,
      "message": "So this does add a branch?  I assume this should be UNLIKELY()?  Or do we not know?",
      "range": {
        "startLine": 592,
        "startChar": 12,
        "endLine": 592,
        "endChar": 13
      },
      "revId": "9ef019f0df8456aa0385237be1065d1f0eac6443",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "565aeaa8_4ced0fcd",
        "filename": "base/allocator/partition_allocator/partition_alloc.h",
        "patchSetId": 1
      },
      "lineNbr": 754,
      "author": {
        "id": 1000046
      },
      "writtenOn": "2017-12-04T19:16:08Z",
      "side": 1,
      "message": "We\u0027re doing a conditional on the masked value...Won\u0027t this be incorrect on big endian?",
      "revId": "9ef019f0df8456aa0385237be1065d1f0eac6443",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "19c6d9f3_a7fd4fc3",
        "filename": "base/allocator/partition_allocator/partition_alloc.h",
        "patchSetId": 1
      },
      "lineNbr": 831,
      "author": {
        "id": 1000046
      },
      "writtenOn": "2017-12-04T19:16:08Z",
      "side": 1,
      "message": "Use \u003d assignment to stay consistent with other pointer assignments in the file.",
      "range": {
        "startLine": 831,
        "startChar": 26,
        "endLine": 831,
        "endChar": 35
      },
      "revId": "9ef019f0df8456aa0385237be1065d1f0eac6443",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "60741011_da517e77",
        "filename": "base/allocator/partition_allocator/partition_alloc.h",
        "patchSetId": 1
      },
      "lineNbr": 842,
      "author": {
        "id": 1000046
      },
      "writtenOn": "2017-12-04T19:16:08Z",
      "side": 1,
      "message": "So the original code did this weird thing where the PartitionBucket\u0027s freelist_head pointer was Not masked.  This changes that behavior. Is there a reason for that?\n\nNote, I had it on a TODO in an upcoming CL to actually create 2 types.. PartitionEncodedFreelistEntry PartitionFreeListEntry which the mask/unmask functions being member methods that flipped between the two. The idea would be then that PartitionBucket holds PartitionFreeListEntry which contains a PartitionEncodedFreelistEntry member...  Not suggesting that you have to introduce that change in this CL, but if the concern is keeping all \"freelist\" entry pointers consistently masked/unmasked, a fix is coming soon...",
      "revId": "9ef019f0df8456aa0385237be1065d1f0eac6443",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2daad351_17060a15",
        "filename": "base/allocator/partition_allocator/partition_alloc.h",
        "patchSetId": 1
      },
      "lineNbr": 842,
      "author": {
        "id": 1001040
      },
      "writtenOn": "2017-12-04T19:52:01Z",
      "side": 1,
      "message": "Yeah I\u0027d like to see Albert\u0027s change landed first in any case.",
      "parentUuid": "60741011_da517e77",
      "revId": "9ef019f0df8456aa0385237be1065d1f0eac6443",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "23189204_b349dca2",
        "filename": "base/allocator/partition_allocator/partition_alloc_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 874,
      "author": {
        "id": 1001040
      },
      "writtenOn": "2017-12-04T19:52:01Z",
      "side": 1,
      "message": "Can you add some negative tests to make sure that crazy values are correctly constrained instead of going totally wild? The implementation of `PartitionFreelistUnmask` looks right to me, but a test will help maintain it.\n\nAlso, this mitigation approach seems to still leave a chance of mangling objects/the middles of objects inside a `PartitionPage`, even if it does keep crazy pointers constrained to being inside a `PartitionPage`. We should consider if a cookie for pointer obfuscation might provide better mitigation.",
      "revId": "9ef019f0df8456aa0385237be1065d1f0eac6443",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}