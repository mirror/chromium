{
  "comments": [
    {
      "key": {
        "uuid": "9ebbb502_58f92c26",
        "filename": "chrome/browser/ui/passwords/password_manager_porter.h",
        "patchSetId": 14
      },
      "lineNbr": 32,
      "author": {
        "id": 1002541
      },
      "writtenOn": "2017-11-28T13:08:54Z",
      "side": 1,
      "message": "nit: The definition of \"primary\" might not be clear here.\n\nI\u0027d say a more important piece of information would be which c-tor to use when. Something like:\n// Production code should construct PasswordManagerPorter by passing it a CredentialProviderInterface. The constructor will create an appropriate PasswordManagerExporter based on that.\nexplicit PasswordManagerPorter(password_manager::CredentialProviderInterface*\n                                     credential_provider_interface);\n\n// Test code might wish to bypass the automatic creation and inject a fake PasswordManagerExporter directly.\nexplicit PasswordManagerPorter(\n      std::unique_ptr\u003cpassword_manager::PasswordManagerExporter\u003e exporter);",
      "range": {
        "startLine": 32,
        "startChar": 5,
        "endLine": 32,
        "endChar": 12
      },
      "revId": "b3eeb451292a719992bae123c236ff6e8d1953f4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8e55b87e_15b5bad5",
        "filename": "chrome/browser/ui/passwords/password_manager_porter.h",
        "patchSetId": 14
      },
      "lineNbr": 32,
      "author": {
        "id": 1168044
      },
      "writtenOn": "2017-11-28T13:29:47Z",
      "side": 1,
      "message": "Primary constructor is a term (and, in several modern languages, a feature) referring to a constructor which can replace any other constructor. When such a constructor exists, it\u0027s the only constructor which should set fields. Any other constructor should transform its input and pass it to the primary constructor.\n\nI understand that C++ coders might not be familiar with the term, but I would rather explain it in the terms that I described above, rather than talk about testing in the constructor declaration. WDYT?",
      "parentUuid": "9ebbb502_58f92c26",
      "range": {
        "startLine": 32,
        "startChar": 5,
        "endLine": 32,
        "endChar": 12
      },
      "revId": "b3eeb451292a719992bae123c236ff6e8d1953f4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "21fea020_25fb2b98",
        "filename": "chrome/browser/ui/passwords/password_manager_porter.h",
        "patchSetId": 14
      },
      "lineNbr": 32,
      "author": {
        "id": 1002541
      },
      "writtenOn": "2017-11-28T13:36:31Z",
      "side": 1,
      "message": "As for using \"primary constructor\" with explanation -- no objections to that. What you describe sounds a lot like, e.g., \"designated initializer\" in Objective C, but I have not heard a standard term for that in C++ (and googling [c++ primary constructor] is not explaining it either).\n\nIndependently of explaining \"primary\", I think it is still useful to hint at which constructor is meant for production code. Or else someone might one day start creating the PasswordManagerExporter explicitly, then someone changes the secondary constructor to do it differently, and then subtle bugs might appear.",
      "parentUuid": "8e55b87e_15b5bad5",
      "range": {
        "startLine": 32,
        "startChar": 5,
        "endLine": 32,
        "endChar": 12
      },
      "revId": "b3eeb451292a719992bae123c236ff6e8d1953f4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "45113598_e12707ba",
        "filename": "chrome/browser/ui/passwords/password_manager_porter.h",
        "patchSetId": 14
      },
      "lineNbr": 32,
      "author": {
        "id": 1168044
      },
      "writtenOn": "2017-11-28T14:20:09Z",
      "side": 1,
      "message": "The purpose of primary constructor pattern is precisely to prevent any reasonable change from introducing such bugs. The secondary constructor is only allowed to massage its input and provide defaults.\n\nI\u0027ll just mention testing instead, rather than bikeshed about it and end up commenting a small lecture.",
      "parentUuid": "21fea020_25fb2b98",
      "range": {
        "startLine": 32,
        "startChar": 5,
        "endLine": 32,
        "endChar": 12
      },
      "revId": "b3eeb451292a719992bae123c236ff6e8d1953f4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}