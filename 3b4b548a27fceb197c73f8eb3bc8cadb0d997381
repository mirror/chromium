{
  "comments": [
    {
      "key": {
        "uuid": "56f803b8_b74a9c7a",
        "filename": "tools/cygprofile/cyglog_to_orderfile.py",
        "patchSetId": 4
      },
      "lineNbr": 35,
      "author": {
        "id": 1000429
      },
      "writtenOn": "2018-02-01T16:06:46Z",
      "side": 1,
      "message": "This class exposes a constructor and a single public method that does not modify the state of the object. Compared to a single public function this makes it more verbose to call, without obvious benefits. Is this class going to be extended soon?\n\nOh, one benefit could be in grouping of the methods, though this groups almost everything to this class, which is almost equivalent to no grouping.\n\nAlso does not help testing, the injection of the test offset processor is now longer to follow.\n\nConfused.",
      "range": {
        "startLine": 35,
        "startChar": 0,
        "endLine": 35,
        "endChar": 39
      },
      "revId": "3b4b548a27fceb197c73f8eb3bc8cadb0d997381",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c9ad2a29_4d8aeff3",
        "filename": "tools/cygprofile/cyglog_to_orderfile.py",
        "patchSetId": 4
      },
      "lineNbr": 35,
      "author": {
        "id": 1154589
      },
      "writtenOn": "2018-02-02T10:51:08Z",
      "side": 1,
      "message": "This class holds *two* things: the symbols from the library, and the object file sections :)\n\nRearranging the code will bring benefits. For example this change has made it clear that patch_orderfile rescans the object directory for symbols.\n\nIn general, I\u0027m trying to organize things functionally rather than procedurally. What I mean by that is that currently all this orderfile stuff is done as a list of steps with complex interdependancies. Doing things like assembling an orderfile manually from multiple profile runs isn\u0027t possible with the current code, because the profile step is mixed in with setting up a build and performing a compile.",
      "parentUuid": "56f803b8_b74a9c7a",
      "range": {
        "startLine": 35,
        "startChar": 0,
        "endLine": 35,
        "endChar": 39
      },
      "revId": "3b4b548a27fceb197c73f8eb3bc8cadb0d997381",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b7164340_5bd46c31",
        "filename": "tools/cygprofile/cyglog_to_orderfile.py",
        "patchSetId": 4
      },
      "lineNbr": 35,
      "author": {
        "id": 1000429
      },
      "writtenOn": "2018-02-02T13:27:57Z",
      "side": 1,
      "message": "\u003e This class holds *two* things: the symbols from the library, and the object file sections :)\n\u003e \n\u003e Rearranging the code will bring benefits. For example this change has made it\n\u003e clear that patch_orderfile rescans the object directory for symbols.\n\nNot sure it has made it clearer. It is a toplevel method of a class that holds\nalmost-everything. It was a toplevel function previously.\n\nFrom the standpoint of merging several files into one this would make classes\nmove, instead of functions, which may get simpler. Is this something you are\nconsidering?\n\n\u003e In general, I\u0027m trying to organize things functionally rather than\n\u003e procedurally. What I mean by that is that currently all this orderfile stuff\n\u003e is done as a list of steps with complex interdependancies.\n\nThe interdependencies stay the same after the change, and the grouping adds an\nabstraction with fuzzy boundaries. It separates out _ParseLogLines (which sounds\ngood) and _WarnAboutDuplicates (not sure why it is out of\nOffsetOrderfileGenerator). So the next person modifying this file would be\nwondering whether to add to this class or somewhere else, a problem that did not\nexist before.\n\n\u003e Doing things like assembling an orderfile manually from multiple profile runs\n\u003e isn\u0027t possible with the current code, because the profile step is mixed in\n\u003e with setting up a build and performing a compile.\n\nI am not following. Manual orderfile processing is enabled in the concurrent change\nthat could very well use a function exposed from here, not a class.\n\nOverall, I don\u0027t want to force this to be re-copypasted back in the original\nstate, seems not worth the effort. The grouping is okay :) Probably a workable\napproach for the future would be to discuss rough plans for refactoring for 5\nminutes and invest afterwards.",
      "parentUuid": "c9ad2a29_4d8aeff3",
      "range": {
        "startLine": 35,
        "startChar": 0,
        "endLine": 35,
        "endChar": 39
      },
      "revId": "3b4b548a27fceb197c73f8eb3bc8cadb0d997381",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "27dbebc2_1c204eae",
        "filename": "tools/cygprofile/cyglog_to_orderfile.py",
        "patchSetId": 4
      },
      "lineNbr": 35,
      "author": {
        "id": 1154589
      },
      "writtenOn": "2018-02-02T17:00:02Z",
      "side": 1,
      "message": "The general toplevel function approach used with the orderfile has not been maintainable because it separates things like symbol maps from which directory one gets the symbol maps from. Having a single instance to hold a logically unified chunk of data seems to be much easier to compose for different pipelines, as has been done in the process_profile.py work.\n\nAdmittedly that work is incomplete here because I haven\u0027t untangled all the uses of the object directory and the best way to combine that with other symbol processing. It\u0027s not clear to me if we want there to be a single thing that holds on to all information associated with a particular build, or if keeping the symbol information separate from the section information would work better.\n\nBut there is still an advantage, I think, to taking small steps towards passing around instances where appropriate.",
      "parentUuid": "b7164340_5bd46c31",
      "range": {
        "startLine": 35,
        "startChar": 0,
        "endLine": 35,
        "endChar": 39
      },
      "revId": "3b4b548a27fceb197c73f8eb3bc8cadb0d997381",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "698fbba9_04c32c85",
        "filename": "tools/cygprofile/cyglog_to_orderfile.py",
        "patchSetId": 4
      },
      "lineNbr": 41,
      "author": {
        "id": 1000429
      },
      "writtenOn": "2018-02-01T16:06:46Z",
      "side": 1,
      "message": "typo: s/proccessor/processor/",
      "range": {
        "startLine": 41,
        "startChar": 35,
        "endLine": 41,
        "endChar": 45
      },
      "revId": "3b4b548a27fceb197c73f8eb3bc8cadb0d997381",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d8c48b1c_84ef0ca1",
        "filename": "tools/cygprofile/cyglog_to_orderfile.py",
        "patchSetId": 4
      },
      "lineNbr": 41,
      "author": {
        "id": 1154589
      },
      "writtenOn": "2018-02-02T10:51:08Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "698fbba9_04c32c85",
      "range": {
        "startLine": 41,
        "startChar": 35,
        "endLine": 41,
        "endChar": 45
      },
      "revId": "3b4b548a27fceb197c73f8eb3bc8cadb0d997381",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fd90f865_3804bc9d",
        "filename": "tools/cygprofile/cyglog_to_orderfile.py",
        "patchSetId": 4
      },
      "lineNbr": 125,
      "author": {
        "id": 1000429
      },
      "writtenOn": "2018-02-01T16:06:46Z",
      "side": 1,
      "message": "nit: http, their certificate expired ~1 year ago",
      "range": {
        "startLine": 125,
        "startChar": 5,
        "endLine": 125,
        "endChar": 9
      },
      "revId": "3b4b548a27fceb197c73f8eb3bc8cadb0d997381",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d987e01c_4d450a96",
        "filename": "tools/cygprofile/cyglog_to_orderfile.py",
        "patchSetId": 4
      },
      "lineNbr": 125,
      "author": {
        "id": 1154589
      },
      "writtenOn": "2018-02-02T10:51:08Z",
      "side": 1,
      "message": ":P probably best to keep that warning in place as maybe this is no longer the best link. At any rate, this was one of the copy-paste bits.",
      "parentUuid": "fd90f865_3804bc9d",
      "range": {
        "startLine": 125,
        "startChar": 5,
        "endLine": 125,
        "endChar": 9
      },
      "revId": "3b4b548a27fceb197c73f8eb3bc8cadb0d997381",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9737be18_9663dedb",
        "filename": "tools/cygprofile/cyglog_to_orderfile.py",
        "patchSetId": 4
      },
      "lineNbr": 125,
      "author": {
        "id": 1000429
      },
      "writtenOn": "2018-02-02T17:35:42Z",
      "side": 1,
      "message": "I looked at the Itanic C++ ABI for another reason today, and found that its new place is here: https://itanium-cxx-abi.github.io/cxx-abi/\n\nSo if we wanted to update the link, then it\u0027d be:\nhttps://itanium-cxx-abi.github.io/cxx-abi/abi.html#mangling-special-ctor-dtor\n\nI can do it in a separate change after this lands..",
      "parentUuid": "d987e01c_4d450a96",
      "range": {
        "startLine": 125,
        "startChar": 5,
        "endLine": 125,
        "endChar": 9
      },
      "revId": "3b4b548a27fceb197c73f8eb3bc8cadb0d997381",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ddec999c_8dcb0be4",
        "filename": "tools/cygprofile/cyglog_to_orderfile.py",
        "patchSetId": 4
      },
      "lineNbr": 125,
      "author": {
        "id": 1154589
      },
      "writtenOn": "2018-02-05T14:15:18Z",
      "side": 1,
      "message": "Thanks, I\u0027ll update this.\n\nThe change isn\u0027t going to land until I can e2e test it, which means figuring out the library loading deadlock :/",
      "parentUuid": "9737be18_9663dedb",
      "range": {
        "startLine": 125,
        "startChar": 5,
        "endLine": 125,
        "endChar": 9
      },
      "revId": "3b4b548a27fceb197c73f8eb3bc8cadb0d997381",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dd4d480c_4af0e1a2",
        "filename": "tools/cygprofile/cyglog_to_orderfile_unittest.py",
        "patchSetId": 4
      },
      "lineNbr": 15,
      "author": {
        "id": 1000429
      },
      "writtenOn": "2018-02-01T16:06:46Z",
      "side": 1,
      "message": "Referring to test_utils.SymbolInfo as \u0027SymbolInfo\u0027 can be confusing here because the majority of uses of SymbolInfo comes from symbol_extractor.\n\nI see 2 ways to reduce the hypothetical confusion:\n1. use explicit test_utils.SymbolInfo here\n2. use symbol_extractor.SymbolInfo here with None as a section\n\nI would prefer (2) because it avoids introducing one-more-similar abstraction - easier to remember",
      "range": {
        "startLine": 15,
        "startChar": 24,
        "endLine": 15,
        "endChar": 34
      },
      "revId": "3b4b548a27fceb197c73f8eb3bc8cadb0d997381",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6121bdec_873b3a47",
        "filename": "tools/cygprofile/cyglog_to_orderfile_unittest.py",
        "patchSetId": 4
      },
      "lineNbr": 15,
      "author": {
        "id": 1154589
      },
      "writtenOn": "2018-02-02T10:51:08Z",
      "side": 1,
      "message": "Let me meditate on this. These SymbolInfos indeed replace the symbol_extractor type. They both make the tests easier to read by removing unnecessary parameters, as well as making an assertion about what parts of the symbol are actually used in the implementation. I\u0027m not sure if that second aspect is a bug or feature. On the one hand, it implicitly exposes details of the implementation to the test; on the other hand, a test that uses None in a field which in practice is never None, may cause different behavior if that field is used in the implementation. By using a test-specific SymbolInfo type the test will crash instead and expose those implicit test case assumptions, making them easier to fix.",
      "parentUuid": "dd4d480c_4af0e1a2",
      "range": {
        "startLine": 15,
        "startChar": 24,
        "endLine": 15,
        "endChar": 34
      },
      "revId": "3b4b548a27fceb197c73f8eb3bc8cadb0d997381",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "725d2152_ad9adebc",
        "filename": "tools/cygprofile/cyglog_to_orderfile_unittest.py",
        "patchSetId": 4
      },
      "lineNbr": 15,
      "author": {
        "id": 1000429
      },
      "writtenOn": "2018-02-02T13:27:57Z",
      "side": 1,
      "message": "In my opinion multiple definitions of SymbolInfo makes it more difficult for unfamiliar folks to contribute to this codebase because it adds burden figuring out which definition is where. These drawbacks outweigh the benefits of using explicit None.\n\nOther possibilities: SymbolInfoForTesting, SymbolInfoWithoutSection",
      "parentUuid": "6121bdec_873b3a47",
      "range": {
        "startLine": 15,
        "startChar": 24,
        "endLine": 15,
        "endChar": 34
      },
      "revId": "3b4b548a27fceb197c73f8eb3bc8cadb0d997381",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "308f210e_627c0dc6",
        "filename": "tools/cygprofile/cyglog_to_orderfile_unittest.py",
        "patchSetId": 4
      },
      "lineNbr": 25,
      "author": {
        "id": 1000429
      },
      "writtenOn": "2018-02-01T16:06:46Z",
      "side": 1,
      "message": "Why reintroducing symbol_extractor.SymbolInfo under a different name?",
      "range": {
        "startLine": 25,
        "startChar": 0,
        "endLine": 25,
        "endChar": 17
      },
      "revId": "3b4b548a27fceb197c73f8eb3bc8cadb0d997381",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3e147806_ed39ec91",
        "filename": "tools/cygprofile/cyglog_to_orderfile_unittest.py",
        "patchSetId": 4
      },
      "lineNbr": 25,
      "author": {
        "id": 1154589
      },
      "writtenOn": "2018-02-02T10:51:08Z",
      "side": 1,
      "message": "Because some tests exercise code that uses the section field; see the previous comment.",
      "parentUuid": "308f210e_627c0dc6",
      "range": {
        "startLine": 25,
        "startChar": 0,
        "endLine": 25,
        "endChar": 17
      },
      "revId": "3b4b548a27fceb197c73f8eb3bc8cadb0d997381",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "91858974_d46b64c3",
        "filename": "tools/cygprofile/cyglog_to_orderfile_unittest.py",
        "patchSetId": 4
      },
      "lineNbr": 25,
      "author": {
        "id": 1000429
      },
      "writtenOn": "2018-02-02T13:27:57Z",
      "side": 1,
      "message": "this is confusing because even after the explanation above it seems like an unnecessary abstraction",
      "parentUuid": "3e147806_ed39ec91",
      "range": {
        "startLine": 25,
        "startChar": 0,
        "endLine": 25,
        "endChar": 17
      },
      "revId": "3b4b548a27fceb197c73f8eb3bc8cadb0d997381",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ec176dc0_296836fa",
        "filename": "tools/cygprofile/cyglog_to_orderfile_unittest.py",
        "patchSetId": 4
      },
      "lineNbr": 33,
      "author": {
        "id": 1000429
      },
      "writtenOn": "2018-02-01T16:06:46Z",
      "side": 1,
      "message": "since it is a single use of this name, test_utils.TestSymbolOffsetProcessor looks clearer",
      "range": {
        "startLine": 33,
        "startChar": 30,
        "endLine": 33,
        "endChar": 55
      },
      "revId": "3b4b548a27fceb197c73f8eb3bc8cadb0d997381",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "630a6b6e_256e87ed",
        "filename": "tools/cygprofile/cyglog_to_orderfile_unittest.py",
        "patchSetId": 4
      },
      "lineNbr": 33,
      "author": {
        "id": 1154589
      },
      "writtenOn": "2018-02-02T10:51:08Z",
      "side": 1,
      "message": "(intentionally left unresolved for future pass through comments)",
      "parentUuid": "ec176dc0_296836fa",
      "range": {
        "startLine": 33,
        "startChar": 30,
        "endLine": 33,
        "endChar": 55
      },
      "revId": "3b4b548a27fceb197c73f8eb3bc8cadb0d997381",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cc24a400_b04b526e",
        "filename": "tools/cygprofile/cyglog_to_orderfile_unittest.py",
        "patchSetId": 4
      },
      "lineNbr": 33,
      "author": {
        "id": 1154589
      },
      "writtenOn": "2018-02-07T13:08:48Z",
      "side": 1,
      "message": "It\u0027s used 3 times now, but done.",
      "parentUuid": "630a6b6e_256e87ed",
      "range": {
        "startLine": 33,
        "startChar": 30,
        "endLine": 33,
        "endChar": 55
      },
      "revId": "3b4b548a27fceb197c73f8eb3bc8cadb0d997381",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "70de7a24_954336a0",
        "filename": "tools/cygprofile/cyglog_to_orderfile_unittest.py",
        "patchSetId": 4
      },
      "lineNbr": 56,
      "author": {
        "id": 1000429
      },
      "writtenOn": "2018-02-01T16:06:46Z",
      "side": 1,
      "message": "I think the order of test methods was alphabetical, what is the new ordering principle?",
      "range": {
        "startLine": 56,
        "startChar": 6,
        "endLine": 56,
        "endChar": 35
      },
      "revId": "3b4b548a27fceb197c73f8eb3bc8cadb0d997381",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "73b1316c_3afe40bc",
        "filename": "tools/cygprofile/cyglog_to_orderfile_unittest.py",
        "patchSetId": 4
      },
      "lineNbr": 56,
      "author": {
        "id": 1154589
      },
      "writtenOn": "2018-02-02T10:51:08Z",
      "side": 1,
      "message": "These tests are related to offsets found at odd adresses, see the comment in _SymbolsAtOffset.\n\nI have no idea if this is actually used now or if this is ancient history, but I didn\u0027t want to accidentally change any semantics.",
      "parentUuid": "70de7a24_954336a0",
      "range": {
        "startLine": 56,
        "startChar": 6,
        "endLine": 56,
        "endChar": 35
      },
      "revId": "3b4b548a27fceb197c73f8eb3bc8cadb0d997381",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4c06d3cf_383ed1d7",
        "filename": "tools/cygprofile/cyglog_to_orderfile_unittest.py",
        "patchSetId": 4
      },
      "lineNbr": 56,
      "author": {
        "id": 1000429
      },
      "writtenOn": "2018-02-02T13:27:57Z",
      "side": 1,
      "message": "The logic is still used. Your comment does not directly answer my question, which suggests that the order of these tests was not important. This answer is OK :)",
      "parentUuid": "73b1316c_3afe40bc",
      "range": {
        "startLine": 56,
        "startChar": 6,
        "endLine": 56,
        "endChar": 35
      },
      "revId": "3b4b548a27fceb197c73f8eb3bc8cadb0d997381",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9d618cca_19cf1e20",
        "filename": "tools/cygprofile/cyglog_to_orderfile_unittest.py",
        "patchSetId": 4
      },
      "lineNbr": 56,
      "author": {
        "id": 1154589
      },
      "writtenOn": "2018-02-02T17:00:02Z",
      "side": 1,
      "message": "Oh, sorry, I somehow badly misparsed your question. There was no strict ordering principle to these tests, just generally grouping the things only used in the scripting run of cyglog_to_orderfile (ie, what\u0027s used in main()) together, and the things used in the exported classes together.",
      "parentUuid": "4c06d3cf_383ed1d7",
      "range": {
        "startLine": 56,
        "startChar": 6,
        "endLine": 56,
        "endChar": 35
      },
      "revId": "3b4b548a27fceb197c73f8eb3bc8cadb0d997381",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}