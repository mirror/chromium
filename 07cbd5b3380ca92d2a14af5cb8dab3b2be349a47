{
  "comments": [
    {
      "key": {
        "uuid": "6ea6c6df_d603fb90",
        "filename": "third_party/WebKit/Source/platform/wtf/text/StringToNumber.h",
        "patchSetId": 3
      },
      "lineNbr": 22,
      "author": {
        "id": 1000098
      },
      "writtenOn": "2017-07-21T03:35:21Z",
      "side": 1,
      "message": "What do you mean by \u0027legacy\u0027?",
      "revId": "07cbd5b3380ca92d2a14af5cb8dab3b2be349a47",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f1fb60be_fdfcceb3",
        "filename": "third_party/WebKit/Source/platform/wtf/text/StringToNumber.h",
        "patchSetId": 3
      },
      "lineNbr": 22,
      "author": {
        "id": 1116047
      },
      "writtenOn": "2017-07-21T04:06:16Z",
      "side": 1,
      "message": "I mean, their behavior were not well defined and we should avoid to use them.  \u0027Historical\u0027 or \u0027Deprecated\u0027 might be better.\n\nWe have kept their behavior just because we don\u0027t want to break existing behavior. We should clarify what behavior is necessary for all of callsites.\n\nFYI.\nI haven\u0027t found any code requiring kAcceptLeadingTrailingWhitespace yet.\nI found SMIL clock type parser incorrectly accepted string like \"02:+1:00\" due to kAcceptLeadingPlus.",
      "parentUuid": "6ea6c6df_d603fb90",
      "revId": "07cbd5b3380ca92d2a14af5cb8dab3b2be349a47",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fa7c5c4b_39429db6",
        "filename": "third_party/WebKit/Source/platform/wtf/text/StringToNumber.h",
        "patchSetId": 3
      },
      "lineNbr": 22,
      "author": {
        "id": 1000098
      },
      "writtenOn": "2017-07-21T05:09:13Z",
      "side": 1,
      "message": "Thanks for the explanation.\n\nAs we make progress, anything will become legacy some time - I was afraid that\nthis comment gets stale without changing any code, as \"legacy\" is somewhat\nrelative to now.",
      "parentUuid": "f1fb60be_fdfcceb3",
      "revId": "07cbd5b3380ca92d2a14af5cb8dab3b2be349a47",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2817286b_ffc61df9",
        "filename": "third_party/WebKit/Source/platform/wtf/text/StringToNumber.h",
        "patchSetId": 3
      },
      "lineNbr": 29,
      "author": {
        "id": 1116047
      },
      "writtenOn": "2017-07-21T02:21:36Z",
      "side": 1,
      "message": "For a function like foo(NumberParsingOptions), we can write\n  foo(NumberPasingOptions::kStrict);\nas well as\n  foo(42);\n\nIf we make the constructor \u0027explicit\u0027, we need to write\n  foo(NumberParsingOptions(NumberParsingOptions::kStrict));\nand can\u0027t do\n  foo(42);\n\nIMO, implicit conversion is better though it accepts unexpected unsigned values.",
      "revId": "07cbd5b3380ca92d2a14af5cb8dab3b2be349a47",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "45724887_92498973",
        "filename": "third_party/WebKit/Source/platform/wtf/text/StringToNumber.h",
        "patchSetId": 3
      },
      "lineNbr": 29,
      "author": {
        "id": 1000098
      },
      "writtenOn": "2017-07-21T03:35:21Z",
      "side": 1,
      "message": "Yeah, even with \u0027explicit\u0027 you can write foo(NumberParsingOptions(42)) anyway.\nAt best, you can DCHECK() in the constructor.",
      "parentUuid": "2817286b_ffc61df9",
      "revId": "07cbd5b3380ca92d2a14af5cb8dab3b2be349a47",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}