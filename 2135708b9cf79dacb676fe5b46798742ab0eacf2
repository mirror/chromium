{
  "comments": [
    {
      "key": {
        "uuid": "6ca8d15d_0e1f235e",
        "filename": "tools/perf/contrib/vr_benchmarks/vr_benchmarks/vr_memory.py",
        "patchSetId": 4
      },
      "lineNbr": 14,
      "author": {
        "id": 1163549
      },
      "writtenOn": "2017-07-28T18:07:19Z",
      "side": 1,
      "message": "Looks like the warnings that Pylint throws about using protected members are counted as errors by presubmit. Would it be alright to make this and _IGNORED_STATS_RE non-protected so we can re-use the code?",
      "range": {
        "startLine": 14,
        "startChar": 36,
        "endLine": 14,
        "endChar": 48
      },
      "revId": "2135708b9cf79dacb676fe5b46798742ab0eacf2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "74e2bd55_07464b64",
        "filename": "tools/perf/contrib/vr_benchmarks/vr_benchmarks/vr_memory.py",
        "patchSetId": 4
      },
      "lineNbr": 14,
      "author": {
        "id": 1128435
      },
      "writtenOn": "2017-07-28T18:11:19Z",
      "side": 1,
      "message": "I think you can refactor the memory._MemoryInfra so that the methods for setting up the memory trace options \u0026 metrics are public method. That makes it easier for you to later add stuffs other than memory, including: cpu time, smoothness,..etc\n\n+Juan for opinions",
      "parentUuid": "6ca8d15d_0e1f235e",
      "range": {
        "startLine": 14,
        "startChar": 36,
        "endLine": 14,
        "endChar": 48
      },
      "revId": "2135708b9cf79dacb676fe5b46798742ab0eacf2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d2cb9f43_11347a7d",
        "filename": "tools/perf/contrib/vr_benchmarks/vr_benchmarks/vr_memory.py",
        "patchSetId": 4
      },
      "lineNbr": 14,
      "author": {
        "id": 1123010
      },
      "writtenOn": "2017-07-31T09:59:01Z",
      "side": 1,
      "message": "Since that code is already getting a fair amount of duplication in the codebase, I think something like _MemoryInfra with a default ValueCanBeAddedPredicate should be made public.\n\nYou can create a base clase for that (probably in memory.py) and use it for your new benchmark. I\u0027ll try to plan some cleanup/refactoring to get other memory benchmarks using it too.",
      "parentUuid": "74e2bd55_07464b64",
      "range": {
        "startLine": 14,
        "startChar": 36,
        "endLine": 14,
        "endChar": 48
      },
      "revId": "2135708b9cf79dacb676fe5b46798742ab0eacf2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "aae98d48_34745e23",
        "filename": "tools/perf/contrib/vr_benchmarks/vr_benchmarks/vr_memory.py",
        "patchSetId": 4
      },
      "lineNbr": 14,
      "author": {
        "id": 1163549
      },
      "writtenOn": "2017-08-07T17:51:21Z",
      "side": 1,
      "message": "Done. I just added a public class for use in the new benchmark and left everything else as-is. I can go back and combine it and _MemoryInfra/switch other benchmarks to use it instead of _MemoryInfra in this CL if you\u0027d like.\n\nAlso, since it\u0027s public, it\u0027s being treated as an actual benchmark to be run, hence the Disabled and Owner decorators. Not sure if there\u0027s a better way to get around that.",
      "parentUuid": "d2cb9f43_11347a7d",
      "range": {
        "startLine": 14,
        "startChar": 36,
        "endLine": 14,
        "endChar": 48
      },
      "revId": "2135708b9cf79dacb676fe5b46798742ab0eacf2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e174c09d_823cc9b3",
        "filename": "tools/perf/contrib/vr_benchmarks/vr_benchmarks/vr_memory.py",
        "patchSetId": 4
      },
      "lineNbr": 24,
      "author": {
        "id": 1116794
      },
      "writtenOn": "2017-07-28T19:23:20Z",
      "side": 1,
      "message": "Nit: it can fit into one line.",
      "range": {
        "startLine": 24,
        "startChar": 6,
        "endLine": 24,
        "endChar": 0
      },
      "revId": "2135708b9cf79dacb676fe5b46798742ab0eacf2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "41089a57_075c0c71",
        "filename": "tools/perf/contrib/vr_benchmarks/vr_benchmarks/vr_memory.py",
        "patchSetId": 4
      },
      "lineNbr": 24,
      "author": {
        "id": 1163549
      },
      "writtenOn": "2017-07-28T20:39:51Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e174c09d_823cc9b3",
      "range": {
        "startLine": 24,
        "startChar": 6,
        "endLine": 24,
        "endChar": 0
      },
      "revId": "2135708b9cf79dacb676fe5b46798742ab0eacf2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "137bffed_50869f4e",
        "filename": "tools/perf/contrib/vr_benchmarks/vr_page_sets/webvr_sample_pages.py",
        "patchSetId": 4
      },
      "lineNbr": 8,
      "author": {
        "id": 1128435
      },
      "writtenOn": "2017-08-07T20:22:05Z",
      "side": 1,
      "message": "nits, we usually do:\nos.path.join(os.path.dirname(__file__), \u0027..\u0027, \u0027..\u0027...)",
      "range": {
        "startLine": 8,
        "startChar": 76,
        "endLine": 8,
        "endChar": 0
      },
      "revId": "2135708b9cf79dacb676fe5b46798742ab0eacf2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cd5dcdcf_fc5acf07",
        "filename": "tools/perf/contrib/vr_benchmarks/vr_page_sets/webvr_sample_pages.py",
        "patchSetId": 4
      },
      "lineNbr": 8,
      "author": {
        "id": 1163549
      },
      "writtenOn": "2017-08-07T21:31:59Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "137bffed_50869f4e",
      "range": {
        "startLine": 8,
        "startChar": 76,
        "endLine": 8,
        "endChar": 0
      },
      "revId": "2135708b9cf79dacb676fe5b46798742ab0eacf2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "33aacc92_8ae3bd7a",
        "filename": "tools/perf/contrib/vr_benchmarks/vr_page_sets/webvr_sample_pages.py",
        "patchSetId": 4
      },
      "lineNbr": 20,
      "author": {
        "id": 1116794
      },
      "writtenOn": "2017-07-28T19:23:20Z",
      "side": 1,
      "message": "Indent in line 20.",
      "range": {
        "startLine": 20,
        "startChar": 54,
        "endLine": 20,
        "endChar": 58
      },
      "revId": "2135708b9cf79dacb676fe5b46798742ab0eacf2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ae470c95_cb04f6dc",
        "filename": "tools/perf/contrib/vr_benchmarks/vr_page_sets/webvr_sample_pages.py",
        "patchSetId": 4
      },
      "lineNbr": 20,
      "author": {
        "id": 1163549
      },
      "writtenOn": "2017-07-28T20:39:51Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "33aacc92_8ae3bd7a",
      "range": {
        "startLine": 20,
        "startChar": 54,
        "endLine": 20,
        "endChar": 58
      },
      "revId": "2135708b9cf79dacb676fe5b46798742ab0eacf2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}