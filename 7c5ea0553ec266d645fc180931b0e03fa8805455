{
  "comments": [
    {
      "key": {
        "uuid": "b44fbc23_8d79fbc1",
        "filename": "base/trace_event/memory_dump_manager.cc",
        "patchSetId": 7
      },
      "lineNbr": 492,
      "author": {
        "id": 1125359
      },
      "writtenOn": "2017-06-07T01:03:11Z",
      "side": 1,
      "message": "Is it possible to pass null callback here? I think we have null checks everywhere that invokes the callback.",
      "range": {
        "startLine": 492,
        "startChar": 53,
        "endLine": 492,
        "endChar": 66
      },
      "revId": "7c5ea0553ec266d645fc180931b0e03fa8805455",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c9ffd655_4b96160b",
        "filename": "base/trace_event/memory_dump_manager.cc",
        "patchSetId": 7
      },
      "lineNbr": 492,
      "author": {
        "id": 1002871
      },
      "writtenOn": "2017-06-07T11:28:36Z",
      "side": 1,
      "message": "Aha interesting. So, we currently never had any test that covers the overloaded function without a callback and I realized that we regressed that.\n\n\u003e I think we have null checks everywhere that invokes the callback.\nI thought the same but I think we lost them in the way during the servicification. I realized by accident while debugging locally and realized that without a callback we hit a DCHECK in the mojo code.\nSo I think that today BackgroundMemoryTracingObserver::OnTracingEnabled is actually hitting a dcheck, which luckily turns into a noop in production code. Thankfully that didn\u0027t create any real problems but I felt I should fix this .)",
      "parentUuid": "b44fbc23_8d79fbc1",
      "range": {
        "startLine": 492,
        "startChar": 53,
        "endLine": 492,
        "endChar": 66
      },
      "revId": "7c5ea0553ec266d645fc180931b0e03fa8805455",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d2e864d0_cce90efb",
        "filename": "base/trace_event/memory_dump_manager.cc",
        "patchSetId": 7
      },
      "lineNbr": 492,
      "author": {
        "id": 1125359
      },
      "writtenOn": "2017-06-07T18:05:13Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "c9ffd655_4b96160b",
      "range": {
        "startLine": 492,
        "startChar": 53,
        "endLine": 492,
        "endChar": 66
      },
      "revId": "7c5ea0553ec266d645fc180931b0e03fa8805455",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e51c7fcf_21abfb6b",
        "filename": "base/trace_event/memory_dump_manager.h",
        "patchSetId": 7
      },
      "lineNbr": 74,
      "author": {
        "id": 1125359
      },
      "writtenOn": "2017-06-07T01:03:11Z",
      "side": 1,
      "message": "Can we have this function implemented just in the test file?\nIt seems to be used in 2 files and the code doesn\u0027t really need to be in memory_dump_manager.cc\nIt also does not generalize across tests since some browser tests use the other function.",
      "range": {
        "startLine": 74,
        "startChar": 7,
        "endLine": 74,
        "endChar": 27
      },
      "revId": "7c5ea0553ec266d645fc180931b0e03fa8805455",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6071fcfe_d2f6651c",
        "filename": "base/trace_event/memory_dump_manager.h",
        "patchSetId": 7
      },
      "lineNbr": 74,
      "author": {
        "id": 1002871
      },
      "writtenOn": "2017-06-07T11:28:36Z",
      "side": 1,
      "message": ":) When I see this comment I see myself writing the same if the parts were reversed. I feel I created a monster (in the good sense!).\n\nMoved this function to memory_dump_manager_test_utils.h and renamed to InitializeMemoryDumpManagerForInProcessTesting() so becomes clearer that it\u0027s only for unittests.",
      "parentUuid": "e51c7fcf_21abfb6b",
      "range": {
        "startLine": 74,
        "startChar": 7,
        "endLine": 74,
        "endChar": 27
      },
      "revId": "7c5ea0553ec266d645fc180931b0e03fa8805455",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "517a3a9a_64274aec",
        "filename": "base/trace_event/memory_dump_manager.h",
        "patchSetId": 7
      },
      "lineNbr": 74,
      "author": {
        "id": 1125359
      },
      "writtenOn": "2017-06-07T18:05:13Z",
      "side": 1,
      "message": "Haha!",
      "parentUuid": "6071fcfe_d2f6651c",
      "range": {
        "startLine": 74,
        "startChar": 7,
        "endLine": 74,
        "endChar": 27
      },
      "revId": "7c5ea0553ec266d645fc180931b0e03fa8805455",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "63543897_fee9ae37",
        "filename": "base/trace_event/memory_dump_manager_unittest.cc",
        "patchSetId": 7
      },
      "lineNbr": 409,
      "author": {
        "id": 1115925
      },
      "writtenOn": "2017-06-07T07:41:58Z",
      "side": 1,
      "message": "nit, should be: // Invert: enable mdp2 and disable mdp1.",
      "range": {
        "startLine": 409,
        "startChar": 2,
        "endLine": 409,
        "endChar": 42
      },
      "revId": "7c5ea0553ec266d645fc180931b0e03fa8805455",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3920b8f0_daf0e444",
        "filename": "base/trace_event/memory_dump_manager_unittest.cc",
        "patchSetId": 7
      },
      "lineNbr": 409,
      "author": {
        "id": 1002871
      },
      "writtenOn": "2017-06-07T11:28:36Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "63543897_fee9ae37",
      "range": {
        "startLine": 409,
        "startChar": 2,
        "endLine": 409,
        "endChar": 42
      },
      "revId": "7c5ea0553ec266d645fc180931b0e03fa8805455",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "600c585f_242e2776",
        "filename": "base/trace_event/memory_dump_manager_unittest.cc",
        "patchSetId": 7
      },
      "lineNbr": 859,
      "author": {
        "id": 1125359
      },
      "writtenOn": "2017-06-07T01:03:11Z",
      "side": 1,
      "message": "Sorry, can you tell me why you need this line?\nThere is only one expect_call.",
      "revId": "7c5ea0553ec266d645fc180931b0e03fa8805455",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b4dd870e_802ca053",
        "filename": "base/trace_event/memory_dump_manager_unittest.cc",
        "patchSetId": 7
      },
      "lineNbr": 859,
      "author": {
        "id": 1002871
      },
      "writtenOn": "2017-06-07T11:28:36Z",
      "side": 1,
      "message": "\u003e There is only one expect_call.\nNo there is another above\n\nSo, aha, I realized this was a small bug in the previous test.\nEssentially the scope {}Â itself doesn\u0027t bound the expectation of EXPECT_CALL if you don\u0027t put a scoped InSequence.\n\nEssentially the previous code was precisely the same of:\n\n\nEXPECT_CALL(mdp, OnMemoryDump(_, _)).Times(0);\nEXPECT_CALL(mdp, OnMemoryDump(_, _)).Times(1);\n\nEXPECT_FALSE(RequestProcessDumpAndWait(MemoryDumpType::EXPLICITLY_TRIGGERED,\n                                           MemoryDumpLevelOfDetail::DETAILED));\nInitializeForTesting(..)\nEXPECT_TRUE(RequestProcessDumpAndWait(MemoryDumpType::EXPLICITLY_TRIGGERED,\n                                          MemoryDumpLevelOfDetail::DETAILED));\n\nWhich technically mean that  OnMemoryDump is called only once but in the first section  (not the second) this test will silently pass.\n\nSee https://github.com/google/googletest/blob/master/googlemock/docs/ForDummies.md#ordered-vs-unordered-calls",
      "parentUuid": "600c585f_242e2776",
      "revId": "7c5ea0553ec266d645fc180931b0e03fa8805455",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2c3a811d_926fc35f",
        "filename": "base/trace_event/memory_dump_manager_unittest.cc",
        "patchSetId": 7
      },
      "lineNbr": 859,
      "author": {
        "id": 1125359
      },
      "writtenOn": "2017-06-07T18:05:13Z",
      "side": 1,
      "message": "Oh yes. But can\u0027t you just write one InSequence outside of the scopes and not have the scopes at all? I don\u0027t think the expect statement in second scope can happen before first and that way it is easier to follow.",
      "parentUuid": "b4dd870e_802ca053",
      "revId": "7c5ea0553ec266d645fc180931b0e03fa8805455",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1cdfd0c1_23d78d8c",
        "filename": "base/trace_event/memory_dump_manager_unittest.cc",
        "patchSetId": 7
      },
      "lineNbr": 978,
      "author": {
        "id": 1115925
      },
      "writtenOn": "2017-06-07T07:41:58Z",
      "side": 1,
      "message": "Do we need WillRepeatedly(Return(true))? I think OnMemoryDump returns true by default.",
      "range": {
        "startLine": 978,
        "startChar": 48,
        "endLine": 978,
        "endChar": 77
      },
      "revId": "7c5ea0553ec266d645fc180931b0e03fa8805455",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4f2db65d_1d27ae5c",
        "filename": "base/trace_event/memory_dump_manager_unittest.cc",
        "patchSetId": 7
      },
      "lineNbr": 978,
      "author": {
        "id": 1002871
      },
      "writtenOn": "2017-06-07T11:28:36Z",
      "side": 1,
      "message": "Aha I would have sworn that without that gtest spits out a WARNING: using default yada yada but looks like I am wrong. removed Will*(Return(True)) everywhere else here.",
      "parentUuid": "1cdfd0c1_23d78d8c",
      "range": {
        "startLine": 978,
        "startChar": 48,
        "endLine": 978,
        "endChar": 77
      },
      "revId": "7c5ea0553ec266d645fc180931b0e03fa8805455",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "46cd3897_81d02c3f",
        "filename": "base/trace_event/memory_dump_manager_unittest.cc",
        "patchSetId": 7
      },
      "lineNbr": 1037,
      "author": {
        "id": 1115925
      },
      "writtenOn": "2017-06-07T07:41:58Z",
      "side": 1,
      "message": "dito here",
      "range": {
        "startLine": 1037,
        "startChar": 47,
        "endLine": 1037,
        "endChar": 76
      },
      "revId": "7c5ea0553ec266d645fc180931b0e03fa8805455",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f03faf95_2e9df923",
        "filename": "base/trace_event/memory_dump_manager_unittest.cc",
        "patchSetId": 7
      },
      "lineNbr": 1037,
      "author": {
        "id": 1002871
      },
      "writtenOn": "2017-06-07T11:28:36Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "46cd3897_81d02c3f",
      "range": {
        "startLine": 1037,
        "startChar": 47,
        "endLine": 1037,
        "endChar": 76
      },
      "revId": "7c5ea0553ec266d645fc180931b0e03fa8805455",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}