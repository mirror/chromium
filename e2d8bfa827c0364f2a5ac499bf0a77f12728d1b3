{
  "comments": [
    {
      "key": {
        "uuid": "9493b682_fba36585",
        "filename": "ui/chromeos/events/modifier_key.h",
        "patchSetId": 5
      },
      "lineNbr": 10,
      "author": {
        "id": 1001380
      },
      "writtenOn": "2017-09-29T22:51:34Z",
      "side": 1,
      "message": "any reason why we don\u0027t want to use enum class here? (I\u0027m fine as is. just curious)",
      "revId": "e2d8bfa827c0364f2a5ac499bf0a77f12728d1b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f325afd4_aa3042d7",
        "filename": "ui/chromeos/events/modifier_key.h",
        "patchSetId": 5
      },
      "lineNbr": 10,
      "author": {
        "id": 1214366
      },
      "writtenOn": "2017-10-03T03:43:19Z",
      "side": 1,
      "message": "I actually did start to switch it over, but this is treated inherently as an integer in too many places that the conversion became verbose. I\u0027m also not opposed to using a class enum but I think it\u0027ll necessitate some other code changes in how we plumb these values in order to keep the code clean.",
      "parentUuid": "9493b682_fba36585",
      "revId": "e2d8bfa827c0364f2a5ac499bf0a77f12728d1b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1c175f30_b5dcbf31",
        "filename": "ui/chromeos/events/modifier_key.h",
        "patchSetId": 5
      },
      "lineNbr": 10,
      "author": {
        "id": 1001380
      },
      "writtenOn": "2017-10-03T15:22:50Z",
      "side": 1,
      "message": "I see. I\u0027d be nice if IntegerPrefMember accepts enum like this\n\n  template \u003ctypename T\u003e\n  void SetValue(T t) {\n    static_assert(std::is_enum\u003cT\u003e::value, \"Must be enum\");\n    static_assert(std::is_same\u003cValueType, int\u003e, \"must be int\");\n    SetValue(static_cast\u003cV\u003e(t));\n  }",
      "parentUuid": "f325afd4_aa3042d7",
      "revId": "e2d8bfa827c0364f2a5ac499bf0a77f12728d1b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1e33c738_af4eec54",
        "filename": "ui/chromeos/events/modifier_key.h",
        "patchSetId": 5
      },
      "lineNbr": 10,
      "author": {
        "id": 1002507
      },
      "writtenOn": "2017-10-04T06:50:40Z",
      "side": 1,
      "message": "Hmm, I have a concern about whether ui::kXxxKey is really okay or not.  Even though it\u0027s hard to make this an enum class, should we introduce another name scope?  e.g. another namespace or namespace-like class.  I\u0027m fine with ui::foo::kXxxKey or ui::Foo::kXxxKey, but we may not want to have them at ui top-level.\n\nAlso you can make this a kind of an enum class in terms of scope:\n  // TODO(someone): Make the following enum a real enum class.\n  struct ModifierKey {\n    enum {\n      kSearchKey \u003d 0\n    };\n  };\nThen, the client code needs to say \"ui::ModifierKey::kSearchKey\".  Given that this is Chrome OS specific and placed in ui/chromeos/, ui::chromeos::ModifierKey::kSearchKey would be better.",
      "parentUuid": "1c175f30_b5dcbf31",
      "revId": "e2d8bfa827c0364f2a5ac499bf0a77f12728d1b3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}