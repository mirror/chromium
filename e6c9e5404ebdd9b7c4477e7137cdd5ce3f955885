{
  "comments": [
    {
      "key": {
        "uuid": "9bfe13e5_95df1d0f",
        "filename": "third_party/WebKit/Source/platform/bindings/TraceWrapperMember.h",
        "patchSetId": 6
      },
      "lineNbr": 99,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2018-01-26T14:05:56Z",
      "side": 1,
      "message": "This operation here is actually unsafe since in the case of out-of-line backingstore buffers we store a buffer HeapVectorBacking\u003cTraceWrapperMember\u003cT\u003e\u003e in a HeapVector\u003cMember\u003cT\u003e\u003e and vice-versa. Our verification mechanisms for GCInfo rightfully triggerd on this one.\n\nI remember this optimization was visible on benchmarks which is why I added a workaround instead of doing a 1-by-1 copy.",
      "revId": "e6c9e5404ebdd9b7c4477e7137cdd5ce3f955885",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8d06327f_3a2a2e21",
        "filename": "third_party/WebKit/Source/platform/bindings/TraceWrapperMember.h",
        "patchSetId": 6
      },
      "lineNbr": 99,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2018-01-29T01:36:51Z",
      "side": 1,
      "message": "Hmm. This looks a bit too hacky...\n\n- Do you know where this swap method is used? Would you it be possible to rewrite the call site to use swap(HeapVector\u003cTraceWrapperMember\u003cT\u003e\u003e\u0026 a, HeapVector\u003cTraceWrapperMember\u003cT\u003e\u003e\u0026 b)?\n\n- Why was this not a problem before this CL?",
      "parentUuid": "9bfe13e5_95df1d0f",
      "revId": "e6c9e5404ebdd9b7c4477e7137cdd5ce3f955885",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7cbdd237_65ac21d0",
        "filename": "third_party/WebKit/Source/platform/bindings/TraceWrapperMember.h",
        "patchSetId": 6
      },
      "lineNbr": 99,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2018-01-29T10:14:57Z",
      "side": 1,
      "message": "It is indeed very hacky.. \n\n- Afaik, the method is used when creating new containers that are then linked into the wrapper traced graph (or taking out). It was sensitive to performance as we would otherwise need to (a) copy and (b) check the write barrier for each element.\n\nIf I remember correctly, we used this apporach to avoid changing a ton of callers. Essentially, anything that could at some point require plugging in to wrapper tracing would need to start off as TraceWrapperMember.\n\n- This was not a problem before this CL because we always shortcutted out-of-line backing stores and thus the GCInfo index validation did not trigger for those backing stores.",
      "parentUuid": "8d06327f_3a2a2e21",
      "revId": "e6c9e5404ebdd9b7c4477e7137cdd5ce3f955885",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "46c4f2d6_e6889f30",
        "filename": "third_party/WebKit/Source/platform/bindings/TraceWrapperMember.h",
        "patchSetId": 6
      },
      "lineNbr": 99,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2018-01-29T11:01:15Z",
      "side": 1,
      "message": "\u003e Afaik, the method is used when creating new containers that are then linked into the wrapper traced graph (or taking out).\n\nWould you point out the code that\u0027s doing this? (I just don\u0027t fully understand who is calling this swap() :-).",
      "parentUuid": "7cbdd237_65ac21d0",
      "revId": "e6c9e5404ebdd9b7c4477e7137cdd5ce3f955885",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}