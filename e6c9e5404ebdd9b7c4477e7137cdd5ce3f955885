{
  "comments": [
    {
      "key": {
        "uuid": "9bfe13e5_95df1d0f",
        "filename": "third_party/WebKit/Source/platform/bindings/TraceWrapperMember.h",
        "patchSetId": 6
      },
      "lineNbr": 99,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2018-01-26T14:05:56Z",
      "side": 1,
      "message": "This operation here is actually unsafe since in the case of out-of-line backingstore buffers we store a buffer HeapVectorBacking\u003cTraceWrapperMember\u003cT\u003e\u003e in a HeapVector\u003cMember\u003cT\u003e\u003e and vice-versa. Our verification mechanisms for GCInfo rightfully triggerd on this one.\n\nI remember this optimization was visible on benchmarks which is why I added a workaround instead of doing a 1-by-1 copy.",
      "revId": "e6c9e5404ebdd9b7c4477e7137cdd5ce3f955885",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8d06327f_3a2a2e21",
        "filename": "third_party/WebKit/Source/platform/bindings/TraceWrapperMember.h",
        "patchSetId": 6
      },
      "lineNbr": 99,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2018-01-29T01:36:51Z",
      "side": 1,
      "message": "Hmm. This looks a bit too hacky...\n\n- Do you know where this swap method is used? Would you it be possible to rewrite the call site to use swap(HeapVector\u003cTraceWrapperMember\u003cT\u003e\u003e\u0026 a, HeapVector\u003cTraceWrapperMember\u003cT\u003e\u003e\u0026 b)?\n\n- Why was this not a problem before this CL?",
      "parentUuid": "9bfe13e5_95df1d0f",
      "revId": "e6c9e5404ebdd9b7c4477e7137cdd5ce3f955885",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}