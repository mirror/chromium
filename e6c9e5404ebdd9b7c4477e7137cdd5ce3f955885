{
  "comments": [
    {
      "key": {
        "uuid": "9bfe13e5_95df1d0f",
        "filename": "third_party/WebKit/Source/platform/bindings/TraceWrapperMember.h",
        "patchSetId": 6
      },
      "lineNbr": 99,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2018-01-26T14:05:56Z",
      "side": 1,
      "message": "This operation here is actually unsafe since in the case of out-of-line backingstore buffers we store a buffer HeapVectorBacking\u003cTraceWrapperMember\u003cT\u003e\u003e in a HeapVector\u003cMember\u003cT\u003e\u003e and vice-versa. Our verification mechanisms for GCInfo rightfully triggerd on this one.\n\nI remember this optimization was visible on benchmarks which is why I added a workaround instead of doing a 1-by-1 copy.",
      "revId": "e6c9e5404ebdd9b7c4477e7137cdd5ce3f955885",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8d06327f_3a2a2e21",
        "filename": "third_party/WebKit/Source/platform/bindings/TraceWrapperMember.h",
        "patchSetId": 6
      },
      "lineNbr": 99,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2018-01-29T01:36:51Z",
      "side": 1,
      "message": "Hmm. This looks a bit too hacky...\n\n- Do you know where this swap method is used? Would you it be possible to rewrite the call site to use swap(HeapVector\u003cTraceWrapperMember\u003cT\u003e\u003e\u0026 a, HeapVector\u003cTraceWrapperMember\u003cT\u003e\u003e\u0026 b)?\n\n- Why was this not a problem before this CL?",
      "parentUuid": "9bfe13e5_95df1d0f",
      "revId": "e6c9e5404ebdd9b7c4477e7137cdd5ce3f955885",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7cbdd237_65ac21d0",
        "filename": "third_party/WebKit/Source/platform/bindings/TraceWrapperMember.h",
        "patchSetId": 6
      },
      "lineNbr": 99,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2018-01-29T10:14:57Z",
      "side": 1,
      "message": "It is indeed very hacky.. \n\n- Afaik, the method is used when creating new containers that are then linked into the wrapper traced graph (or taking out). It was sensitive to performance as we would otherwise need to (a) copy and (b) check the write barrier for each element.\n\nIf I remember correctly, we used this apporach to avoid changing a ton of callers. Essentially, anything that could at some point require plugging in to wrapper tracing would need to start off as TraceWrapperMember.\n\n- This was not a problem before this CL because we always shortcutted out-of-line backing stores and thus the GCInfo index validation did not trigger for those backing stores.",
      "parentUuid": "8d06327f_3a2a2e21",
      "revId": "e6c9e5404ebdd9b7c4477e7137cdd5ce3f955885",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "46c4f2d6_e6889f30",
        "filename": "third_party/WebKit/Source/platform/bindings/TraceWrapperMember.h",
        "patchSetId": 6
      },
      "lineNbr": 99,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2018-01-29T11:01:15Z",
      "side": 1,
      "message": "\u003e Afaik, the method is used when creating new containers that are then linked into the wrapper traced graph (or taking out).\n\nWould you point out the code that\u0027s doing this? (I just don\u0027t fully understand who is calling this swap() :-).",
      "parentUuid": "7cbdd237_65ac21d0",
      "revId": "e6c9e5404ebdd9b7c4477e7137cdd5ce3f955885",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d43264c0_2759450f",
        "filename": "third_party/WebKit/Source/platform/bindings/TraceWrapperMember.h",
        "patchSetId": 6
      },
      "lineNbr": 99,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2018-01-29T11:07:03Z",
      "side": 1,
      "message": "Sure, just click on \"swap\" in [1]. \n\nI think interseting might be e.g. StyleSheetCollection::SwapSheetsForStyleSheet [2]. It looks like the callers collect items by holding a temporary vector. This looks fine because it should not be doing wrapper tracing GCs but is indeed fragile (not sure if wrappers in JS are configured at that point). \n\nNot sure if we should open this as cleanup project or just keep on moving into the right direction.\n\n[1] https://cs.chromium.org/chromium/src/third_party/WebKit/Source/platform/bindings/TraceWrapperMember.h?l\u003d96\n[2] https://cs.chromium.org/chromium/src/third_party/WebKit/Source/core/css/StyleSheetCollection.cpp?l\u003d50",
      "parentUuid": "46c4f2d6_e6889f30",
      "revId": "e6c9e5404ebdd9b7c4477e7137cdd5ce3f955885",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "68c574ec_51ac6902",
        "filename": "third_party/WebKit/Source/platform/bindings/TraceWrapperMember.h",
        "patchSetId": 6
      },
      "lineNbr": 99,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2018-01-29T11:17:22Z",
      "side": 1,
      "message": "Ah, sorry -- I should have just used code search... :)\n\nHmm. I still a bit hesitate to hesitate to introduce FixGCInfoIndex -- changing type info sounds very tricky.\n\nDo you think it would be hard to reorganize the code like this?\n\n- For not-performance sensitive call sites, just use per-element copy.\n- For performance sensitive call sites, replace HeapVector\u003cTraceWrapperMember\u003e with HeapVector\u003cMember\u003e and use TraceWrappersWithManualWriteBarriers to trace HeapVector\u003cMember\u003e.\n- Remove swap(HeapVector\u003cTraceWrapperMember\u003e, HeapVector\u003cMember\u003e).\n\nThere are 6 call sites... Thoughts?",
      "parentUuid": "d43264c0_2759450f",
      "revId": "e6c9e5404ebdd9b7c4477e7137cdd5ce3f955885",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1af785e8_8570b219",
        "filename": "third_party/WebKit/Source/platform/bindings/TraceWrapperMember.h",
        "patchSetId": 6
      },
      "lineNbr": 99,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2018-01-29T12:48:48Z",
      "side": 1,
      "message": "Personally, I\u0027d like to move on as quickly as possible here :) I see though why you\u0027d like a more thorough investigation.\n\nI see 3 actual call site (rest is testing)\n\n- MutationObserver: Should be easily fixable as far as I can see. We can just use HeapVector\u003cTraceWrapperMember\u003cT\u003e\u003e there in a typedef and it should just work.\n- StaticNodeList::Adopt: Seems complicated and quickly spreads across various other call sites.\n- StyleSheetCollection: Similar to StaticNodeList.\n\nI will fix MutationObserver now and then see about the rest.",
      "parentUuid": "68c574ec_51ac6902",
      "revId": "e6c9e5404ebdd9b7c4477e7137cdd5ce3f955885",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "34d20e52_93e751b7",
        "filename": "third_party/WebKit/Source/platform/bindings/TraceWrapperMember.h",
        "patchSetId": 6
      },
      "lineNbr": 99,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2018-01-29T13:27:16Z",
      "side": 1,
      "message": "Another idea that might be easier: Would it be possible to hack GCInfoIndex so that HeapVectorBacking\u003cTraceWrapperMember\u003e and HeapVectorBacking\u003cMember\u003e get the same gcInfoIndex?",
      "parentUuid": "1af785e8_8570b219",
      "revId": "e6c9e5404ebdd9b7c4477e7137cdd5ce3f955885",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c46da506_91f3b6aa",
        "filename": "third_party/WebKit/Source/platform/bindings/TraceWrapperMember.h",
        "patchSetId": 6
      },
      "lineNbr": 99,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2018-01-29T17:38:38Z",
      "side": 1,
      "message": "Yeah, I think that better captures that this is a local hack. I put it right next to the swap method so that we know when we can delete it.\n\nwdyt?",
      "parentUuid": "34d20e52_93e751b7",
      "revId": "e6c9e5404ebdd9b7c4477e7137cdd5ce3f955885",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}