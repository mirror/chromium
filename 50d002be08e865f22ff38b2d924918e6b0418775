{
  "comments": [
    {
      "key": {
        "uuid": "1f76c25f_83053b8c",
        "filename": "third_party/zlib/neon_adler32.c",
        "patchSetId": 1
      },
      "lineNbr": 24,
      "author": {
        "id": 1109754
      },
      "writtenOn": "2017-08-15T04:41:44Z",
      "side": 1,
      "message": "The change description mentions a speed-up for one PNG image, best I can tell reading the related bugs?\n\nHas this code been tested on a wider corpus of PNG images?  How do we know this code it is correct?  There\u0027s no explanation of what the code below is doing.",
      "revId": "50d002be08e865f22ff38b2d924918e6b0418775",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a5eb22da_f84bafff",
        "filename": "third_party/zlib/neon_adler32.c",
        "patchSetId": 1
      },
      "lineNbr": 24,
      "author": {
        "id": 1210809
      },
      "writtenOn": "2017-08-15T18:51:27Z",
      "side": 1,
      "message": "I\u0027m actually happy that you asked this question.\n\nEven though it may be interesting to test a wide range of images, there is no guarantees if the current range of values (i.e. colors) in a given image would trigger any ill condition where the checksum would fail.\n\nIt would test the client code (e.g. libpng) for a given image but not necessarily the correctness of the checksum computation for *any* values.\n\nInstead, I validated this implementation by comparing the calculated checksum of the C code versus the results of the NEON implementation in vectors of random data.\n\nThe tests were written along the implementation of the code, please check:\nhttps://gist.github.com/Adenilson/a238ffb82ea36c19a275f340091e1d30\n\nAnd the expected result:\nhttps://gist.github.com/Adenilson/5e76240d45d385bcb941ea866d18a084\n\nIt is a bit sad that zlib doesn\u0027t have support for unit tests, it would be nice to have this added as gtests.\n\nSo for the near 90 lines of code (LOCs) in the NEON implementation, I had close to 400 LOCs in tests, with random generated values and vectors ranging from 16 to 20K in size, comparing the computed checksums (C x NEON).\n\nI also validated the implementation using the prime zlib client, libpng. It has a helper app called \u0027pngtest\u0027 that will open/decompress a PNG file and next create from the raw data a new png and compare if they match. The results for image validation were the same while using the C X NEON implementation.\n\nConcerning *what* the code does, please refer to the \u0027Algorithm\u0027 section of: https://en.wikipedia.org/wiki/Adler-32\n\nHere, \u0027taps\u0027 represents the \u0027n\u0027 scalar multiplier of \u0027B\u0027, which will be multiplied and accumulated. Think of it as a vectorized form of the code implemented to handle the tail.\n\nIf the checksum fails in a PNG file, the image will fail to be displayed in a client app (e.g. Chromium).\n\nGiven that a PNG file may have multiple IDAT segments representing the compressed zlib stream, but only a single stream with a single Adler-32 checksum of the whole uncompressed data, in case of failure (i.e. mismatch in the checksum), the png decoder must (https://www.w3.org/TR/PNG/#13Decoders.Errors):\n\"When a fatal condition occurs, the decoder should fail immediately, signal an error to the user if appropriate, and optionally continue displaying any image data already visible to the user (i.e. \"fail gracefully\"). The application as a whole need not terminate.\"",
      "parentUuid": "1f76c25f_83053b8c",
      "revId": "50d002be08e865f22ff38b2d924918e6b0418775",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3e1750d3_975952ae",
        "filename": "third_party/zlib/neon_adler32.c",
        "patchSetId": 1
      },
      "lineNbr": 24,
      "author": {
        "id": 1109754
      },
      "writtenOn": "2017-08-16T07:14:45Z",
      "side": 1,
      "message": "\u003e I\u0027m actually happy that you asked this question.\n\u003e \n\u003e Even though it may be interesting to test a wide range of images, there is no guarantees if the current range of values (i.e. colors) in a given image would trigger any ill condition where the checksum would fail.\n\u003e \n\u003e It would test the client code (e.g. libpng) for a given image but not necessarily the correctness of the checksum computation for *any* values.\n\nI was asking about speed here, not correctness.  I expect some PNG images would improve speed-wise, and I expect that some won\u0027t.\n\n\u003e Instead, I validated this implementation by comparing the calculated checksum of the C code versus the results of the NEON implementation in vectors of random data.\n\u003e \n\u003e The tests were written along the implementation of the code, please check:\n\u003e https://gist.github.com/Adenilson/a238ffb82ea36c19a275f340091e1d30\n\u003e \n\u003e And the expected result:\n\u003e https://gist.github.com/Adenilson/5e76240d45d385bcb941ea866d18a084\n\nThese are the details I was asking for: please add them to the change description.\n\n\u003e It is a bit sad that zlib doesn\u0027t have support for unit tests, it would be nice to have this added as gtests.\n\nA follow-up bug could deal with adding tests.\n \n\u003e So for the near 90 lines of code (LOCs) in the NEON implementation, I had close to 400 LOCs in tests, with random generated values and vectors ranging from 16 to 20K in size, comparing the computed checksums (C x NEON).\n\u003e\n\u003e I also validated the implementation using the prime zlib client, libpng. It has a helper app called \u0027pngtest\u0027 that will open/decompress a PNG file and next create from the raw data a new png and compare if they match. The results for image validation were the same while using the C X NEON implementation.\n\nYour change description could briefly mention how you used pngtest for validation.\n \n\u003e Concerning *what* the code does, please refer to the \u0027Algorithm\u0027 section of: https://en.wikipedia.org/wiki/Adler-32\n\u003e \n\u003e Here, \u0027taps\u0027 represents the \u0027n\u0027 scalar multiplier of \u0027B\u0027, which will be multiplied and accumulated. Think of it as a vectorized form of the code implemented to handle the tail.\n\u003e\n\nGood details once again, where should we write down those details?",
      "parentUuid": "a5eb22da_f84bafff",
      "revId": "50d002be08e865f22ff38b2d924918e6b0418775",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f5621126_9985a2e5",
        "filename": "third_party/zlib/neon_adler32.c",
        "patchSetId": 1
      },
      "lineNbr": 34,
      "author": {
        "id": 1109754
      },
      "writtenOn": "2017-08-15T04:41:44Z",
      "side": 1,
      "message": "nit: compound declaration (here and elsewhere).",
      "revId": "50d002be08e865f22ff38b2d924918e6b0418775",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0fe015ee_fd644e6b",
        "filename": "third_party/zlib/neon_adler32.c",
        "patchSetId": 1
      },
      "lineNbr": 34,
      "author": {
        "id": 1109754
      },
      "writtenOn": "2017-08-16T07:14:45Z",
      "side": 1,
      "message": "\u003e nit: compound declaration (here and elsewhere).\n\nI see you know of https://godbolt.org -- it\u0027s a good place to experiment with asm output, compiler flags, for some code we\u0027re testing.  Experimentation is even easier when there are no compound declarations, I note.",
      "parentUuid": "f5621126_9985a2e5",
      "revId": "50d002be08e865f22ff38b2d924918e6b0418775",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1bf94dee_a21b8103",
        "filename": "third_party/zlib/neon_adler32.c",
        "patchSetId": 1
      },
      "lineNbr": 34,
      "author": {
        "id": 1145695
      },
      "writtenOn": "2017-08-17T03:45:53Z",
      "side": 1,
      "message": "Indeed, it is an amazing tool.",
      "parentUuid": "0fe015ee_fd644e6b",
      "revId": "50d002be08e865f22ff38b2d924918e6b0418775",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0e89ec9c_ff79c5a1",
        "filename": "third_party/zlib/neon_adler32.c",
        "patchSetId": 1
      },
      "lineNbr": 46,
      "author": {
        "id": 1109754
      },
      "writtenOn": "2017-08-15T04:41:44Z",
      "side": 1,
      "message": "|t0|,|t1| are constants.  Would there be any advantage in computing their vget_low_u8 / vget_high_u8 values and storing those in variables outside the while loop?",
      "revId": "50d002be08e865f22ff38b2d924918e6b0418775",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cfeb072c_746d880a",
        "filename": "third_party/zlib/neon_adler32.c",
        "patchSetId": 1
      },
      "lineNbr": 46,
      "author": {
        "id": 1210809
      },
      "writtenOn": "2017-08-15T18:51:27Z",
      "side": 1,
      "message": "Any good compiler should identify that and move the code outside of the loop, please see (check lines 24 and 27): https://godbolt.org/g/KMeBAJ\n\nUnless this is a main issue, I prefer the keep the code as it is.",
      "parentUuid": "0e89ec9c_ff79c5a1",
      "revId": "50d002be08e865f22ff38b2d924918e6b0418775",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f4017d42_6365e708",
        "filename": "third_party/zlib/neon_adler32.c",
        "patchSetId": 1
      },
      "lineNbr": 46,
      "author": {
        "id": 1109754
      },
      "writtenOn": "2017-08-16T07:14:45Z",
      "side": 1,
      "message": "Thank you for the https://godbolt.org/g/KMeBAJ results, they look good (the constants hoisted out of the loop).",
      "parentUuid": "cfeb072c_746d880a",
      "revId": "50d002be08e865f22ff38b2d924918e6b0418775",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b6cee86a_726a02f7",
        "filename": "third_party/zlib/neon_adler32.c",
        "patchSetId": 1
      },
      "lineNbr": 46,
      "author": {
        "id": 1145695
      },
      "writtenOn": "2017-08-17T03:45:53Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "f4017d42_6365e708",
      "revId": "50d002be08e865f22ff38b2d924918e6b0418775",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ee598156_a4f2c7ac",
        "filename": "third_party/zlib/neon_adler32.c",
        "patchSetId": 1
      },
      "lineNbr": 79,
      "author": {
        "id": 1109754
      },
      "writtenOn": "2017-08-15T04:41:44Z",
      "side": 1,
      "message": "Odd comment.  This function definition won\u0027t work in K\u0026R, so commenting that the body is K\u0026R seems at odds with that.",
      "revId": "50d002be08e865f22ff38b2d924918e6b0418775",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4c3bc610_e40353e6",
        "filename": "third_party/zlib/neon_adler32.c",
        "patchSetId": 1
      },
      "lineNbr": 79,
      "author": {
        "id": 1210809
      },
      "writtenOn": "2017-08-15T18:51:27Z",
      "side": 1,
      "message": "It is being a little while (over 7 months), but IIRC in one of the first experiments integrating this code in one of the multiple zlib forks, the build would fail unless I had the code in this way.\n\nI tested current zlib (with CMake buildsystem) and current Chromium build for Android and it works fine without the K\u0026R code.\n\nTherefore, I\u0027m updating the code as you suggested.",
      "parentUuid": "ee598156_a4f2c7ac",
      "revId": "50d002be08e865f22ff38b2d924918e6b0418775",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8bdc543b_c13850cd",
        "filename": "third_party/zlib/neon_adler32.c",
        "patchSetId": 1
      },
      "lineNbr": 101,
      "author": {
        "id": 1109754
      },
      "writtenOn": "2017-08-15T04:41:44Z",
      "side": 1,
      "message": "Why is |n| signed?",
      "revId": "50d002be08e865f22ff38b2d924918e6b0418775",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "55b01dc3_0e93c397",
        "filename": "third_party/zlib/neon_adler32.c",
        "patchSetId": 1
      },
      "lineNbr": 101,
      "author": {
        "id": 1210809
      },
      "writtenOn": "2017-08-15T18:51:27Z",
      "side": 1,
      "message": "Nice catch! :-)",
      "parentUuid": "8bdc543b_c13850cd",
      "revId": "50d002be08e865f22ff38b2d924918e6b0418775",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "88546e63_e3ffc2f7",
        "filename": "third_party/zlib/neon_adler32.c",
        "patchSetId": 1
      },
      "lineNbr": 101,
      "author": {
        "id": 1109754
      },
      "writtenOn": "2017-08-16T07:14:45Z",
      "side": 1,
      "message": "\u003e Nice catch! :-)\n\nnit: const int M_NMAX \u003d 5552; is _signed_ :)  \n\nMaybe using a #define (as zlib does, see adler32.c) would be better.",
      "parentUuid": "55b01dc3_0e93c397",
      "revId": "50d002be08e865f22ff38b2d924918e6b0418775",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e4a8da88_adbe3331",
        "filename": "third_party/zlib/neon_adler32.c",
        "patchSetId": 1
      },
      "lineNbr": 101,
      "author": {
        "id": 1145695
      },
      "writtenOn": "2017-08-17T03:45:53Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "88546e63_e3ffc2f7",
      "revId": "50d002be08e865f22ff38b2d924918e6b0418775",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "00954fc6_fa1d0908",
        "filename": "third_party/zlib/neon_adler32.c",
        "patchSetId": 1
      },
      "lineNbr": 103,
      "author": {
        "id": 1109754
      },
      "writtenOn": "2017-08-15T04:41:44Z",
      "side": 1,
      "message": "Comment is odd.  There\u0027s code before this block of declaration (line 91) and that\u0027d prevent compilation with a K\u0026R compiler, no?",
      "revId": "50d002be08e865f22ff38b2d924918e6b0418775",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1aff3d3e_3a90d706",
        "filename": "third_party/zlib/neon_adler32.c",
        "patchSetId": 1
      },
      "lineNbr": 103,
      "author": {
        "id": 1210809
      },
      "writtenOn": "2017-08-15T18:51:27Z",
      "side": 1,
      "message": "See previous comment.",
      "parentUuid": "00954fc6_fa1d0908",
      "revId": "50d002be08e865f22ff38b2d924918e6b0418775",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2b15538f_90e9e1ea",
        "filename": "third_party/zlib/neon_adler32.c",
        "patchSetId": 1
      },
      "lineNbr": 106,
      "author": {
        "id": 1109754
      },
      "writtenOn": "2017-08-15T04:41:44Z",
      "side": 1,
      "message": "/* split Adler-32 into component sums */",
      "revId": "50d002be08e865f22ff38b2d924918e6b0418775",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "03de89f2_85d71191",
        "filename": "third_party/zlib/neon_adler32.c",
        "patchSetId": 1
      },
      "lineNbr": 106,
      "author": {
        "id": 1210809
      },
      "writtenOn": "2017-08-15T18:51:27Z",
      "side": 1,
      "message": "Here I followed the Blink coding style: https://chromium.googlesource.com/chromium/src/+/master/styleguide/c++/blink-c++.md#Comments",
      "parentUuid": "2b15538f_90e9e1ea",
      "revId": "50d002be08e865f22ff38b2d924918e6b0418775",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2970435e_4464dfb6",
        "filename": "third_party/zlib/neon_adler32.c",
        "patchSetId": 1
      },
      "lineNbr": 106,
      "author": {
        "id": 1109754
      },
      "writtenOn": "2017-08-16T07:14:45Z",
      "side": 1,
      "message": "The \"it can be supplied by ...\" is not so irrelevant, let\u0027s remove it please.\nThe /* split Adler-32 into component sums */ part proceeds this code elsewhere in zlib, best to stick with that.",
      "parentUuid": "03de89f2_85d71191",
      "revId": "50d002be08e865f22ff38b2d924918e6b0418775",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5f06cd82_8153357f",
        "filename": "third_party/zlib/neon_adler32.c",
        "patchSetId": 1
      },
      "lineNbr": 106,
      "author": {
        "id": 1145695
      },
      "writtenOn": "2017-08-17T03:45:53Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "2970435e_4464dfb6",
      "revId": "50d002be08e865f22ff38b2d924918e6b0418775",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b258551c_76a74e73",
        "filename": "third_party/zlib/neon_adler32.c",
        "patchSetId": 1
      },
      "lineNbr": 109,
      "author": {
        "id": 1109754
      },
      "writtenOn": "2017-08-15T04:41:44Z",
      "side": 1,
      "message": "Could |alder|\u0027s type be changed to unsigned int?  Wouldn\u0027t need the \u0026 0xffff here if so.",
      "revId": "50d002be08e865f22ff38b2d924918e6b0418775",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "97ccaeea_960aa2d6",
        "filename": "third_party/zlib/neon_adler32.c",
        "patchSetId": 1
      },
      "lineNbr": 109,
      "author": {
        "id": 1210809
      },
      "writtenOn": "2017-08-15T18:51:27Z",
      "side": 1,
      "message": "Nopes, because it may be passed along to the function from a previous computation.\n\nThat would require to change the public function interface (e.g. the NEON implementation must be a drop-in replacement) as also call sites in zlib (and maybe client code in libpng).",
      "parentUuid": "b258551c_76a74e73",
      "revId": "50d002be08e865f22ff38b2d924918e6b0418775",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9e49699d_bcab589e",
        "filename": "third_party/zlib/neon_adler32.c",
        "patchSetId": 1
      },
      "lineNbr": 109,
      "author": {
        "id": 1109754
      },
      "writtenOn": "2017-08-16T07:14:45Z",
      "side": 1,
      "message": "\u003e Nopes, because it may be passed along to the function from a previous computation.\n\u003e\n\u003e That would require to change the public function interface (e.g. the NEON implementation must be a drop-in replacement) as also call sites in zlib (and maybe client code in libpng).\n\nThe calculation only uses the lower 2 bytes of that \"previous computation\",\nand ignores the rest.\n\nNEON_adler32 is an internal detail (or should be). The public interface is adler32(), which what clients like zlib / libpng call.\n\nBrings up another point.  adler32_z() is also on the public interface too, but for some reason you did not update that path with NEON support.",
      "parentUuid": "97ccaeea_960aa2d6",
      "revId": "50d002be08e865f22ff38b2d924918e6b0418775",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f21191a7_4ba1b920",
        "filename": "third_party/zlib/neon_adler32.c",
        "patchSetId": 1
      },
      "lineNbr": 109,
      "author": {
        "id": 1145695
      },
      "writtenOn": "2017-08-17T03:45:53Z",
      "side": 1,
      "message": "The function adler32_z() was only recently introduced starting with zlib 1.2.11 (I started this optimization work on version 1.2.8) (https://github.com/madler/zlib/commit/b9ae6f0079099c1b2e26abbb434725c4cf62d6b2).\n\nOne alternative instead of adding the hook in both functions to the NEON code would be instead to add it only in adler32_z() (since it is used by adler32).\n\nFor PNG use case, the patch is correct because they use adler32():\nhttps://cs.chromium.org/chromium/src/third_party/libpng/png.c?type\u003dcs\u0026l\u003d2327\n\nI have one concern though that size_t can be an integer of 64bits in AArch64.",
      "parentUuid": "9e49699d_bcab589e",
      "revId": "50d002be08e865f22ff38b2d924918e6b0418775",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1bdd523c_0ec4e61d",
        "filename": "third_party/zlib/neon_adler32.c",
        "patchSetId": 1
      },
      "lineNbr": 109,
      "author": {
        "id": 1109754
      },
      "writtenOn": "2017-08-23T12:59:28Z",
      "side": 1,
      "message": "Yes, adding it to adler32_z() would support all cases.  The only thing to deal with is the size_t issue.  Let me look at the latest patches ...",
      "parentUuid": "f21191a7_4ba1b920",
      "revId": "50d002be08e865f22ff38b2d924918e6b0418775",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}