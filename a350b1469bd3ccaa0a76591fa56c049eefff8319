{
  "comments": [
    {
      "key": {
        "uuid": "0edc32d3_82cf905e",
        "filename": "media/audio/audio_debug_file_writer_unittest.cc",
        "patchSetId": 23
      },
      "lineNbr": 203,
      "author": {
        "id": 1153409
      },
      "writtenOn": "2018-01-11T11:33:09Z",
      "side": 1,
      "message": "nit: empty line before.\nAlso, could you make it private static, or better just a helper in an unnamed namespace?",
      "revId": "a350b1469bd3ccaa0a76591fa56c049eefff8319",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d43e5dbc_190571ff",
        "filename": "media/audio/audio_debug_file_writer_unittest.cc",
        "patchSetId": 23
      },
      "lineNbr": 203,
      "author": {
        "id": 1247905
      },
      "writtenOn": "2018-01-11T12:54:19Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0edc32d3_82cf905e",
      "revId": "a350b1469bd3ccaa0a76591fa56c049eefff8319",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5e2966c1_76ba26af",
        "filename": "media/audio/audio_debug_file_writer_unittest.cc",
        "patchSetId": 23
      },
      "lineNbr": 205,
      "author": {
        "id": 1153409
      },
      "writtenOn": "2018-01-11T11:33:09Z",
      "side": 1,
      "message": "FLAG_CREATE_ALWAYS",
      "revId": "a350b1469bd3ccaa0a76591fa56c049eefff8319",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "87b68cc7_86950ff4",
        "filename": "media/audio/audio_debug_file_writer_unittest.cc",
        "patchSetId": 23
      },
      "lineNbr": 205,
      "author": {
        "id": 1247905
      },
      "writtenOn": "2018-01-11T12:54:19Z",
      "side": 1,
      "message": "Why FLAG_CREATE_ALWAYS? The file is created already with CreateTemporaryFile, we want to open the file. I have renamed CreateFile function to OpenFile to reflect that, and used FLAG_OPEN.",
      "parentUuid": "5e2966c1_76ba26af",
      "revId": "a350b1469bd3ccaa0a76591fa56c049eefff8319",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5a24596e_ba7ca722",
        "filename": "media/audio/audio_debug_file_writer_unittest.cc",
        "patchSetId": 23
      },
      "lineNbr": 205,
      "author": {
        "id": 1153409
      },
      "writtenOn": "2018-01-11T13:09:13Z",
      "side": 1,
      "message": "Switch to CreateAndOpenTemporaryFile()?",
      "parentUuid": "87b68cc7_86950ff4",
      "revId": "a350b1469bd3ccaa0a76591fa56c049eefff8319",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c84087b3_04606f5c",
        "filename": "media/audio/audio_debug_file_writer_unittest.cc",
        "patchSetId": 23
      },
      "lineNbr": 205,
      "author": {
        "id": 1247905
      },
      "writtenOn": "2018-01-11T13:34:06Z",
      "side": 1,
      "message": "Hmm CreateAndOpenTemporaryFile returns a FILE*, and base::File doesn\u0027t have a constructor taking a FILE*. Leave it as is with OpenFile()? :)",
      "parentUuid": "5a24596e_ba7ca722",
      "revId": "a350b1469bd3ccaa0a76591fa56c049eefff8319",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6d3d48ac_3f455068",
        "filename": "media/audio/audio_debug_file_writer_unittest.cc",
        "patchSetId": 23
      },
      "lineNbr": 205,
      "author": {
        "id": 1153409
      },
      "writtenOn": "2018-01-11T13:53:59Z",
      "side": 1,
      "message": "\u003e\u003eWhy FLAG_CREATE_ALWAYS? The file is created already with CreateTemporaryFile, we want to open the file. I have renamed CreateFile function to OpenFile to reflect that, and used FLAG_OPEN.\n\nHow CreateTemporaryFile behaves if the file with a specified name already exists?\n\nFLAG_CREATE_ALWAYS guarantees that such a file will be overwritten (as opposite to appending which happens in case of FLAG_OPEN). When the test fails the file is kept, not deleted, right? So the second time the test runs the recording will be appended, and second run will be misleading.",
      "parentUuid": "c84087b3_04606f5c",
      "revId": "a350b1469bd3ccaa0a76591fa56c049eefff8319",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2afd78b5_ecdec6d8",
        "filename": "media/audio/audio_debug_file_writer_unittest.cc",
        "patchSetId": 23
      },
      "lineNbr": 205,
      "author": {
        "id": 1247905
      },
      "writtenOn": "2018-01-11T14:53:16Z",
      "side": 1,
      "message": "FLAG_WRITE guarantees that the file will be overwritten, and that we don\u0027t append to current content (FLAG_APPEND). I think it\u0027s correct as it is.",
      "parentUuid": "6d3d48ac_3f455068",
      "revId": "a350b1469bd3ccaa0a76591fa56c049eefff8319",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fce7be48_52798266",
        "filename": "media/audio/audio_debug_file_writer_unittest.cc",
        "patchSetId": 23
      },
      "lineNbr": 205,
      "author": {
        "id": 1153409
      },
      "writtenOn": "2018-01-11T15:26:49Z",
      "side": 1,
      "message": "Basing on our offline discussion and Marina\u0027s sample code results, my vague memories of the issue with using OPEN vs CREATE are not confirmed :)",
      "parentUuid": "2afd78b5_ecdec6d8",
      "revId": "a350b1469bd3ccaa0a76591fa56c049eefff8319",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5059ee7f_3f8e4acb",
        "filename": "media/audio/audio_debug_file_writer_unittest.cc",
        "patchSetId": 23
      },
      "lineNbr": 256,
      "author": {
        "id": 1153409
      },
      "writtenOn": "2018-01-11T11:33:09Z",
      "side": 1,
      "message": "Optional nit: switch to ASSERT_TRUE for lines like this?\nsee https://cs.chromium.org/chromium/src/third_party/googletest/src/googletest/include/gtest/gtest.h?type\u003dcs\u0026l\u003d1784",
      "revId": "a350b1469bd3ccaa0a76591fa56c049eefff8319",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6b163bdf_f96f577e",
        "filename": "media/audio/audio_debug_file_writer_unittest.cc",
        "patchSetId": 23
      },
      "lineNbr": 256,
      "author": {
        "id": 1247905
      },
      "writtenOn": "2018-01-11T12:54:19Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5059ee7f_3f8e4acb",
      "revId": "a350b1469bd3ccaa0a76591fa56c049eefff8319",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f8b4ed90_4f3e8653",
        "filename": "media/audio/audio_debug_file_writer_unittest.cc",
        "patchSetId": 23
      },
      "lineNbr": 278,
      "author": {
        "id": 1153409
      },
      "writtenOn": "2018-01-11T11:33:09Z",
      "side": 1,
      "message": "Ideally, test name need should reflect what is verified, or it should have a comment explaining that.\nSomething like \"InvalidFileDoesNotCrashRecroding\" would work here (yes, test case names can be that long - it\u0027s fine!).",
      "revId": "a350b1469bd3ccaa0a76591fa56c049eefff8319",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "198fbec2_f187a5d7",
        "filename": "media/audio/audio_debug_file_writer_unittest.cc",
        "patchSetId": 23
      },
      "lineNbr": 278,
      "author": {
        "id": 1247905
      },
      "writtenOn": "2018-01-11T12:54:19Z",
      "side": 1,
      "message": "Done, I renamed it to StartWithInvalidFile, to reflect the action, and added a comment to reflect the expectation.",
      "parentUuid": "f8b4ed90_4f3e8653",
      "revId": "a350b1469bd3ccaa0a76591fa56c049eefff8319",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0d4e65c0_cd977c41",
        "filename": "media/audio/audio_debug_recording_helper.h",
        "patchSetId": 23
      },
      "lineNbr": 65,
      "author": {
        "id": 1153409
      },
      "writtenOn": "2018-01-11T11:33:09Z",
      "side": 1,
      "message": "|create_file_callback_|",
      "revId": "a350b1469bd3ccaa0a76591fa56c049eefff8319",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5b63d691_88a30329",
        "filename": "media/audio/audio_debug_recording_helper.h",
        "patchSetId": 23
      },
      "lineNbr": 65,
      "author": {
        "id": 1247905
      },
      "writtenOn": "2018-01-11T12:54:19Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0d4e65c0_cd977c41",
      "revId": "a350b1469bd3ccaa0a76591fa56c049eefff8319",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3e56bdc0_cef00bed",
        "filename": "media/audio/audio_debug_recording_helper.h",
        "patchSetId": 23
      },
      "lineNbr": 86,
      "author": {
        "id": 1153409
      },
      "writtenOn": "2018-01-11T11:33:09Z",
      "side": 1,
      "message": "Actually, reading the code, it should be called \"StartDebugRecordingToFile\"\nAnd the comment \"Called back by |create_file_callback_|, starts recording to the file it created.\"?\n(Prefer to use member names instead of their type names, what you actually meant members.)",
      "revId": "a350b1469bd3ccaa0a76591fa56c049eefff8319",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5c517f07_347bbed0",
        "filename": "media/audio/audio_debug_recording_helper.h",
        "patchSetId": 23
      },
      "lineNbr": 86,
      "author": {
        "id": 1247905
      },
      "writtenOn": "2018-01-11T12:54:19Z",
      "side": 1,
      "message": "Actually I would leave it EnableDebugRecordingToFile, because in this function we set recording_enabled_. OnData doesn\u0027t write until this flag is set.",
      "parentUuid": "3e56bdc0_cef00bed",
      "revId": "a350b1469bd3ccaa0a76591fa56c049eefff8319",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e943a82c_4bbcc726",
        "filename": "media/audio/audio_debug_recording_helper.h",
        "patchSetId": 23
      },
      "lineNbr": 86,
      "author": {
        "id": 1153409
      },
      "writtenOn": "2018-01-11T13:09:13Z",
      "side": 1,
      "message": "A pair of \"Enable\" and \"EnableToFile\" looks much more confusing to me than \"Enable\" and \"Start\": Start() naturally follows Enable(). Up to you, but please fix the comment: method is not a callback in our terminology, and it is passed to |create_file_callback_| object.",
      "parentUuid": "5c517f07_347bbed0",
      "revId": "a350b1469bd3ccaa0a76591fa56c049eefff8319",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "92a77924_09b89e6e",
        "filename": "media/audio/audio_debug_recording_helper.h",
        "patchSetId": 23
      },
      "lineNbr": 86,
      "author": {
        "id": 1247905
      },
      "writtenOn": "2018-01-11T13:34:06Z",
      "side": 1,
      "message": "Ok, done.",
      "parentUuid": "e943a82c_4bbcc726",
      "revId": "a350b1469bd3ccaa0a76591fa56c049eefff8319",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8049e402_c9fc7cdb",
        "filename": "media/audio/audio_debug_recording_helper.h",
        "patchSetId": 23
      },
      "lineNbr": 100,
      "author": {
        "id": 1153409
      },
      "writtenOn": "2018-01-11T11:33:09Z",
      "side": 1,
      "message": "Drop the second sentence? It\u0027s duplication of EnableDebugRecordingToFile() comment.",
      "revId": "a350b1469bd3ccaa0a76591fa56c049eefff8319",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6ae461ab_99ebe981",
        "filename": "media/audio/audio_debug_recording_helper.h",
        "patchSetId": 23
      },
      "lineNbr": 100,
      "author": {
        "id": 1247905
      },
      "writtenOn": "2018-01-11T12:54:19Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8049e402_c9fc7cdb",
      "revId": "a350b1469bd3ccaa0a76591fa56c049eefff8319",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b7af5f06_47ce2d77",
        "filename": "media/audio/audio_debug_recording_manager.cc",
        "patchSetId": 23
      },
      "lineNbr": 38,
      "author": {
        "id": 1153409
      },
      "writtenOn": "2018-01-11T11:33:09Z",
      "side": 1,
      "message": "Drop the comment? It\u0027s clear without it.",
      "revId": "a350b1469bd3ccaa0a76591fa56c049eefff8319",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8fee8f23_4088730d",
        "filename": "media/audio/audio_debug_recording_manager.cc",
        "patchSetId": 23
      },
      "lineNbr": 38,
      "author": {
        "id": 1247905
      },
      "writtenOn": "2018-01-11T12:54:19Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b7af5f06_47ce2d77",
      "revId": "a350b1469bd3ccaa0a76591fa56c049eefff8319",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "edb5aecb_9b06921f",
        "filename": "media/audio/audio_debug_recording_manager.cc",
        "patchSetId": 23
      },
      "lineNbr": 50,
      "author": {
        "id": 1153409
      },
      "writtenOn": "2018-01-11T11:33:09Z",
      "side": 1,
      "message": "You could drop CreateFileOnBackgroudThread altogether and use lambda instead. But up to you.",
      "revId": "a350b1469bd3ccaa0a76591fa56c049eefff8319",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "88e5afd2_dceb2065",
        "filename": "media/audio/audio_debug_recording_manager.cc",
        "patchSetId": 23
      },
      "lineNbr": 50,
      "author": {
        "id": 1247905
      },
      "writtenOn": "2018-01-11T12:54:19Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "edb5aecb_9b06921f",
      "revId": "a350b1469bd3ccaa0a76591fa56c049eefff8319",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5231e555_65bf6bc1",
        "filename": "media/audio/audio_debug_recording_manager_unittest.cc",
        "patchSetId": 23
      },
      "lineNbr": 53,
      "author": {
        "id": 1153409
      },
      "writtenOn": "2018-01-11T11:33:09Z",
      "side": 1,
      "message": "We usually don\u0027t name a function \"callback\" (and don\u0027t refer to it as a \"callback\" in documentation): callback usually refers to base::Callback.",
      "revId": "a350b1469bd3ccaa0a76591fa56c049eefff8319",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4cad9d97_f03f2384",
        "filename": "media/audio/audio_debug_recording_manager_unittest.cc",
        "patchSetId": 23
      },
      "lineNbr": 53,
      "author": {
        "id": 1247905
      },
      "writtenOn": "2018-01-11T12:54:19Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5231e555_65bf6bc1",
      "revId": "a350b1469bd3ccaa0a76591fa56c049eefff8319",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "de2e84aa_c1a1a661",
        "filename": "media/audio/audio_debug_recording_manager_unittest.cc",
        "patchSetId": 23
      },
      "lineNbr": 108,
      "author": {
        "id": 1153409
      },
      "writtenOn": "2018-01-11T11:33:09Z",
      "side": 1,
      "message": "Could you bind to a mock method instead and set expectations for it in the tests?",
      "revId": "a350b1469bd3ccaa0a76591fa56c049eefff8319",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3939800f_667c97d1",
        "filename": "media/audio/audio_debug_recording_manager_unittest.cc",
        "patchSetId": 23
      },
      "lineNbr": 108,
      "author": {
        "id": 1247905
      },
      "writtenOn": "2018-01-11T12:54:19Z",
      "side": 1,
      "message": "This callback is run by AudioDebugRecordingHelper::EnableDebugRecording, but in these tests AudioDebugRecordingHelper::EnableDebugRecording is mocked, so this callback doesn\u0027t get to be run.",
      "parentUuid": "de2e84aa_c1a1a661",
      "revId": "a350b1469bd3ccaa0a76591fa56c049eefff8319",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4f2ab253_cc97c4de",
        "filename": "media/audio/audio_debug_recording_manager_unittest.cc",
        "patchSetId": 23
      },
      "lineNbr": 108,
      "author": {
        "id": 1153409
      },
      "writtenOn": "2018-01-11T13:09:13Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "3939800f_667c97d1",
      "revId": "a350b1469bd3ccaa0a76591fa56c049eefff8319",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}