{
  "comments": [
    {
      "key": {
        "uuid": "04c3e031_c1cdec58",
        "filename": "content/browser/frame_host/cross_process_frame_connector.cc",
        "patchSetId": 12
      },
      "lineNbr": 382,
      "author": {
        "id": 1211699
      },
      "writtenOn": "2017-08-09T14:56:23Z",
      "side": 1,
      "message": "You should use FrameTree::SubtreeNodes, like this:\n\nif (visible) {\n  FTN* ftn \u003d frame_proxy_in_parent_renderer_-\u003eframe_tree_node();\n  for (FTN* node \u003d ftn-\u003eframe_tree()-\u003eSubtreeNodes(ftn)) {\n    if (node-\u003ecurrent_frame_host()-\u003eis_local_root() \u0026\u0026 view) {\n      view-\u003eShow();\n    }\n  }\n} else ...\n\nIt saves a lot of boilerplate code and I think it\u0027s more consistent with the way we iterate the tree today.",
      "revId": "51972bb861bfd0f96c68bc066bbff5527eaf5b16",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f6a382ad_78363682",
        "filename": "content/browser/frame_host/cross_process_frame_connector.cc",
        "patchSetId": 12
      },
      "lineNbr": 382,
      "author": {
        "id": 1001433
      },
      "writtenOn": "2017-08-09T21:27:16Z",
      "side": 1,
      "message": "I think the goal is to do depth-first recursion, rather than iterate the entire subtree. I don\u0027t think NodeRange provides a way to dynamically exclude certain subtrees within the main subtree.",
      "parentUuid": "04c3e031_c1cdec58",
      "revId": "51972bb861bfd0f96c68bc066bbff5527eaf5b16",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a4a95314_4cc2c2fa",
        "filename": "content/browser/frame_host/cross_process_frame_connector.cc",
        "patchSetId": 12
      },
      "lineNbr": 382,
      "author": {
        "id": 1211699
      },
      "writtenOn": "2017-08-09T21:40:03Z",
      "side": 1,
      "message": "I see, I understand it now, but I think the code is hard to follow. The children being in the recursion tree and Show() being called through a callback is not easy to read.\n\nPerhaps we could do something like GetRenderWidgetHostViewsInTree(), but for a subtree, and have some way to avoid the unnecessary recursion in RenderWidgetHostViewChildFrame::Show() ?",
      "parentUuid": "f6a382ad_78363682",
      "revId": "51972bb861bfd0f96c68bc066bbff5527eaf5b16",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "869b7fe6_23a2febb",
        "filename": "content/browser/frame_host/cross_process_frame_connector.cc",
        "patchSetId": 12
      },
      "lineNbr": 382,
      "author": {
        "id": 1126745
      },
      "writtenOn": "2017-08-10T16:20:48Z",
      "side": 1,
      "message": "\"I see, I understand it now, but I think the code is hard to follow. The children being in the recursion tree and Show() being called through a callback is not easy to read.\"\n\nI agree it might be a bit confusing and I am open to suggestions. However, this is similar to WebContents::ForEachFrame and I think having a similar API for each local root might be helpful when we propapage something down the tree with the possibility of stopping the propagation for a certain subtree.\n\n\"Perhaps we could do something like GetRenderWidgetHostViewsInTree(), but for a subtree, and have some way to avoid the unnecessary recursion in RenderWidgetHostViewChildFrame::Show() ?\"\n\nI am not quite sure how this resolves our issue. Say the tree is \n    A\n   / \\\n  B   C\n\nand WebContents::WasShown is called while C is CSS hidden. We would like to avoid calling Show on any of its children.",
      "parentUuid": "a4a95314_4cc2c2fa",
      "revId": "51972bb861bfd0f96c68bc066bbff5527eaf5b16",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a683b5f5_5f9f2251",
        "filename": "content/browser/frame_host/render_frame_host_impl.h",
        "patchSetId": 12
      },
      "lineNbr": 648,
      "author": {
        "id": 1001433
      },
      "writtenOn": "2017-08-09T21:27:16Z",
      "side": 1,
      "message": "Is there any reason to put this here rather than in FrameTree?\n\nAlso, it would be nice if we could generalize this a bit and unify it WebContentsImpl::GetRenderWidgetHostViewsInTree(), since these functions end up looking very similar.",
      "revId": "51972bb861bfd0f96c68bc066bbff5527eaf5b16",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d5d03dba_aee7f79c",
        "filename": "content/browser/frame_host/render_frame_host_impl.h",
        "patchSetId": 12
      },
      "lineNbr": 648,
      "author": {
        "id": 1126745
      },
      "writtenOn": "2017-08-10T16:20:48Z",
      "side": 1,
      "message": "\"Is there any reason to put this here rather than in FrameTree?\"\n\nMy reasons where:\n1- I assumed the usage of term \"local root\" is associated with RenderFrameHostImpl given that it is exposed here:\nhttps://cs.chromium.org/chromium/src/content/browser/frame_host/render_frame_host_impl.h?rcl\u003d80761605e4fc0b7cb8ae7aa67e0a1c4c12baaa3e\u0026l\u003d320\n\n2- WebContents::ForEachFrame uses a similar API for each frame by passing RenderFrameHost so I though this should be similar and maybe also more congruent to have it in the RenderFrameHostImple itself.\n\nThat being said I do not have a strong preference/reason to have it here rather than say FrameTree/FrameTreeNode itself (I think out of FTN and FT, FTN might be a better candidate).\n\n\"Also, it would be nice if we could generalize this a bit and unify it WebContentsImpl::GetRenderWidgetHostViewsInTree(), since these functions end up looking very similar.\"\n\nThe difference I see between GetRenderWidgetHostViewsInTree() and this new approach is that the former is a nondiscriminatory API call which should be applied to all views (indeed not the case for calling Show  since some LocalRoot\u0027s children might not be supposed to be shown at all), whereas the former gives us the means to selectively call the API. So maybe they both need to exist.\n\nThat being said, the other use cases of GetRenderWidgetHostViewsInTree() are:\n1- Calling WasOccluded and WasUnoccluded (only used/implemented in RWHVMac).\n2- Calling view-\u003eGetRenderWidgetHost()-\u003eWasResized() on all RWHVCFs.\n\nIt seems like 1) should be replaced by \n#if defined(OS_MACOSX)\nif (auto* view \u003d GetRenderWidgetHostView())\n view-\u003eWasOccluded();\n#endif\n\nand similarly for Unoccluded.\n\nFor WasResized we could either propagate through RWHVCF and CPFC the same was as this patch or, just directly traverse the frame tree and call it on each local root.",
      "parentUuid": "a683b5f5_5f9f2251",
      "revId": "51972bb861bfd0f96c68bc066bbff5527eaf5b16",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "23993fc9_cbf2e880",
        "filename": "content/browser/frame_host/render_frame_host_impl.h",
        "patchSetId": 12
      },
      "lineNbr": 648,
      "author": {
        "id": 1001433
      },
      "writtenOn": "2017-08-10T20:27:51Z",
      "side": 1,
      "message": "I guess what I\u0027m thinking is that we might want to have a general facility for walking through RenderWidgetHost(View)s in the tree, which would be flexible enough for all such cases. Maybe we should just file a bug to revisit that idea, and see if a refactor makes sense there.\n\nAs it is, if you are looking for local roots then it always means that you are looking for RWHs or RWHVs, since in the browser process the definition of a local root RenderFrameHost is that it has an RWH attached.",
      "parentUuid": "d5d03dba_aee7f79c",
      "revId": "51972bb861bfd0f96c68bc066bbff5527eaf5b16",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ee8c9467_8657cdc4",
        "filename": "content/browser/frame_host/render_frame_host_impl.h",
        "patchSetId": 12
      },
      "lineNbr": 648,
      "author": {
        "id": 1126745
      },
      "writtenOn": "2017-08-11T16:11:21Z",
      "side": 1,
      "message": "Yes I agree. This is the vision I had when adding the API (to walk the virtual RWHV tree top-down). I did not find a graceful way to add it to renderer_host/ given the layering constraints between frame_host/ and renderer_host/. Perhaps we could add it in WebContentsImpl later and pass the view to get a subview but that is also nontrivial to resolve in WebContens given the CPFC is private and I don\u0027t know an efficient way of finding the FTN from a RWHVCF.\n\nAll in all, for now, I have added a bug reference as suggested.",
      "parentUuid": "23993fc9_cbf2e880",
      "revId": "51972bb861bfd0f96c68bc066bbff5527eaf5b16",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a6dc4a7e_ddc34004",
        "filename": "content/browser/frame_host/render_frame_host_impl.h",
        "patchSetId": 12
      },
      "lineNbr": 648,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-08-11T19:41:32Z",
      "side": 1,
      "message": "I agree this isn\u0027t ideal to have in RFH.  Given that it\u0027s difficult to implement the general facility for walking down RWHVs, and that is_local_root is currently in RFH, it\u0027s probably ok to leave here for now.  FTN/FT don\u0027t really know about cross-process or local root concepts today, so they\u0027re not ideal places either.",
      "parentUuid": "ee8c9467_8657cdc4",
      "revId": "51972bb861bfd0f96c68bc066bbff5527eaf5b16",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5535c2d5_d82a5c6b",
        "filename": "content/browser/frame_host/render_frame_host_impl.h",
        "patchSetId": 12
      },
      "lineNbr": 648,
      "author": {
        "id": 1126745
      },
      "writtenOn": "2017-08-16T17:04:23Z",
      "side": 1,
      "message": "Thanks for the feedback. If our concern was the nested OOPIFs only perhaps RWHVCF::ForEachImmediateChildView() or something could have worked given that RWHVCF lives in frame_host/. Perhaps something to reconsider later in a follow up patch.",
      "parentUuid": "a6dc4a7e_ddc34004",
      "revId": "51972bb861bfd0f96c68bc066bbff5527eaf5b16",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}