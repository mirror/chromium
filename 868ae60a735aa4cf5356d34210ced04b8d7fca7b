{
  "comments": [
    {
      "key": {
        "uuid": "3c2c43f7_c7cc82bd",
        "filename": "extensions/renderer/event_bindings.cc",
        "patchSetId": 1
      },
      "lineNbr": 154,
      "author": {
        "id": 1115745
      },
      "writtenOn": "2017-09-14T15:23:48Z",
      "side": 1,
      "message": "Would it make sense to construct the Bookkeeper with an IPCMessageSender so it can handle making these calls?",
      "revId": "868ae60a735aa4cf5356d34210ced04b8d7fca7b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1f8718a3_0adddfa2",
        "filename": "extensions/renderer/event_bindings.cc",
        "patchSetId": 1
      },
      "lineNbr": 154,
      "author": {
        "id": 1001727
      },
      "writtenOn": "2017-09-14T23:05:40Z",
      "side": 1,
      "message": "It certainly does. I started changing the code to make EventBookkeeper a member of EventBindings but ran into static methods (e.g. EventBindings::DispatchEventInContext and such) which require EventBookkeeper. So it won\u0027t be trivial. Maybe this is OK for now w/ TODO? LMK if you had a simpler way in mind.",
      "parentUuid": "3c2c43f7_c7cc82bd",
      "revId": "868ae60a735aa4cf5356d34210ced04b8d7fca7b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "699f16d9_32efaf21",
        "filename": "extensions/renderer/event_bindings.cc",
        "patchSetId": 1
      },
      "lineNbr": 154,
      "author": {
        "id": 1115745
      },
      "writtenOn": "2017-09-19T21:58:39Z",
      "side": 1,
      "message": "We could have the EventBookkeeper owned by the JSBindingsExtensionSystem, which is owned by either the Dispatcher or the WorkerThreadDispatcher (both statically retrievable).  Would that work?\n\nEither way, let\u0027s save it for another patch.  This one\u0027s primarily shuffling code, and it\u0027d be nice to keep it that way. :)",
      "parentUuid": "1f8718a3_0adddfa2",
      "revId": "868ae60a735aa4cf5356d34210ced04b8d7fca7b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "447829a2_0e09cb20",
        "filename": "extensions/renderer/event_bindings.cc",
        "patchSetId": 1
      },
      "lineNbr": 154,
      "author": {
        "id": 1001727
      },
      "writtenOn": "2017-09-20T00:14:31Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "699f16d9_32efaf21",
      "revId": "868ae60a735aa4cf5356d34210ced04b8d7fca7b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "505004dd_8221f455",
        "filename": "extensions/renderer/event_bookkeeper.h",
        "patchSetId": 1
      },
      "lineNbr": 73,
      "author": {
        "id": 1115745
      },
      "writtenOn": "2017-09-14T15:23:48Z",
      "side": 1,
      "message": "It\u0027s documented above |filtered_listener_counts_|, but I think it would be more helpful to mention here that this is a pair of \u003cextensionId, event name\u003e.",
      "revId": "868ae60a735aa4cf5356d34210ced04b8d7fca7b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "58888dca_58c357b3",
        "filename": "extensions/renderer/event_bookkeeper.h",
        "patchSetId": 1
      },
      "lineNbr": 73,
      "author": {
        "id": 1001727
      },
      "writtenOn": "2017-09-14T23:05:40Z",
      "side": 1,
      "message": "Done. Changed string-\u003eExtensionId.",
      "parentUuid": "505004dd_8221f455",
      "revId": "868ae60a735aa4cf5356d34210ced04b8d7fca7b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "365446ca_28ce9e40",
        "filename": "extensions/renderer/event_bookkeeper.h",
        "patchSetId": 1
      },
      "lineNbr": 90,
      "author": {
        "id": 1115745
      },
      "writtenOn": "2017-09-14T15:23:48Z",
      "side": 1,
      "message": "What\u0027s the benefit in having all of these be lazy?  We avoid a tiny amount of initialization and memory usage when this class is allocated, but then we need to do dynamic allocation if/when we need them, which is significantly more expensive.  My guess would be that the cost of that heap allocation outweighs the benefit of avoiding instantiation at creation, since allocating empty maps should be exceedingly fast.  It would also make the code a bit less complicated, IMO.\n\nWDYT?  Is there another benefit to having these lazily constructed?",
      "revId": "868ae60a735aa4cf5356d34210ced04b8d7fca7b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a3168b36_520bcf60",
        "filename": "extensions/renderer/event_bookkeeper.h",
        "patchSetId": 1
      },
      "lineNbr": 90,
      "author": {
        "id": 1001727
      },
      "writtenOn": "2017-09-14T23:05:40Z",
      "side": 1,
      "message": "Good q. This is/was preserving the current lazy nature of these variables through LAZY_INSTANCE.. So there wasn\u0027t anything new I was shooting for with this.\n\n1) In the case where these are  never used, then there is a benefit to not construct them at all. But again, I can\u0027t see how an extension can *not* use any event code.\n\n2) For filters, I can see how its corresponding maps will be infrequently used, as most of the events do not use/support filters.\n\nDoes #1 and #2 sound right-ish?\nI\u0027ve changed the code to:\n  make listener_counts_ stack allocated\n  make filter related containers still be dynamic allocated\n  keep unmanaged_listeners_ untouched to retain leaky behavior\n\nThen again, this didn\u0027t make the code simple enough :) So let me know your thoughts.",
      "parentUuid": "365446ca_28ce9e40",
      "revId": "868ae60a735aa4cf5356d34210ced04b8d7fca7b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bc93d7f1_b3251f7b",
        "filename": "extensions/renderer/event_bookkeeper.h",
        "patchSetId": 1
      },
      "lineNbr": 90,
      "author": {
        "id": 1115745
      },
      "writtenOn": "2017-09-19T21:58:39Z",
      "side": 1,
      "message": "I\u0027d just make everything stack allocated.  Containers should be extremely easy to construct, stack allocation is much cheaper than dynamic, and I think it just makes it look a bit cleaner overall.",
      "parentUuid": "a3168b36_520bcf60",
      "revId": "868ae60a735aa4cf5356d34210ced04b8d7fca7b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f8a4a207_2f69a883",
        "filename": "extensions/renderer/event_bookkeeper.h",
        "patchSetId": 1
      },
      "lineNbr": 90,
      "author": {
        "id": 1001727
      },
      "writtenOn": "2017-09-20T00:14:31Z",
      "side": 1,
      "message": "OK, made all members stack allocated.",
      "parentUuid": "bc93d7f1_b3251f7b",
      "revId": "868ae60a735aa4cf5356d34210ced04b8d7fca7b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}