{
  "comments": [
    {
      "key": {
        "uuid": "7707531f_ffb0c285",
        "filename": "content/browser/indexed_db/indexed_db_backing_store.cc",
        "patchSetId": 2
      },
      "lineNbr": 770,
      "author": {
        "id": 1163599
      },
      "writtenOn": "2017-10-06T20:35:50Z",
      "side": 1,
      "message": "Can you use \"for (base::string16\u0026 name : names) {\" (non-const iteration instead of const iteration) and move each string into the new vector? The old vector would end up with moved-out strings, which would be discarded at the end of the method.\n\nI\u0027m asking because I think this code would be easier to reason if it looked like a standard loop.",
      "revId": "b705f9ae1cc53119b74b153ad42b38dd462020b2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6341175b_243eb5e4",
        "filename": "content/browser/indexed_db/indexed_db_backing_store.cc",
        "patchSetId": 2
      },
      "lineNbr": 770,
      "author": {
        "id": 1001917
      },
      "writtenOn": "2017-10-06T22:15:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7707531f_ffb0c285",
      "revId": "b705f9ae1cc53119b74b153ad42b38dd462020b2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa23cb03_edb4ca8c",
        "filename": "content/browser/indexed_db/indexed_db_database.cc",
        "patchSetId": 2
      },
      "lineNbr": 175,
      "author": {
        "id": 1163599
      },
      "writtenOn": "2017-10-06T20:35:50Z",
      "side": 1,
      "message": "Leftover from a different CL?",
      "revId": "b705f9ae1cc53119b74b153ad42b38dd462020b2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1dbf4fde_e26205f5",
        "filename": "content/browser/indexed_db/indexed_db_database.cc",
        "patchSetId": 2
      },
      "lineNbr": 175,
      "author": {
        "id": 1001917
      },
      "writtenOn": "2017-10-06T20:52:36Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fa23cb03_edb4ca8c",
      "revId": "b705f9ae1cc53119b74b153ad42b38dd462020b2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "302b3e0e_aad856f6",
        "filename": "content/browser/indexed_db/indexed_db_metadata_factory.cc",
        "patchSetId": 2
      },
      "lineNbr": 236,
      "author": {
        "id": 1163599
      },
      "writtenOn": "2017-10-06T20:35:50Z",
      "side": 1,
      "message": "nit: ReadObjectStoreMetadata?\n\nThe metadata carries the index list, so it makes sense to me that it\u0027d be read. If anything, it\u0027d be nice to limit/remove methods that read a subset of the output argument, in the future.",
      "revId": "b705f9ae1cc53119b74b153ad42b38dd462020b2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "35d884c4_fc84f3ec",
        "filename": "content/browser/indexed_db/indexed_db_metadata_factory.cc",
        "patchSetId": 2
      },
      "lineNbr": 236,
      "author": {
        "id": 1001917
      },
      "writtenOn": "2017-10-06T20:52:36Z",
      "side": 1,
      "message": "This was an artifact of the previous code. I can probably remove this now actually.",
      "parentUuid": "302b3e0e_aad856f6",
      "revId": "b705f9ae1cc53119b74b153ad42b38dd462020b2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c04670c6_1d7b7f82",
        "filename": "content/browser/indexed_db/indexed_db_metadata_factory.cc",
        "patchSetId": 2
      },
      "lineNbr": 236,
      "author": {
        "id": 1001917
      },
      "writtenOn": "2017-10-06T22:15:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "35d884c4_fc84f3ec",
      "revId": "b705f9ae1cc53119b74b153ad42b38dd462020b2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "916f4c71_ad513415",
        "filename": "content/browser/indexed_db/indexed_db_metadata_factory.cc",
        "patchSetId": 2
      },
      "lineNbr": 406,
      "author": {
        "id": 1163599
      },
      "writtenOn": "2017-10-06T20:35:50Z",
      "side": 1,
      "message": "What does \"AndWrite\" mean?",
      "revId": "b705f9ae1cc53119b74b153ad42b38dd462020b2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4a1aba5b_34052009",
        "filename": "content/browser/indexed_db/indexed_db_metadata_factory.cc",
        "patchSetId": 2
      },
      "lineNbr": 406,
      "author": {
        "id": 1001917
      },
      "writtenOn": "2017-10-06T20:52:36Z",
      "side": 1,
      "message": "Writes the metadata to disk. What naming would you expect here?",
      "parentUuid": "916f4c71_ad513415",
      "revId": "b705f9ae1cc53119b74b153ad42b38dd462020b2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eb05c88f_235793ff",
        "filename": "content/browser/indexed_db/indexed_db_metadata_factory.cc",
        "patchSetId": 2
      },
      "lineNbr": 406,
      "author": {
        "id": 1163599
      },
      "writtenOn": "2017-10-06T21:23:08Z",
      "side": 1,
      "message": "CreateObjectStore seems sufficient. This is because I know there\u0027s a database context here, so  \"CREATE TABLE\" in SQL has a stronger influence than the Create* convention for naming a factory method.",
      "parentUuid": "4a1aba5b_34052009",
      "revId": "b705f9ae1cc53119b74b153ad42b38dd462020b2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "70f6d6bf_194f39db",
        "filename": "content/browser/indexed_db/indexed_db_metadata_factory.cc",
        "patchSetId": 2
      },
      "lineNbr": 406,
      "author": {
        "id": 1001917
      },
      "writtenOn": "2017-10-06T22:15:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "eb05c88f_235793ff",
      "revId": "b705f9ae1cc53119b74b153ad42b38dd462020b2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "586570dd_e3c356c3",
        "filename": "content/browser/indexed_db/indexed_db_metadata_factory.cc",
        "patchSetId": 2
      },
      "lineNbr": 499,
      "author": {
        "id": 1163599
      },
      "writtenOn": "2017-10-06T20:35:50Z",
      "side": 1,
      "message": "nit: Move Delete up, next to Create?\n\nHaving Delete next to Create makes sense from both an alphabetical ordering sense, and because it mimics how we put destructors next to constructors. It makes it easier to check that the \"delete\" does tear down every structure that the \"create\" puts in place.",
      "revId": "b705f9ae1cc53119b74b153ad42b38dd462020b2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f611987b_73a7120d",
        "filename": "content/browser/indexed_db/indexed_db_metadata_factory.cc",
        "patchSetId": 2
      },
      "lineNbr": 499,
      "author": {
        "id": 1001917
      },
      "writtenOn": "2017-10-06T22:15:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "586570dd_e3c356c3",
      "revId": "b705f9ae1cc53119b74b153ad42b38dd462020b2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "df3d9075_4b8f06ee",
        "filename": "content/browser/indexed_db/indexed_db_metadata_factory.cc",
        "patchSetId": 2
      },
      "lineNbr": 504,
      "author": {
        "id": 1163599
      },
      "writtenOn": "2017-10-06T20:35:50Z",
      "side": 1,
      "message": "Note for future CL: Does it still make sense to check that the object store\u0027s ID is valid? I\u0027d hope that we only create IndexedDBObjectStoreMetadata instances with valid members.",
      "revId": "b705f9ae1cc53119b74b153ad42b38dd462020b2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f242d262_85b2e5a8",
        "filename": "content/browser/indexed_db/indexed_db_metadata_factory.cc",
        "patchSetId": 2
      },
      "lineNbr": 504,
      "author": {
        "id": 1001917
      },
      "writtenOn": "2017-10-06T22:15:58Z",
      "side": 1,
      "message": "Yeah... we can probably do a lot of cleanup here.",
      "parentUuid": "df3d9075_4b8f06ee",
      "revId": "b705f9ae1cc53119b74b153ad42b38dd462020b2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e6ec61d3_cce9cb16",
        "filename": "content/browser/indexed_db/indexed_db_metadata_factory.cc",
        "patchSetId": 2
      },
      "lineNbr": 646,
      "author": {
        "id": 1163599
      },
      "writtenOn": "2017-10-06T20:35:50Z",
      "side": 1,
      "message": "Same question as before about \"AndWrite\"",
      "revId": "b705f9ae1cc53119b74b153ad42b38dd462020b2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "605febca_8f3e390a",
        "filename": "content/browser/indexed_db/indexed_db_metadata_factory.cc",
        "patchSetId": 2
      },
      "lineNbr": 646,
      "author": {
        "id": 1001917
      },
      "writtenOn": "2017-10-06T22:15:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e6ec61d3_cce9cb16",
      "revId": "b705f9ae1cc53119b74b153ad42b38dd462020b2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bd406759_98d86afb",
        "filename": "content/browser/indexed_db/indexed_db_metadata_factory.cc",
        "patchSetId": 2
      },
      "lineNbr": 707,
      "author": {
        "id": 1163599
      },
      "writtenOn": "2017-10-06T20:35:50Z",
      "side": 1,
      "message": "Same comment as before regarding ordering.",
      "revId": "b705f9ae1cc53119b74b153ad42b38dd462020b2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f9ed4829_1da22364",
        "filename": "content/browser/indexed_db/indexed_db_metadata_factory.cc",
        "patchSetId": 2
      },
      "lineNbr": 707,
      "author": {
        "id": 1001917
      },
      "writtenOn": "2017-10-06T22:15:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "bd406759_98d86afb",
      "revId": "b705f9ae1cc53119b74b153ad42b38dd462020b2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "008f1b60_4581cb6c",
        "filename": "content/browser/indexed_db/indexed_db_metadata_factory.h",
        "patchSetId": 2
      },
      "lineNbr": 26,
      "author": {
        "id": 1163599
      },
      "writtenOn": "2017-10-06T20:35:50Z",
      "side": 1,
      "message": "This doesn\u0027t seem like a factory, according to the definition in https://en.wikipedia.org/wiki/Abstract_factory_pattern\n\nHow about something like IndexedDBMetadataCoding?\n\nIdeally, the methods here would be pushed onto metadata classes, but that would be best addressed in a follow-up CL, not in this move CL.",
      "revId": "b705f9ae1cc53119b74b153ad42b38dd462020b2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6712b727_873d4b09",
        "filename": "content/browser/indexed_db/indexed_db_metadata_factory.h",
        "patchSetId": 2
      },
      "lineNbr": 26,
      "author": {
        "id": 1001917
      },
      "writtenOn": "2017-10-06T20:52:36Z",
      "side": 1,
      "message": "It was hard to come up with a name - we create metadatas in here, but we also put modification operations.\n\nThe reason we cannot add stuff to the metadata classes is because they are in common/ and used by both browser and renderer (used in mojo transportation). There needs to be more cleanup before we can move logic into those classes.",
      "parentUuid": "008f1b60_4581cb6c",
      "revId": "b705f9ae1cc53119b74b153ad42b38dd462020b2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4de42901_d2f7ff2d",
        "filename": "content/browser/indexed_db/indexed_db_metadata_factory.h",
        "patchSetId": 2
      },
      "lineNbr": 26,
      "author": {
        "id": 1163599
      },
      "writtenOn": "2017-10-06T21:23:08Z",
      "side": 1,
      "message": "I agree that moving methods to metadata shouldn\u0027t happen in this CL.\n\nFactory generally suggests that the point of the class is to help select between multiple implementations of an abstract class. In this case, I think the main responsibility of this class is to manage the leveldb encoding of database metadata, hence the name suggestion I had above.",
      "parentUuid": "6712b727_873d4b09",
      "revId": "b705f9ae1cc53119b74b153ad42b38dd462020b2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ac7a3e5e_6f9772e7",
        "filename": "content/browser/indexed_db/indexed_db_metadata_factory.h",
        "patchSetId": 2
      },
      "lineNbr": 26,
      "author": {
        "id": 1001917
      },
      "writtenOn": "2017-10-06T22:15:58Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4de42901_d2f7ff2d",
      "revId": "b705f9ae1cc53119b74b153ad42b38dd462020b2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3fa78646_c64457e4",
        "filename": "content/browser/indexed_db/indexed_db_metadata_factory.h",
        "patchSetId": 2
      },
      "lineNbr": 54,
      "author": {
        "id": 1163599
      },
      "writtenOn": "2017-10-06T20:35:50Z",
      "side": 1,
      "message": "Given that this CL is just a move, it should not address the issue, so noting it for the future -- it\u0027s a bit unclear how this method works. I\u0027m guessing that it uses the transaction to update the metadata, and also updates an in-memory version pointed by IndexedDBDatabaseMetadata*, but it\u0027d be nice if it stated that.\n\nAt the very least, the method docs should say that the change is only persisted if the transaction commits.",
      "revId": "b705f9ae1cc53119b74b153ad42b38dd462020b2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "33905c29_456b0ebe",
        "filename": "content/browser/indexed_db/indexed_db_metadata_factory.h",
        "patchSetId": 2
      },
      "lineNbr": 54,
      "author": {
        "id": 1001917
      },
      "writtenOn": "2017-10-06T20:52:36Z",
      "side": 1,
      "message": "That\u0027s the case for all of these methods that take a transaction - do you have the same feedback for all of those?\n\nI feel like it\u0027s obvious that we would be using the transaction for doing modification - but maybe I can comment that on the class comment?",
      "parentUuid": "3fa78646_c64457e4",
      "revId": "b705f9ae1cc53119b74b153ad42b38dd462020b2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e75903a3_fa5f6acf",
        "filename": "content/browser/indexed_db/indexed_db_metadata_factory.h",
        "patchSetId": 2
      },
      "lineNbr": 54,
      "author": {
        "id": 1163599
      },
      "writtenOn": "2017-10-06T21:23:08Z",
      "side": 1,
      "message": "The Read* methods are fairly straightforward. The Create* and Delete* methods also seem easy to reason about.\n\nUpdate* is different because you could be updating the Metadata instance to reflect the reality in the database (effectively a Read), or you could be updating the database (by writing to the transaction) to reflect the reality in the Metadata instance. The truth (IIUC) is you change both the database and the Metadata instance to reflect the value the \"version\" argument.\n\nI got the hint that the Metadata instance is changing because it\u0027s at the end of the argument list. Perhaps move the Transaction to the right of row_id / version, as it\u0027s also changing. Also, the name SetDatabaseVersion() would help me guess better.\n\nLast, to actually answer your question :) I haven\u0027t had this concern with any other method in this CL.",
      "parentUuid": "33905c29_456b0ebe",
      "revId": "b705f9ae1cc53119b74b153ad42b38dd462020b2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3ea38625_7ea8e43c",
        "filename": "content/browser/indexed_db/indexed_db_metadata_factory.h",
        "patchSetId": 2
      },
      "lineNbr": 54,
      "author": {
        "id": 1001917
      },
      "writtenOn": "2017-10-06T22:15:58Z",
      "side": 1,
      "message": "Got it. Done. I\u0027d like to leave the transaction as the first argument though as that matches the rest of the file and I\u0027m always using that to do the writing.",
      "parentUuid": "e75903a3_fa5f6acf",
      "revId": "b705f9ae1cc53119b74b153ad42b38dd462020b2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b838525e_f539c829",
        "filename": "content/browser/indexed_db/indexed_db_metadata_factory.h",
        "patchSetId": 2
      },
      "lineNbr": 54,
      "author": {
        "id": 1163599
      },
      "writtenOn": "2017-10-10T00:11:57Z",
      "side": 1,
      "message": "Okay, if it matches the rest of the file.",
      "parentUuid": "3ea38625_7ea8e43c",
      "revId": "b705f9ae1cc53119b74b153ad42b38dd462020b2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}