{
  "comments": [
    {
      "key": {
        "uuid": "434e130e_b927b155",
        "filename": "chrome/renderer/extensions/extension_hooks_delegate.cc",
        "patchSetId": 6
      },
      "lineNbr": 104,
      "author": {
        "id": 1002854
      },
      "writtenOn": "2018-01-23T16:27:35Z",
      "side": 1,
      "message": "nit: There\u0027s an overload of v8::ReturnValue::Set that takes bool directly, which is slightly shorter and in principle could be more efficient. You also definitely don\u0027t need a HandleScope then (as it happens v8::Boolean::New doesn\u0027t *actually* need one, but also you always have the a scope in a function callback).\n\nSo this function can be simplified to:\n\nvoid GetInIncognitoContext(v8::Local\u003cv8::Name\u003e property_name,\n                           const v8::PropertyCallbackInfo\u003cv8::Value\u003e\u0026 info) {\n  info.GetReturnValue().Set(\n      ExtensionsRendererClient::Get()-\u003eIsIncognitoProcess());\n}\n\nBetter yet, just make it a plain data property on the template, assuming I understand correctly that it is constant for the entire renderer process across its entire lifetime, i.e.\n\nbool is_incognito \u003d ExtensionsRendererClient::Get()-\u003eIsIncognitoProcess();\nobject_template-\u003eSet(isolate,\n                     \"inIncognitoContext\",\n                     v8::Boolean::New(isolate, is_incognito));\n\nThen we don\u0027t need a callback at all. :D",
      "revId": "dc1e953c93e0a1b992b8703a0c8aa8b44117da84",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "63495a78_ea3c4eae",
        "filename": "chrome/renderer/extensions/extension_hooks_delegate.cc",
        "patchSetId": 6
      },
      "lineNbr": 104,
      "author": {
        "id": 1115745
      },
      "writtenOn": "2018-01-23T21:25:27Z",
      "side": 1,
      "message": "Done.  Thanks for all the thoughts!  I appreciate the extra alternatives, for future reference. :)",
      "parentUuid": "434e130e_b927b155",
      "revId": "dc1e953c93e0a1b992b8703a0c8aa8b44117da84",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0b7c2782_c13440df",
        "filename": "chrome/renderer/extensions/extension_hooks_delegate.cc",
        "patchSetId": 6
      },
      "lineNbr": 254,
      "author": {
        "id": 1002854
      },
      "writtenOn": "2018-01-23T16:27:35Z",
      "side": 1,
      "message": "nit: probably somewhat faster to use base::StrCat? No strong feelings, especially since \nStringPrintf is probably more ubiquitous in */extensions/*.\n\nstd::string url \u003d\n    base::StrCat({\"chrome-extension://\", script_context-\u003eextension()-\u003eid(),\n                  !path.empty() \u0026\u0026 path[0] \u003d\u003d \u0027/\u0027 ? \"\" : \"/\", path});",
      "revId": "dc1e953c93e0a1b992b8703a0c8aa8b44117da84",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6b352ea8_8a483812",
        "filename": "chrome/renderer/extensions/extension_hooks_delegate.cc",
        "patchSetId": 6
      },
      "lineNbr": 254,
      "author": {
        "id": 1115745
      },
      "writtenOn": "2018-01-23T21:25:27Z",
      "side": 1,
      "message": "Oooh, didn\u0027t know we had a strcat.  Done.",
      "parentUuid": "0b7c2782_c13440df",
      "revId": "dc1e953c93e0a1b992b8703a0c8aa8b44117da84",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cb7c0f50_e906be94",
        "filename": "chrome/renderer/extensions/extension_hooks_delegate.cc",
        "patchSetId": 6
      },
      "lineNbr": 280,
      "author": {
        "id": 1002854
      },
      "writtenOn": "2018-01-23T16:27:35Z",
      "side": 1,
      "message": "nit: while it was clear to me, expanding why this shouldn\u0027t be reached might be slightly helpful:\n\nNOTREACHED() \u003c\u003c \"Unexpected exception: argument parsing produces plain objects.\";",
      "revId": "dc1e953c93e0a1b992b8703a0c8aa8b44117da84",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d0e34db8_48e95d02",
        "filename": "chrome/renderer/extensions/extension_hooks_delegate.cc",
        "patchSetId": 6
      },
      "lineNbr": 280,
      "author": {
        "id": 1115745
      },
      "writtenOn": "2018-01-23T21:25:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "cb7c0f50_e906be94",
      "revId": "dc1e953c93e0a1b992b8703a0c8aa8b44117da84",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "eab2edfd_5acd526d",
        "filename": "chrome/renderer/extensions/extension_hooks_delegate.cc",
        "patchSetId": 6
      },
      "lineNbr": 286,
      "author": {
        "id": 1002854
      },
      "writtenOn": "2018-01-23T16:27:35Z",
      "side": 1,
      "message": "nit: here and below, v8_window_id.As\u003cv8::Int32\u003e()-\u003eValue() is marginally faster, because it doesn\u0027t need to deal with potential coersion",
      "revId": "dc1e953c93e0a1b992b8703a0c8aa8b44117da84",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7915191d_731c820b",
        "filename": "chrome/renderer/extensions/extension_hooks_delegate.cc",
        "patchSetId": 6
      },
      "lineNbr": 286,
      "author": {
        "id": 1115745
      },
      "writtenOn": "2018-01-23T21:25:27Z",
      "side": 1,
      "message": "Good to know!  Done.",
      "parentUuid": "eab2edfd_5acd526d",
      "revId": "dc1e953c93e0a1b992b8703a0c8aa8b44117da84",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "867b2e15_42015693",
        "filename": "extensions/renderer/extension_frame_helper.cc",
        "patchSetId": 6
      },
      "lineNbr": 198,
      "author": {
        "id": 1002854
      },
      "writtenOn": "2018-01-23T16:27:35Z",
      "side": 1,
      "message": "super-nit: you can just return without this local variable...up to you, I guess.\n\n  if (web_frame \u0026\u0026 blink::WebFrame::ScriptCanAccess(web_frame))\n    return web_frame-\u003eMainWorldScriptContext()-\u003eGlobal();\n  else\n    return v8::Undefined(isolate);",
      "revId": "dc1e953c93e0a1b992b8703a0c8aa8b44117da84",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a726ada0_05314b2a",
        "filename": "extensions/renderer/extension_frame_helper.cc",
        "patchSetId": 6
      },
      "lineNbr": 198,
      "author": {
        "id": 1115745
      },
      "writtenOn": "2018-01-23T21:25:27Z",
      "side": 1,
      "message": "I slightly prefer having a single return statement, when it\u0027s not a large LOC difference.  We also get RVO this way, not that it really matters with v8::Local...",
      "parentUuid": "867b2e15_42015693",
      "revId": "dc1e953c93e0a1b992b8703a0c8aa8b44117da84",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "820a616c_761c30d8",
        "filename": "extensions/renderer/extension_frame_helper.cc",
        "patchSetId": 6
      },
      "lineNbr": 201,
      "author": {
        "id": 1002854
      },
      "writtenOn": "2018-01-23T16:27:35Z",
      "side": 1,
      "message": "Safe to assume this is always called with the appropriate context current? WebFrame::ScriptCanAccess relies on the current context on the main thread isolate.",
      "revId": "dc1e953c93e0a1b992b8703a0c8aa8b44117da84",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5e49614a_3785418a",
        "filename": "extensions/renderer/extension_frame_helper.cc",
        "patchSetId": 6
      },
      "lineNbr": 201,
      "author": {
        "id": 1115745
      },
      "writtenOn": "2018-01-23T21:25:27Z",
      "side": 1,
      "message": "It should be currently, and I\u0027ve added comments above the method declaration.",
      "parentUuid": "820a616c_761c30d8",
      "revId": "dc1e953c93e0a1b992b8703a0c8aa8b44117da84",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b247536e_6ad0a50f",
        "filename": "extensions/renderer/native_renderer_messaging_service.cc",
        "patchSetId": 6
      },
      "lineNbr": 244,
      "author": {
        "id": 1002854
      },
      "writtenOn": "2018-01-23T16:27:35Z",
      "side": 1,
      "message": "nit: GetList() all over the place here is very repetitive. This could be somewhat more concise like this:\n\n    auto\u0026 list \u003d activity_logging_args-\u003eGetList();\n    list.reserve(2u);\n    \n    if (!info.source_id.empty())\n      list.emplace_back(info.source_id);\n    else\n      list.emplace_back();\n    \n    if (!info.source_url.is_empty())\n      list.emplace_back(info.source_url.spec());\n    else\n      list.emplace_back();\n\nor something similar to that",
      "revId": "dc1e953c93e0a1b992b8703a0c8aa8b44117da84",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c46d8bf4_d16dced7",
        "filename": "extensions/renderer/native_renderer_messaging_service.cc",
        "patchSetId": 6
      },
      "lineNbr": 244,
      "author": {
        "id": 1115745
      },
      "writtenOn": "2018-01-23T21:25:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b247536e_6ad0a50f",
      "revId": "dc1e953c93e0a1b992b8703a0c8aa8b44117da84",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0128048c_0ef695f1",
        "filename": "extensions/renderer/one_time_message_handler.cc",
        "patchSetId": 6
      },
      "lineNbr": 422,
      "author": {
        "id": 1002854
      },
      "writtenOn": "2018-01-23T16:27:35Z",
      "side": 1,
      "message": "I think CompleteRequest could invalidate this iterator (if |openers| is mutated during script execution). If so, you\u0027ll need to find again rather than reusing the iterator. If not, could you explain why this cannot happen?\n\nFurther, if !IsContextValid, is it possible that OneTimeMessageContextData has also been destructed?",
      "revId": "dc1e953c93e0a1b992b8703a0c8aa8b44117da84",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0212d4a4_42dcce83",
        "filename": "extensions/renderer/one_time_message_handler.cc",
        "patchSetId": 6
      },
      "lineNbr": 422,
      "author": {
        "id": 1115745
      },
      "writtenOn": "2018-01-23T21:25:27Z",
      "side": 1,
      "message": "Ooh, good point about the iterator.  That definitely could happen.  I\u0027ve fixed this to just make a copy of the PortId here, and erase the iterator before calling CompleteRequest().  I\u0027ve also added some tests that try calling sendMessage from fun times (the listener callback and the reply callback).\n\n\u003e Further, if !IsContextValid, is it possible that OneTimeMessageContextData has also been destructed?\n\nIt shouldn\u0027t be - IsContextValid() will return false starting from WillReleaseScriptContext() (which happens before gin data is deleted, I\u0027m pretty sure).",
      "parentUuid": "0128048c_0ef695f1",
      "revId": "dc1e953c93e0a1b992b8703a0c8aa8b44117da84",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d529d8bb_f315a09e",
        "filename": "extensions/renderer/one_time_message_handler.cc",
        "patchSetId": 6
      },
      "lineNbr": 422,
      "author": {
        "id": 1002854
      },
      "writtenOn": "2018-01-23T21:45:39Z",
      "side": 1,
      "message": "\u003e Ooh, good point about the iterator.  That definitely could happen.  I\u0027ve fixed this to just make a copy of the PortId here, and erase the iterator before calling CompleteRequest().  I\u0027ve also added some tests that try calling sendMessage from fun times (the listener callback and the reply callback).\n\nHmm, you\u0027ve gone that in DeliverReplyToOpener, but not here (DisconnectOpener).\n\n\u003e \u003e Further, if !IsContextValid, is it possible that OneTimeMessageContextData has also been destructed?\n\u003e\n\u003e It shouldn\u0027t be - IsContextValid() will return false starting from WillReleaseScriptContext() (which happens before gin data is deleted, I\u0027m pretty sure).\n\nAh, yes, you are correct. I flipped the sense of a condition in my head.",
      "parentUuid": "0212d4a4_42dcce83",
      "revId": "dc1e953c93e0a1b992b8703a0c8aa8b44117da84",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5586b161_6eeedcf2",
        "filename": "extensions/renderer/one_time_message_handler.cc",
        "patchSetId": 6
      },
      "lineNbr": 422,
      "author": {
        "id": 1115745
      },
      "writtenOn": "2018-01-23T23:51:18Z",
      "side": 1,
      "message": "Whoops!  Added to DisconnectOpener() as well.",
      "parentUuid": "d529d8bb_f315a09e",
      "revId": "dc1e953c93e0a1b992b8703a0c8aa8b44117da84",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0c06b8c2_e0f26043",
        "filename": "extensions/renderer/runtime_hooks_delegate.cc",
        "patchSetId": 6
      },
      "lineNbr": 79,
      "author": {
        "id": 1002854
      },
      "writtenOn": "2018-01-23T16:27:35Z",
      "side": 1,
      "message": "This API is kinda unfortunate insofar as it seems to explicitly permit cross-world wrapper leakage, IIUC. If the Blink-side checking ever gets more aggressive, we\u0027ll have to add special cases to avoid this blowing up. :/\n\nBut we\u0027re stuck with it. :)",
      "revId": "dc1e953c93e0a1b992b8703a0c8aa8b44117da84",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6cc6d0ba_f1a6a60e",
        "filename": "extensions/renderer/runtime_hooks_delegate.cc",
        "patchSetId": 6
      },
      "lineNbr": 79,
      "author": {
        "id": 1115745
      },
      "writtenOn": "2018-01-23T21:25:27Z",
      "side": 1,
      "message": "Yeah, this is explicitly designed to let different worlds interact with each other, so that an extension popup can synchronously access its background page, etc.  I\u0027m not keen on it, but it is something we have to continue allowing. :(",
      "parentUuid": "0c06b8c2_e0f26043",
      "revId": "dc1e953c93e0a1b992b8703a0c8aa8b44117da84",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3dbaffa5_3681801c",
        "filename": "extensions/renderer/runtime_hooks_delegate.cc",
        "patchSetId": 6
      },
      "lineNbr": 79,
      "author": {
        "id": 1002854
      },
      "writtenOn": "2018-01-23T21:45:39Z",
      "side": 1,
      "message": "Extension popups are full web pages (i.e. main world), right? If this is only exposed in extension pages (not content scripts or workers), then maybe it\u0027s less bad than I thought (but still a little funny). A re-read of the docs suggest this was the case, but I\u0027m not sure.",
      "parentUuid": "6cc6d0ba_f1a6a60e",
      "revId": "dc1e953c93e0a1b992b8703a0c8aa8b44117da84",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c4c9a43d_7b6f40c0",
        "filename": "extensions/renderer/runtime_hooks_delegate.cc",
        "patchSetId": 6
      },
      "lineNbr": 79,
      "author": {
        "id": 1115745
      },
      "writtenOn": "2018-01-23T23:51:18Z",
      "side": 1,
      "message": "Correct, extension popups are full web pages, and this is only exposed in \"blessed extensions contexts\" - i.e., extension pages with the same origin that run in the same extension process.  This is not available to content scripts, etc.  It\u0027s still not great, but slightly less insane.",
      "parentUuid": "3dbaffa5_3681801c",
      "revId": "dc1e953c93e0a1b992b8703a0c8aa8b44117da84",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9c8dedb0_aba99b24",
        "filename": "extensions/renderer/runtime_hooks_delegate.cc",
        "patchSetId": 6
      },
      "lineNbr": 344,
      "author": {
        "id": 1002854
      },
      "writtenOn": "2018-01-23T16:27:35Z",
      "side": 1,
      "message": "I don\u0027t really understand what this does. Mind a comment?",
      "revId": "dc1e953c93e0a1b992b8703a0c8aa8b44117da84",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2d3435e2_8f6128b2",
        "filename": "extensions/renderer/runtime_hooks_delegate.cc",
        "patchSetId": 6
      },
      "lineNbr": 344,
      "author": {
        "id": 1115745
      },
      "writtenOn": "2018-01-23T21:25:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9c8dedb0_aba99b24",
      "revId": "dc1e953c93e0a1b992b8703a0c8aa8b44117da84",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b2a6ff38_f499dd55",
        "filename": "extensions/renderer/runtime_hooks_delegate.cc",
        "patchSetId": 6
      },
      "lineNbr": 346,
      "author": {
        "id": 1002854
      },
      "writtenOn": "2018-01-23T16:27:35Z",
      "side": 1,
      "message": "Did we ever write down what context we expected to be used here? Currently WebFrame::ScriptCanAccess will check the current context, which does seem to be what is passed in here. (I think this is what we intended, though, so OK.)",
      "revId": "dc1e953c93e0a1b992b8703a0c8aa8b44117da84",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eea8dbf9_362d5bee",
        "filename": "extensions/renderer/runtime_hooks_delegate.cc",
        "patchSetId": 6
      },
      "lineNbr": 346,
      "author": {
        "id": 1115745
      },
      "writtenOn": "2018-01-23T21:25:27Z",
      "side": 1,
      "message": "This is called synchronously from JS and we use the current context to get the ScriptContext, so this should be right.  I\u0027ve added a DCHECK here for documentation, though.",
      "parentUuid": "b2a6ff38_f499dd55",
      "revId": "dc1e953c93e0a1b992b8703a0c8aa8b44117da84",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a755dbf2_c16c412e",
        "filename": "extensions/renderer/runtime_hooks_delegate.cc",
        "patchSetId": 6
      },
      "lineNbr": 362,
      "author": {
        "id": 1002854
      },
      "writtenOn": "2018-01-23T16:27:35Z",
      "side": 1,
      "message": "Urgh. Confusingly, ModuleSystem::Require returns a maybe when it fails, but sometimes it has thrown (but realistically won\u0027t) and sometimes it has not. I think this is fine, but :(",
      "revId": "dc1e953c93e0a1b992b8703a0c8aa8b44117da84",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3339b597_5bffc6e3",
        "filename": "extensions/renderer/runtime_hooks_delegate.cc",
        "patchSetId": 6
      },
      "lineNbr": 362,
      "author": {
        "id": 1115745
      },
      "writtenOn": "2018-01-23T21:25:27Z",
      "side": 1,
      "message": "Agreed :(  I\u0027ve added a lamenting comment.",
      "parentUuid": "a755dbf2_c16c412e",
      "revId": "dc1e953c93e0a1b992b8703a0c8aa8b44117da84",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "11dc8dfc_3162157a",
        "filename": "extensions/renderer/runtime_hooks_delegate.cc",
        "patchSetId": 6
      },
      "lineNbr": 373,
      "author": {
        "id": 1002854
      },
      "writtenOn": "2018-01-23T16:27:35Z",
      "side": 1,
      "message": "hmm, maybe handle set RequestResult::THROWN if Object::Get threw. Really shouldn\u0027t happen, but hey.",
      "revId": "dc1e953c93e0a1b992b8703a0c8aa8b44117da84",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e73dcf26_4591efd0",
        "filename": "extensions/renderer/runtime_hooks_delegate.cc",
        "patchSetId": 6
      },
      "lineNbr": 373,
      "author": {
        "id": 1115745
      },
      "writtenOn": "2018-01-23T21:25:27Z",
      "side": 1,
      "message": "Done.  One downside is that now we need multiple if-statements (one for the ToLocal() failing [thrown] and one for the \"not a function\").",
      "parentUuid": "11dc8dfc_3162157a",
      "revId": "dc1e953c93e0a1b992b8703a0c8aa8b44117da84",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b956b5c2_ee994aa1",
        "filename": "extensions/renderer/runtime_hooks_delegate.cc",
        "patchSetId": 6
      },
      "lineNbr": 378,
      "author": {
        "id": 1002854
      },
      "writtenOn": "2018-01-23T16:27:35Z",
      "side": 1,
      "message": "do natives still need to be enabled here, or only during the module system load?",
      "revId": "dc1e953c93e0a1b992b8703a0c8aa8b44117da84",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7c0d5114_634ecd3e",
        "filename": "extensions/renderer/runtime_hooks_delegate.cc",
        "patchSetId": 6
      },
      "lineNbr": 378,
      "author": {
        "id": 1115745
      },
      "writtenOn": "2018-01-23T21:25:27Z",
      "side": 1,
      "message": "I *think* only during the load. Adjusted.",
      "parentUuid": "b956b5c2_ee994aa1",
      "revId": "dc1e953c93e0a1b992b8703a0c8aa8b44117da84",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "206c9b58_d817588c",
        "filename": "extensions/renderer/runtime_hooks_delegate.cc",
        "patchSetId": 6
      },
      "lineNbr": 385,
      "author": {
        "id": 1002854
      },
      "writtenOn": "2018-01-23T16:27:35Z",
      "side": 1,
      "message": "ditto: if it failed due to an exception being thrown (here during RunJSFunctionSync), probably we should say THROWN?",
      "revId": "dc1e953c93e0a1b992b8703a0c8aa8b44117da84",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "db8667c7_e1aaf4db",
        "filename": "extensions/renderer/runtime_hooks_delegate.cc",
        "patchSetId": 6
      },
      "lineNbr": 385,
      "author": {
        "id": 1115745
      },
      "writtenOn": "2018-01-23T21:25:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "206c9b58_d817588c",
      "revId": "dc1e953c93e0a1b992b8703a0c8aa8b44117da84",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}