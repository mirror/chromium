{
  "comments": [
    {
      "key": {
        "uuid": "bc75ef9e_36ebf762",
        "filename": "third_party/WebKit/Source/platform/heap/Member.h",
        "patchSetId": 6
      },
      "lineNbr": 587,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2017-12-19T07:54:50Z",
      "side": 1,
      "message": "How are DISALLOW_NEW_EXCEPT_PLACEMENT_NEW objects handled?",
      "revId": "1a1df4f049051f6bb684c9bf5542ba4fd8dd8d00",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "61757720_0ced7e8f",
        "filename": "third_party/WebKit/Source/platform/heap/Member.h",
        "patchSetId": 6
      },
      "lineNbr": 587,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2017-12-19T08:05:04Z",
      "side": 1,
      "message": "The have a Trace() method and thus we call NotifyNewObject upon creating them in the Vector.\n\nSee tests that deal with \"NonGarbageCollectedContainer\".",
      "parentUuid": "bc75ef9e_36ebf762",
      "revId": "1a1df4f049051f6bb684c9bf5542ba4fd8dd8d00",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5cfb6a41_270d2458",
        "filename": "third_party/WebKit/Source/platform/heap/Member.h",
        "patchSetId": 6
      },
      "lineNbr": 587,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2017-12-19T08:16:31Z",
      "side": 1,
      "message": "Makes sense. So those objects are eagerly traced instead of having write-barriers, right?\n\nIt will work but it has a risk of dispatching theoretically unbounded tracings while a mutator is running (because any assignment to HeapVector\u003cT\u003e will dispatch the eager-tracing). I guess it will be problematic.\n\nHowever, the tricky part is that there will be no way to add a write-barrier to T because T is not on Oilpan.\n\nMaybe can we add a write-barrier to the vector backing?",
      "parentUuid": "61757720_0ced7e8f",
      "revId": "1a1df4f049051f6bb684c9bf5542ba4fd8dd8d00",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7fa36c9a_c54b76b6",
        "filename": "third_party/WebKit/Source/platform/heap/Member.h",
        "patchSetId": 6
      },
      "lineNbr": 587,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2017-12-19T13:50:13Z",
      "side": 1,
      "message": "As discussed in the meeting. Lets do eager tracing for now as it is already supported. If that is too slow we can chunk it up adding proper support.",
      "parentUuid": "5cfb6a41_270d2458",
      "revId": "1a1df4f049051f6bb684c9bf5542ba4fd8dd8d00",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9acb8f31_d4982b43",
        "filename": "third_party/WebKit/Source/platform/heap/ThreadState.h",
        "patchSetId": 6
      },
      "lineNbr": 528,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2017-12-19T07:54:50Z",
      "side": 1,
      "message": "Do we need to make this public while we have the friend class?",
      "revId": "1a1df4f049051f6bb684c9bf5542ba4fd8dd8d00",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b02583d4_efc7a70e",
        "filename": "third_party/WebKit/Source/platform/heap/ThreadState.h",
        "patchSetId": 6
      },
      "lineNbr": 528,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2017-12-19T13:50:13Z",
      "side": 1,
      "message": "HeapAllocator needs it.",
      "parentUuid": "9acb8f31_d4982b43",
      "revId": "1a1df4f049051f6bb684c9bf5542ba4fd8dd8d00",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fe268bc8_38743923",
        "filename": "third_party/WebKit/Source/platform/wtf/ConstructTraits.h",
        "patchSetId": 6
      },
      "lineNbr": 28,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2017-12-19T07:54:50Z",
      "side": 1,
      "message": "Can we simplify the ConstructTraits by adding the same-name methods to HeapAllocator and PartitionAllocator? See how AllocateVectorBacking works between HeapAllocator and PartitionAllocator.",
      "revId": "1a1df4f049051f6bb684c9bf5542ba4fd8dd8d00",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e8683ff8_8a04a46b",
        "filename": "third_party/WebKit/Source/platform/wtf/ConstructTraits.h",
        "patchSetId": 6
      },
      "lineNbr": 28,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2017-12-19T08:05:04Z",
      "side": 1,
      "message": "Yes (keeping unresolved since I am just going through the questions.)",
      "parentUuid": "fe268bc8_38743923",
      "revId": "1a1df4f049051f6bb684c9bf5542ba4fd8dd8d00",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ea03c2e3_cc04819b",
        "filename": "third_party/WebKit/Source/platform/wtf/ConstructTraits.h",
        "patchSetId": 6
      },
      "lineNbr": 28,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2017-12-19T13:50:13Z",
      "side": 1,
      "message": "Added the notification methods to ParitionAllocator. This removes one boolean from the traits.",
      "parentUuid": "e8683ff8_8a04a46b",
      "revId": "1a1df4f049051f6bb684c9bf5542ba4fd8dd8d00",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "74486665_7ddc56f3",
        "filename": "third_party/WebKit/Source/platform/wtf/ConstructTraits.h",
        "patchSetId": 6
      },
      "lineNbr": 53,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2017-12-19T07:54:50Z",
      "side": 1,
      "message": "Just help me understand: Specifically, when can IsTraceableInCollection become false while kIsGarbageCollected is true?\n\nOne case is an on-heap hash table that has weak members. Is there any other case?\n\nHere I have one question: Why is it okay to not insert a write-barrier for weak member assignment? Consider the following case:\n\nWeakMember\u003cT\u003e x \u003d obj1;\n... // Incremental marking traces from x to obj1.\nx \u003d obj2;  // A write-barrier is not dispatched.\n\nThen who clears x when obj2 gets destructed?",
      "revId": "1a1df4f049051f6bb684c9bf5542ba4fd8dd8d00",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2a168854_679b5c30",
        "filename": "third_party/WebKit/Source/platform/wtf/ConstructTraits.h",
        "patchSetId": 6
      },
      "lineNbr": 53,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2017-12-19T13:50:13Z",
      "side": 1,
      "message": "WeakMember case has been discussed offline.",
      "parentUuid": "74486665_7ddc56f3",
      "revId": "1a1df4f049051f6bb684c9bf5542ba4fd8dd8d00",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "10fe4a1e_8cc5c6d2",
        "filename": "third_party/WebKit/Source/platform/wtf/ConstructTraits.h",
        "patchSetId": 6
      },
      "lineNbr": 69,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2017-12-19T07:54:50Z",
      "side": 1,
      "message": "I don\u0027t understand this. Why is the inner vector of WTF::Vector\u003cWTF::Vector\u003cT\u003e\u003e traceable?",
      "revId": "1a1df4f049051f6bb684c9bf5542ba4fd8dd8d00",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "84ebf683_062d1ea0",
        "filename": "third_party/WebKit/Source/platform/wtf/ConstructTraits.h",
        "patchSetId": 6
      },
      "lineNbr": 69,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2017-12-19T08:05:04Z",
      "side": 1,
      "message": "Consider \n  Vector\u003c  // 1\n    Vector\u003cT\u003e  // 2\n  \u003e\n\nCase (2) is traceable because Vector\u003cT\u003e has a tracing method (in Vector.h). So case (1) will go here as it\u0027s inner type is traceable. I think this could in theory be solved by moving Vector::Trace on to HeapVector. One would need to try to see whether that is possible or not.",
      "parentUuid": "10fe4a1e_8cc5c6d2",
      "revId": "1a1df4f049051f6bb684c9bf5542ba4fd8dd8d00",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "57f3eb91_c2f07149",
        "filename": "third_party/WebKit/Source/platform/wtf/ConstructTraits.h",
        "patchSetId": 6
      },
      "lineNbr": 69,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2017-12-19T08:16:31Z",
      "side": 1,
      "message": "When can Vector\u003cT\u003e happens? It doesn\u0027t look like a valid use case. If T has a trace method, it must be HeapVector\u003cT\u003e. Otherwise, no one traces into the vector.\n\nIn other words, I\u0027d prefer adding static_assert(0) to line 76.",
      "parentUuid": "84ebf683_062d1ea0",
      "revId": "1a1df4f049051f6bb684c9bf5542ba4fd8dd8d00",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d672eab2_7739c4fa",
        "filename": "third_party/WebKit/Source/platform/wtf/ConstructTraits.h",
        "patchSetId": 6
      },
      "lineNbr": 69,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2017-12-19T13:50:13Z",
      "side": 1,
      "message": "Vector\u003cVector\u003cSomeClass\u003e\u003e is a valid use case I think.\n\nHowever, in that case, we actually have Vector\u003cSomethingThatIsTraceable\u003e because Vector\u003cSomeClass\u003e is traceable. We have a DCHECK there that Trace is never called but it is still required for compile time.\n\nAdding the method to PartitionAllocator removes this specialization.",
      "parentUuid": "57f3eb91_c2f07149",
      "revId": "1a1df4f049051f6bb684c9bf5542ba4fd8dd8d00",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8e4970d5_0d8e16a3",
        "filename": "third_party/WebKit/Source/platform/wtf/ConstructTraits.h",
        "patchSetId": 6
      },
      "lineNbr": 92,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2017-12-19T07:54:50Z",
      "side": 1,
      "message": "Do DISALLOW_NEW_EXCEPT_NEW objects hit this case?",
      "revId": "1a1df4f049051f6bb684c9bf5542ba4fd8dd8d00",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9d5672c5_5e91bb6d",
        "filename": "third_party/WebKit/Source/platform/wtf/ConstructTraits.h",
        "patchSetId": 6
      },
      "lineNbr": 92,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2017-12-19T08:05:04Z",
      "side": 1,
      "message": "Yes.",
      "parentUuid": "8e4970d5_0d8e16a3",
      "revId": "1a1df4f049051f6bb684c9bf5542ba4fd8dd8d00",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "43218f92_b48cdd70",
        "filename": "third_party/WebKit/Source/platform/wtf/ConstructTraits.h",
        "patchSetId": 6
      },
      "lineNbr": 101,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2017-12-19T07:54:50Z",
      "side": 1,
      "message": "Sorry, I don\u0027t fully understand the point of NotifyNewObject... What is it for?",
      "revId": "1a1df4f049051f6bb684c9bf5542ba4fd8dd8d00",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ceaee77b_49001d7c",
        "filename": "third_party/WebKit/Source/platform/wtf/ConstructTraits.h",
        "patchSetId": 6
      },
      "lineNbr": 101,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2017-12-19T08:05:04Z",
      "side": 1,
      "message": "It\u0027s when we in-place construct objects in a vector, or move a vector of such objects.\n\nSee IncrementalMarkingTest.cc dealing with \"NonGarbageCollectedContainer\". For example, HeapVectorEmplaceBackNonGCedContainer or HeapVectorCopyNonGCedContainer.",
      "parentUuid": "43218f92_b48cdd70",
      "revId": "1a1df4f049051f6bb684c9bf5542ba4fd8dd8d00",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9df9e7d7_506dabf3",
        "filename": "third_party/WebKit/Source/platform/wtf/ConstructTraits.h",
        "patchSetId": 6
      },
      "lineNbr": 101,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2017-12-19T08:16:31Z",
      "side": 1,
      "message": "Ah, I was confused because this CL has #if 0 to NotifyNewObject :) Makes sense.",
      "parentUuid": "ceaee77b_49001d7c",
      "revId": "1a1df4f049051f6bb684c9bf5542ba4fd8dd8d00",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "06b759b5_bacc1937",
        "filename": "third_party/WebKit/Source/platform/wtf/Vector.h",
        "patchSetId": 6
      },
      "lineNbr": 180,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2017-12-19T07:54:50Z",
      "side": 1,
      "message": "Nit: Changing the second parameter from |void* end| to |size_t len| will simplify the call sites.",
      "revId": "1a1df4f049051f6bb684c9bf5542ba4fd8dd8d00",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f9066acb_c504034b",
        "filename": "third_party/WebKit/Source/platform/wtf/Vector.h",
        "patchSetId": 6
      },
      "lineNbr": 180,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2017-12-19T13:50:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "06b759b5_bacc1937",
      "revId": "1a1df4f049051f6bb684c9bf5542ba4fd8dd8d00",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}