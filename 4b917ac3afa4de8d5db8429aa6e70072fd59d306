{
  "comments": [
    {
      "key": {
        "uuid": "87466151_3ea46773",
        "filename": "extensions/common/api/declarative_net_request/DEPS",
        "patchSetId": 13
      },
      "lineNbr": 2,
      "author": {
        "id": 1001727
      },
      "writtenOn": "2017-08-04T23:24:58Z",
      "side": 1,
      "message": "As I mentioned offline yesterday, I\u0027m not super thrilled about extension/common depending on this.\n\nCan you run DEPS and BUILD.gn by Devlin quickly (in parallel)",
      "range": {
        "startLine": 2,
        "startChar": 15,
        "endLine": 2,
        "endChar": 32
      },
      "revId": "4b917ac3afa4de8d5db8429aa6e70072fd59d306",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "34901eee_6d9eca64",
        "filename": "extensions/common/api/declarative_net_request/DEPS",
        "patchSetId": 13
      },
      "lineNbr": 2,
      "author": {
        "id": 1161815
      },
      "writtenOn": "2017-08-05T01:02:25Z",
      "side": 1,
      "message": "Sure, will do.",
      "parentUuid": "87466151_3ea46773",
      "range": {
        "startLine": 2,
        "startChar": 15,
        "endLine": 2,
        "endChar": 32
      },
      "revId": "4b917ac3afa4de8d5db8429aa6e70072fd59d306",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2a8b42ce_4e1e5695",
        "filename": "extensions/common/api/declarative_net_request/DEPS",
        "patchSetId": 13
      },
      "lineNbr": 2,
      "author": {
        "id": 1161815
      },
      "writtenOn": "2017-08-07T22:38:45Z",
      "side": 1,
      "message": "Marking as resolved.",
      "parentUuid": "34901eee_6d9eca64",
      "range": {
        "startLine": 2,
        "startChar": 15,
        "endLine": 2,
        "endChar": 32
      },
      "revId": "4b917ac3afa4de8d5db8429aa6e70072fd59d306",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "acca7fb3_9ac40ea3",
        "filename": "extensions/common/api/declarative_net_request/indexed_rule.cc",
        "patchSetId": 13
      },
      "lineNbr": 22,
      "author": {
        "id": 1001727
      },
      "writtenOn": "2017-08-04T23:24:58Z",
      "side": 1,
      "message": "Aliasing namespaces to a completely different name hurts readability IMO, how about\nnamespace flat \u003d ::url_pattern_index::flat;\nnamespace declarative_net_request \u003d ::extensions::api::declarative_net_request;\n\nWould that work?\nI see you can\u0027t use declarative_net_request here, but you can put it at top level and refer to it using ::declarative_net_request.",
      "range": {
        "startLine": 22,
        "startChar": 10,
        "endLine": 22,
        "endChar": 17
      },
      "revId": "4b917ac3afa4de8d5db8429aa6e70072fd59d306",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "772979b8_d83cc090",
        "filename": "extensions/common/api/declarative_net_request/indexed_rule.cc",
        "patchSetId": 13
      },
      "lineNbr": 22,
      "author": {
        "id": 1161815
      },
      "writtenOn": "2017-08-05T01:02:25Z",
      "side": 1,
      "message": "The generated flatbuffer extension schema (which\u0027ll be introduced in https://chromium-review.googlesource.com/c/595223) will live in extensions::declarative_net_request::flat. Hence I think flat_rule is more appropriate here. \n\nAlso, I think to avoid confusion between extensions::declarative_net_request and extensions::api::declarative_net_request, something other than declarative_net_request is better. (Open to considering something other than dnr_api).\n\nAlso, I didn\u0027t get your suggestion about putting declarative_net_request at the top level. We shouldn\u0027t be polluting the global namespace right?",
      "parentUuid": "acca7fb3_9ac40ea3",
      "range": {
        "startLine": 22,
        "startChar": 10,
        "endLine": 22,
        "endChar": 17
      },
      "revId": "4b917ac3afa4de8d5db8429aa6e70072fd59d306",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2c933359_498a5c26",
        "filename": "extensions/common/api/declarative_net_request/indexed_rule.cc",
        "patchSetId": 13
      },
      "lineNbr": 22,
      "author": {
        "id": 1001727
      },
      "writtenOn": "2017-08-05T03:23:54Z",
      "side": 1,
      "message": "1) For flat collision\nusing namespace flat \u003d extensions::declarative_net_request::flat\nand you refer to url_pattern index\u0027s one as \"url_pattern_index::flat\" always in the code (and not alias it)\nWould that work?\n\n2) Not sure about top level question. Do you mean whether we can have\nextensions::declarative_net_request namespace? I think that\u0027s fine. If you meant sth else then let me know.\n\n3) One alternative to dnr_api is to\nnamespace api \u003d \"extensions::api\" and refer to stuffs inside the namespace as:\napi::declarative_net_request::RESOURCE_TYPE_NONE\nIt\u0027s clearer that way.",
      "parentUuid": "772979b8_d83cc090",
      "range": {
        "startLine": 22,
        "startChar": 10,
        "endLine": 22,
        "endChar": 17
      },
      "revId": "4b917ac3afa4de8d5db8429aa6e70072fd59d306",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "35e944fd_17ea3879",
        "filename": "extensions/common/api/declarative_net_request/indexed_rule.cc",
        "patchSetId": 13
      },
      "lineNbr": 22,
      "author": {
        "id": 1161815
      },
      "writtenOn": "2017-08-07T22:38:45Z",
      "side": 1,
      "message": "There are 41 usages of flat_rule and 24 usages of dnr_api in this file. Using url_pattern_index::flat and api::declarative_net_request introduces a lot of verbosity.\n\nSince these aliases are not exposed as part of the public API and are an implementation detail, think this should be fine? We already have multiple precedents in extensions code where we alias to a different name (e.g. https://cs.chromium.org/chromium/src/extensions/browser/api/vpn_provider/vpn_service.cc?q\u003dnamespace.*%3D+file:%5Esrc/extensions/+package:%5Echromium$+file:cc\u0026l\u003d42\u0026dr\u003dC and https://cs.chromium.org/chromium/src/extensions/browser/api/web_request/web_request_api.cc?q\u003dnamespace.*%3D+file:%5Esrc/extensions/+package:%5Echromium$+file:cc\u0026dr\u003dC\u0026l\u003d83 etc.)",
      "parentUuid": "2c933359_498a5c26",
      "range": {
        "startLine": 22,
        "startChar": 10,
        "endLine": 22,
        "endChar": 17
      },
      "revId": "4b917ac3afa4de8d5db8429aa6e70072fd59d306",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bf0b5468_21ddbfd8",
        "filename": "extensions/common/api/declarative_net_request/indexed_rule.cc",
        "patchSetId": 13
      },
      "lineNbr": 22,
      "author": {
        "id": 1161815
      },
      "writtenOn": "2017-08-07T22:51:06Z",
      "side": 1,
      "message": "Also, if you feel strongly about this, I can rename:\n-extensions::declarative_net_request -\u003e extensions::dnr\n-extensions::declarative_net_request::flat -\u003e extensions::dnr::flat_ruleset\n\nto avoid collisions.",
      "parentUuid": "35e944fd_17ea3879",
      "range": {
        "startLine": 22,
        "startChar": 10,
        "endLine": 22,
        "endChar": 17
      },
      "revId": "4b917ac3afa4de8d5db8429aa6e70072fd59d306",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3ff3e481_1a050182",
        "filename": "extensions/common/api/declarative_net_request/indexed_rule.cc",
        "patchSetId": 13
      },
      "lineNbr": 43,
      "author": {
        "id": 1001727
      },
      "writtenOn": "2017-08-04T23:24:58Z",
      "side": 1,
      "message": "So Parse() is supposed to be called exactly once per UrlFilterParser instance, right?\n\nInstead of DCHECKing to ensure that, it would be better to make UrlFilterParser abstract and provide only public method static UrlFilterParser::Parse and don\u0027t allow instance creation of this class.\n\nIt\u0027s easier to reason about the state machine for this class this way.",
      "range": {
        "startLine": 43,
        "startChar": 0,
        "endLine": 43,
        "endChar": 26
      },
      "revId": "4b917ac3afa4de8d5db8429aa6e70072fd59d306",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ebd2c537_6208a274",
        "filename": "extensions/common/api/declarative_net_request/indexed_rule.cc",
        "patchSetId": 13
      },
      "lineNbr": 43,
      "author": {
        "id": 1161815
      },
      "writtenOn": "2017-08-05T01:02:25Z",
      "side": 1,
      "message": "Good point. \nDid you mean something like this?",
      "parentUuid": "3ff3e481_1a050182",
      "range": {
        "startLine": 43,
        "startChar": 0,
        "endLine": 43,
        "endChar": 26
      },
      "revId": "4b917ac3afa4de8d5db8429aa6e70072fd59d306",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "17f3ce71_cf78b70a",
        "filename": "extensions/common/api/declarative_net_request/indexed_rule.cc",
        "patchSetId": 13
      },
      "lineNbr": 43,
      "author": {
        "id": 1001727
      },
      "writtenOn": "2017-08-05T03:23:54Z",
      "side": 1,
      "message": "Yes.",
      "parentUuid": "ebd2c537_6208a274",
      "range": {
        "startLine": 43,
        "startChar": 0,
        "endLine": 43,
        "endChar": 26
      },
      "revId": "4b917ac3afa4de8d5db8429aa6e70072fd59d306",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "54a7c088_9e6e733a",
        "filename": "extensions/common/api/declarative_net_request/indexed_rule.cc",
        "patchSetId": 13
      },
      "lineNbr": 43,
      "author": {
        "id": 1161815
      },
      "writtenOn": "2017-08-07T22:38:45Z",
      "side": 1,
      "message": "Marking as resolved.",
      "parentUuid": "17f3ce71_cf78b70a",
      "range": {
        "startLine": 43,
        "startChar": 0,
        "endLine": 43,
        "endChar": 26
      },
      "revId": "4b917ac3afa4de8d5db8429aa6e70072fd59d306",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9c4a0717_08a4bf5b",
        "filename": "extensions/common/api/declarative_net_request/indexed_rule.cc",
        "patchSetId": 13
      },
      "lineNbr": 230,
      "author": {
        "id": 1001727
      },
      "writtenOn": "2017-08-04T23:24:58Z",
      "side": 1,
      "message": "I\u0027m not sure I follow this, why tolowercase after sort+unique? That will break unique-ness. Also, did you consider making IndexedRule::domains a std::set? Manually keeping vector fields sorted is a bit painful and prone to future error.",
      "range": {
        "startLine": 230,
        "startChar": 0,
        "endLine": 230,
        "endChar": 54
      },
      "revId": "4b917ac3afa4de8d5db8429aa6e70072fd59d306",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7ce0b278_3e5d5dc2",
        "filename": "extensions/common/api/declarative_net_request/indexed_rule.cc",
        "patchSetId": 13
      },
      "lineNbr": 230,
      "author": {
        "id": 1161815
      },
      "writtenOn": "2017-08-05T01:02:25Z",
      "side": 1,
      "message": "Good catch. Actually Pavel pointed out in a subsequent CL that the domains need to be sorted in a different manner. I had sent https://chromium-review.googlesource.com/c/601438 for it as a follow-up to this. Added TODO(s) in this CL for it.",
      "parentUuid": "9c4a0717_08a4bf5b",
      "range": {
        "startLine": 230,
        "startChar": 0,
        "endLine": 230,
        "endChar": 54
      },
      "revId": "4b917ac3afa4de8d5db8429aa6e70072fd59d306",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "988eb988_4f1c7499",
        "filename": "extensions/common/api/declarative_net_request/indexed_rule.cc",
        "patchSetId": 13
      },
      "lineNbr": 241,
      "author": {
        "id": 1001727
      },
      "writtenOn": "2017-08-04T23:24:58Z",
      "side": 1,
      "message": "I think this is better suited as a static method inside IndexedRule",
      "range": {
        "startLine": 241,
        "startChar": 12,
        "endLine": 241,
        "endChar": 29
      },
      "revId": "4b917ac3afa4de8d5db8429aa6e70072fd59d306",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f0c72d04_e5d36249",
        "filename": "extensions/common/api/declarative_net_request/indexed_rule.cc",
        "patchSetId": 13
      },
      "lineNbr": 241,
      "author": {
        "id": 1161815
      },
      "writtenOn": "2017-08-05T01:02:25Z",
      "side": 1,
      "message": "Done. Although I think generally namespace scoped free functions should be preferred over static functions. Static functions get access to the private state of the class. Here it\u0027s a struct, so probably a static function is better.",
      "parentUuid": "988eb988_4f1c7499",
      "range": {
        "startLine": 241,
        "startChar": 12,
        "endLine": 241,
        "endChar": 29
      },
      "revId": "4b917ac3afa4de8d5db8429aa6e70072fd59d306",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "29697638_7a16f1c9",
        "filename": "extensions/common/api/declarative_net_request/indexed_rule_unittest.cc",
        "patchSetId": 13
      },
      "lineNbr": 26,
      "author": {
        "id": 1001727
      },
      "writtenOn": "2017-08-04T23:24:58Z",
      "side": 1,
      "message": "It\u0027s probably a good idea to not use using for these two. I\u0027ve almost never seen this in our codebase.",
      "range": {
        "startLine": 26,
        "startChar": 12,
        "endLine": 26,
        "endChar": 22
      },
      "revId": "4b917ac3afa4de8d5db8429aa6e70072fd59d306",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8ab074f6_c447fa05",
        "filename": "extensions/common/api/declarative_net_request/indexed_rule_unittest.cc",
        "patchSetId": 13
      },
      "lineNbr": 26,
      "author": {
        "id": 1161815
      },
      "writtenOn": "2017-08-05T01:02:25Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "29697638_7a16f1c9",
      "range": {
        "startLine": 26,
        "startChar": 12,
        "endLine": 26,
        "endChar": 22
      },
      "revId": "4b917ac3afa4de8d5db8429aa6e70072fd59d306",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f61b1973_98104d5e",
        "filename": "extensions/common/api/declarative_net_request/indexed_rule_unittest.cc",
        "patchSetId": 13
      },
      "lineNbr": 46,
      "author": {
        "id": 1001727
      },
      "writtenOn": "2017-08-04T23:24:58Z",
      "side": 1,
      "message": "nit: ++i",
      "range": {
        "startLine": 46,
        "startChar": 20,
        "endLine": 46,
        "endChar": 21
      },
      "revId": "4b917ac3afa4de8d5db8429aa6e70072fd59d306",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "585d48e8_40e04076",
        "filename": "extensions/common/api/declarative_net_request/indexed_rule_unittest.cc",
        "patchSetId": 13
      },
      "lineNbr": 46,
      "author": {
        "id": 1161815
      },
      "writtenOn": "2017-08-05T01:02:25Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f61b1973_98104d5e",
      "range": {
        "startLine": 46,
        "startChar": 20,
        "endLine": 46,
        "endChar": 21
      },
      "revId": "4b917ac3afa4de8d5db8429aa6e70072fd59d306",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "840314e2_b61a60fd",
        "filename": "extensions/common/api/declarative_net_request/indexed_rule_unittest.cc",
        "patchSetId": 13
      },
      "lineNbr": 48,
      "author": {
        "id": 1001727
      },
      "writtenOn": "2017-08-04T23:24:58Z",
      "side": 1,
      "message": "This definitely looks odd, you\u0027re using move constructor to construct the unique ptr.\nI\u0027d have imagined CreateGenericParsedRule returning std::unique\u003cRule\u003e and you\u0027d just assign it to |rule| here.",
      "range": {
        "startLine": 48,
        "startChar": 15,
        "endLine": 48,
        "endChar": 22
      },
      "revId": "4b917ac3afa4de8d5db8429aa6e70072fd59d306",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "17d1f610_d4b9060c",
        "filename": "extensions/common/api/declarative_net_request/indexed_rule_unittest.cc",
        "patchSetId": 13
      },
      "lineNbr": 48,
      "author": {
        "id": 1161815
      },
      "writtenOn": "2017-08-05T01:02:25Z",
      "side": 1,
      "message": "Agreed! Changed to CreateGenericParsedRule returning a unique_ptr.",
      "parentUuid": "840314e2_b61a60fd",
      "range": {
        "startLine": 48,
        "startChar": 15,
        "endLine": 48,
        "endChar": 22
      },
      "revId": "4b917ac3afa4de8d5db8429aa6e70072fd59d306",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}