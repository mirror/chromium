{
  "comments": [
    {
      "key": {
        "uuid": "2dc7bd8e_9907d922",
        "filename": "content/renderer/accessibility/aom_content_ax_tree.cc",
        "patchSetId": 14
      },
      "lineNbr": 20,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2018-01-22T14:57:49Z",
      "side": 1,
      "message": "What happens if:\n\n1) ComputeAccessibilityTree is called for frame 1.\n2) ComputeAccessibilityTree is called for frame 2.\n3) GetNameForAXNode is called for frame 1.\n\n? Won\u0027t it confuse the result of 3)?\n\ni.e., I guess we need to create AomContentAxTree per frame, not per renderer.",
      "revId": "da2a1a5cd8332f17bd6382b0367cdd6e9ef7710c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e58a579f_507c8f88",
        "filename": "content/renderer/accessibility/aom_content_ax_tree.cc",
        "patchSetId": 14
      },
      "lineNbr": 20,
      "author": {
        "id": 1002537
      },
      "writtenOn": "2018-01-22T23:39:25Z",
      "side": 1,
      "message": "So in this file we\u0027d need to have a map of frame to ui::AXTree?",
      "parentUuid": "2dc7bd8e_9907d922",
      "revId": "da2a1a5cd8332f17bd6382b0367cdd6e9ef7710c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "92aa7e75_8ee9468f",
        "filename": "content/renderer/accessibility/aom_content_ax_tree.cc",
        "patchSetId": 14
      },
      "lineNbr": 20,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2018-01-22T23:46:15Z",
      "side": 1,
      "message": "The advantage of a map from frame to AXTree is that we\u0027ll need that eventually\nif we want to allow access to other frames, OOPIFs, or the desktop tree.\n\nAs a quick hack just to land this change, what about just keeping track of\nthe frame and then asserting / crashing if you ever try to access the\ncomputed accessibility tree for a different frame?",
      "parentUuid": "e58a579f_507c8f88",
      "revId": "da2a1a5cd8332f17bd6382b0367cdd6e9ef7710c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fd250315_8be00ec3",
        "filename": "content/renderer/accessibility/aom_content_ax_tree.cc",
        "patchSetId": 14
      },
      "lineNbr": 20,
      "author": {
        "id": 1002537
      },
      "writtenOn": "2018-01-23T00:17:45Z",
      "side": 1,
      "message": "Perhaps instead of crashing it could return false?\n\nSo: first time this method gets called (i.e. existing reference is nullptr), store a weak reference to web_frame.\nSubsequent calls, check that web_frame is the same as the stored reference, and if not return false.",
      "parentUuid": "92aa7e75_8ee9468f",
      "revId": "da2a1a5cd8332f17bd6382b0367cdd6e9ef7710c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fe8cef1a_89a3587c",
        "filename": "third_party/WebKit/Source/core/dom/ComputedAccessibleNode.h",
        "patchSetId": 14
      },
      "lineNbr": 36,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2018-01-22T23:46:15Z",
      "side": 1,
      "message": "I\u0027d say null strings rather than blank strings.\n\nAn AtomicString can take the value of g_null_atom or g_empty_atom (\"\").\n\"blank\" is a little ambiguous.",
      "revId": "da2a1a5cd8332f17bd6382b0367cdd6e9ef7710c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6bc6862f_48780293",
        "filename": "third_party/WebKit/Source/core/dom/Element.cpp",
        "patchSetId": 14
      },
      "lineNbr": 1286,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2018-01-22T14:57:49Z",
      "side": 1,
      "message": "What is this doing? (It looks a bit strange to manipulate page settings while JavaScript is calling a DOM method.)",
      "revId": "da2a1a5cd8332f17bd6382b0367cdd6e9ef7710c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f3832d02_48b8fcd0",
        "filename": "third_party/WebKit/Source/core/dom/Element.cpp",
        "patchSetId": 14
      },
      "lineNbr": 1286,
      "author": {
        "id": 1002537
      },
      "writtenOn": "2018-01-22T23:39:25Z",
      "side": 1,
      "message": "We should probably add a TODO here to create a finer-grained method for this.\n\nThis enabled the accessibility tree to be computed for this page.",
      "parentUuid": "6bc6862f_48780293",
      "revId": "da2a1a5cd8332f17bd6382b0367cdd6e9ef7710c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6950f63b_bd73107b",
        "filename": "third_party/WebKit/Source/core/frame/LocalDOMWindow.cpp",
        "patchSetId": 14
      },
      "lineNbr": 1116,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2018-01-22T14:57:49Z",
      "side": 1,
      "message": "I think we should use GetFrame() associated this LocalDOMWindow.",
      "revId": "da2a1a5cd8332f17bd6382b0367cdd6e9ef7710c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "95381e3c_3bc39dc3",
        "filename": "third_party/WebKit/public/platform/ComputedAXTree.h",
        "patchSetId": 14
      },
      "lineNbr": 1,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2018-01-22T14:57:49Z",
      "side": 1,
      "message": "2018",
      "revId": "da2a1a5cd8332f17bd6382b0367cdd6e9ef7710c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f2d97403_0999c07c",
        "filename": "third_party/WebKit/public/platform/ComputedAXTree.h",
        "patchSetId": 14
      },
      "lineNbr": 14,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2018-01-22T14:57:49Z",
      "side": 1,
      "message": "WebComputedAXTree\n\nPublic classes should be prefixed with \"Web\" (although some classes don\u0027t follow the rule...).",
      "revId": "da2a1a5cd8332f17bd6382b0367cdd6e9ef7710c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "654a0815_11d7ee74",
        "filename": "third_party/WebKit/public/platform/ComputedAXTree.h",
        "patchSetId": 14
      },
      "lineNbr": 18,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2018-01-22T14:57:49Z",
      "side": 1,
      "message": "This should return WebString.",
      "revId": "da2a1a5cd8332f17bd6382b0367cdd6e9ef7710c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b8702b63_09a3ccf5",
        "filename": "third_party/WebKit/public/platform/ComputedAXTree.h",
        "patchSetId": 14
      },
      "lineNbr": 19,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2018-01-22T14:57:49Z",
      "side": 1,
      "message": "Ditto.",
      "revId": "da2a1a5cd8332f17bd6382b0367cdd6e9ef7710c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}