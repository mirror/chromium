{
  "comments": [
    {
      "key": {
        "uuid": "2dc7bd8e_9907d922",
        "filename": "content/renderer/accessibility/aom_content_ax_tree.cc",
        "patchSetId": 14
      },
      "lineNbr": 20,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2018-01-22T14:57:49Z",
      "side": 1,
      "message": "What happens if:\n\n1) ComputeAccessibilityTree is called for frame 1.\n2) ComputeAccessibilityTree is called for frame 2.\n3) GetNameForAXNode is called for frame 1.\n\n? Won\u0027t it confuse the result of 3)?\n\ni.e., I guess we need to create AomContentAxTree per frame, not per renderer.",
      "revId": "da2a1a5cd8332f17bd6382b0367cdd6e9ef7710c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e58a579f_507c8f88",
        "filename": "content/renderer/accessibility/aom_content_ax_tree.cc",
        "patchSetId": 14
      },
      "lineNbr": 20,
      "author": {
        "id": 1002537
      },
      "writtenOn": "2018-01-22T23:39:25Z",
      "side": 1,
      "message": "So in this file we\u0027d need to have a map of frame to ui::AXTree?",
      "parentUuid": "2dc7bd8e_9907d922",
      "revId": "da2a1a5cd8332f17bd6382b0367cdd6e9ef7710c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "92aa7e75_8ee9468f",
        "filename": "content/renderer/accessibility/aom_content_ax_tree.cc",
        "patchSetId": 14
      },
      "lineNbr": 20,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2018-01-22T23:46:15Z",
      "side": 1,
      "message": "The advantage of a map from frame to AXTree is that we\u0027ll need that eventually\nif we want to allow access to other frames, OOPIFs, or the desktop tree.\n\nAs a quick hack just to land this change, what about just keeping track of\nthe frame and then asserting / crashing if you ever try to access the\ncomputed accessibility tree for a different frame?",
      "parentUuid": "e58a579f_507c8f88",
      "revId": "da2a1a5cd8332f17bd6382b0367cdd6e9ef7710c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fd250315_8be00ec3",
        "filename": "content/renderer/accessibility/aom_content_ax_tree.cc",
        "patchSetId": 14
      },
      "lineNbr": 20,
      "author": {
        "id": 1002537
      },
      "writtenOn": "2018-01-23T00:17:45Z",
      "side": 1,
      "message": "Perhaps instead of crashing it could return false?\n\nSo: first time this method gets called (i.e. existing reference is nullptr), store a weak reference to web_frame.\nSubsequent calls, check that web_frame is the same as the stored reference, and if not return false.",
      "parentUuid": "92aa7e75_8ee9468f",
      "revId": "da2a1a5cd8332f17bd6382b0367cdd6e9ef7710c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2ca9167f_f40dc276",
        "filename": "content/renderer/accessibility/aom_content_ax_tree.cc",
        "patchSetId": 14
      },
      "lineNbr": 20,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2018-01-23T01:53:45Z",
      "side": 1,
      "message": "Would it be crazy to make RenderFrameImpl own AOMContextAXTree if it\u0027s expected to be a per-frame thing?",
      "parentUuid": "fd250315_8be00ec3",
      "revId": "da2a1a5cd8332f17bd6382b0367cdd6e9ef7710c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "63dc6453_25dc9327",
        "filename": "content/renderer/accessibility/aom_content_ax_tree.cc",
        "patchSetId": 14
      },
      "lineNbr": 20,
      "author": {
        "id": 1002537
      },
      "writtenOn": "2018-01-23T02:08:17Z",
      "side": 1,
      "message": "Would it be ok to make this a TODO?",
      "parentUuid": "2ca9167f_f40dc276",
      "revId": "da2a1a5cd8332f17bd6382b0367cdd6e9ef7710c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8002eb25_46994947",
        "filename": "content/renderer/accessibility/aom_content_ax_tree.cc",
        "patchSetId": 14
      },
      "lineNbr": 20,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2018-01-23T02:18:44Z",
      "side": 1,
      "message": "Would it be hard to make the change?\n\nAt the moment this CL is passing around WebFrame parameters in a bunch of places unnecessarily. If we make RenderFrameImpl own AOMContextAXTree, that will be gone. (i.e., it doesn\u0027t make sense to create AOMContextAXTree on a per-renderer basis but use it on a per-frame basis.)",
      "parentUuid": "63dc6453_25dc9327",
      "revId": "da2a1a5cd8332f17bd6382b0367cdd6e9ef7710c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fcdae3c6_b2779a24",
        "filename": "content/renderer/accessibility/aom_content_ax_tree.cc",
        "patchSetId": 14
      },
      "lineNbr": 20,
      "author": {
        "id": 1002537
      },
      "writtenOn": "2018-01-23T02:20:50Z",
      "side": 1,
      "message": "Could you explain what the flow should be to retrieve the correct AOMContentAXTree from ComputedAccessibleNode in blink, in this scenario?",
      "parentUuid": "8002eb25_46994947",
      "revId": "da2a1a5cd8332f17bd6382b0367cdd6e9ef7710c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "272e19f7_9e1af567",
        "filename": "content/renderer/accessibility/aom_content_ax_tree.cc",
        "patchSetId": 14
      },
      "lineNbr": 20,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2018-01-23T02:26:12Z",
      "side": 1,
      "message": "You can get a frame by localDOMWindow-\u003eGetFrame(). Then get a corresponding RenderFrame. Then get AOMContentAXTree from the RenderFrame.",
      "parentUuid": "fcdae3c6_b2779a24",
      "revId": "da2a1a5cd8332f17bd6382b0367cdd6e9ef7710c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "26c1bdc5_bf4a321d",
        "filename": "content/renderer/accessibility/aom_content_ax_tree.cc",
        "patchSetId": 14
      },
      "lineNbr": 20,
      "author": {
        "id": 1002537
      },
      "writtenOn": "2018-01-23T02:28:32Z",
      "side": 1,
      "message": "So something like https://cs.chromium.org/chromium/src/content/renderer/renderer_blink_platform_impl.cc?q\u003denderer_blink_platform_impl.cc\u0026dr\u0026l\u003d196, still going via renderer_blink_platform_impl?",
      "parentUuid": "272e19f7_9e1af567",
      "revId": "da2a1a5cd8332f17bd6382b0367cdd6e9ef7710c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fe8cef1a_89a3587c",
        "filename": "third_party/WebKit/Source/core/dom/ComputedAccessibleNode.h",
        "patchSetId": 14
      },
      "lineNbr": 36,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2018-01-22T23:46:15Z",
      "side": 1,
      "message": "I\u0027d say null strings rather than blank strings.\n\nAn AtomicString can take the value of g_null_atom or g_empty_atom (\"\").\n\"blank\" is a little ambiguous.",
      "revId": "da2a1a5cd8332f17bd6382b0367cdd6e9ef7710c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "105d73cd_5cf7a6ab",
        "filename": "third_party/WebKit/Source/core/dom/ComputedAccessibleNode.h",
        "patchSetId": 14
      },
      "lineNbr": 36,
      "author": {
        "id": 1256034
      },
      "writtenOn": "2018-01-23T00:24:47Z",
      "side": 1,
      "message": "Are you asking me to change the implementation, or just the vague comment?\n\nAt the moment, the hacky implementation is that they do return a blank string (\"\") (see https://crrev.com/c/848575/14/content/renderer/accessibility/aom_content_ax_tree.cc#41) if there is no node in the accessibility tree for an axID, or the node does not have the requested accessibile property. I have implemented the rest of the string property accessors and made them actually return null in the above cases in another CL but am blocked on this one landing first, and didn\u0027t want to bloat this CL anymore or have too many dependent ones in the queue.\n\nThere is a TODO in aom_content_ax_tree.h that indicates that null string returns is coming. Is that sufficient?",
      "parentUuid": "fe8cef1a_89a3587c",
      "revId": "da2a1a5cd8332f17bd6382b0367cdd6e9ef7710c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6bc6862f_48780293",
        "filename": "third_party/WebKit/Source/core/dom/Element.cpp",
        "patchSetId": 14
      },
      "lineNbr": 1286,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2018-01-22T14:57:49Z",
      "side": 1,
      "message": "What is this doing? (It looks a bit strange to manipulate page settings while JavaScript is calling a DOM method.)",
      "revId": "da2a1a5cd8332f17bd6382b0367cdd6e9ef7710c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f3832d02_48b8fcd0",
        "filename": "third_party/WebKit/Source/core/dom/Element.cpp",
        "patchSetId": 14
      },
      "lineNbr": 1286,
      "author": {
        "id": 1002537
      },
      "writtenOn": "2018-01-22T23:39:25Z",
      "side": 1,
      "message": "We should probably add a TODO here to create a finer-grained method for this.\n\nThis enabled the accessibility tree to be computed for this page.",
      "parentUuid": "6bc6862f_48780293",
      "revId": "da2a1a5cd8332f17bd6382b0367cdd6e9ef7710c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fdf4af89_f780a0b4",
        "filename": "third_party/WebKit/Source/core/dom/Element.cpp",
        "patchSetId": 14
      },
      "lineNbr": 1286,
      "author": {
        "id": 1256034
      },
      "writtenOn": "2018-01-23T04:09:46Z",
      "side": 1,
      "message": "Done (todo added).",
      "parentUuid": "f3832d02_48b8fcd0",
      "revId": "da2a1a5cd8332f17bd6382b0367cdd6e9ef7710c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6950f63b_bd73107b",
        "filename": "third_party/WebKit/Source/core/frame/LocalDOMWindow.cpp",
        "patchSetId": 14
      },
      "lineNbr": 1116,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2018-01-22T14:57:49Z",
      "side": 1,
      "message": "I think we should use GetFrame() associated this LocalDOMWindow.",
      "revId": "da2a1a5cd8332f17bd6382b0367cdd6e9ef7710c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2c189087_d5710719",
        "filename": "third_party/WebKit/Source/core/frame/LocalDOMWindow.cpp",
        "patchSetId": 14
      },
      "lineNbr": 1116,
      "author": {
        "id": 1256034
      },
      "writtenOn": "2018-01-23T04:09:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6950f63b_bd73107b",
      "revId": "da2a1a5cd8332f17bd6382b0367cdd6e9ef7710c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "95381e3c_3bc39dc3",
        "filename": "third_party/WebKit/public/platform/ComputedAXTree.h",
        "patchSetId": 14
      },
      "lineNbr": 1,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2018-01-22T14:57:49Z",
      "side": 1,
      "message": "2018",
      "revId": "da2a1a5cd8332f17bd6382b0367cdd6e9ef7710c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3173788e_a48025c7",
        "filename": "third_party/WebKit/public/platform/ComputedAXTree.h",
        "patchSetId": 14
      },
      "lineNbr": 1,
      "author": {
        "id": 1256034
      },
      "writtenOn": "2018-01-23T04:09:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "95381e3c_3bc39dc3",
      "revId": "da2a1a5cd8332f17bd6382b0367cdd6e9ef7710c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f2d97403_0999c07c",
        "filename": "third_party/WebKit/public/platform/ComputedAXTree.h",
        "patchSetId": 14
      },
      "lineNbr": 14,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2018-01-22T14:57:49Z",
      "side": 1,
      "message": "WebComputedAXTree\n\nPublic classes should be prefixed with \"Web\" (although some classes don\u0027t follow the rule...).",
      "revId": "da2a1a5cd8332f17bd6382b0367cdd6e9ef7710c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f06c8104_c5a73d42",
        "filename": "third_party/WebKit/public/platform/ComputedAXTree.h",
        "patchSetId": 14
      },
      "lineNbr": 14,
      "author": {
        "id": 1256034
      },
      "writtenOn": "2018-01-23T04:09:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f2d97403_0999c07c",
      "revId": "da2a1a5cd8332f17bd6382b0367cdd6e9ef7710c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "654a0815_11d7ee74",
        "filename": "third_party/WebKit/public/platform/ComputedAXTree.h",
        "patchSetId": 14
      },
      "lineNbr": 18,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2018-01-22T14:57:49Z",
      "side": 1,
      "message": "This should return WebString.",
      "revId": "da2a1a5cd8332f17bd6382b0367cdd6e9ef7710c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "738eab02_a2007c22",
        "filename": "third_party/WebKit/public/platform/ComputedAXTree.h",
        "patchSetId": 14
      },
      "lineNbr": 18,
      "author": {
        "id": 1256034
      },
      "writtenOn": "2018-01-23T04:09:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "654a0815_11d7ee74",
      "revId": "da2a1a5cd8332f17bd6382b0367cdd6e9ef7710c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b8702b63_09a3ccf5",
        "filename": "third_party/WebKit/public/platform/ComputedAXTree.h",
        "patchSetId": 14
      },
      "lineNbr": 19,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2018-01-22T14:57:49Z",
      "side": 1,
      "message": "Ditto.",
      "revId": "da2a1a5cd8332f17bd6382b0367cdd6e9ef7710c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "23407831_4ce69afb",
        "filename": "third_party/WebKit/public/platform/ComputedAXTree.h",
        "patchSetId": 14
      },
      "lineNbr": 19,
      "author": {
        "id": 1256034
      },
      "writtenOn": "2018-01-23T04:09:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b8702b63_09a3ccf5",
      "revId": "da2a1a5cd8332f17bd6382b0367cdd6e9ef7710c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}