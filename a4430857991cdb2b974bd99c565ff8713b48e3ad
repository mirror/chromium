{
  "comments": [
    {
      "key": {
        "uuid": "72d08c55_a8162745",
        "filename": "content/browser/android/content_view_core_impl.cc",
        "patchSetId": 11
      },
      "lineNbr": 1121,
      "author": {
        "id": 1149077
      },
      "writtenOn": "2017-06-07T23:33:57Z",
      "side": 0,
      "message": "dmazzoni@: I have a question on how disabling accessibility mode works before this CL. The only situation where the native accessibility mode gets flipped back from _enabled_ to _disabled_ state is RenderViewHost swapping (ContentViewCoreImpl::RenderViewHostChanged() -\u003e SetAccessibilityEnabledInternal() here) for a WebContents that hasn\u0027t got its browser accessibility triggered yet via ContentViewCore.getAccessibilityNodeProvider(). \n\nI wonder if this \u0027else\u0027 part is necessary since the native accessibility will turn on again by the request from Android framework through Java layer right away. Even if the WebContents goes away without turning on the mode, accessibility events that may come from renderer side in the meantime will be ignored due to lack of WebContentsAccessibility instance anyway - so I think there\u0027s no side effect even if it is not invoked.\n\nPlease let me know this makes sense. I\u0027ll either remove this part or revive the flow that calls it in the situation above.",
      "revId": "a4430857991cdb2b974bd99c565ff8713b48e3ad",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "773f1b79_12b0af6a",
        "filename": "content/browser/android/content_view_core_impl.cc",
        "patchSetId": 11
      },
      "lineNbr": 1121,
      "author": {
        "id": 1000678
      },
      "writtenOn": "2017-06-08T05:22:37Z",
      "side": 0,
      "message": "I\u0027m very impressed with how well you dug into this code and\nunderstood it.\n\nThat makes sense. I agree that right now there\u0027s not much purpose\nfor the code to disable accessibility. However, we do a little bit\nbetter on some other platforms of disabling accessibility if a user\njust turned it on temporarily, which actually happens a lot. So it\u0027d\nbe great if we could create a design that worked well as we add support for detecting that accessibility isn\u0027t needed.\n\nAnother project I\u0027m working on (bug 428494) is switching from a boolean\nenabled/disabled to more granular accessibility flags. We already did\nthis on Windows earlier this year and improved performance for millions\nof users who had only a small lightweight accessibility service running\nand not something taxing like a screen reader.\n\nThe plan will be to enable individual accessibility flags as needed,\nand then hopefully disable them too when no longer accessed for a while.\nThe good news about that approach is that simple enabling accessibility\nat all (i.e. having a WebContentsAccessibility) will not be expensive.\n\nI\u0027m sorry I didn\u0027t give you a really definitive answer but I hope\nthat helps. Ping me sometime to chat about it if you\u0027d like to.",
      "parentUuid": "72d08c55_a8162745",
      "revId": "a4430857991cdb2b974bd99c565ff8713b48e3ad",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}