{
  "comments": [
    {
      "key": {
        "uuid": "a5e170a8_760fc0a0",
        "filename": "third_party/WebKit/Source/core/animation/Keyframe.cpp",
        "patchSetId": 13
      },
      "lineNbr": 15,
      "author": {
        "id": 1002854
      },
      "writtenOn": "2017-11-16T19:36:59Z",
      "side": 1,
      "message": "nit: since these all have static lifetime, you can return a StringView instead of String, avoiding an extra heap allocation",
      "revId": "6a68484e35f75e6a30e1fef2a5746b5dbad6a9be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f7486ed3_71f3c5dd",
        "filename": "third_party/WebKit/Source/core/animation/Keyframe.cpp",
        "patchSetId": 13
      },
      "lineNbr": 15,
      "author": {
        "id": 1212214
      },
      "writtenOn": "2017-11-17T02:49:21Z",
      "side": 1,
      "message": "Tried, but V8ObjectBuilder chokes on trying to add a StringView. Maybe I misunderstand what you\u0027re suggesting; I just changed the return type here to StringView and nothing else different.",
      "parentUuid": "a5e170a8_760fc0a0",
      "revId": "6a68484e35f75e6a30e1fef2a5746b5dbad6a9be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6feb9b30_e0904c42",
        "filename": "third_party/WebKit/Source/core/animation/Keyframe.cpp",
        "patchSetId": 13
      },
      "lineNbr": 15,
      "author": {
        "id": 1002854
      },
      "writtenOn": "2017-11-17T14:37:22Z",
      "side": 1,
      "message": "Ah, you\u0027ll need to explicitly use V8ObjectBuilder::AddString (because there isn\u0027t actually a ToV8 overload for StringView, but V8OB explicitly supports it).",
      "parentUuid": "f7486ed3_71f3c5dd",
      "revId": "6a68484e35f75e6a30e1fef2a5746b5dbad6a9be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7cffc22d_f73dd5b5",
        "filename": "third_party/WebKit/Source/core/animation/Keyframe.cpp",
        "patchSetId": 13
      },
      "lineNbr": 41,
      "author": {
        "id": 1002854
      },
      "writtenOn": "2017-11-16T19:36:59Z",
      "side": 1,
      "message": "super-nit: this blank line in a three-line function is a little odd :)",
      "revId": "6a68484e35f75e6a30e1fef2a5746b5dbad6a9be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9779335b_a54eae15",
        "filename": "third_party/WebKit/Source/core/animation/Keyframe.cpp",
        "patchSetId": 13
      },
      "lineNbr": 41,
      "author": {
        "id": 1212214
      },
      "writtenOn": "2017-11-17T02:49:21Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7cffc22d_f73dd5b5",
      "revId": "6a68484e35f75e6a30e1fef2a5746b5dbad6a9be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "001a53d0_3ce4cb2b",
        "filename": "third_party/WebKit/Source/core/animation/KeyframeEffectReadOnly.cpp",
        "patchSetId": 13
      },
      "lineNbr": 328,
      "author": {
        "id": 1002854
      },
      "writtenOn": "2017-11-16T19:36:59Z",
      "side": 1,
      "message": "super-nit: might as well ReserveInitialCapacity on the computed_keyframes, since we know exactly how big it\u0027s going to be.",
      "revId": "6a68484e35f75e6a30e1fef2a5746b5dbad6a9be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "18b75b89_d135b1d7",
        "filename": "third_party/WebKit/Source/core/animation/KeyframeEffectReadOnly.cpp",
        "patchSetId": 13
      },
      "lineNbr": 328,
      "author": {
        "id": 1212214
      },
      "writtenOn": "2017-11-17T02:49:21Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "001a53d0_3ce4cb2b",
      "revId": "6a68484e35f75e6a30e1fef2a5746b5dbad6a9be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8dbb1ad1_f67c148d",
        "filename": "third_party/WebKit/Source/core/animation/KeyframeEffectReadOnly.cpp",
        "patchSetId": 13
      },
      "lineNbr": 337,
      "author": {
        "id": 1002854
      },
      "writtenOn": "2017-11-16T19:36:59Z",
      "side": 1,
      "message": "nit: you can say script_value.V8Value().As\u003cv8::Object\u003e() instead (we expect this value to already be an object, without need for a conversion). Might be moot given the below.",
      "revId": "6a68484e35f75e6a30e1fef2a5746b5dbad6a9be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e63105b2_69093638",
        "filename": "third_party/WebKit/Source/core/animation/KeyframeEffectReadOnly.cpp",
        "patchSetId": 13
      },
      "lineNbr": 337,
      "author": {
        "id": 1212214
      },
      "writtenOn": "2017-11-17T02:49:21Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "8dbb1ad1_f67c148d",
      "revId": "6a68484e35f75e6a30e1fef2a5746b5dbad6a9be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "af61e72f_d4c37d04",
        "filename": "third_party/WebKit/Source/core/animation/KeyframeEffectReadOnly.cpp",
        "patchSetId": 13
      },
      "lineNbr": 338,
      "author": {
        "id": 1002854
      },
      "writtenOn": "2017-11-16T19:36:59Z",
      "side": 1,
      "message": "This bit of code is subtle and duplicates knowledge that V8ObjectBuilder has. We could allow V8ObjectBuilder to extend an existing object (which will work, but is kinda subtle because it\u0027s fine only if the particular object used satisfies our assumptions), or we could simply move the call site of V8ObjectBuilder here, which seems simplest:\n\n  V8ObjectBuilder builder(script_state);\n  keyframes[i]-\u003eAddPropertyValuePairsToV8Object(builder);\n  builder.AddNumber(\"computedOffset\", computed_offsets[i]);\n  computed_keyframes.push_back(builder.GetScriptValue());",
      "revId": "6a68484e35f75e6a30e1fef2a5746b5dbad6a9be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "167c2298_5d278a48",
        "filename": "third_party/WebKit/Source/core/animation/KeyframeEffectReadOnly.cpp",
        "patchSetId": 13
      },
      "lineNbr": 338,
      "author": {
        "id": 1212214
      },
      "writtenOn": "2017-11-16T20:06:30Z",
      "side": 1,
      "message": "If I go down the extension path, what are the assumptions that V8ObjectBuilder makes on its object_ ? There aren\u0027t any obvious ones I can see from the code, but obviously V8 is complicated :)",
      "parentUuid": "af61e72f_d4c37d04",
      "revId": "6a68484e35f75e6a30e1fef2a5746b5dbad6a9be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "45618615_6626c7b3",
        "filename": "third_party/WebKit/Source/core/animation/KeyframeEffectReadOnly.cpp",
        "patchSetId": 13
      },
      "lineNbr": 338,
      "author": {
        "id": 1001365
      },
      "writtenOn": "2017-11-16T20:09:12Z",
      "side": 1,
      "message": "AFAICT, V8ObjectBuilder wraps up a ScriptState and object, and ScriptValue wraps up the same two things so it seems like we should be able to just adopt the ScriptValue into the V8ObjectBuilder.\n\nI do like this approach better than having a public interface which takes an object builder.",
      "parentUuid": "167c2298_5d278a48",
      "revId": "6a68484e35f75e6a30e1fef2a5746b5dbad6a9be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bd122012_81660134",
        "filename": "third_party/WebKit/Source/core/animation/KeyframeEffectReadOnly.cpp",
        "patchSetId": 13
      },
      "lineNbr": 338,
      "author": {
        "id": 1002854
      },
      "writtenOn": "2017-11-16T20:22:08Z",
      "side": 1,
      "message": "You won\u0027t have problems with them here, probably (because you have a plain blank object), but things like this can be problematic, which is why it\u0027s convenient to just have V8ObjectBuilder not expose this footgun:\n\n- if the property already exists and is not configurable, this throws an exception callers generally aren\u0027t prepared to handle\n- similar if the object has been configured as not extensible\n- similar if there is an access check failure on lookup (for some of the magical cross-context objects like Window)\n- similar if a property exists which uses the internal accessor-that-looks-like-a-data-property API\n- things may be unexpected if the receiver is an array, and the property is an index (this includes strings that consist of numbers, like \"0\") or \"length\"\n- similar for typed arrays\n- if the object is a Proxy, then this can actually be intercepted by script to do arbitrary things (including throwing an exception that isn\u0027t handled properly here, of course)\n\n\u003e AFAICT, V8ObjectBuilder wraps up a ScriptState and object, and ScriptValue wraps up the same two things so it seems like we should be able to just adopt the ScriptValue into the V8ObjectBuilder.\n\nFrom my perspective, the difference is that ScriptValue can wrap an arbitrary value, which may or may not be an object, let alone the plain object that V8ObjectBuilder is expecting (see the above concerns). In this case, what you describe would be safe and work, but I\u0027m a little afraid of having to explain the above in a comment. At the moment, its constructor ensures that it\u0027s dealing with an ordinary object by making one itself.",
      "parentUuid": "167c2298_5d278a48",
      "revId": "6a68484e35f75e6a30e1fef2a5746b5dbad6a9be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "aab82a7c_6885c70e",
        "filename": "third_party/WebKit/Source/core/animation/KeyframeEffectReadOnly.cpp",
        "patchSetId": 13
      },
      "lineNbr": 338,
      "author": {
        "id": 1001365
      },
      "writtenOn": "2017-11-16T20:35:21Z",
      "side": 1,
      "message": "Fair enough. These concerns sound like they\u0027d require careful consideration and outweigh the benefit of having an easy way to reuse V8ObjectBuilder to extend an object.",
      "parentUuid": "bd122012_81660134",
      "revId": "6a68484e35f75e6a30e1fef2a5746b5dbad6a9be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "31c26c10_82371fab",
        "filename": "third_party/WebKit/Source/core/animation/KeyframeEffectReadOnly.cpp",
        "patchSetId": 13
      },
      "lineNbr": 338,
      "author": {
        "id": 1212214
      },
      "writtenOn": "2017-11-17T02:49:21Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "aab82a7c_6885c70e",
      "revId": "6a68484e35f75e6a30e1fef2a5746b5dbad6a9be",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}