{
  "comments": [
    {
      "key": {
        "uuid": "9ddf9c71_bb28b386",
        "filename": "third_party/WebKit/Source/platform/bindings/TraceWrapperMember.h",
        "patchSetId": 7
      },
      "lineNbr": 30,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2017-08-04T19:22:32Z",
      "side": 1,
      "message": "FYI: This is now needed because we have in-place constructions and don\u0027t go through an additional instance anymore.\n\nPreviously we would have\n  vector.push_back(TraceWrapperMember\u003cT\u003e(this, value));\nwhich would construct a temporary and only emit the barrier on operator\u003d. \n\nNow we actually have\n  vector.push_back(value)\nwhich constructs the TraceWrapperMember in place so we require the barrier.\n\nThis is tested by a unit test: \n  ScriptWrappableVisitorTest.MarkedObjectMarksDependencyOnWriteBarrierHitWhenNotMarked",
      "range": {
        "startLine": 30,
        "startChar": 28,
        "endLine": 30,
        "endChar": 40
      },
      "revId": "753fed9178e83e0102f3a398f02f6e93c6a89cde",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b1e94377_a2db3b32",
        "filename": "third_party/WebKit/Source/platform/bindings/TraceWrapperMember.h",
        "patchSetId": 7
      },
      "lineNbr": 30,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2017-08-05T06:49:36Z",
      "side": 1,
      "message": "Makes sense.\n\nDo you think this will affect performance? If you suspect it, you can run blink_perf.bindings and dromaeo locally.",
      "parentUuid": "9ddf9c71_bb28b386",
      "range": {
        "startLine": 30,
        "startChar": 28,
        "endLine": 30,
        "endChar": 40
      },
      "revId": "753fed9178e83e0102f3a398f02f6e93c6a89cde",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "025ef2d8_bed9160d",
        "filename": "third_party/WebKit/Source/platform/bindings/TraceWrapperMember.h",
        "patchSetId": 7
      },
      "lineNbr": 30,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2017-08-06T09:56:28Z",
      "side": 1,
      "message": "The difference is in use cases with non-null initialization (as initialization with null is covered by the default ctor that doesn\u0027t emit a barrier).\n\nI\u0027d not expect a regression. The barrier for Oilpan needs something similar here, so I see this as a dryrun :)",
      "parentUuid": "b1e94377_a2db3b32",
      "range": {
        "startLine": 30,
        "startChar": 28,
        "endLine": 30,
        "endChar": 40
      },
      "revId": "753fed9178e83e0102f3a398f02f6e93c6a89cde",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e45106b5_7ba3b5c8",
        "filename": "third_party/WebKit/Source/platform/bindings/TraceWrapperMember.h",
        "patchSetId": 7
      },
      "lineNbr": 35,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2017-08-05T06:49:36Z",
      "side": 1,
      "message": "Don\u0027t we need to add a write barrier here as well?",
      "revId": "753fed9178e83e0102f3a398f02f6e93c6a89cde",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c2a7dc4f_08a78c07",
        "filename": "third_party/WebKit/Source/platform/bindings/TraceWrapperMember.h",
        "patchSetId": 7
      },
      "lineNbr": 35,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2017-08-06T09:56:28Z",
      "side": 1,
      "message": "This forwards to operator\u003d which emits the barrier.",
      "parentUuid": "e45106b5_7ba3b5c8",
      "revId": "753fed9178e83e0102f3a398f02f6e93c6a89cde",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}