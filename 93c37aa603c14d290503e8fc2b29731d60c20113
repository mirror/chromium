{
  "comments": [
    {
      "key": {
        "uuid": "c9a1cede_488dc7e3",
        "filename": "content/browser/background_sync/background_sync_manager_unittest.cc",
        "patchSetId": 5
      },
      "lineNbr": 474,
      "author": {
        "id": 1000128
      },
      "writtenOn": "2017-11-17T03:16:19Z",
      "side": 1,
      "message": "Don\u0027t need this new part of the comment? It follows from line 465.",
      "revId": "93c37aa603c14d290503e8fc2b29731d60c20113",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2660b05b_8cf244ae",
        "filename": "content/browser/background_sync/background_sync_manager_unittest.cc",
        "patchSetId": 5
      },
      "lineNbr": 474,
      "author": {
        "id": 1161621
      },
      "writtenOn": "2017-11-19T11:22:36Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c9a1cede_488dc7e3",
      "revId": "93c37aa603c14d290503e8fc2b29731d60c20113",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2ee05c3e_0fa7a477",
        "filename": "content/browser/service_worker/service_worker_job_unittest.cc",
        "patchSetId": 5
      },
      "lineNbr": 385,
      "author": {
        "id": 1000128
      },
      "writtenOn": "2017-11-17T03:16:19Z",
      "side": 1,
      "message": "\"hosting the worker\u0027s context\" doesn\u0027t seem right. They are hosting the .installing, .waiting, .active service worker objects.",
      "revId": "93c37aa603c14d290503e8fc2b29731d60c20113",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2066c41f_02c1f7fa",
        "filename": "content/browser/service_worker/service_worker_job_unittest.cc",
        "patchSetId": 5
      },
      "lineNbr": 385,
      "author": {
        "id": 1161621
      },
      "writtenOn": "2017-11-19T11:22:36Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2ee05c3e_0fa7a477",
      "revId": "93c37aa603c14d290503e8fc2b29731d60c20113",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6eb281d0_10629149",
        "filename": "content/browser/service_worker/service_worker_job_unittest.cc",
        "patchSetId": 5
      },
      "lineNbr": 398,
      "author": {
        "id": 1000128
      },
      "writtenOn": "2017-11-17T03:16:19Z",
      "side": 1,
      "message": "\"a registration object host for ServiceWorkerGlobalScope#registration has been created\"",
      "revId": "93c37aa603c14d290503e8fc2b29731d60c20113",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "83b395ba_b6f69eb5",
        "filename": "content/browser/service_worker/service_worker_job_unittest.cc",
        "patchSetId": 5
      },
      "lineNbr": 398,
      "author": {
        "id": 1161621
      },
      "writtenOn": "2017-11-19T11:22:36Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6eb281d0_10629149",
      "revId": "93c37aa603c14d290503e8fc2b29731d60c20113",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8d538b01_623101c8",
        "filename": "content/browser/service_worker/service_worker_job_unittest.cc",
        "patchSetId": 5
      },
      "lineNbr": 402,
      "author": {
        "id": 1000128
      },
      "writtenOn": "2017-11-17T03:16:19Z",
      "side": 1,
      "message": "can remove this blank line",
      "revId": "93c37aa603c14d290503e8fc2b29731d60c20113",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "419a54fb_4fe34a22",
        "filename": "content/browser/service_worker/service_worker_job_unittest.cc",
        "patchSetId": 5
      },
      "lineNbr": 402,
      "author": {
        "id": 1161621
      },
      "writtenOn": "2017-11-19T11:22:36Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8d538b01_623101c8",
      "revId": "93c37aa603c14d290503e8fc2b29731d60c20113",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8392fdd4_d7125075",
        "filename": "content/browser/service_worker/service_worker_job_unittest.cc",
        "patchSetId": 5
      },
      "lineNbr": 474,
      "author": {
        "id": 1000128
      },
      "writtenOn": "2017-11-17T03:16:19Z",
      "side": 1,
      "message": "ditto\n\n\"this provider host for the worker\u0027s context\" is a bit unwieldy.",
      "revId": "93c37aa603c14d290503e8fc2b29731d60c20113",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "84c73d7d_8ed002cb",
        "filename": "content/browser/service_worker/service_worker_job_unittest.cc",
        "patchSetId": 5
      },
      "lineNbr": 474,
      "author": {
        "id": 1161621
      },
      "writtenOn": "2017-11-19T11:22:36Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8392fdd4_d7125075",
      "revId": "93c37aa603c14d290503e8fc2b29731d60c20113",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ddbf1e0f_19e6005b",
        "filename": "content/browser/service_worker/service_worker_provider_host.cc",
        "patchSetId": 5
      },
      "lineNbr": 1216,
      "author": {
        "id": 1000128
      },
      "writtenOn": "2017-11-17T03:16:19Z",
      "side": 1,
      "message": "Should this function just take scoped_refptr, since it either takes ownership by craeting a new object host, or it finds an existing host which already has ownership?",
      "revId": "93c37aa603c14d290503e8fc2b29731d60c20113",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "221a1c49_36b55dfe",
        "filename": "content/browser/service_worker/service_worker_provider_host.cc",
        "patchSetId": 5
      },
      "lineNbr": 1216,
      "author": {
        "id": 1125915
      },
      "writtenOn": "2017-11-17T05:22:46Z",
      "side": 1,
      "message": "Could we take the ownership of the |registration| here instead of taking a raw pointer and taking the ownership later?",
      "range": {
        "startLine": 1216,
        "startChar": 4,
        "endLine": 1216,
        "endChar": 31
      },
      "revId": "93c37aa603c14d290503e8fc2b29731d60c20113",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b76d6e50_02e363dc",
        "filename": "content/browser/service_worker/service_worker_provider_host.cc",
        "patchSetId": 5
      },
      "lineNbr": 1216,
      "author": {
        "id": 1161621
      },
      "writtenOn": "2017-11-19T11:22:36Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "221a1c49_36b55dfe",
      "range": {
        "startLine": 1216,
        "startChar": 4,
        "endLine": 1216,
        "endChar": 31
      },
      "revId": "93c37aa603c14d290503e8fc2b29731d60c20113",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "446973f7_ef0c3bcb",
        "filename": "content/browser/service_worker/service_worker_provider_host.cc",
        "patchSetId": 5
      },
      "lineNbr": 1216,
      "author": {
        "id": 1161621
      },
      "writtenOn": "2017-11-19T11:22:36Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ddbf1e0f_19e6005b",
      "revId": "93c37aa603c14d290503e8fc2b29731d60c20113",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "43594e75_84eb611c",
        "filename": "content/browser/service_worker/service_worker_provider_host.cc",
        "patchSetId": 5
      },
      "lineNbr": 1223,
      "author": {
        "id": 1125915
      },
      "writtenOn": "2017-11-17T05:22:46Z",
      "side": 1,
      "message": "What do you think of making this ctor public and use std::unique_ptr\u003c\u003e explicitly?\nI slightly prefer managing the map on SWProviderHost side over calling Add/Remove from the ctor/(kind of) dtor in the entries of the map since I sometimes get lost at understanding who is having the ownership, while I agree that ctor/dtor pairing seems clean.\n\nSo it\u0027d look like something as follows:\n\u003d\u003d\n\nstd::unique_ptr\u003cHost\u003e new_host \u003d std::make_unique\u003cHost\u003e(...);\nmap_.Add(std::move(new_host));\n\n~Host() {\n  provider_host_-\u003eOnSWRHostRemoved(id_);\n}",
      "range": {
        "startLine": 1223,
        "startChar": 19,
        "endLine": 1223,
        "endChar": 58
      },
      "revId": "93c37aa603c14d290503e8fc2b29731d60c20113",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8c432ec5_e0829649",
        "filename": "content/browser/service_worker/service_worker_provider_host.cc",
        "patchSetId": 5
      },
      "lineNbr": 1223,
      "author": {
        "id": 1161621
      },
      "writtenOn": "2017-11-19T11:22:36Z",
      "side": 1,
      "message": "Yeah both patterns are OK to me ;)\nBut seems other similar maps in Service Worker codes are already applying the ctor/dtor pairing pattern, for example:\nhttps://cs.chromium.org/chromium/src/content/renderer/service_worker/service_worker_provider_context.cc?rcl\u003de3b1d1e5fe1a2e367f9520decdaeb281c1819893\u0026l\u003d410\nhttps://cs.chromium.org/chromium/src/content/renderer/service_worker/service_worker_dispatcher.cc?rcl\u003de3b1d1e5fe1a2e367f9520decdaeb281c1819893\u0026l\u003d72, \nso maybe we\u0027d better keep the consistency?\nAlso I think ctor/dtor pairing enforces the add/remove operations to be always paired for each SWRegistrationObjectHost instance..",
      "parentUuid": "43594e75_84eb611c",
      "range": {
        "startLine": 1223,
        "startChar": 19,
        "endLine": 1223,
        "endChar": 58
      },
      "revId": "93c37aa603c14d290503e8fc2b29731d60c20113",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e78675fc_888912c6",
        "filename": "content/browser/service_worker/service_worker_provider_host.cc",
        "patchSetId": 5
      },
      "lineNbr": 1223,
      "author": {
        "id": 1000128
      },
      "writtenOn": "2017-11-20T01:03:41Z",
      "side": 1,
      "message": "I think older code was written when bare \"new\" wasn\u0027t discouraged.\n\nI agree the bare new and the comments 1221-1222 here and comments 272-273 in registration_unittest are a bit awkward.\n\nI like shimazu\u0027s suggestion.",
      "parentUuid": "8c432ec5_e0829649",
      "range": {
        "startLine": 1223,
        "startChar": 19,
        "endLine": 1223,
        "endChar": 58
      },
      "revId": "93c37aa603c14d290503e8fc2b29731d60c20113",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2c89219d_fbe83257",
        "filename": "content/browser/service_worker/service_worker_provider_host.cc",
        "patchSetId": 5
      },
      "lineNbr": 1223,
      "author": {
        "id": 1161621
      },
      "writtenOn": "2017-11-20T02:34:12Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e78675fc_888912c6",
      "range": {
        "startLine": 1223,
        "startChar": 19,
        "endLine": 1223,
        "endChar": 58
      },
      "revId": "93c37aa603c14d290503e8fc2b29731d60c20113",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7ae38a65_8d0f7aa6",
        "filename": "content/browser/service_worker/service_worker_provider_host.h",
        "patchSetId": 5
      },
      "lineNbr": 316,
      "author": {
        "id": 1000128
      },
      "writtenOn": "2017-11-17T03:16:19Z",
      "side": 1,
      "message": "Probably don\u0027t need to mention the private member in the public comment.",
      "revId": "93c37aa603c14d290503e8fc2b29731d60c20113",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2a3f0713_e5320f1e",
        "filename": "content/browser/service_worker/service_worker_provider_host.h",
        "patchSetId": 5
      },
      "lineNbr": 316,
      "author": {
        "id": 1161621
      },
      "writtenOn": "2017-11-19T11:22:36Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7ae38a65_8d0f7aa6",
      "revId": "93c37aa603c14d290503e8fc2b29731d60c20113",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a1b8a25f_1ffb30d0",
        "filename": "content/browser/service_worker/service_worker_provider_host.h",
        "patchSetId": 5
      },
      "lineNbr": 322,
      "author": {
        "id": 1161621
      },
      "writtenOn": "2017-11-17T01:08:42Z",
      "side": 1,
      "message": "Expose this function to SWRegistrationObjectHost. Then SWRegistrationObjectHost can remove dependency on SWDispatcherHost\u0027s resource_context().",
      "range": {
        "startLine": 322,
        "startChar": 7,
        "endLine": 322,
        "endChar": 25
      },
      "revId": "93c37aa603c14d290503e8fc2b29731d60c20113",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "74f9fb96_1633c8bf",
        "filename": "content/browser/service_worker/service_worker_provider_host.h",
        "patchSetId": 5
      },
      "lineNbr": 322,
      "author": {
        "id": 1000128
      },
      "writtenOn": "2017-11-17T03:16:19Z",
      "side": 1,
      "message": "I think it makes sense. Can we have some sort of comment:\n\n// Calls ContentBrowserClient::AllowServiceWorker(). Returns true if content settings allows service workers to run at |scope|. If this this provider is for a window client, the check involves the topmost frame url as well as scope, and may display tab-level UI.",
      "parentUuid": "a1b8a25f_1ffb30d0",
      "range": {
        "startLine": 322,
        "startChar": 7,
        "endLine": 322,
        "endChar": 25
      },
      "revId": "93c37aa603c14d290503e8fc2b29731d60c20113",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5769c8c6_676d8284",
        "filename": "content/browser/service_worker/service_worker_provider_host.h",
        "patchSetId": 5
      },
      "lineNbr": 322,
      "author": {
        "id": 1161621
      },
      "writtenOn": "2017-11-19T11:22:36Z",
      "side": 1,
      "message": "Done and Thanks!",
      "parentUuid": "74f9fb96_1633c8bf",
      "range": {
        "startLine": 322,
        "startChar": 7,
        "endLine": 322,
        "endChar": 25
      },
      "revId": "93c37aa603c14d290503e8fc2b29731d60c20113",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a493dd04_5a2074b9",
        "filename": "content/browser/service_worker/service_worker_provider_host.h",
        "patchSetId": 5
      },
      "lineNbr": 508,
      "author": {
        "id": 1161621
      },
      "writtenOn": "2017-11-17T01:08:42Z",
      "side": 1,
      "message": "This is keeping the identical lifetime management for SWRegistrationObjectHost with before, but I\u0027m considering to change this unique_ptr to raw pointer, thus:\n  - SWRegistrationObjectHost lifetime is strongly bound on SWRegistrationObjectHost Mojo connection, and independent with SWProviderHost lifetime.\n  - this map\u0027s functionality is only one: reuse object host by registration id.\n  - also we can simplify WebSWRegistrationImpl lifetime management brought by https://chromium-review.googlesource.com/c/chromium/src/+/732998, remove those lifecycle state change logic. Then the WebSWRegistrationImpl destruction has only one scenario: \n    Blink GC removes all references to |this|, |this| closes SWRegistrationObjectHost Mojo connection causing the SWRegistrationObjectHost in the browser process destroys (closes SWRegistrationObject Mojo connection), then |this| is deleted by the error connection handler.\n\nNote: currently in the renderer process registration object lifetime is independent with \u0027provider\u0027 lifetime.\n\nWDYT? If all above makes sense, I\u0027d like to do that with a follow-up CL.",
      "range": {
        "startLine": 508,
        "startChar": 20,
        "endLine": 508,
        "endChar": 72
      },
      "revId": "93c37aa603c14d290503e8fc2b29731d60c20113",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cc9ae4e2_2907ecf2",
        "filename": "content/browser/service_worker/service_worker_provider_host.h",
        "patchSetId": 5
      },
      "lineNbr": 508,
      "author": {
        "id": 1000128
      },
      "writtenOn": "2017-11-17T03:16:19Z",
      "side": 1,
      "message": "That does sound like good simplification. The lifetime of WebSWRegistrationImpl is complex so would like to simplify it.",
      "parentUuid": "a493dd04_5a2074b9",
      "range": {
        "startLine": 508,
        "startChar": 20,
        "endLine": 508,
        "endChar": 72
      },
      "revId": "93c37aa603c14d290503e8fc2b29731d60c20113",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3e40bfdd_3fed5e6b",
        "filename": "content/browser/service_worker/service_worker_provider_host.h",
        "patchSetId": 5
      },
      "lineNbr": 508,
      "author": {
        "id": 1125915
      },
      "writtenOn": "2017-11-17T05:22:46Z",
      "side": 1,
      "message": "I may be missing something, but how does the relationship of pipes look like?\nFor example, what happens if the registration object is responded as a result of  GetRegistration() and the renderer triggers the GC just before that?",
      "parentUuid": "a493dd04_5a2074b9",
      "range": {
        "startLine": 508,
        "startChar": 20,
        "endLine": 508,
        "endChar": 72
      },
      "revId": "93c37aa603c14d290503e8fc2b29731d60c20113",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4c5658fa_fe764fa5",
        "filename": "content/browser/service_worker/service_worker_provider_host.h",
        "patchSetId": 5
      },
      "lineNbr": 508,
      "author": {
        "id": 1161621
      },
      "writtenOn": "2017-11-19T11:22:36Z",
      "side": 1,
      "message": "Oh, my above comment is not so precise, actually even if renderer GC closed the SWRegistrationObjectHost Mojo connection, content::SWRegistrationObjectHost may still live because its\u0027 binding set may have an inflight ptr info being passed to the renderer, this will make the WebSWRegistrationImpl there be reused (a new reference to it from Blink).\nThe question hits this case: https://cs.chromium.org/chromium/src/content/renderer/service_worker/web_service_worker_registration_impl.h?rcl\u003d3bb869bf41752b57c0c0733a132ae09745dd8078\u0026l\u003d62\nhttps://cs.chromium.org/chromium/src/content/renderer/service_worker/web_service_worker_registration_impl.cc?rcl\u003d3bb869bf41752b57c0c0733a132ae09745dd8078\u0026l\u003d99",
      "parentUuid": "3e40bfdd_3fed5e6b",
      "range": {
        "startLine": 508,
        "startChar": 20,
        "endLine": 508,
        "endChar": 72
      },
      "revId": "93c37aa603c14d290503e8fc2b29731d60c20113",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0421861e_34ccc7ae",
        "filename": "content/browser/service_worker/service_worker_provider_host.h",
        "patchSetId": 5
      },
      "lineNbr": 508,
      "author": {
        "id": 1125915
      },
      "writtenOn": "2017-11-20T03:19:17Z",
      "side": 1,
      "message": "Ah, thanks! I probably could understand what you are thinking.\nIIUC, are you planning to move the lifetime logic from the SWRegistrationObject\u0027s pipe to the SWRegistrationObjectHost\u0027s pipe, right? \nThat makes sense, and the lifetime management would be simpler.\n\nSo, after that, will the binding in WebSWRegistrationImpl be re-attached every time when GetRegistration() or some APIs to get the registration are called?",
      "parentUuid": "4c5658fa_fe764fa5",
      "range": {
        "startLine": 508,
        "startChar": 20,
        "endLine": 508,
        "endChar": 72
      },
      "revId": "93c37aa603c14d290503e8fc2b29731d60c20113",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8abe1ada_0bcdec04",
        "filename": "content/browser/service_worker/service_worker_registration_object_host.h",
        "patchSetId": 5
      },
      "lineNbr": 45,
      "author": {
        "id": 1000128
      },
      "writtenOn": "2017-11-17T03:16:19Z",
      "side": 1,
      "message": "what is this friend for? is it just for AllowServiceWorker? we could make that a public function.",
      "revId": "93c37aa603c14d290503e8fc2b29731d60c20113",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5dc6cb4a_a5c642c6",
        "filename": "content/browser/service_worker/service_worker_registration_object_host.h",
        "patchSetId": 5
      },
      "lineNbr": 45,
      "author": {
        "id": 1161621
      },
      "writtenOn": "2017-11-19T11:22:36Z",
      "side": 1,
      "message": "This is for ctor of |this|, to be available only to SWProviderHost.",
      "parentUuid": "8abe1ada_0bcdec04",
      "revId": "93c37aa603c14d290503e8fc2b29731d60c20113",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}