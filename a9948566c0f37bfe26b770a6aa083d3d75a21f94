{
  "comments": [
    {
      "key": {
        "uuid": "492da0ed_1630f5c4",
        "filename": "pdf/pdfium/pdfium_engine.cc",
        "patchSetId": 2
      },
      "lineNbr": 3430,
      "author": {
        "id": 1001934
      },
      "writtenOn": "2017-08-29T08:40:37Z",
      "side": 1,
      "message": "I thought about making this a vector of pp::Rect, and filling it using pp::Rect::Intersect() + pp::Rect::IsEmpty() in the for-loop right below. However, that doesn\u0027t make the second added for-loop any cheaper, as it still need to check Contains() for a given coordinate.",
      "revId": "a9948566c0f37bfe26b770a6aa083d3d75a21f94",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2a0744b5_908d3d68",
        "filename": "pdf/pdfium/pdfium_engine.cc",
        "patchSetId": 2
      },
      "lineNbr": 3436,
      "author": {
        "id": 1002142
      },
      "writtenOn": "2017-08-29T13:16:29Z",
      "side": 1,
      "message": "If the new_rect is Contains() one of the highlighted_rects we don\u0027t need to push it at all. If it\u0027s overlapping, we only need to push the non-overlapping part?\n\nSo, could we change the above for() to have something like:\n\nfor(...) {\n  if (highlighted_rects[i]-\u003eContains(new_rect))\n    new_rect \u003d pp::Rect();\n  if (highlighted_rects[i]-\u003eIntersect(new_rect))\n    new_rect -\u003d highlighted_rects[i];  (Not sure if this does what I want, make new_rect\n                                        not contain the part covered by highlghted_rects)\n  if (new_rect.IsEmpty())\n    break;\n}\n\nif (!new_rect.IsEmpty())\n  highlighted_rects-\u003epush_back(new_rect)\n\n\nThat way, we only get non-overlapping rectangles in the array and we don\u0027t end up drawing the same pixels multiple times.",
      "revId": "a9948566c0f37bfe26b770a6aa083d3d75a21f94",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a771d4c6_d61f4571",
        "filename": "pdf/pdfium/pdfium_engine.cc",
        "patchSetId": 2
      },
      "lineNbr": 3436,
      "author": {
        "id": 1001934
      },
      "writtenOn": "2017-08-29T20:31:35Z",
      "side": 1,
      "message": "I\u0027m worried this is harder to actually do than expected. For one, if the top-right corner of a rect intersects the bottom-left corner of a rect already in |highlighted_rects|, then the non-overlapping part to add is actually 2 rects, since a rect can\u0027t represent a rectangle with its corner missing. There\u0027s no existing pp::Rect method to do that, BTW.\n\nA more complicated case would be when a large character appears in the middle of a paragraph of smaller characters. Now the new rect for that large character has to be shaved down into multiple smaller rects.",
      "parentUuid": "2a0744b5_908d3d68",
      "revId": "a9948566c0f37bfe26b770a6aa083d3d75a21f94",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1f465287_c38436bf",
        "filename": "pdf/pdfium/pdfium_engine.cc",
        "patchSetId": 2
      },
      "lineNbr": 3436,
      "author": {
        "id": 1002142
      },
      "writtenOn": "2017-08-29T20:33:42Z",
      "side": 1,
      "message": "Should we at least have a Contains check above and skip the push_back? If the new rect is fully contained we don\u0027t need to try to draw it every time.",
      "parentUuid": "a771d4c6_d61f4571",
      "revId": "a9948566c0f37bfe26b770a6aa083d3d75a21f94",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bee2034e_a1386fc9",
        "filename": "pdf/pdfium/pdfium_engine.cc",
        "patchSetId": 2
      },
      "lineNbr": 3436,
      "author": {
        "id": 1001934
      },
      "writtenOn": "2017-08-29T20:42:56Z",
      "side": 1,
      "message": "|new_rect| is already subtracted from all the existing rects. I have a check for when |new_rect| is empty after all the subtractions, which is better than a Contains() check because it doesn\u0027t require a single existing rect to cover |new_rect|.\n\nThis check is not foolproof though. e.g. If there are 4 existing rects, each of which covers 1 quadrant of |new_rect|, then none of them can reduce |new_rect| via subtraction. Even though the 4 combined completely covers |new_rect|.",
      "parentUuid": "1f465287_c38436bf",
      "revId": "a9948566c0f37bfe26b770a6aa083d3d75a21f94",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9ff52e93_e2ab42ad",
        "filename": "pdf/pdfium/pdfium_engine.cc",
        "patchSetId": 2
      },
      "lineNbr": 3436,
      "author": {
        "id": 1002142
      },
      "writtenOn": "2017-08-29T20:50:58Z",
      "side": 1,
      "message": "Sure, but we also wouldn\u0027t catch that below on 3447. It just seems weird that we\u0027d skip drawing the rect once, but not every subsequent time? If it\u0027s fully overlapped by any single rect, we may as well get rid of it.",
      "parentUuid": "bee2034e_a1386fc9",
      "revId": "a9948566c0f37bfe26b770a6aa083d3d75a21f94",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}