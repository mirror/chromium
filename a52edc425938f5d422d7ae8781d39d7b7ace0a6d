{
  "comments": [
    {
      "key": {
        "uuid": "8862d11c_996577e6",
        "filename": "ui/gl/gl_surface_egl.cc",
        "patchSetId": 2
      },
      "lineNbr": 706,
      "author": {
        "id": 1148065
      },
      "writtenOn": "2017-06-12T19:30:41Z",
      "side": 1,
      "message": "This doesn\u0027t feel very right... The command buffer logic is at a higher level than ui/gl, so this is a conceptual layering violation. Furthermore, I worry about the hidden dependencies - does this mean the passthrough decoder makes some assumptions about EGL_DISPLAY_ROBUST_RESOURCE_INITIALIZATION_ANGLE, do we have a way to test that it\u0027s correctly enabled with it?\n\nI realize that there may not be a good way of parametrizing the EGL initialization beyond command-line flags today (which is kinda problematic in test environments)... I guess 2 questions:\n1- is there a downside in always enabling it?\n2- could we enable it on a per-context basis, so that we can request the extension at context creation (via context creation parameters)?\n\n\nOther than that, maybe it would make sense to add an \"Options\" struct to gl::init::InitializeGLOneOff, so that the initialization code can request the right mode.",
      "revId": "a52edc425938f5d422d7ae8781d39d7b7ace0a6d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cc7b33fe_62e59707",
        "filename": "ui/gl/gl_surface_egl.cc",
        "patchSetId": 2
      },
      "lineNbr": 706,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2017-06-12T20:15:57Z",
      "side": 1,
      "message": "Agreed on the layering violation.  There are no tests/assertions in the command buffer that verify that robust resource initialization is enabled but there are WebGL tests that do not pass without this extension being enabled, I removed many expected failures when I landed the patch to enable this.\n\n1) For the current command buffer, it would be a performance regression.  Textures would be double-initialized with zeros.\n2) That was the original plan but the implementation was significantly easier as a per-display attribute.  That said, I don\u0027t think it would be too much effort to make it a context attribute with the requirement that all contexts within the same share group have the same attribute.\n\nEventually, all displays will be created with this flag when ANGLE is used everywhere but since that will take a while I think attempting to change this extension to a context creation flag is the most reasonable way to remove the layering issues.\n\nAre you ok with me landing this as is given that it\u0027s just a refactor and following up with a change to the extension?",
      "parentUuid": "8862d11c_996577e6",
      "revId": "a52edc425938f5d422d7ae8781d39d7b7ace0a6d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}