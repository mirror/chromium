{
  "comments": [
    {
      "key": {
        "uuid": "43810ef8_a1f16035",
        "filename": "content/renderer/media_capture_from_element/canvas_capture_handler.cc",
        "patchSetId": 15
      },
      "lineNbr": 166,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2017-10-23T21:42:44Z",
      "side": 1,
      "message": "How about we delete this do-nothing method, and just rename DeliverNewFrame() to SendNewFrame()?",
      "range": {
        "startLine": 161,
        "startChar": 0,
        "endLine": 166,
        "endChar": 1
      },
      "revId": "2aff84cfa2151c2e20d60e70455a1626887a60a3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0f9ad077_69c4e501",
        "filename": "content/renderer/media_capture_from_element/canvas_capture_handler.cc",
        "patchSetId": 15
      },
      "lineNbr": 166,
      "author": {
        "id": 1123894
      },
      "writtenOn": "2017-10-24T00:19:18Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "43810ef8_a1f16035",
      "range": {
        "startLine": 161,
        "startChar": 0,
        "endLine": 166,
        "endChar": 1
      },
      "revId": "2aff84cfa2151c2e20d60e70455a1626887a60a3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c6498dd5_6c456f9e",
        "filename": "content/renderer/media_capture_from_element/canvas_capture_handler.cc",
        "patchSetId": 15
      },
      "lineNbr": 219,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2017-10-23T21:42:44Z",
      "side": 1,
      "message": "Don\u0027t give up! libyuv has was you need to convert with any source stride. See comment below.",
      "range": {
        "startLine": 218,
        "startChar": 0,
        "endLine": 219,
        "endChar": 54
      },
      "revId": "2aff84cfa2151c2e20d60e70455a1626887a60a3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e96e7adb_20af61f4",
        "filename": "content/renderer/media_capture_from_element/canvas_capture_handler.cc",
        "patchSetId": 15
      },
      "lineNbr": 219,
      "author": {
        "id": 1123894
      },
      "writtenOn": "2017-10-24T00:19:18Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c6498dd5_6c456f9e",
      "range": {
        "startLine": 218,
        "startChar": 0,
        "endLine": 219,
        "endChar": 54
      },
      "revId": "2aff84cfa2151c2e20d60e70455a1626887a60a3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a415f078_ef76701b",
        "filename": "content/renderer/media_capture_from_element/canvas_capture_handler.cc",
        "patchSetId": 15
      },
      "lineNbr": 241,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2017-10-23T21:42:44Z",
      "side": 1,
      "message": "Based on how you use this in downstream code, how about a SkBitmap instead:\n\n  SkBitmap result_bitmap;\n  result_bitmap.allocPixels(SkImageInfo::Make(image-\u003ewidth(), image-\u003eheight(), image-\u003ecolorType(), image-\u003ealphaType(), image-\u003erefColorSpace()));",
      "range": {
        "startLine": 239,
        "startChar": 0,
        "endLine": 241,
        "endChar": 76
      },
      "revId": "2aff84cfa2151c2e20d60e70455a1626887a60a3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eb5ea50a_9a676861",
        "filename": "content/renderer/media_capture_from_element/canvas_capture_handler.cc",
        "patchSetId": 15
      },
      "lineNbr": 241,
      "author": {
        "id": 1123894
      },
      "writtenOn": "2017-10-24T00:19:18Z",
      "side": 1,
      "message": "I agree SkBitmap would help with readability. But unless there is an optimization in allocPixels() that I am not aware of, this would alloc/free memory for each frame. That would be somewhat costly, and in a long session result in memory fragmentation.(We see this problem in overnight webrtc peerconnection tests.)\nI wanted to use a memory pool to avoid that. Instead of reimplementing one that holds onto SkBitmaps, I decided to use the existing media::VideoFramePool. WDYT?",
      "parentUuid": "a415f078_ef76701b",
      "range": {
        "startLine": 239,
        "startChar": 0,
        "endLine": 241,
        "endChar": 76
      },
      "revId": "2aff84cfa2151c2e20d60e70455a1626887a60a3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "837d3a7b_9912cb6c",
        "filename": "content/renderer/media_capture_from_element/canvas_capture_handler.cc",
        "patchSetId": 15
      },
      "lineNbr": 241,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2017-10-26T04:41:20Z",
      "side": 1,
      "message": "It seems that you could use VideoFramePool legitimately if only there were ARGB support in media::VideoFrame. So, how about just doing that as a \"prerequisite infrastructure\" step? Honestly, there is very little left to complete what was already started there: All the \"byte size\" math is done, and the enums are in-place. Basically, media::VideoFrame::AllocateYUV() just needs to be renamed to Allocate() and changed to zero-out memory for the ARGB format as well. That could probably be completed in about an hour, tops...",
      "parentUuid": "eb5ea50a_9a676861",
      "range": {
        "startLine": 239,
        "startChar": 0,
        "endLine": 241,
        "endChar": 76
      },
      "revId": "2aff84cfa2151c2e20d60e70455a1626887a60a3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f2983ce5_b0549876",
        "filename": "content/renderer/media_capture_from_element/canvas_capture_handler.cc",
        "patchSetId": 15
      },
      "lineNbr": 241,
      "author": {
        "id": 1123894
      },
      "writtenOn": "2017-10-29T19:59:53Z",
      "side": 1,
      "message": "Sure, please review on https://chromium-review.googlesource.com/c/chromium/src/+/743022",
      "parentUuid": "837d3a7b_9912cb6c",
      "range": {
        "startLine": 239,
        "startChar": 0,
        "endLine": 241,
        "endChar": 76
      },
      "revId": "2aff84cfa2151c2e20d60e70455a1626887a60a3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "464c0fa5_6ac8f35b",
        "filename": "content/renderer/media_capture_from_element/canvas_capture_handler.cc",
        "patchSetId": 15
      },
      "lineNbr": 249,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2017-10-23T21:42:44Z",
      "side": 1,
      "message": "You can remove one level of indentation if you combine these:\n\n  if (image-\u003eisTextureBacked() \u0026\u0026 context_provider) {\n    ...\n  }",
      "range": {
        "startLine": 248,
        "startChar": 0,
        "endLine": 249,
        "endChar": 27
      },
      "revId": "2aff84cfa2151c2e20d60e70455a1626887a60a3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e1318bda_f05af6df",
        "filename": "content/renderer/media_capture_from_element/canvas_capture_handler.cc",
        "patchSetId": 15
      },
      "lineNbr": 249,
      "author": {
        "id": 1123894
      },
      "writtenOn": "2017-10-24T00:19:18Z",
      "side": 1,
      "message": "I still want to handle the case where WeakPtr\u003cWebGraphicsContext3DProviderWrapper\u003e is null, resulting in |context_provider| null. From the offline discussion with junov@, he suggested checking this in case we switch contexts between capture frames and WeakPtr is invalidated. As far as I read, the underlying ContextProviderCommandBuffer::SetLostContextCallback() is set on a scoped_refptr\u003c\u003e and might not be called yet in this case. Still, junov@ would be better to advise on this. WDYT?\n\nhttps://cs.chromium.org/chromium/src/content/renderer/webgraphicscontext3d_provider_impl.cc?rcl\u003d2c1897b1878afb629d3cc48e8010e6f14366ff61\u0026l\u003d49",
      "parentUuid": "464c0fa5_6ac8f35b",
      "range": {
        "startLine": 248,
        "startChar": 0,
        "endLine": 249,
        "endChar": 27
      },
      "revId": "2aff84cfa2151c2e20d60e70455a1626887a60a3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "810e0eda_d2d5243c",
        "filename": "content/renderer/media_capture_from_element/canvas_capture_handler.cc",
        "patchSetId": 15
      },
      "lineNbr": 249,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2017-10-26T04:41:20Z",
      "side": 1,
      "message": "Yuk. Well, it sounds like someone should do that blink platform layer elimination ASAP. This here is clearly a case where the technical debt is incurring interest. ;-)",
      "parentUuid": "e1318bda_f05af6df",
      "range": {
        "startLine": 248,
        "startChar": 0,
        "endLine": 249,
        "endChar": 27
      },
      "revId": "2aff84cfa2151c2e20d60e70455a1626887a60a3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4ad15c3f_2b92a7f1",
        "filename": "content/renderer/media_capture_from_element/canvas_capture_handler.cc",
        "patchSetId": 15
      },
      "lineNbr": 252,
      "author": {
        "id": 1115939
      },
      "writtenOn": "2017-10-23T15:17:36Z",
      "side": 1,
      "message": "This downcast is unfortunate. Hopefully it will go away soon by eliminating blink\u0027s platfrom integration interface layer in favor of direct integration with chromium.  Fine for now.",
      "range": {
        "startLine": 252,
        "startChar": 33,
        "endLine": 252,
        "endChar": 65
      },
      "revId": "2aff84cfa2151c2e20d60e70455a1626887a60a3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "635fd3d5_ebb74244",
        "filename": "content/renderer/media_capture_from_element/canvas_capture_handler.cc",
        "patchSetId": 15
      },
      "lineNbr": 252,
      "author": {
        "id": 1123894
      },
      "writtenOn": "2017-10-24T00:19:18Z",
      "side": 1,
      "message": "Agreed. This was the missing point for accessing gpu::ContextSupport object from blink::WebGraphicsContext3DProvider.",
      "parentUuid": "4ad15c3f_2b92a7f1",
      "range": {
        "startLine": 252,
        "startChar": 33,
        "endLine": 252,
        "endChar": 65
      },
      "revId": "2aff84cfa2151c2e20d60e70455a1626887a60a3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9a9178c7_5fa80a14",
        "filename": "content/renderer/media_capture_from_element/canvas_capture_handler.cc",
        "patchSetId": 15
      },
      "lineNbr": 256,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2017-10-23T21:42:44Z",
      "side": 1,
      "message": "nit: It feels weird to use two different vars that are pointers to the same thing: context_provider vs context_provider_impl. Can you just use context_provider_impl everywhere?",
      "range": {
        "startLine": 256,
        "startChar": 8,
        "endLine": 256,
        "endChar": 24
      },
      "revId": "2aff84cfa2151c2e20d60e70455a1626887a60a3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d4f55ed4_9c25f270",
        "filename": "content/renderer/media_capture_from_element/canvas_capture_handler.cc",
        "patchSetId": 15
      },
      "lineNbr": 256,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2017-10-23T21:42:44Z",
      "side": 1,
      "message": "I don\u0027t think this is what you wanted. This would set the single, global lost-context callback for the WebGraphicsContext3DProvider. IIUC, WGC3DProvider is not exclusively used by this class.\n\nPlease see DelegatedFrameHost constructor for example code: https://cs.chromium.org/chromium/src/content/browser/renderer_host/delegated_frame_host.cc?rcl\u003d55bc0f387b6c98bb0ad9c0f3d2cde9968b311d68\u0026l\u003d60",
      "range": {
        "startLine": 256,
        "startChar": 26,
        "endLine": 256,
        "endChar": 49
      },
      "revId": "2aff84cfa2151c2e20d60e70455a1626887a60a3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "04f2146b_0bf5c33e",
        "filename": "content/renderer/media_capture_from_element/canvas_capture_handler.cc",
        "patchSetId": 15
      },
      "lineNbr": 256,
      "author": {
        "id": 1123894
      },
      "writtenOn": "2017-10-24T00:19:18Z",
      "side": 1,
      "message": "I see, this somehow clashes with junov@ advice on using only the context shipped with each frame from blink though. ContextFactory is a chromium side global object and I don\u0027t think that is linked from any object within blink::Image. Also, all ContextFactory implementation including the example, are from content/browser which we can\u0027t access from this renderer instance. Which would be the right one from renderer?\n\nhttps://cs.chromium.org/chromium/src/ui/compositor/compositor.h?rcl\u003da6b909e78774f2fc928c50689623ec064a57caeb\u0026l\u003d87",
      "parentUuid": "d4f55ed4_9c25f270",
      "range": {
        "startLine": 256,
        "startChar": 26,
        "endLine": 256,
        "endChar": 49
      },
      "revId": "2aff84cfa2151c2e20d60e70455a1626887a60a3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b71e8516_e5435a8d",
        "filename": "content/renderer/media_capture_from_element/canvas_capture_handler.cc",
        "patchSetId": 15
      },
      "lineNbr": 256,
      "author": {
        "id": 1123894
      },
      "writtenOn": "2017-10-24T00:19:18Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9a9178c7_5fa80a14",
      "range": {
        "startLine": 256,
        "startChar": 8,
        "endLine": 256,
        "endChar": 24
      },
      "revId": "2aff84cfa2151c2e20d60e70455a1626887a60a3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "240325de_4171f408",
        "filename": "content/renderer/media_capture_from_element/canvas_capture_handler.cc",
        "patchSetId": 15
      },
      "lineNbr": 256,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2017-10-26T04:41:20Z",
      "side": 1,
      "message": "\u003e Which would be the right one from renderer?\n\nI have no idea. I think you\u0027re treading new ground here, since this is the first use of GLHelper in renderer code. Maybe ask one of the ui/compositor/OWNERS for advice? One of them should probably take a look at your approach in this change, too.",
      "parentUuid": "04f2146b_0bf5c33e",
      "range": {
        "startLine": 256,
        "startChar": 26,
        "endLine": 256,
        "endChar": 49
      },
      "revId": "2aff84cfa2151c2e20d60e70455a1626887a60a3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8776e571_2dd8b7c5",
        "filename": "content/renderer/media_capture_from_element/canvas_capture_handler.cc",
        "patchSetId": 15
      },
      "lineNbr": 256,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2017-10-27T16:20:18Z",
      "side": 1,
      "message": "CC\u0027ing danakj@ who did a huge refactor to get rid of the old WebGraphicsContext3D class. Lost context handling was a major part of this.\n\nI admit I haven\u0027t been following all of the code in this review closely. Where does the WebGraphicsContext3DProvider come from?",
      "parentUuid": "240325de_4171f408",
      "range": {
        "startLine": 256,
        "startChar": 26,
        "endLine": 256,
        "endChar": 49
      },
      "revId": "2aff84cfa2151c2e20d60e70455a1626887a60a3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ae4a9a66_a5a824e4",
        "filename": "content/renderer/media_capture_from_element/canvas_capture_handler.cc",
        "patchSetId": 15
      },
      "lineNbr": 256,
      "author": {
        "id": 1000887
      },
      "writtenOn": "2017-10-27T16:27:22Z",
      "side": 1,
      "message": "What thread is this on? Blink gets its main thread context from Platform::CreateSharedOffscreenGraphicsContext3DProvider()? It can set a lost context callback on that.\n\nBut you should probably only be setting the lost context callback on it if you\u0027re also the owner of it.",
      "parentUuid": "8776e571_2dd8b7c5",
      "range": {
        "startLine": 256,
        "startChar": 26,
        "endLine": 256,
        "endChar": 49
      },
      "revId": "2aff84cfa2151c2e20d60e70455a1626887a60a3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "42f82139_466b929b",
        "filename": "content/renderer/media_capture_from_element/canvas_capture_handler.cc",
        "patchSetId": 15
      },
      "lineNbr": 256,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2017-10-27T16:34:30Z",
      "side": 1,
      "message": "Never mind, I see it comes from Image::ContextProviderWrapper() each time a new Image is passed in from the canvas.\n\nNot sure what the best way of detecting context loss here is. Agree with miu@ that setting the context lost callback on the ContextProvider may break other clients. Maybe cache the WeakPtr\u003cWebGraphicsContext3DProviderWrapper\u003e from Image::ContextProviderWrapper and watch for it being nulled out every time DeliverNewFrame is called?",
      "parentUuid": "8776e571_2dd8b7c5",
      "range": {
        "startLine": 256,
        "startChar": 26,
        "endLine": 256,
        "endChar": 49
      },
      "revId": "2aff84cfa2151c2e20d60e70455a1626887a60a3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c6f9b48f_48bb6f98",
        "filename": "content/renderer/media_capture_from_element/canvas_capture_handler.cc",
        "patchSetId": 15
      },
      "lineNbr": 256,
      "author": {
        "id": 1000887
      },
      "writtenOn": "2017-10-27T17:10:38Z",
      "side": 1,
      "message": "tbc WebGraphicsContextProvider3d has a SetLostContextCallback that should be used instead when that is what you have. The owner of WebGraphicsContextProvider3d should call that.\n\nThe lost callback on the ContextProvider inside is pointed to the WebGraphicsContextProvider3dImpl.",
      "parentUuid": "42f82139_466b929b",
      "range": {
        "startLine": 256,
        "startChar": 26,
        "endLine": 256,
        "endChar": 49
      },
      "revId": "2aff84cfa2151c2e20d60e70455a1626887a60a3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ec49940c_cc8a2a10",
        "filename": "content/renderer/media_capture_from_element/canvas_capture_handler.cc",
        "patchSetId": 15
      },
      "lineNbr": 256,
      "author": {
        "id": 1123894
      },
      "writtenOn": "2017-10-27T22:19:43Z",
      "side": 1,
      "message": "\u003e Maybe cache the WeakPtr\u003cWebGraphicsContext3DProviderWrapper\u003e from Image::ContextProviderWrapper and watch for it being nulled out every time DeliverNewFrame is called?\n\nWe already are doing that, see l.267. When WeakPtr is null, |context_provider| is nullptr and we reset the local GLHelper. Is that enough by itself? Should I skip SetLostContextCallback() then?\n\n\u003e tbc WebGraphicsContextProvider3d has a SetLostContextCallback that should be used instead when that is what you have. The owner of WebGraphicsContextProvider3d should call that.\n\nHmm, we expect WebGraphicsContextProvider3d to be a WebGraphicsContext3DProviderImpl instance, see the cast. Then, there wouldn\u0027t be a difference in calling either right. I was calling it on WebGraphicsContextProvider3d as you said, but changed it after the comment on PS#15.",
      "parentUuid": "c6f9b48f_48bb6f98",
      "range": {
        "startLine": 256,
        "startChar": 26,
        "endLine": 256,
        "endChar": 49
      },
      "revId": "2aff84cfa2151c2e20d60e70455a1626887a60a3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3a15cb8a_7691810b",
        "filename": "content/renderer/media_capture_from_element/canvas_capture_handler.cc",
        "patchSetId": 15
      },
      "lineNbr": 256,
      "author": {
        "id": 1000887
      },
      "writtenOn": "2017-10-27T22:34:32Z",
      "side": 1,
      "message": "Oh, I read that as calling it on the context provider inside.\n\nTBH it\u0027s fairly sketchy to assume that it is a WebGraphicsContext3DProviderImpl at all. I don\u0027t think that should be done. Code in the blink::Platform impl does make that assumption because it is the thing vending them out. But in tests or other cases it could easily change and break this if it assumes.",
      "parentUuid": "ec49940c_cc8a2a10",
      "range": {
        "startLine": 256,
        "startChar": 26,
        "endLine": 256,
        "endChar": 49
      },
      "revId": "2aff84cfa2151c2e20d60e70455a1626887a60a3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "660aa2ed_7917e019",
        "filename": "content/renderer/media_capture_from_element/canvas_capture_handler.cc",
        "patchSetId": 15
      },
      "lineNbr": 277,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2017-10-23T21:42:44Z",
      "side": 1,
      "message": "This isn\u0027t necessary, since OnContextLost() should have been called.",
      "range": {
        "startLine": 276,
        "startChar": 0,
        "endLine": 277,
        "endChar": 23
      },
      "revId": "2aff84cfa2151c2e20d60e70455a1626887a60a3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "852e1fbd_e0ccaedb",
        "filename": "content/renderer/media_capture_from_element/canvas_capture_handler.cc",
        "patchSetId": 15
      },
      "lineNbr": 277,
      "author": {
        "id": 1123894
      },
      "writtenOn": "2017-10-24T00:19:18Z",
      "side": 1,
      "message": "See my reply above.",
      "parentUuid": "660aa2ed_7917e019",
      "range": {
        "startLine": 276,
        "startChar": 0,
        "endLine": 277,
        "endChar": 23
      },
      "revId": "2aff84cfa2151c2e20d60e70455a1626887a60a3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ec13abf8_043950bb",
        "filename": "content/renderer/media_capture_from_element/canvas_capture_handler.cc",
        "patchSetId": 15
      },
      "lineNbr": 328,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2017-10-23T21:42:44Z",
      "side": 1,
      "message": "This allows for converting with any source stride:\n\n  if (bitmap.colorType() \u003d\u003d kBGRA_8888_SkColorType) {\n    CHECK_EQ(0, libyuv::ARGBToI420(bitmap.getPixels(), bitmap.rowBytes(), y_out,\n                                   y_out_stride, u_out, u_out_stride, v_out,\n                                   v_out_stride, bitmap.width(),\n                                   bitmap.height()));\n  } else if (bitmap.colorType() \u003d\u003d kRGBA_8888_SkColorType) {\n    CHECK_EQ(0, libyuv::ABGRToI420(bitmap.getPixels(), bitmap.rowBytes(), y_out,\n                                   y_out_stride, u_out, u_out_stride, v_out,\n                                   v_out_stride, bitmap.width(),\n                                   bitmap.height()));\n  } else {\n    NOTIMPLEMENTED();\n  }",
      "range": {
        "startLine": 306,
        "startChar": 0,
        "endLine": 328,
        "endChar": 63
      },
      "revId": "2aff84cfa2151c2e20d60e70455a1626887a60a3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "10504d28_7c1c17a5",
        "filename": "content/renderer/media_capture_from_element/canvas_capture_handler.cc",
        "patchSetId": 15
      },
      "lineNbr": 328,
      "author": {
        "id": 1123894
      },
      "writtenOn": "2017-10-24T00:19:18Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ec13abf8_043950bb",
      "range": {
        "startLine": 306,
        "startChar": 0,
        "endLine": 328,
        "endChar": 63
      },
      "revId": "2aff84cfa2151c2e20d60e70455a1626887a60a3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2ee43ea4_5ae79efa",
        "filename": "content/renderer/media_capture_from_element/canvas_capture_handler.cc",
        "patchSetId": 15
      },
      "lineNbr": 373,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2017-10-23T21:42:44Z",
      "side": 1,
      "message": "When would success be false? It seems this would indicate temporary issues, like readback during shutdown, or a temporary context loss. So, I would not recommend calling ReadPixelsSync().",
      "range": {
        "startLine": 373,
        "startChar": 4,
        "endLine": 373,
        "endChar": 38
      },
      "revId": "2aff84cfa2151c2e20d60e70455a1626887a60a3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "89f173a4_3f863c0d",
        "filename": "content/renderer/media_capture_from_element/canvas_capture_handler.cc",
        "patchSetId": 15
      },
      "lineNbr": 373,
      "author": {
        "id": 1123894
      },
      "writtenOn": "2017-10-24T00:19:18Z",
      "side": 1,
      "message": "There is this supported check that I came across to when writing tests. It checks color type mismatch AFAICT. I\u0027ll remove if you think that case isn\u0027t possible.\nhttps://cs.chromium.org/chromium/src/components/viz/common/gl_helper.cc?rcl\u003d9e43f8812c7a4bcd02167f8f8cb162fd0df6f007\u0026l\u003d613\nhttps://cs.chromium.org/chromium/src/components/viz/common/gl_helper_readback_support.cc?rcl\u003d053fffb2146d5065bd8b7e3a70020df5d8fb5d0f\u0026l\u003d117",
      "parentUuid": "2ee43ea4_5ae79efa",
      "range": {
        "startLine": 373,
        "startChar": 4,
        "endLine": 373,
        "endChar": 38
      },
      "revId": "2aff84cfa2151c2e20d60e70455a1626887a60a3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f3c16b0e_457c98c3",
        "filename": "content/renderer/media_capture_from_element/canvas_capture_handler.cc",
        "patchSetId": 15
      },
      "lineNbr": 373,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2017-10-26T04:41:20Z",
      "side": 1,
      "message": "It shouldn\u0027t be possible. kN32_SkColorType is always RGBA_8888 or BGRA_8888, and \nGLHelperReadbackSupport::GetReadbackConfig() never returns NOT_SUPPORTED for those. If a future code change ever breaks this assumption, your unit tests should catch it before it passes the CQ.",
      "parentUuid": "89f173a4_3f863c0d",
      "range": {
        "startLine": 373,
        "startChar": 4,
        "endLine": 373,
        "endChar": 38
      },
      "revId": "2aff84cfa2151c2e20d60e70455a1626887a60a3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e1ecf5ae_c2086877",
        "filename": "content/renderer/media_capture_from_element/canvas_capture_handler.cc",
        "patchSetId": 15
      },
      "lineNbr": 373,
      "author": {
        "id": 1123894
      },
      "writtenOn": "2017-10-29T19:59:53Z",
      "side": 1,
      "message": "Sounds good, safely removing the fallback and its corresponding unittest then.",
      "parentUuid": "f3c16b0e_457c98c3",
      "range": {
        "startLine": 373,
        "startChar": 4,
        "endLine": 373,
        "endChar": 38
      },
      "revId": "2aff84cfa2151c2e20d60e70455a1626887a60a3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "18fa99f6_9edebe2e",
        "filename": "content/renderer/media_capture_from_element/canvas_capture_handler.cc",
        "patchSetId": 15
      },
      "lineNbr": 383,
      "author": {
        "id": 1115939
      },
      "writtenOn": "2017-10-23T15:17:36Z",
      "side": 1,
      "message": "This seems excellent, but it needs to be covered by a test that does something like:\n1) Send a gpu-accelerated frame\n2) Trigger a synthetic context loss (see LoseContextCHROMIUM)\n3) create a new context\n4) Send another gpu-accelerated frame",
      "range": {
        "startLine": 383,
        "startChar": 13,
        "endLine": 383,
        "endChar": 18
      },
      "revId": "2aff84cfa2151c2e20d60e70455a1626887a60a3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cdedef63_daa0a19e",
        "filename": "content/renderer/media_capture_from_element/canvas_capture_handler.cc",
        "patchSetId": 15
      },
      "lineNbr": 383,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2017-10-23T21:42:44Z",
      "side": 1,
      "message": "While I agree testing would be good, isn\u0027t it the responsibility of the WebGraphicsContext3DProviderImpl unit tests to do so? At some point, client code has to assume external implementation is correct. :)\n\nFWIW, this exact same OnContextLost() method is in DelegatedFrameHost, and there aren\u0027t DFH unit tests for that.",
      "parentUuid": "18fa99f6_9edebe2e",
      "range": {
        "startLine": 383,
        "startChar": 13,
        "endLine": 383,
        "endChar": 18
      },
      "revId": "2aff84cfa2151c2e20d60e70455a1626887a60a3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2aec41ec_88ae2bb5",
        "filename": "content/renderer/media_capture_from_element/canvas_capture_handler.cc",
        "patchSetId": 15
      },
      "lineNbr": 383,
      "author": {
        "id": 1123894
      },
      "writtenOn": "2017-10-24T00:19:18Z",
      "side": 1,
      "message": "I couldn\u0027t trigger the context loss from content_unittest. \n- I cannot build blink::WebGraphicsContext3DProvider to pass along with each frame using a cc::TestInProcessContextProvider that is available on chromium side.\n- Even when I refactor code for tests such that I use GLHelper built from cc::TestInProcessContextProvider, all ReadbackTextureAsync() calls just return false as things aren\u0027t implemented. The code path is not properly exercised.\n- I think more appropriate place would be WebRtcCaptureFromElementBrowserTest. Do you know how to trigger context loss there?",
      "parentUuid": "cdedef63_daa0a19e",
      "range": {
        "startLine": 383,
        "startChar": 13,
        "endLine": 383,
        "endChar": 18
      },
      "revId": "2aff84cfa2151c2e20d60e70455a1626887a60a3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b605f18f_333d7d46",
        "filename": "content/renderer/media_capture_from_element/canvas_capture_handler_unittest.cc",
        "patchSetId": 15
      },
      "lineNbr": 232,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2017-10-23T21:42:44Z",
      "side": 1,
      "message": "You should check the result to make sure:\n\n1. It is not null.\n2. It has the correct format (I420 with or without alpha).\n3. It has the correct size.\n\nWith gmock, I usually do something like:\n\n  scoped_refptr\u003cmedia::VideoFrame\u003e result;\n  EXPECT_CALL(*this, DoOnDeliverFrame(_, _))\n    .Times(1)\n    .WillOnce(DoAll(SaveArg\u003c0\u003e(\u0026result), RunClosure(quit_closure)));\n  ...do operations...\n  ASSERT_TRUE(!!result);\n  EXPECT_EQ(320, result-\u003ewidth());\n  ...etc...",
      "range": {
        "startLine": 232,
        "startChar": 38,
        "endLine": 232,
        "endChar": 42
      },
      "revId": "2aff84cfa2151c2e20d60e70455a1626887a60a3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0b3ec434_e27c0f8b",
        "filename": "content/renderer/media_capture_from_element/canvas_capture_handler_unittest.cc",
        "patchSetId": 15
      },
      "lineNbr": 232,
      "author": {
        "id": 1123894
      },
      "writtenOn": "2017-10-24T00:19:18Z",
      "side": 1,
      "message": "We are already doing those, plus the color checks. See OnVerifyDeliveredFrame().",
      "parentUuid": "b605f18f_333d7d46",
      "range": {
        "startLine": 232,
        "startChar": 38,
        "endLine": 232,
        "endChar": 42
      },
      "revId": "2aff84cfa2151c2e20d60e70455a1626887a60a3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "21bac390_8d2572e4",
        "filename": "content/renderer/media_capture_from_element/canvas_capture_handler_unittest.cc",
        "patchSetId": 15
      },
      "lineNbr": 232,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2017-10-26T04:41:20Z",
      "side": 1,
      "message": "OIC. All good.",
      "parentUuid": "0b3ec434_e27c0f8b",
      "range": {
        "startLine": 232,
        "startChar": 38,
        "endLine": 232,
        "endChar": 42
      },
      "revId": "2aff84cfa2151c2e20d60e70455a1626887a60a3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "48114e09_98791a0b",
        "filename": "content/renderer/media_capture_from_element/canvas_capture_handler_unittest.cc",
        "patchSetId": 15
      },
      "lineNbr": 270,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2017-10-23T21:42:44Z",
      "side": 1,
      "message": "ditto: Examine the resulting video frame.",
      "range": {
        "startLine": 270,
        "startChar": 38,
        "endLine": 270,
        "endChar": 42
      },
      "revId": "2aff84cfa2151c2e20d60e70455a1626887a60a3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "30aec576_5e70935c",
        "filename": "content/renderer/media_capture_from_element/canvas_capture_handler_unittest.cc",
        "patchSetId": 15
      },
      "lineNbr": 270,
      "author": {
        "id": 1123894
      },
      "writtenOn": "2017-10-24T00:19:18Z",
      "side": 1,
      "message": "I added OnVerifyDeliveredFrame() call here as well.",
      "parentUuid": "48114e09_98791a0b",
      "range": {
        "startLine": 270,
        "startChar": 38,
        "endLine": 270,
        "endChar": 42
      },
      "revId": "2aff84cfa2151c2e20d60e70455a1626887a60a3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "77c65120_259c6bd3",
        "filename": "third_party/WebKit/Source/core/html/canvas/CanvasDrawListener.cpp",
        "patchSetId": 15
      },
      "lineNbr": 17,
      "author": {
        "id": 1115939
      },
      "writtenOn": "2017-10-23T15:17:36Z",
      "side": 1,
      "message": "Nit: .get() is not necessary.",
      "range": {
        "startLine": 17,
        "startChar": 49,
        "endLine": 17,
        "endChar": 52
      },
      "revId": "2aff84cfa2151c2e20d60e70455a1626887a60a3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1001057f_0c29c85a",
        "filename": "third_party/WebKit/Source/core/html/canvas/CanvasDrawListener.cpp",
        "patchSetId": 15
      },
      "lineNbr": 17,
      "author": {
        "id": 1123894
      },
      "writtenOn": "2017-10-24T00:19:18Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "77c65120_259c6bd3",
      "range": {
        "startLine": 17,
        "startChar": 49,
        "endLine": 17,
        "endChar": 52
      },
      "revId": "2aff84cfa2151c2e20d60e70455a1626887a60a3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "50978a3d_537f0382",
        "filename": "third_party/WebKit/Source/core/html/canvas/CanvasDrawListener.h",
        "patchSetId": 15
      },
      "lineNbr": 25,
      "author": {
        "id": 1002076
      },
      "writtenOn": "2017-10-23T21:42:44Z",
      "side": 1,
      "message": "Why is this a weak pointer? How about a raw pointer?",
      "range": {
        "startLine": 25,
        "startChar": 28,
        "endLine": 25,
        "endChar": 72
      },
      "revId": "2aff84cfa2151c2e20d60e70455a1626887a60a3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "56d7e021_5d9d23c3",
        "filename": "third_party/WebKit/Source/core/html/canvas/CanvasDrawListener.h",
        "patchSetId": 15
      },
      "lineNbr": 25,
      "author": {
        "id": 1123894
      },
      "writtenOn": "2017-10-24T00:19:18Z",
      "side": 1,
      "message": "See my reply earlier about context switch. My understanding from my offline discussions with junov@ is that this can be nullptr in that case.",
      "parentUuid": "50978a3d_537f0382",
      "range": {
        "startLine": 25,
        "startChar": 28,
        "endLine": 25,
        "endChar": 72
      },
      "revId": "2aff84cfa2151c2e20d60e70455a1626887a60a3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}