{
  "comments": [
    {
      "key": {
        "uuid": "2f2bb7fe_9ea541b9",
        "filename": "components/viz/service/display/direct_renderer.cc",
        "patchSetId": 1
      },
      "lineNbr": 285,
      "author": {
        "id": 1002358
      },
      "writtenOn": "2017-11-17T22:33:49Z",
      "side": 1,
      "message": "Nit: This is fine for now, but I suspect that we\u0027ll want to push the color matrix into the overlay processor eventually.",
      "revId": "2add83ef051895ade9c81818a66fbeed1afa83f4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7c73e76d_9a2ca740",
        "filename": "components/viz/service/display/direct_renderer.cc",
        "patchSetId": 1
      },
      "lineNbr": 285,
      "author": {
        "id": 1000539
      },
      "writtenOn": "2017-11-19T00:49:32Z",
      "side": 1,
      "message": "I think ProcessForOverlays needs to be called each frame for overlay damage tracking to not break. You should probably pass the matrix to the overlay processor so it can reject each candidate when set.\n\nFyi, we need to overlay support before NL can ship as without it low-latency rendering doesn\u0027t work.",
      "parentUuid": "2f2bb7fe_9ea541b9",
      "revId": "2add83ef051895ade9c81818a66fbeed1afa83f4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ae64a7bc_8745e059",
        "filename": "components/viz/service/display/direct_renderer.cc",
        "patchSetId": 1
      },
      "lineNbr": 285,
      "author": {
        "id": 1125479
      },
      "writtenOn": "2017-11-21T00:53:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7c73e76d_9a2ca740",
      "revId": "2add83ef051895ade9c81818a66fbeed1afa83f4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8c0634b2_88e85587",
        "filename": "components/viz/service/display/gl_renderer.cc",
        "patchSetId": 1
      },
      "lineNbr": 2993,
      "author": {
        "id": 1002358
      },
      "writtenOn": "2017-11-17T22:33:49Z",
      "side": 1,
      "message": "nit: the logic below may be a little easier if we said\n  has_output_color_matrix \u003d is_root_render_pass \u0026\u0026 !output_color_matrix.isIdentity();\nand then didn\u0027t have to check is_root_render_pass later.",
      "revId": "2add83ef051895ade9c81818a66fbeed1afa83f4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a140a3f5_675d2794",
        "filename": "components/viz/service/display/gl_renderer.cc",
        "patchSetId": 1
      },
      "lineNbr": 2993,
      "author": {
        "id": 1125479
      },
      "writtenOn": "2017-11-21T00:53:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8c0634b2_88e85587",
      "revId": "2add83ef051895ade9c81818a66fbeed1afa83f4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c381b856_19767775",
        "filename": "components/viz/service/display/shader.cc",
        "patchSetId": 1
      },
      "lineNbr": 1030,
      "author": {
        "id": 1002358
      },
      "writtenOn": "2017-11-17T22:33:49Z",
      "side": 1,
      "message": "Nit: output_color_matrix instead of outputColorMatrix",
      "revId": "2add83ef051895ade9c81818a66fbeed1afa83f4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "208d4d68_18117068",
        "filename": "components/viz/service/display/shader.cc",
        "patchSetId": 1
      },
      "lineNbr": 1030,
      "author": {
        "id": 1125479
      },
      "writtenOn": "2017-11-21T00:53:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c381b856_19767775",
      "revId": "2add83ef051895ade9c81818a66fbeed1afa83f4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "38d64edb_305b9738",
        "filename": "services/viz/privileged/interfaces/compositing/display_private.mojom",
        "patchSetId": 1
      },
      "lineNbr": 15,
      "author": {
        "id": 1000887
      },
      "writtenOn": "2017-11-20T17:28:44Z",
      "side": 1,
      "message": "Please document this.",
      "revId": "2add83ef051895ade9c81818a66fbeed1afa83f4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "362ac3b4_86348380",
        "filename": "services/viz/privileged/interfaces/compositing/display_private.mojom",
        "patchSetId": 1
      },
      "lineNbr": 15,
      "author": {
        "id": 1125479
      },
      "writtenOn": "2017-11-21T00:53:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "38d64edb_305b9738",
      "revId": "2add83ef051895ade9c81818a66fbeed1afa83f4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9dbaa13b_519c3ea5",
        "filename": "ui/compositor/compositor.cc",
        "patchSetId": 1
      },
      "lineNbr": 290,
      "author": {
        "id": 1002358
      },
      "writtenOn": "2017-11-17T22:33:49Z",
      "side": 1,
      "message": "I think we need to call SetDisplayColorMatrix here too.",
      "revId": "2add83ef051895ade9c81818a66fbeed1afa83f4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "37c1ea2d_d080048e",
        "filename": "ui/compositor/compositor.cc",
        "patchSetId": 1
      },
      "lineNbr": 290,
      "author": {
        "id": 1000887
      },
      "writtenOn": "2017-11-20T17:28:44Z",
      "side": 1,
      "message": "Yes, else when we get a new display, we\u0027d never tell it about the matrix.",
      "parentUuid": "9dbaa13b_519c3ea5",
      "revId": "2add83ef051895ade9c81818a66fbeed1afa83f4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cbb3cec1_14b84ee0",
        "filename": "ui/compositor/compositor.cc",
        "patchSetId": 1
      },
      "lineNbr": 290,
      "author": {
        "id": 1125479
      },
      "writtenOn": "2017-11-21T00:53:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "37c1ea2d_d080048e",
      "revId": "2add83ef051895ade9c81818a66fbeed1afa83f4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5e9d937e_9f498320",
        "filename": "ui/compositor/compositor.h",
        "patchSetId": 1
      },
      "lineNbr": 127,
      "author": {
        "id": 1000887
      },
      "writtenOn": "2017-11-20T17:28:44Z",
      "side": 1,
      "message": "This reads ambiguously to me. It sounds like maybe it means the matrix being used by the device hardware, so that this can accomodate it. Or maybe the matrix that this wants to change the output of the compositor by (which I think is what it is). Can this be more clear? Also compositors are 1:1 with windows on most platforms, screens on chromeos, so \"device\" may not be what this should say at all.",
      "revId": "2add83ef051895ade9c81818a66fbeed1afa83f4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "95ff407b_60cc76d8",
        "filename": "ui/compositor/compositor.h",
        "patchSetId": 1
      },
      "lineNbr": 127,
      "author": {
        "id": 1125479
      },
      "writtenOn": "2017-11-21T00:53:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5e9d937e_9f498320",
      "revId": "2add83ef051895ade9c81818a66fbeed1afa83f4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2f9325b0_f5dfce18",
        "filename": "ui/compositor/compositor.h",
        "patchSetId": 1
      },
      "lineNbr": 127,
      "author": {
        "id": 1000887
      },
      "writtenOn": "2017-11-21T21:15:10Z",
      "side": 1,
      "message": "Actually this isn\u0027t quite right either with the changes, sorry! It changes colors of what all parts of the system render and present on the display which this ui::Compositor is the root of. This now sounds like it changes how the ui::Compositor\u0027s layer paint/raster, which is not the case.\n\nSaid another way, this is changing the color matrix which transforms how all output is drawn to the display underlying this ui::Compositor.\n\nThere was a time that ui::Compositor drew directly to a display and this would have been right, and that may be the model ur working from here, but now it is no longer the case. ui::Compositor is only responsible for rasterizing the ui itself into textures and building the scene, which is given to the display compositor, where it is composited with the renderer/media/canvas/other clients of the display compositor.",
      "parentUuid": "95ff407b_60cc76d8",
      "revId": "2add83ef051895ade9c81818a66fbeed1afa83f4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "56ed5f86_51f1d050",
        "filename": "ui/compositor/layer.cc",
        "patchSetId": 1
      },
      "lineNbr": 1191,
      "author": {
        "id": 1000539
      },
      "writtenOn": "2017-11-19T00:49:32Z",
      "side": 1,
      "message": "Can you DCHECK() instead or at least log an error? t prevent anyone from using this by mistake..",
      "revId": "2add83ef051895ade9c81818a66fbeed1afa83f4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "df40babd_87274f5c",
        "filename": "ui/compositor/layer.cc",
        "patchSetId": 1
      },
      "lineNbr": 1191,
      "author": {
        "id": 1000887
      },
      "writtenOn": "2017-11-20T17:28:44Z",
      "side": 1,
      "message": "+1 to DCHECK instead, and document this clearly on the function declaration.",
      "parentUuid": "56ed5f86_51f1d050",
      "revId": "2add83ef051895ade9c81818a66fbeed1afa83f4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b1aa672d_845de7ac",
        "filename": "ui/compositor/layer.cc",
        "patchSetId": 1
      },
      "lineNbr": 1191,
      "author": {
        "id": 1125479
      },
      "writtenOn": "2017-11-21T00:53:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "df40babd_87274f5c",
      "revId": "2add83ef051895ade9c81818a66fbeed1afa83f4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0e0e6d9f_c67f933f",
        "filename": "ui/compositor/layer.cc",
        "patchSetId": 1
      },
      "lineNbr": 1212,
      "author": {
        "id": 1000887
      },
      "writtenOn": "2017-11-21T16:11:13Z",
      "side": 1,
      "message": "If there\u0027s 1 matrix per compositor, why is there also 1 matrix per layer? The last layer to have it set wins? Why not just a compositor api?",
      "revId": "2add83ef051895ade9c81818a66fbeed1afa83f4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "24a20479_66965957",
        "filename": "ui/compositor/layer.cc",
        "patchSetId": 1
      },
      "lineNbr": 1212,
      "author": {
        "id": 1002358
      },
      "writtenOn": "2017-11-21T18:07:01Z",
      "side": 1,
      "message": "Yeah, we should be iterating through ui::Compositors in ApplyColorTemperatureToLayers in NightLightController.\n\n(And get rid of the blue and green scales here)",
      "parentUuid": "0e0e6d9f_c67f933f",
      "revId": "2add83ef051895ade9c81818a66fbeed1afa83f4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "516b9df5_e4c66032",
        "filename": "ui/compositor/layer.cc",
        "patchSetId": 1
      },
      "lineNbr": 1212,
      "author": {
        "id": 1125479
      },
      "writtenOn": "2017-11-21T18:16:09Z",
      "side": 1,
      "message": "The reason I kept it here is that we still need to keep the color temperature animate-able. I didn\u0027t see the ability in the compositor APIs to animate its properties. Otherwise, I would have moved the whole thing to the compositor.\n\nAny suggestions around this?",
      "parentUuid": "24a20479_66965957",
      "revId": "2add83ef051895ade9c81818a66fbeed1afa83f4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "734d4503_f63f2223",
        "filename": "ui/compositor/layer.cc",
        "patchSetId": 1
      },
      "lineNbr": 1212,
      "author": {
        "id": 1000887
      },
      "writtenOn": "2017-11-21T20:02:02Z",
      "side": 1,
      "message": "Oh I see, right the DCHECK above means its only for root layers, ok I guess it\u0027s not the most obvious API situation but it will work, shouldn\u0027t cause problems that I see, esp with the DCHECK/docs about it :)",
      "parentUuid": "516b9df5_e4c66032",
      "revId": "2add83ef051895ade9c81818a66fbeed1afa83f4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "69aea78b_ca00678a",
        "filename": "ui/compositor/layer.cc",
        "patchSetId": 1
      },
      "lineNbr": 1212,
      "author": {
        "id": 1000887
      },
      "writtenOn": "2017-11-21T21:15:10Z",
      "side": 1,
      "message": "I thought about this some more and one example of a problem:\n- You create a layer and set this property, then add it to the compositor. This method won\u0027t tell the compositor when you set it, and nothing tells the compositor when it is added. Same thing when you move a layer between compositors. It is overall odd to change compositor properties from a layer - which can move between or not be attached to one at all. And maybe there\u0027s more edge cases that I\u0027m not thinking of.\n\nWhy does this need to animate like layer properties? In fact it feels wrong to animate it like a layer property. Layer properties animate things that require ui::Compositor to do raster, compute transforms, and eventually make and submit a new CompositorFrame to the display compositor. This property does not, in fact ui::Compositor::ScheduleFullRedraw() doesn\u0027t make sense here, the ui::Compositor doesn\u0027t have to do anything at all, the ui hasn\u0027t changed. Only a property on the Display compositor is changing and these are separate components. Compositor::ScheduleFullRedraw() tells ui::Compositor to do a commit, but there\u0027s nothing new to commit in the ui::Compositor.\n\nThe relationship here that we\u0027re building on is that there is a 1:1 relationship between ui::Compositor and the display compositor because it is the root of the display compositor\u0027s scene. But really we need to change this property on the Display only. Tying this into the Layer will make this increasingly awkward I think and constrain and eventually require us to rewrite this as we move display compositing over to the gpu process.\n\nI think the Layer code should be removed, the ui::Compositor piece can stay as it simply passes through the value to the Display and re-passes it when the CompositorFrameSink changes, and the damage being added in Layer (via ScheduleFullRedraw) should be done so on the display compositor side instead. We don\u0027t need to damage the ui::Compositor here, and doing so makes a much larger piece of the ui graphics stack get involved than is neccesary.",
      "parentUuid": "734d4503_f63f2223",
      "revId": "2add83ef051895ade9c81818a66fbeed1afa83f4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4c8d96a9_09d401af",
        "filename": "ui/compositor/test/in_process_context_factory.h",
        "patchSetId": 1
      },
      "lineNbr": 78,
      "author": {
        "id": 1000887
      },
      "writtenOn": "2017-11-20T17:28:44Z",
      "side": 1,
      "message": "Seems like there should be some tests for this of some sort?",
      "revId": "2add83ef051895ade9c81818a66fbeed1afa83f4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "900c84fd_b329c98a",
        "filename": "ui/compositor/test/in_process_context_factory.h",
        "patchSetId": 1
      },
      "lineNbr": 78,
      "author": {
        "id": 1125479
      },
      "writtenOn": "2017-11-21T00:53:53Z",
      "side": 1,
      "message": "I added a pixel test and an overlay test. Please take a look. I\u0027m not sure what would be the best way to test this end-to-end from the ui::Layer down to the pixels.",
      "parentUuid": "4c8d96a9_09d401af",
      "revId": "2add83ef051895ade9c81818a66fbeed1afa83f4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "954df03c_a864bd58",
        "filename": "ui/compositor/test/in_process_context_factory.h",
        "patchSetId": 1
      },
      "lineNbr": 78,
      "author": {
        "id": 1000887
      },
      "writtenOn": "2017-11-21T16:11:13Z",
      "side": 1,
      "message": "It\u0027s usually nicer to test each layer of the code separately. :)\n\nI was expecting some compositor unittest that verifies when you set it, that it gets passed to the ContextFactory, and when the CompositorFrameSink is lost and recreated, that it is passed to it again.\n\nThen tests on the Display/GLRenderer sound good and like what you\u0027ve got.",
      "parentUuid": "900c84fd_b329c98a",
      "revId": "2add83ef051895ade9c81818a66fbeed1afa83f4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}