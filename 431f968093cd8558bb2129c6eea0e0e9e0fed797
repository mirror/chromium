{
  "comments": [
    {
      "key": {
        "uuid": "d9208855_07a75a68",
        "filename": "chrome/android/javatests/src/org/chromium/chrome/browser/preferences/PasswordViewingTypeTest.java",
        "patchSetId": 12
      },
      "lineNbr": 72,
      "author": {
        "id": 1209769
      },
      "writtenOn": "2017-09-28T18:08:40Z",
      "side": 1,
      "message": "I\u0027ve removed this as it is no longer necessary with https://crrev.com/c/685514.",
      "range": {
        "startLine": 71,
        "startChar": 0,
        "endLine": 72,
        "endChar": 88
      },
      "revId": "431f968093cd8558bb2129c6eea0e0e9e0fed797",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d1414adc_73ec7f26",
        "filename": "chrome/android/javatests/src/org/chromium/chrome/browser/preferences/PasswordViewingTypeTest.java",
        "patchSetId": 12
      },
      "lineNbr": 72,
      "author": {
        "id": 1001606
      },
      "writtenOn": "2017-09-29T14:28:04Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "d9208855_07a75a68",
      "range": {
        "startLine": 71,
        "startChar": 0,
        "endLine": 72,
        "endChar": 88
      },
      "revId": "431f968093cd8558bb2129c6eea0e0e9e0fed797",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7793bdca_4f873ba9",
        "filename": "chrome/android/javatests/src/org/chromium/chrome/browser/signin/OAuth2TokenServiceIntegrationTest.java",
        "patchSetId": 12
      },
      "lineNbr": 370,
      "author": {
        "id": 1001606
      },
      "writtenOn": "2017-09-27T15:56:55Z",
      "side": 1,
      "message": "Can you make these lambdas?",
      "range": {
        "startLine": 368,
        "startChar": 40,
        "endLine": 370,
        "endChar": 29
      },
      "revId": "431f968093cd8558bb2129c6eea0e0e9e0fed797",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "266b9ef0_f8c292dc",
        "filename": "chrome/android/javatests/src/org/chromium/chrome/browser/signin/OAuth2TokenServiceIntegrationTest.java",
        "patchSetId": 12
      },
      "lineNbr": 370,
      "author": {
        "id": 1209769
      },
      "writtenOn": "2017-09-28T18:08:40Z",
      "side": 1,
      "message": "Converting all Runnables in this file creates a very big CL. I\u0027ve extracted it into a separate CL, hope you don\u0027t mind: https://crrev.com/c/690478. I\u0027ll send it to review when this one lands.",
      "parentUuid": "7793bdca_4f873ba9",
      "range": {
        "startLine": 368,
        "startChar": 40,
        "endLine": 370,
        "endChar": 29
      },
      "revId": "431f968093cd8558bb2129c6eea0e0e9e0fed797",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0758a501_591cd968",
        "filename": "chrome/android/javatests/src/org/chromium/chrome/browser/signin/OAuth2TokenServiceIntegrationTest.java",
        "patchSetId": 12
      },
      "lineNbr": 370,
      "author": {
        "id": 1001606
      },
      "writtenOn": "2017-09-29T14:28:04Z",
      "side": 1,
      "message": "Yes, sure. Thanks!",
      "parentUuid": "266b9ef0_f8c292dc",
      "range": {
        "startLine": 368,
        "startChar": 40,
        "endLine": 370,
        "endChar": 29
      },
      "revId": "431f968093cd8558bb2129c6eea0e0e9e0fed797",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2acab825_1306cd8f",
        "filename": "components/signin/core/browser/android/java/src/org/chromium/components/signin/AccountManagerFacade.java",
        "patchSetId": 12
      },
      "lineNbr": 115,
      "author": {
        "id": 1001606
      },
      "writtenOn": "2017-09-27T15:56:55Z",
      "side": 1,
      "message": "Can you use a method reference here?",
      "range": {
        "startLine": 115,
        "startChar": 34,
        "endLine": 115,
        "endChar": 56
      },
      "revId": "431f968093cd8558bb2129c6eea0e0e9e0fed797",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3a6e7ac5_77a0e4f6",
        "filename": "components/signin/core/browser/android/java/src/org/chromium/components/signin/AccountManagerFacade.java",
        "patchSetId": 12
      },
      "lineNbr": 115,
      "author": {
        "id": 1209769
      },
      "writtenOn": "2017-09-28T18:08:40Z",
      "side": 1,
      "message": "Done. FYI, my CL that changes initializeAccountManagerFacade and overrideAccountManagerFacade has landed (https://crrev.com/c/685514), so after rebasing code around this line has moved up.",
      "parentUuid": "2acab825_1306cd8f",
      "range": {
        "startLine": 115,
        "startChar": 34,
        "endLine": 115,
        "endChar": 56
      },
      "revId": "431f968093cd8558bb2129c6eea0e0e9e0fed797",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f9114ccb_4e7e11da",
        "filename": "components/signin/core/browser/android/java/src/org/chromium/components/signin/AccountManagerFacade.java",
        "patchSetId": 12
      },
      "lineNbr": 128,
      "author": {
        "id": 1001606
      },
      "writtenOn": "2017-09-27T15:56:55Z",
      "side": 1,
      "message": "Can you add a comment about when and from where this can be called? From any thread, but in production only the UI thread, right?",
      "range": {
        "startLine": 128,
        "startChar": 4,
        "endLine": 128,
        "endChar": 14
      },
      "revId": "431f968093cd8558bb2129c6eea0e0e9e0fed797",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "50e04ede_134c1b72",
        "filename": "components/signin/core/browser/android/java/src/org/chromium/components/signin/AccountManagerFacade.java",
        "patchSetId": 12
      },
      "lineNbr": 128,
      "author": {
        "id": 1209769
      },
      "writtenOn": "2017-09-28T18:08:40Z",
      "side": 1,
      "message": "You\u0027re right, it is called from UI thread in production, but this function should work correctly from any thread. Should I put @MainThread here? IUUC, annotations should describe the class itself, not the way it is used.",
      "parentUuid": "f9114ccb_4e7e11da",
      "range": {
        "startLine": 128,
        "startChar": 4,
        "endLine": 128,
        "endChar": 14
      },
      "revId": "431f968093cd8558bb2129c6eea0e0e9e0fed797",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cb85ee01_2dbd2a7b",
        "filename": "components/signin/core/browser/android/java/src/org/chromium/components/signin/AccountManagerFacade.java",
        "patchSetId": 12
      },
      "lineNbr": 128,
      "author": {
        "id": 1001606
      },
      "writtenOn": "2017-09-29T14:28:04Z",
      "side": 1,
      "message": "Actually, is this even still called on a background thread? If not, we could legitimately make it @MainThread. And I get the feeling we could also get rid of the lock if we ensure that the ...forTests() method only access this on the UI thread (either by requiring it, or by wrapping the code in here in runOnUiThreadBlocking()).",
      "parentUuid": "50e04ede_134c1b72",
      "range": {
        "startLine": 128,
        "startChar": 4,
        "endLine": 128,
        "endChar": 14
      },
      "revId": "431f968093cd8558bb2129c6eea0e0e9e0fed797",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3403d3cc_8dcba55f",
        "filename": "components/signin/core/browser/android/java/src/org/chromium/components/signin/AccountManagerFacade.java",
        "patchSetId": 12
      },
      "lineNbr": 128,
      "author": {
        "id": 1209769
      },
      "writtenOn": "2017-10-02T13:18:07Z",
      "side": 1,
      "message": "Done.",
      "parentUuid": "cb85ee01_2dbd2a7b",
      "range": {
        "startLine": 128,
        "startChar": 4,
        "endLine": 128,
        "endChar": 14
      },
      "revId": "431f968093cd8558bb2129c6eea0e0e9e0fed797",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "50048840_24680828",
        "filename": "components/signin/core/browser/android/javatests/src/org/chromium/components/signin/test/util/FakeAccountManagerDelegate.java",
        "patchSetId": 12
      },
      "lineNbr": 213,
      "author": {
        "id": 1001606
      },
      "writtenOn": "2017-09-27T15:56:55Z",
      "side": 1,
      "message": "I would try to avoid throwing this exception, as that means you have to handle it in all call sites, which then in turn throw an exception, and so on, and you end up with the \"everything might blow up at any time\" semantics of C++ exceptions combined with the syntactic overhead of declaring everything as \"throws Exception\".\n\nIn this particular case, an InterruptedException is only going to be thrown if someone calls Thread.interrupt on the current thread, and nothing in Chrome code ever does that, so you could just do what e.g. ThreadUtils.runOnUiThreadBlocking() does, and catch the exception and throw a RuntimeException with it.",
      "range": {
        "startLine": 213,
        "startChar": 70,
        "endLine": 213,
        "endChar": 97
      },
      "revId": "431f968093cd8558bb2129c6eea0e0e9e0fed797",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9d6d2928_ea8343ca",
        "filename": "components/signin/core/browser/android/javatests/src/org/chromium/components/signin/test/util/FakeAccountManagerDelegate.java",
        "patchSetId": 12
      },
      "lineNbr": 213,
      "author": {
        "id": 1209769
      },
      "writtenOn": "2017-09-28T18:08:40Z",
      "side": 1,
      "message": "Excellent point, thank you very much! Done.",
      "parentUuid": "50048840_24680828",
      "range": {
        "startLine": 213,
        "startChar": 70,
        "endLine": 213,
        "endChar": 97
      },
      "revId": "431f968093cd8558bb2129c6eea0e0e9e0fed797",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7ca3a73e_0593f707",
        "filename": "components/signin/core/browser/android/javatests/src/org/chromium/components/signin/test/util/FakeAccountManagerDelegate.java",
        "patchSetId": 12
      },
      "lineNbr": 216,
      "author": {
        "id": 1001606
      },
      "writtenOn": "2017-09-27T15:56:55Z",
      "side": 1,
      "message": "Using a future here feels like overkill, given that we don\u0027t actually care about the value. I think the simplest thing would be just to use a plain Object lock with wait() and notifyAll() (which is what SimpleFuture uses internally). There are also things like Semaphore, which allow you to use a slightly simpler interface without the synchronized() stuff (which always confuses me).",
      "range": {
        "startLine": 216,
        "startChar": 8,
        "endLine": 216,
        "endChar": 26
      },
      "revId": "431f968093cd8558bb2129c6eea0e0e9e0fed797",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dd4f309b_6ac7db18",
        "filename": "components/signin/core/browser/android/javatests/src/org/chromium/components/signin/test/util/FakeAccountManagerDelegate.java",
        "patchSetId": 12
      },
      "lineNbr": 216,
      "author": {
        "id": 1209769
      },
      "writtenOn": "2017-09-28T18:08:40Z",
      "side": 1,
      "message": "I tend to disagree with you, sorry. Because of possible spurious wakeups and requirement to obtain the lock prior to waiting, using Object.wait() and Object.notifyAll() leads to pretty complicated code that is hard to read and validate:\n\nObject lock \u003d new Object();\nAtomicBoolean cacheUpdated \u003d new AtomicBoolean();\nAccountsChangeObserver observer \u003d () -\u003e {\n    if (!AccountManagerFacade.get().hasAccountForName(accountHolder.getAccount().name)) {\n        synchronized (lock) {\n            cacheUpdated.set(true);\n            lock.notifyAll();\n        }\n    }\n};\n\nThreadUtils.runOnUiThreadBlocking(() -\u003e {\n    AccountManagerFacade.get().addObserver(observer);\n    removeAccountHolderExplicitly(accountHolder);\n});\n\ntry {\n    synchronized (lock) {\n        while (!cacheUpdated.get()) {\n            lock.wait();\n        }\n    }\n} // ...\n\n\nI could use non-atomic variable for cacheUpdated or use it for locking, but it wouldn\u0027t change the line count that much. Am I missing something and there\u0027s a more efficient way to implement this?\n\nThat being said, I really don\u0027t like the fact that signin code has it\u0027s own SimpleFuture implemented for test code. I\u0027d like to add something like CompletableFuture from Java 8 to base, but it\u0027s definitely outside of scope of this CL.",
      "parentUuid": "7ca3a73e_0593f707",
      "range": {
        "startLine": 216,
        "startChar": 8,
        "endLine": 216,
        "endChar": 26
      },
      "revId": "431f968093cd8558bb2129c6eea0e0e9e0fed797",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b900d516_558e860f",
        "filename": "components/signin/core/browser/android/javatests/src/org/chromium/components/signin/test/util/FakeAccountManagerDelegate.java",
        "patchSetId": 12
      },
      "lineNbr": 216,
      "author": {
        "id": 1001606
      },
      "writtenOn": "2017-09-29T14:28:04Z",
      "side": 1,
      "message": "Ugh, spurious wakeups :-(\n\nOkay, could you use a CountDownLatch? That at least still has the semantics of \"wait for an event to happen\".\n\nCompletableFuture has a _lot_ more features (and in particular ties into a whole bunch of Java 8 functional stuff), so we\u0027d have to backport only a subset or something. But really, if it\u0027s just passing a value from one thread to another, we could also use a concurrent collection, like an ArrayBlockingQueue with capacity 1.",
      "parentUuid": "dd4f309b_6ac7db18",
      "range": {
        "startLine": 216,
        "startChar": 8,
        "endLine": 216,
        "endChar": 26
      },
      "revId": "431f968093cd8558bb2129c6eea0e0e9e0fed797",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f04c7a5e_916c30a6",
        "filename": "components/signin/core/browser/android/javatests/src/org/chromium/components/signin/test/util/FakeAccountManagerDelegate.java",
        "patchSetId": 12
      },
      "lineNbr": 216,
      "author": {
        "id": 1209769
      },
      "writtenOn": "2017-10-02T13:18:07Z",
      "side": 1,
      "message": "Done.\n\nI agree that implementing a full version of CompletableFuture is probably an overkill, but having some kind of future implementation in base still makes sense to me.",
      "parentUuid": "b900d516_558e860f",
      "range": {
        "startLine": 216,
        "startChar": 8,
        "endLine": 216,
        "endChar": 26
      },
      "revId": "431f968093cd8558bb2129c6eea0e0e9e0fed797",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "23ab6dd2_b7194bab",
        "filename": "components/signin/core/browser/android/javatests/src/org/chromium/components/signin/test/util/FakeAccountManagerDelegate.java",
        "patchSetId": 12
      },
      "lineNbr": 218,
      "author": {
        "id": 1001606
      },
      "writtenOn": "2017-09-27T15:56:55Z",
      "side": 1,
      "message": "Hm, if this returns false, we\u0027re never going to call the callback, which might not be the best failure behavior. Should we instead throw an exception or something?",
      "range": {
        "startLine": 218,
        "startChar": 16,
        "endLine": 218,
        "endChar": 93
      },
      "revId": "431f968093cd8558bb2129c6eea0e0e9e0fed797",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ca7b360c_5fc8d451",
        "filename": "components/signin/core/browser/android/javatests/src/org/chromium/components/signin/test/util/FakeAccountManagerDelegate.java",
        "patchSetId": 12
      },
      "lineNbr": 218,
      "author": {
        "id": 1209769
      },
      "writtenOn": "2017-09-28T18:08:40Z",
      "side": 1,
      "message": "Theoretically, we might have several changes to account list happening at the same time. For example, if we call addAccountHolderExplicitly(account1) and then addAccountHolderBlocking(account2), first notification will be for the account1, before account2 is in the cache. This observer waits before account is actually in the cache. Since this class is intended for tests only, this relies on timeout in SimpleFuture or timeout for the whole test that uses this method.\nTBH, I don\u0027t see any better way to wait until the cache is updated. Propagating callbacks on every change to accounts would require huge changes to both FakeAccountManagerDelegate and AccountManagerFacade without any reasonable benefit for production code.",
      "parentUuid": "23ab6dd2_b7194bab",
      "range": {
        "startLine": 218,
        "startChar": 16,
        "endLine": 218,
        "endChar": 93
      },
      "revId": "431f968093cd8558bb2129c6eea0e0e9e0fed797",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f3091810_1bcef9e2",
        "filename": "components/signin/core/browser/android/javatests/src/org/chromium/components/signin/test/util/FakeAccountManagerDelegate.java",
        "patchSetId": 12
      },
      "lineNbr": 218,
      "author": {
        "id": 1001606
      },
      "writtenOn": "2017-09-29T14:28:04Z",
      "side": 1,
      "message": "Hm, are there even going to be calls to addAccountHolderExplicitly() left? If not, we could just inline it and we would be guaranteed that the cache is always going to be up to date.",
      "parentUuid": "ca7b360c_5fc8d451",
      "range": {
        "startLine": 218,
        "startChar": 16,
        "endLine": 218,
        "endChar": 93
      },
      "revId": "431f968093cd8558bb2129c6eea0e0e9e0fed797",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c75e5a96_8612e542",
        "filename": "components/signin/core/browser/android/javatests/src/org/chromium/components/signin/test/util/FakeAccountManagerDelegate.java",
        "patchSetId": 12
      },
      "lineNbr": 218,
      "author": {
        "id": 1209769
      },
      "writtenOn": "2017-10-02T13:18:07Z",
      "side": 1,
      "message": "addAccountHolderExplicitly() is still used in downstream tests. Generally speaking, addAccountHolderExplicitly is still needed for cases when AccountManagerFacade is not initialized. I\u0027ve extended addAccountHolderBlocking JavaDoc to make that clearer.",
      "parentUuid": "f3091810_1bcef9e2",
      "range": {
        "startLine": 218,
        "startChar": 16,
        "endLine": 218,
        "endChar": 93
      },
      "revId": "431f968093cd8558bb2129c6eea0e0e9e0fed797",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "605b00ac_4b8e766c",
        "filename": "components/signin/core/browser/android/javatests/src/org/chromium/components/signin/test/util/FakeAccountManagerDelegate.java",
        "patchSetId": 12
      },
      "lineNbr": 218,
      "author": {
        "id": 1001606
      },
      "writtenOn": "2017-10-02T13:54:14Z",
      "side": 1,
      "message": "Hm, I found one downstream test that uses addAccountHolderExplicitly (http://shortn/_5JcCAHsiUq), correct? If so, two things:\n1) That test currently calls addAccountHolderExplicitly() on the instrumentation thread, so as it is this would cause an assertion error.\n2) The test (and the code it exercises) should probably be updated to use AccountManagerFacade instead of the AccountManagerDelegate directly. But you probably have that on your radar anyway :-D\n\nBut given that it looks like the downstream test needs to be adapted anyway, could we just set up the AccountManagerFacade for the test and then use addAccountHolderBlocking() everywhere? It seems like it would be better to remove the ability completely to misuse the FakeAccountManagerDelegate by mixing addAccountHolderExplicitly() and addAccountHolderBlocking() calls.",
      "parentUuid": "c75e5a96_8612e542",
      "range": {
        "startLine": 218,
        "startChar": 16,
        "endLine": 218,
        "endChar": 93
      },
      "revId": "431f968093cd8558bb2129c6eea0e0e9e0fed797",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d335e551_0b94fe10",
        "filename": "components/signin/core/browser/android/javatests/src/org/chromium/components/signin/test/util/FakeAccountManagerDelegate.java",
        "patchSetId": 12
      },
      "lineNbr": 218,
      "author": {
        "id": 1209769
      },
      "writtenOn": "2017-10-02T16:55:02Z",
      "side": 1,
      "message": "Oops! Thanks for finding this. I\u0027ve replaced assertOnUiThread with runOnUiThread to avoid breaking downstream tests.\n\nUsing AccountManagerFacade in that test is tricky, though. There was a recent discussion related to that: see https://crbug.com/552606#c7 and the next comment in the bug.\n\nEither way, there\u0027s no way to get rid of addAccountHolderExplicitly before fixing downstream targets, so we can land this CL and then discuss complete removal of addAccountHolderExplicitly (possibly resurrecting https://crbug.com/552606).",
      "parentUuid": "605b00ac_4b8e766c",
      "range": {
        "startLine": 218,
        "startChar": 16,
        "endLine": 218,
        "endChar": 93
      },
      "revId": "431f968093cd8558bb2129c6eea0e0e9e0fed797",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "285cb572_9eb924c8",
        "filename": "components/signin/core/browser/android/javatests/src/org/chromium/components/signin/test/util/FakeAccountManagerDelegate.java",
        "patchSetId": 12
      },
      "lineNbr": 218,
      "author": {
        "id": 1001606
      },
      "writtenOn": "2017-10-02T18:01:54Z",
      "side": 1,
      "message": "Fair enough, but could we decide on a concrete plan? Here\u0027s my proposal:\n1) Add a big warning and/or @Deprecated to addAccountHolderExplicitly() that it shouldn\u0027t be used, in favor of addAccountHolderBlocking()\n2) Update the downstream test to set up the AccountManagerFacade, which should already let us use addAccountHolderBlocking()\n3) Remove addAccountHolderExplicitly() from the public interface of this class\n4) _Somehow_ address https://crbug.com/552606#c7\n\nIf you agree with 1)-3), only 1) needs to happen in this CL, and we can discuss 4) later. Deal? :)",
      "parentUuid": "d335e551_0b94fe10",
      "range": {
        "startLine": 218,
        "startChar": 16,
        "endLine": 218,
        "endChar": 93
      },
      "revId": "431f968093cd8558bb2129c6eea0e0e9e0fed797",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9cc883c9_239feac2",
        "filename": "components/signin/core/browser/android/javatests/src/org/chromium/components/signin/test/util/FakeAccountManagerDelegate.java",
        "patchSetId": 12
      },
      "lineNbr": 218,
      "author": {
        "id": 1209769
      },
      "writtenOn": "2017-10-03T13:38:48Z",
      "side": 1,
      "message": "I agree on 1) (I\u0027ve added a big warning to addAccountHolderExplicitly), but not sure about 2)-4), sorry.\n\nSince currently downstream code under test uses standalone delegate instead of AccountManagerFacade, 2) doesn\u0027t make much sense to me, as doing so will increase difference between test infrastructure and real environment for the code under test. And 3) doesn\u0027t make sense without 2).\n\n\nHowever, there\u0027s another thing that I don\u0027t like about addAccountHolderBlocking - it creates a circular dependency between AccountManager and it\u0027s FakeAccountManagerDelegate.\n\nIdeally, I would like SigninTestUtil to be moved to org.chromium.components.signin.test.util and addAccountHolderBlocking to be implemented there (and converted to a test rule as part of https://crbug.com/738533). Then we could still use the delegate as a standalone entity (for cases like downstream code), remove the circular dependency and have a designated place for convenience methods related to signin.\n\nIn this setup we will still have addAccountHolderExplicitly (although I\u0027d chop off Explicitly from the name), but with a huge warning I\u0027ve added it shouldn\u0027t be a problem.",
      "parentUuid": "285cb572_9eb924c8",
      "range": {
        "startLine": 218,
        "startChar": 16,
        "endLine": 218,
        "endChar": 93
      },
      "revId": "431f968093cd8558bb2129c6eea0e0e9e0fed797",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}