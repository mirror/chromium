{
  "comments": [
    {
      "key": {
        "uuid": "64dc839c_ff7de32d",
        "filename": "chrome/browser/media/router/discovery/mdns/cast_media_sink_service_impl.cc",
        "patchSetId": 2
      },
      "lineNbr": 52,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2017-08-28T22:53:11Z",
      "side": 1,
      "message": "Prefer constexpr for new constants (optional to convert existing ones).\n\nhttps://google.github.io/styleguide/cppguide.html#Use_of_constexpr",
      "revId": "83e8b49a4df2166aa466a699679d210ee335d7d6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "67b95132_0b83e8c2",
        "filename": "chrome/browser/media/router/discovery/mdns/cast_media_sink_service_impl.cc",
        "patchSetId": 2
      },
      "lineNbr": 52,
      "author": {
        "id": 1212411
      },
      "writtenOn": "2017-08-29T18:44:07Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "64dc839c_ff7de32d",
      "revId": "83e8b49a4df2166aa466a699679d210ee335d7d6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f1d817bd_5652272c",
        "filename": "chrome/browser/media/router/discovery/mdns/cast_media_sink_service_impl.cc",
        "patchSetId": 2
      },
      "lineNbr": 67,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2017-08-28T22:53:11Z",
      "side": 1,
      "message": "It might be helpful to set a fuzz percentage; if there are a large number of senders trying to connect when a receiver comes online, this will spread out the attempts IIUC.",
      "revId": "83e8b49a4df2166aa466a699679d210ee335d7d6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6a79e46e_1fa2abbf",
        "filename": "chrome/browser/media/router/discovery/mdns/cast_media_sink_service_impl.cc",
        "patchSetId": 2
      },
      "lineNbr": 67,
      "author": {
        "id": 1212411
      },
      "writtenOn": "2017-08-29T18:44:07Z",
      "side": 1,
      "message": "Not sure if it will help with large number of sendering connect to a single receiver since the first open channel wont have any delay.",
      "parentUuid": "f1d817bd_5652272c",
      "revId": "83e8b49a4df2166aa466a699679d210ee335d7d6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1d584e05_13023a7c",
        "filename": "chrome/browser/media/router/discovery/mdns/cast_media_sink_service_impl.cc",
        "patchSetId": 2
      },
      "lineNbr": 67,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2017-08-30T17:22:41Z",
      "side": 1,
      "message": "Right, but if the initial set of connections is unable to be served by the receiver, each sender will backoff and retry at a different time, which will prevent the retries from happening all at once.\n\nHistorically, Cast receivers were unable to handle simultaneous incoming connections because of a dependency on the key signing mechanism (which could only handle one request at a time). I believe that improvements have been made, but I am pretty sure there are still some underlying constraints.\n\nI don\u0027t feel strongly about setting it now, but it\u0027s something we can experiment with in the field if we enable UMA parameters: see if the ratio of successful attempts increases when we set a fuzz percentage.",
      "parentUuid": "6a79e46e_1fa2abbf",
      "revId": "83e8b49a4df2166aa466a699679d210ee335d7d6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e0ee5a9c_066c8181",
        "filename": "chrome/browser/media/router/discovery/mdns/cast_media_sink_service_impl.cc",
        "patchSetId": 2
      },
      "lineNbr": 72,
      "author": {
        "id": 1150437
      },
      "writtenOn": "2017-08-25T18:22:26Z",
      "side": 1,
      "message": "Is this value ever used?  It looks like we only have 3 attempts @ 15 seconds each so we would never be over 1 minute for max delay during retries.  How did we come to 10 minutes?",
      "revId": "83e8b49a4df2166aa466a699679d210ee335d7d6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a218e661_f3ff8278",
        "filename": "chrome/browser/media/router/discovery/mdns/cast_media_sink_service_impl.cc",
        "patchSetId": 2
      },
      "lineNbr": 72,
      "author": {
        "id": 1212411
      },
      "writtenOn": "2017-08-29T18:44:07Z",
      "side": 1,
      "message": "No, it is not (just put there because it is a required parameter for BackoffEntry::Policy). net::BackoffEntry class does not set # of max attempts, it relies on this value (Maximum delay) to stop retry attempts.\n\nI have added a max_retry_attempts to simplify coding and testing. max_retry_attempts could be removed when we decide to use max delay instead of max # of retries.",
      "parentUuid": "e0ee5a9c_066c8181",
      "revId": "83e8b49a4df2166aa466a699679d210ee335d7d6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eb3c2d2d_1d201cf8",
        "filename": "chrome/browser/media/router/discovery/mdns/cast_media_sink_service_impl.cc",
        "patchSetId": 2
      },
      "lineNbr": 72,
      "author": {
        "id": 1150437
      },
      "writtenOn": "2017-08-30T06:19:44Z",
      "side": 1,
      "message": "I have a slight preference to use the existing mechanism if we are going to be relying on the base solution as this now feels a bit of a hybrid (partially our solution, partially the base solution from BackoffEntry::Policy).\n\nWill it not work to use the delay instead of attempt count?  Do we have explicit reasons we need to use a retry attempt count instead of a delay?  (in which case I\u0027m fine with the hybrid approach for now, but if we have a strong use case for it perhaps the base solution should be updated to support max retry attempt count as well?)",
      "parentUuid": "a218e661_f3ff8278",
      "revId": "83e8b49a4df2166aa466a699679d210ee335d7d6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a80aedd8_304f522d",
        "filename": "chrome/browser/media/router/discovery/mdns/cast_media_sink_service_impl.cc",
        "patchSetId": 2
      },
      "lineNbr": 336,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2017-08-28T22:53:11Z",
      "side": 1,
      "message": "This might be better named OnChannelOpenFailed(ip_endpoint) to distinguish it from OnError()",
      "revId": "83e8b49a4df2166aa466a699679d210ee335d7d6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9df98b36_bb47f57d",
        "filename": "chrome/browser/media/router/discovery/mdns/cast_media_sink_service_impl.cc",
        "patchSetId": 2
      },
      "lineNbr": 336,
      "author": {
        "id": 1212411
      },
      "writtenOn": "2017-08-29T18:44:07Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a80aedd8_304f522d",
      "revId": "83e8b49a4df2166aa466a699679d210ee335d7d6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "87b845b5_b0affb3d",
        "filename": "chrome/browser/media/router/discovery/mdns/cast_media_sink_service_impl.cc",
        "patchSetId": 2
      },
      "lineNbr": 339,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2017-08-28T22:53:11Z",
      "side": 1,
      "message": "Can this be combined with L293 (so we don\u0027t have to pass error_state)",
      "revId": "83e8b49a4df2166aa466a699679d210ee335d7d6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b6d2c3d8_d711ae21",
        "filename": "chrome/browser/media/router/discovery/mdns/cast_media_sink_service_impl.cc",
        "patchSetId": 2
      },
      "lineNbr": 339,
      "author": {
        "id": 1212411
      },
      "writtenOn": "2017-08-29T18:44:07Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "87b845b5_b0affb3d",
      "revId": "83e8b49a4df2166aa466a699679d210ee335d7d6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f02a0ef0_a0223e34",
        "filename": "chrome/browser/media/router/discovery/mdns/cast_media_sink_service_impl.h",
        "patchSetId": 2
      },
      "lineNbr": 38,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2017-08-28T22:53:11Z",
      "side": 1,
      "message": "Slight preference for declaring this private (it\u0027s an implementation detail of this class).",
      "revId": "83e8b49a4df2166aa466a699679d210ee335d7d6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "778b30a0_1441c56c",
        "filename": "chrome/browser/media/router/discovery/mdns/cast_media_sink_service_impl.h",
        "patchSetId": 2
      },
      "lineNbr": 38,
      "author": {
        "id": 1212411
      },
      "writtenOn": "2017-08-29T18:44:07Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f02a0ef0_a0223e34",
      "revId": "83e8b49a4df2166aa466a699679d210ee335d7d6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f59a16f8_9c814d96",
        "filename": "chrome/browser/media/router/discovery/mdns/cast_media_sink_service_impl_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 226,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2017-08-28T22:53:11Z",
      "side": 1,
      "message": "Do you want to shorten the retry time to help the test run more quickly?\nOr is it possible to inject a mock clock here to simulate the passage of time?",
      "revId": "83e8b49a4df2166aa466a699679d210ee335d7d6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "466d5267_acecc051",
        "filename": "chrome/browser/media/router/discovery/mdns/cast_media_sink_service_impl_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 226,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2017-08-30T17:22:41Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "f59a16f8_9c814d96",
      "revId": "83e8b49a4df2166aa466a699679d210ee335d7d6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "89ff94bd_bf7e4ea4",
        "filename": "chrome/browser/media/router/discovery/mdns/cast_media_sink_service_impl_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 238,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2017-08-28T22:53:11Z",
      "side": 1,
      "message": "I feel like this test would be better written as three test cases:\n\nOpenChannelSucceedsNoRetry()\nOpenChannelSucceedsRetryOnce()\nOpenChannelFails()",
      "revId": "83e8b49a4df2166aa466a699679d210ee335d7d6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "952533eb_0c17d5b9",
        "filename": "chrome/browser/media/router/discovery/mdns/cast_media_sink_service_impl_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 238,
      "author": {
        "id": 1212411
      },
      "writtenOn": "2017-08-29T18:44:07Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "89ff94bd_bf7e4ea4",
      "revId": "83e8b49a4df2166aa466a699679d210ee335d7d6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e8cc0e6d_7dea1f14",
        "filename": "chrome/browser/media/router/discovery/mdns/cast_media_sink_service_impl_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 240,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2017-08-28T22:53:11Z",
      "side": 1,
      "message": "Do you need to call SetBackoffPolicyForTest() before calling this?",
      "revId": "83e8b49a4df2166aa466a699679d210ee335d7d6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "49156c9b_47f0ca38",
        "filename": "chrome/browser/media/router/discovery/mdns/cast_media_sink_service_impl_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 240,
      "author": {
        "id": 1212411
      },
      "writtenOn": "2017-08-29T18:44:07Z",
      "side": 1,
      "message": "No. For OpenChannel() backoff entry is passed in as an parameter, and it will not use |backoff_policy_|.",
      "parentUuid": "e8cc0e6d_7dea1f14",
      "revId": "83e8b49a4df2166aa466a699679d210ee335d7d6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eb5df9fc_b9d828cc",
        "filename": "chrome/browser/media/router/discovery/mdns/cast_media_sink_service_impl_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 240,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2017-08-30T17:22:41Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "49156c9b_47f0ca38",
      "revId": "83e8b49a4df2166aa466a699679d210ee335d7d6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c3b2dde2_cb463b36",
        "filename": "chrome/browser/media/router/discovery/mdns/cast_media_sink_service_impl_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 374,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2017-08-28T22:53:11Z",
      "side": 1,
      "message": "Rather than resetting data structures within a test, I would rather this be written as three test cases:\n\nTestOnChannelErrorMayRetryForCastSink\nTestOnChannelErrorMayRetryForDialSink\nTestOnChannelErrorMayRetryForMissingSink",
      "revId": "83e8b49a4df2166aa466a699679d210ee335d7d6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "34762603_ad8f149b",
        "filename": "chrome/browser/media/router/discovery/mdns/cast_media_sink_service_impl_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 374,
      "author": {
        "id": 1212411
      },
      "writtenOn": "2017-08-29T18:44:07Z",
      "side": 1,
      "message": "It will be simplified by the combining map patch. Just leave two cases there:\n\nTestOnChannelErrorMayRetryForCastSink\nTestOnChannelErrorMayRetryForMissingSink",
      "parentUuid": "c3b2dde2_cb463b36",
      "revId": "83e8b49a4df2166aa466a699679d210ee335d7d6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "831082f0_9941df25",
        "filename": "chrome/browser/media/router/discovery/mdns/cast_media_sink_service_impl_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 374,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2017-08-30T17:22:41Z",
      "side": 1,
      "message": "Okay, maybe leave a TODO() to be done with the map cleanup?",
      "parentUuid": "34762603_ad8f149b",
      "revId": "83e8b49a4df2166aa466a699679d210ee335d7d6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}