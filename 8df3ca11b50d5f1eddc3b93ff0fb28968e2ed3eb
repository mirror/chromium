{
  "comments": [
    {
      "key": {
        "uuid": "dba293e5_b5660535",
        "filename": "ash/login/lock_screen_controller.cc",
        "patchSetId": 2
      },
      "lineNbr": 197,
      "author": {
        "id": 1127641
      },
      "writtenOn": "2017-09-07T17:19:19Z",
      "side": 1,
      "message": "I don\u0027t believe we can do this once PIN is stored in cryptohome, as we will not be able to read the secret.\n\nI wonder if it is even worth doing now. I think it is reasonable that if the PIN keyboard is up and the user has a numeric-only password, we interpret it as PIN.\n\nWe could change the API to send both authentications, ie, one hashed with SHA256 and one hashed with PBKDF2. I wonder if that leaks too much information.\n\nxiyuan@, thoughts?",
      "revId": "8df3ca11b50d5f1eddc3b93ff0fb28968e2ed3eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "020b22b4_68bf6ff4",
        "filename": "ash/login/lock_screen_controller.cc",
        "patchSetId": 2
      },
      "lineNbr": 197,
      "author": {
        "id": 1000101
      },
      "writtenOn": "2017-09-07T19:55:36Z",
      "side": 1,
      "message": "When the pin is stored in cryptohome, we can use the same hash for pin and password and avoid this problem.\n\nNumeric password is an edge case and I am not sure whether Gaia allows numeric password these days. So I think it is reasonable that we assume the input is a pin when pin keyboard is shown and the input is numeric.\n\nIMHO, changing the API to send back two keys are okay too. But I don\u0027t think we need to do this ATM.",
      "parentUuid": "dba293e5_b5660535",
      "revId": "8df3ca11b50d5f1eddc3b93ff0fb28968e2ed3eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c0384ddb_459f6778",
        "filename": "ash/login/lock_screen_controller.cc",
        "patchSetId": 2
      },
      "lineNbr": 197,
      "author": {
        "id": 1151699
      },
      "writtenOn": "2017-09-07T23:42:23Z",
      "side": 1,
      "message": "Removed this check against prefs::kQuickUnlockPinSecret.\nPlease let me know if you have other concerns.",
      "parentUuid": "020b22b4_68bf6ff4",
      "revId": "8df3ca11b50d5f1eddc3b93ff0fb28968e2ed3eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5e2e958d_6c59465d",
        "filename": "ash/login/lock_screen_controller_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 68,
      "author": {
        "id": 1000101
      },
      "writtenOn": "2017-09-07T19:55:36Z",
      "side": 1,
      "message": "nit: We might want to make this wait more explicit by calling Quit in the lambda.",
      "revId": "8df3ca11b50d5f1eddc3b93ff0fb28968e2ed3eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cd321684_8d060240",
        "filename": "ash/login/ui/lock_contents_view.cc",
        "patchSetId": 2
      },
      "lineNbr": 424,
      "author": {
        "id": 1000101
      },
      "writtenOn": "2017-09-07T19:55:36Z",
      "side": 1,
      "message": "We should check the current_user() of |to_update| instead. Because |to_update| does not necessarily point to a different view, e.g. when LayoutAuth is called from LockContentsView::SwapToAuthUser where we update the user of |primary_auth_| instead of creating a new view.",
      "revId": "8df3ca11b50d5f1eddc3b93ff0fb28968e2ed3eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "45c818c9_a761d741",
        "filename": "ash/login/ui/lock_contents_view.cc",
        "patchSetId": 2
      },
      "lineNbr": 424,
      "author": {
        "id": 1151699
      },
      "writtenOn": "2017-09-07T23:42:23Z",
      "side": 1,
      "message": "Applied same change for the auth user change from the other CL. Will merge it accordingly.",
      "parentUuid": "cd321684_8d060240",
      "revId": "8df3ca11b50d5f1eddc3b93ff0fb28968e2ed3eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "456a7740_077dd543",
        "filename": "ash/login/ui/lock_screen.h",
        "patchSetId": 2
      },
      "lineNbr": 33,
      "author": {
        "id": 1127641
      },
      "writtenOn": "2017-09-07T17:19:19Z",
      "side": 1,
      "message": "Please add comment and rename to IsShown().",
      "revId": "8df3ca11b50d5f1eddc3b93ff0fb28968e2ed3eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "67366a72_c61aa09f",
        "filename": "ash/login/ui/lock_screen.h",
        "patchSetId": 2
      },
      "lineNbr": 33,
      "author": {
        "id": 1151699
      },
      "writtenOn": "2017-09-07T23:42:23Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "456a7740_077dd543",
      "revId": "8df3ca11b50d5f1eddc3b93ff0fb28968e2ed3eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a3654d52_01c87e4a",
        "filename": "ash/login/ui/login_auth_user_view.cc",
        "patchSetId": 2
      },
      "lineNbr": 314,
      "author": {
        "id": 1127641
      },
      "writtenOn": "2017-09-07T17:19:19Z",
      "side": 1,
      "message": "I think the usual pattern is !\u003d 0",
      "revId": "8df3ca11b50d5f1eddc3b93ff0fb28968e2ed3eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7ebc60f3_b8fef5c7",
        "filename": "ash/login/ui/login_auth_user_view.cc",
        "patchSetId": 2
      },
      "lineNbr": 314,
      "author": {
        "id": 1151699
      },
      "writtenOn": "2017-09-07T23:42:23Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a3654d52_01c87e4a",
      "revId": "8df3ca11b50d5f1eddc3b93ff0fb28968e2ed3eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b8513f14_9c30aa8c",
        "filename": "chrome/browser/chromeos/login/quick_unlock/pin_storage.cc",
        "patchSetId": 2
      },
      "lineNbr": 75,
      "author": {
        "id": 1127641
      },
      "writtenOn": "2017-09-07T17:19:19Z",
      "side": 1,
      "message": "Why are we storing PINs without hashing them?",
      "revId": "8df3ca11b50d5f1eddc3b93ff0fb28968e2ed3eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "faa15b3e_f9d5587a",
        "filename": "chrome/browser/chromeos/login/quick_unlock/pin_storage.cc",
        "patchSetId": 2
      },
      "lineNbr": 75,
      "author": {
        "id": 1151699
      },
      "writtenOn": "2017-09-07T23:42:23Z",
      "side": 1,
      "message": "The pin is hashed in ComputeSecret() . Set the keytype to Key::KEY_TYPE_PASSWORD_PLAIN here because we only hash plain password, previously hashed pin won\u0027t be hashed again.",
      "parentUuid": "b8513f14_9c30aa8c",
      "revId": "8df3ca11b50d5f1eddc3b93ff0fb28968e2ed3eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}