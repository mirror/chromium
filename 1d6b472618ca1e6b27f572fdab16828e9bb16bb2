{
  "comments": [
    {
      "key": {
        "uuid": "db607ef0_e135a7af",
        "filename": "cc/paint/transfer_cache_entry.h",
        "patchSetId": 14
      },
      "lineNbr": 42,
      "author": {
        "id": 1148065
      },
      "writtenOn": "2017-11-14T00:27:34Z",
      "side": 1,
      "message": "Where is this used?",
      "revId": "1d6b472618ca1e6b27f572fdab16828e9bb16bb2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ac648ac7_24e6e44e",
        "filename": "cc/paint/transfer_cache_entry.h",
        "patchSetId": 14
      },
      "lineNbr": 42,
      "author": {
        "id": 1221484
      },
      "writtenOn": "2017-11-14T21:37:06Z",
      "side": 1,
      "message": "I use it in a follow-up CL which adds some helpers to the OOP Raster serializer/deserializer. I\u0027ll remove from this CL and re-add it there.",
      "parentUuid": "db607ef0_e135a7af",
      "revId": "1d6b472618ca1e6b27f572fdab16828e9bb16bb2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bc4278bc_67cb6258",
        "filename": "gpu/command_buffer/build_gles2_cmd_buffer.py",
        "patchSetId": 14
      },
      "lineNbr": 4649,
      "author": {
        "id": 1148065
      },
      "writtenOn": "2017-11-14T00:27:34Z",
      "side": 1,
      "message": "nit: both of these could just keep a default type and specify \u0027decoder_func\u0027 and leverage the ever-so-tiny bit of autogen code to extract the param out of the shared memory.",
      "revId": "1d6b472618ca1e6b27f572fdab16828e9bb16bb2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f81186ad_03ac4e38",
        "filename": "gpu/command_buffer/build_gles2_cmd_buffer.py",
        "patchSetId": 14
      },
      "lineNbr": 4649,
      "author": {
        "id": 1221484
      },
      "writtenOn": "2017-11-14T21:37:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "bc4278bc_67cb6258",
      "revId": "1d6b472618ca1e6b27f572fdab16828e9bb16bb2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "36389964_20c5de34",
        "filename": "gpu/command_buffer/build_gles2_cmd_buffer.py",
        "patchSetId": 14
      },
      "lineNbr": 4651,
      "author": {
        "id": 1148065
      },
      "writtenOn": "2017-11-14T00:27:34Z",
      "side": 1,
      "message": "Also, I think \u0027True\u0027 would work here (and below)?",
      "revId": "1d6b472618ca1e6b27f572fdab16828e9bb16bb2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8b0b11a2_38d98d9c",
        "filename": "gpu/command_buffer/build_gles2_cmd_buffer.py",
        "patchSetId": 14
      },
      "lineNbr": 4651,
      "author": {
        "id": 1221484
      },
      "writtenOn": "2017-11-14T21:37:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "36389964_20c5de34",
      "revId": "1d6b472618ca1e6b27f572fdab16828e9bb16bb2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9024d145_426fd90c",
        "filename": "gpu/command_buffer/common/discardable_handle.cc",
        "patchSetId": 14
      },
      "lineNbr": 136,
      "author": {
        "id": 1148065
      },
      "writtenOn": "2017-11-14T00:27:34Z",
      "side": 1,
      "message": "What is the test meant to defend against? If the client unlocks too many times, it\u0027s behaving wrong, but it just gets to keep both pieces?\n\nI worry slightly that the comment is wrong/misleading for a malicious client (which can just write kHandleDeleted directly anyway).",
      "revId": "1d6b472618ca1e6b27f572fdab16828e9bb16bb2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "499e1a47_164bae5c",
        "filename": "gpu/command_buffer/common/discardable_handle.cc",
        "patchSetId": 14
      },
      "lineNbr": 136,
      "author": {
        "id": 1221484
      },
      "writtenOn": "2017-11-14T21:37:06Z",
      "side": 1,
      "message": "True enough. I\u0027ve changed this to a DCHECK with a comment indicating that it is designed to catch non-malicious misuse of our API.",
      "parentUuid": "9024d145_426fd90c",
      "revId": "1d6b472618ca1e6b27f572fdab16828e9bb16bb2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7dd3fb53_4ac215dd",
        "filename": "gpu/command_buffer/common/discardable_handle.cc",
        "patchSetId": 14
      },
      "lineNbr": 136,
      "author": {
        "id": 1148065
      },
      "writtenOn": "2017-11-15T01:37:22Z",
      "side": 1,
      "message": "Please make it a DLOG_IF(ERROR):\n1- the stack trace / crashing won\u0027t help you (you may consider tracking this on the client side where the actual error originates)\n2- DCHECK says \"this can\u0027t happen\" which is not true (malicious client), and can be mis-interpreted in a future refactoring, leading to actual security issues.",
      "parentUuid": "499e1a47_164bae5c",
      "revId": "1d6b472618ca1e6b27f572fdab16828e9bb16bb2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "03141c27_95559354",
        "filename": "gpu/command_buffer/common/discardable_handle.cc",
        "patchSetId": 14
      },
      "lineNbr": 136,
      "author": {
        "id": 1221484
      },
      "writtenOn": "2017-11-15T20:23:02Z",
      "side": 1,
      "message": "OK, makes sense - changed to a DLOG_IF\n\nRe (1), adding the client side check requires a bit of debug-only plumbing, as we currently unlock service side (and don\u0027t even look up the handle on the client), so I\u0027ll think about this for a follow up CL.",
      "parentUuid": "7dd3fb53_4ac215dd",
      "revId": "1d6b472618ca1e6b27f572fdab16828e9bb16bb2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "aac5fd27_de7797fa",
        "filename": "gpu/command_buffer/service/gles2_cmd_decoder.cc",
        "patchSetId": 14
      },
      "lineNbr": 20408,
      "author": {
        "id": 1148065
      },
      "writtenOn": "2017-11-14T00:27:34Z",
      "side": 1,
      "message": "We need to check the enum here, otherwise a malicious client could craft an invalid type.",
      "revId": "1d6b472618ca1e6b27f572fdab16828e9bb16bb2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8e02d2cd_63c4b2e3",
        "filename": "gpu/command_buffer/service/gles2_cmd_decoder.cc",
        "patchSetId": 14
      },
      "lineNbr": 20408,
      "author": {
        "id": 1221484
      },
      "writtenOn": "2017-11-14T21:37:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "aac5fd27_de7797fa",
      "revId": "1d6b472618ca1e6b27f572fdab16828e9bb16bb2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e42d463a_4885eb28",
        "filename": "gpu/command_buffer/service/gles2_cmd_decoder.cc",
        "patchSetId": 14
      },
      "lineNbr": 20419,
      "author": {
        "id": 1148065
      },
      "writtenOn": "2017-11-14T00:27:34Z",
      "side": 1,
      "message": "nit: you can combine both of these into GetAddressAndCheckSize(data_shm_id, data_shm_offset, data_size), or even GetSharedMemoryAs\u003cuint8_t*\u003e to pass typed data into CreateLockedEntry (saves a cast).",
      "revId": "1d6b472618ca1e6b27f572fdab16828e9bb16bb2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "75c5a389_128e3b2f",
        "filename": "gpu/command_buffer/service/gles2_cmd_decoder.cc",
        "patchSetId": 14
      },
      "lineNbr": 20419,
      "author": {
        "id": 1221484
      },
      "writtenOn": "2017-11-14T21:37:06Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e42d463a_4885eb28",
      "revId": "1d6b472618ca1e6b27f572fdab16828e9bb16bb2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "93efd837_d57c7bd7",
        "filename": "gpu/command_buffer/service/gles2_cmd_decoder_passthrough_handlers.cc",
        "patchSetId": 14
      },
      "lineNbr": 2808,
      "author": {
        "id": 1148065
      },
      "writtenOn": "2017-11-14T00:27:34Z",
      "side": 1,
      "message": "nit: NOTIMPLEMENTED() here and below.",
      "revId": "1d6b472618ca1e6b27f572fdab16828e9bb16bb2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5bde049e_a2a21356",
        "filename": "gpu/command_buffer/service/gles2_cmd_decoder_passthrough_handlers.cc",
        "patchSetId": 14
      },
      "lineNbr": 2808,
      "author": {
        "id": 1221484
      },
      "writtenOn": "2017-11-14T21:37:06Z",
      "side": 1,
      "message": "done. I see that I missed this on my discardable functions above. I\u0027ll add those in a follow-up CL (and probably use more autogen like you pointed out here).",
      "parentUuid": "93efd837_d57c7bd7",
      "revId": "1d6b472618ca1e6b27f572fdab16828e9bb16bb2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}