{
  "comments": [
    {
      "key": {
        "uuid": "dc22da94_874eb073",
        "filename": "third_party/WebKit/LayoutTests/typedcssom/cssScale-expected.txt",
        "patchSetId": 11
      },
      "lineNbr": 10,
      "author": {
        "id": 1172708
      },
      "writtenOn": "2017-11-20T15:58:01Z",
      "side": 1,
      "message": "after replace double with CSSNumberish,\nsome codes are auto-generated in order to replace undefine with no-passing args like below. \ni think we should see how to make auto-gen binding codes.\n \nin gen/blink/bindings/core/v8/V8CSSScale.cpp\n\n  DoubleOrCSSNumericValue x;\n  DoubleOrCSSNumericValue y;\n  DoubleOrCSSNumericValue z;\n  int numArgsPassed \u003d info.Length();\n  while (numArgsPassed \u003e 0) {\n    if (!info[numArgsPassed - 1]-\u003eIsUndefined())\n      break;\n    --numArgsPassed;\n  }\n  V8DoubleOrCSSNumericValue::ToImpl(info.GetIsolate(), info[0], x, UnionTypeConversionMode::kNotNullable, exceptionState);\n  if (exceptionState.HadException())\n    return;",
      "range": {
        "startLine": 10,
        "startChar": 5,
        "endLine": 10,
        "endChar": 12
      },
      "revId": "a2f61e2c229ebe468962b63c4f3c4cdf78706dfc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4f8b014d_cab85466",
        "filename": "third_party/WebKit/LayoutTests/typedcssom/cssScale-expected.txt",
        "patchSetId": 11
      },
      "lineNbr": 10,
      "author": {
        "id": 1197444
      },
      "writtenOn": "2017-11-20T21:36:02Z",
      "side": 1,
      "message": "I don\u0027t think this test is right anymore given that the last argument is optional. I believe CSSScale(0, 0, undefined) should be equivalent to CSSScale(0, 0), which should not throw. I would just remove this test.",
      "parentUuid": "dc22da94_874eb073",
      "range": {
        "startLine": 10,
        "startChar": 5,
        "endLine": 10,
        "endChar": 12
      },
      "revId": "a2f61e2c229ebe468962b63c4f3c4cdf78706dfc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "85f303f4_1cee88b1",
        "filename": "third_party/WebKit/LayoutTests/typedcssom/cssScale-expected.txt",
        "patchSetId": 11
      },
      "lineNbr": 10,
      "author": {
        "id": 1172708
      },
      "writtenOn": "2017-11-21T12:35:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4f8b014d_cab85466",
      "range": {
        "startLine": 10,
        "startChar": 5,
        "endLine": 10,
        "endChar": 12
      },
      "revId": "a2f61e2c229ebe468962b63c4f3c4cdf78706dfc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ab360a84_b183899e",
        "filename": "third_party/WebKit/LayoutTests/typedcssom/stylevalue-subclasses/cssScale.html",
        "patchSetId": 11
      },
      "lineNbr": 31,
      "author": {
        "id": 1172708
      },
      "writtenOn": "2017-11-20T15:58:01Z",
      "side": 1,
      "message": "actually when i see this tests, i confused.\n\nbecause double types are taken to constructor and then when get values from attributes, it should be double type.\nbut double types set using attribute and then when get values from attributes, it should be obejct(css.number) type at line 64.\n\ni think two tests are not matched.\n\nso i changed tests using assert_style_value_equals function.\nactually i am not sure is it right.\n\nor is it should be same setting type with getting type from attributes when using CSSNumberish?",
      "range": {
        "startLine": 31,
        "startChar": 6,
        "endLine": 31,
        "endChar": 31
      },
      "revId": "a2f61e2c229ebe468962b63c4f3c4cdf78706dfc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2ebabd9b_ce8540da",
        "filename": "third_party/WebKit/LayoutTests/typedcssom/stylevalue-subclasses/cssScale.html",
        "patchSetId": 11
      },
      "lineNbr": 31,
      "author": {
        "id": 1197444
      },
      "writtenOn": "2017-11-20T21:36:02Z",
      "side": 1,
      "message": "Apologies, I think that was a copy-paste error. Yes, the x, y, z getters should always return CSSNumericValues, even if you pass in doubles.\n\nAlso see: https://github.com/w3c/css-houdini-drafts/issues/498#issuecomment-340035338",
      "parentUuid": "ab360a84_b183899e",
      "range": {
        "startLine": 31,
        "startChar": 6,
        "endLine": 31,
        "endChar": 31
      },
      "revId": "a2f61e2c229ebe468962b63c4f3c4cdf78706dfc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "95436650_c1ba1944",
        "filename": "third_party/WebKit/LayoutTests/typedcssom/stylevalue-subclasses/cssScale.html",
        "patchSetId": 11
      },
      "lineNbr": 31,
      "author": {
        "id": 1172708
      },
      "writtenOn": "2017-11-21T12:35:22Z",
      "side": 1,
      "message": "thanks for make clearly.",
      "parentUuid": "2ebabd9b_ce8540da",
      "range": {
        "startLine": 31,
        "startChar": 6,
        "endLine": 31,
        "endChar": 31
      },
      "revId": "a2f61e2c229ebe468962b63c4f3c4cdf78706dfc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4aabf50d_e2b78f0a",
        "filename": "third_party/WebKit/Source/core/css/cssom/CSSScale.cpp",
        "patchSetId": 11
      },
      "lineNbr": 127,
      "author": {
        "id": 1197444
      },
      "writtenOn": "2017-11-20T21:36:02Z",
      "side": 1,
      "message": "nit: I would move these checks into a function in this cpp file e.g. bool isCoordValid(CSSNumericValue*); You can then use isCoordValid in all the setters and constructor. This will reduce code duplication and make it easier to implement those TODOs.",
      "revId": "a2f61e2c229ebe468962b63c4f3c4cdf78706dfc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c311157a_c2c5823d",
        "filename": "third_party/WebKit/Source/core/css/cssom/CSSScale.cpp",
        "patchSetId": 11
      },
      "lineNbr": 127,
      "author": {
        "id": 1172708
      },
      "writtenOn": "2017-11-21T12:35:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4aabf50d_e2b78f0a",
      "revId": "a2f61e2c229ebe468962b63c4f3c4cdf78706dfc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "448e8d47_1d13577f",
        "filename": "third_party/WebKit/Source/core/css/cssom/CSSScale.h",
        "patchSetId": 11
      },
      "lineNbr": 70,
      "author": {
        "id": 1197444
      },
      "writtenOn": "2017-11-20T21:36:02Z",
      "side": 1,
      "message": "If it makes it easier for you, feel free to add a static method on CSSUnitValue for creating numbers (so you don\u0027t have to keep typing CSSPrimitiveValue::UnitType::kNumber), or make the unit type default to number.",
      "revId": "a2f61e2c229ebe468962b63c4f3c4cdf78706dfc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0fbd7f7d_44c57211",
        "filename": "third_party/WebKit/Source/core/css/cssom/CSSScale.h",
        "patchSetId": 11
      },
      "lineNbr": 70,
      "author": {
        "id": 1172708
      },
      "writtenOn": "2017-11-21T12:35:22Z",
      "side": 1,
      "message": "i made the unit type default to number.",
      "parentUuid": "448e8d47_1d13577f",
      "revId": "a2f61e2c229ebe468962b63c4f3c4cdf78706dfc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}