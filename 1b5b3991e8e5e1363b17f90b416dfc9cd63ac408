{
  "comments": [
    {
      "key": {
        "uuid": "f03bfb11_bf122702",
        "filename": "chrome/browser/plugins/pdf_iframe_navigation_throttle.cc",
        "patchSetId": 11
      },
      "lineNbr": 79,
      "author": {
        "id": 1232077
      },
      "writtenOn": "2017-08-08T22:58:23Z",
      "side": 1,
      "message": "dcheng: Are there any security issues with opening a data url in an iframe?",
      "revId": "1b5b3991e8e5e1363b17f90b416dfc9cd63ac408",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e96e8c7f_26e6be08",
        "filename": "chrome/browser/plugins/pdf_iframe_navigation_throttle.cc",
        "patchSetId": 11
      },
      "lineNbr": 79,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-08-08T23:35:30Z",
      "side": 1,
      "message": "I can\u0027t think of anything obvious here for loading a data URL by itself: the resulting Document has a unique origin.\n\nHowever, I\u0027m not 100% sure that it\u0027s safe to include the URL like this with no escaping: is it possible for this URL to have interesting characters like \" literally embedded? Similarly, is it possible that this could somehow be a javascript: URL?\n\n(Though I guess with the unique origin thing, that should still limit the scope of the breakage...)",
      "parentUuid": "f03bfb11_bf122702",
      "revId": "1b5b3991e8e5e1363b17f90b416dfc9cd63ac408",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c7c97e98_5823d67d",
        "filename": "chrome/browser/plugins/pdf_iframe_navigation_throttle.cc",
        "patchSetId": 11
      },
      "lineNbr": 79,
      "author": {
        "id": 1111029
      },
      "writtenOn": "2017-08-14T19:29:31Z",
      "side": 1,
      "message": "Thinking this through, I think this is okay. The URL is retrieved from navigation_handle()-\u003eGetURL(), which is a GURL. The string representation of a URL is called the spec(), and GURL comment says: \"Getting the spec will assert if the URL is invalid to help protect against malicious URLs.\"\n\nAdditionally the site can already execute arbitrary JavaScript and navigate to an arbitrary URL, so I don\u0027t think this gives the site any power it doesn\u0027t already have.\n\nThat being said it would still be good to get Nick to also say something.",
      "parentUuid": "e96e8c7f_26e6be08",
      "revId": "1b5b3991e8e5e1363b17f90b416dfc9cd63ac408",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d9513df8_a43eb5c9",
        "filename": "chrome/browser/plugins/pdf_iframe_navigation_throttle.cc",
        "patchSetId": 11
      },
      "lineNbr": 79,
      "author": {
        "id": 1002169
      },
      "writtenOn": "2017-08-16T21:42:22Z",
      "side": 1,
      "message": "What do you expect prevents navigation_handle()-\u003eGetURL from having %22 or double quote characters in it, followed by close tags (%3E) ? https://www.google.com/%22%3E is a totally valid URL, and that would seemingly break out of this context -- anything after that gets dumped into the data URL.\n\nThere are two levels of escaping here: the URL needs to be properly escaped so that it can appear in the context of an HTML attribute, then the entire HTML document needs to be encoded so that it\u0027s acceptable in the payload of a data: URL. So, there\u0027s a missing extra escaping that needs to happen on |navigation_handle()-\u003eGetURL().spec()| before it\u0027s safe to concatenate in.\n\nRegarding GURL parsing \"data:\" URLs -- I don\u0027t expect GURL to do very much canonicalization of data: URLs AT ALL. A valid spec() is a very low bar. GURL barely references the data scheme at all: https://cs.chromium.org/search/?q\u003dkDataScheme+file:src.url\u0026type\u003dcs\n\nLooking at the code, it seems like there\u0027s some whitespace stripping that applies to all URLs, and then the weak canonicalization that happens in https://cs.chromium.org/chromium/src/url/url_canon_pathurl.cc?type\u003dcs\u0026l\u003d66 . \"javascript:\" and \"data:\" URLs are canonicalized in the exact same way.",
      "parentUuid": "c7c97e98_5823d67d",
      "revId": "1b5b3991e8e5e1363b17f90b416dfc9cd63ac408",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "06d13599_2146b8bd",
        "filename": "chrome/browser/plugins/pdf_iframe_navigation_throttle.cc",
        "patchSetId": 11
      },
      "lineNbr": 79,
      "author": {
        "id": 1002169
      },
      "writtenOn": "2017-08-16T23:36:27Z",
      "side": 1,
      "message": "My recommendation here is:\n\nBuild the string with the HTML you want, like this:\n\nstd::string html \u003d base::StringPrintf(R\"(\u003cbody style\u003d\"margin:0;\"\u003e\u003cobject data\u003d\"%s\"  type\u003d\"application/pdf\" style\u003d\"width: 100%; height: 100%;\"\u003e\u003c/object\u003e\u003c/body\u003e)\", navigation_handle()-\u003eGetURL().spec().c_str());\n\n(in the above context, I believe injecting .spec() is safe thanks to URL canonicalization escaping the double-quote characters)\n\nThen build the data URL from that:\n\nGURL data_url \u003d GURL(\"data:text/html,\" + net::EscapePath(html));",
      "parentUuid": "d9513df8_a43eb5c9",
      "revId": "1b5b3991e8e5e1363b17f90b416dfc9cd63ac408",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}