{
  "comments": [
    {
      "key": {
        "uuid": "1efeb5a1_303c9eeb",
        "filename": "mojo/public/cpp/bindings/tests/union_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 1156,
      "author": {
        "id": 1104639
      },
      "writtenOn": "2017-11-11T18:11:19Z",
      "side": 1,
      "message": "This implicit constructor and the implicit conversion on line 1154 seems a little confusing. \nI slightly prefer the more explicit way:\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\nhandle-\u003eset_f_small_cache(ptr.PassInterface());\n...\nptr.Bind(std::move(handle-\u003eget_f_small_cache()));\n\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\n\nDo they help to avoid touching a lot of files? (If yes, I don\u0027t think it is necessary to block landing this CL because of this. But it seems nice to change to the more explicit way in follow-up changes. And I could help if necessary.)",
      "revId": "ef7a2f03373927cd5b7a99f14cb8fbd38afea677",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "93cb0375_caa95073",
        "filename": "mojo/public/tools/bindings/generators/mojom_cpp_generator.py",
        "patchSetId": 2
      },
      "lineNbr": 672,
      "author": {
        "id": 1104639
      },
      "writtenOn": "2017-11-11T18:11:19Z",
      "side": 1,
      "message": "Do we support lazy serialization of InterfacePtr now? I didn\u0027t realize that.",
      "revId": "ef7a2f03373927cd5b7a99f14cb8fbd38afea677",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1fdb716e_75666a9b",
        "filename": "mojo/public/tools/bindings/generators/mojom_cpp_generator.py",
        "patchSetId": 2
      },
      "lineNbr": 672,
      "author": {
        "id": 1104639
      },
      "writtenOn": "2017-11-11T18:19:32Z",
      "side": 1,
      "message": "Ah, I see. That is because ptr argument will be implicitly converted to ptr info.",
      "parentUuid": "93cb0375_caa95073",
      "revId": "ef7a2f03373927cd5b7a99f14cb8fbd38afea677",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "45713f43_afcf3931",
        "filename": "storage/browser/blob/blob_registry_impl.cc",
        "patchSetId": 2
      },
      "lineNbr": 123,
      "author": {
        "id": 1110029
      },
      "writtenOn": "2017-11-11T03:45:02Z",
      "side": 1,
      "message": "since you made this a non-static method, there isn\u0027t really a reason to still pass in elements as opposed to just accessing elements_ directly",
      "revId": "ef7a2f03373927cd5b7a99f14cb8fbd38afea677",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "16759ba9_e529f145",
        "filename": "storage/browser/blob/blob_registry_impl.cc",
        "patchSetId": 2
      },
      "lineNbr": 123,
      "author": {
        "id": 1002808
      },
      "writtenOn": "2017-11-11T17:46:36Z",
      "side": 1,
      "message": "doh. done",
      "parentUuid": "45713f43_afcf3931",
      "revId": "ef7a2f03373927cd5b7a99f14cb8fbd38afea677",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "561e1098_5c166a32",
        "filename": "storage/browser/blob/blob_transport_strategy.h",
        "patchSetId": 2
      },
      "lineNbr": 36,
      "author": {
        "id": 1110029
      },
      "writtenOn": "2017-11-11T03:45:02Z",
      "side": 1,
      "message": "this isn\u0027t quite accurate. The fact that |bytes| has |embedded_data| has no influence on wether |data| needs to be a valid BytesProvider or not (even if the renderer might have included embedded_data it might still be the case that the browser process doesn\u0027t use embedded_data). Maybe a better comment would explain that rather than getting the bytes provider from the DataElementBytes, this possibly uses |data| to acquire the byte data asynchronously.",
      "revId": "ef7a2f03373927cd5b7a99f14cb8fbd38afea677",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "753c6db1_dedbddb2",
        "filename": "storage/browser/blob/blob_transport_strategy.h",
        "patchSetId": 2
      },
      "lineNbr": 36,
      "author": {
        "id": 1002808
      },
      "writtenOn": "2017-11-11T17:46:36Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "561e1098_5c166a32",
      "revId": "ef7a2f03373927cd5b7a99f14cb8fbd38afea677",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}