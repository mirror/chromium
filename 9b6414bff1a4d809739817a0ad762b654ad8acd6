{
  "comments": [
    {
      "key": {
        "uuid": "fbfad779_34269cb3",
        "filename": "/COMMIT_MSG",
        "patchSetId": 15
      },
      "lineNbr": 17,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-12-19T02:33:06Z",
      "side": 1,
      "message": "nit: s/CanCommitOrigin/origin/ ?",
      "range": {
        "startLine": 17,
        "startChar": 0,
        "endLine": 17,
        "endChar": 15
      },
      "revId": "9b6414bff1a4d809739817a0ad762b654ad8acd6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "969df01b_9b2deeda",
        "filename": "content/browser/frame_host/navigation_controller_impl.cc",
        "patchSetId": 15
      },
      "lineNbr": 383,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-12-19T02:33:06Z",
      "side": 1,
      "message": "base_url, perhaps? (It\u0027s not really the target_url in the sense that we aren\u0027t going to navigate to it.)",
      "range": {
        "startLine": 383,
        "startChar": 9,
        "endLine": 383,
        "endChar": 19
      },
      "revId": "9b6414bff1a4d809739817a0ad762b654ad8acd6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f1677085_2fefa35c",
        "filename": "content/browser/frame_host/navigation_controller_impl_unittest.cc",
        "patchSetId": 15
      },
      "lineNbr": 963,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-12-19T02:33:06Z",
      "side": 1,
      "message": "Thanks for fixing all these tests to behave more sanely with --site-per-process! :)  Now that they won\u0027t result in CanCommitOrigin kills anymore, should we add a test to ensure that we actually kill the renderer if it tries to commit an invalid origin with an origin lock?  Maybe something similar to SecurityExploitBrowserTest.MismatchedOriginOnCommit but with origin locks?",
      "revId": "9b6414bff1a4d809739817a0ad762b654ad8acd6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "05eada5d_30050e62",
        "filename": "content/browser/frame_host/navigation_controller_impl_unittest.cc",
        "patchSetId": 15
      },
      "lineNbr": 1957,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-12-19T02:33:06Z",
      "side": 1,
      "message": "Hmm, I\u0027m curious if the test\u0027s intention was to deliberately change the url on forward navigation, according to its comment \"Tests what happens when a forward navigation produces a new page.\"?  Maybe simulating that url2 now redirects to url3?  Although the test isn\u0027t doing redirects, the comment is very similar to that on Reload_GeneratesNewPage, which is doing that through a redirect.  Maybe we should tweak the test to do something similar here instead of removing url3?",
      "range": {
        "startLine": 1957,
        "startChar": 60,
        "endLine": 1957,
        "endChar": 64
      },
      "revId": "9b6414bff1a4d809739817a0ad762b654ad8acd6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d4f60759_06ad87dc",
        "filename": "content/browser/frame_host/navigation_controller_impl_unittest.cc",
        "patchSetId": 15
      },
      "lineNbr": 3082,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-12-19T02:33:06Z",
      "side": 1,
      "message": "Could you also use NavigationSimulator here to avoid the navigating_rfh, by doing CreateRendererInitiated() + Start() here, and Commit() after checking for the interstitial?",
      "revId": "9b6414bff1a4d809739817a0ad762b654ad8acd6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6449390e_3e9017de",
        "filename": "content/browser/frame_host/navigation_controller_impl_unittest.cc",
        "patchSetId": 15
      },
      "lineNbr": 3468,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-12-19T02:33:06Z",
      "side": 1,
      "message": "optional: might be worthwhile extracting this into a test helper, given that this ended up in quite a few places?",
      "range": {
        "startLine": 3466,
        "startChar": 40,
        "endLine": 3468,
        "endChar": 73
      },
      "revId": "9b6414bff1a4d809739817a0ad762b654ad8acd6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a41b178c_1b141bfe",
        "filename": "content/browser/frame_host/navigation_controller_impl_unittest.cc",
        "patchSetId": 15
      },
      "lineNbr": 3843,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-12-19T02:33:06Z",
      "side": 1,
      "message": "Why would there be no bad message here in --site-per-process?",
      "revId": "9b6414bff1a4d809739817a0ad762b654ad8acd6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1110b4c9_b0a30d1a",
        "filename": "content/browser/frame_host/navigation_request.cc",
        "patchSetId": 15
      },
      "lineNbr": 843,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-12-19T02:33:06Z",
      "side": 1,
      "message": "target_url? (Since it\u0027s not really an origin?)",
      "range": {
        "startLine": 843,
        "startChar": 14,
        "endLine": 843,
        "endChar": 27
      },
      "revId": "9b6414bff1a4d809739817a0ad762b654ad8acd6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0297301c_606e965a",
        "filename": "content/browser/frame_host/navigation_request.cc",
        "patchSetId": 15
      },
      "lineNbr": 858,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-12-19T02:33:06Z",
      "side": 1,
      "message": "There are a few other places where SetSite may be called, and I\u0027m curious whether we need to fall back to base URL in any of those:\n- DidNavigate, which uses params.url.  (I\u0027m assuming it\u0027s not the base URL, because there\u0027s also params.base_url.)\n- BrowsingInstance::GetSiteInstanceForURL() - which may matter if we are creating a new BrowsingInstance via LoadDataWithBaseURL, if that\u0027s even possible?\n- a case in DetermineSiteInstanceForURL which may matter for session restore (actually, might be worth trying session restore with a base URL)",
      "range": {
        "startLine": 858,
        "startChar": 0,
        "endLine": 858,
        "endChar": 39
      },
      "revId": "9b6414bff1a4d809739817a0ad762b654ad8acd6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1e8472e3_c5ee71be",
        "filename": "content/browser/frame_host/render_frame_host_impl.cc",
        "patchSetId": 15
      },
      "lineNbr": 3272,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-12-19T02:33:06Z",
      "side": 1,
      "message": "Since we typically call GetSiteForURL on the URL rather than origin, I\u0027m wondering if it makes sense at all to use |url| instead of |origin_url| here, since both are passed in?  (We\u0027ve already checked that origin_url and url match up above...)\n\nThis would allow it to resolve the right site URL for hosted apps, and maybe that will help with the ShouldLockToOrigin hosted apps issue you mention below?\n\nIn the future, once we start locking hosted apps to their underlying origin, it seems that we\u0027ll want to also somehow pass that underlying origin to CheckOriginLock() somehow, instead of the site_url?  (Not sure what the plumbing for that will look like yet...)",
      "range": {
        "startLine": 3272,
        "startChar": 63,
        "endLine": 3272,
        "endChar": 73
      },
      "revId": "9b6414bff1a4d809739817a0ad762b654ad8acd6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "19db17c2_0fc78dc1",
        "filename": "content/browser/frame_host/render_frame_host_impl.cc",
        "patchSetId": 15
      },
      "lineNbr": 3283,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-12-19T02:33:06Z",
      "side": 1,
      "message": "Do you mean if ShouldLockToOrigin(site_url) *returns true*?",
      "range": {
        "startLine": 3283,
        "startChar": 9,
        "endLine": 3283,
        "endChar": 37
      },
      "revId": "9b6414bff1a4d809739817a0ad762b654ad8acd6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "339583fe_12faaaf0",
        "filename": "content/browser/web_contents/web_contents_impl_unittest.cc",
        "patchSetId": 15
      },
      "lineNbr": 1821,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-12-19T02:33:06Z",
      "side": 1,
      "message": "Would it be better to leave the cross-site navigation in and either use the NavigationSimulator or compute navigating_rfh instead, like the other tests, so we still have cross-process navigation coverage of interstitial dismissal via --site-per-process?  (Same for ShowInterstitialOnInterstitial below)",
      "range": {
        "startLine": 1821,
        "startChar": 0,
        "endLine": 1821,
        "endChar": 42
      },
      "revId": "9b6414bff1a4d809739817a0ad762b654ad8acd6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2138b52d_8fd59148",
        "filename": "content/browser/web_contents/web_contents_impl_unittest.cc",
        "patchSetId": 15
      },
      "lineNbr": 3302,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-12-19T02:33:06Z",
      "side": 1,
      "message": "Yes, changing to a chromium.org seems right here, as the test intends for this third navigation to remain a same-process navigation with the first one.",
      "range": {
        "startLine": 3302,
        "startChar": 15,
        "endLine": 3302,
        "endChar": 20
      },
      "revId": "9b6414bff1a4d809739817a0ad762b654ad8acd6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}