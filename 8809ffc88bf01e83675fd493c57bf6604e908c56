{
  "comments": [
    {
      "key": {
        "uuid": "5d1799e8_2085c30b",
        "filename": "content/browser/renderer_host/render_view_host_unittest.cc",
        "patchSetId": 4
      },
      "lineNbr": 41,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-06-25T08:34:07Z",
      "side": 1,
      "message": "It feels like defining this locally may not scale up very well. *shrug*\n\nI don\u0027t have a great idea on how to mitigate this though, since this implementation should live in renderer...",
      "range": {
        "startLine": 34,
        "startChar": 0,
        "endLine": 41,
        "endChar": 2
      },
      "revId": "8809ffc88bf01e83675fd493c57bf6604e908c56",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3e9d3025_62936d44",
        "filename": "content/browser/renderer_host/render_view_host_unittest.cc",
        "patchSetId": 4
      },
      "lineNbr": 93,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-06-25T08:34:07Z",
      "side": 1,
      "message": "Small nit: most code usually uses auto in conjunction with base::MakeUnique",
      "range": {
        "startLine": 93,
        "startChar": 2,
        "endLine": 93,
        "endChar": 29
      },
      "revId": "8809ffc88bf01e83675fd493c57bf6604e908c56",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ab648fdb_f3e79520",
        "filename": "content/renderer/render_widget.h",
        "patchSetId": 4
      },
      "lineNbr": 453,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-06-25T08:34:07Z",
      "side": 1,
      "message": "I\u0027m wondering if we want to provide the default arg here. Shouldn\u0027t all subclasses be binding this anyway?",
      "range": {
        "startLine": 453,
        "startChar": 50,
        "endLine": 453,
        "endChar": 60
      },
      "revId": "8809ffc88bf01e83675fd493c57bf6604e908c56",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e562463d_eee3aabd",
        "filename": "content/renderer/render_widget.h",
        "patchSetId": 4
      },
      "lineNbr": 453,
      "author": {
        "id": 1123071
      },
      "writtenOn": "2017-06-26T15:00:17Z",
      "side": 1,
      "message": "It is not always populated. Specifically it isn\u0027t populated on RenderViews. I guess we could adjust the renderer.mojom to pass a Widget\u0026 in on the CreateView/CreateFrame methods. I tried it and it started to be non-trivial.\n\nWDYT?",
      "parentUuid": "ab648fdb_f3e79520",
      "range": {
        "startLine": 453,
        "startChar": 50,
        "endLine": 453,
        "endChar": 60
      },
      "revId": "8809ffc88bf01e83675fd493c57bf6604e908c56",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b5dd4941_56f4b245",
        "filename": "content/renderer/render_widget.h",
        "patchSetId": 4
      },
      "lineNbr": 453,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-06-28T06:54:52Z",
      "side": 1,
      "message": "The impression I had from our chat the other day was that input things on frames would use the frame-associated input handler, while widget-only things (popup menus, fullscreen widgets) would use the widget-associated input handler.\n\nBut right now, it looks like widget input handler and frame input handler have a different set of functionality--so does that mean RenderView (and widgets for local roots) don\u0027t need the widget-associated functionality?\n\n(Sorry for the confusion, happy to discuss this more on chat if that helps)",
      "parentUuid": "e562463d_eee3aabd",
      "range": {
        "startLine": 453,
        "startChar": 50,
        "endLine": 453,
        "endChar": 60
      },
      "revId": "8809ffc88bf01e83675fd493c57bf6604e908c56",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}