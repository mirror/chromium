{
  "comments": [
    {
      "key": {
        "uuid": "fff99f02_97dddbe8",
        "filename": "third_party/WebKit/Source/core/animation/CompositorMutatorImpl.cpp",
        "patchSetId": 36
      },
      "lineNbr": 35,
      "author": {
        "id": 1115976
      },
      "writtenOn": "2017-11-17T01:30:30Z",
      "side": 1,
      "message": "(I assume this is the compositor thread from the class-level comment)\n\nFor clarification, how about calling Platform::Current()-\u003eCompositorThread() instead and/or renaming |thread_| to |compositor_thread_|? Also, IsContextThread() sounds like AudioWorklet\u0027s thread, so IsCompositorThread() would be clearer.",
      "range": {
        "startLine": 35,
        "startChar": 6,
        "endLine": 35,
        "endChar": 51
      },
      "revId": "fca102b4a5b3f95d5ff7c82f316c458060cc9a55",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "74de8514_87466721",
        "filename": "third_party/WebKit/Source/core/animation/CompositorMutatorImpl.cpp",
        "patchSetId": 36
      },
      "lineNbr": 54,
      "author": {
        "id": 1001365
      },
      "writtenOn": "2017-11-17T11:51:23Z",
      "side": 1,
      "message": "Since CompositorMutatorClient is no longer garbage collected we can remove this entire dance to construct it on the other thread. I.e. we can just go back to something like this:\nhttps://codereview.chromium.org/1895873006/diff/60001/third_party/WebKit/Source/web/WebViewImpl.cpp",
      "revId": "fca102b4a5b3f95d5ff7c82f316c458060cc9a55",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e2270cb8_608f75eb",
        "filename": "third_party/WebKit/Source/core/animation/CompositorMutatorImpl.cpp",
        "patchSetId": 36
      },
      "lineNbr": 120,
      "author": {
        "id": 1001365
      },
      "writtenOn": "2017-11-17T14:55:50Z",
      "side": 1,
      "message": "From our discussion, we should be setting the update synchronously for now to ensure that when we signal the waitable event the compositor thread has already received the update. Otherwise, we could not receive the posted task before the compositor draws the frame after returning from the mutate call.\n\nIn a future CL when we implement the scheduling logic we\u0027ll need to use a posted task again since the compositor will not be waiting for the animator to finish.",
      "revId": "fca102b4a5b3f95d5ff7c82f316c458060cc9a55",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e73b88b2_9cc69bb7",
        "filename": "third_party/WebKit/Source/core/animation/CompositorMutatorImpl.cpp",
        "patchSetId": 36
      },
      "lineNbr": 123,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2017-11-17T07:12:15Z",
      "side": 1,
      "message": "Who guarantees that client_ is alive until CompositorMutatorClient::SetMutationUpdate gets called?\n\nIn general would you help me understand who owns client_? CompositorMutatorImpl is not owning...",
      "revId": "fca102b4a5b3f95d5ff7c82f316c458060cc9a55",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e3ab519b_6d040754",
        "filename": "third_party/WebKit/Source/core/animation/CompositorMutatorImpl.cpp",
        "patchSetId": 36
      },
      "lineNbr": 123,
      "author": {
        "id": 1001365
      },
      "writtenOn": "2017-11-17T11:51:23Z",
      "side": 1,
      "message": "CompositorMutatorClient (client_) is a LayerTreeMutator owned by AnimationHost which is owned by the LayerTreeHostImpl. I think we should use a WeakPtr to drop the tasks if the client has gone away before this task runs (for all of the calls back to the compositor).",
      "parentUuid": "e73b88b2_9cc69bb7",
      "revId": "fca102b4a5b3f95d5ff7c82f316c458060cc9a55",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cad9a6e6_057716cd",
        "filename": "third_party/WebKit/Source/core/animation/CompositorMutatorImpl.h",
        "patchSetId": 36
      },
      "lineNbr": 26,
      "author": {
        "id": 1115976
      },
      "writtenOn": "2017-11-17T01:30:30Z",
      "side": 1,
      "message": "Which is the control thread?: main thread, compositor thread, or AnimationWorklet thread?",
      "range": {
        "startLine": 26,
        "startChar": 12,
        "endLine": 26,
        "endChar": 30
      },
      "revId": "fca102b4a5b3f95d5ff7c82f316c458060cc9a55",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9e6ad326_66d49c0c",
        "filename": "third_party/WebKit/Source/core/animation/CompositorMutatorImpl.h",
        "patchSetId": 36
      },
      "lineNbr": 27,
      "author": {
        "id": 1115976
      },
      "writtenOn": "2017-11-17T01:30:30Z",
      "side": 1,
      "message": "Looks like Register/UnregisterCompositorAnimatior are called on the AnimationWorklet thread. How about like this?\n\n// Unless otherwise noted, this should be accessed only on the compositor thread.",
      "range": {
        "startLine": 27,
        "startChar": 3,
        "endLine": 27,
        "endChar": 51
      },
      "revId": "fca102b4a5b3f95d5ff7c82f316c458060cc9a55",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "81fdd1a3_85ddee54",
        "filename": "third_party/WebKit/Source/core/animation/CompositorMutatorImpl.h",
        "patchSetId": 36
      },
      "lineNbr": 64,
      "author": {
        "id": 1001365
      },
      "writtenOn": "2017-11-17T11:51:23Z",
      "side": 1,
      "message": "This is the compositor thread? Can we call it compositor_thread_ and/or comment to that effect? Thanks!",
      "revId": "fca102b4a5b3f95d5ff7c82f316c458060cc9a55",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "45b24d7c_e963c85f",
        "filename": "third_party/WebKit/Source/core/exported/WebViewImpl.h",
        "patchSetId": 36
      },
      "lineNbr": 681,
      "author": {
        "id": 1001365
      },
      "writtenOn": "2017-11-17T11:51:23Z",
      "side": 1,
      "message": "When is CompositorMutatorImpl destructed? This should probably be unique_ptr?",
      "revId": "fca102b4a5b3f95d5ff7c82f316c458060cc9a55",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a3d00cb9_1fc7c0fd",
        "filename": "third_party/WebKit/Source/modules/animationworklet/AnimationWorkletProxyClientImpl.cpp",
        "patchSetId": 36
      },
      "lineNbr": 72,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2017-11-17T07:12:15Z",
      "side": 1,
      "message": "Why do we need to convert it to base:: callback?\n\nAnimationWorkletProxyClientImpl::MutateWithEvent is a Blink\u0027s method.",
      "revId": "fca102b4a5b3f95d5ff7c82f316c458060cc9a55",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "af072ec7_02d43f5a",
        "filename": "third_party/WebKit/Source/modules/animationworklet/AnimationWorkletProxyClientImpl.h",
        "patchSetId": 36
      },
      "lineNbr": 52,
      "author": {
        "id": 1115976
      },
      "writtenOn": "2017-11-17T01:30:30Z",
      "side": 1,
      "message": "animation?",
      "range": {
        "startLine": 52,
        "startChar": 35,
        "endLine": 52,
        "endChar": 43
      },
      "revId": "fca102b4a5b3f95d5ff7c82f316c458060cc9a55",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "34062acb_b5863ec3",
        "filename": "third_party/WebKit/Source/modules/animationworklet/AnimationWorkletProxyClientImpl.h",
        "patchSetId": 36
      },
      "lineNbr": 55,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2017-11-17T07:12:15Z",
      "side": 1,
      "message": "I\u0027m a bit concerned that this CL introduces a bunch of raw pointers to CompositorMutatorImpl*, but is it guaranteed that the owning objects get destructed when LayoutTreeHostImpl releases the CompositorMutator?",
      "revId": "fca102b4a5b3f95d5ff7c82f316c458060cc9a55",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6e8007d2_c2bebc92",
        "filename": "third_party/WebKit/Source/modules/animationworklet/AnimationWorkletProxyClientImpl.h",
        "patchSetId": 36
      },
      "lineNbr": 57,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2017-11-17T07:12:15Z",
      "side": 1,
      "message": "Why do we need to make it weak?",
      "revId": "fca102b4a5b3f95d5ff7c82f316c458060cc9a55",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "36b4af49_ad9f5df8",
        "filename": "third_party/WebKit/Source/modules/animationworklet/AnimationWorkletProxyClientImpl.h",
        "patchSetId": 36
      },
      "lineNbr": 58,
      "author": {
        "id": 1001365
      },
      "writtenOn": "2017-11-17T11:51:23Z",
      "side": 1,
      "message": "Isn\u0027t active_ equivalent to whether global_scope_ is set?",
      "revId": "fca102b4a5b3f95d5ff7c82f316c458060cc9a55",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b8e33d81_ec5cdf8e",
        "filename": "third_party/WebKit/Source/modules/animationworklet/AnimationWorkletThreadTest.cpp",
        "patchSetId": 36
      },
      "lineNbr": 45,
      "author": {
        "id": 1001365
      },
      "writtenOn": "2017-11-17T11:51:23Z",
      "side": 1,
      "message": "Why do we need to override the destructor?",
      "revId": "fca102b4a5b3f95d5ff7c82f316c458060cc9a55",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "aaf661cc_f8a2959a",
        "filename": "third_party/WebKit/Source/modules/animationworklet/AnimationWorkletThreadTest.cpp",
        "patchSetId": 36
      },
      "lineNbr": 53,
      "author": {
        "id": 1001365
      },
      "writtenOn": "2017-11-17T11:51:23Z",
      "side": 1,
      "message": "Does anyone use this method?",
      "revId": "fca102b4a5b3f95d5ff7c82f316c458060cc9a55",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a658c171_912b7067",
        "filename": "third_party/WebKit/Source/modules/animationworklet/AnimationWorkletThreadTest.cpp",
        "patchSetId": 36
      },
      "lineNbr": 56,
      "author": {
        "id": 1001365
      },
      "writtenOn": "2017-11-17T11:51:23Z",
      "side": 1,
      "message": "TestingPlatformSupport defines CurrentThread but this isn\u0027t marked override - also it seems to do the same thing. Is this necessary?",
      "revId": "fca102b4a5b3f95d5ff7c82f316c458060cc9a55",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "75ae76ff_809e1062",
        "filename": "third_party/WebKit/Source/modules/animationworklet/AnimationWorkletThreadTest.cpp",
        "patchSetId": 36
      },
      "lineNbr": 87,
      "author": {
        "id": 1001365
      },
      "writtenOn": "2017-11-17T11:51:23Z",
      "side": 1,
      "message": "Remove unused override.",
      "revId": "fca102b4a5b3f95d5ff7c82f316c458060cc9a55",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}