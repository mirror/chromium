{
  "comments": [
    {
      "key": {
        "uuid": "67bc0ee3_c3f6f7d4",
        "filename": "/COMMIT_MSG",
        "patchSetId": 22
      },
      "lineNbr": 14,
      "author": {
        "id": 1003325
      },
      "writtenOn": "2017-08-02T17:45:59Z",
      "side": 1,
      "message": "Nit: Remove this part. Timing out wasn\u0027t part of the SchedulerWorker.",
      "range": {
        "startLine": 14,
        "startChar": 0,
        "endLine": 14,
        "endChar": 11
      },
      "revId": "eb9687209c9efba9fde69645e7447660b7c3efe8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "79cc6925_e8f071dc",
        "filename": "/COMMIT_MSG",
        "patchSetId": 22
      },
      "lineNbr": 14,
      "author": {
        "id": 1212597
      },
      "writtenOn": "2017-08-02T18:12:34Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "67bc0ee3_c3f6f7d4",
      "range": {
        "startLine": 14,
        "startChar": 0,
        "endLine": 14,
        "endChar": 11
      },
      "revId": "eb9687209c9efba9fde69645e7447660b7c3efe8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a1bb1843_e4491c20",
        "filename": "base/task_scheduler/scheduler_single_thread_task_runner_manager.cc",
        "patchSetId": 22
      },
      "lineNbr": 101,
      "author": {
        "id": 1001534
      },
      "writtenOn": "2017-08-02T18:38:20Z",
      "side": 1,
      "message": "/* worker */\n\n(we do this for unused params in overrides to indicate to the reader it\u0027s not used anywhere below)",
      "range": {
        "startLine": 101,
        "startChar": 35,
        "endLine": 101,
        "endChar": 41
      },
      "revId": "eb9687209c9efba9fde69645e7447660b7c3efe8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "95f8c876_cb69101f",
        "filename": "base/task_scheduler/scheduler_worker.cc",
        "patchSetId": 22
      },
      "lineNbr": 246,
      "author": {
        "id": 1001534
      },
      "writtenOn": "2017-08-02T18:38:20Z",
      "side": 1,
      "message": "Since Thread::outer_ holds a ref to its SchedulerWorker, the only way to get in ~SchedulerWorker() while there\u0027s an alive Thread is at the very end of ThreadMain when we set outer_ \u003d nullptr, right?\n\nBut at that point that also means that it\u0027s fine for ~SchedulerWorker() to delete its |thread_| object (automatically per unique_ptr member) which will in turn release thread resources so I don\u0027t see why we need to detach?\n\nSo long as we add this comment in ThreadMain:\n\n// Break the ownership circle between SchedulerWorker and Thread.\n// This can result in deleting |this| and as such no more member accesses should\n// be made after this point.\nouter_ \u003d nullptr;",
      "revId": "eb9687209c9efba9fde69645e7447660b7c3efe8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8c3fe855_9889b8b4",
        "filename": "base/task_scheduler/scheduler_worker.cc",
        "patchSetId": 22
      },
      "lineNbr": 248,
      "author": {
        "id": 1003325
      },
      "writtenOn": "2017-08-02T17:45:59Z",
      "side": 1,
      "message": "We\u0027ve got some duplicate checks here. This would be better as\n\nif (join_called_for_testing.IsSet())\n  return;\n\nDCHECK(should_exit_.IsSet())\nthread_-\u003eDetach();",
      "range": {
        "startLine": 247,
        "startChar": 4,
        "endLine": 248,
        "endChar": 42
      },
      "revId": "eb9687209c9efba9fde69645e7447660b7c3efe8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "127067df_ea8daffb",
        "filename": "base/task_scheduler/scheduler_worker.cc",
        "patchSetId": 22
      },
      "lineNbr": 248,
      "author": {
        "id": 1212597
      },
      "writtenOn": "2017-08-02T18:12:34Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8c3fe855_9889b8b4",
      "range": {
        "startLine": 247,
        "startChar": 4,
        "endLine": 248,
        "endChar": 42
      },
      "revId": "eb9687209c9efba9fde69645e7447660b7c3efe8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4829f623_130ec978",
        "filename": "base/task_scheduler/scheduler_worker.cc",
        "patchSetId": 22
      },
      "lineNbr": 256,
      "author": {
        "id": 1001534
      },
      "writtenOn": "2017-08-02T18:38:20Z",
      "side": 1,
      "message": "This comment needs updating (|thread_| is never \"taken away\", i.e. detached, any more)\n\n(in fact, do we even need |thread_lock_| anymore, here, and everywhere else? |thread_| is constant after Start()? so long as everything has an \"happens-after\" relationship with Start() and there\u0027s synchronization around usage of SchedulerWorker, we\u0027re good? happy to keep this change for another CL..)",
      "revId": "eb9687209c9efba9fde69645e7447660b7c3efe8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "66ee1882_ece98ebb",
        "filename": "base/task_scheduler/scheduler_worker.h",
        "patchSetId": 22
      },
      "lineNbr": 68,
      "author": {
        "id": 1003325
      },
      "writtenOn": "2017-08-02T17:45:59Z",
      "side": 1,
      "message": "This can also be Called by |worker|\u0027s thread since there is now a fixed 1:1 correspondence between SchedulerWorkers and threads.",
      "range": {
        "startLine": 68,
        "startChar": 7,
        "endLine": 68,
        "endChar": 43
      },
      "revId": "eb9687209c9efba9fde69645e7447660b7c3efe8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b52ce63b_37db44e6",
        "filename": "base/task_scheduler/scheduler_worker.h",
        "patchSetId": 22
      },
      "lineNbr": 68,
      "author": {
        "id": 1212597
      },
      "writtenOn": "2017-08-02T18:12:34Z",
      "side": 1,
      "message": "WaitForWork doesn\u0027t actually get a |worker| passed in. Is it still correct to reference |worker| here?",
      "parentUuid": "66ee1882_ece98ebb",
      "range": {
        "startLine": 68,
        "startChar": 7,
        "endLine": 68,
        "endChar": 43
      },
      "revId": "eb9687209c9efba9fde69645e7447660b7c3efe8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a288878d_d30ac8ab",
        "filename": "base/task_scheduler/scheduler_worker.h",
        "patchSetId": 22
      },
      "lineNbr": 154,
      "author": {
        "id": 1003325
      },
      "writtenOn": "2017-08-02T17:45:59Z",
      "side": 1,
      "message": "Nit: Remove stray linebreak.",
      "range": {
        "startLine": 152,
        "startChar": 44,
        "endLine": 154,
        "endChar": 1
      },
      "revId": "eb9687209c9efba9fde69645e7447660b7c3efe8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6e063227_0d0d7131",
        "filename": "base/task_scheduler/scheduler_worker.h",
        "patchSetId": 22
      },
      "lineNbr": 154,
      "author": {
        "id": 1212597
      },
      "writtenOn": "2017-08-02T18:12:34Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a288878d_d30ac8ab",
      "range": {
        "startLine": 152,
        "startChar": 44,
        "endLine": 154,
        "endChar": 1
      },
      "revId": "eb9687209c9efba9fde69645e7447660b7c3efe8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ff3a8283_be56d1f5",
        "filename": "base/task_scheduler/scheduler_worker_pool_impl.cc",
        "patchSetId": 22
      },
      "lineNbr": 442,
      "author": {
        "id": 1001534
      },
      "writtenOn": "2017-08-02T18:38:20Z",
      "side": 1,
      "message": "Why isn\u0027t this just logged directly below instead of setting last_get_work_returned_nullptr_ \u003d true and logging on wakeup? Maybe this was special cased because of detach logic but now it seems it could be inlined?",
      "revId": "eb9687209c9efba9fde69645e7447660b7c3efe8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "727ffaf7_2485c107",
        "filename": "base/task_scheduler/scheduler_worker_pool_impl.cc",
        "patchSetId": 22
      },
      "lineNbr": 580,
      "author": {
        "id": 1001534
      },
      "writtenOn": "2017-08-02T18:38:20Z",
      "side": 1,
      "message": "\"The cleanup step (triggered after GetSLeepTimeout() expires) may cause...\"\n\nor actually wait.. is this comment and code even still relevant? This was handling the case where a detached worker would still be on the idle stack (with no backing Thread), but now a cleaned up worker is not on the idle stack anymore so re-adding self to idle stack is unexpected? Or would GetWork() try to add it back to idle stack before it gets nullptr a second time and then decides to Cleanup()?\n\nBut then we can fix that by moving the if (CanCleanup()) Cleanup() logic in GetWork() above AddToIdleWorkersStack? Avoiding insert/remove from idle stack?",
      "range": {
        "startLine": 580,
        "startChar": 5,
        "endLine": 580,
        "endChar": 14
      },
      "revId": "eb9687209c9efba9fde69645e7447660b7c3efe8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "25004f15_3891c19c",
        "filename": "base/task_scheduler/scheduler_worker_pool_impl.h",
        "patchSetId": 22
      },
      "lineNbr": 101,
      "author": {
        "id": 1002897
      },
      "writtenOn": "2017-08-02T16:51:25Z",
      "side": 1,
      "message": "It is invalid to post a task ...",
      "range": {
        "startLine": 101,
        "startChar": 42,
        "endLine": 101,
        "endChar": 69
      },
      "revId": "eb9687209c9efba9fde69645e7447660b7c3efe8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4ef0ae6e_19b5669b",
        "filename": "base/task_scheduler/scheduler_worker_pool_impl.h",
        "patchSetId": 22
      },
      "lineNbr": 101,
      "author": {
        "id": 1212597
      },
      "writtenOn": "2017-08-02T18:12:34Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "25004f15_3891c19c",
      "range": {
        "startLine": 101,
        "startChar": 42,
        "endLine": 101,
        "endChar": 69
      },
      "revId": "eb9687209c9efba9fde69645e7447660b7c3efe8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "06e80477_3fdcaffe",
        "filename": "base/task_scheduler/scheduler_worker_pool_impl_unittest.cc",
        "patchSetId": 22
      },
      "lineNbr": 72,
      "author": {
        "id": 1001534
      },
      "writtenOn": "2017-08-02T18:38:20Z",
      "side": 1,
      "message": "Why is this required now? Add a comment",
      "revId": "eb9687209c9efba9fde69645e7447660b7c3efe8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f624bf6d_33166fe0",
        "filename": "base/task_scheduler/task_scheduler_impl_unittest.cc",
        "patchSetId": 22
      },
      "lineNbr": 209,
      "author": {
        "id": 1001534
      },
      "writtenOn": "2017-08-02T18:38:20Z",
      "side": 1,
      "message": "ditto for this flush? or were the lack of these always a problem?",
      "revId": "eb9687209c9efba9fde69645e7447660b7c3efe8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "17904827_f1443d77",
        "filename": "base/threading/sequenced_worker_pool_unittest.cc",
        "patchSetId": 22
      },
      "lineNbr": 296,
      "author": {
        "id": 1001534
      },
      "writtenOn": "2017-08-02T18:38:20Z",
      "side": 1,
      "message": "ditto for this flush?",
      "revId": "eb9687209c9efba9fde69645e7447660b7c3efe8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}