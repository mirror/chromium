{
  "comments": [
    {
      "key": {
        "uuid": "f26e3294_86d93938",
        "filename": "third_party/zlib/BUILD.gn",
        "patchSetId": 33
      },
      "lineNbr": 74,
      "author": {
        "id": 1145695
      },
      "writtenOn": "2017-12-07T19:42:23Z",
      "side": 1,
      "message": "Maybe this whole block could be guarded under an if (!is_ios \u0026\u0026 intel \u0026\u0026 arm).",
      "revId": "0b951c067e94e21b51d7d1267218cf2e0bad61c3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "994ef410_246337cf",
        "filename": "third_party/zlib/BUILD.gn",
        "patchSetId": 33
      },
      "lineNbr": 74,
      "author": {
        "id": 1109754
      },
      "writtenOn": "2017-12-08T08:29:31Z",
      "side": 1,
      "message": "Maybe, having the extra level of if { } does detract from readability for me ...",
      "parentUuid": "f26e3294_86d93938",
      "revId": "0b951c067e94e21b51d7d1267218cf2e0bad61c3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "376ed5c5_c2f8ba69",
        "filename": "third_party/zlib/BUILD.gn",
        "patchSetId": 33
      },
      "lineNbr": 77,
      "author": {
        "id": 1145695
      },
      "writtenOn": "2017-12-07T19:42:23Z",
      "side": 1,
      "message": "As that would allow to set the sources only once.",
      "revId": "0b951c067e94e21b51d7d1267218cf2e0bad61c3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ba21abce_f656247a",
        "filename": "third_party/zlib/BUILD.gn",
        "patchSetId": 33
      },
      "lineNbr": 77,
      "author": {
        "id": 1109754
      },
      "writtenOn": "2017-12-08T08:29:31Z",
      "side": 1,
      "message": "... but by following the adler32 build config (it has 2 sets of sources too), I create repetition in the config file, which I find is easier to follow / grok.\n\nAlternately, another source_set could be defined and used to inject the sources as a deps in cases where the sources list grows too large by some metric.  For a small sources list, as here, I\u0027m not too concerned about it.",
      "parentUuid": "376ed5c5_c2f8ba69",
      "revId": "0b951c067e94e21b51d7d1267218cf2e0bad61c3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "342a193a_9dbc8660",
        "filename": "third_party/zlib/BUILD.gn",
        "patchSetId": 33
      },
      "lineNbr": 103,
      "author": {
        "id": 1145695
      },
      "writtenOn": "2017-12-07T19:42:23Z",
      "side": 1,
      "message": "I looked in the code base and optimize_speed was only used in v8, but *not* for ARM.\n\nGenerally -O3 will generate a bigger binary.\n\nWhat would be the performance gain of using it?",
      "revId": "0b951c067e94e21b51d7d1267218cf2e0bad61c3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4065208a_8bf20610",
        "filename": "third_party/zlib/BUILD.gn",
        "patchSetId": 33
      },
      "lineNbr": 103,
      "author": {
        "id": 1109754
      },
      "writtenOn": "2017-12-08T08:29:31Z",
      "side": 1,
      "message": "Release chrome android uses -Oz, and it is applied to all targets, unless they override.  Using -O3 here, we get smaller+faster code relative -Oz.",
      "parentUuid": "342a193a_9dbc8660",
      "revId": "0b951c067e94e21b51d7d1267218cf2e0bad61c3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "51cfd782_4f6a9f25",
        "filename": "third_party/zlib/contrib/optimizations/inffast_chunk.c",
        "patchSetId": 33
      },
      "lineNbr": 55,
      "author": {
        "id": 1189229
      },
      "writtenOn": "2017-12-07T21:20:27Z",
      "side": 1,
      "message": "I\u0027m curious why the trailing underscore.\nI\u0027m used to the Chromium style guide which is different from zlib so when I see this my gut reaction is that it is a member variable. But maybe zlib uses this for internal functions?",
      "range": {
        "startLine": 55,
        "startChar": 37,
        "endLine": 55,
        "endChar": 38
      },
      "revId": "0b951c067e94e21b51d7d1267218cf2e0bad61c3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "585eb179_e747313e",
        "filename": "third_party/zlib/contrib/optimizations/inffast_chunk.c",
        "patchSetId": 33
      },
      "lineNbr": 55,
      "author": {
        "id": 1109754
      },
      "writtenOn": "2017-12-08T08:29:31Z",
      "side": 1,
      "message": "The _ is a constant reminder to me that it\u0027s a ZLIB_INTERNAL, and that it must be added to names.h therefore. \n\nzlib use ZLIB_INTERNAL for internal functions.  And so in review, if we see ZLIB_INTERNAL, please check that is has also been added to names.h, ok?",
      "parentUuid": "51cfd782_4f6a9f25",
      "range": {
        "startLine": 55,
        "startChar": 37,
        "endLine": 55,
        "endChar": 38
      },
      "revId": "0b951c067e94e21b51d7d1267218cf2e0bad61c3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3f4e22d0_d792498d",
        "filename": "third_party/zlib/contrib/optimizations/inffast_chunk.h",
        "patchSetId": 33
      },
      "lineNbr": 12,
      "author": {
        "id": 1189229
      },
      "writtenOn": "2017-12-07T21:20:27Z",
      "side": 1,
      "message": "ACK",
      "range": {
        "startLine": 12,
        "startChar": 3,
        "endLine": 12,
        "endChar": 15
      },
      "revId": "0b951c067e94e21b51d7d1267218cf2e0bad61c3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a6403def_b5580ea1",
        "filename": "third_party/zlib/contrib/optimizations/inffast_chunk.h",
        "patchSetId": 33
      },
      "lineNbr": 12,
      "author": {
        "id": 1109754
      },
      "writtenOn": "2017-12-08T08:29:31Z",
      "side": 1,
      "message": "Nod.",
      "parentUuid": "3f4e22d0_d792498d",
      "range": {
        "startLine": 12,
        "startChar": 3,
        "endLine": 12,
        "endChar": 15
      },
      "revId": "0b951c067e94e21b51d7d1267218cf2e0bad61c3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dc2a035b_343d9ff8",
        "filename": "third_party/zlib/contrib/optimizations/inffast_chunk.h",
        "patchSetId": 33
      },
      "lineNbr": 15,
      "author": {
        "id": 1145695
      },
      "writtenOn": "2017-12-07T20:16:46Z",
      "side": 1,
      "message": "I like \u0027chunky\u0027 better.\n\nThe original patch I wrote to handle the InflateBack() corner case was actually called \u0027inflate_fast_loose\u0027 IIRC.",
      "revId": "0b951c067e94e21b51d7d1267218cf2e0bad61c3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "87c2e006_08aa87ab",
        "filename": "third_party/zlib/contrib/optimizations/inffast_chunk.h",
        "patchSetId": 33
      },
      "lineNbr": 15,
      "author": {
        "id": 1109754
      },
      "writtenOn": "2017-12-08T08:29:31Z",
      "side": 1,
      "message": "I prefer chunk ¯\\(ツ)/¯  I don\u0027t speak of this code as the \"fast chunky\" contrib when speaking to other engineers about it.  I instead use the term \"fast chunk\" contrib (or the \"chunk copy contrib\").",
      "parentUuid": "dc2a035b_343d9ff8",
      "revId": "0b951c067e94e21b51d7d1267218cf2e0bad61c3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "984efc7f_0cea72ac",
        "filename": "third_party/zlib/contrib/optimizations/inflate.c",
        "patchSetId": 33
      },
      "lineNbr": 1062,
      "author": {
        "id": 1145695
      },
      "writtenOn": "2017-12-07T19:53:38Z",
      "side": 1,
      "message": "It may be recommended to verify the availability of SSE2 before calling the SIMD optimized version (and fallback to the non-accelerated version accordingly, similar to the approach implemented for InflateBack).\n\nNot a concern for Chromium per si, as the minimal requirements for Intel is SSE2... but maybe for other libs that rely on our zlib (e.g. pdfium, skia, etc).",
      "revId": "0b951c067e94e21b51d7d1267218cf2e0bad61c3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e2f95c33_d499e983",
        "filename": "third_party/zlib/contrib/optimizations/inflate.c",
        "patchSetId": 33
      },
      "lineNbr": 1062,
      "author": {
        "id": 1109754
      },
      "writtenOn": "2017-12-08T08:29:31Z",
      "side": 1,
      "message": "Not a concern for chrome, agree.  It might be an issue if upstreaming, or it might not, but it can be just noted that this contrib depends on SSE2 (2001).  \n\nIf that becomes an issue upstream, eg., they want to add support for SSE machines (1998), then upstream can fix that I expect.",
      "parentUuid": "984efc7f_0cea72ac",
      "revId": "0b951c067e94e21b51d7d1267218cf2e0bad61c3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}