{
  "comments": [
    {
      "key": {
        "uuid": "947c9b2c_b0f69c72",
        "filename": "chrome/browser/consent_auditor/consent_auditor_factory.cc",
        "patchSetId": 9
      },
      "lineNbr": 42,
      "author": {
        "id": 1116027
      },
      "writtenOn": "2017-11-08T14:05:37Z",
      "side": 1,
      "message": "This is the wrong location to make this test. This method should be overridden only if GetForProfile(profile) needs to return non-null for a off-the-record profile. The default implementation is:\n\n  content::BrowserContext*\n  BrowserContextKeyedServiceFactory::GetBrowserContextToUse(\n      content::BrowserContext* context) const {\n    // TODO(crbug.com/701326): This DCHECK should be moved to GetContextToUse().\n    DCHECK_CALLED_ON_VALID_SEQUENCE(sequence_checker_);\n\n    // Safe default for Incognito mode: no service.\n    if (context-\u003eIsOffTheRecord())\n      return nullptr;\n\n    return context;\n  }\n\nIf you want to DCHECK that no-one try to access the ConsentAuditor from an off-the-record profile, the correct location is ConsentAuditorFactory::GetForProfile():\n\n  // static\n  consent_auditor::ConsentAuditor* ConsentAuditorFactory::GetForProfile(\n      Profile* profile) {\n    // Recording local consents in Incognito is not useful, as the record would\n    // soon disappear. Consents tied to the user\u0027s Google account should retrieve\n    // account information from the original profile. In both cases, there is no\n    // reason to support Incognito.\n    DCHECK(!profile-\u003eIsOffTheRecord());\n    return static_cast\u003cconsent_auditor::ConsentAuditor*\u003e(\n        GetInstance()-\u003eGetServiceForBrowserContext(profile, true));\n  }",
      "revId": "d83c16ba7e7b342863ec4ae4d38921db4f2c6171",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "959726cd_03a02e28",
        "filename": "chrome/browser/consent_auditor/consent_auditor_factory.cc",
        "patchSetId": 9
      },
      "lineNbr": 42,
      "author": {
        "id": 1118331
      },
      "writtenOn": "2017-11-09T15:31:20Z",
      "side": 1,
      "message": "Done. Thanks for catching this. I was trying to mimic what I saw other factories doing, but apparently I misunderstood.",
      "parentUuid": "947c9b2c_b0f69c72",
      "revId": "d83c16ba7e7b342863ec4ae4d38921db4f2c6171",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "50542871_0eef777b",
        "filename": "components/consent_auditor/consent_auditor.cc",
        "patchSetId": 9
      },
      "lineNbr": 32,
      "author": {
        "id": 1183839
      },
      "writtenOn": "2017-11-08T13:51:24Z",
      "side": 1,
      "message": "I\u0027m not sure if it would be cleaner to pass the product_version from the factory? \nThat way we also don\u0027t need the set_product_version_for_testing method?",
      "revId": "d83c16ba7e7b342863ec4ae4d38921db4f2c6171",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "895b045a_bac0b9fc",
        "filename": "components/consent_auditor/consent_auditor.cc",
        "patchSetId": 9
      },
      "lineNbr": 32,
      "author": {
        "id": 1118331
      },
      "writtenOn": "2017-11-09T15:31:20Z",
      "side": 1,
      "message": "I wanted to take advantage of the fact that product version lives in //components too, so this piece of information doesn\u0027t have to make a roundtrip //components -\u003e //chrome -\u003e //components.\n\nBut I think you\u0027re right, it\u0027s a parameter like the other two. Let\u0027s do that.",
      "parentUuid": "50542871_0eef777b",
      "revId": "d83c16ba7e7b342863ec4ae4d38921db4f2c6171",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e40f36b2_d300b038",
        "filename": "components/consent_auditor/consent_auditor.cc",
        "patchSetId": 9
      },
      "lineNbr": 57,
      "author": {
        "id": 1183839
      },
      "writtenOn": "2017-11-08T13:51:24Z",
      "side": 1,
      "message": "std::make_unique is allowed now :) https://crbug.com/755727\n\nBut I think with the new api you can do the following:\n\nbase::DictionaryValue record;\nrecord.setKey(kLocalBla, base::Value(description_text));\nconsents-\u003esetKey(feature, std::move(record));\n\n(comment above base::Value https://cs.chromium.org/chromium/src/base/values.h)",
      "revId": "d83c16ba7e7b342863ec4ae4d38921db4f2c6171",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e83054bd_237c203b",
        "filename": "components/consent_auditor/consent_auditor.cc",
        "patchSetId": 9
      },
      "lineNbr": 57,
      "author": {
        "id": 1118331
      },
      "writtenOn": "2017-11-09T15:31:20Z",
      "side": 1,
      "message": "Done. I feel like in those movies when someone is frozen and wakes up in the future...",
      "parentUuid": "e40f36b2_d300b038",
      "revId": "d83c16ba7e7b342863ec4ae4d38921db4f2c6171",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}