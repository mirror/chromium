{
  "comments": [
    {
      "key": {
        "uuid": "48ade100_24e8526e",
        "filename": "content/browser/cookie_store/cookie_store_impl.cc",
        "patchSetId": 18
      },
      "lineNbr": 64,
      "author": {
        "id": 1110029
      },
      "writtenOn": "2017-08-11T17:11:45Z",
      "side": 1,
      "message": "nit: probably a slightly more descriptive message might be good? (also below)",
      "range": {
        "startLine": 64,
        "startChar": 27,
        "endLine": 64,
        "endChar": 45
      },
      "revId": "13f517c4e5c850575e4587927079bfc880e1ddc8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "39d5729a_0de13263",
        "filename": "content/browser/cookie_store/cookie_store_impl.cc",
        "patchSetId": 18
      },
      "lineNbr": 64,
      "author": {
        "id": 1163599
      },
      "writtenOn": "2017-08-11T19:16:02Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "48ade100_24e8526e",
      "range": {
        "startLine": 64,
        "startChar": 27,
        "endLine": 64,
        "endChar": 45
      },
      "revId": "13f517c4e5c850575e4587927079bfc880e1ddc8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "abaaece0_9fbdc6bb",
        "filename": "content/browser/cookie_store/cookie_store_impl.cc",
        "patchSetId": 18
      },
      "lineNbr": 107,
      "author": {
        "id": 1110029
      },
      "writtenOn": "2017-08-11T17:11:45Z",
      "side": 1,
      "message": "I was a bit confused what the point of these two lines was, but I imagine it is to shut-up the compiler complaining about unused private members (and in the future those checks will actually use those two fields?)",
      "range": {
        "startLine": 106,
        "startChar": 2,
        "endLine": 107,
        "endChar": 27
      },
      "revId": "13f517c4e5c850575e4587927079bfc880e1ddc8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d064402e_2a2bbd50",
        "filename": "content/browser/cookie_store/cookie_store_impl.cc",
        "patchSetId": 18
      },
      "lineNbr": 107,
      "author": {
        "id": 1163599
      },
      "writtenOn": "2017-08-11T19:16:02Z",
      "side": 1,
      "message": "Yup.\n\nI\u0027d like to land the filling in separate CLs with extensive layout tests.",
      "parentUuid": "abaaece0_9fbdc6bb",
      "range": {
        "startLine": 106,
        "startChar": 2,
        "endLine": 107,
        "endChar": 27
      },
      "revId": "13f517c4e5c850575e4587927079bfc880e1ddc8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b3af4b40_6948de5b",
        "filename": "content/browser/cookie_store/cookie_store_impl.cc",
        "patchSetId": 18
      },
      "lineNbr": 140,
      "author": {
        "id": 1110029
      },
      "writtenOn": "2017-08-11T17:11:45Z",
      "side": 1,
      "message": "the CannonicalCookie constructor mentions \"This constructor does not validate or canonicalize their inputs\". I\u0027m not sure what validation or canonicalization might need to be done, but your code here doesn\u0027t seem to do much of either. Is that correct/safe?",
      "revId": "13f517c4e5c850575e4587927079bfc880e1ddc8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d31348d2_f7833bd5",
        "filename": "content/browser/cookie_store/cookie_store_impl.cc",
        "patchSetId": 18
      },
      "lineNbr": 140,
      "author": {
        "id": 1163599
      },
      "writtenOn": "2017-08-11T19:16:02Z",
      "side": 1,
      "message": "Nope :)\n\nI was hoping to add the checks in separate CLs, to avoid bloating this CL. Do you think that\u0027s acceptable?",
      "parentUuid": "b3af4b40_6948de5b",
      "revId": "13f517c4e5c850575e4587927079bfc880e1ddc8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c619fe33_f8aec3fc",
        "filename": "content/browser/cookie_store/cookie_store_impl.cc",
        "patchSetId": 18
      },
      "lineNbr": 140,
      "author": {
        "id": 1110029
      },
      "writtenOn": "2017-08-11T21:35:02Z",
      "side": 1,
      "message": "Yeah, sounds good to me. Maybe add a TODO for that (unless the above TODO already covers that? Again, not sure what canonicalization is done to a cookie).",
      "parentUuid": "d31348d2_f7833bd5",
      "revId": "13f517c4e5c850575e4587927079bfc880e1ddc8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1dc1811a_be0bb661",
        "filename": "third_party/WebKit/Source/modules/cookie_store/CookieStore.cpp",
        "patchSetId": 18
      },
      "lineNbr": 95,
      "author": {
        "id": 1110029
      },
      "writtenOn": "2017-08-11T17:11:45Z",
      "side": 1,
      "message": "really? I thought the generated code for dictionaries are pretty straight-forward classes with getters/setters, and nothing actually v8 specific (until ToV8Impl is called)? But I could of course be mistaken.",
      "revId": "13f517c4e5c850575e4587927079bfc880e1ddc8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9f81550d_f2ec4b98",
        "filename": "third_party/WebKit/Source/modules/cookie_store/CookieStore.cpp",
        "patchSetId": 18
      },
      "lineNbr": 95,
      "author": {
        "id": 1163599
      },
      "writtenOn": "2017-08-11T19:16:02Z",
      "side": 1,
      "message": "Done.\n\nThank you very much for asking! My old code that used V8 directly needed the scope. (crashed without it) The approach you suggested doesn\u0027t need the scope.",
      "parentUuid": "1dc1811a_be0bb661",
      "revId": "13f517c4e5c850575e4587927079bfc880e1ddc8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3279bd35_7ed3fe87",
        "filename": "third_party/WebKit/Source/modules/cookie_store/CookieStore.cpp",
        "patchSetId": 18
      },
      "lineNbr": 110,
      "author": {
        "id": 1110029
      },
      "writtenOn": "2017-08-11T17:11:45Z",
      "side": 1,
      "message": "nit: Function declaration order should match function definition order.",
      "revId": "13f517c4e5c850575e4587927079bfc880e1ddc8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2f3acf20_f8202238",
        "filename": "third_party/WebKit/Source/modules/cookie_store/CookieStore.cpp",
        "patchSetId": 18
      },
      "lineNbr": 110,
      "author": {
        "id": 1163599
      },
      "writtenOn": "2017-08-11T19:16:02Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3279bd35_7ed3fe87",
      "revId": "13f517c4e5c850575e4587927079bfc880e1ddc8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7e089f43_4acbd27a",
        "filename": "third_party/WebKit/Source/modules/cookie_store/CookieStore.cpp",
        "patchSetId": 18
      },
      "lineNbr": 113,
      "author": {
        "id": 1110029
      },
      "writtenOn": "2017-08-11T17:11:45Z",
      "side": 1,
      "message": "neat, I had no idea you could write it like that (also there doesn\u0027t seem to be any existing code using the same code pattern...). I would have written this as \n  auto backend_options \u003d mojom::blink::CookieStoreGetOptions::New()\nbut what you have seems fine too...",
      "revId": "13f517c4e5c850575e4587927079bfc880e1ddc8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "49492d98_3c8b0593",
        "filename": "third_party/WebKit/Source/modules/cookie_store/CookieStore.cpp",
        "patchSetId": 18
      },
      "lineNbr": 190,
      "author": {
        "id": 1110029
      },
      "writtenOn": "2017-08-11T17:11:45Z",
      "side": 1,
      "message": "the mojom Set method is defined with non-nullable strings, yet the idl set method is defined with nullable strings. So this could cause DCHECK (or renderer kill on validation failure in the browser) if null is actually passed to set(), since you don\u0027t actually deal with null strings.",
      "revId": "13f517c4e5c850575e4587927079bfc880e1ddc8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e55d2cc9_57dabe39",
        "filename": "third_party/WebKit/Source/modules/cookie_store/CookieStore.cpp",
        "patchSetId": 18
      },
      "lineNbr": 190,
      "author": {
        "id": 1163599
      },
      "writtenOn": "2017-08-11T19:16:02Z",
      "side": 1,
      "message": "Done.\n\nThank you for your patience and persistence with this issue :)\n\nI removed all the nullable craziness for now. I think the API should be fine without it. If they\u0027re necessary, I can add them back in a separate patch, together with test coverage.",
      "parentUuid": "49492d98_3c8b0593",
      "revId": "13f517c4e5c850575e4587927079bfc880e1ddc8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f562a540_a12f51e5",
        "filename": "third_party/WebKit/Source/modules/cookie_store/CookieStore.cpp",
        "patchSetId": 18
      },
      "lineNbr": 190,
      "author": {
        "id": 1110029
      },
      "writtenOn": "2017-08-11T21:35:02Z",
      "side": 1,
      "message": "name and value still seem to be nullable (and since they are optional as well, could still end up as null WTF::Strings here even if they wouldn\u0027t be nullable).\nOf course proper test coverage in a follow up CL should easily find such issues.",
      "parentUuid": "e55d2cc9_57dabe39",
      "revId": "13f517c4e5c850575e4587927079bfc880e1ddc8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "11e92947_7d1afc9e",
        "filename": "third_party/WebKit/Source/modules/cookie_store/CookieStore.cpp",
        "patchSetId": 18
      },
      "lineNbr": 215,
      "author": {
        "id": 1110029
      },
      "writtenOn": "2017-08-11T17:11:45Z",
      "side": 1,
      "message": "nit: since the IDL defines domain as both optional and nullable, I think you can have hasDomain() return true, but still get a null string (which would then cause mojo validation errors, since the mojo options don\u0027t have domain defined as nullable).",
      "revId": "13f517c4e5c850575e4587927079bfc880e1ddc8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a147c696_461ad105",
        "filename": "third_party/WebKit/Source/modules/cookie_store/CookieStore.cpp",
        "patchSetId": 18
      },
      "lineNbr": 215,
      "author": {
        "id": 1163599
      },
      "writtenOn": "2017-08-11T19:16:02Z",
      "side": 1,
      "message": "Done.\n\nDomain isn\u0027t nullable anymore.",
      "parentUuid": "11e92947_7d1afc9e",
      "revId": "13f517c4e5c850575e4587927079bfc880e1ddc8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3af405fe_6147e601",
        "filename": "third_party/WebKit/Source/modules/cookie_store/CookieStore.h",
        "patchSetId": 18
      },
      "lineNbr": 74,
      "author": {
        "id": 1110029
      },
      "writtenOn": "2017-08-11T17:11:45Z",
      "side": 1,
      "message": "unfinished comment?",
      "revId": "13f517c4e5c850575e4587927079bfc880e1ddc8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "259055ab_57794851",
        "filename": "third_party/WebKit/Source/modules/cookie_store/CookieStore.h",
        "patchSetId": 18
      },
      "lineNbr": 74,
      "author": {
        "id": 1163599
      },
      "writtenOn": "2017-08-11T19:16:02Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3af405fe_6147e601",
      "revId": "13f517c4e5c850575e4587927079bfc880e1ddc8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a634d1f_fc35c641",
        "filename": "third_party/WebKit/Source/modules/cookie_store/CookieStore.h",
        "patchSetId": 18
      },
      "lineNbr": 74,
      "author": {
        "id": 1110029
      },
      "writtenOn": "2017-08-11T21:35:02Z",
      "side": 1,
      "message": "The latest patch set I see still has the same unfinished comment?",
      "parentUuid": "259055ab_57794851",
      "revId": "13f517c4e5c850575e4587927079bfc880e1ddc8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "22f554ea_d51c2fd4",
        "filename": "third_party/WebKit/Source/modules/cookie_store/CookieStore.h",
        "patchSetId": 18
      },
      "lineNbr": 79,
      "author": {
        "id": 1110029
      },
      "writtenOn": "2017-08-11T17:11:45Z",
      "side": 1,
      "message": "nit: these two methods cold just be file-scoped static/anonymous namespaced methods in the cpp file",
      "range": {
        "startLine": 79,
        "startChar": 0,
        "endLine": 79,
        "endChar": 58
      },
      "revId": "13f517c4e5c850575e4587927079bfc880e1ddc8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "13630845_00d87334",
        "filename": "third_party/WebKit/Source/modules/cookie_store/CookieStore.h",
        "patchSetId": 18
      },
      "lineNbr": 79,
      "author": {
        "id": 1163599
      },
      "writtenOn": "2017-08-11T19:16:02Z",
      "side": 1,
      "message": "Done.",
      "parentUuid": "22f554ea_d51c2fd4",
      "range": {
        "startLine": 79,
        "startChar": 0,
        "endLine": 79,
        "endChar": 58
      },
      "revId": "13f517c4e5c850575e4587927079bfc880e1ddc8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}