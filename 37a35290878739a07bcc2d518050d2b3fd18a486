{
  "comments": [
    {
      "key": {
        "uuid": "f639f925_40019c7f",
        "filename": "third_party/WebKit/LayoutTests/fast/css/sticky/sticky-input-box-position.html",
        "patchSetId": 6
      },
      "lineNbr": 28,
      "author": {
        "id": 1002258
      },
      "writtenOn": "2017-07-24T02:24:32Z",
      "side": 1,
      "message": "Could you use assert API?\nFor example:\nassert_not_equals(window.eventSender, \u0027This test requires eventSender\u0027);",
      "revId": "37a35290878739a07bcc2d518050d2b3fd18a486",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "36152db5_3d1b7820",
        "filename": "third_party/WebKit/LayoutTests/fast/css/sticky/sticky-input-box-position.html",
        "patchSetId": 6
      },
      "lineNbr": 28,
      "author": {
        "id": 1177980
      },
      "writtenOn": "2017-07-24T15:55:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f639f925_40019c7f",
      "revId": "37a35290878739a07bcc2d518050d2b3fd18a486",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "15361b4e_273a1dda",
        "filename": "third_party/WebKit/Source/core/editing/FrameSelection.cpp",
        "patchSetId": 6
      },
      "lineNbr": 959,
      "author": {
        "id": 1116039
      },
      "writtenOn": "2017-07-20T23:15:16Z",
      "side": 1,
      "message": "In addition to Ojan\u0027s comment, it would be good to understand why the existing call to UpdateStyleAndLayoutIgnorePendingStylesheets isn\u0027t sufficient.",
      "range": {
        "startLine": 959,
        "startChar": 16,
        "endLine": 959,
        "endChar": 51
      },
      "revId": "37a35290878739a07bcc2d518050d2b3fd18a486",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e9e9fae5_3b76140f",
        "filename": "third_party/WebKit/Source/core/editing/FrameSelection.cpp",
        "patchSetId": 6
      },
      "lineNbr": 959,
      "author": {
        "id": 1212214
      },
      "writtenOn": "2017-07-20T23:56:09Z",
      "side": 1,
      "message": "Necessary information for position:sticky[0] elements is computed during compositing inputs update in LayoutBoxModelObject::UpdateStickyPositionConstraints. Since sticky can shift rects, compositing inputs must be clean before asking any location-based questions of position:sticky rects or anything contained by them.\n\nEnsurePaintLocationDataValidForNode checks if a given node is either sticky or in a sticky subtree, and if so it makes sure that compositing inputs are clean. Normally we would just replace the original call to UpdateStyleAndLayoutIgnorePendingStylesheets at line 944, but EnsurePaintLocationDataValidForNode needs to have a Node* to operate on to do the sticky subtree check (just blindly doing compositing inputs clean on any text input would be too expensive.) \n\nWe\u0027re not familiar with this \u0027VisibleSelection\u0027 concept, so for now we are attempting to use the start.AnchorNode() which seems to work for basic tests. If there is a better Node (or set of Nodes) to check please let us know :).\n\n[0]: https://developer.mozilla.org/en/docs/Web/CSS/position#Sticky_positioning",
      "parentUuid": "15361b4e_273a1dda",
      "range": {
        "startLine": 959,
        "startChar": 16,
        "endLine": 959,
        "endChar": 51
      },
      "revId": "37a35290878739a07bcc2d518050d2b3fd18a486",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6084a19c_b29fc024",
        "filename": "third_party/WebKit/Source/core/editing/FrameSelection.cpp",
        "patchSetId": 6
      },
      "lineNbr": 959,
      "author": {
        "id": 1116039
      },
      "writtenOn": "2017-07-21T17:33:03Z",
      "side": 1,
      "message": "\u003e (just blindly doing compositing inputs clean on any text input would be too expensive.) \n\nAre you sure about this?  We\u0027re already doing style and layout clean, I\u0027d be surprised that the compositing update adds that much overhead.\n\n\u003e We\u0027re not familiar with this \u0027VisibleSelection\u0027 concept, so for now we are attempting to use the start.AnchorNode() which seems to work for basic tests. If there is a better Node (or set of Nodes) to check please let us know :).\n\nSomeone from the editing team should answer this.  +yosin, xiaochengh",
      "parentUuid": "e9e9fae5_3b76140f",
      "range": {
        "startLine": 959,
        "startChar": 16,
        "endLine": 959,
        "endChar": 51
      },
      "revId": "37a35290878739a07bcc2d518050d2b3fd18a486",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c1322708_f0f27059",
        "filename": "third_party/WebKit/Source/core/editing/FrameSelection.cpp",
        "patchSetId": 6
      },
      "lineNbr": 959,
      "author": {
        "id": 1212214
      },
      "writtenOn": "2017-07-21T17:44:21Z",
      "side": 1,
      "message": "\u003e \u003e (just blindly doing compositing inputs clean on any text input would be too expensive.) \n\u003e \n\u003e Are you sure about this?  We\u0027re already doing style and layout clean, I\u0027d be surprised that the compositing update adds that much overhead.\n\nIt\u0027s possible that just doing the compositing input step isn\u0027t too expensive - we haven\u0027t measured that sub-problem. Doing full compositing was definitely too expensive, see http://crbug.com/687589 which was a serious performance regression when I tried to avoid predicating the additional compositing on the element being position:sticky.",
      "parentUuid": "6084a19c_b29fc024",
      "range": {
        "startLine": 959,
        "startChar": 16,
        "endLine": 959,
        "endChar": 51
      },
      "revId": "37a35290878739a07bcc2d518050d2b3fd18a486",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1634273e_4e0ae427",
        "filename": "third_party/WebKit/Source/core/editing/FrameSelection.cpp",
        "patchSetId": 6
      },
      "lineNbr": 959,
      "author": {
        "id": 1144165
      },
      "writtenOn": "2017-07-21T18:47:52Z",
      "side": 1,
      "message": "Regarding VisibleSelection, using start.AnchorNode() is good enough (though it doesn\u0027t handle all cases as mentioned in the FIXME above).",
      "parentUuid": "c1322708_f0f27059",
      "range": {
        "startLine": 959,
        "startChar": 16,
        "endLine": 959,
        "endChar": 51
      },
      "revId": "37a35290878739a07bcc2d518050d2b3fd18a486",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "19460603_866c3a30",
        "filename": "third_party/WebKit/Source/core/editing/FrameSelection.cpp",
        "patchSetId": 6
      },
      "lineNbr": 959,
      "author": {
        "id": 1002258
      },
      "writtenOn": "2017-07-24T02:24:32Z",
      "side": 1,
      "message": "+1 for xiachengh@, VisibleSelection is basically having visible \nstart/end positions.",
      "parentUuid": "1634273e_4e0ae427",
      "range": {
        "startLine": 959,
        "startChar": 16,
        "endLine": 959,
        "endChar": 51
      },
      "revId": "37a35290878739a07bcc2d518050d2b3fd18a486",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "041ffd87_704ea7ae",
        "filename": "third_party/WebKit/Source/core/editing/FrameSelection.cpp",
        "patchSetId": 6
      },
      "lineNbr": 959,
      "author": {
        "id": 1177980
      },
      "writtenOn": "2017-07-24T15:55:55Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "19460603_866c3a30",
      "range": {
        "startLine": 959,
        "startChar": 16,
        "endLine": 959,
        "endChar": 51
      },
      "revId": "37a35290878739a07bcc2d518050d2b3fd18a486",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}