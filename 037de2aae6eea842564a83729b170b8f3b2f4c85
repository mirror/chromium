{
  "comments": [
    {
      "key": {
        "uuid": "68e27ccf_b4bdb5ab",
        "filename": "cc/animation/transform_operation.cc",
        "patchSetId": 2
      },
      "lineNbr": 152,
      "author": {
        "id": 1213279
      },
      "writtenOn": "2017-07-26T14:16:56Z",
      "side": 1,
      "message": "What about incorporating the tolerance here too?",
      "revId": "037de2aae6eea842564a83729b170b8f3b2f4c85",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d6f30814_0536f862",
        "filename": "cc/animation/transform_operation.cc",
        "patchSetId": 2
      },
      "lineNbr": 152,
      "author": {
        "id": 1000537
      },
      "writtenOn": "2017-07-26T14:32:35Z",
      "side": 1,
      "message": "The transform class has its own notion of approximate equality (it treats some components differently than others). Also the transform operation matrix class is not particularly useful in the transition case, which is the main purpose of this function, so I\u0027ve not exposed these two tolerances.",
      "parentUuid": "68e27ccf_b4bdb5ab",
      "revId": "037de2aae6eea842564a83729b170b8f3b2f4c85",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "47bb8fe8_f0baf333",
        "filename": "cc/animation/transform_operation.cc",
        "patchSetId": 2
      },
      "lineNbr": 152,
      "author": {
        "id": 1213279
      },
      "writtenOn": "2017-07-26T14:51:26Z",
      "side": 1,
      "message": "Yep, I have seen. I was just concerned that somebody could call this function with 0 tolerance to check if something is perfectly equal and it would return true even though the matrix is a little bit off. Maybe expose the tolerance of gfx::Transform::ApproximatelyEqual and loosen the tolerance for the translation component? Or at least make a note or a TODO here? I will not press hard on this though.",
      "parentUuid": "d6f30814_0536f862",
      "revId": "037de2aae6eea842564a83729b170b8f3b2f4c85",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1ce09fde_cfc53ca3",
        "filename": "cc/animation/transform_operation.cc",
        "patchSetId": 2
      },
      "lineNbr": 152,
      "author": {
        "id": 1000537
      },
      "writtenOn": "2017-07-26T15:27:14Z",
      "side": 1,
      "message": "I\u0027ve changed the code to check exact matrix equality when tolerance is zero and added a TODO.",
      "parentUuid": "47bb8fe8_f0baf333",
      "revId": "037de2aae6eea842564a83729b170b8f3b2f4c85",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c66bf72b_f86db6dd",
        "filename": "cc/animation/transform_operation.cc",
        "patchSetId": 2
      },
      "lineNbr": 152,
      "author": {
        "id": 1213279
      },
      "writtenOn": "2017-07-26T15:33:32Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "1ce09fde_cfc53ca3",
      "revId": "037de2aae6eea842564a83729b170b8f3b2f4c85",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "08656ef4_c4c14f0c",
        "filename": "cc/animation/transform_operations_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 1599,
      "author": {
        "id": 1117479
      },
      "writtenOn": "2017-07-26T14:13:04Z",
      "side": 1,
      "message": "Not advocating for it, but I wonder if, to keep the EXPECT_EQ(arg1, arg2) verbosity, you could use a matcher and EXPECT_THAT().  I\u0027ve personally never tried and it\u0027s probably too much work.",
      "revId": "037de2aae6eea842564a83729b170b8f3b2f4c85",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "90a21946_3ba28811",
        "filename": "cc/animation/transform_operations_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 1599,
      "author": {
        "id": 1000537
      },
      "writtenOn": "2017-07-26T14:34:14Z",
      "side": 1,
      "message": "This seems clearer, but maybe I don\u0027t understand your suggestion. If you\u0027d like me to move to this approach, could you please give a more detailed snippet?",
      "parentUuid": "08656ef4_c4c14f0c",
      "revId": "037de2aae6eea842564a83729b170b8f3b2f4c85",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "64d07b2b_d032b48b",
        "filename": "cc/animation/transform_operations_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 1599,
      "author": {
        "id": 1117479
      },
      "writtenOn": "2017-07-26T14:45:53Z",
      "side": 1,
      "message": "The suggestion is just to try and maintain the EXPECT(a, b) format, so that if there\u0027s a failure, you can see both values.  It\u0027s not going to make the world a better place.\n\nI *think* this can be done with a custom matcher, courtesy of gmock, but I\u0027ve never done it.  Just wanted to point out it\u0027s a possibility.",
      "parentUuid": "90a21946_3ba28811",
      "revId": "037de2aae6eea842564a83729b170b8f3b2f4c85",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6c211f8e_ec534fc3",
        "filename": "cc/animation/transform_operations_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 1599,
      "author": {
        "id": 1000537
      },
      "writtenOn": "2017-07-26T15:27:14Z",
      "side": 1,
      "message": "Cool, I will read more on it. It\u0027s new to me and does seem neat.",
      "parentUuid": "64d07b2b_d032b48b",
      "revId": "037de2aae6eea842564a83729b170b8f3b2f4c85",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "da19ac8e_a575fa27",
        "filename": "cc/base/math_util.h",
        "patchSetId": 2
      },
      "lineNbr": 165,
      "author": {
        "id": 1117479
      },
      "writtenOn": "2017-07-26T14:13:04Z",
      "side": 1,
      "message": "Why not use std::abs() like the methed below, for consistency?",
      "revId": "037de2aae6eea842564a83729b170b8f3b2f4c85",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6413a673_1fad627d",
        "filename": "cc/base/math_util.h",
        "patchSetId": 2
      },
      "lineNbr": 165,
      "author": {
        "id": 1000537
      },
      "writtenOn": "2017-07-26T14:34:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "da19ac8e_a575fa27",
      "revId": "037de2aae6eea842564a83729b170b8f3b2f4c85",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "02720c8f_c235cef3",
        "filename": "cc/base/math_util.h",
        "patchSetId": 2
      },
      "lineNbr": 166,
      "author": {
        "id": 1213279
      },
      "writtenOn": "2017-07-26T14:16:56Z",
      "side": 1,
      "message": "DCHECK if tolerance is positive? Then it could be\nreturn std::abs(rhs - lhs) \u003c\u003d tolerance.",
      "revId": "037de2aae6eea842564a83729b170b8f3b2f4c85",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2a9c5253_6014b955",
        "filename": "cc/base/math_util.h",
        "patchSetId": 2
      },
      "lineNbr": 166,
      "author": {
        "id": 1000537
      },
      "writtenOn": "2017-07-26T14:34:14Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "02720c8f_c235cef3",
      "revId": "037de2aae6eea842564a83729b170b8f3b2f4c85",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fac1fa4f_75841bca",
        "filename": "chrome/browser/vr/animation_player.cc",
        "patchSetId": 2
      },
      "lineNbr": 247,
      "author": {
        "id": 1117479
      },
      "writtenOn": "2017-07-26T14:13:04Z",
      "side": 1,
      "message": "Hey, what happens if the curve is an underdamped response that overshoots?  In other words, it hits its target value at an intermediate point mid-animation?",
      "revId": "037de2aae6eea842564a83729b170b8f3b2f4c85",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cbb90e2a_60399a06",
        "filename": "chrome/browser/vr/animation_player.cc",
        "patchSetId": 2
      },
      "lineNbr": 247,
      "author": {
        "id": 1213279
      },
      "writtenOn": "2017-07-26T14:16:56Z",
      "side": 1,
      "message": "Good question!",
      "parentUuid": "fac1fa4f_75841bca",
      "revId": "037de2aae6eea842564a83729b170b8f3b2f4c85",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d87e0eb8_c58bcd4c",
        "filename": "chrome/browser/vr/animation_player.cc",
        "patchSetId": 2
      },
      "lineNbr": 247,
      "author": {
        "id": 1000537
      },
      "writtenOn": "2017-07-26T14:32:35Z",
      "side": 1,
      "message": "I\u0027m only checking the final value here. An intermediate value that overshoots doesn\u0027t have a bearing on the result. Essentially the check is saying \"hey animation, will you ultimately end up where I want to go?\" and bails if that\u0027s the case.",
      "parentUuid": "cbb90e2a_60399a06",
      "revId": "037de2aae6eea842564a83729b170b8f3b2f4c85",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ce10448b_0b8df339",
        "filename": "chrome/browser/vr/animation_player.cc",
        "patchSetId": 2
      },
      "lineNbr": 247,
      "author": {
        "id": 1213279
      },
      "writtenOn": "2017-07-26T14:51:26Z",
      "side": 1,
      "message": "Cool! Good to know!",
      "parentUuid": "d87e0eb8_c58bcd4c",
      "revId": "037de2aae6eea842564a83729b170b8f3b2f4c85",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}