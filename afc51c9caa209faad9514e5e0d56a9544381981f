{
  "comments": [
    {
      "key": {
        "uuid": "6a7cce7c_dda12570",
        "filename": "content/browser/frame_host/frame_tree_browsertest.cc",
        "patchSetId": 8
      },
      "lineNbr": 513,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-10-23T22:47:37Z",
      "side": 1,
      "message": "nit: could also use the cross_site_iframe_factory.html and use the neat ability to specify inline sandbox flags that I think you added at some point :)\n (https://cs.chromium.org/chromium/src/content/test/data/cross_site_iframe_factory.html?l\u003d23\u0026rcl\u003dac3681da24eee3ba2d792ee56575888377e945c8)",
      "revId": "afc51c9caa209faad9514e5e0d56a9544381981f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d55b2a57_254f10f7",
        "filename": "content/browser/frame_host/frame_tree_browsertest.cc",
        "patchSetId": 8
      },
      "lineNbr": 513,
      "author": {
        "id": 1137849
      },
      "writtenOn": "2017-10-25T20:25:57Z",
      "side": 1,
      "message": "We can\u0027t use that to set the CSP header, though, for this or the other test.",
      "parentUuid": "6a7cce7c_dda12570",
      "revId": "afc51c9caa209faad9514e5e0d56a9544381981f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bb5f7a8e_e1cbfe0e",
        "filename": "content/browser/frame_host/frame_tree_browsertest.cc",
        "patchSetId": 8
      },
      "lineNbr": 513,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-10-26T01:56:25Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "d55b2a57_254f10f7",
      "revId": "afc51c9caa209faad9514e5e0d56a9544381981f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "667ec8c6_58992fb7",
        "filename": "content/browser/frame_host/frame_tree_browsertest.cc",
        "patchSetId": 8
      },
      "lineNbr": 608,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-10-23T22:47:37Z",
      "side": 1,
      "message": "For this and similar checks, should we also verify the flags on root-\u003echild_at(0)-\u003ecurrent_frame_host()-\u003eactive_sandbox_flags()?",
      "revId": "afc51c9caa209faad9514e5e0d56a9544381981f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5df8b836_bba657f3",
        "filename": "content/browser/frame_host/frame_tree_browsertest.cc",
        "patchSetId": 8
      },
      "lineNbr": 608,
      "author": {
        "id": 1137849
      },
      "writtenOn": "2017-10-25T20:25:57Z",
      "side": 1,
      "message": "Yeah, now that we have those, that\u0027s a good idea.",
      "parentUuid": "667ec8c6_58992fb7",
      "revId": "afc51c9caa209faad9514e5e0d56a9544381981f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3cf19253_aea0af0a",
        "filename": "content/browser/frame_host/frame_tree_browsertest.cc",
        "patchSetId": 8
      },
      "lineNbr": 636,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-10-23T22:47:37Z",
      "side": 1,
      "message": "Maybe also check the case that the main frame navigates away, which should also clear the CSP flags?",
      "revId": "afc51c9caa209faad9514e5e0d56a9544381981f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6fe544d0_7e28dd97",
        "filename": "content/browser/frame_host/frame_tree_browsertest.cc",
        "patchSetId": 8
      },
      "lineNbr": 636,
      "author": {
        "id": 1137849
      },
      "writtenOn": "2017-10-25T20:25:57Z",
      "side": 1,
      "message": "Done. Added to the end of SandboxFlagsSetForMainFrame",
      "parentUuid": "3cf19253_aea0af0a",
      "revId": "afc51c9caa209faad9514e5e0d56a9544381981f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e127d777_ae530b72",
        "filename": "content/browser/frame_host/frame_tree_browsertest.cc",
        "patchSetId": 8
      },
      "lineNbr": 637,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-10-23T22:47:37Z",
      "side": 1,
      "message": "Also, would it make sense to write a test explicitly for the scenario broken in https://crbug.com/740556?  I.e., from a CSP-sandboxed document, window.open() a new popup for a  cross-process URL, and make sure that inherits the opener flags?",
      "revId": "afc51c9caa209faad9514e5e0d56a9544381981f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "243692e6_9f5a5e29",
        "filename": "content/browser/frame_host/frame_tree_browsertest.cc",
        "patchSetId": 8
      },
      "lineNbr": 637,
      "author": {
        "id": 1137849
      },
      "writtenOn": "2017-10-25T20:25:57Z",
      "side": 1,
      "message": "Yes. Should totally do that. Added now.",
      "parentUuid": "e127d777_ae530b72",
      "revId": "afc51c9caa209faad9514e5e0d56a9544381981f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bb1ec011_757ff518",
        "filename": "content/browser/frame_host/frame_tree_node.cc",
        "patchSetId": 8
      },
      "lineNbr": 377,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-10-23T22:47:37Z",
      "side": 1,
      "message": "just active_sandbox_flags()?",
      "range": {
        "startLine": 377,
        "startChar": 18,
        "endLine": 377,
        "endChar": 57
      },
      "revId": "afc51c9caa209faad9514e5e0d56a9544381981f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "247fd225_87f9445a",
        "filename": "content/browser/frame_host/frame_tree_node.cc",
        "patchSetId": 8
      },
      "lineNbr": 377,
      "author": {
        "id": 1137849
      },
      "writtenOn": "2017-10-25T20:25:57Z",
      "side": 1,
      "message": "Yeah... not sure how that one got missed.",
      "parentUuid": "bb1ec011_757ff518",
      "range": {
        "startLine": 377,
        "startChar": 18,
        "endLine": 377,
        "endChar": 57
      },
      "revId": "afc51c9caa209faad9514e5e0d56a9544381981f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "90a4ce21_cff9b607",
        "filename": "content/browser/frame_host/render_frame_host_impl.cc",
        "patchSetId": 8
      },
      "lineNbr": 2200,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-10-23T22:47:37Z",
      "side": 1,
      "message": "Does a change in active sandbox flags need to trigger the replication of new sandbox flags to any proxies, similarly to what happens in RenderFrameHostManager::CommitPendingFramePolicy?\n\nE.g., suppose we have A(B,C), B is an OOPIF, and B navigates to B2 which sets sandbox flags F via the CSP header.  Seems like we should let B\u0027s proxy in processes A and C know about the new flags?",
      "revId": "afc51c9caa209faad9514e5e0d56a9544381981f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d1a603a1_21da6e6c",
        "filename": "content/browser/frame_host/render_frame_host_impl.cc",
        "patchSetId": 8
      },
      "lineNbr": 2200,
      "author": {
        "id": 1137849
      },
      "writtenOn": "2017-10-25T20:25:57Z",
      "side": 1,
      "message": "I\u0027ve added a test for this now, to show that the sandbox flags are, in fact, updated correctly.\nA(B) -\u003e A(B*(B2)) (where B* is sandboxed)\n                  -\u003e A(B*(A2))\nNavigating B to B* in the first step changes the active sandbox flags in the frame.\nNavigating B2 to A2 in the second step should use the remote frame B* as the parent, and the test shows that the final A2 frame is in fact sandboxed.",
      "parentUuid": "90a4ce21_cff9b607",
      "revId": "afc51c9caa209faad9514e5e0d56a9544381981f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f6f5a379_282d5ced",
        "filename": "content/browser/frame_host/render_frame_host_impl.cc",
        "patchSetId": 8
      },
      "lineNbr": 2200,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-10-26T01:56:25Z",
      "side": 1,
      "message": "Wow, that\u0027s interesting.  Let me think a bit more about why this happens, and whether there might still be cases where we aren\u0027t already covered.",
      "parentUuid": "d1a603a1_21da6e6c",
      "revId": "afc51c9caa209faad9514e5e0d56a9544381981f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a9088c8f_ed014928",
        "filename": "content/browser/frame_host/render_frame_host_impl.cc",
        "patchSetId": 8
      },
      "lineNbr": 2200,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-10-26T22:58:24Z",
      "side": 1,
      "message": "OK, I think I understand now why this case works, but I think I found another one which doesn\u0027t. :)\n\nI thought this setup wouldn\u0027t work because B*\u0027s proxy in A never had correct sandbox flags.  However, there\u0027s another flow that does allow things to work.  When we create B2 and call SetPendingFramePolicy from AddFrame, the new B2 FTN will now inherit the parent FTN\u0027s active_sandbox_flags() (https://chromium-review.googlesource.com/c/chromium/src/+/712711/13/content/browser/frame_host/frame_tree_node.cc#376), which means its effective_frame_policy will now be initialized with sandbox flags from B*.  Then, when we do the remote-to-local navigation in the grandchild, the replication state\u0027s effective_frame_policy.sandbox_flags in CreateProvisional will be used to initialize the frame\u0027s sandbox flags [1], and that now has the correct flags.  So this works even without having the sandbox flags for B*\u0027s RenderFrameProxy in A.\n\nBut, note that [1] is done by setting those flags on the RemoteFrameOwner for A2 (https://cs.chromium.org/chromium/src/third_party/WebKit/Source/core/frame/WebLocalFrameImpl.cpp?l\u003d1631\u0026rcl\u003dbbe401d2e2fef44f3dc8b7992e96a913862f0cab), which isn\u0027t technically correct, as the flags don\u0027t come from the FrameOwner: they should\u0027ve been inherited from B*\u0027s RemoteFrame (its RemoteSecurityContext) instead.\n\nI think there might be a problem because of this: what if after the navigation to B2, B* updates the \u003ciframe\u003e sandbox attribute to something more permissive?  That would trigger FrameMsg_DidUpdateFramePolicy, which would overwrite the corresponding RemoteFrameOwner flags.  Suppose A2 then navigates to A3.  That seems like it might now get incorrect flags. :(\n\nI tested this by taking your ActiveSandboxFlagsCorrectInProxies test, and replacing the block with the baz.com grandchild navigation to:\n\n  EXPECT_TRUE(ExecuteScript(root-\u003echild_at(0),\n                            \"document.querySelector(\u0027iframe\u0027).sandbox \u003d \"\n                            \"    \u0027allow-scripts allow-popups\u0027;\"));\n  NavigateFrameToURL(root-\u003echild_at(0)-\u003echild_at(0),\n                     embedded_test_server()-\u003eGetURL(\"foo.com\", \"/title2.html\"));\n  EXPECT_EQ(\n      blink::WebSandboxFlags::kAll \u0026 ~blink::WebSandboxFlags::kScripts \u0026\n          ~blink::WebSandboxFlags::kAutomaticFeatures,\n      root-\u003echild_at(0)-\u003echild_at(0)-\u003eeffective_frame_policy().sandbox_flags);\n  EXPECT_EQ(\n      root-\u003echild_at(0)-\u003echild_at(0)-\u003eactive_sandbox_flags(),\n      root-\u003echild_at(0)-\u003echild_at(0)-\u003eeffective_frame_policy().sandbox_flags);\n  success \u003d false;\n  EXPECT_TRUE(ExecuteScriptAndExtractBool(\n      root-\u003echild_at(0)-\u003echild_at(0),\n      \"window.domAutomationController.send(\"\n      \"    !window.open(\u0027data:text/html,dataurl\u0027));\",\n      \u0026success));\n  EXPECT_TRUE(success);\n  EXPECT_EQ(1u, Shell::windows().size());\n\nThat fails and opens up the popup, whereas it should\u0027ve been still restricted by its parent\u0027s CSP sandbox flags which don\u0027t allow popups.  If we had the parent\u0027s flags on its RemoteSecurityContext, they would\u0027ve been properly combined with the more permissive flags on the RemoteFrameOwner on the Blink side in process A, here: \nhttps://cs.chromium.org/chromium/src/third_party/WebKit/Source/core/loader/FrameLoader.cpp?l\u003d1591\u0026rcl\u003d70b7e6f5a6563f28ad223cd41253bc543b774753.\n\nSeems like we might need to send the active_sandbox_flags to proxies after all, and use them to initialize the proxy\u0027s flags in RemoteSecurityContext.  We might also need to update RenderFrameProxy::OnDidUpdateFramePolicy to only update the FrameOwner flags, but not the RemoteSecurityContext flags -- currently it does both (https://cs.chromium.org/chromium/src/content/renderer/render_frame_proxy.cc?l\u003d301-302\u0026rcl\u003d4960963e7c323fdf88690697322175348af996f1), which might lead to this kind of confusion.  Let me know what you think.  Sorry this is so complex!",
      "parentUuid": "f6f5a379_282d5ced",
      "revId": "afc51c9caa209faad9514e5e0d56a9544381981f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dc0d25f5_5c5d444e",
        "filename": "content/browser/frame_host/render_frame_host_impl.cc",
        "patchSetId": 8
      },
      "lineNbr": 2200,
      "author": {
        "id": 1137849
      },
      "writtenOn": "2017-11-13T21:10:07Z",
      "side": 1,
      "message": "Yeah, that was a good catch -- I think I have it under control now, replicating the active flags separately from the frame owner flags. I\u0027ve added another test for this as well.",
      "parentUuid": "a9088c8f_ed014928",
      "revId": "afc51c9caa209faad9514e5e0d56a9544381981f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "49027139_52a29ead",
        "filename": "content/browser/frame_host/render_frame_host_impl.h",
        "patchSetId": 8
      },
      "lineNbr": 1299,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-10-23T22:47:37Z",
      "side": 1,
      "message": "nit: initially",
      "range": {
        "startLine": 1299,
        "startChar": 69,
        "endLine": 1299,
        "endChar": 77
      },
      "revId": "afc51c9caa209faad9514e5e0d56a9544381981f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b7e5a7ea_79b9092e",
        "filename": "content/browser/frame_host/render_frame_host_impl.h",
        "patchSetId": 8
      },
      "lineNbr": 1299,
      "author": {
        "id": 1137849
      },
      "writtenOn": "2017-10-25T20:25:57Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "49027139_52a29ead",
      "range": {
        "startLine": 1299,
        "startChar": 69,
        "endLine": 1299,
        "endChar": 77
      },
      "revId": "afc51c9caa209faad9514e5e0d56a9544381981f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "094c41bc_48919dda",
        "filename": "content/browser/frame_host/render_frame_host_manager.cc",
        "patchSetId": 8
      },
      "lineNbr": 438,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-10-23T22:47:37Z",
      "side": 1,
      "message": "We reset the replicated CSP policies and FP headers in NavigatorImpl::DidNavigate, just before calling this function.  There, the check is gated on !is_same_document_navigation.  Should we also do this reset there?  Otherwise, it seems we\u0027d be incorrectly resetting sandbox flags even for fragment navigations.",
      "range": {
        "startLine": 437,
        "startChar": 0,
        "endLine": 438,
        "endChar": 76
      },
      "revId": "afc51c9caa209faad9514e5e0d56a9544381981f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e2824e71_e2b4d8a1",
        "filename": "content/browser/frame_host/render_frame_host_manager.cc",
        "patchSetId": 8
      },
      "lineNbr": 438,
      "author": {
        "id": 1137849
      },
      "writtenOn": "2017-10-25T20:25:57Z",
      "side": 1,
      "message": "That\u0027s a good point, and it does make sense to reset it in NavigatorImpl instead, along with the other headers.",
      "parentUuid": "094c41bc_48919dda",
      "range": {
        "startLine": 437,
        "startChar": 0,
        "endLine": 438,
        "endChar": 76
      },
      "revId": "afc51c9caa209faad9514e5e0d56a9544381981f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b55b2f0a_f3d2d41b",
        "filename": "content/browser/frame_host/render_frame_host_manager_unittest.cc",
        "patchSetId": 8
      },
      "lineNbr": 3203,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-10-23T22:47:37Z",
      "side": 1,
      "message": "Would navigation_to_kUrl2-\u003eCommit() just work here?",
      "revId": "afc51c9caa209faad9514e5e0d56a9544381981f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a5d67cdc_762a166e",
        "filename": "content/browser/frame_host/render_frame_host_manager_unittest.cc",
        "patchSetId": 8
      },
      "lineNbr": 3203,
      "author": {
        "id": 1137849
      },
      "writtenOn": "2017-10-25T20:25:57Z",
      "side": 1,
      "message": "Yes. Yes it does, thanks",
      "parentUuid": "b55b2f0a_f3d2d41b",
      "revId": "afc51c9caa209faad9514e5e0d56a9544381981f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a31a4bda_4a862521",
        "filename": "content/browser/frame_host/render_frame_host_manager_unittest.cc",
        "patchSetId": 8
      },
      "lineNbr": 3211,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-10-23T22:47:37Z",
      "side": 1,
      "message": "If you use the NavigationSimulator::Commit, you can use navigation_to_kUrl2-\u003eGetFinalRenderFrameHost() here.",
      "range": {
        "startLine": 3211,
        "startChar": 12,
        "endLine": 3211,
        "endChar": 27
      },
      "revId": "afc51c9caa209faad9514e5e0d56a9544381981f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7c69de86_78e71d85",
        "filename": "content/browser/frame_host/render_frame_host_manager_unittest.cc",
        "patchSetId": 8
      },
      "lineNbr": 3211,
      "author": {
        "id": 1137849
      },
      "writtenOn": "2017-10-25T20:25:57Z",
      "side": 1,
      "message": "That returns a RenderFrameHost* though, which is less useful than either a TestRenderFrameHost or a RenderFrameHostImpl, since it doesn\u0027t expose frame_tree_node(). I suppose I could cast, but is that any better than what\u0027s here?",
      "parentUuid": "a31a4bda_4a862521",
      "range": {
        "startLine": 3211,
        "startChar": 12,
        "endLine": 3211,
        "endChar": 27
      },
      "revId": "afc51c9caa209faad9514e5e0d56a9544381981f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "008d02c7_ab4fe8cb",
        "filename": "content/browser/frame_host/render_frame_host_manager_unittest.cc",
        "patchSetId": 8
      },
      "lineNbr": 3211,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-10-26T01:56:25Z",
      "side": 1,
      "message": "Your way should be fine, sorry. :)  I was initially thinking that the old RFH might be gone by now, but you\u0027re using main_test_rfh() (which looks up the new RFH) and not initial_rfh, so this is fine.",
      "parentUuid": "7c69de86_78e71d85",
      "range": {
        "startLine": 3211,
        "startChar": 12,
        "endLine": 3211,
        "endChar": 27
      },
      "revId": "afc51c9caa209faad9514e5e0d56a9544381981f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "675e8e3e_92fdb6fa",
        "filename": "content/browser/site_per_process_browsertest.cc",
        "patchSetId": 8
      },
      "lineNbr": 12087,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-10-23T22:47:37Z",
      "side": 1,
      "message": "nit: pointer",
      "range": {
        "startLine": 12087,
        "startChar": 11,
        "endLine": 12087,
        "endChar": 19
      },
      "revId": "afc51c9caa209faad9514e5e0d56a9544381981f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e542c109_97130689",
        "filename": "content/browser/site_per_process_browsertest.cc",
        "patchSetId": 8
      },
      "lineNbr": 12087,
      "author": {
        "id": 1137849
      },
      "writtenOn": "2017-10-25T20:25:57Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "675e8e3e_92fdb6fa",
      "range": {
        "startLine": 12087,
        "startChar": 11,
        "endLine": 12087,
        "endChar": 19
      },
      "revId": "afc51c9caa209faad9514e5e0d56a9544381981f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f501a39c_c680c08b",
        "filename": "content/browser/site_per_process_browsertest.cc",
        "patchSetId": 8
      },
      "lineNbr": 12138,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-10-23T22:47:37Z",
      "side": 1,
      "message": "Since you added a copy of active_sandbox_flags to RFH, should we also have a test to verify that the a pending deletion RFH\u0027s flags are tracked properly?  There are some examples of how to do this in this file, e.g., WebUIJavascriptDisallowedAfterSwapOut.  They mostly involve calling rfh-\u003eDisableSwapOutTimerForTesting() (which simulates unload events never sending back the ACK), then waiting for a cross-process commit, then checking whatever we care about on |rfh|.",
      "revId": "afc51c9caa209faad9514e5e0d56a9544381981f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e996b9cc_a1121368",
        "filename": "content/browser/site_per_process_browsertest.cc",
        "patchSetId": 8
      },
      "lineNbr": 12138,
      "author": {
        "id": 1137849
      },
      "writtenOn": "2017-10-25T20:25:57Z",
      "side": 1,
      "message": "Thanks for that pointer -- that\u0027s a useful tool. I\u0027ve added a test here for that situation (Load a sandboxed document, navigate to a page without sandbox, and verify the active flags on the original RFH)",
      "parentUuid": "f501a39c_c680c08b",
      "revId": "afc51c9caa209faad9514e5e0d56a9544381981f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b659e15b_5e5e69a5",
        "filename": "content/browser/site_per_process_browsertest.cc",
        "patchSetId": 8
      },
      "lineNbr": 12138,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-10-26T01:56:25Z",
      "side": 1,
      "message": "Great, thanks for adding the test!",
      "parentUuid": "e996b9cc_a1121368",
      "revId": "afc51c9caa209faad9514e5e0d56a9544381981f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0e2b4c60_95e0999e",
        "filename": "content/browser/web_contents/web_contents_impl.h",
        "patchSetId": 8
      },
      "lineNbr": 140,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-10-23T22:47:37Z",
      "side": 1,
      "message": "While passing the opener RFH here seems cleaner, I\u0027m curious if if was needed for this CL?  Since you cannot do a window.open from an unload handler, we should never get here with a pending-delete RFH (see IsCurrent() check in RenderFrameHostImpl::CreateNewWindow), so in practice using the opener FTN\u0027s active_sandbox_flags() should be sufficient.  Or was there another reason for doing it?",
      "revId": "afc51c9caa209faad9514e5e0d56a9544381981f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "241ee70d_31b6a128",
        "filename": "content/browser/web_contents/web_contents_impl.h",
        "patchSetId": 8
      },
      "lineNbr": 140,
      "author": {
        "id": 1137849
      },
      "writtenOn": "2017-10-25T20:25:57Z",
      "side": 1,
      "message": "Mostly cleanliness -- we\u0027re tracking the flags on the RFH, so it seemed like we should be using them as well. Would you prefer I revert this (I\u0027d at least add a comment at the point where we access the flags to point out which flags are being used)",
      "parentUuid": "0e2b4c60_95e0999e",
      "revId": "afc51c9caa209faad9514e5e0d56a9544381981f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b9aed11e_07de7b92",
        "filename": "content/browser/web_contents/web_contents_impl.h",
        "patchSetId": 8
      },
      "lineNbr": 140,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-10-26T01:56:25Z",
      "side": 1,
      "message": "I\u0027m fine keeping it since you\u0027ve already done the work -- given that the window.open ultimately comes from the opener RFH, I agree it\u0027s cleaner to pull the sandbox flags off from the same opener RFH as well.  This refactor just makes this CL a bit riskier, because there\u0027s lots of paths/weirdness around WC creation, but seems like this change should be ok.",
      "parentUuid": "241ee70d_31b6a128",
      "revId": "afc51c9caa209faad9514e5e0d56a9544381981f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c699ed95_b5b71f28",
        "filename": "content/test/data/sandboxed_main_frame.html",
        "patchSetId": 8
      },
      "lineNbr": 7,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-10-23T22:47:37Z",
      "side": 1,
      "message": "nit: remove commented-out code?",
      "revId": "afc51c9caa209faad9514e5e0d56a9544381981f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b5ced686_e876b93b",
        "filename": "content/test/data/sandboxed_main_frame.html",
        "patchSetId": 8
      },
      "lineNbr": 7,
      "author": {
        "id": 1137849
      },
      "writtenOn": "2017-10-25T20:25:57Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c699ed95_b5b71f28",
      "revId": "afc51c9caa209faad9514e5e0d56a9544381981f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}