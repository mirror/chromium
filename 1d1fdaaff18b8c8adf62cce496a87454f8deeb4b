{
  "comments": [
    {
      "key": {
        "uuid": "31fa827e_9381a816",
        "filename": "third_party/WebKit/Source/bindings/scripts/v8_interface.py",
        "patchSetId": 11
      },
      "lineNbr": 416,
      "author": {
        "id": 1002507
      },
      "writtenOn": "2017-11-14T09:01:34Z",
      "side": 1,
      "message": "This condition must be always true.",
      "range": {
        "startLine": 416,
        "startChar": 12,
        "endLine": 416,
        "endChar": 81
      },
      "revId": "1d1fdaaff18b8c8adf62cce496a87454f8deeb4b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "562c07dc_98cbe231",
        "filename": "third_party/WebKit/Source/bindings/scripts/v8_interface.py",
        "patchSetId": 11
      },
      "lineNbr": 424,
      "author": {
        "id": 1002507
      },
      "writtenOn": "2017-11-14T09:01:34Z",
      "side": 1,
      "message": "\u0027on_objects\u0027 doesn\u0027t make a good sense to me. (I\u0027m writing comments in random order, so please read other comments, too.)\n\nAnd I\u0027d say \"constructors are not attributes\".  I think that \"conditional_attributes\" and \"conditional_interface_objects\" are good (and somewhat correct) names.\n\nNote that interface objects (regardless of whether they\u0027re exposed on a global object or not) do not always behave as constructors.  i.e. interface objects !\u003d\u003d constructors.  Some of interface objects behave as constructors, though, it\u0027s totally optional.\n\nFor example,\n\n    [Exposed\u003dWindow, SecureContext] interface Foo {\n        const int the_number \u003d 42;\n    };\n\nIn this case, Foo is not a constructor (it doesn\u0027t have [Constructor]), but Foo is conditionally exposed on Window only when it\u0027s a secure context, and only then Foo.the_number is observable from author script.",
      "revId": "1d1fdaaff18b8c8adf62cce496a87454f8deeb4b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "baf84ddf_2b48f33c",
        "filename": "third_party/WebKit/Source/bindings/templates/attributes.cpp.tmpl",
        "patchSetId": 11
      },
      "lineNbr": 583,
      "author": {
        "id": 1002507
      },
      "writtenOn": "2017-11-14T09:01:34Z",
      "side": 1,
      "message": "IMHO, \"_on_objects\" adds no new information.  If it meant \"this function does not handle v8::ObjectTemplate or v8::FunctionTemplate\", I\u0027d like to have a comment.  Anyway, it\u0027s a good idea to have a header comment for macros like we have ones for functions.\n\nBy the way, the existing templates and macros often use \"implicit parameters\", but we can make it \"explicit\".  We can make this macro take instance_object, prototype_object, interface_object and other parameters as necessary.",
      "range": {
        "startLine": 583,
        "startChar": 39,
        "endLine": 583,
        "endChar": 50
      },
      "revId": "1d1fdaaff18b8c8adf62cce496a87454f8deeb4b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "63fcdb30_72497d18",
        "filename": "third_party/WebKit/Source/bindings/templates/interface_base.cpp.tmpl",
        "patchSetId": 11
      },
      "lineNbr": 948,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2017-11-14T05:20:55Z",
      "side": 1,
      "message": "I\u0027m still confused.\n\nWhen do we need to pass in the instance object?\n\nWhen do we need to pass in all of the instance object, the prototype object and the interface object?",
      "revId": "1d1fdaaff18b8c8adf62cce496a87454f8deeb4b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "641ead65_1afd1028",
        "filename": "third_party/WebKit/Source/bindings/templates/interface_base.cpp.tmpl",
        "patchSetId": 11
      },
      "lineNbr": 948,
      "author": {
        "id": 1001470
      },
      "writtenOn": "2017-11-14T05:37:05Z",
      "side": 1,
      "message": "We pass an instance object when we create a new wrapper (\u003dinstance object).\nWe pass prototype and interface objects, when we create them.\nBecause of prototype chain, we have to handle these two types independently.\n\nHowever, as an exception, we pass all objects when we create the Window wrapper (and HTMLDocuemnt wrapper) from snapshot. See V8ContextSnapshot::InstallConditionalFeaturesOnObjects() for this case.",
      "parentUuid": "63fcdb30_72497d18",
      "revId": "1d1fdaaff18b8c8adf62cce496a87454f8deeb4b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f3defc45_04fa5f1f",
        "filename": "third_party/WebKit/Source/platform/bindings/WrapperTypeInfo.h",
        "patchSetId": 11
      },
      "lineNbr": 155,
      "author": {
        "id": 1002507
      },
      "writtenOn": "2017-11-14T09:01:34Z",
      "side": 1,
      "message": "Could you add a function comment?\n\nYou changed a design from one existing to another new one.  Let\u0027s describe it and what this function is responsible for.",
      "revId": "1d1fdaaff18b8c8adf62cce496a87454f8deeb4b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "aa319a26_537e2d31",
        "filename": "third_party/WebKit/Source/platform/bindings/WrapperTypeInfo.h",
        "patchSetId": 11
      },
      "lineNbr": 155,
      "author": {
        "id": 1002507
      },
      "writtenOn": "2017-11-14T09:01:34Z",
      "side": 1,
      "message": "\"OnObjects\" in the name doesn\u0027t make much sense to me.  \"Install\" and \"ConditionalFeatures\" tell me what the function does, but \"OnObjects\" makes nothing clearer, IMHO.\n\nNote that \"PrototypeAndInterface\" was important because the function only handles certain objects and doesn\u0027t handle the rest, so it was important to describe what are supported and what are not.  However, when the function handles everything, it\u0027s no longer important.",
      "range": {
        "startLine": 155,
        "startChar": 33,
        "endLine": 155,
        "endChar": 42
      },
      "revId": "1d1fdaaff18b8c8adf62cce496a87454f8deeb4b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}