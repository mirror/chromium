{
  "comments": [
    {
      "key": {
        "uuid": "cdf9440f_ba1b3386",
        "filename": "/COMMIT_MSG",
        "patchSetId": 18
      },
      "lineNbr": 12,
      "author": {
        "id": 1115924
      },
      "writtenOn": "2017-07-07T05:21:02Z",
      "side": 1,
      "message": "also for only one ResourceFetcher?",
      "range": {
        "startLine": 12,
        "startChar": 43,
        "endLine": 12,
        "endChar": 59
      },
      "revId": "b2ea9b091f547142a679c8e48c5bc9a69ac950bb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "adb387a5_d3128ffb",
        "filename": "/COMMIT_MSG",
        "patchSetId": 18
      },
      "lineNbr": 12,
      "author": {
        "id": 1114080
      },
      "writtenOn": "2017-07-11T09:38:03Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "cdf9440f_ba1b3386",
      "range": {
        "startLine": 12,
        "startChar": 43,
        "endLine": 12,
        "endChar": 59
      },
      "revId": "b2ea9b091f547142a679c8e48c5bc9a69ac950bb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "622cbcd2_1b58ff0b",
        "filename": "third_party/WebKit/Source/core/html/parser/CSSPreloadScanner.cpp",
        "patchSetId": 18
      },
      "lineNbr": 269,
      "author": {
        "id": 1115449
      },
      "writtenOn": "2017-06-30T07:59:30Z",
      "side": 1,
      "message": "I remember this being added in order to solve some tricky memory issues in https://codereview.chromium.org/1976463003/\n\nCan we simply remove this flag?",
      "range": {
        "startLine": 269,
        "startChar": 27,
        "endLine": 269,
        "endChar": 28
      },
      "revId": "b2ea9b091f547142a679c8e48c5bc9a69ac950bb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7b7c3139_3aa68603",
        "filename": "third_party/WebKit/Source/core/html/parser/CSSPreloadScanner.cpp",
        "patchSetId": 18
      },
      "lineNbr": 269,
      "author": {
        "id": 1114080
      },
      "writtenOn": "2017-07-06T11:31:32Z",
      "side": 1,
      "message": "My understanding is that this flag was needed because we did preload reference state transition when a client is added and some resource clients want to avoid that. This change moves the state transition timing from when the client is added to when matching is done. Hence the problem doesn\u0027t exist with this CL, I think.",
      "parentUuid": "622cbcd2_1b58ff0b",
      "range": {
        "startLine": 269,
        "startChar": 27,
        "endLine": 269,
        "endChar": 28
      },
      "revId": "b2ea9b091f547142a679c8e48c5bc9a69ac950bb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5da82f14_98131674",
        "filename": "third_party/WebKit/Source/core/html/parser/CSSPreloadScanner.cpp",
        "patchSetId": 18
      },
      "lineNbr": 269,
      "author": {
        "id": 1114080
      },
      "writtenOn": "2017-07-11T09:38:03Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7b7c3139_3aa68603",
      "range": {
        "startLine": 269,
        "startChar": 27,
        "endLine": 269,
        "endChar": 28
      },
      "revId": "b2ea9b091f547142a679c8e48c5bc9a69ac950bb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "97242e2a_79909f4d",
        "filename": "third_party/WebKit/Source/core/html/parser/CSSPreloadScannerTest.cpp",
        "patchSetId": 18
      },
      "lineNbr": 215,
      "author": {
        "id": 1142059
      },
      "writtenOn": "2017-07-10T15:19:54Z",
      "side": 1,
      "message": "Why is this false? The preload should be unmatched at this point.",
      "revId": "b2ea9b091f547142a679c8e48c5bc9a69ac950bb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "88fe27da_59b3e294",
        "filename": "third_party/WebKit/Source/core/html/parser/CSSPreloadScannerTest.cpp",
        "patchSetId": 18
      },
      "lineNbr": 215,
      "author": {
        "id": 1114080
      },
      "writtenOn": "2017-07-11T09:38:03Z",
      "side": 1,
      "message": "This is false because I made is_unused_preload_\u0027s default value as false. The field is set to true when issueing a preload request, and set to false when it is matched to another request. Neither happens in this test, so it returns the initial value.\n\nThe assertion tested if addClient changes preload_result_. With this change it is obvious that it doesn\u0027t, so I removed the assertion. If you prefer checking it, I can call Resource::MarkAsPreload manually.",
      "parentUuid": "97242e2a_79909f4d",
      "revId": "b2ea9b091f547142a679c8e48c5bc9a69ac950bb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "258b5f25_5fefc07b",
        "filename": "third_party/WebKit/Source/core/loader/LinkLoader.cpp",
        "patchSetId": 18
      },
      "lineNbr": 484,
      "author": {
        "id": 1115449
      },
      "writtenOn": "2017-06-30T07:59:30Z",
      "side": 1,
      "message": "What happens if we have a `\u003clink rel\u003d\"preload prefetch\" href\u003d\"foo\"\u003e`?\nIf we want to ignore the prefetch in this case (which makes sense) shouldn\u0027t we avoid calling PrefetchIfNeeded if preloaded_resource is not null?",
      "range": {
        "startLine": 484,
        "startChar": 10,
        "endLine": 484,
        "endChar": 28
      },
      "revId": "b2ea9b091f547142a679c8e48c5bc9a69ac950bb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "96baaecc_69006ff7",
        "filename": "third_party/WebKit/Source/core/loader/LinkLoader.cpp",
        "patchSetId": 18
      },
      "lineNbr": 484,
      "author": {
        "id": 1114080
      },
      "writtenOn": "2017-07-06T11:31:32Z",
      "side": 1,
      "message": "Thanks! Done at https://chromium-review.googlesource.com/c/558597/.",
      "parentUuid": "258b5f25_5fefc07b",
      "range": {
        "startLine": 484,
        "startChar": 10,
        "endLine": 484,
        "endChar": 28
      },
      "revId": "b2ea9b091f547142a679c8e48c5bc9a69ac950bb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "877f34ba_f1e9d2bc",
        "filename": "third_party/WebKit/Source/core/loader/LinkLoader.cpp",
        "patchSetId": 18
      },
      "lineNbr": 484,
      "author": {
        "id": 1115449
      },
      "writtenOn": "2017-07-10T06:35:08Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "96baaecc_69006ff7",
      "range": {
        "startLine": 484,
        "startChar": 10,
        "endLine": 484,
        "endChar": 28
      },
      "revId": "b2ea9b091f547142a679c8e48c5bc9a69ac950bb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f543cf74_7250751e",
        "filename": "third_party/WebKit/Source/core/loader/resource/ImageResource.cpp",
        "patchSetId": 18
      },
      "lineNbr": 272,
      "author": {
        "id": 1115924
      },
      "writtenOn": "2017-07-07T05:21:02Z",
      "side": 1,
      "message": "(I\u0027m not so sure about what condition to be used here... hajimehoshi@?)",
      "revId": "b2ea9b091f547142a679c8e48c5bc9a69ac950bb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "30a64a02_00d14d7c",
        "filename": "third_party/WebKit/Source/core/loader/resource/ImageResource.cpp",
        "patchSetId": 18
      },
      "lineNbr": 272,
      "author": {
        "id": 1115913
      },
      "writtenOn": "2017-07-07T05:39:09Z",
      "side": 1,
      "message": "This condition should indicate that the encoded image is on disk and the UMA indicate the size of it to estimate reducible size from physical memory.\n\nI think we don\u0027t have to change this, but why was this changed?",
      "parentUuid": "f543cf74_7250751e",
      "revId": "b2ea9b091f547142a679c8e48c5bc9a69ac950bb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "94117048_2aeb0b86",
        "filename": "third_party/WebKit/Source/core/loader/resource/ImageResource.cpp",
        "patchSetId": 18
      },
      "lineNbr": 272,
      "author": {
        "id": 1114080
      },
      "writtenOn": "2017-07-11T09:38:03Z",
      "side": 1,
      "message": "Because we are going to remove the function.",
      "parentUuid": "30a64a02_00d14d7c",
      "revId": "b2ea9b091f547142a679c8e48c5bc9a69ac950bb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e5dd4bab_399389bc",
        "filename": "third_party/WebKit/Source/platform/loader/fetch/Resource.cpp",
        "patchSetId": 18
      },
      "lineNbr": 400,
      "author": {
        "id": 1115924
      },
      "writtenOn": "2017-07-07T05:21:02Z",
      "side": 1,
      "message": "|!is_unused_preload|? (not so sure though)\n\nOr how about removing |this| unconditionally, i.e.\nif (IsMainThread())\n  GetMemoryCache()-\u003eRemove(this);\n\n(I originally thought this can be done independently (https://chromium-review.googlesource.com/c/544363/11/third_party%252FWebKit%252FSource%252Fplatform%252Floader%252Ffetch%252FResource.cpp#401), but now I feel that doing this one-line change and then committing this CL might be simple)",
      "range": {
        "startLine": 400,
        "startChar": 34,
        "endLine": 400,
        "endChar": 52
      },
      "revId": "b2ea9b091f547142a679c8e48c5bc9a69ac950bb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3516a76a_bca3885d",
        "filename": "third_party/WebKit/Source/platform/loader/fetch/Resource.cpp",
        "patchSetId": 18
      },
      "lineNbr": 400,
      "author": {
        "id": 1114080
      },
      "writtenOn": "2017-07-11T09:38:03Z",
      "side": 1,
      "message": "Thanks, Done.",
      "parentUuid": "e5dd4bab_399389bc",
      "range": {
        "startLine": 400,
        "startChar": 34,
        "endLine": 400,
        "endChar": 52
      },
      "revId": "b2ea9b091f547142a679c8e48c5bc9a69ac950bb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1fe85e9c_ee177d35",
        "filename": "third_party/WebKit/Source/platform/loader/fetch/Resource.h",
        "patchSetId": 18
      },
      "lineNbr": 236,
      "author": {
        "id": 1115449
      },
      "writtenOn": "2017-06-30T07:59:30Z",
      "side": 1,
      "message": "Does removing the counter still enable the \"multiple ResourceFetchers\" case? Are we testing for it?",
      "range": {
        "startLine": 236,
        "startChar": 7,
        "endLine": 236,
        "endChar": 19
      },
      "revId": "b2ea9b091f547142a679c8e48c5bc9a69ac950bb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "59da8289_ce5a3284",
        "filename": "third_party/WebKit/Source/platform/loader/fetch/Resource.h",
        "patchSetId": 18
      },
      "lineNbr": 236,
      "author": {
        "id": 1114080
      },
      "writtenOn": "2017-07-06T11:31:32Z",
      "side": 1,
      "message": "Sorry, can you explain what you mean by \"multiple ResourceFetchers case\"?",
      "parentUuid": "1fe85e9c_ee177d35",
      "range": {
        "startLine": 236,
        "startChar": 7,
        "endLine": 236,
        "endChar": 19
      },
      "revId": "b2ea9b091f547142a679c8e48c5bc9a69ac950bb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "65a09c69_f98e3b34",
        "filename": "third_party/WebKit/Source/platform/loader/fetch/Resource.h",
        "patchSetId": 18
      },
      "lineNbr": 236,
      "author": {
        "id": 1115449
      },
      "writtenOn": "2017-07-10T06:35:08Z",
      "side": 1,
      "message": "See https://codereview.chromium.org/2319483002/#msg17 (Where I tried to do something similar).\n\nI believe we support multiple ResourceFetchers getting the same preloaded resource from the memory cache. Removing the counter in favor of a boolean may mean we can no longer reliably know when a resource is a pending preload.",
      "parentUuid": "59da8289_ce5a3284",
      "range": {
        "startLine": 236,
        "startChar": 7,
        "endLine": 236,
        "endChar": 19
      },
      "revId": "b2ea9b091f547142a679c8e48c5bc9a69ac950bb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "572b7b7a_ea2750c0",
        "filename": "third_party/WebKit/Source/platform/loader/fetch/Resource.h",
        "patchSetId": 18
      },
      "lineNbr": 236,
      "author": {
        "id": 1114080
      },
      "writtenOn": "2017-07-11T09:38:03Z",
      "side": 1,
      "message": "I think the things have been changed since then mainly because of https://codereview.chromium.org/2682603002. A resource cannot be shared by a different ResourceFetcher while loading anyway. Hence I expect that the perf impact is small.",
      "parentUuid": "65a09c69_f98e3b34",
      "range": {
        "startLine": 236,
        "startChar": 7,
        "endLine": 236,
        "endChar": 19
      },
      "revId": "b2ea9b091f547142a679c8e48c5bc9a69ac950bb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "86b1bfba_9ead22e6",
        "filename": "third_party/WebKit/Source/platform/loader/fetch/ResourceFetcher.cpp",
        "patchSetId": 18
      },
      "lineNbr": 1019,
      "author": {
        "id": 1115449
      },
      "writtenOn": "2017-07-10T06:35:08Z",
      "side": 1,
      "message": "Wouldn\u0027t that result in double downloads in e.g. `\u003cscript src\u003dblocking.js\u003e\u003clink rel\u003dpreload href\u003dfoo as\u003dimage\u003e\u003cimg src\u003dfoo\u003e`?",
      "range": {
        "startLine": 1019,
        "startChar": 3,
        "endLine": 1019,
        "endChar": 0
      },
      "revId": "b2ea9b091f547142a679c8e48c5bc9a69ac950bb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "58dfc88b_acd0759e",
        "filename": "third_party/WebKit/Source/platform/loader/fetch/ResourceFetcher.cpp",
        "patchSetId": 18
      },
      "lineNbr": 1019,
      "author": {
        "id": 1114080
      },
      "writtenOn": "2017-07-11T09:38:03Z",
      "side": 1,
      "message": "I don\u0027t think so - usually a preload request is unified to another preloaded resource in ResourceFetcher::MatchPreload. If I\u0027m misunderstanding your example, can you provide a more detailed scenario?",
      "parentUuid": "86b1bfba_9ead22e6",
      "range": {
        "startLine": 1019,
        "startChar": 3,
        "endLine": 1019,
        "endChar": 0
      },
      "revId": "b2ea9b091f547142a679c8e48c5bc9a69ac950bb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0b5ca874_a01134fc",
        "filename": "third_party/WebKit/Source/platform/loader/fetch/ResourceFetcher.cpp",
        "patchSetId": 18
      },
      "lineNbr": 1147,
      "author": {
        "id": 1115449
      },
      "writtenOn": "2017-07-10T06:35:08Z",
      "side": 1,
      "message": "Can you elaborate?",
      "revId": "b2ea9b091f547142a679c8e48c5bc9a69ac950bb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f66cea84_848a3a6c",
        "filename": "third_party/WebKit/Source/platform/loader/fetch/ResourceFetcher.cpp",
        "patchSetId": 18
      },
      "lineNbr": 1147,
      "author": {
        "id": 1114080
      },
      "writtenOn": "2017-07-11T09:38:03Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0b5ca874_a01134fc",
      "revId": "b2ea9b091f547142a679c8e48c5bc9a69ac950bb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4aae3f4e_5ddbf92b",
        "filename": "third_party/WebKit/Source/platform/loader/fetch/ResourceFetcher.cpp",
        "patchSetId": 18
      },
      "lineNbr": 1246,
      "author": {
        "id": 1115449
      },
      "writtenOn": "2017-07-10T06:35:08Z",
      "side": 1,
      "message": "So here we\u0027re now removing the resource from MemoryCache even if it is a used preload? Can you explain why?",
      "revId": "b2ea9b091f547142a679c8e48c5bc9a69ac950bb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a702bb56_e4ca3c3b",
        "filename": "third_party/WebKit/Source/platform/loader/fetch/ResourceFetcher.cpp",
        "patchSetId": 18
      },
      "lineNbr": 1246,
      "author": {
        "id": 1114080
      },
      "writtenOn": "2017-07-11T09:38:03Z",
      "side": 1,
      "message": "Used/matched/referenced preloads are expected to have been moved to matched_preloads_.",
      "parentUuid": "4aae3f4e_5ddbf92b",
      "revId": "b2ea9b091f547142a679c8e48c5bc9a69ac950bb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}