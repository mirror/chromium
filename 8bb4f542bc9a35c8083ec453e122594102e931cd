{
  "comments": [
    {
      "key": {
        "uuid": "4f47967e_b1ce1c88",
        "filename": "content/common/leveldb_wrapper.mojom",
        "patchSetId": 13
      },
      "lineNbr": 61,
      "author": {
        "id": 1137859
      },
      "writtenOn": "2017-10-12T18:18:54Z",
      "side": 1,
      "message": "I\u0027m not familiar with leveldb, but why would the client know the old value? Isn\u0027t that in the actual database the client is working on?",
      "revId": "8bb4f542bc9a35c8083ec453e122594102e931cd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "279d6acc_a49358ac",
        "filename": "content/common/leveldb_wrapper.mojom",
        "patchSetId": 13
      },
      "lineNbr": 61,
      "author": {
        "id": 1110029
      },
      "writtenOn": "2017-10-12T18:31:37Z",
      "side": 1,
      "message": "For what it\u0027s worth, LevelDBWrapper is really badly named (I think cmumford@ had some plans to rename it, but not very high priority). That it is (indirectly) backed by leveldb is completely irrelevant. It really should be called KeyValueStore or something like that.\n\nBut yeah, it is a bit unfortunate that this makes a mostly generic key value store interface slightly less generic (since as you point out not every use case for a key value store might want to keep around a copy of all the data), but I think that\u0027s fine in this case anyway. If you squint it would still be possible to use the same interface for other purposes; whatever API a client would use to get a LevelDBWrapper could always document that its LevelDBWrappers will never need client_old_value for example...",
      "parentUuid": "4f47967e_b1ce1c88",
      "revId": "8bb4f542bc9a35c8083ec453e122594102e931cd",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}