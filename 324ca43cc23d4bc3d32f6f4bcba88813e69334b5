{
  "comments": [
    {
      "key": {
        "uuid": "f06950fc_f3a0b95e",
        "filename": "chrome/browser/extensions/api/settings_private/generated_pref.h",
        "patchSetId": 7
      },
      "lineNbr": 45,
      "author": {
        "id": 1000191
      },
      "writtenOn": "2018-01-06T00:01:15Z",
      "side": 1,
      "message": "Presumably this is expected to call NotifyObservers? That should be in the comment.",
      "revId": "324ca43cc23d4bc3d32f6f4bcba88813e69334b5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ec0215af_4bdec5d5",
        "filename": "chrome/browser/extensions/api/settings_private/generated_pref.h",
        "patchSetId": 7
      },
      "lineNbr": 45,
      "author": {
        "id": 1003168
      },
      "writtenOn": "2018-01-08T20:25:01Z",
      "side": 1,
      "message": "Why would it notify observers?\nThese are generated preferences. If \"Set\" implementation does not modify visible preference value, I assume no observers should be notified.\n\nObservers should be notified only when preference is \"changed\" (in whatever way a particular \"preference\" implementation defines \"changed\"). I don\u0027t think it should be tied to [this] Set method.\n\nFor example, in Time Zone preferences implementation, observers will be fired by watching for underlying preferences/policies changes.",
      "parentUuid": "f06950fc_f3a0b95e",
      "revId": "324ca43cc23d4bc3d32f6f4bcba88813e69334b5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fb8cfcde_446f3819",
        "filename": "chrome/browser/extensions/api/settings_private/generated_pref.h",
        "patchSetId": 7
      },
      "lineNbr": 45,
      "author": {
        "id": 1000191
      },
      "writtenOn": "2018-01-08T22:06:16Z",
      "side": 1,
      "message": "I see. I think I would prefer to restore NotifyObservers() with a comment, e.g. \"Call this when the pref value changes.\"",
      "parentUuid": "ec0215af_4bdec5d5",
      "revId": "324ca43cc23d4bc3d32f6f4bcba88813e69334b5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "947c8dd1_0d3e64a7",
        "filename": "chrome/browser/extensions/api/settings_private/generated_pref.h",
        "patchSetId": 7
      },
      "lineNbr": 45,
      "author": {
        "id": 1003168
      },
      "writtenOn": "2018-01-08T23:45:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fb8cfcde_446f3819",
      "revId": "324ca43cc23d4bc3d32f6f4bcba88813e69334b5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "be78d6df_2359d489",
        "filename": "chrome/browser/extensions/api/settings_private/generated_pref.h",
        "patchSetId": 7
      },
      "lineNbr": 49,
      "author": {
        "id": 1000191
      },
      "writtenOn": "2018-01-05T23:47:24Z",
      "side": 1,
      "message": "Is there a reason to copy the callback instead of passing a * and using the common ObserverList pattern?\n\nAlso, it is unusual not to have a remove method. Please explain why we do not need to remove these in the comment (assuming that is indeed OK).",
      "revId": "324ca43cc23d4bc3d32f6f4bcba88813e69334b5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "055f7f5a_7b78ad8c",
        "filename": "chrome/browser/extensions/api/settings_private/generated_pref.h",
        "patchSetId": 7
      },
      "lineNbr": 49,
      "author": {
        "id": 1003168
      },
      "writtenOn": "2018-01-08T20:25:01Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "be78d6df_2359d489",
      "revId": "324ca43cc23d4bc3d32f6f4bcba88813e69334b5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "76dbaa98_f4efb2fb",
        "filename": "chrome/browser/extensions/api/settings_private/generated_pref.h",
        "patchSetId": 7
      },
      "lineNbr": 56,
      "author": {
        "id": 1000191
      },
      "writtenOn": "2018-01-05T23:47:24Z",
      "side": 1,
      "message": "callbacks_",
      "revId": "324ca43cc23d4bc3d32f6f4bcba88813e69334b5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7a09d2fd_c2c989ea",
        "filename": "chrome/browser/extensions/api/settings_private/generated_pref.h",
        "patchSetId": 7
      },
      "lineNbr": 56,
      "author": {
        "id": 1003168
      },
      "writtenOn": "2018-01-08T20:25:01Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "76dbaa98_f4efb2fb",
      "revId": "324ca43cc23d4bc3d32f6f4bcba88813e69334b5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a0ebc3cb_59ce38f8",
        "filename": "chrome/browser/extensions/api/settings_private/generated_prefs.cc",
        "patchSetId": 7
      },
      "lineNbr": 38,
      "author": {
        "id": 1000191
      },
      "writtenOn": "2018-01-05T23:47:24Z",
      "side": 1,
      "message": "PREF_NOT_FOUND",
      "revId": "324ca43cc23d4bc3d32f6f4bcba88813e69334b5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9d8d8107_6413df69",
        "filename": "chrome/browser/extensions/api/settings_private/generated_prefs.cc",
        "patchSetId": 7
      },
      "lineNbr": 38,
      "author": {
        "id": 1003168
      },
      "writtenOn": "2018-01-08T20:25:01Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a0ebc3cb_59ce38f8",
      "revId": "324ca43cc23d4bc3d32f6f4bcba88813e69334b5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f0dbef0d_33bbc596",
        "filename": "chrome/browser/extensions/api/settings_private/generated_prefs.cc",
        "patchSetId": 7
      },
      "lineNbr": 38,
      "author": {
        "id": 1000191
      },
      "writtenOn": "2018-01-08T22:06:16Z",
      "side": 1,
      "message": "Not done?",
      "parentUuid": "9d8d8107_6413df69",
      "revId": "324ca43cc23d4bc3d32f6f4bcba88813e69334b5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "eb8e1795_58608953",
        "filename": "chrome/browser/extensions/api/settings_private/generated_prefs.cc",
        "patchSetId": 7
      },
      "lineNbr": 38,
      "author": {
        "id": 1003168
      },
      "writtenOn": "2018-01-08T23:45:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f0dbef0d_33bbc596",
      "revId": "324ca43cc23d4bc3d32f6f4bcba88813e69334b5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "81873837_f440dc80",
        "filename": "chrome/browser/extensions/api/settings_private/generated_prefs.cc",
        "patchSetId": 7
      },
      "lineNbr": 48,
      "author": {
        "id": 1000191
      },
      "writtenOn": "2018-01-05T23:47:24Z",
      "side": 1,
      "message": "According to the comment this should be CHECK(impl).",
      "revId": "324ca43cc23d4bc3d32f6f4bcba88813e69334b5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9f21f063_d5895041",
        "filename": "chrome/browser/extensions/api/settings_private/generated_prefs.cc",
        "patchSetId": 7
      },
      "lineNbr": 48,
      "author": {
        "id": 1003168
      },
      "writtenOn": "2018-01-08T20:25:01Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "81873837_f440dc80",
      "revId": "324ca43cc23d4bc3d32f6f4bcba88813e69334b5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9913d767_22dfd804",
        "filename": "chrome/browser/extensions/api/settings_private/prefs_util.cc",
        "patchSetId": 7
      },
      "lineNbr": 502,
      "author": {
        "id": 1000191
      },
      "writtenOn": "2018-01-05T23:47:24Z",
      "side": 1,
      "message": "When will this be null? It seems like in that case we should just test |generated_prefs| in line 511 instead?",
      "revId": "324ca43cc23d4bc3d32f6f4bcba88813e69334b5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7c1252ed_3e9b8b57",
        "filename": "chrome/browser/extensions/api/settings_private/prefs_util.cc",
        "patchSetId": 7
      },
      "lineNbr": 502,
      "author": {
        "id": 1003168
      },
      "writtenOn": "2018-01-08T20:25:01Z",
      "side": 1,
      "message": "Done (for moving check to line 511).\n\nI don\u0027t know when it can be null, but for all GetForBrowserContext calls in this file we always check for null. Probably unit_tests require this.",
      "parentUuid": "9913d767_22dfd804",
      "revId": "324ca43cc23d4bc3d32f6f4bcba88813e69334b5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "52b9fb71_1b6b6583",
        "filename": "chrome/browser/extensions/api/settings_private/prefs_util.cc",
        "patchSetId": 7
      },
      "lineNbr": 620,
      "author": {
        "id": 1000191
      },
      "writtenOn": "2018-01-05T23:47:24Z",
      "side": 1,
      "message": "Same here. if (generated_prefs \u0026\u0026 generated_prefs-\u003eHasPref(..)) ...",
      "revId": "324ca43cc23d4bc3d32f6f4bcba88813e69334b5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "91752801_70fea1ff",
        "filename": "chrome/browser/extensions/api/settings_private/prefs_util.cc",
        "patchSetId": 7
      },
      "lineNbr": 620,
      "author": {
        "id": 1003168
      },
      "writtenOn": "2018-01-08T20:25:01Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "52b9fb71_1b6b6583",
      "revId": "324ca43cc23d4bc3d32f6f4bcba88813e69334b5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f4e2fc9d_57636b87",
        "filename": "chrome/browser/extensions/api/settings_private/settings_private_event_router.cc",
        "patchSetId": 7
      },
      "lineNbr": 113,
      "author": {
        "id": 1000191
      },
      "writtenOn": "2018-01-06T00:01:15Z",
      "side": 1,
      "message": "1. We do need to remove the \"observer\" in the else.\n\n2. The copying of callbacks pattern is unusual and I find it confusing. I think the code will ultimately be simpler of GeneratedPrefs has an Observer class and keeps track of a single observer list, passing |pref_name| in the OnGeneratedPrefChanged event. Then this class could inherit from the Observer and call OnPreferenceChanged. Each GeneratedPref would need a pointer back to the GeneratedPrefs object and inform it of a pref change, but that seems better than having a separate callback list in each pref.\n\nDoes that make sense?",
      "revId": "324ca43cc23d4bc3d32f6f4bcba88813e69334b5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "80877080_9688cc4e",
        "filename": "chrome/browser/extensions/api/settings_private/settings_private_event_router.cc",
        "patchSetId": 7
      },
      "lineNbr": 113,
      "author": {
        "id": 1003168
      },
      "writtenOn": "2018-01-08T20:25:01Z",
      "side": 1,
      "message": "I replaced Callbacks with Observers. I still think it is reasonable to keep separate observer lists in preferences themselves for cleaner code.",
      "parentUuid": "f4e2fc9d_57636b87",
      "revId": "324ca43cc23d4bc3d32f6f4bcba88813e69334b5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}