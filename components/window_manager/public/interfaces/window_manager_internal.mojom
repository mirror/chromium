// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module mojo;

import "ui/mojo/events/input_event_constants.mojom";
import "ui/mojo/events/input_events.mojom";
import "ui/mojo/events/input_key_codes.mojom";
import "ui/mojo/geometry/geometry.mojom";

// WindowManagerInternal is an interface provided by the WindowManager
// exclusively to the ViewManager.
interface WindowManagerInternal {
  SetViewManagerClient(handle<message_pipe> view_manager_client_request);

  // An accelerator registered via AddAccelerator() has been triggered.
  OnAccelerator(mojo.Event event);
};

// WindowManagerInternalClient is an interface provide by the ViewManager
// exclusively to the WindowManager. It provides functionality only available
// to the WindowManager.
interface WindowManagerInternalClient {
  // TODO(sky): this is only used by sky's testing harness. It should be
  // removed.
  DispatchInputEventToViewDEPRECATED(uint32 view_id, mojo.Event event);

  // Sets the native viewport size.
  SetViewportSize(mojo.Size size);

  // Clones the tree rooted at |view_id|. When the animation completes the clone
  // is destroyed.
  // TODO(sky): add actual animation.
  // TODO(sky): I think this only makes sense when destroying (view is
  // already visible), should it be named to indicate this?
  CloneAndAnimate(uint32 view_id);

  // Adds or removes an accelerators. When the ViewManager receives a key event
  // it checks if an accelerator has been registered. If it has, the event is
  // sent to the window manager (OnAccelerator()), if not, the event is sent to
  // the focused view.
  AddAccelerator(mojo.KeyboardCode keyboard_code, mojo.EventFlags flags);
  RemoveAccelerator(mojo.KeyboardCode keyboard_code, mojo.EventFlags flags);
};
