// Copyright 2017 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Next min version: 1

module arc.mojom;

struct ArcTimerArgs {
  // Type of the clock for which a timer needs to be created. This value
  // corresponds to the clock ids used by timerfd_create.
  int32 clock_id;

  // File descriptor to write to when the timer is expired. This indicates to
  // the host that the timer is expired.
  handle expiry_indicator_fd;
};

// Next method ID: 1
interface TimerHost {
  // Creates timers with the given arguments. Returns < 0 on error i.e. one or
  // more timers failed to be created. Returns 0 on success.
  CreateTimers@0(array<ArcTimerArgs> arc_timers_args) => (int32 result);

  // Set timer of type |clock_id| |seconds| + |nanoseconds| in the future.
  // Returns 0 on success and < 0 otherwise.
  SetTimer@1(int32 clock_id, int64 seconds, int64 nanoseconds) => (int32 result);
};

// Next method ID: 1
interface TimerInstance {
  // Establishes full-duplex communication with the host.
  Init@0(TimerHost host_ptr);
};
