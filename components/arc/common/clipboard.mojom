// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Next MinVersion: 2

module arc.mojom;

// Struct to to transfer HTML data
struct ClipDataHTML {
  // Markup text. The real "html"
  string markup;
  // Plain text. Needed when clipboard consumers don't expect markup and prefer
  // plain text instead. Needed in Android side.
  string text;
  // The URL of the markup. Needed in Chrome side.
  string url;
};

// Union for the different contents
union ClipDataContent {
  // Plain text
  string plain_text;
  // HTML
  ClipDataHTML html;
  // Array of opaque data. To transfer things that are already in memory
  array<uint8> blob;
  // File descriptor. To transfer files
  handle file_descriptor;
  // To transfer unsupported types with an error message
  string Unsupported;
};

// The Clip Data to send
struct ClipData {
  // The data is is tranferred: text, html, blob or file descriptor
  ClipDataContent content;
  // The mime type of the data. plain_text and html have implicit mime types,
  // but this is needed for blob and file_descriptor.
  string mime_type;
};

interface ClipboardHost {
  // Tells the host to change its content, usually when the user initiates
  // a 'copy' action.
  SetTextContentDeprecated@0(string text);

  // Tells the host to return its content, usually when the user initiates
  // a 'paste' action or when the instance needs to re-sync its clipboard
  // content with the host. Deprecated
  GetTextContentDeprecated@1();

  // Tells the host to change its content, usually when the user initiates
  // a 'copy' action.
  [MinVersion=1] SetClipContent@2(ClipData data);

  // Tells the host to return its content, usually when the user initiates
  // a 'paste' action or when the instance needs to re-sync its clipboard
  // content with the host.
  [MinVersion=1] GetClipContent@3() => (ClipData data);
};

interface ClipboardInstance {
  // Establishes full-duplex communication with the host.
  Init@0(ClipboardHost host_ptr);

  // Passes the result of ClipboardHost.GetTextContent().
  OnGetTextContentDeprecated@1(string returned_text);

  // Passes the result of ClipboardHost.GetHostClip().
  //[MinVersion=1] OnGetClipContent@3(ClipData data);

  // Tells that the Host clipboard has been updated
  [MinVersion=1] HostClipboardUpdated@4();

};
