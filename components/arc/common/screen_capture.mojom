// Copyright 2017 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Mojo interface for performing screen capture in ChromeOS at the request of
// Android. Android does not have access to the full desktop for capture (it has
// access only to its Windows), so via this IPC mechanism it can request
// permissions to capture the entire desktop and then also perform that capture.

// The original version of this file lives in the Chromium repository at:
// src/components/arc/common/screen_capture.mojom

module arc.mojom;

// Implemented by Chrome in order to allow requesting of permissions to perform
// desktop capture as wel as creating a session for it.
interface ScreenCaptureHost {
  // This will also show the desktop picker in case of multiple displays and
  // will then link that desktop window to the granted permission.
  // displayName is the string that should be used in the UI
  // packageName is what should be used as the permission token
  // returns true if the user accepts, false otherwise
  RequestPermission@0(string displayName, string packageName) => (bool granted);

  // Starts a new capture session, binding the session interface to the passed
  // in session request. The notifier interface passed in will be used to send
  // messages back to Android for  when buffer rendering is complete or when
  // updates are needed by the Chrome rendering engine.
  // packageName should correspond/ to what was passed into the
  //     RequestPermission call
  // width/height should correspond to the size of the buffers used
  // Returns false in the case the permission wass not granted.
  OpenSession@1(ScreenCaptureSession& session,
                ScreenCaptureSessionNotifier notifier,
                string package_name, uint32 width, uint32 height) =>
                (bool success);
};

// Implemented by Chrome for handling an screen capture session.
interface ScreenCaptureSession {
  // Called to set the graphics buffer that the screen capture should be
  // rendered to.
  // graphics_buffer should be a handle to the buffer which corresponds to the
  //     surface being rendered to
  // buffer_id is for tracking completion in the callback through the
  //     ScreenCaptureSessionNotifier
  // stride is the stride in pixels for each row of the buffer.
  SetOutputBuffer@0(handle graphics_buffer, uint64 buffer_id, uint32 stride);
};

// Implemented by Android.
interface ScreenCaptureInstance {
  // Establishes full-duplex communication with the host.
  Init@0(ScreenCaptureHost host_ptr)=>();
};

// Implemented by Android as a callback mechanism.
interface ScreenCaptureSessionNotifier {
  // Called after rendering to the specified buffer is complete by Chrome.
  BufferFinished@0(uint64 buffer_id);

  // This is called when Chrome detects a compositor update but
  // Android is not actively rendering. This will occur if the
  // Android windows are minimized or not animating but Chrome
  // windows are since Androidâ€™s rendering stack does not
  // update if nothing in Android itself is changing.
  ForceUpdate@1();
};