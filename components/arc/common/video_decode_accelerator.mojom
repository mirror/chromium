// Copyright 2017 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file defines the mojo interface between Android and Chromium for video
// decoding. In general, a result of a function in mojo should be returned
// by a passed callback.
// However, we only use callbacks to Reset and Flush and Initialize
// in the present design and don't use for other functions.
// This is mainly because other VDAClient functions and VDA functions are not
// correlated.
// Please don't use this design as a good reference, it is strongly recommended
// in mojom that all the function results are reported by passed callbacks.

module arc.mojom;

import "screen_rect.mojom";
import "video_common.mojom";

// Information of the shared memory bitstream buffer.
struct BitstreamBuffer {
  int32 bitstream_id;
  handle ashmem_fd;
  uint32 offset;
  uint32 bytes_used;
};
// struct BitstreamBuffer {
//   int32 bitstream_id;
//   handle<shared_buffer> memory_handle;
//   uint32 offset;
//   uint32 bytes_used;
// };

struct Picture {
   int32 picture_buffer_id;
   int32 bitstream_id;
   ScreenRect crop_rect;
};

// Format specification of the picture buffer request.
struct PictureBufferFormat {
  uint32 pixel_format;
  uint32 buffer_size;

  // minimal number of buffers required to process the video.
  uint32 min_num_buffers;
  uint32 coded_width;
  uint32 coded_height;
};

// Next MinVersion: 1
// Next method ID: 7
interface VideoDecodeAccelerator {
  [Extensible]
  enum Result {
    SUCCESS = 0,
    ILLEGAL_STATE = 1,
    INVALID_ARGUMENT = 2,
    UNREADABLE_INPUT = 3,
    PLATFORM_FAILURE = 4,
    INSUFFICIENT_RESOURCES = 5,
    RESULT_MAX = 6,
  };

  // Initializes video decoder accelerator with specific video codec profile.
  // The caller needs to wait for the initialization result (returned by
  // callback) before calling any other methods.
  Initialize@0(VideoCodecProfile profile,
               VideoDecodeClient client) => (Result result);

  // Decodes the content in the shared memory of the bitstream buffer. The
  // callee needs to map the the shared memory to read the content and is
  // responsible to release the shared memory by closing the file descriptor.
  Decode@1(BitstreamBuffer bitstream_buffer);

  // Sets the number of output picture buffers.
  AssignPictureBuffers@2(uint32 count);

  // Assigns a buffer to be used by the accelerator with specified
  // |picture_buffer_id|.
  // Call VDA::ImportBufferForPicture with gfx::GpuMemoryBufferHandle
  // created from |dmabuf_fd| and |planes|.
  // This should be preceded by a call to AssignPictureBuffers().
  ImportBufferForPicture@3(int32 picture_buffer_id, handle dmabuf_fd,
                           array<VideoFramePlane> planes);

  // Returns picture buffer with specified |picture_buffer_id| to be reused by
  // the accelerator.
  ReusePictureBuffer@4(int32 picture_buffer_id);

  // Resets the accelerator. When it is done, the callback will be invoked.
  Reset@5() => (Result result);

  // Flushes the accelerator. After all the output buffers pending decode have
  // been returned to client, the callback will be invoked.
  Flush@6() => (Result result);
};

// Next MinVersion: 1
// Next method ID: 4
interface VideoDecodeClient {
  // Callback to tell client how many and what size of buffers to provide.
  ProvidePictureBuffers@0(PictureBufferFormat format);

  // Called to notify the client that |picture| ready to be displayed.
  // The variables in |picture| are |picture_buffer_id|, |bitstream_id| and
  // |crop_rect|. The calls to PictureReady() are in display order and
  // PictureBuffers should be displayed in that order.
  // |crop_rect| specifies the crop rectangle with the picture buffer to be
  // displayed; |bitstream_id| specifies which source BitstreamBuffer the frame
  // was decoded.
  PictureReady@1(Picture picture);

  // Called to notify that decoder has decoded the end of the BitstreamBuffer
  // with specified |bitstream_id|.
  NotifyEndOfBitstreamBuffer@2(int32 bitstream_id);

  // Called when an asynchronous error happens, for example, illegal state,
  // error while decoding the stream, or a platform/system error.
  // The errors in Initialize(), Reset() and Flush(), will not be reported here,
  // but will be returned in its callback function.
  // Note that callbacks of Reset() and Flush() invoke NotifyError()
  // within Android, when they are called with error states.
  NotifyError@3(VideoDecodeAccelerator.Result error);
};
