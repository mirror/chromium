// Copyright 2017 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file defined the mojo interface between Android and Chromium for video
// decoding.

module arc.mojom;

import "video_common.mojom";

// Information of the shared memory bitstream buffer.
struct BitstreamBuffer {
  int32 bitstream_id;
  handle ashmem_fd;
  uint32 offset;
  uint32 bytes_used;
};

// Format specification of the picture buffer request.
struct PictureBufferFormat {
  uint32 pixel_format;
  uint32 buffer_size;

  // minimal number of buffers required to process the video.
  uint32 min_num_buffers;
  uint32 coded_width;
  uint32 coded_height;
};

// Crop information of picture rendering.
struct CropRect {
  int32 left;
  int32 top;
  int32 right;
  int32 bottom;
};

// Next MinVersion: 1
// Next method ID: 7
interface VideoDecodeAccelerator {
  [Extensible]
  enum Result {
    SUCCESS = 0,
    ILLEGAL_STATE = 1,
    INVALID_ARGUMENT = 2,
    UNREADABLE_INPUT = 3,
    PLATFORM_FAILURE = 4,
    INSUFFICIENT_RESOURCES = 5,
    RESULT_MAX = 6,
  };

  // Initializes video decoder accelerator with specific video codec profile.
  // The caller needs to wait for the initialization result (returned by
  // callback) before calling any other methods.
  Initialize@0(VideoCodecProfile profile,
               VideoDecodeClient client) => (Result result);

  // Decodes the content in the shared memory of the bitstream buffer. The
  // callee needs to map the the shared memory to read the content and is
  // responsible to release the shared memory by closing the file descriptor.
  Decode@1(BitstreamBuffer bitstream_buffer);

  // Sets the number of output picture buffers.
  AssignPictureBuffers@2(uint32 count);

  // Assigns a buffer to be used for the accelerator with specified
  // |picture_buffer_id|. It must be successfully bound and then sent to be used
  // by the decoder. Already bound buffers may be reused multiple times without
  // additional bindings via ReusePictureBuffer().
  ImportBufferForPicture@3(int32 picture_buffer_id, handle dmabuf_fd,
                           array<VideoFramePlane> planes);

  // Returns picture buffer with specified |picture_buffer_id| to be reused
  // by the accelerator.
  ReusePictureBuffer@4(int32 picture_buffer_id);

  // Resets the accelerator. When it is done,
  // VideoDecodeClient::NotifyResetDone() will be called.
  Reset@5();

  // Flushes the accelerator. After all the output buffers pending decode have
  // been returned to client, VideoDecodeClient::NotifyFlushDone() will be
  // called.
  Flush@6();
};

// Next MinVersion: 1
// Next method ID: 6
interface VideoDecodeClient {
  // Callback to tell client how many and what size of buffers to provide.
  ProvidePictureBuffers@0(PictureBufferFormat format);

  // Called to notify the client that the PictureBuffer with specified
  // |picture_buffer_id| contains a decoded frame ready to be displayed.
  // The calls to PictureReady() are in display order and
  // PictureBuffers should be displayed in that order.
  // Picture crop window |crop_rect| and source BitstreamBuffer ID
  // |bitstream_id| are also provided along PictureReady().
  PictureReady@1(int32 picture_buffer_id, int32 bitstream_id,
                 CropRect crop_rect);

  // Called to notify that decoder has decoded the end of the BitstreamBuffer
  // with specified |bitstream_id|.
  NotifyEndOfBitstreamBuffer@2(int32 bitstream_id);

  // Called as a completion notification for Reset().
  NotifyResetDone@3();

  // Called as a completion notification for Flush().
  NotifyFlushDone@4();

  // Called when an asynchronous error happens. The errors in Initialize()
  // will not be reported here, but will be returned in its callback function.
  NotifyError@5(VideoDecodeAccelerator.Result error);
};
