// Copyright 2017 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

/* DO NOT EDIT. Generated from {{module.path}} */

{%- if variant -%}
{%-   set variant_path = "%s-%s"|format(module.path, variant) -%}
{%- else -%}
{%-   set variant_path = module.path -%}
{%- endif %}

{%- import "module_macros.tmpl" as module_macros %}

#include "{{variant_path}}_c.h"

#include "base/logging.h"
#include "base/macros.h"
#include "testing/gtest/include/gtest/gtest.h"


{#--- Interface Stubs -#}
{%  for interface in interfaces %}

{% set test_class_name = interface.name %}

// Test of {{interface.name}} interface.
class {{test_class_name}}Test : public ::testing::Test {
 protected:
  void SetUp() override {
  }

  void TearDown() override {
  }

  {{test_class_name}}Test() {}
  ~{{test_class_name}}Test() override {}

 public:
{%- for method in interface.methods -%}
  bool {{method.name}}_called_ = false;
{%- endfor %}

 private:
  DISALLOW_COPY_AND_ASSIGN({{test_class_name}}Test);
};

// Implementation of {{interface.name}} methods for testing.
{%- for method in interface.methods -%}
{{module_macros.declare_c_return(method)}}
 Test{{interface.name}}_{{method.name}}({{interface.name}}Ptr self
{%-   if method.parameters %}, {{module_macros.declare_c_params("", method.parameters)}}
{%-   endif %}) {
  CHECK(self);
  {{interface.name}}Context context = {{interface.name}}_GetContext(self);
  {{interface.name}}Test* test = static_cast<{{interface.name}}Test*>(context);
  CHECK(test);
  test->{{method.name}}_called_ = true;
  {%-  if method.response_parameters and method.sync %}
    {% set return_param = method.response_parameters|first %}
    return static_cast<{{return_param.kind|c_wrapper_type}}>(0);
  {%- endif %}
}
{%- endfor %}

// Test that {{test_class_name}} stub forwards function calls as expected.
TEST_F({{test_class_name}}Test, TestCreate) {
  {{interface.name}}Ptr test = {{interface.name}}_CreateStub(this,
{%- for method in interface.methods -%}
      Test{{interface.name}}_{{method.name}}
{%-   if not loop.last %}, {% endif %}
{%- endfor %}
  );
  CHECK(test);
{%- for method in interface.methods -%}
{%-  if not method.parameters %}
        {{interface.name}}_{{method.name}}(test);
        CHECK({{method.name}}_called_);
{%-  else %}
        CHECK(!{{method.name}}_called_);
{%-  endif %}
{%- endfor %}


  {{interface.name}}_Destroy(test);
}

{%- endfor %}

