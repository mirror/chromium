# Copyright 2015 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/config/features.gni")
import("//build/config/nacl/config.gni")
import("//testing/test.gni")

assert(enable_nacl)

source_set("loader") {
  sources = [
    "nacl_ipc_adapter.cc",
    "nacl_ipc_adapter.h",
    "nacl_listener.cc",
    "nacl_listener.h",
    "nacl_main.cc",
    "nacl_main_platform_delegate.h",
    "nacl_main_platform_delegate_linux.cc",
    "nacl_main_platform_delegate_mac.mm",
    "nacl_main_platform_delegate_win.cc",
    "nacl_trusted_listener.cc",
    "nacl_trusted_listener.h",
    "nacl_validation_db.h",
    "nacl_validation_query.cc",
    "nacl_validation_query.h",
  ]

  deps = [
    "//base",
    "//base:base_static",
    "//components/nacl/common",
    "//content/public/common",
    "//crypto",
    "//ipc",
    "//native_client/src/trusted/service_runtime:sel_main_chrome",
    "//ppapi/c",
    "//ppapi/proxy:ipc",
    "//ppapi/shared_impl",
    "//sandbox",
    "//third_party/mojo/src/mojo/edk/system",
  ]

  if (enable_nacl_untrusted) {
    data_deps = [
      "//ppapi/native_client:irt",
    ]
  }
  if (enable_pnacl) {
    data_deps +=
        [ "//ppapi/native_client/src/untrusted/pnacl_support_extension" ]
  }
}

# TODO(GYP): Delete this after we've converted everything to GN.
# The _run targets exist only for compatibility w/ GYP.
group("nacl_loader_unittests_run") {
  testonly = true
  deps = [
    ":nacl_loader_unittests",
  ]
}

test("nacl_loader_unittests") {
  sources = [
    "nacl_ipc_adapter_unittest.cc",
    "nacl_validation_query_unittest.cc",
    "run_all_unittests.cc",
  ]

  deps = [
    ":loader",
    "//base/test:test_support",
    "//ipc:test_support",
    "//ppapi/c",
    "//testing/gtest",
  ]
}

if (is_linux) {
  executable("nacl_helper") {
    sources = [
      "nacl_helper_linux.cc",
      "nacl_helper_linux.h",
    ]

    deps = [
      ":loader",
      "//base",
      "//build/config/sanitizers:deps",
      "//components/nacl/common:switches",
      "//components/nacl/loader/sandbox_linux",
      "//content/public/common",
      "//crypto",
      "//ipc",
      "//sandbox/linux:sandbox_services",
    ]

    cflags = [ "-fPIE" ]

    ldflags = [ "-pie" ]

    data_deps = [
      "//native_client/src/trusted/service_runtime/linux:bootstrap",
    ]
  }

  # For setting up nacl_helper.
  source_set("nacl_helper_integration") {
    public = [
      "nacl_helper_linux.h",
    ]
    data_deps = [
      ":nacl_helper",
    ]
  }
}

if (is_nacl_nonsfi) {
  executable("nacl_helper_nonsfi_nexe") {
    output_name = "nacl_helper_nonsfi"
    set_sources_assignment_filter([])
    sources = [
      # TODO(brettw) can this just depend on //components/nacl/common?
      "../common/nacl_messages.cc",
      "../common/nacl_messages.h",
      "../common/nacl_types.cc",
      "../common/nacl_types.h",
      "../common/nacl_types_param_traits.cc",
      "../common/nacl_types_param_traits.h",
      "nacl_helper_linux.cc",
      "nacl_helper_linux.h",
      "nacl_trusted_listener.cc",
      "nacl_trusted_listener.h",
      "nonsfi/nonsfi_listener.cc",
      "nonsfi/nonsfi_listener.h",
      "nonsfi/nonsfi_main.cc",
      "nonsfi/nonsfi_main.h",
    ]
    deps = [
      ":nacl_helper_nonsfi_sandbox",
      "//base",
      "//components/nacl/common:switches",
      "//components/tracing",
      "//content",
      "//ipc",
      "//native_client/src/nonsfi/irt:nacl_sys_private",
      "//native_client/src/nonsfi/loader:elf_loader",

      # Normally libnacl is included implicitly by libc and is part of the
      # toolchain. But //build/config/nacl:compiler uses -nodefaultlibs and so
      # omits the default libnacl. When the nonsfi toolchain is more complete
      # and that kludge is no longer required, this dependency should be
      # removed.
      "//native_client/src/untrusted/nacl",
      "//ppapi/proxy",
      "//sandbox/linux:sandbox",
    ]
  }

  source_set("nacl_helper_nonsfi_sandbox") {
    set_sources_assignment_filter([])
    sources = [
      "nonsfi/nonsfi_sandbox.cc",
      "nonsfi/nonsfi_sandbox.h",
      "sandbox_linux/nacl_sandbox_linux.cc",
      "sandbox_linux/nacl_sandbox_linux.h",
    ]
    deps = [
      "//base",
      "//components/nacl/common:switches",
      "//content",
      "//sandbox/linux:sandbox",
      "//sandbox/linux:sandbox_services_headers",
    ]
  }

  copy("nacl_helper_nonsfi_copy") {
    sources = [
      "${root_out_dir}/nacl_helper_nonsfi",
    ]
    outputs = [
      "${root_build_dir}/{{source_file_part}}",
    ]
    deps = [
      ":nacl_helper_nonsfi_nexe",
    ]
  }
}

group("helper_nonsfi") {
  deps = [
    ":nacl_helper_nonsfi_copy(//build/toolchain/nacl:newlib_pnacl_nonsfi)",
  ]
}
