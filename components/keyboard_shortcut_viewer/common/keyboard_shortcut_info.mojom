// Copyright 2017 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module keyboard_shortcut_viewer.mojom;

// Metadata about a keyboard shortcut. Each accelerator has a metadata with
// three basic strings to describe its categories, description, and shortcut.
// For example, a shortcut with description string of "Go to previous page in
// your browsing history" has shortcut string of "Alt + left arrow". The
// category string is "WINDOWS".
// To make the replacement parts highlighted in the UI, in this case, the I18n
// string of the shortcut is "<ph name="modifier">$1</ph> +
// <ph name="key">$2</ph>". The l10n_util::GetStringFUTF16() will return the
// offsets of the replacements, which are used to generate style ranges to
// insert bubbles for the modifiers and key. The first placeholder (modifier)
// will be replaced by text "Alt" for search. The second placeholder (key) will
// be replaced by text "left arrow" so that users can search by "left" and/or
// "arrow". But the UI representation of the key is an icon of "left arrow".
struct KeyboardShortcutItemInfo {
  // The ids of the I18n strings of the categories this shortcut belongs to.
  array<int32> category_ids;

  // The |description_id| associated string describes what the keyboard shortcut
  // can do.
  int32 description_id;

  // The |shortcut_id| associated string describes what the shortcut keys are.
  int32 shortcut_id;

  // |replacement_ids| contains the values of ui::KeyboardCode.
  // The |shortcut_id| associated string is I18n, it could be partially replaced
  // by texts for modifier and key, where the corrensponding texts will be
  // determined by the values of ui::KeyboardCode in the KeyboardShortcutViewer.
  array<int32> replacement_ids;

  // For final visual display on the UI, the representation of key could be a
  // text or an icon.
  // |ShortcutReplacementType| will hold all the neccessary info for UI
  // representation. E.g. kIcon will display the key in form of an icon.
  array<ShortcutReplacementType> replacement_types;
};

// Shortcut string can be partially replaced by different replacements with
// modifiers and keys. The modifier is always in text form. The key could be
// either text or icon. For a key to be displayed in icon form, we still need to
// replace the string with text for searchability.
enum ShortcutReplacementType {
  kText = 0,
  kIcon,
};

// Allows a client (e.g. Chrome browser) to request ash to show the keyboard
// shortcut viewer.
interface KeyboardShortcutViewerController {
  // Sets the client interface.
  SetClient(KeyboardShortcutViewerControllerClient client);

  // Show the keyboard shortcut viewer.
  OpenKeyboardShortcutViewer();
};

// Allows ash to get a client (e.g. Chrome browser) shortcuts metadata. The
// client later will push the shortcuts metadata to ash and show the keyboard
// shortcut viewer with all available shortcuts at both ash and client sides.
interface KeyboardShortcutViewerControllerClient {
  // Gets the keyboard shortcuts metadata on the client side.
  GetKeyboardShortcutsInfo() =>
      (array<KeyboardShortcutItemInfo> shortcuts_info);
};
