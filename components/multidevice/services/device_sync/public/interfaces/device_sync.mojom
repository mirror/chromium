// Copyright 2017 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module device_sync.mojom;

// Used to establish a BLE communication channel between two devices. To
// create the BLE channel, both devices must possess the other's BeaconSeeds.
struct BeaconSeed {
  string data;
  int64 start_time_millis;
  int64 end_time_millis;
};

// Metadata describing a remote device with which the current device can
// communicate.
struct RemoteDevice {
  // Public key used to authenticate a communication channel.
  string public_key;

  // Identifier which is unique to each device.
  string device_id;

  // Identifier for the user to whom this device is registered.
  string user_id;

  // Human-readable device name; by default, this is the name of the device
  // model, but this value is editable.
  string device_name;

  // 6-byte MAC address expressed in the form of colon-seperated hexadeciam
  // bytes (e.g., "AB:CD:EF;12:34:56"). This field is expected to be empty
  // unless the user has opted into EasyUnlock for this device.
  string bluetooth_address;

  // True if this device can enable a Wi-Fi hotspot to support Instant
  // Tethering (i.e., the device supports mobile data and its model supports the
  // feature).
  bool mobile_hotspot_supported;

  // Seeds belonging to the device. Each seed has start and end timestamps which
  // indicate how long the seed is valid, and each device has enough associated
  // seeds to keep the device connectable for over 30 days. If no new device
  // metadata synced for over 30 days, it is possible that a connection will not
  // be able to be established over BLE.
  array<BeaconSeed> beacon_seeds;
};

struct SetCapabilityResponse {
  bool success;
  string error;  // Only set when success is false.
};

struct FindEligibleDevicesResponse {
  bool success;
  bool error;  // Only set when success is false.
  array<string> device_ids;  // Only set when success is true.
};

struct IsCapabilityPromotableResponse {
  bool success;
  bool error;  // Only set when success is false.
  bool is_promotable;  // Only set when success is true.
};

// Properties associated with a device which can be set and retrieved by calls
// to the back-end.
// TODO(khorimoto): Add additional capabilities, including the Tether
//                  capability.
enum RemoteDeviceCapability {
  UNLOCK_KEY,
};

interface DeviceSyncObserver {
  // Invoked when the current device has finished enrolling itself (i.e., when
  // it has contacted the back-end to provide device metadata). Devices must
  // enroll themselves before other device can establish connections to them,
  // and they continue to re-enroll themselves on a periodic basis after that.
  OnEnrollmentFinished(bool success);

  // Invoked when new devices have been synced from the back-end.
  OnDevicesSynced(bool success);
};

// TODO(khorimoto): Add a "debug info" struct which can be returned via an API
//                  function. This will be useful for debug UIs such as
//                  chrome://proximity-auth.
interface DeviceSync {
  // Triggers an enrollment. Results of the enrollment will be relayed via the
  // OnEnrollmentFinished() observer function.
  ForceEnrollmentNow();

  // Triggers a device sync. Results of the sync will be relayed via the
  // OnDevicesSynced() observer function.
  ForceSyncNow();

  // Returns devices which have been synced from the back-end.
  [Sync]
  GetSyncedDevices() => (array<RemoteDevice> devices);

  // Enables or disables a capability. This function triggers a network call,
  // resulting in an asynchronous response.
  SetCapabilityEnabled(
      string device_id,
      RemoteDeviceCapability capability,
      bool enabled) => (SetCapabilityResponse response);

  // Fetches IDs of devices associated with the current user that are eligible
  // for the supplied RemoteDeviceCapability. This function triggers a network
  // call, resulting in an asynchronous response.
  FindEligibleDevicesForCapability(RemoteDeviceCapability capability)
      => (FindEligibleDevicesResponse response);

  // Determines whether a device is promotable for a certain capability. This
  // function triggers a network call, resulting in an asynchronous response.
  IsCapabilityPromotable(string device_id, RemoteDeviceCapability capability)
      => (IsCapabilityPromotableResponse response);

  // Returns the public key of the current device. Note that a RemoteDevice for
  // the current device is returned by GetSyncedDevices().
  [Sync]
  GetUserPublicKey() => (string public_key);

  AddObserver(DeviceSyncObserver observer);
};
