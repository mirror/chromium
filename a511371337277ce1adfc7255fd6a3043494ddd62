{
  "comments": [
    {
      "key": {
        "uuid": "8a9ff13a_6fc21984",
        "filename": "chrome/browser/chrome_site_per_process_browsertest.cc",
        "patchSetId": 18
      },
      "lineNbr": 738,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-06-04T10:27:46Z",
      "side": 1,
      "message": "Out of curiosity, what\u0027s the purpose in writing this out?",
      "range": {
        "startLine": 738,
        "startChar": 2,
        "endLine": 738,
        "endChar": 48
      },
      "revId": "a511371337277ce1adfc7255fd6a3043494ddd62",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "acf58739_658e6b1a",
        "filename": "chrome/browser/chrome_site_per_process_browsertest.cc",
        "patchSetId": 18
      },
      "lineNbr": 738,
      "author": {
        "id": 1109754
      },
      "writtenOn": "2017-06-05T08:04:33Z",
      "side": 1,
      "message": "Ah yes, not needed, since we are inline here.",
      "parentUuid": "8a9ff13a_6fc21984",
      "range": {
        "startLine": 738,
        "startChar": 2,
        "endLine": 738,
        "endChar": 48
      },
      "revId": "a511371337277ce1adfc7255fd6a3043494ddd62",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c0d30f51_0045c101",
        "filename": "chrome/browser/chrome_site_per_process_browsertest.cc",
        "patchSetId": 18
      },
      "lineNbr": 758,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-06-04T10:27:46Z",
      "side": 1,
      "message": "Nit: #include \u003cutility\u003e",
      "range": {
        "startLine": 758,
        "startChar": 31,
        "endLine": 758,
        "endChar": 40
      },
      "revId": "a511371337277ce1adfc7255fd6a3043494ddd62",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c64fa365_87dce127",
        "filename": "chrome/browser/chrome_site_per_process_browsertest.cc",
        "patchSetId": 18
      },
      "lineNbr": 758,
      "author": {
        "id": 1109754
      },
      "writtenOn": "2017-06-05T08:04:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c0d30f51_0045c101",
      "range": {
        "startLine": 758,
        "startChar": 31,
        "endLine": 758,
        "endChar": 40
      },
      "revId": "a511371337277ce1adfc7255fd6a3043494ddd62",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a550de39_adf7d207",
        "filename": "chrome/browser/chrome_site_per_process_browsertest.cc",
        "patchSetId": 18
      },
      "lineNbr": 778,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-06-04T10:27:46Z",
      "side": 1,
      "message": "Note that |process_host_| can be reassigned--is the intention here to enforce that only const methods on RPH are called, or to enforce that this field is constant for the lifetime of an instance?",
      "range": {
        "startLine": 778,
        "startChar": 2,
        "endLine": 778,
        "endChar": 35
      },
      "revId": "a511371337277ce1adfc7255fd6a3043494ddd62",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "36fda61f_fc47d617",
        "filename": "chrome/browser/chrome_site_per_process_browsertest.cc",
        "patchSetId": 18
      },
      "lineNbr": 778,
      "author": {
        "id": 1109754
      },
      "writtenOn": "2017-06-05T08:04:33Z",
      "side": 1,
      "message": "\u003e Note that |process_host_| can be reassigned--\n\nnot in this test, though.\n\n\u003e is the intention here to enforce that only const methods on RPH are called, or to enforce that this field is constant for the lifetime of an instance?\n\nThe later.  Still, looking back at the previous test fixture, no const there.  Made them the same.",
      "parentUuid": "a550de39_adf7d207",
      "range": {
        "startLine": 778,
        "startChar": 2,
        "endLine": 778,
        "endChar": 35
      },
      "revId": "a511371337277ce1adfc7255fd6a3043494ddd62",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "00339a2b_e20de411",
        "filename": "chrome/browser/chrome_site_per_process_browsertest.cc",
        "patchSetId": 18
      },
      "lineNbr": 790,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-06-04T10:27:46Z",
      "side": 1,
      "message": "Similar question: since this is just the default behavior, do we need to write this out?",
      "range": {
        "startLine": 789,
        "startChar": 0,
        "endLine": 790,
        "endChar": 64
      },
      "revId": "a511371337277ce1adfc7255fd6a3043494ddd62",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fd0df7f6_d50b4cc3",
        "filename": "chrome/browser/chrome_site_per_process_browsertest.cc",
        "patchSetId": 18
      },
      "lineNbr": 790,
      "author": {
        "id": 1109754
      },
      "writtenOn": "2017-06-05T08:04:33Z",
      "side": 1,
      "message": "Cargo culted from the previous test fixture.   Since both fixtures are inline defining their ChromeContentBrowserClient class, removed the dtor definition from both fixtures.",
      "parentUuid": "00339a2b_e20de411",
      "range": {
        "startLine": 789,
        "startChar": 0,
        "endLine": 790,
        "endChar": 64
      },
      "revId": "a511371337277ce1adfc7255fd6a3043494ddd62",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5cd80d5f_f8aa9801",
        "filename": "chrome/browser/chrome_site_per_process_browsertest.cc",
        "patchSetId": 18
      },
      "lineNbr": 807,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-06-04T10:27:46Z",
      "side": 1,
      "message": "Hmm, I didn\u0027t know this--basically, the last registration for a given interface name wins?",
      "range": {
        "startLine": 807,
        "startChar": 14,
        "endLine": 807,
        "endChar": 26
      },
      "revId": "a511371337277ce1adfc7255fd6a3043494ddd62",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8f01f392_5c2abe83",
        "filename": "chrome/browser/chrome_site_per_process_browsertest.cc",
        "patchSetId": 18
      },
      "lineNbr": 807,
      "author": {
        "id": 1109754
      },
      "writtenOn": "2017-06-05T08:04:33Z",
      "side": 1,
      "message": "\u003e Hmm, I didn\u0027t know this--basically, the last registration for a given interface name wins?\n\nYeap.",
      "parentUuid": "5cd80d5f_f8aa9801",
      "range": {
        "startLine": 807,
        "startChar": 14,
        "endLine": 807,
        "endChar": 26
      },
      "revId": "a511371337277ce1adfc7255fd6a3043494ddd62",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "32b107bb_55ce1028",
        "filename": "chrome/browser/renderer_host/chrome_render_widget_host_view_mac_delegate.mm",
        "patchSetId": 18
      },
      "lineNbr": 178,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-06-04T10:27:46Z",
      "side": 1,
      "message": "Just to help me understand: is this object 1-per RVH? And we could have multiple of these for the same WebContents if there\u0027s an OOPIF?",
      "range": {
        "startLine": 177,
        "startChar": 38,
        "endLine": 178,
        "endChar": 46
      },
      "revId": "a511371337277ce1adfc7255fd6a3043494ddd62",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ebecdb41_e7005108",
        "filename": "chrome/browser/renderer_host/chrome_render_widget_host_view_mac_delegate.mm",
        "patchSetId": 18
      },
      "lineNbr": 178,
      "author": {
        "id": 1109754
      },
      "writtenOn": "2017-06-05T08:04:33Z",
      "side": 1,
      "message": "\u003e Just to help me understand: is this object 1-per RVH?\n\n1-per webContents (tab).\n\n\u003e And we could have multiple of these for the same WebContents if there\u0027s an OOPIF?\n\nNope.  1 of these per WebContents (tab).",
      "parentUuid": "32b107bb_55ce1028",
      "range": {
        "startLine": 177,
        "startChar": 38,
        "endLine": 178,
        "endChar": 46
      },
      "revId": "a511371337277ce1adfc7255fd6a3043494ddd62",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b46d220f_563d6c5b",
        "filename": "chrome/browser/renderer_host/chrome_render_widget_host_view_mac_delegate.mm",
        "patchSetId": 18
      },
      "lineNbr": 178,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-06-06T04:11:45Z",
      "side": 1,
      "message": "Hmm, so this object destroyed and recreated if the main frame needs to swap processes? Would it make sense to make this scoped to a WebContents in the long-term?",
      "parentUuid": "ebecdb41_e7005108",
      "range": {
        "startLine": 177,
        "startChar": 38,
        "endLine": 178,
        "endChar": 46
      },
      "revId": "a511371337277ce1adfc7255fd6a3043494ddd62",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "12a6ae77_a9647dc4",
        "filename": "chrome/browser/renderer_host/chrome_render_widget_host_view_mac_delegate.mm",
        "patchSetId": 18
      },
      "lineNbr": 178,
      "author": {
        "id": 1109754
      },
      "writtenOn": "2017-06-06T05:21:37Z",
      "side": 1,
      "message": "\u003e Hmm, so this object destroyed and recreated if the main frame needs to swap processes?\n\nDunno if that follows or not, I\u0027m not a Mac person, sorry.",
      "parentUuid": "b46d220f_563d6c5b",
      "range": {
        "startLine": 177,
        "startChar": 38,
        "endLine": 178,
        "endChar": 46
      },
      "revId": "a511371337277ce1adfc7255fd6a3043494ddd62",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4a9da9b6_6cf1ee4c",
        "filename": "chrome/browser/renderer_host/chrome_render_widget_host_view_mac_delegate.mm",
        "patchSetId": 18
      },
      "lineNbr": 178,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-06-06T17:46:38Z",
      "side": 1,
      "message": "groby@ or rouslan@, any ideas here?",
      "parentUuid": "12a6ae77_a9647dc4",
      "range": {
        "startLine": 177,
        "startChar": 38,
        "endLine": 178,
        "endChar": 46
      },
      "revId": "a511371337277ce1adfc7255fd6a3043494ddd62",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a6f11ee7_8389a080",
        "filename": "components/spellcheck/common/spellcheck.mojom",
        "patchSetId": 18
      },
      "lineNbr": 60,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-06-04T10:27:46Z",
      "side": 1,
      "message": "One thing that\u0027s a little confusing about this naming is that SpellCheckPanel and SpellCheckPanelHost don\u0027t have a 1:1 correspondence: SpellCheckPanelHost is one per RenderProcessHost, while SpellCheckPanel is one per RenderFrame.\n\nI wonder if we can name SpellCheckPanelHost something else to make it clear that they\u0027re not in a 1:1 relationship?",
      "range": {
        "startLine": 60,
        "startChar": 10,
        "endLine": 60,
        "endChar": 25
      },
      "revId": "a511371337277ce1adfc7255fd6a3043494ddd62",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4dfa0ca7_544de2ea",
        "filename": "components/spellcheck/common/spellcheck.mojom",
        "patchSetId": 18
      },
      "lineNbr": 60,
      "author": {
        "id": 1109754
      },
      "writtenOn": "2017-06-05T08:04:33Z",
      "side": 1,
      "message": "\u003e One thing that\u0027s a little confusing about this naming is that SpellCheckPanel and SpellCheckPanelHost don\u0027t have a 1:1 correspondence: SpellCheckPanelHost is one per RenderProcessHost, while SpellCheckPanel is one per RenderFrame.\n\u003e \n\nThe OOPIF world we find ourselves is a bit confusing :), yeah they are not 1:1\n\n\u003e I wonder if we can name SpellCheckPanelHost something else to make it clear that they\u0027re not in a 1:1 relationship?\n\nNot sure.  I\u0027m ok with the name, I have used this host-side and render-side naming split everywhere else in this mojo file, so I\u0027d like to stick with that.\n\nAlso, the documentation does begin \"Render frame interface exposed to the browser ...\", which does imply one (browser) to many (render frame) ...\n\nIn the reverse direction. \"Browser process interface exposed to the renderer ...\", meaning any renderer, or any part of said renderer including render frames.",
      "parentUuid": "a6f11ee7_8389a080",
      "range": {
        "startLine": 60,
        "startChar": 10,
        "endLine": 60,
        "endChar": 25
      },
      "revId": "a511371337277ce1adfc7255fd6a3043494ddd62",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "81511579_bebd4dc7",
        "filename": "components/spellcheck/common/spellcheck.mojom",
        "patchSetId": 18
      },
      "lineNbr": 60,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-06-06T04:11:45Z",
      "side": 1,
      "message": "I think there\u0027s some value to being consistent with naming conventions used throughout the rest of Chrome. Traditionally, there\u0027s a 1:1 FooHost : Foo IPC relationship, and it would be really nice if we could keep that: it\u0027s true that we can get this information from the comments, but it\u0027d be even nicer if it was apparent in the name.",
      "parentUuid": "4dfa0ca7_544de2ea",
      "range": {
        "startLine": 60,
        "startChar": 10,
        "endLine": 60,
        "endChar": 25
      },
      "revId": "a511371337277ce1adfc7255fd6a3043494ddd62",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "444053ab_d808a87f",
        "filename": "components/spellcheck/common/spellcheck.mojom",
        "patchSetId": 18
      },
      "lineNbr": 60,
      "author": {
        "id": 1109754
      },
      "writtenOn": "2017-06-06T05:21:37Z",
      "side": 1,
      "message": "\u003e I think there\u0027s some value to being consistent with naming conventions used throughout the rest of Chrome. Traditionally, there\u0027s a 1:1 FooHost : Foo IPC relationship, \n\nWell that wasn\u0027t true of the spelling IPC being converted here. They were all calling into a browser message filter (many to 1).\n\n\u003e and it would be really nice if we could keep that: it\u0027s true that we can get this information from the comments, but it\u0027d be even nicer if it was apparent in the name.\n\nI am using Host to mean browser, and these interfaces have mojo binding set members, which is many to one and common in mojo.  Suggestions for alternative names welcome.",
      "parentUuid": "81511579_bebd4dc7",
      "range": {
        "startLine": 60,
        "startChar": 10,
        "endLine": 60,
        "endChar": 25
      },
      "revId": "a511371337277ce1adfc7255fd6a3043494ddd62",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8ebdae6c_f38d27a9",
        "filename": "third_party/WebKit/Source/core/editing/spellcheck/SpellChecker.cpp",
        "patchSetId": 18
      },
      "lineNbr": 121,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-06-04T10:27:46Z",
      "side": 1,
      "message": "Is this just for tests? What\u0027s the reason this might not be set?",
      "range": {
        "startLine": 120,
        "startChar": 0,
        "endLine": 121,
        "endChar": 37
      },
      "revId": "a511371337277ce1adfc7255fd6a3043494ddd62",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c7455986_7b6b00c0",
        "filename": "third_party/WebKit/Source/core/editing/spellcheck/SpellChecker.cpp",
        "patchSetId": 18
      },
      "lineNbr": 121,
      "author": {
        "id": 1109754
      },
      "writtenOn": "2017-06-05T08:04:33Z",
      "side": 1,
      "message": "\u003e Is this just for tests? \n\nNot just for tests ...\n\n\u003e What\u0027s the reason this might not be set?\n\n... when the OS platform doesn\u0027t have a spelling panel.",
      "parentUuid": "8ebdae6c_f38d27a9",
      "range": {
        "startLine": 120,
        "startChar": 0,
        "endLine": 121,
        "endChar": 37
      },
      "revId": "a511371337277ce1adfc7255fd6a3043494ddd62",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "34c603cb_f35bd694",
        "filename": "third_party/WebKit/Source/core/editing/spellcheck/SpellChecker.cpp",
        "patchSetId": 18
      },
      "lineNbr": 121,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-06-06T04:11:45Z",
      "side": 1,
      "message": "Is it possible to use BUILDFLAG(SPELLCHECK_PANEL) to #ifdef this out? It seems like we should be consistent about how we treat this throughout the entire stack: right now, it\u0027s #ifdef\u0027d out in content, but Blink needs to turn it into a no-op.",
      "parentUuid": "c7455986_7b6b00c0",
      "range": {
        "startLine": 120,
        "startChar": 0,
        "endLine": 121,
        "endChar": 37
      },
      "revId": "a511371337277ce1adfc7255fd6a3043494ddd62",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "22a0517d_a3f72195",
        "filename": "third_party/WebKit/Source/core/editing/spellcheck/SpellChecker.cpp",
        "patchSetId": 18
      },
      "lineNbr": 121,
      "author": {
        "id": 1109754
      },
      "writtenOn": "2017-06-07T14:45:28Z",
      "side": 1,
      "message": "\u003e Is it possible to use BUILDFLAG(SPELLCHECK_PANEL) to #ifdef this out?\n\nPossible, but this is core/ code and adding that #ifdef is a layering violation: adding platform or build flag specific #ifdef in core/.\n\n+kentaro@, this is the example I what I was discussing with you in the Onion Soup 2.0 document.  What\u0027s your view on the above?\n\n\u003e It seems like we should be consistent about how we treat this throughout the entire stack: right now, it\u0027s #ifdef\u0027d out in content, but Blink needs to turn it into a no-op.\n\nUse of the no-op classes seems common, at least in my looking at core/loader/EmptyClients.h, and avoids layering violations.\n\nThe core/editing/spelling code used an no-op EmptyClients class, and the concrete implementation, that exposes the IPC (now Mojo), is provided to Blink by RenderFrame, guarded by BUILDFLAG #ifdef.\n\nBeing \"#ifdef\u0027d out in content\" is expected, but we should not be adding such #ifdef to core/ core imho, core/ is platform agnostic.",
      "parentUuid": "34c603cb_f35bd694",
      "range": {
        "startLine": 120,
        "startChar": 0,
        "endLine": 121,
        "endChar": 37
      },
      "revId": "a511371337277ce1adfc7255fd6a3043494ddd62",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0c5de409_9bdd2108",
        "filename": "third_party/WebKit/Source/core/editing/spellcheck/SpellChecker.cpp",
        "patchSetId": 18
      },
      "lineNbr": 121,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-06-07T23:26:13Z",
      "side": 1,
      "message": "I commented on the Onion Soup 2.0 doc as well, but I think see #ifdefs in core as being fundamentally bad. It\u0027s already used in core in a number of places (for example see https://cs.chromium.org/search/?q\u003d%22OS(%22+file:WebKit/Source/core+package:%5Echromium$\u0026type\u003dcs), and it makes a simple rule for how platform-specific things should be guarded. It will also make platforms that care heavily about size happier: admittedly, this object is pretty small, but if we can omit it, that\u0027s still strictly better.\n\nFor this particular BUILDFLAG, I talked to brettw@, and he mentioned that there\u0027s already a features target for buildflags that in both browser and renderer: third_party/WebKit/public:public_features",
      "parentUuid": "22a0517d_a3f72195",
      "range": {
        "startLine": 120,
        "startChar": 0,
        "endLine": 121,
        "endChar": 37
      },
      "revId": "a511371337277ce1adfc7255fd6a3043494ddd62",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6d67dadb_7c5f6c74",
        "filename": "third_party/WebKit/Source/core/editing/spellcheck/SpellChecker.cpp",
        "patchSetId": 18
      },
      "lineNbr": 121,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2017-06-08T06:24:28Z",
      "side": 1,
      "message": "My opinion would be it\u0027s fine to use BUILDFLAG in core/. core/ already uses a lot of platform-specific knowledge via Platform::xxx() APIs. BUILDFLAG seems like a similar thing to me.",
      "parentUuid": "0c5de409_9bdd2108",
      "range": {
        "startLine": 120,
        "startChar": 0,
        "endLine": 121,
        "endChar": 37
      },
      "revId": "a511371337277ce1adfc7255fd6a3043494ddd62",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3b3a90d1_f905a14e",
        "filename": "third_party/WebKit/Source/core/editing/spellcheck/SpellChecker.cpp",
        "patchSetId": 18
      },
      "lineNbr": 121,
      "author": {
        "id": 1109754
      },
      "writtenOn": "2017-06-08T14:36:24Z",
      "side": 1,
      "message": "\u003e My opinion would be it\u0027s fine to use BUILDFLAG in core/. core/ already uses a lot of platform-specific knowledge via Platform::xxx() APIs.\n\nPlatform API are meant to conceal platform difference from core/ so that core/ can\u0027t gain knowledge of the differences.  core/ implements the web platform: core DOM, core HTML, the specs that define the web platform, in a platform agnostic way.\n\nIf we are exposing platform differences explicitly to core/, well we already know that that leads to an unhappy place if allowed to continue more broadly [1] given our project\u0027s history.\n\n\u003e BUILDFLAG seems like a similar thing to me.\n\nAnd exactly the same as ENABLE flags since before the fork.  First order of business post-fork was to remove build and platform-dependent #ifdef from our code (aka ENABLE flags).  Adam\u0027s announcement of the Blink fork was short and sweet:\n\nhttps://groups.google.com/a/chromium.org/forum/#!searchin/blink-dev/Removing$20$23ifdefs./blink-dev/2DzxYVK0ixI/mfEq7jgNUyIJ\n\nbut the dozens of #ifdef that we could remove post-fork was mentioned.  Subsequent threads on blink-dev@ dealt with them, their problems, and their eventual replacement with Runtime Enabled Features:\n\nhttps://groups.google.com/a/chromium.org/forum/#!searchin/blink-dev/Removing$20$23ifdefs.\n\nto remove all the \"dependency spaghetti\", and that \"spraying our code with #ifdef\", quoting from those threads, which we deemed undesirable, with itemized reasons.\n\nSome wit said that those who don\u0027t understand history are bound to repeat it.  We should consider changes that add #ifdef to core/ with some skepticism.  Ideally, it should be rare, and for compat reasons only, unless we want to go back to that unhappy place we found ourselves in pre-fork.\n\n[1] Someone invokes a consistency argument, \"it\u0027s already there, so we are being consistent with that\", to justify adding more, and so the broadening begins.",
      "parentUuid": "6d67dadb_7c5f6c74",
      "range": {
        "startLine": 120,
        "startChar": 0,
        "endLine": 121,
        "endChar": 37
      },
      "revId": "a511371337277ce1adfc7255fd6a3043494ddd62",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bf0bed4e_d0834496",
        "filename": "third_party/WebKit/Source/core/editing/spellcheck/SpellChecker.cpp",
        "patchSetId": 18
      },
      "lineNbr": 121,
      "author": {
        "id": 1109754
      },
      "writtenOn": "2017-06-08T16:46:53Z",
      "side": 1,
      "message": "\u003e dcheng@ mentioned:\n\u003e I commented on the Onion Soup 2.0 doc as well, but I think see #ifdefs in core as being fundamentally bad.\n\nThat wasn\u0027t quite a complete sentence.  Not sure if you see them as bad or not.  I provided references to the blink-dev@ threads where we (blink-team) decided they were bad, and went ahead and removed them all, and replaced them with Runtime Enabled Features.\n\n\u003e It\u0027s already used in core in a number of places (for example see https://cs.chromium.org/search/?q\u003d%22OS(%22+file:WebKit/Source/core+package:%5Echromium$\u0026type\u003dcs), and it makes a simple rule for how platform-specific things should be guarded.\n\nGood examples, we\u0027d prefer that there were not there, right?  You make an argument that because they are, it\u0027s maybe ok to follow as a guide, but did you think to question why they\u0027re there in the first place?\n\nFonts and keyboards is the dominant theme in the examples you provided: turns out that they are platform-specific (maybe not news to anybody) and in core/. So, IE invented event.keyCode, before WHATWG was a even thing.  Browser vendors had no option but to try to match IE for compat reasons.  Apple came out with a keyboard with fancy keys no one else had (the Command key for one), specs started (core DOM level 1). The compat madness that resulted for web developers during that period was best documented in:\n\n  http://unixpapa.com/js/key.html\n\nIt has taken ~16 years for us to produce the core DOM level 3 spec (in development now), which finally has gotten around to defining key events / codes in a general, cross-platform way.\n\nThe platform specific #ifdef you quoted are there to deal with compat issues. It\u0027s legacy code, I\u0027m not sure we can delete it, but I wouldn\u0027t use them to argue the case that we should do more of the same in core/ using them as guide.  Their presence in core/ is for compat reasons.\n\nOne exception: the OS(ANDOID) cases in these examples were interesting, possible examples of the \"broadening\" effect I mentioned elsewhere, but each would be better handled by putting them in platform/.\n\n\u003e It will also make platforms that care heavily about size happier: admittedly, this object is pretty small, but if we can omit it, that\u0027s still strictly better.\n\nYes this object is pretty small (assume you are talking about the no-op class), and I expect the compiler might optimize it out.  Agree it\u0027s not a great example of a code-size issue, we have better examples of that fish to fry.\n\nThat no-op class does seems like a reasonable choice given that the spelling panel code added on https://trac.webkit.org/changeset/21318/webkit/trunk/WebCore/editing/Editor.cpp 10 years ago was not guarded by an ENABLE flag sadly.\n\n\u003e For this particular BUILDFLAG, I talked to brettw@, and he mentioned that there\u0027s already a features target for buildflags that in both browser and renderer: third_party/WebKit/public:public_features\n\nGlad to see this list is mostly empty.  Did he mention that that file derives from old features.gypi where all the ENBALE flags for webkit/blink were listed, until we removed them all per the blink-dev@ threads I mentioned earlier?  Those threads should remind us #ifdef in core/ -\u003e bad.  Is there a way to do it without #ifdef?  A no-op class is one way (seems sane to me), but there are probably others.",
      "parentUuid": "3b3a90d1_f905a14e",
      "range": {
        "startLine": 120,
        "startChar": 0,
        "endLine": 121,
        "endChar": 37
      },
      "revId": "a511371337277ce1adfc7255fd6a3043494ddd62",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f1ff3fd6_120cc0ba",
        "filename": "third_party/WebKit/Source/core/editing/spellcheck/SpellChecker.cpp",
        "patchSetId": 18
      },
      "lineNbr": 121,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-06-08T20:32:09Z",
      "side": 1,
      "message": "Sorry for the typo. The complete statement: I don\u0027t think I see #ifdefs in core as being fundamentally bad; it depends on the purpose.\n\nThe idea here is quite different from the ENABLE() guards that WebKit had. ENABLE() was intended so different WebKit embedders could turn on a different subset of features, and I agree it\u0027s unmaintainble and doesn\u0027t lead to a better web.\n\nHowever, I\u0027m not asking to guard the web-exposed features with #ifdefs: instead, I want to make it clear in the implementation when internal implementation details are platform-specific. So we shouldn\u0027t have EmptySpellCheckPanelHost: it\u0027s an internal implementation detail that we only have spell check panel on Mac, but it obfuscates that fact at the call site (since I have to go chase a bunch of interface calls to figure out what\u0027s going on).",
      "parentUuid": "bf0bed4e_d0834496",
      "range": {
        "startLine": 120,
        "startChar": 0,
        "endLine": 121,
        "endChar": 37
      },
      "revId": "a511371337277ce1adfc7255fd6a3043494ddd62",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "42ad7e54_af566f38",
        "filename": "third_party/WebKit/Source/core/editing/spellcheck/SpellChecker.cpp",
        "patchSetId": 18
      },
      "lineNbr": 121,
      "author": {
        "id": 1109754
      },
      "writtenOn": "2017-06-09T13:06:21Z",
      "side": 1,
      "message": "\u003e Sorry for the typo. The complete statement: I don\u0027t think I see #ifdefs in core as being fundamentally bad; it depends on the purpose.\n\nAgree, depends on the purpose. \n\n\u003e The idea here is quite different from the ENABLE() guards that WebKit had. ENABLE() was intended so different WebKit embedders could turn on a different subset of features, and I agree it\u0027s unmaintainble and doesn\u0027t lead to a better web.\n\nYes, messy and now removed.  compat issues are an example where core/ #ifdef are unavoidable whether we like it or not.  A bit messy too, so I think we should try to limit them to compat issues.\n\n\u003e However, I\u0027m not asking to guard the web-exposed features with #ifdefs: instead, I want to make it clear in the implementation when internal implementation details are platform-specific. So we shouldn\u0027t have EmptySpellCheckPanelHost: it\u0027s an internal implementation detail that we only have spell check panel on Mac, but it obfuscates that fact at the call site (since I have to go chase a bunch of interface calls to figure out what\u0027s going on).\n\nEmptySpellCheckPanelHost avoids the #ifdef, but yes, they do require digging into to find out what is going on.  In future we might guard them with a run time feature, or else replace them when we Onion Soup 2 and use mojo directly: platform/ would return a null MojoInterfacePtr* on unsupported ports, non null on supported ports, and call sites would need to check for null before trying to call methods on the\u003d mojo interface.  Just a sketch, but public/platform has something like that, GetEmptyInterfaceProvider().  I\u0027ve not used it, but it make help make things more obvious, we\u0027ll see.",
      "parentUuid": "f1ff3fd6_120cc0ba",
      "range": {
        "startLine": 120,
        "startChar": 0,
        "endLine": 121,
        "endChar": 37
      },
      "revId": "a511371337277ce1adfc7255fd6a3043494ddd62",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8d3a3de4_b98a8194",
        "filename": "third_party/WebKit/public/platform/WebSpellCheckPanelHost.h",
        "patchSetId": 18
      },
      "lineNbr": 0,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-06-04T10:27:46Z",
      "side": 1,
      "message": "Nit: In Blink, it\u0027s more common to see the term \"Client\" for calling out to the layer above. Let\u0027s keep this named WebSpellCheckPanelClient for consistency with other Blink code.\n\nAlso, any reason for moving it to public/platform? Is that because it doesn\u0027t depend on any web files?",
      "revId": "a511371337277ce1adfc7255fd6a3043494ddd62",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2e4e5c4b_a5e104ae",
        "filename": "third_party/WebKit/public/platform/WebSpellCheckPanelHost.h",
        "patchSetId": 18
      },
      "lineNbr": 0,
      "author": {
        "id": 1109754
      },
      "writtenOn": "2017-06-05T08:04:33Z",
      "side": 1,
      "message": "\u003e Nit: In Blink, it\u0027s more common to see the term \"Client\" for calling out to the layer above. Let\u0027s keep this named WebSpellCheckPanelClient for consistency with other Blink code.\n\nI want SpellCheckPanelHost in the name too: so I can search for it in code search and find all the code related to this feature.  So I made it:\n\nWebSpellCheckPanelHostClient\n\n\u003e Also, any reason for moving it to public/platform? Is that because it doesn\u0027t depend on any web files?\n\nThat, and looking to the future were we just call mojo from Platform and delete this code.",
      "parentUuid": "8d3a3de4_b98a8194",
      "revId": "a511371337277ce1adfc7255fd6a3043494ddd62",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}