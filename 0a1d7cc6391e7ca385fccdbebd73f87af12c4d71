{
  "comments": [
    {
      "key": {
        "uuid": "ca154a67_99ac8c98",
        "filename": "extensions/renderer/content_watcher.cc",
        "patchSetId": 3
      },
      "lineNbr": 33,
      "author": {
        "id": 1001727
      },
      "writtenOn": "2017-10-13T18:05:03Z",
      "side": 1,
      "message": "Is there a reason not to use const\u0026?",
      "range": {
        "startLine": 33,
        "startChar": 22,
        "endLine": 33,
        "endChar": 56
      },
      "revId": "0a1d7cc6391e7ca385fccdbebd73f87af12c4d71",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1f543fbf_55f24ffd",
        "filename": "extensions/renderer/content_watcher.cc",
        "patchSetId": 3
      },
      "lineNbr": 33,
      "author": {
        "id": 1115745
      },
      "writtenOn": "2017-10-14T00:22:20Z",
      "side": 1,
      "message": "Nope!  Done.",
      "parentUuid": "ca154a67_99ac8c98",
      "range": {
        "startLine": 33,
        "startChar": 22,
        "endLine": 33,
        "endChar": 56
      },
      "revId": "0a1d7cc6391e7ca385fccdbebd73f87af12c4d71",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8fae526a_99b6d0b5",
        "filename": "extensions/renderer/content_watcher.cc",
        "patchSetId": 3
      },
      "lineNbr": 52,
      "author": {
        "id": 1115745
      },
      "writtenOn": "2017-10-12T19:12:11Z",
      "side": 1,
      "message": "This was just ported, but I can\u0027t see any reason these could be WebStrings - am I missing something?",
      "revId": "0a1d7cc6391e7ca385fccdbebd73f87af12c4d71",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9424d549_52774bae",
        "filename": "extensions/renderer/content_watcher.cc",
        "patchSetId": 3
      },
      "lineNbr": 52,
      "author": {
        "id": 1001727
      },
      "writtenOn": "2017-10-13T18:05:03Z",
      "side": 1,
      "message": "WebString doesn\u0027t have \u003c operator?",
      "parentUuid": "8fae526a_99b6d0b5",
      "revId": "0a1d7cc6391e7ca385fccdbebd73f87af12c4d71",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "990f6064_1930f8d8",
        "filename": "extensions/renderer/content_watcher.cc",
        "patchSetId": 3
      },
      "lineNbr": 52,
      "author": {
        "id": 1115745
      },
      "writtenOn": "2017-10-14T00:22:20Z",
      "side": 1,
      "message": "Good point.  I wonder if it\u0027s worth adding.  Or storing as a de-duped vector.  These seem like a lot of unnecessary copies.  But, for now, keeping as it was in the old behavior.",
      "parentUuid": "9424d549_52774bae",
      "revId": "0a1d7cc6391e7ca385fccdbebd73f87af12c4d71",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "378b215b_4c8b4b91",
        "filename": "extensions/renderer/content_watcher.cc",
        "patchSetId": 3
      },
      "lineNbr": 52,
      "author": {
        "id": 1001727
      },
      "writtenOn": "2017-10-14T00:36:48Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "990f6064_1930f8d8",
      "revId": "0a1d7cc6391e7ca385fccdbebd73f87af12c4d71",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "598872a0_18806a3f",
        "filename": "extensions/renderer/content_watcher.cc",
        "patchSetId": 3
      },
      "lineNbr": 97,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-10-13T22:49:40Z",
      "side": 1,
      "message": "Any reason this couldn\u0027t just be a (private) member of FrameContentWatcher?  We only ever call it on the frame associated with FrameContentWatcher.",
      "revId": "0a1d7cc6391e7ca385fccdbebd73f87af12c4d71",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d7b2b2bf_2b1ef0ca",
        "filename": "extensions/renderer/content_watcher.cc",
        "patchSetId": 3
      },
      "lineNbr": 97,
      "author": {
        "id": 1115745
      },
      "writtenOn": "2017-10-14T00:22:20Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "598872a0_18806a3f",
      "revId": "0a1d7cc6391e7ca385fccdbebd73f87af12c4d71",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dd0d77d1_6f96bd23",
        "filename": "extensions/renderer/content_watcher.cc",
        "patchSetId": 3
      },
      "lineNbr": 102,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-10-13T22:49:40Z",
      "side": 1,
      "message": "I think can be simplified to just GetSecurityOrigin()",
      "range": {
        "startLine": 102,
        "startChar": 43,
        "endLine": 102,
        "endChar": 76
      },
      "revId": "0a1d7cc6391e7ca385fccdbebd73f87af12c4d71",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a864c672_7a993dea",
        "filename": "extensions/renderer/content_watcher.cc",
        "patchSetId": 3
      },
      "lineNbr": 102,
      "author": {
        "id": 1115745
      },
      "writtenOn": "2017-10-14T00:22:20Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "dd0d77d1_6f96bd23",
      "range": {
        "startLine": 102,
        "startChar": 43,
        "endLine": 102,
        "endChar": 76
      },
      "revId": "0a1d7cc6391e7ca385fccdbebd73f87af12c4d71",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a292db14_047cb248",
        "filename": "extensions/renderer/content_watcher.cc",
        "patchSetId": 3
      },
      "lineNbr": 111,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-10-13T22:49:40Z",
      "side": 1,
      "message": "It seems like today we send OnWatchChanges to all renderer processes, including those with OOPIFs, given what UpdateRenderersWatchedCssSelectors does.  I was thinking whether that might be extra work given my sanity check below, since only renderers where the top frame is local can actually send ExtensionHostMsg_OnWatchedPageChange.  But I think it isn\u0027t: if we have two frames, A(B), and A navigates to B, we\u0027ll need to start sending CSS updates from B at that point, and there also won\u0027t be a new process created, so DeclarativeContentCssConditionTracker::Observe won\u0027t retrigger OnWatchChanged for B.  So I think we\u0027re all good here - does this sound about right?",
      "revId": "0a1d7cc6391e7ca385fccdbebd73f87af12c4d71",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "226f311f_484eb36f",
        "filename": "extensions/renderer/content_watcher.cc",
        "patchSetId": 3
      },
      "lineNbr": 111,
      "author": {
        "id": 1115745
      },
      "writtenOn": "2017-10-14T00:22:20Z",
      "side": 1,
      "message": "Yeah, I think so.  We could potentially try and optimize by noticing when the subframe becomes accessible, and then update in that case, but I\u0027d prefer to avoid adding (more) risk of breaking something in this CL.",
      "parentUuid": "a292db14_047cb248",
      "revId": "0a1d7cc6391e7ca385fccdbebd73f87af12c4d71",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "94fca2e8_17fa6743",
        "filename": "extensions/renderer/content_watcher.cc",
        "patchSetId": 3
      },
      "lineNbr": 116,
      "author": {
        "id": 1001727
      },
      "writtenOn": "2017-10-13T18:05:03Z",
      "side": 1,
      "message": "This looks bad since matching_selectors() doesn\u0027t return const vector\u0026. Make it so?",
      "range": {
        "startLine": 116,
        "startChar": 45,
        "endLine": 116,
        "endChar": 65
      },
      "revId": "0a1d7cc6391e7ca385fccdbebd73f87af12c4d71",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4ccea22d_c97e086f",
        "filename": "extensions/renderer/content_watcher.cc",
        "patchSetId": 3
      },
      "lineNbr": 116,
      "author": {
        "id": 1115745
      },
      "writtenOn": "2017-10-14T00:22:20Z",
      "side": 1,
      "message": "Good catch!  Moot now (now that this is a private function, we just access directly)",
      "parentUuid": "94fca2e8_17fa6743",
      "range": {
        "startLine": 116,
        "startChar": 45,
        "endLine": 116,
        "endChar": 65
      },
      "revId": "0a1d7cc6391e7ca385fccdbebd73f87af12c4d71",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ea2bb85f_8041385c",
        "filename": "extensions/renderer/content_watcher.cc",
        "patchSetId": 3
      },
      "lineNbr": 126,
      "author": {
        "id": 1115745
      },
      "writtenOn": "2017-10-12T19:12:11Z",
      "side": 1,
      "message": "I\u0027ll look into this in a followup.",
      "revId": "0a1d7cc6391e7ca385fccdbebd73f87af12c4d71",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "05b862e2_1face6f7",
        "filename": "extensions/renderer/content_watcher.cc",
        "patchSetId": 3
      },
      "lineNbr": 126,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-10-13T22:49:40Z",
      "side": 1,
      "message": "Ack.  I thought whether this message has a problem with OOPIFs today, but it seems like not -- we only send back the matches for frames that are same-origin with the top frame, and only when the top frame is local (implied because it must be same-origin with |changed_frame|).  So we\u0027d only send this message through a RenderView that has a local main frame and is not swapped out, hence it should work. :)\n\nDoes that sound about right, and we shouldn\u0027t need to send back CSS updates from an OOPIF, given present semantics of this API?",
      "parentUuid": "ea2bb85f_8041385c",
      "revId": "0a1d7cc6391e7ca385fccdbebd73f87af12c4d71",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "de07b173_b66bd0b0",
        "filename": "extensions/renderer/content_watcher.cc",
        "patchSetId": 3
      },
      "lineNbr": 126,
      "author": {
        "id": 1115745
      },
      "writtenOn": "2017-10-14T00:22:20Z",
      "side": 1,
      "message": "Yes, that\u0027s what I\u0027m counting on.  If we ever isolated accessible frames, we\u0027d need to reconsider.  I\u0027ve added a comment to this effect.",
      "parentUuid": "05b862e2_1face6f7",
      "revId": "0a1d7cc6391e7ca385fccdbebd73f87af12c4d71",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}