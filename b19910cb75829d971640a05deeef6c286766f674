{
  "comments": [
    {
      "key": {
        "uuid": "af221208_1f456f59",
        "filename": "content/renderer/media/rtc_event_log_output_sink_proxy.h",
        "patchSetId": 2
      },
      "lineNbr": 23,
      "author": {
        "id": 1126249
      },
      "writtenOn": "2017-10-17T18:01:03Z",
      "side": 1,
      "message": "Who owns sink_? Should this be std::unique_ptr or scoped_refptr?",
      "revId": "b19910cb75829d971640a05deeef6c286766f674",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "48fc3d5a_7d4c38d8",
        "filename": "content/renderer/media/rtc_event_log_output_sink_proxy.h",
        "patchSetId": 2
      },
      "lineNbr": 23,
      "author": {
        "id": 1246261
      },
      "writtenOn": "2017-10-17T19:40:35Z",
      "side": 1,
      "message": "In an upcoming CL, the (already existing) RTCPeerConnectionHandler::Observer will implement the RtcEventLogOutputSink interface. The lifetime of that Observer is intended to exceed the lifetime of the RtcEventLogOutputSinkProxy.",
      "parentUuid": "af221208_1f456f59",
      "revId": "b19910cb75829d971640a05deeef6c286766f674",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "50db6de9_f03cbda6",
        "filename": "content/renderer/media/rtc_event_log_output_sink_proxy.h",
        "patchSetId": 2
      },
      "lineNbr": 23,
      "author": {
        "id": 1126249
      },
      "writtenOn": "2017-10-17T20:02:37Z",
      "side": 1,
      "message": "RTCPeerConnectionHandler::Observer is reference counted, so I would prefer to see scoped_refptr\u003cRtcEventLogOutputSink\u003e, can you make RtcEventLogOutputSink ref counted (maybe virtual inheritance)?\n\nIf there is a reason not to do this, add a comment saying the sink_ must outlive the proxy, but I prefer to avoid this whenever possible.",
      "parentUuid": "48fc3d5a_7d4c38d8",
      "revId": "b19910cb75829d971640a05deeef6c286766f674",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a479d83d_a67c66f4",
        "filename": "content/renderer/media/rtc_event_log_output_sink_proxy.h",
        "patchSetId": 2
      },
      "lineNbr": 23,
      "author": {
        "id": 1246261
      },
      "writtenOn": "2017-10-19T13:23:32Z",
      "side": 1,
      "message": "(Excluding InitializeForTest from discussion; it\u0027s equivalent to Initialize for our purposes.)\n\n1. peer_connection_observer_ is created in RTCPeerConnectionHandler::Initialize, then never reset/deleted/etc., meaning it\u0027s guaranteed to live as long as RTCPeerConnectionHandler, with the exception being if Initialize is ever called more than once. I have therefore created https://chromium-review.googlesource.com/c/chromium/src/+/727206, which makes explicit the guarantee that Initialize() is only called once.\n\n2. I don\u0027t think it would be possible to let sink_ point to a ref-counted object of a different type (RtcEventLogOutputSink vs. Observer), and I wouldn\u0027t want to hard-code this class to make sink_ an Observer.\n\n3. I have commented the code, as suggested.",
      "parentUuid": "50db6de9_f03cbda6",
      "revId": "b19910cb75829d971640a05deeef6c286766f674",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d507c015_5ca7b084",
        "filename": "content/renderer/media/rtc_event_log_output_sink_proxy.h",
        "patchSetId": 2
      },
      "lineNbr": 23,
      "author": {
        "id": 1126249
      },
      "writtenOn": "2017-10-19T21:49:51Z",
      "side": 1,
      "message": "I don\u0027t see any comment in the latest PS. Did you forget to upload?\n\nI don\u0027t think you should make RtcEventLogOutputSink implement Observer, I think you should force anything that implements RtcEventLogOutputSink to implement reference counting (of which Observer is an example).\n\nBy default I think raw pointers should be avoided. scoped_refptr (or unique_ptr) is one way, WeakPtr/WeakPtrFactory is another, which makes it possible to check if its still alive. I\u0027ve seen many bugs based on dangling raw pointers as a result of assumptions no longer holding that could have been avoided by a different design.\n\nAlso, note guidou\u0027s comments.",
      "parentUuid": "a479d83d_a67c66f4",
      "revId": "b19910cb75829d971640a05deeef6c286766f674",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}