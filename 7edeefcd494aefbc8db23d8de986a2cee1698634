{
  "comments": [
    {
      "key": {
        "uuid": "3896ef74_9233d3a6",
        "filename": "third_party/WebKit/Source/platform/scheduler/renderer/renderer_metrics_helper.cc",
        "patchSetId": 1
      },
      "lineNbr": 24,
      "author": {
        "id": 1116050
      },
      "writtenOn": "2017-11-16T20:13:33Z",
      "side": 1,
      "message": "Might be worth migrating these to constexpr.\nNo strong preference though.",
      "range": {
        "startLine": 24,
        "startChar": 1,
        "endLine": 24,
        "endChar": 7
      },
      "revId": "7edeefcd494aefbc8db23d8de986a2cee1698634",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c719ea21_b24b166a",
        "filename": "third_party/WebKit/Source/platform/scheduler/renderer/renderer_metrics_helper.cc",
        "patchSetId": 1
      },
      "lineNbr": 24,
      "author": {
        "id": 1162220
      },
      "writtenOn": "2017-11-16T20:54:45Z",
      "side": 1,
      "message": "I think #define is used so that the string can be concatenated with something and it still be a single const char*. So for example \u0027PER_FRAME_COUNT_METRIC_NAME \".LongerThan16ms\"\u0027 is just the const char* \"RendererScheduler.TaskCountPerFrameType.LongerThan16ms\". So this is better.",
      "parentUuid": "3896ef74_9233d3a6",
      "range": {
        "startLine": 24,
        "startChar": 1,
        "endLine": 24,
        "endChar": 7
      },
      "revId": "7edeefcd494aefbc8db23d8de986a2cee1698634",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a6d84e7f_e08faf63",
        "filename": "third_party/WebKit/Source/platform/scheduler/renderer/renderer_metrics_helper.cc",
        "patchSetId": 1
      },
      "lineNbr": 24,
      "author": {
        "id": 1116050
      },
      "writtenOn": "2017-11-16T20:59:27Z",
      "side": 1,
      "message": ":(\n\nAck.",
      "parentUuid": "c719ea21_b24b166a",
      "range": {
        "startLine": 24,
        "startChar": 1,
        "endLine": 24,
        "endChar": 7
      },
      "revId": "7edeefcd494aefbc8db23d8de986a2cee1698634",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a2b15523_6598fb98",
        "filename": "third_party/WebKit/Source/platform/scheduler/renderer/renderer_metrics_helper_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 315,
      "author": {
        "id": 1150969
      },
      "writtenOn": "2017-11-16T23:05:18Z",
      "side": 1,
      "message": "It feels to me that this code is also testing that GetFrameType returns the right things â€” it makes things difficult because this test will have to change substantially if we change FrameTypes.\n\nI\u0027d suggest the following:\n1. Introduce a CreateFakeWebFrameSchedulerWithType(frame_type) helper function. Put creation logic with all SetFrameType and SetIsSomething there. (GetFrameTypeTest can benefit from it too).\n2. Reduce the boilerplate:\ndata \u003d [{FrameTypeA, 1}, {FrameType, 2}, ...];\nfor (frame_type, count): data {\n  frame \u003d CreateFakeWebFrameSchedulerWithTest(frame_type);\n  for (i \u003d 0; i \u003c count; i ++)\n    RunTask()\n}.\n\nWDYT?",
      "range": {
        "startLine": 315,
        "startChar": 4,
        "endLine": 315,
        "endChar": 48
      },
      "revId": "7edeefcd494aefbc8db23d8de986a2cee1698634",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}