{
  "comments": [
    {
      "key": {
        "uuid": "f8f1aea1_a6ec5fb6",
        "filename": "cc/raster/zero_copy_raster_buffer_provider.cc",
        "patchSetId": 7
      },
      "lineNbr": 30,
      "author": {
        "id": 1002513
      },
      "writtenOn": "2018-01-29T22:03:59Z",
      "side": 1,
      "message": "I\u0027m a bit confused at this comment. It\u0027s meant to be used in InUsePoolResource? (ie it\u0027s not a subclass of InUsePoolResource?)",
      "range": {
        "startLine": 30,
        "startChar": 3,
        "endLine": 30,
        "endChar": 33
      },
      "revId": "95cb5704e05a40bf1f0fae958e92abe2808cfc8e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9a97a943_dc829e3b",
        "filename": "cc/raster/zero_copy_raster_buffer_provider.cc",
        "patchSetId": 7
      },
      "lineNbr": 30,
      "author": {
        "id": 1000887
      },
      "writtenOn": "2018-01-29T22:08:47Z",
      "side": 1,
      "message": "Ah.. it\u0027s a subclass of a thing owned by InUsePoolResource, which knows about the base class. I can say that better.",
      "parentUuid": "f8f1aea1_a6ec5fb6",
      "range": {
        "startLine": 30,
        "startChar": 3,
        "endLine": 30,
        "endChar": 33
      },
      "revId": "95cb5704e05a40bf1f0fae958e92abe2808cfc8e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1a9fb8e9_e804f992",
        "filename": "cc/raster/zero_copy_raster_buffer_provider.cc",
        "patchSetId": 7
      },
      "lineNbr": 32,
      "author": {
        "id": 1128437
      },
      "writtenOn": "2018-01-29T22:31:57Z",
      "side": 1,
      "message": "I\u0027d prefer a separate struct for GMB (GpuMemoryBufferBacking?) that\u0027s shared between zero copy raster buffer provider and resource pool. Or a GpuBacking interface that produces (mailbox, texture target, sync token) and accepts a returned sync token. Subclassing non-interface structs seems like an anti-pattern.",
      "revId": "95cb5704e05a40bf1f0fae958e92abe2808cfc8e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5187f16a_ef15ab24",
        "filename": "cc/raster/zero_copy_raster_buffer_provider.cc",
        "patchSetId": 7
      },
      "lineNbr": 32,
      "author": {
        "id": 1000887
      },
      "writtenOn": "2018-01-29T23:04:00Z",
      "side": 1,
      "message": "If I understand correctly for a separate struct, the difference would be\n\nGpuBacking {\n  .. common things ..\n\n  struct SubclassThings {};\n  SubclassThings *subclass;\n}\n\nWhich still subclasses but doesn\u0027t inherit anything.. or\n\nGpuBacking {\n  .. common things ..\n  void *subclass;\n}\n\nWhich does not subclass?\n\nThe virtual interface felt like a lot of overkill to me when there\u0027s just shared data and unknown data.\n\nCan you clarify what seems anti-pattern here with adding data fields in a subclass instead of adding methods?",
      "parentUuid": "1a9fb8e9_e804f992",
      "revId": "95cb5704e05a40bf1f0fae958e92abe2808cfc8e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ef990823_f3d29faa",
        "filename": "cc/raster/zero_copy_raster_buffer_provider.cc",
        "patchSetId": 7
      },
      "lineNbr": 136,
      "author": {
        "id": 1128437
      },
      "writtenOn": "2018-01-29T22:31:57Z",
      "side": 1,
      "message": "One subtle difference here is that previously the GMB would be created here on the raster worker thread, and now the GMB is created in AcquireBufferForRaster on the compositor thread. Creating the GMB is a synchronous IPC call so we may not want to do it on compositor thread.",
      "revId": "95cb5704e05a40bf1f0fae958e92abe2808cfc8e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2f2879fb_33ea6774",
        "filename": "cc/raster/zero_copy_raster_buffer_provider.cc",
        "patchSetId": 7
      },
      "lineNbr": 136,
      "author": {
        "id": 1000887
      },
      "writtenOn": "2018-01-29T23:04:00Z",
      "side": 1,
      "message": "Oh ok, I can move it back here then. I just saw the manager is thread safe so wasn\u0027t clear that it mattered.",
      "parentUuid": "ef990823_f3d29faa",
      "revId": "95cb5704e05a40bf1f0fae958e92abe2808cfc8e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d768a94a_b5636b4b",
        "filename": "cc/raster/zero_copy_raster_buffer_provider.h",
        "patchSetId": 7
      },
      "lineNbr": 32,
      "author": {
        "id": 1128437
      },
      "writtenOn": "2018-01-29T22:31:57Z",
      "side": 1,
      "message": "nit: gpu_memory_buffer_manager (no underscore)",
      "revId": "95cb5704e05a40bf1f0fae958e92abe2808cfc8e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a0dd5a04_93244947",
        "filename": "cc/resources/resource_pool.cc",
        "patchSetId": 7
      },
      "lineNbr": 355,
      "author": {
        "id": 1128437
      },
      "writtenOn": "2018-01-29T22:31:57Z",
      "side": 1,
      "message": "nit: I\u0027ve always seen comments like this written this way:\n\ntrue /* is_overlay_candidate */,\\n",
      "revId": "95cb5704e05a40bf1f0fae958e92abe2808cfc8e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6c7d48e2_87f7baab",
        "filename": "cc/resources/resource_pool.cc",
        "patchSetId": 7
      },
      "lineNbr": 355,
      "author": {
        "id": 1000887
      },
      "writtenOn": "2018-01-29T23:04:00Z",
      "side": 1,
      "message": "Both occur frequently in chromium, and this one is used in the style guide (I only saw this one recently too) https://google.github.io/styleguide/cppguide.html#Implementation_Comments",
      "parentUuid": "a0dd5a04_93244947",
      "revId": "95cb5704e05a40bf1f0fae958e92abe2808cfc8e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1fb51bba_b62b1e54",
        "filename": "cc/resources/resource_pool.cc",
        "patchSetId": 7
      },
      "lineNbr": 358,
      "author": {
        "id": 1128437
      },
      "writtenOn": "2018-01-29T22:31:57Z",
      "side": 1,
      "message": "I\u0027m not 100% sure on this part. In ResourceProvider we keep the raster context sync token around so that if the browser drops the resource without consuming it (returns empty sync token), we wait on the raster context sync token before destroying the resource.",
      "revId": "95cb5704e05a40bf1f0fae958e92abe2808cfc8e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "08c73a96_1e3b3121",
        "filename": "cc/resources/resource_pool.cc",
        "patchSetId": 7
      },
      "lineNbr": 358,
      "author": {
        "id": 1000887
      },
      "writtenOn": "2018-01-29T23:04:00Z",
      "side": 1,
      "message": "The sync token will still be kept in the TransferableResource in the ResourceProvider. This is only resetting it in the pool, cuz we don\u0027t need to use it again why the resource id exists.",
      "parentUuid": "1fb51bba_b62b1e54",
      "revId": "95cb5704e05a40bf1f0fae958e92abe2808cfc8e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}