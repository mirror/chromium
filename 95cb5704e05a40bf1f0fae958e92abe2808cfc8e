{
  "comments": [
    {
      "key": {
        "uuid": "f8f1aea1_a6ec5fb6",
        "filename": "cc/raster/zero_copy_raster_buffer_provider.cc",
        "patchSetId": 7
      },
      "lineNbr": 30,
      "author": {
        "id": 1002513
      },
      "writtenOn": "2018-01-29T22:03:59Z",
      "side": 1,
      "message": "I\u0027m a bit confused at this comment. It\u0027s meant to be used in InUsePoolResource? (ie it\u0027s not a subclass of InUsePoolResource?)",
      "range": {
        "startLine": 30,
        "startChar": 3,
        "endLine": 30,
        "endChar": 33
      },
      "revId": "95cb5704e05a40bf1f0fae958e92abe2808cfc8e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9a97a943_dc829e3b",
        "filename": "cc/raster/zero_copy_raster_buffer_provider.cc",
        "patchSetId": 7
      },
      "lineNbr": 30,
      "author": {
        "id": 1000887
      },
      "writtenOn": "2018-01-29T22:08:47Z",
      "side": 1,
      "message": "Ah.. it\u0027s a subclass of a thing owned by InUsePoolResource, which knows about the base class. I can say that better.",
      "parentUuid": "f8f1aea1_a6ec5fb6",
      "range": {
        "startLine": 30,
        "startChar": 3,
        "endLine": 30,
        "endChar": 33
      },
      "revId": "95cb5704e05a40bf1f0fae958e92abe2808cfc8e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1a9fb8e9_e804f992",
        "filename": "cc/raster/zero_copy_raster_buffer_provider.cc",
        "patchSetId": 7
      },
      "lineNbr": 32,
      "author": {
        "id": 1128437
      },
      "writtenOn": "2018-01-29T22:31:57Z",
      "side": 1,
      "message": "I\u0027d prefer a separate struct for GMB (GpuMemoryBufferBacking?) that\u0027s shared between zero copy raster buffer provider and resource pool. Or a GpuBacking interface that produces (mailbox, texture target, sync token) and accepts a returned sync token. Subclassing non-interface structs seems like an anti-pattern.",
      "revId": "95cb5704e05a40bf1f0fae958e92abe2808cfc8e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5187f16a_ef15ab24",
        "filename": "cc/raster/zero_copy_raster_buffer_provider.cc",
        "patchSetId": 7
      },
      "lineNbr": 32,
      "author": {
        "id": 1000887
      },
      "writtenOn": "2018-01-29T23:04:00Z",
      "side": 1,
      "message": "If I understand correctly for a separate struct, the difference would be\n\nGpuBacking {\n  .. common things ..\n\n  struct SubclassThings {};\n  SubclassThings *subclass;\n}\n\nWhich still subclasses but doesn\u0027t inherit anything.. or\n\nGpuBacking {\n  .. common things ..\n  void *subclass;\n}\n\nWhich does not subclass?\n\nThe virtual interface felt like a lot of overkill to me when there\u0027s just shared data and unknown data.\n\nCan you clarify what seems anti-pattern here with adding data fields in a subclass instead of adding methods?",
      "parentUuid": "1a9fb8e9_e804f992",
      "revId": "95cb5704e05a40bf1f0fae958e92abe2808cfc8e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ed95993e_a21d3e2d",
        "filename": "cc/raster/zero_copy_raster_buffer_provider.cc",
        "patchSetId": 7
      },
      "lineNbr": 32,
      "author": {
        "id": 1128437
      },
      "writtenOn": "2018-01-29T23:17:32Z",
      "side": 1,
      "message": "I agree interface seems overkill, and adding all the things to GpuBacking makes it kinda be like ResourceProvider::Resource which was terrible.\n\nMy suggestion was to make separate structs i.e. GpuTextureBacking and GpuMemoryBufferBacking in ResourcePool. So each resource has one of GpuTextureBacking, GpuMemoryBufferBacking, or SharedBitmap based on type. It seems the reason to have a GpuBacking base class is to share code between GL texture and GMB backings. Is that assumption correct?",
      "parentUuid": "5187f16a_ef15ab24",
      "revId": "95cb5704e05a40bf1f0fae958e92abe2808cfc8e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "99bbfd07_37f6e292",
        "filename": "cc/raster/zero_copy_raster_buffer_provider.cc",
        "patchSetId": 7
      },
      "lineNbr": 32,
      "author": {
        "id": 1000887
      },
      "writtenOn": "2018-01-29T23:22:19Z",
      "side": 1,
      "message": "Ah so my intention here was to have the things ResourcePool needs to know about clearly separated from things that are RasterBufferProvider-specific. The base struct has all the things that ResourcePool needs to export to the ResourceProvider basically. It doesn\u0027t have the actual ownership, just the mailbox and params for export to the display.\n\nIf we put all the fields into ResourcePool then it needs to know about the implementation details of each RasterBufferProvider and if we add/change them then ResourcePool has to change its storage structures as well.\n\nThe other option is to have RasterBufferProvider export to the ResourceProvider and give a ResourceId, then TileManager needs to do that and pass it to ResourcePool via PrepareForExport instead. I was kinda going toward the RasterBufferProviders not knowing about the ResourceProvider type tho, since it\u0027s \"general\" and they are \"implementations\" or something. \n\nwdyt?",
      "parentUuid": "ed95993e_a21d3e2d",
      "revId": "95cb5704e05a40bf1f0fae958e92abe2808cfc8e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1bdb6db5_333ee7f3",
        "filename": "cc/raster/zero_copy_raster_buffer_provider.cc",
        "patchSetId": 7
      },
      "lineNbr": 32,
      "author": {
        "id": 1128437
      },
      "writtenOn": "2018-01-29T23:35:39Z",
      "side": 1,
      "message": "Ok, that rationale makes sense. Thanks for explaining.",
      "parentUuid": "99bbfd07_37f6e292",
      "revId": "95cb5704e05a40bf1f0fae958e92abe2808cfc8e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ef990823_f3d29faa",
        "filename": "cc/raster/zero_copy_raster_buffer_provider.cc",
        "patchSetId": 7
      },
      "lineNbr": 136,
      "author": {
        "id": 1128437
      },
      "writtenOn": "2018-01-29T22:31:57Z",
      "side": 1,
      "message": "One subtle difference here is that previously the GMB would be created here on the raster worker thread, and now the GMB is created in AcquireBufferForRaster on the compositor thread. Creating the GMB is a synchronous IPC call so we may not want to do it on compositor thread.",
      "revId": "95cb5704e05a40bf1f0fae958e92abe2808cfc8e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2f2879fb_33ea6774",
        "filename": "cc/raster/zero_copy_raster_buffer_provider.cc",
        "patchSetId": 7
      },
      "lineNbr": 136,
      "author": {
        "id": 1000887
      },
      "writtenOn": "2018-01-29T23:04:00Z",
      "side": 1,
      "message": "Oh ok, I can move it back here then. I just saw the manager is thread safe so wasn\u0027t clear that it mattered.",
      "parentUuid": "ef990823_f3d29faa",
      "revId": "95cb5704e05a40bf1f0fae958e92abe2808cfc8e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "11311c05_0b67a661",
        "filename": "cc/raster/zero_copy_raster_buffer_provider.cc",
        "patchSetId": 7
      },
      "lineNbr": 136,
      "author": {
        "id": 1000887
      },
      "writtenOn": "2018-01-30T01:06:35Z",
      "side": 1,
      "message": "Done.",
      "parentUuid": "2f2879fb_33ea6774",
      "revId": "95cb5704e05a40bf1f0fae958e92abe2808cfc8e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d768a94a_b5636b4b",
        "filename": "cc/raster/zero_copy_raster_buffer_provider.h",
        "patchSetId": 7
      },
      "lineNbr": 32,
      "author": {
        "id": 1128437
      },
      "writtenOn": "2018-01-29T22:31:57Z",
      "side": 1,
      "message": "nit: gpu_memory_buffer_manager (no underscore)",
      "revId": "95cb5704e05a40bf1f0fae958e92abe2808cfc8e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5240dec7_fe970c8c",
        "filename": "cc/resources/resource_pool.cc",
        "patchSetId": 7
      },
      "lineNbr": 349,
      "author": {
        "id": 1000887
      },
      "writtenOn": "2018-01-30T01:06:35Z",
      "side": 1,
      "message": "This DCHECK turns out to be a bad idea, the sync token can be empty if the context that generated it was lost. Since we don\u0027t know what context that was here, we can\u0027t check for that as an alternate condition. Removing it.",
      "revId": "95cb5704e05a40bf1f0fae958e92abe2808cfc8e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a0dd5a04_93244947",
        "filename": "cc/resources/resource_pool.cc",
        "patchSetId": 7
      },
      "lineNbr": 355,
      "author": {
        "id": 1128437
      },
      "writtenOn": "2018-01-29T22:31:57Z",
      "side": 1,
      "message": "nit: I\u0027ve always seen comments like this written this way:\n\ntrue /* is_overlay_candidate */,\\n",
      "revId": "95cb5704e05a40bf1f0fae958e92abe2808cfc8e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6c7d48e2_87f7baab",
        "filename": "cc/resources/resource_pool.cc",
        "patchSetId": 7
      },
      "lineNbr": 355,
      "author": {
        "id": 1000887
      },
      "writtenOn": "2018-01-29T23:04:00Z",
      "side": 1,
      "message": "Both occur frequently in chromium, and this one is used in the style guide (I only saw this one recently too) https://google.github.io/styleguide/cppguide.html#Implementation_Comments",
      "parentUuid": "a0dd5a04_93244947",
      "revId": "95cb5704e05a40bf1f0fae958e92abe2808cfc8e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7da9306b_6dd76585",
        "filename": "cc/resources/resource_pool.cc",
        "patchSetId": 7
      },
      "lineNbr": 355,
      "author": {
        "id": 1128437
      },
      "writtenOn": "2018-01-29T23:17:32Z",
      "side": 1,
      "message": "Ok, that seems fine, TIL.",
      "parentUuid": "6c7d48e2_87f7baab",
      "revId": "95cb5704e05a40bf1f0fae958e92abe2808cfc8e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1fb51bba_b62b1e54",
        "filename": "cc/resources/resource_pool.cc",
        "patchSetId": 7
      },
      "lineNbr": 358,
      "author": {
        "id": 1128437
      },
      "writtenOn": "2018-01-29T22:31:57Z",
      "side": 1,
      "message": "I\u0027m not 100% sure on this part. In ResourceProvider we keep the raster context sync token around so that if the browser drops the resource without consuming it (returns empty sync token), we wait on the raster context sync token before destroying the resource.",
      "revId": "95cb5704e05a40bf1f0fae958e92abe2808cfc8e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "08c73a96_1e3b3121",
        "filename": "cc/resources/resource_pool.cc",
        "patchSetId": 7
      },
      "lineNbr": 358,
      "author": {
        "id": 1000887
      },
      "writtenOn": "2018-01-29T23:04:00Z",
      "side": 1,
      "message": "The sync token will still be kept in the TransferableResource in the ResourceProvider. This is only resetting it in the pool, cuz we don\u0027t need to use it again why the resource id exists.",
      "parentUuid": "1fb51bba_b62b1e54",
      "revId": "95cb5704e05a40bf1f0fae958e92abe2808cfc8e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "321b3a56_8b49ab49",
        "filename": "cc/resources/resource_pool.cc",
        "patchSetId": 7
      },
      "lineNbr": 358,
      "author": {
        "id": 1128437
      },
      "writtenOn": "2018-01-29T23:17:32Z",
      "side": 1,
      "message": "Don\u0027t we wait on returned sync token before deleting the texture id in ~ZeroCopyGpuBacking? Will ResourceProvider set it back before the resource pool resource is destroyed?",
      "parentUuid": "08c73a96_1e3b3121",
      "revId": "95cb5704e05a40bf1f0fae958e92abe2808cfc8e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "31f87ef3_9ad5c087",
        "filename": "cc/resources/resource_pool.cc",
        "patchSetId": 7
      },
      "lineNbr": 358,
      "author": {
        "id": 1000887
      },
      "writtenOn": "2018-01-29T23:22:19Z",
      "side": 1,
      "message": "Right, that\u0027s |returned_sync_token| which is a different field, it\u0027s set in OnResourceReturned here when the ResourceProvider gives the id back (after it\u0027s deleted).\n\nIn fact there\u0027s never a sync token in both fields but I liked 2 names to make their use more clear instead of ResourceProvider-type enums.",
      "parentUuid": "321b3a56_8b49ab49",
      "revId": "95cb5704e05a40bf1f0fae958e92abe2808cfc8e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6a91e4d7_31df7fc0",
        "filename": "cc/resources/resource_pool.cc",
        "patchSetId": 7
      },
      "lineNbr": 358,
      "author": {
        "id": 1128437
      },
      "writtenOn": "2018-01-29T23:35:39Z",
      "side": 1,
      "message": "I meant returned_sync_token should be set to mailbox_sync_token (somehow) if the sync token that the browser returns is empty.",
      "parentUuid": "31f87ef3_9ad5c087",
      "revId": "95cb5704e05a40bf1f0fae958e92abe2808cfc8e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "063a293a_27557f5a",
        "filename": "cc/resources/resource_pool.cc",
        "patchSetId": 7
      },
      "lineNbr": 358,
      "author": {
        "id": 1000887
      },
      "writtenOn": "2018-01-29T23:49:28Z",
      "side": 1,
      "message": "Ooh, hm. Well if we actually export and receive back the resource from the browser, an empty token would be a bug, that doesn\u0027t ever happen right?\n\nIf we never export it then this would be a sync token from the worker thread, and we\u0027d delete it on the compositor thread without waiting on it, so then some worker stuff could run on a deleted texture that was never used anyway. I guess that\u0027d make some GL errors in the logs tho.",
      "parentUuid": "6a91e4d7_31df7fc0",
      "revId": "95cb5704e05a40bf1f0fae958e92abe2808cfc8e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}