{
  "comments": [
    {
      "key": {
        "uuid": "321d10fd_12f1fd34",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 1002725
      },
      "writtenOn": "2018-01-25T21:42:42Z",
      "side": 1,
      "message": "This description left me quite confused.\n\nThese OnChannel methods should happen on the IO thread, right? So I don\u0027t understanding the posting part.\n\nAlso what is the exact scenario that this breaks? From the code, I assume something can cause OnChannelError but not OnChannelClosing? That on the surface looks like it should not happen, so is there an deeper issue here?",
      "revId": "50de10e3f5e7c0beafcf9c3758e9c2077176fd68",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a40ed8a1_785e14b7",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 1123071
      },
      "writtenOn": "2018-01-25T22:10:35Z",
      "side": 1,
      "message": "All cross process communication for Chrome IPC goes over top of mojo. OnChannelError is only called from the IO thread. It won\u0027t call ChannelClosing until the UI thread actually reads something off the channel. \n\nIf the UI thread is blocked on an object and the remote side closes. The IO thread will get a read error on the mojo pipe and it will call OnChannelError(...) mainly from here: https://cs.chromium.org/chromium/src/ipc/ipc_message_pipe_reader.cc?sq\u003dpackage:chromium\u0026l\u003d105\n\nbut it won\u0027t call OnChannelClosing until the UI thread is unblocked. This is why SyncChannel cancels all pending sends in it\u0027s on ChannelError (https://cs.chromium.org/chromium/src/ipc/ipc_sync_channel.cc?q\u003dipc_sync_channel\u0026dr\u003dC\u0026l\u003d491)\n\nAnd the sync compositor browser filter is very similar to the sync channel.",
      "parentUuid": "321d10fd_12f1fd34",
      "revId": "50de10e3f5e7c0beafcf9c3758e9c2077176fd68",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}