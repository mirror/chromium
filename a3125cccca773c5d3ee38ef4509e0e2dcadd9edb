{
  "comments": [
    {
      "key": {
        "uuid": "269baf6b_41b7fc68",
        "filename": "storage/browser/blob/blob_url_store_impl_unittest.cc",
        "patchSetId": 3
      },
      "lineNbr": 20,
      "author": {
        "id": 1001472
      },
      "writtenOn": "2017-12-14T09:11:55Z",
      "side": 1,
      "message": "nit: having these outside the namespace storage ?",
      "revId": "a3125cccca773c5d3ee38ef4509e0e2dcadd9edb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "15df3eaa_ece11af8",
        "filename": "storage/browser/blob/blob_url_store_impl_unittest.cc",
        "patchSetId": 3
      },
      "lineNbr": 20,
      "author": {
        "id": 1110029
      },
      "writtenOn": "2017-12-14T11:03:30Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "269baf6b_41b7fc68",
      "revId": "a3125cccca773c5d3ee38ef4509e0e2dcadd9edb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "23f22d82_a2c68d2f",
        "filename": "storage/browser/blob/blob_url_store_impl_unittest.cc",
        "patchSetId": 3
      },
      "lineNbr": 188,
      "author": {
        "id": 1001472
      },
      "writtenOn": "2017-12-14T09:11:55Z",
      "side": 1,
      "message": "nit: ResolveNonExistentURL ?",
      "revId": "a3125cccca773c5d3ee38ef4509e0e2dcadd9edb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fac82e5f_6583ad84",
        "filename": "storage/browser/blob/blob_url_store_impl_unittest.cc",
        "patchSetId": 3
      },
      "lineNbr": 188,
      "author": {
        "id": 1110029
      },
      "writtenOn": "2017-12-14T11:03:30Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "23f22d82_a2c68d2f",
      "revId": "a3125cccca773c5d3ee38ef4509e0e2dcadd9edb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d727b4ba_2609744b",
        "filename": "third_party/WebKit/Source/core/html/PublicURLManager.cpp",
        "patchSetId": 3
      },
      "lineNbr": 50,
      "author": {
        "id": 1001917
      },
      "writtenOn": "2017-12-14T08:28:37Z",
      "side": 1,
      "message": "nit: can you make this const and call GetSecurityOrigin() instead? The call bellow should still work, it takes a const *.",
      "range": {
        "startLine": 50,
        "startChar": 0,
        "endLine": 50,
        "endChar": 63
      },
      "revId": "a3125cccca773c5d3ee38ef4509e0e2dcadd9edb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "617fb374_b0d0a1e1",
        "filename": "third_party/WebKit/Source/core/html/PublicURLManager.cpp",
        "patchSetId": 3
      },
      "lineNbr": 50,
      "author": {
        "id": 1110029
      },
      "writtenOn": "2017-12-14T08:43:38Z",
      "side": 1,
      "message": "Not all of them do, URLRegistry::RegisterURL currently still takes a non-const pointer (historically SecurityOrigin was passed around as non-const almost everywhere, but some recent cleanup changed most trivial places to const, just not this one yet. I\u0027ll create a follow-up patch to change this one as well).",
      "parentUuid": "d727b4ba_2609744b",
      "range": {
        "startLine": 50,
        "startChar": 0,
        "endLine": 50,
        "endChar": 63
      },
      "revId": "a3125cccca773c5d3ee38ef4509e0e2dcadd9edb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ee68bd74_e94c4cb2",
        "filename": "third_party/WebKit/Source/core/html/PublicURLManager.cpp",
        "patchSetId": 3
      },
      "lineNbr": 50,
      "author": {
        "id": 1001917
      },
      "writtenOn": "2017-12-14T08:49:53Z",
      "side": 1,
      "message": "ah got it. ok.",
      "parentUuid": "617fb374_b0d0a1e1",
      "range": {
        "startLine": 50,
        "startChar": 0,
        "endLine": 50,
        "endChar": 63
      },
      "revId": "a3125cccca773c5d3ee38ef4509e0e2dcadd9edb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9956d7a7_d4c71d0f",
        "filename": "third_party/WebKit/Source/core/html/PublicURLManager.cpp",
        "patchSetId": 3
      },
      "lineNbr": 50,
      "author": {
        "id": 1110029
      },
      "writtenOn": "2017-12-14T08:52:36Z",
      "side": 1,
      "message": "Actually, changing this to a const pointer is harder than I thought, as ultimately this origin gets stored in a URLSecurityOriginMap, which then lets you get it back out non-const to ultimately be returned by SecurityOrigin::Create(const KURL\u0026). I do wonder if that should make a copy somewhere in there, but for now leaving this as non-const seems the best thing to do.\n\nThat does remind me though that in this refactor I\u0027m currently missing adding origins for blob URLs to the URLSecurityOriginMap (as that was done by blob specific code a few abstraction layers away from this code). WPT tests will catch that once I start running tests with this new code path though...",
      "parentUuid": "617fb374_b0d0a1e1",
      "range": {
        "startLine": 50,
        "startChar": 0,
        "endLine": 50,
        "endChar": 63
      },
      "revId": "a3125cccca773c5d3ee38ef4509e0e2dcadd9edb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "311e8637_929146ed",
        "filename": "third_party/WebKit/Source/core/html/PublicURLManager.cpp",
        "patchSetId": 3
      },
      "lineNbr": 50,
      "author": {
        "id": 1001472
      },
      "writtenOn": "2017-12-14T09:11:55Z",
      "side": 1,
      "message": "+1",
      "parentUuid": "d727b4ba_2609744b",
      "range": {
        "startLine": 50,
        "startChar": 0,
        "endLine": 50,
        "endChar": 63
      },
      "revId": "a3125cccca773c5d3ee38ef4509e0e2dcadd9edb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4d1ac516_1d0c4725",
        "filename": "third_party/WebKit/Source/core/html/PublicURLManager.cpp",
        "patchSetId": 3
      },
      "lineNbr": 50,
      "author": {
        "id": 1110029
      },
      "writtenOn": "2017-12-14T11:03:30Z",
      "side": 1,
      "message": "(and to add further to this, we really currently can\u0027t have any copies of the origin in this path, as the whole point of storing the origin for blob URLs is to make sure object-identity-comparisons correctly detect unique-originied blob URLs as being same origin with their creation context. So until SecurityOrigin is fixed to actually store a UUID or something to use for unique-origin-identity, we\u0027ll need to maintain object-identity).",
      "parentUuid": "311e8637_929146ed",
      "range": {
        "startLine": 50,
        "startChar": 0,
        "endLine": 50,
        "endChar": 63
      },
      "revId": "a3125cccca773c5d3ee38ef4509e0e2dcadd9edb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0cbdfb4a_6bad4578",
        "filename": "third_party/WebKit/Source/core/html/PublicURLManager.cpp",
        "patchSetId": 3
      },
      "lineNbr": 64,
      "author": {
        "id": 1001917
      },
      "writtenOn": "2017-12-14T08:28:37Z",
      "side": 1,
      "message": "nit: can you verify with some dchecks here... maybe do a variable surrounded by #if DCHECK_IS_ON() [sp]\nconst SecurityOrigin* url_registry_security_origin\n#endif\n\nstore it in the above if statement, and then dcheck that here it\u0027s the same as what is in context?\n\nThis might be overkill, but having that in there at least for a run of layouttests would make me more confident it won\u0027t change.",
      "range": {
        "startLine": 64,
        "startChar": 0,
        "endLine": 64,
        "endChar": 49
      },
      "revId": "a3125cccca773c5d3ee38ef4509e0e2dcadd9edb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c04d10a7_37d0d46e",
        "filename": "third_party/WebKit/Source/core/html/PublicURLManager.cpp",
        "patchSetId": 3
      },
      "lineNbr": 64,
      "author": {
        "id": 1110029
      },
      "writtenOn": "2017-12-14T08:43:38Z",
      "side": 1,
      "message": "Not sure, it does seem kind of weird to me to be verifying something that is relied on all over the place. I did change the interface of RegisterURL to not get passed in the execution context to make it more obvious that this is always called with the same execution context (the one that owns us). That should hopefully make it clearer that the origin is always the same as well?",
      "parentUuid": "0cbdfb4a_6bad4578",
      "range": {
        "startLine": 64,
        "startChar": 0,
        "endLine": 64,
        "endChar": 49
      },
      "revId": "a3125cccca773c5d3ee38ef4509e0e2dcadd9edb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d056af15_de000442",
        "filename": "third_party/WebKit/Source/core/html/PublicURLManager.cpp",
        "patchSetId": 3
      },
      "lineNbr": 64,
      "author": {
        "id": 1001917
      },
      "writtenOn": "2017-12-14T08:49:53Z",
      "side": 1,
      "message": "sgtm, that is clearer.",
      "parentUuid": "c04d10a7_37d0d46e",
      "range": {
        "startLine": 64,
        "startChar": 0,
        "endLine": 64,
        "endChar": 49
      },
      "revId": "a3125cccca773c5d3ee38ef4509e0e2dcadd9edb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "093fbb61_287c45e5",
        "filename": "third_party/WebKit/Source/core/html/PublicURLManager.cpp",
        "patchSetId": 3
      },
      "lineNbr": 64,
      "author": {
        "id": 1110029
      },
      "writtenOn": "2017-12-14T11:03:30Z",
      "side": 1,
      "message": "As it turned out that then meant I needed to move the !is_stopped_ check to before the CreatePublicURL code, as otherwise calling this on a detached iframe/destroyed context would crash. As the resulting blob URL wouldn\u0027t be functional anyway, it doesn\u0027t really matter if the URL returned is actually syntactically correct as a Blob URL, so just returning an empty string seems good enough to me for now.",
      "parentUuid": "d056af15_de000442",
      "range": {
        "startLine": 64,
        "startChar": 0,
        "endLine": 64,
        "endChar": 49
      },
      "revId": "a3125cccca773c5d3ee38ef4509e0e2dcadd9edb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fcc7af24_51713aa1",
        "filename": "third_party/WebKit/common/blob/blob_url_store.mojom",
        "patchSetId": 3
      },
      "lineNbr": 9,
      "author": {
        "id": 1001472
      },
      "writtenOn": "2017-12-14T09:11:55Z",
      "side": 1,
      "message": "nit: Also let\u0027s document that this is the browser side\u0027s interface that gets requests from renderers.",
      "revId": "a3125cccca773c5d3ee38ef4509e0e2dcadd9edb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "90c111b9_146af062",
        "filename": "third_party/WebKit/common/blob/blob_url_store.mojom",
        "patchSetId": 3
      },
      "lineNbr": 9,
      "author": {
        "id": 1110029
      },
      "writtenOn": "2017-12-14T11:03:30Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fcc7af24_51713aa1",
      "revId": "a3125cccca773c5d3ee38ef4509e0e2dcadd9edb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}