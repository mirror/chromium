{
  "comments": [
    {
      "key": {
        "uuid": "6661a058_60fcf418",
        "filename": "content/network/network_change_manager_impl.cc",
        "patchSetId": 20
      },
      "lineNbr": 20,
      "author": {
        "id": 1120845
      },
      "writtenOn": "2017-10-10T19:00:02Z",
      "side": 1,
      "message": "If I understand correctly, this net::NetworkChangeNotifier::GetConnectionType() is a synchronous blocking call.\nLet me know if there is an issue with using this.",
      "revId": "08d50b4b7e6097557d46160d7257118c9478d71c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a3ec4f0d_188a879f",
        "filename": "content/network/network_change_manager_impl.cc",
        "patchSetId": 20
      },
      "lineNbr": 43,
      "author": {
        "id": 1120845
      },
      "writtenOn": "2017-10-10T19:00:02Z",
      "side": 1,
      "message": "Per suggestion. I made it so new clients received the current |connection_type_| upon registration.",
      "revId": "08d50b4b7e6097557d46160d7257118c9478d71c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dfc3b1ab_89ecf0e4",
        "filename": "content/network/network_change_manager_impl.cc",
        "patchSetId": 20
      },
      "lineNbr": 43,
      "author": {
        "id": 1002888
      },
      "writtenOn": "2017-10-11T12:55:54Z",
      "side": 1,
      "message": "I like the idea of sending the current connection type upon registration but I think we need to adjust it in a couple ways:\n1. I think it needs to be sent via a different signal than OnNetworkChanged() as this could incorrectly trigger observers to think the network has actually changed.  This sending of the signal back is also racing observers registering which could lead to various problems.  Perhaps adding a OnInitialNetworkType signal could solve this.\n2. We\u0027ll still need NetworkConnectionTracker::GetConnectionType() to block until the OnInitialNetworkType() signal is received.\n\nCould we make the current network type a return value of some operation, either RequestNotifications() or GetNetworkChangeManager()?  This would eliminate the need for the OnInitialNetworkType() signal.",
      "parentUuid": "a3ec4f0d_188a879f",
      "revId": "08d50b4b7e6097557d46160d7257118c9478d71c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "841f21a5_18f69160",
        "filename": "content/network/network_change_manager_impl.cc",
        "patchSetId": 20
      },
      "lineNbr": 43,
      "author": {
        "id": 1120845
      },
      "writtenOn": "2017-10-11T14:52:55Z",
      "side": 1,
      "message": "\u003e 1. I think it needs to be sent via a different signal than OnNetworkChanged() as this could incorrectly trigger observers to think the network has actually changed.  This sending of the signal back is also racing observers registering which could lead to various problems.  Perhaps adding a OnInitialNetworkType signal could solve this.\n\nI am not sure if there\u0027s a race w.r.t observer registration here. Mojo APIs are all async, so here we are essentially posting a task to notify the client.\n \n\u003e 2. We\u0027ll still need NetworkConnectionTracker::GetConnectionType() to block until the OnInitialNetworkType() signal is received.\n\nIs that a good idea though? Network service might be unavailable, and we do not want the browser thread to be blocked on this.\n\n\u003e Could we make the current network type a return value of some operation, either RequestNotifications() or GetNetworkChangeManager()?  This would eliminate the need for the OnInitialNetworkType() signal.\n\nRequestNotifications() has to be async. It can take in an async callback. If NetworkConnectionTracker calls RequestNotification() in its constructor and blocks until the async callback to complete, that seems to be a bad idea to me.",
      "parentUuid": "dfc3b1ab_89ecf0e4",
      "revId": "08d50b4b7e6097557d46160d7257118c9478d71c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3cafdebf_25625450",
        "filename": "content/network/network_change_manager_impl.cc",
        "patchSetId": 20
      },
      "lineNbr": 43,
      "author": {
        "id": 1002888
      },
      "writtenOn": "2017-10-11T15:08:35Z",
      "side": 1,
      "message": "\u003e \u003e 1. I think it needs to be sent via a different signal than OnNetworkChanged() as this could incorrectly trigger observers to think the network has actually changed.  This sending of the signal back is also racing observers registering which could lead to various problems.  Perhaps adding a OnInitialNetworkType signal could solve this.\n\u003e \n\u003e I am not sure if there\u0027s a race w.r.t observer registration here. Mojo APIs are all async, so here we are essentially posting a task to notify the client.\n\nThe race is between the initial OnNetworkChanged() signal proceeding back to the NetworkConnectionTracker, and a potential call to NetworkConnectionTracker::GetConnectionType().  If GetConnectionType() wins the race it gets an incorrect connection status.\n\n\u003e  \n\u003e \u003e 2. We\u0027ll still need NetworkConnectionTracker::GetConnectionType() to block until the OnInitialNetworkType() signal is received.\n\u003e \n\u003e Is that a good idea though? Network service might be unavailable, and we do not want the browser thread to be blocked on this.\n\nBlocking is bad but that\u0027s the cost of having GetConnectionType() a synchronous interface.  Making it an async interface would fix this issue, but would require modifications to users of the interface.  Looks like there are 28 references to NCN::GetConnectionType (ignoring test and net/ references).",
      "parentUuid": "841f21a5_18f69160",
      "revId": "08d50b4b7e6097557d46160d7257118c9478d71c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "612c9835_2ed50124",
        "filename": "content/network/network_change_manager_impl.cc",
        "patchSetId": 20
      },
      "lineNbr": 43,
      "author": {
        "id": 1120845
      },
      "writtenOn": "2017-10-11T15:12:41Z",
      "side": 1,
      "message": "I\u0027m curious -- Do you know which user of GetConnectionType() depends on it return the actual connection type? I read the documentation on that method. It doesn\u0027t make any guarantee that it doesn\u0027t return a CONNECTION_UNKNOWN.",
      "parentUuid": "3cafdebf_25625450",
      "revId": "08d50b4b7e6097557d46160d7257118c9478d71c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "356932e2_bd3bc80a",
        "filename": "content/network/network_change_manager_impl.cc",
        "patchSetId": 20
      },
      "lineNbr": 43,
      "author": {
        "id": 1002888
      },
      "writtenOn": "2017-10-11T15:18:49Z",
      "side": 1,
      "message": "If you look at references to various NCN::ConnectionType enum members, e.g. NCN::CONNECTION_2G, you can see users relying on actual connection type.  This is exposed in JS by the NetInfo API to all web pages.",
      "parentUuid": "612c9835_2ed50124",
      "revId": "08d50b4b7e6097557d46160d7257118c9478d71c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2dafc83d_ab5db0ed",
        "filename": "content/network/network_change_manager_impl.cc",
        "patchSetId": 20
      },
      "lineNbr": 43,
      "author": {
        "id": 1120845
      },
      "writtenOn": "2017-10-11T20:14:40Z",
      "side": 1,
      "message": "Network service may or may not start up successfully, so we can\u0027t make NetworkConnectionTracker to block until Network Service returns the initial connection type.\n\nHow about we make mojo::ConnectionType to have a CONNECTION_UNINITIALIZED enum value and change embedders to not do weird things when NCT::GetConnectionType() \u003d\u003d CONNECTION_UNINITIALIZED but to wait for a OnNetworkChanged() signal?",
      "parentUuid": "356932e2_bd3bc80a",
      "revId": "08d50b4b7e6097557d46160d7257118c9478d71c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3fc6c6f0_005d99e4",
        "filename": "content/network/network_change_manager_impl.cc",
        "patchSetId": 20
      },
      "lineNbr": 43,
      "author": {
        "id": 1002888
      },
      "writtenOn": "2017-10-12T13:01:50Z",
      "side": 1,
      "message": "Adding UNINITIALIZED will required editing all callers of GetConnectionType(), and there will be some that cannot easily use UNINITIALIZED, e.g. the renderer code surfacing NetInfo.  The ConnectionType enum was based off the NetInfo spec enum values.  For callers that cannot easily use UNINITIALIZED, their only option is to spin-loop calling GetConnectionType().  I think switching to an async API might be easier.  Making GetConnectionType() block is also not a bad solution I feel, assuming the network service starts up successfully, it shouldn\u0027t ever block.",
      "parentUuid": "2dafc83d_ab5db0ed",
      "revId": "08d50b4b7e6097557d46160d7257118c9478d71c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "65c54fce_6494cd1b",
        "filename": "content/network/network_change_manager_impl.cc",
        "patchSetId": 20
      },
      "lineNbr": 43,
      "author": {
        "id": 1002888
      },
      "writtenOn": "2017-10-12T13:05:13Z",
      "side": 1,
      "message": "Another solution is to instantiate an NCN instance in the NCT just for the purposes of determining the initial connection type.  You could add a \"bool tracking\" to the NCN constructor to make it more lightweight when tracking isn\u0027t necessary (i.e. when used only for the purposes of determining the initial connection type).",
      "parentUuid": "3fc6c6f0_005d99e4",
      "revId": "08d50b4b7e6097557d46160d7257118c9478d71c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ce32e905_a9d2d726",
        "filename": "content/network/network_change_manager_impl_unittest.cc",
        "patchSetId": 20
      },
      "lineNbr": 74,
      "author": {
        "id": 1120845
      },
      "writtenOn": "2017-10-10T19:00:02Z",
      "side": 1,
      "message": "I used net::NetworkChangeNotifier::CreateMock() here so the tests are platform independent.",
      "revId": "08d50b4b7e6097557d46160d7257118c9478d71c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5159b992_50513018",
        "filename": "content/network/network_service_impl.cc",
        "patchSetId": 20
      },
      "lineNbr": 81,
      "author": {
        "id": 1120845
      },
      "writtenOn": "2017-10-10T19:00:02Z",
      "side": 1,
      "message": "Matt, I added platform-dependent NCN initialization here. The reason is that I want to use a mock NCN when testing NetworkChangeManagerImpl",
      "range": {
        "startLine": 81,
        "startChar": 12,
        "endLine": 81,
        "endChar": 22
      },
      "revId": "08d50b4b7e6097557d46160d7257118c9478d71c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}