{
  "comments": [
    {
      "key": {
        "uuid": "c61304d0_26607041",
        "filename": "remoting/base/descending_samples.cc",
        "patchSetId": 4
      },
      "lineNbr": 26,
      "author": {
        "id": 1000540
      },
      "writtenOn": "2017-11-03T02:33:47Z",
      "side": 1,
      "message": "Optional:\nInstead of doing pow(), you could simply track the total weights on-the-fly.\n\nWith 1 value, total weight is 1\nWith 2 values, total weight is 1 + w\nWith 3 values, total weight is 1 + w + w^2\n...\nYou can see that the total weight for {n+1}  is (total weight for {n}) * w + 1.\n\nI\u0027m pretty sure this is numerically stable.",
      "range": {
        "startLine": 26,
        "startChar": 14,
        "endLine": 26,
        "endChar": 17
      },
      "revId": "a8d3c31e9c8b87bbc8b65b4773d3b4b2c61fe170",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "274b6dce_c41ac4b0",
        "filename": "remoting/base/descending_samples.h",
        "patchSetId": 4
      },
      "lineNbr": 14,
      "author": {
        "id": 1000540
      },
      "writtenOn": "2017-11-03T02:33:47Z",
      "side": 1,
      "message": "This is a misleading name - it suggests that the samples themselves are decreasing, or that there is special behavior when they are.\nMaybe just WeightedSamples?",
      "range": {
        "startLine": 14,
        "startChar": 6,
        "endLine": 14,
        "endChar": 23
      },
      "revId": "a8d3c31e9c8b87bbc8b65b4773d3b4b2c61fe170",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "51cf693b_032782f9",
        "filename": "remoting/base/descending_samples.h",
        "patchSetId": 4
      },
      "lineNbr": 24,
      "author": {
        "id": 1000540
      },
      "writtenOn": "2017-11-03T02:33:47Z",
      "side": 1,
      "message": "Need 64 bits for a counter?\nIf it\u0027s needed to avoid arithmetic overflow, maybe do the casting there?",
      "range": {
        "startLine": 24,
        "startChar": 2,
        "endLine": 24,
        "endChar": 9
      },
      "revId": "a8d3c31e9c8b87bbc8b65b4773d3b4b2c61fe170",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "798201da_6a7127bd",
        "filename": "remoting/base/descending_samples_unittest.cc",
        "patchSetId": 4
      },
      "lineNbr": 10,
      "author": {
        "id": 1000540
      },
      "writtenOn": "2017-11-03T02:33:47Z",
      "side": 1,
      "message": "Consider adding tests with a small number of samples (1 or 2). With 100 samples, your current implementation will calculate (1 - pow(0.9, 100)) which gtest might think is close enough to 1 for the resulting floats to compare equal (assuming EXPECT_EQ allows for approximate float comparisons)? So you might not be testing the correctness of your pow() - you could replace pow() in your implementation with 0.000001 and all your 100-sample tests might still pass.",
      "revId": "a8d3c31e9c8b87bbc8b65b4773d3b4b2c61fe170",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "37b91098_91843ee5",
        "filename": "remoting/base/descending_samples_unittest.cc",
        "patchSetId": 4
      },
      "lineNbr": 23,
      "author": {
        "id": 1000540
      },
      "writtenOn": "2017-11-03T02:33:47Z",
      "side": 1,
      "message": "Does this really work? As I implied in my comment above, you generally don\u0027t test floats for exact equality, but maybe EXPECT_EQ treats floats as a special case and allows approximate equality?",
      "range": {
        "startLine": 23,
        "startChar": 2,
        "endLine": 23,
        "endChar": 11
      },
      "revId": "a8d3c31e9c8b87bbc8b65b4773d3b4b2c61fe170",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cc7e1886_7e7eb311",
        "filename": "remoting/codec/encoder_bitrate_filter.cc",
        "patchSetId": 4
      },
      "lineNbr": 18,
      "author": {
        "id": 1000540
      },
      "writtenOn": "2017-11-03T02:33:47Z",
      "side": 1,
      "message": "comma after \u0027mode\u0027\nMaybe add \u0027the\u0027 so it reads better?\n..in realtime mode, the encoded frame size...",
      "range": {
        "startLine": 18,
        "startChar": 23,
        "endLine": 18,
        "endChar": 27
      },
      "revId": "a8d3c31e9c8b87bbc8b65b4773d3b4b2c61fe170",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ef389afb_e9644f8f",
        "filename": "remoting/codec/encoder_bitrate_filter.cc",
        "patchSetId": 4
      },
      "lineNbr": 25,
      "author": {
        "id": 1000540
      },
      "writtenOn": "2017-11-03T02:33:47Z",
      "side": 1,
      "message": "Sentence is ungrammatical, and I don\u0027t understand it. Please rephrase or clarify?",
      "range": {
        "startLine": 24,
        "startChar": 3,
        "endLine": 25,
        "endChar": 50
      },
      "revId": "a8d3c31e9c8b87bbc8b65b4773d3b4b2c61fe170",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0508401d_3d4a1996",
        "filename": "remoting/codec/encoder_bitrate_filter.cc",
        "patchSetId": 4
      },
      "lineNbr": 26,
      "author": {
        "id": 1000540
      },
      "writtenOn": "2017-11-03T02:33:47Z",
      "side": 1,
      "message": "Ungrammatical, maybe you mean \"bandwidth estimate\"?",
      "range": {
        "startLine": 26,
        "startChar": 13,
        "endLine": 26,
        "endChar": 34
      },
      "revId": "a8d3c31e9c8b87bbc8b65b4773d3b4b2c61fe170",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "faa7754c_64499bbc",
        "filename": "remoting/codec/encoder_bitrate_filter.h",
        "patchSetId": 4
      },
      "lineNbr": 21,
      "author": {
        "id": 1000540
      },
      "writtenOn": "2017-11-03T02:33:47Z",
      "side": 1,
      "message": "Does it make sense to store this as 64-bit?\nIf you need 64-bit to avoid overflow, maybe just do the casting in the arithmetic where you need it?",
      "range": {
        "startLine": 21,
        "startChar": 8,
        "endLine": 21,
        "endChar": 15
      },
      "revId": "a8d3c31e9c8b87bbc8b65b4773d3b4b2c61fe170",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "283edfc6_800ff07d",
        "filename": "remoting/codec/encoder_bitrate_filter_unittest.cc",
        "patchSetId": 4
      },
      "lineNbr": 46,
      "author": {
        "id": 1000540
      },
      "writtenOn": "2017-11-03T02:33:47Z",
      "side": 1,
      "message": "Met\n\n\"Threshold\" is probably a good word here - the 33% change is a \"threshold value\" for triggering a bitrate change.\nFor example\nWontChangeBitrateIfBandwidthChangeIsBelowThreshold\nor\nBandwidthChangedBelowThreshold_BitrateIsUnchanged",
      "range": {
        "startLine": 46,
        "startChar": 59,
        "endLine": 46,
        "endChar": 63
      },
      "revId": "a8d3c31e9c8b87bbc8b65b4773d3b4b2c61fe170",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "73ec3a81_3ec803f8",
        "filename": "remoting/codec/encoder_bitrate_filter_unittest.cc",
        "patchSetId": 4
      },
      "lineNbr": 59,
      "author": {
        "id": 1000540
      },
      "writtenOn": "2017-11-03T02:33:47Z",
      "side": 1,
      "message": "Met",
      "range": {
        "startLine": 59,
        "startChar": 52,
        "endLine": 59,
        "endChar": 56
      },
      "revId": "a8d3c31e9c8b87bbc8b65b4773d3b4b2c61fe170",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fb25eab4_a39151b4",
        "filename": "remoting/codec/encoder_bitrate_filter_unittest.cc",
        "patchSetId": 4
      },
      "lineNbr": 81,
      "author": {
        "id": 1000540
      },
      "writtenOn": "2017-11-03T02:33:47Z",
      "side": 1,
      "message": "Include the \"thing you do\", not just the expected end-result. For example:\nInitialQuery_ReturnsDefaultValue\nor\nNoEstimatesProvided_DefaultValueIsReturned\n\nIncluding the setup in the test name lets you add more tests with the same expected end-result  (for example, you might add a Reset() method and want to test that).",
      "range": {
        "startLine": 81,
        "startChar": 31,
        "endLine": 81,
        "endChar": 49
      },
      "revId": "a8d3c31e9c8b87bbc8b65b4773d3b4b2c61fe170",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1a800556_5e9ce5c0",
        "filename": "remoting/codec/encoder_bitrate_filter_unittest.cc",
        "patchSetId": 4
      },
      "lineNbr": 83,
      "author": {
        "id": 1000540
      },
      "writtenOn": "2017-11-03T02:33:47Z",
      "side": 1,
      "message": "Should be\nEXPECT_EQ(\u003cTheExpectedDefaultValue\u003e, filter.GetTargetBitrateKbps());\n?\n\nIf you only care about \u003e 0, change the test name to describe the actual test:\nInitialBitrate_IsGreaterThanZero",
      "revId": "a8d3c31e9c8b87bbc8b65b4773d3b4b2c61fe170",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}