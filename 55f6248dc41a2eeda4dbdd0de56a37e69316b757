{
  "comments": [
    {
      "key": {
        "uuid": "87a84850_e2330419",
        "filename": "cc/surfaces/display_scheduler.h",
        "patchSetId": 3
      },
      "lineNbr": 38,
      "author": {
        "id": 1116032
      },
      "writtenOn": "2017-07-06T12:40:12Z",
      "side": 1,
      "message": "Please add a virtual destructor.",
      "range": {
        "startLine": 38,
        "startChar": 25,
        "endLine": 38,
        "endChar": 49
      },
      "revId": "55f6248dc41a2eeda4dbdd0de56a37e69316b757",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "38d9358f_ac8521d9",
        "filename": "cc/surfaces/display_scheduler.h",
        "patchSetId": 3
      },
      "lineNbr": 38,
      "author": {
        "id": 1173914
      },
      "writtenOn": "2017-07-07T14:50:49Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "87a84850_e2330419",
      "range": {
        "startLine": 38,
        "startChar": 25,
        "endLine": 38,
        "endChar": 49
      },
      "revId": "55f6248dc41a2eeda4dbdd0de56a37e69316b757",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ab726ae8_635226a3",
        "filename": "content/browser/compositor/gpu_process_transport_factory.cc",
        "patchSetId": 3
      },
      "lineNbr": 199,
      "author": {
        "id": 1128437
      },
      "writtenOn": "2017-07-07T03:36:23Z",
      "side": 1,
      "message": "If there\u0027s no ExternalBeginFrameController (see comments there) then this can be a unique_ptr and the factory can create it by itself based on the enable_external_begin_frames flag.",
      "revId": "55f6248dc41a2eeda4dbdd0de56a37e69316b757",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "30fee002_92ac3bbb",
        "filename": "content/renderer/gpu/render_widget_compositor.h",
        "patchSetId": 3
      },
      "lineNbr": 82,
      "author": {
        "id": 1173914
      },
      "writtenOn": "2017-07-05T13:24:40Z",
      "side": 1,
      "message": "I didn\u0027t see another way to pass this per-widget setting down except through an additional parameter :/ All other compositor-related settings (in CompositorDependencies) are per RenderThread.\n\nAlternatively, maybe we can make the RenderWidget implement CompositorDependencies and delegate to the RenderThread for thread-specific settings?",
      "range": {
        "startLine": 82,
        "startChar": 11,
        "endLine": 82,
        "endChar": 51
      },
      "revId": "55f6248dc41a2eeda4dbdd0de56a37e69316b757",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d8916ea2_87e3c465",
        "filename": "content/renderer/gpu/render_widget_compositor.h",
        "patchSetId": 3
      },
      "lineNbr": 82,
      "author": {
        "id": 1116032
      },
      "writtenOn": "2017-07-06T12:40:12Z",
      "side": 1,
      "message": "Does it even make sense to mix waiting and non-waiting LayerTreeHosts in the same setup? If we can make the choice per-render thread and it is simpler then it feels like we should just do that.",
      "parentUuid": "30fee002_92ac3bbb",
      "range": {
        "startLine": 82,
        "startChar": 11,
        "endLine": 82,
        "endChar": 51
      },
      "revId": "55f6248dc41a2eeda4dbdd0de56a37e69316b757",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7b178ed0_535a4c37",
        "filename": "content/renderer/gpu/render_widget_compositor.h",
        "patchSetId": 3
      },
      "lineNbr": 82,
      "author": {
        "id": 1173914
      },
      "writtenOn": "2017-07-06T12:46:55Z",
      "side": 1,
      "message": "I guess we could restrict it to RenderThread. This would effectively mean that we control the full-pipe setting per BrowserContext rather than per WebContents, correct?",
      "parentUuid": "d8916ea2_87e3c465",
      "range": {
        "startLine": 82,
        "startChar": 11,
        "endLine": 82,
        "endChar": 51
      },
      "revId": "55f6248dc41a2eeda4dbdd0de56a37e69316b757",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1f1df8bf_ebac743a",
        "filename": "content/renderer/gpu/render_widget_compositor.h",
        "patchSetId": 3
      },
      "lineNbr": 82,
      "author": {
        "id": 1128437
      },
      "writtenOn": "2017-07-07T03:36:23Z",
      "side": 1,
      "message": "Almost every flag in CompositorDependencies is passed via command-line flags so they are per RenderThread. The notable exception is the scroll animator flag set here in a super hacky way (let\u0027s not do that) from CreateViewParams: https://cs.chromium.org/chromium/src/content/renderer/render_thread_impl.cc?rcl\u003d25ff9b7cb09ab7db6dd453c5d5c43779a58c8159\u0026l\u003d2161",
      "parentUuid": "7b178ed0_535a4c37",
      "range": {
        "startLine": 82,
        "startChar": 11,
        "endLine": 82,
        "endChar": 51
      },
      "revId": "55f6248dc41a2eeda4dbdd0de56a37e69316b757",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1e51d2ee_49513300",
        "filename": "content/renderer/gpu/render_widget_compositor.h",
        "patchSetId": 3
      },
      "lineNbr": 82,
      "author": {
        "id": 1173914
      },
      "writtenOn": "2017-07-07T14:50:49Z",
      "side": 1,
      "message": "OK, now using a command line flag instead and controlling whether to set it from BrowserContext.",
      "parentUuid": "1f1df8bf_ebac743a",
      "range": {
        "startLine": 82,
        "startChar": 11,
        "endLine": 82,
        "endChar": 51
      },
      "revId": "55f6248dc41a2eeda4dbdd0de56a37e69316b757",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "86c999d5_6911b0ad",
        "filename": "ui/compositor/external_begin_frame_controller.h",
        "patchSetId": 3
      },
      "lineNbr": 15,
      "author": {
        "id": 1116032
      },
      "writtenOn": "2017-07-06T12:40:12Z",
      "side": 1,
      "message": "Ditto about virtual destructor.",
      "range": {
        "startLine": 15,
        "startChar": 6,
        "endLine": 15,
        "endChar": 23
      },
      "revId": "55f6248dc41a2eeda4dbdd0de56a37e69316b757",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7e9ef687_baad6727",
        "filename": "ui/compositor/external_begin_frame_controller.h",
        "patchSetId": 3
      },
      "lineNbr": 15,
      "author": {
        "id": 1173914
      },
      "writtenOn": "2017-07-07T14:50:49Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "86c999d5_6911b0ad",
      "range": {
        "startLine": 15,
        "startChar": 6,
        "endLine": 15,
        "endChar": 23
      },
      "revId": "55f6248dc41a2eeda4dbdd0de56a37e69316b757",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dfe1dc74_2c27fa1f",
        "filename": "ui/compositor/external_begin_frame_controller.h",
        "patchSetId": 3
      },
      "lineNbr": 21,
      "author": {
        "id": 1128437
      },
      "writtenOn": "2017-07-07T03:36:23Z",
      "side": 1,
      "message": "I feel like a simpler design would be to add BeginFrameAck as a param to BeginFrameSource::DidFinishFrame which gets forwarded to ExternalBeginFrameSourceClient::DidFinishFrame (new method in that interface). That way there\u0027s no DisplaySchedulerObserver or ExternalBeginFrameController because you can use ExternalBeginFrameSource directly.",
      "revId": "55f6248dc41a2eeda4dbdd0de56a37e69316b757",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3869affa_872d356a",
        "filename": "ui/compositor/external_begin_frame_controller.h",
        "patchSetId": 3
      },
      "lineNbr": 21,
      "author": {
        "id": 1173914
      },
      "writtenOn": "2017-07-07T14:50:49Z",
      "side": 1,
      "message": "This would be an alternative, yes. It feels a little weird adding it to the BFS interface only for DisplayScheduler, though. We are not interested in BeginFrameAcks from any other BeginFrameObserver, so we\u0027d have to filter out all other BeginFrameObservers\u0027 calls to DidFinishFrame in GpuPTF.\n\nThe DisplaySchedulerObserver makes it explicit that we only want the ack from the DisplayScheduler. With the ExternalBFController, GpuPTF also doesn\u0027t need to deal with the ExternalBFS and ExternalBFControllerClient directly.\n\nI think I prefer this over adding the acks back to BFS::DidFinishFrame and making GpuPTF an ExternalBFSourceClient, wdyt?",
      "parentUuid": "dfe1dc74_2c27fa1f",
      "revId": "55f6248dc41a2eeda4dbdd0de56a37e69316b757",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d677ce02_da7d80af",
        "filename": "ui/compositor/external_begin_frame_controller.h",
        "patchSetId": 3
      },
      "lineNbr": 21,
      "author": {
        "id": 1128437
      },
      "writtenOn": "2017-07-11T06:30:21Z",
      "side": 1,
      "message": "I agree about DidFinishFrame although I\u0027d prefer that the interface be called DisplayObserver and be bound to the Display somehow and not the DisplayScheduler.\n\nHowever, the rest of ExternalBeginFrameController seems to duplicate the functionality in ExternalBFS/Client. Can you explain why a new layer of indirection is needed?",
      "parentUuid": "3869affa_872d356a",
      "revId": "55f6248dc41a2eeda4dbdd0de56a37e69316b757",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c4396dd9_5f87b48a",
        "filename": "ui/compositor/external_begin_frame_controller.h",
        "patchSetId": 3
      },
      "lineNbr": 21,
      "author": {
        "id": 1173914
      },
      "writtenOn": "2017-07-11T09:11:05Z",
      "side": 1,
      "message": "Moved observer to Display.\n\nI could integrate the functionality implemented in ExternalBFController into ui::Compositor or GpuPTF, too. Just figured it would make sense not to bloat either of them further. I\u0027d like to avoid exposing BeginFrameSources (ExternalBFS/Client) to clients, so that we can later move relatively easily to IPC for ExternalBeginFrameController/Client interaction once the DisplayCopmositor lives in a different process. Does that make sense? :) \n\n+fsamuel@ since he might have comments about how to best do this, too.",
      "parentUuid": "d677ce02_da7d80af",
      "revId": "55f6248dc41a2eeda4dbdd0de56a37e69316b757",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}