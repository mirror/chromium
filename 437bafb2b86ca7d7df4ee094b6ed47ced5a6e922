{
  "comments": [
    {
      "key": {
        "uuid": "32744e6a_ad37869d",
        "filename": "third_party/WebKit/Source/platform/heap/ThreadState.cpp",
        "patchSetId": 3
      },
      "lineNbr": 390,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2017-10-06T09:55:25Z",
      "side": 1,
      "message": "As a starting point, shall we enable the incremental marking only after the incremental sweeping is done?",
      "revId": "437bafb2b86ca7d7df4ee094b6ed47ced5a6e922",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ce30a311_402c82c5",
        "filename": "third_party/WebKit/Source/platform/heap/ThreadState.cpp",
        "patchSetId": 3
      },
      "lineNbr": 390,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2017-10-06T11:31:06Z",
      "side": 1,
      "message": "Incremental marking finishes incremental sweeping for now. \n\nAt some point I\u0027d like to handle this similar to V8, where we finish sweeping in incremental marking steps.",
      "parentUuid": "32744e6a_ad37869d",
      "revId": "437bafb2b86ca7d7df4ee094b6ed47ced5a6e922",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7d0a3a84_a172d2b6",
        "filename": "third_party/WebKit/Source/platform/heap/ThreadState.cpp",
        "patchSetId": 3
      },
      "lineNbr": 390,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2017-10-06T15:12:28Z",
      "side": 1,
      "message": "Hmm, I don\u0027t think it will happen. See line 536. If the incremental sweeping is on-going, ShouldScheduleIncrementalMarking() should not be called.\n\nEither way, I\u0027d prefer starting with a simple logic and then make it smarter as needed.",
      "parentUuid": "ce30a311_402c82c5",
      "revId": "437bafb2b86ca7d7df4ee094b6ed47ced5a6e922",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e5a7101b_c3eec4e9",
        "filename": "third_party/WebKit/Source/platform/heap/ThreadState.cpp",
        "patchSetId": 3
      },
      "lineNbr": 390,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2017-10-06T15:27:53Z",
      "side": 1,
      "message": "I think line 536 is either a bug or we should reshuffle ShouldScheduleGC in general.\n\nThere is also a CompleteSweep() call on line 543 and it looks like we bail out even of conservative GCs if sweeping is on, which seems like a bug...",
      "parentUuid": "7d0a3a84_a172d2b6",
      "revId": "437bafb2b86ca7d7df4ee094b6ed47ced5a6e922",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d2f5556e_ae561a07",
        "filename": "third_party/WebKit/Source/platform/heap/ThreadState.cpp",
        "patchSetId": 3
      },
      "lineNbr": 390,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2017-10-06T15:38:11Z",
      "side": 1,
      "message": "Nice catch! Yeah, we should probably remove line 536 and 537.\n\nThat said, I don\u0027t think it makes sense to add GcState()\u003d\u003dkSweeping here. If we do this, we will end up with calling CompleteSweep() when ScheduleGCIfNeeded() gets called at the first time. I guess it will end up mostly disabling the incremental sweeping.",
      "parentUuid": "e5a7101b_c3eec4e9",
      "revId": "437bafb2b86ca7d7df4ee094b6ed47ced5a6e922",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bce90a45_3d6eecec",
        "filename": "third_party/WebKit/Source/platform/heap/ThreadState.cpp",
        "patchSetId": 3
      },
      "lineNbr": 390,
      "author": {
        "id": 1119605
      },
      "writtenOn": "2017-10-09T09:46:30Z",
      "side": 1,
      "message": "There is an inherent trade-off between jank and memory consumption here. If we do not complete sweeping or contribute to incremental sweeping here it may take forever to finish and the current marking phase will be delayed which will result in higher memory consumption.\n\nV8 picked a hybrid that works quite well. I think overall we should design the system similar to V8 which will allow us to better synchronize the phases when we unify them.",
      "parentUuid": "d2f5556e_ae561a07",
      "revId": "437bafb2b86ca7d7df4ee094b6ed47ced5a6e922",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d4cecef7_a87b073e",
        "filename": "third_party/WebKit/Source/platform/heap/ThreadState.cpp",
        "patchSetId": 3
      },
      "lineNbr": 503,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2017-10-06T09:55:25Z",
      "side": 1,
      "message": "What is this function expected to do?\n\nIs it expected that MigrateIncrementalMarkingToFullGCIfNecessary forces a full GC and then the following CollectGarbage runs another GC?\n\nWould it make sense to complete incremental marking during the following CollectGarbage?",
      "revId": "437bafb2b86ca7d7df4ee094b6ed47ced5a6e922",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "88bcd9fb_ba5e911c",
        "filename": "third_party/WebKit/Source/platform/heap/ThreadState.cpp",
        "patchSetId": 3
      },
      "lineNbr": 503,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2017-10-06T15:12:28Z",
      "side": 1,
      "message": "Ping on this?",
      "parentUuid": "d4cecef7_a87b073e",
      "revId": "437bafb2b86ca7d7df4ee094b6ed47ced5a6e922",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f9523201_90e152e4",
        "filename": "third_party/WebKit/Source/platform/heap/ThreadState.cpp",
        "patchSetId": 3
      },
      "lineNbr": 503,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2017-10-06T15:27:53Z",
      "side": 1,
      "message": "Already answered this to Hannes: \n\nMigrateIncrementalMarkingToFullGCIfNecessary will migrate counters, statistics and potentially GcState so that we can just call CollectGarbage.\n\nHappy to remove for this CL but I think we will need something like this pretty soon.",
      "parentUuid": "88bcd9fb_ba5e911c",
      "revId": "437bafb2b86ca7d7df4ee094b6ed47ced5a6e922",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d0362103_2c7ff095",
        "filename": "third_party/WebKit/Source/platform/heap/ThreadState.cpp",
        "patchSetId": 3
      },
      "lineNbr": 503,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2017-10-06T15:38:11Z",
      "side": 1,
      "message": "Yeah, let\u0027s factor it out from this CL.\n\nI guess we should use MakeConsistentForGC() for those purposes.",
      "parentUuid": "f9523201_90e152e4",
      "revId": "437bafb2b86ca7d7df4ee094b6ed47ced5a6e922",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d57a2f1c_f966a367",
        "filename": "third_party/WebKit/Source/platform/heap/ThreadState.cpp",
        "patchSetId": 3
      },
      "lineNbr": 683,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2017-10-06T09:55:25Z",
      "side": 1,
      "message": "So I\u0027d prefer starting with CHECK(!IsSweepingInProgress()) (until we incorporate incremental sweeping into incremental steps).",
      "revId": "437bafb2b86ca7d7df4ee094b6ed47ced5a6e922",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fc2209dc_bac3fc41",
        "filename": "third_party/WebKit/Source/platform/heap/ThreadState.cpp",
        "patchSetId": 3
      },
      "lineNbr": 683,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2017-10-06T11:31:06Z",
      "side": 1,
      "message": "I\u0027d like to keep this as in V8.",
      "parentUuid": "d57a2f1c_f966a367",
      "revId": "437bafb2b86ca7d7df4ee094b6ed47ced5a6e922",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "44cdd882_b219cbf9",
        "filename": "third_party/WebKit/Source/platform/heap/ThreadState.cpp",
        "patchSetId": 3
      },
      "lineNbr": 778,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2017-10-06T09:55:25Z",
      "side": 1,
      "message": "So I want to drop kSweeping for now.",
      "revId": "437bafb2b86ca7d7df4ee094b6ed47ced5a6e922",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2891dbde_5d1b9fe1",
        "filename": "third_party/WebKit/Source/platform/heap/ThreadState.cpp",
        "patchSetId": 3
      },
      "lineNbr": 778,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2017-10-06T11:31:06Z",
      "side": 1,
      "message": "I\u0027d like to keep it as in V8.",
      "parentUuid": "44cdd882_b219cbf9",
      "revId": "437bafb2b86ca7d7df4ee094b6ed47ced5a6e922",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2e17495a_75f78881",
        "filename": "third_party/WebKit/Source/platform/heap/ThreadState.h",
        "patchSetId": 3
      },
      "lineNbr": 141,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2017-10-06T09:55:25Z",
      "side": 1,
      "message": "Would you help me understand why we need the kIncrementalMarkingStartScheduled state?\n\n(I\u0027d like to decrease # of GC states because the state transition model is already complex :-)",
      "revId": "437bafb2b86ca7d7df4ee094b6ed47ced5a6e922",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "79ba1a83_c299f507",
        "filename": "third_party/WebKit/Source/platform/heap/ThreadState.h",
        "patchSetId": 3
      },
      "lineNbr": 141,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2017-10-06T11:31:06Z",
      "side": 1,
      "message": "For incremental marking we actuall schedule tasks. Having explicit states allows us to reason about what tasks have been scheduled and which actions we might take.",
      "parentUuid": "2e17495a_75f78881",
      "revId": "437bafb2b86ca7d7df4ee094b6ed47ced5a6e922",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7ced7c87_35bc32cd",
        "filename": "third_party/WebKit/Source/platform/heap/ThreadState.h",
        "patchSetId": 3
      },
      "lineNbr": 143,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2017-10-06T09:55:25Z",
      "side": 1,
      "message": "Would you help me understand why we need the kIncrementalMarkingFinalizeScheduled state?",
      "revId": "437bafb2b86ca7d7df4ee094b6ed47ced5a6e922",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d20f0720_8e44fa9c",
        "filename": "third_party/WebKit/Source/platform/heap/ThreadState.h",
        "patchSetId": 3
      },
      "lineNbr": 143,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2017-10-06T11:31:06Z",
      "side": 1,
      "message": "I suspect that there might be counters (local, UMA) that need to be flushed back here before we enter a precise GC.\n\nFurthermore, I\u0027d like to disable the barrier here.\n\nWe can always remove phases if we figure out that we don\u0027t need them later on. I\u0027d just like to have something I can play with for now.",
      "parentUuid": "7ced7c87_35bc32cd",
      "revId": "437bafb2b86ca7d7df4ee094b6ed47ced5a6e922",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b55f8c60_633f1d5e",
        "filename": "third_party/WebKit/Source/platform/heap/ThreadState.h",
        "patchSetId": 3
      },
      "lineNbr": 143,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2017-10-06T15:12:28Z",
      "side": 1,
      "message": "What\u0027s an issue of using kIncrementalMarking from when the incremental marking started to when the incremental marking is done?\n\nI\u0027d like to add more phases as necessary to avoid adding unnecessary complexity to the state transition :)",
      "parentUuid": "d20f0720_8e44fa9c",
      "revId": "437bafb2b86ca7d7df4ee094b6ed47ced5a6e922",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "95b59d20_bcef908d",
        "filename": "third_party/WebKit/Source/platform/runtime_enabled_features.json5",
        "patchSetId": 3
      },
      "lineNbr": 463,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2017-10-06T09:55:25Z",
      "side": 1,
      "message": "BlinkGCIncrementalMarking",
      "revId": "437bafb2b86ca7d7df4ee094b6ed47ced5a6e922",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}