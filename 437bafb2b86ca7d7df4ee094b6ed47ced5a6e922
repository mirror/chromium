{
  "comments": [
    {
      "key": {
        "uuid": "32744e6a_ad37869d",
        "filename": "third_party/WebKit/Source/platform/heap/ThreadState.cpp",
        "patchSetId": 3
      },
      "lineNbr": 390,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2017-10-06T09:55:25Z",
      "side": 1,
      "message": "As a starting point, shall we enable the incremental marking only after the incremental sweeping is done?",
      "revId": "437bafb2b86ca7d7df4ee094b6ed47ced5a6e922",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d4cecef7_a87b073e",
        "filename": "third_party/WebKit/Source/platform/heap/ThreadState.cpp",
        "patchSetId": 3
      },
      "lineNbr": 503,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2017-10-06T09:55:25Z",
      "side": 1,
      "message": "What is this function expected to do?\n\nIs it expected that MigrateIncrementalMarkingToFullGCIfNecessary forces a full GC and then the following CollectGarbage runs another GC?\n\nWould it make sense to complete incremental marking during the following CollectGarbage?",
      "revId": "437bafb2b86ca7d7df4ee094b6ed47ced5a6e922",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d57a2f1c_f966a367",
        "filename": "third_party/WebKit/Source/platform/heap/ThreadState.cpp",
        "patchSetId": 3
      },
      "lineNbr": 683,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2017-10-06T09:55:25Z",
      "side": 1,
      "message": "So I\u0027d prefer starting with CHECK(!IsSweepingInProgress()) (until we incorporate incremental sweeping into incremental steps).",
      "revId": "437bafb2b86ca7d7df4ee094b6ed47ced5a6e922",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "44cdd882_b219cbf9",
        "filename": "third_party/WebKit/Source/platform/heap/ThreadState.cpp",
        "patchSetId": 3
      },
      "lineNbr": 778,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2017-10-06T09:55:25Z",
      "side": 1,
      "message": "So I want to drop kSweeping for now.",
      "revId": "437bafb2b86ca7d7df4ee094b6ed47ced5a6e922",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2e17495a_75f78881",
        "filename": "third_party/WebKit/Source/platform/heap/ThreadState.h",
        "patchSetId": 3
      },
      "lineNbr": 141,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2017-10-06T09:55:25Z",
      "side": 1,
      "message": "Would you help me understand why we need the kIncrementalMarkingStartScheduled state?\n\n(I\u0027d like to decrease # of GC states because the state transition model is already complex :-)",
      "revId": "437bafb2b86ca7d7df4ee094b6ed47ced5a6e922",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7ced7c87_35bc32cd",
        "filename": "third_party/WebKit/Source/platform/heap/ThreadState.h",
        "patchSetId": 3
      },
      "lineNbr": 143,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2017-10-06T09:55:25Z",
      "side": 1,
      "message": "Would you help me understand why we need the kIncrementalMarkingFinalizeScheduled state?",
      "revId": "437bafb2b86ca7d7df4ee094b6ed47ced5a6e922",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "95b59d20_bcef908d",
        "filename": "third_party/WebKit/Source/platform/runtime_enabled_features.json5",
        "patchSetId": 3
      },
      "lineNbr": 463,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2017-10-06T09:55:25Z",
      "side": 1,
      "message": "BlinkGCIncrementalMarking",
      "revId": "437bafb2b86ca7d7df4ee094b6ed47ced5a6e922",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}