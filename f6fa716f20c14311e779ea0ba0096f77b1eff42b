{
  "comments": [
    {
      "key": {
        "uuid": "8bf3fe78_55dcf04b",
        "filename": "content/common/unique_name_helper.cc",
        "patchSetId": 11
      },
      "lineNbr": 29,
      "author": {
        "id": 1130134
      },
      "writtenOn": "2017-10-19T15:47:21Z",
      "side": 1,
      "message": "Hmm... maybe I should add NOTREACHED here...",
      "range": {
        "startLine": 29,
        "startChar": 39,
        "endLine": 29,
        "endChar": 56
      },
      "revId": "f6fa716f20c14311e779ea0ba0096f77b1eff42b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "32713d9a_dea1d221",
        "filename": "content/common/unique_name_helper.cc",
        "patchSetId": 11
      },
      "lineNbr": 29,
      "author": {
        "id": 1130134
      },
      "writtenOn": "2017-10-24T23:11:09Z",
      "side": 1,
      "message": "I\u0027ve addressed this by abandoning the virtual IsDynamicFrame approach and instead exposing UniqueNameHelper::Freeze() method.",
      "parentUuid": "8bf3fe78_55dcf04b",
      "range": {
        "startLine": 29,
        "startChar": 39,
        "endLine": 29,
        "endChar": 56
      },
      "revId": "f6fa716f20c14311e779ea0ba0096f77b1eff42b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0fe7553a_1480e3fc",
        "filename": "content/common/unique_name_helper.h",
        "patchSetId": 11
      },
      "lineNbr": 78,
      "author": {
        "id": 1130134
      },
      "writtenOn": "2017-10-19T15:47:21Z",
      "side": 1,
      "message": "In theory we could call this DoesNeedDynamicNameSuffix, but I think IsDynamicFrame is better here.",
      "range": {
        "startLine": 78,
        "startChar": 17,
        "endLine": 78,
        "endChar": 33
      },
      "revId": "f6fa716f20c14311e779ea0ba0096f77b1eff42b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b5780480_9c807864",
        "filename": "content/common/unique_name_helper.h",
        "patchSetId": 11
      },
      "lineNbr": 163,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-10-20T20:22:09Z",
      "side": 1,
      "message": "Hmm, it seems unfortunate that we have to keep the old unique name for dynamic frames, plus the GUID suffix.  Is this just to support layout tests?\n\nI wonder if there\u0027s a different way to handle this, such that we can have a shorter and simpler unique name for dynamic frames (i.e., just the suffix you\u0027re creating, nothing else).\n\nI don\u0027t suppose the old unique name can be computed on demand for the layout tests, if it depends on frame creation order?  Maybe there\u0027s some other test-only approach we could use?",
      "revId": "f6fa716f20c14311e779ea0ba0096f77b1eff42b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "72336d25_67be391d",
        "filename": "content/common/unique_name_helper.h",
        "patchSetId": 11
      },
      "lineNbr": 163,
      "author": {
        "id": 1130134
      },
      "writtenOn": "2017-10-24T23:11:09Z",
      "side": 1,
      "message": "I\u0027ve tried this (introducing RenderFrameImpl::unique_name_override_for_layout_tests_ field), but this didn\u0027t work for DumpFrameState in blink_test_controller.cc (which needs to emit the old unique name, but it only has new unique name from |frame_state.target| and doesn\u0027t have access to the historical RenderFrameImpl).\n\nIn theory we could let UniqueNameHelper know that it is operating in layout tests mode by calling a hypothetical UniqueNameHelper::EnterLayoutTestsModeForTesting() from EnableRendererLayoutTestMode() in content/test/layouttest_support.cc.  OTOH, I am slightly worried about doing a different thing in tests and in product.  In theory the difference shouldn\u0027t matter, but there is a risk that we would be testing something other than what we ship...\n\nWDYT?",
      "parentUuid": "b5780480_9c807864",
      "revId": "f6fa716f20c14311e779ea0ba0096f77b1eff42b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "48672b04_175972f6",
        "filename": "content/common/unique_name_helper.h",
        "patchSetId": 11
      },
      "lineNbr": 163,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-10-26T22:18:58Z",
      "side": 1,
      "message": "I\u0027m fairly concerned about the suffix approach, since it seems like it could significantly affect the savings we were getting from dcheng@\u0027s https://chromium-review.googlesource.com/c/chromium/src/+/624817 (which put a limit of 80 characters on frame names).  Adding a suffix and GUID to that name could almost double it in a common case (where ads are added to a page).\n\nI see your point about testing different behavior than we ship with, but I think that\u0027s already true with the suffix removal.  Removing the suffix means layout tests will assume that the unique name is what it was before this bug fix, so they would presumably conclude that this bug isn\u0027t fixed.\n\nDo we have any other layout test framework options for addressing this sort of dynamic value in expectations?  If not, I might lean toward the EnterLayoutTestsModeForTesting() idea, to let us keep the names shorter in practice.",
      "parentUuid": "72336d25_67be391d",
      "revId": "f6fa716f20c14311e779ea0ba0096f77b1eff42b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "55e3bc3e_bdf1a12c",
        "filename": "content/renderer/render_frame_impl.h",
        "patchSetId": 11
      },
      "lineNbr": 1225,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-10-20T20:22:09Z",
      "side": 1,
      "message": "Worth having a comment here saying what \"dynamic\" means, so future reviewers can tell when this is meant to be called.",
      "revId": "f6fa716f20c14311e779ea0ba0096f77b1eff42b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "26d46e1b_b351b4dd",
        "filename": "content/renderer/render_frame_impl.h",
        "patchSetId": 11
      },
      "lineNbr": 1225,
      "author": {
        "id": 1130134
      },
      "writtenOn": "2017-10-24T23:11:09Z",
      "side": 1,
      "message": "This method has disappeared in the latest patchset.  OTOH, I\u0027ve tried to explain what \"dynamic\" means in the comment for UniqueNameHelper::GenerateNameForNewChildFrame.",
      "parentUuid": "55e3bc3e_bdf1a12c",
      "revId": "f6fa716f20c14311e779ea0ba0096f77b1eff42b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "299fabcc_125a65df",
        "filename": "content/shell/test_runner/web_frame_test_client.cc",
        "patchSetId": 11
      },
      "lineNbr": 549,
      "author": {
        "id": 1130134
      },
      "writtenOn": "2017-10-19T15:47:21Z",
      "side": 1,
      "message": "Just modernizing the code - no expected behavior change.",
      "range": {
        "startLine": 549,
        "startChar": 4,
        "endLine": 549,
        "endChar": 39
      },
      "revId": "f6fa716f20c14311e779ea0ba0096f77b1eff42b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "09e2230c_06bf3162",
        "filename": "third_party/WebKit/LayoutTests/fast/frames/unique-name-all-subframes-have-same-name-expected.txt",
        "patchSetId": 11
      },
      "lineNbr": 24,
      "author": {
        "id": 1130134
      },
      "writtenOn": "2017-10-19T15:47:21Z",
      "side": 1,
      "message": "Expected change - after this CL there will be no uniqueName conflict anymore, so the 4/1 suffix won\u0027t be used (the names differ by the dynamicFrameId which is ommitted by layout tests).",
      "range": {
        "startLine": 24,
        "startChar": 7,
        "endLine": 24,
        "endChar": 65
      },
      "revId": "f6fa716f20c14311e779ea0ba0096f77b1eff42b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "84978e77_af89139d",
        "filename": "third_party/WebKit/LayoutTests/fast/history/history-length-append-subframe-no-hash-expected.txt",
        "patchSetId": 11
      },
      "lineNbr": 14,
      "author": {
        "id": 1130134
      },
      "writtenOn": "2017-10-19T15:47:21Z",
      "side": 1,
      "message": "Similarily here - the old FNE for this dynamic frame has a different name than the new FNE (the difference is in the dynamicFrameId that is stripped in the layout tests output).  So - the test change is expected (and the essence of this test is still getting verified [\"that appending iframe with with no URL and setting its URL later (without the hash part) does not overwrite current history entry\"].",
      "range": {
        "startLine": 14,
        "startChar": 12,
        "endLine": 14,
        "endChar": 69
      },
      "revId": "f6fa716f20c14311e779ea0ba0096f77b1eff42b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a2ad8ff7_9dff6331",
        "filename": "third_party/WebKit/Source/core/frame/WebLocalFrameImpl.cpp",
        "patchSetId": 11
      },
      "lineNbr": 2138,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-10-20T20:22:09Z",
      "side": 1,
      "message": "Is this the right condition?  As we\u0027re discussing in the test, I wonder if this would return false for a page that is adding iframes in an inline script tag as the page is still being parsed.  If that script were non-deterministic in how it added the iframes, we might face the same race.\n\nNot sure if there\u0027s an easy way to detect that case?  Maybe it doesn\u0027t matter, since a page that does that is kind of shooting itself in the foot for session restore?",
      "revId": "f6fa716f20c14311e779ea0ba0096f77b1eff42b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d5f8328b_f44e8da4",
        "filename": "third_party/WebKit/Source/core/frame/WebLocalFrameImpl.cpp",
        "patchSetId": 11
      },
      "lineNbr": 2138,
      "author": {
        "id": 1130134
      },
      "writtenOn": "2017-10-24T23:11:09Z",
      "side": 1,
      "message": "You\u0027re right - this doesn\u0027t catch frames created by inline scripts (i.e. scripts which execute happen before the onLoad event).  I\u0027ve added a test for this situation and it seems that detecting this situation via v8::Isolate::GetCurrent()-\u003eInContext() (instead of HasFinishedParsing) is working okay.",
      "parentUuid": "a2ad8ff7_9dff6331",
      "revId": "f6fa716f20c14311e779ea0ba0096f77b1eff42b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bcc646fb_dc40d88e",
        "filename": "third_party/WebKit/Source/core/frame/WebLocalFrameImpl.cpp",
        "patchSetId": 11
      },
      "lineNbr": 2138,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-10-26T22:18:58Z",
      "side": 1,
      "message": "Great, thanks!",
      "parentUuid": "d5f8328b_f44e8da4",
      "revId": "f6fa716f20c14311e779ea0ba0096f77b1eff42b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}