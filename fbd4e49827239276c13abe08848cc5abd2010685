{
  "comments": [
    {
      "key": {
        "uuid": "e18b337e_d4f899da",
        "filename": "media/audio/alive_checker.cc",
        "patchSetId": 11
      },
      "lineNbr": 27,
      "author": {
        "id": 1153409
      },
      "writtenOn": "2017-10-02T15:17:41Z",
      "side": 1,
      "message": "Needs a comment why Unretained() is safe.",
      "revId": "fbd4e49827239276c13abe08848cc5abd2010685",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f74d30cc_26645b31",
        "filename": "media/audio/alive_checker.cc",
        "patchSetId": 11
      },
      "lineNbr": 30,
      "author": {
        "id": 1153409
      },
      "writtenOn": "2017-10-02T15:17:41Z",
      "side": 1,
      "message": "Interface does not mention a possibility of having a null callback.\nOverload the constructor instead (with/without callback)? Update documentation, explain what is created by default?",
      "revId": "fbd4e49827239276c13abe08848cc5abd2010685",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "53bb911b_d3a8d715",
        "filename": "media/audio/alive_checker.cc",
        "patchSetId": 11
      },
      "lineNbr": 47,
      "author": {
        "id": 1153409
      },
      "writtenOn": "2017-10-02T15:17:41Z",
      "side": 1,
      "message": "DCHECK(task_runner_-\u003eRunsTasksInCurrentSequence())? (since weak pointers are involved)",
      "revId": "fbd4e49827239276c13abe08848cc5abd2010685",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bcb3f6e2_d432852a",
        "filename": "media/audio/alive_checker.h",
        "patchSetId": 11
      },
      "lineNbr": 29,
      "author": {
        "id": 1153409
      },
      "writtenOn": "2017-10-02T15:17:41Z",
      "side": 1,
      "message": "Would be easier to read if it mentions what \"suspending\" is referred to here.",
      "revId": "fbd4e49827239276c13abe08848cc5abd2010685",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2d527506_03aedabc",
        "filename": "media/audio/alive_checker.h",
        "patchSetId": 11
      },
      "lineNbr": 33,
      "author": {
        "id": 1153409
      },
      "writtenOn": "2017-10-02T15:17:41Z",
      "side": 1,
      "message": "The object \u003d AliveChecker or the client?",
      "revId": "fbd4e49827239276c13abe08848cc5abd2010685",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ee1e6cfd_e6247ed4",
        "filename": "media/audio/alive_checker.h",
        "patchSetId": 11
      },
      "lineNbr": 34,
      "author": {
        "id": 1153409
      },
      "writtenOn": "2017-10-02T15:17:41Z",
      "side": 1,
      "message": "exception?",
      "revId": "fbd4e49827239276c13abe08848cc5abd2010685",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0cb57dd1_56eff827",
        "filename": "media/audio/alive_checker.h",
        "patchSetId": 11
      },
      "lineNbr": 36,
      "author": {
        "id": 1153409
      },
      "writtenOn": "2017-10-02T15:17:41Z",
      "side": 1,
      "message": "after at?",
      "revId": "fbd4e49827239276c13abe08848cc5abd2010685",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "95393266_9e656892",
        "filename": "media/audio/alive_checker.h",
        "patchSetId": 11
      },
      "lineNbr": 49,
      "author": {
        "id": 1153409
      },
      "writtenOn": "2017-10-02T15:17:41Z",
      "side": 1,
      "message": "Parameters require comments: |dead_callback| is unclear, as well as |check_interval| vs timeout.\nOn which thread |dead_callback| and |create_power_observer_callback| are called?",
      "revId": "fbd4e49827239276c13abe08848cc5abd2010685",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "caa1803b_7f7c4143",
        "filename": "media/audio/alive_checker.h",
        "patchSetId": 11
      },
      "lineNbr": 51,
      "author": {
        "id": 1153409
      },
      "writtenOn": "2017-10-02T15:17:41Z",
      "side": 1,
      "message": "Under which conditions |dead_callback| can run multiple times? This needs a comment.",
      "revId": "fbd4e49827239276c13abe08848cc5abd2010685",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1b7e2bdf_5eb68c33",
        "filename": "media/audio/alive_checker.h",
        "patchSetId": 11
      },
      "lineNbr": 53,
      "author": {
        "id": 1153409
      },
      "writtenOn": "2017-10-02T15:17:41Z",
      "side": 1,
      "message": "What if |timeout| is smaller that |check_interval|? Unit tests for that?\nWhat if either of them is null?",
      "revId": "fbd4e49827239276c13abe08848cc5abd2010685",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "238649af_fae7e8f3",
        "filename": "media/audio/alive_checker.h",
        "patchSetId": 11
      },
      "lineNbr": 55,
      "author": {
        "id": 1153409
      },
      "writtenOn": "2017-10-02T15:17:41Z",
      "side": 1,
      "message": "These two could be bit fields of \"options\" integer.",
      "revId": "fbd4e49827239276c13abe08848cc5abd2010685",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "783abd40_1538978f",
        "filename": "media/audio/alive_checker.h",
        "patchSetId": 11
      },
      "lineNbr": 60,
      "author": {
        "id": 1153409
      },
      "writtenOn": "2017-10-02T15:17:41Z",
      "side": 1,
      "message": "\"checking if the client is alive\"? (Otherwise it sounds like  Start/Stop would work only if something is alive)",
      "revId": "fbd4e49827239276c13abe08848cc5abd2010685",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8dbf9a33_73f83da3",
        "filename": "media/audio/alive_checker.h",
        "patchSetId": 11
      },
      "lineNbr": 79,
      "author": {
        "id": 1153409
      },
      "writtenOn": "2017-10-02T15:17:41Z",
      "side": 1,
      "message": "|last_alive_notification_time_|\nWhy is it called OnResume() then? Either call it \"ResetBlaBlaBla\" or explain when the function is supposed to be called?",
      "revId": "fbd4e49827239276c13abe08848cc5abd2010685",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3820ec1f_12ae9e43",
        "filename": "media/audio/alive_checker.h",
        "patchSetId": 11
      },
      "lineNbr": 85,
      "author": {
        "id": 1153409
      },
      "writtenOn": "2017-10-02T15:17:41Z",
      "side": 1,
      "message": "Not sure what \"the time for the alive notification\" means.\nLast time when NotifyAlive() was called?",
      "revId": "fbd4e49827239276c13abe08848cc5abd2010685",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "14c03797_0957cc30",
        "filename": "media/audio/alive_checker.h",
        "patchSetId": 11
      },
      "lineNbr": 96,
      "author": {
        "id": 1153409
      },
      "writtenOn": "2017-10-02T15:17:41Z",
      "side": 1,
      "message": "The time interval since.. after which we decide the client is dead and run |dead_callback_|.",
      "revId": "fbd4e49827239276c13abe08848cc5abd2010685",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6ebbb1fa_97bd8987",
        "filename": "media/audio/alive_checker.h",
        "patchSetId": 11
      },
      "lineNbr": 100,
      "author": {
        "id": 1153409
      },
      "writtenOn": "2017-10-02T15:17:41Z",
      "side": 1,
      "message": "How many times it can be set? Can it be cleared?\nCan we Start() after |detected_dead_| is true?",
      "revId": "fbd4e49827239276c13abe08848cc5abd2010685",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "96461d55_5bbf3fbb",
        "filename": "media/audio/alive_checker_unittest.cc",
        "patchSetId": 11
      },
      "lineNbr": 63,
      "author": {
        "id": 1153409
      },
      "writtenOn": "2017-10-02T15:17:41Z",
      "side": 1,
      "message": "AliveChecker::DetectedDead() is not tested to return true/false under various conditions.\nAnd this function name is confusing, since it masks AliveChecker::DetectedDead().",
      "revId": "fbd4e49827239276c13abe08848cc5abd2010685",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "109c0a9d_3ffc85f4",
        "filename": "media/audio/alive_checker_unittest.cc",
        "patchSetId": 11
      },
      "lineNbr": 106,
      "author": {
        "id": 1153409
      },
      "writtenOn": "2017-10-02T15:17:41Z",
      "side": 1,
      "message": "TimeDelta",
      "revId": "fbd4e49827239276c13abe08848cc5abd2010685",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "34028d82_b697a7a5",
        "filename": "media/audio/alive_checker_unittest.cc",
        "patchSetId": 11
      },
      "lineNbr": 117,
      "author": {
        "id": 1153409
      },
      "writtenOn": "2017-10-02T15:17:41Z",
      "side": 1,
      "message": "The thread should outlive |alive_checker_|, and |alive_checker_| needs to be deleted on it, due to weak pointer usage.",
      "revId": "fbd4e49827239276c13abe08848cc5abd2010685",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7edffe07_8953e90e",
        "filename": "media/audio/alive_checker_unittest.cc",
        "patchSetId": 11
      },
      "lineNbr": 144,
      "author": {
        "id": 1153409
      },
      "writtenOn": "2017-10-02T15:17:41Z",
      "side": 1,
      "message": "Why repeating callback for posting everywhere?",
      "revId": "fbd4e49827239276c13abe08848cc5abd2010685",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9183163a_f8b8950b",
        "filename": "media/audio/audio_input_device.cc",
        "patchSetId": 11
      },
      "lineNbr": 199,
      "author": {
        "id": 1153409
      },
      "writtenOn": "2017-10-02T15:17:41Z",
      "side": 1,
      "message": "I don\u0027t think it makes sense to allow it to be created on one thread and live/be destroyed on another: it may lead to subtle errors if it\u0027s a member of a ref-counted object.\nMaybe skip passing a task runner and make it to be bound to the one it\u0027s created on?",
      "revId": "fbd4e49827239276c13abe08848cc5abd2010685",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2386cc57_5f26a9df",
        "filename": "media/audio/audio_input_device.cc",
        "patchSetId": 11
      },
      "lineNbr": 204,
      "author": {
        "id": 1153409
      },
      "writtenOn": "2017-10-02T15:17:41Z",
      "side": 1,
      "message": "See my comment re: overloading AliveChecker constructor. Passing an empty callback looks confusing.",
      "revId": "fbd4e49827239276c13abe08848cc5abd2010685",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3269604a_7785314e",
        "filename": "media/audio/audio_input_device.cc",
        "patchSetId": 11
      },
      "lineNbr": 206,
      "author": {
        "id": 1153409
      },
      "writtenOn": "2017-10-02T15:17:41Z",
      "side": 1,
      "message": "Add a comment in the header that |alive_checker_| needs to do so.",
      "revId": "fbd4e49827239276c13abe08848cc5abd2010685",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "de4c928d_902732e9",
        "filename": "media/audio/audio_input_device.h",
        "patchSetId": 11
      },
      "lineNbr": 163,
      "author": {
        "id": 1153409
      },
      "writtenOn": "2017-10-02T15:17:41Z",
      "side": 1,
      "message": "Add a comment why this one and the two below need to be deleted on IO thread; move it below |audio_thread_lock_|.",
      "revId": "fbd4e49827239276c13abe08848cc5abd2010685",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9b7388a4_b33203e7",
        "filename": "media/audio/power_observer_helper.cc",
        "patchSetId": 11
      },
      "lineNbr": 32,
      "author": {
        "id": 1153409
      },
      "writtenOn": "2017-10-02T15:17:41Z",
      "side": 1,
      "message": "Sequence check? (weak pointers involved)",
      "revId": "fbd4e49827239276c13abe08848cc5abd2010685",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ec9b8c7a_a961554a",
        "filename": "media/audio/power_observer_helper.h",
        "patchSetId": 11
      },
      "lineNbr": 33,
      "author": {
        "id": 1153409
      },
      "writtenOn": "2017-10-02T15:17:41Z",
      "side": 1,
      "message": "Why protected? It it\u0027s for testing, then data members should be private, and you can give access to them trough protected FooForTesting() methods.",
      "revId": "fbd4e49827239276c13abe08848cc5abd2010685",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e6eea76b_97971b12",
        "filename": "media/audio/power_observer_helper_unittest.cc",
        "patchSetId": 11
      },
      "lineNbr": 69,
      "author": {
        "id": 1153409
      },
      "writtenOn": "2017-10-02T15:17:41Z",
      "side": 1,
      "message": "Is it a normal scenario that the thread is destroyed before the observer?",
      "revId": "fbd4e49827239276c13abe08848cc5abd2010685",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "651981b9_408f4713",
        "filename": "media/audio/power_observer_helper_unittest.cc",
        "patchSetId": 11
      },
      "lineNbr": 103,
      "author": {
        "id": 1153409
      },
      "writtenOn": "2017-10-02T15:17:41Z",
      "side": 1,
      "message": "What about the next suspend/resume pair?\nWhat if we have 2 suspends in a row? 2 resumes?",
      "revId": "fbd4e49827239276c13abe08848cc5abd2010685",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}