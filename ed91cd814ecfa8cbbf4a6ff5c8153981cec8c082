{
  "comments": [
    {
      "key": {
        "uuid": "9ae8e383_2db132f0",
        "filename": "third_party/WebKit/Source/bindings/core/v8/ScriptCustomElementDefinition.cpp",
        "patchSetId": 6
      },
      "lineNbr": 227,
      "author": {
        "id": 1125920
      },
      "writtenOn": "2017-08-24T00:47:37Z",
      "side": 1,
      "message": "Does this exception have any kind of stack trace? Will this information be enough to get lineNumber and columnNumber when we generate v8::Message from this exception?",
      "revId": "ed91cd814ecfa8cbbf4a6ff5c8153981cec8c082",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "17534a80_fe36c139",
        "filename": "third_party/WebKit/Source/bindings/core/v8/ScriptCustomElementDefinition.cpp",
        "patchSetId": 6
      },
      "lineNbr": 227,
      "author": {
        "id": 1115851
      },
      "writtenOn": "2017-08-24T22:15:26Z",
      "side": 1,
      "message": "See my comment on the bug: https://bugs.chromium.org/p/chromium/issues/detail?id\u003d639739#c21\n\nI believe in this case there is actually script on the stack (since we\u0027re inside a call to customElements.define()), and that\u0027s where this gets the stack information.",
      "parentUuid": "9ae8e383_2db132f0",
      "revId": "ed91cd814ecfa8cbbf4a6ff5c8153981cec8c082",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4dbeb277_a3d01518",
        "filename": "third_party/WebKit/Source/bindings/core/v8/ScriptCustomElementDefinition.cpp",
        "patchSetId": 6
      },
      "lineNbr": 227,
      "author": {
        "id": 1128431
      },
      "writtenOn": "2017-08-25T03:48:32Z",
      "side": 1,
      "message": "Ah, interesting, so we regressed already at some point. That was very unfortunate. I tried to look for related tests in LayoutTest and wpt, but some of them don\u0027t run any longer, run differently, etc., and somehow we failed to track those changes. I\u0027m no longer working on custom elements for over a year and that my info might be outdated, apologies.\n\nIf we have regressed but nobody claims about it, new behavior might be good.\n\nCould you mind to test one more thing? Custom elements have two creation modes; one when it\u0027s defined before parsing, and another after parsing.\n\nWhen parse-then-define, we don\u0027t know if it\u0027s a custom element at parse time, and that we add an HTMLElement to the DOM tree. Then when `customElements.define()` runs, the elements in DOM are \"upgraded\":\nhttps://html.spec.whatwg.org/multipage/custom-elements.html#concept-upgrade-an-element\n\nWhen define-then-parse, we know it\u0027s a custom elements while we parse, and that parser runs the constructor to create the element. In this case, you don\u0027t have any scripts on the stack.\n\ndocument.createElement() has the similar distinctions, but we do have scripts on stack in either case, so define-then-parse might be the only tricky case.\n\nI looked your test on crbug.com/639739#c21 doing \"upgrades\", which has a caller, but if you move \u003cscript\u003e block before \u003cx-crash\u003e, what do you see with this patch?",
      "parentUuid": "17534a80_fe36c139",
      "revId": "ed91cd814ecfa8cbbf4a6ff5c8153981cec8c082",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9bd9d2ba_5a58b4b1",
        "filename": "third_party/WebKit/Source/bindings/core/v8/ScriptCustomElementDefinition.cpp",
        "patchSetId": 6
      },
      "lineNbr": 227,
      "author": {
        "id": 1115851
      },
      "writtenOn": "2017-08-25T17:45:19Z",
      "side": 1,
      "message": "For the non-upgrade case, the new behavior seems _slightly_ worse: instead of pointing to position 0 in the script file (which the existing code does), the new code points at the HTML file where the element occurred.\n\nPersonally I don\u0027t think this is bad enough to mean this change isn\u0027t worthwhile: the existing thing would not be very useful in, say, an application with a large JS bundle, but I\u0027ll wait to hear what you think before landing.\n\nI also tested the createElement case, and indeed it looks fine to me: it points at the createElement call.",
      "parentUuid": "4dbeb277_a3d01518",
      "revId": "ed91cd814ecfa8cbbf4a6ff5c8153981cec8c082",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ed14b48d_85d9df6e",
        "filename": "third_party/WebKit/Source/bindings/core/v8/ScriptCustomElementDefinition.cpp",
        "patchSetId": 6
      },
      "lineNbr": 227,
      "author": {
        "id": 1125920
      },
      "writtenOn": "2017-08-28T17:59:28Z",
      "side": 1,
      "message": "I think ideally for non-upgrade case we need to point to customElements.define call and neither old nor new behavior solve this completely. So this change looks good to me.",
      "parentUuid": "9bd9d2ba_5a58b4b1",
      "revId": "ed91cd814ecfa8cbbf4a6ff5c8153981cec8c082",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d1fbb81b_9c97f719",
        "filename": "third_party/WebKit/Source/bindings/core/v8/ScriptCustomElementDefinition.cpp",
        "patchSetId": 6
      },
      "lineNbr": 227,
      "author": {
        "id": 1128431
      },
      "writtenOn": "2017-08-31T01:35:59Z",
      "side": 1,
      "message": "\u003e For the non-upgrade case, the new behavior seems _slightly_ worse: instead of pointing to position 0 in the script file (which the existing code does)\n\nThank you for testing. Sigh, so this has regressed somewhere and we failed to catch. Discussed with dominicc@, we should still try to fix this, but agree that the regression is not related with this change. Filed a separate issue crbug.com/760823",
      "parentUuid": "ed14b48d_85d9df6e",
      "revId": "ed91cd814ecfa8cbbf4a6ff5c8153981cec8c082",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ee4502d0_d7a23548",
        "filename": "third_party/WebKit/Source/bindings/core/v8/V8ScriptRunner.h",
        "patchSetId": 6
      },
      "lineNbr": 150,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2017-08-24T00:58:24Z",
      "side": 1,
      "message": "I\u0027d prefer moving this method to V8ThrowException.",
      "revId": "ed91cd814ecfa8cbbf4a6ff5c8153981cec8c082",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "89d3e389_01d7f029",
        "filename": "third_party/WebKit/Source/bindings/core/v8/V8ScriptRunner.h",
        "patchSetId": 6
      },
      "lineNbr": 150,
      "author": {
        "id": 1115851
      },
      "writtenOn": "2017-08-24T22:15:26Z",
      "side": 1,
      "message": "This code depends on V8Initializer.cpp, which is in bindings/core/v8, so I can\u0027t trivially move it to V8ThrowException, which is in platform/bindings. I\u0027ve added a TODO for now, but let me know if you\u0027d like me to do more movement in this CL.",
      "parentUuid": "ee4502d0_d7a23548",
      "revId": "ed91cd814ecfa8cbbf4a6ff5c8153981cec8c082",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}