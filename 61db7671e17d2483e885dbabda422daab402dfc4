{
  "comments": [
    {
      "key": {
        "uuid": "7fcb564b_50fe136b",
        "filename": "ui/gfx/win/rendering_window_manager.cc",
        "patchSetId": 16
      },
      "lineNbr": 38,
      "author": {
        "id": 1000111
      },
      "writtenOn": "2017-11-27T19:39:50Z",
      "side": 1,
      "message": "Can you explain a little why this is changing?\n\nRegisterChild() happens in response to a message on the GpuHost pipe, and DoSetParentOnChild() happens locally (maybe in response to a message on FrameSinkManagerClient pipe?). Why does this order change with viz?",
      "revId": "61db7671e17d2483e885dbabda422daab402dfc4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "931059b0_83452319",
        "filename": "ui/gfx/win/rendering_window_manager.cc",
        "patchSetId": 16
      },
      "lineNbr": 38,
      "author": {
        "id": 1146978
      },
      "writtenOn": "2017-11-27T19:53:49Z",
      "side": 1,
      "message": "For non-viz there is one ContextProvider/CommandBuffer per Compositor/Display. There is a blocking calls involved in setting that up, which means that SetChild() has been called before DoSetParentOnChild().\n\nIn viz, there is only one ContextProvider/CommandBuffer for all Compositors. The Display is created separate and isn\u0027t involved in this. There is no blocking call for subsequent Compositors and DoSetParentOnChild() can happen before SetChild().",
      "parentUuid": "7fcb564b_50fe136b",
      "revId": "61db7671e17d2483e885dbabda422daab402dfc4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a8f92476_f62e7bf6",
        "filename": "ui/gfx/win/rendering_window_manager.cc",
        "patchSetId": 16
      },
      "lineNbr": 38,
      "author": {
        "id": 1000608
      },
      "writtenOn": "2017-11-27T23:12:17Z",
      "side": 1,
      "message": "FYI calling SetParent on the I/O thread like this (particularly inside a lock) is a bit risky. It could cause a synchronous windows message to the parent window (on the UI thread), which could deadlock. In practice it\u0027s probably ok because WS_EX_NOPARENTNOTIFY was specified on the child window.",
      "parentUuid": "931059b0_83452319",
      "revId": "61db7671e17d2483e885dbabda422daab402dfc4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}