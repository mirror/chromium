{
  "comments": [
    {
      "key": {
        "uuid": "b5811c7d_43c26bd8",
        "filename": "content/public/common/simple_url_loader.cc",
        "patchSetId": 4
      },
      "lineNbr": 465,
      "author": {
        "id": 1115968
      },
      "writtenOn": "2018-01-24T23:14:03Z",
      "side": 1,
      "message": "This is pretty hideous, and seems fragile, though not all that complicated.\n\nI\u0027m not sure of a better way to do this - refcounting the BodyReader may be marginally prettier, but tremendously so.  ScopedDataPipeConsumerHandle isn\u0027t documented well enough for it to be clear if we can delete it in the middle of a read data, but I think it\u0027s most consumer-friendly to keep it alive for the duration of the call.  Also, if an API is trying to be general, seems like it should prefer to put complexity in itself, instead of making consumers deal with its idiosyncrasies.\n\nOpen to suggestions.",
      "range": {
        "startLine": 465,
        "startChar": 20,
        "endLine": 465,
        "endChar": 35
      },
      "revId": "883b270ba22e5d5ce1634b36a75b8633736592f2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "870230d8_8975e066",
        "filename": "content/public/common/simple_url_loader.cc",
        "patchSetId": 4
      },
      "lineNbr": 465,
      "author": {
        "id": 1001809
      },
      "writtenOn": "2018-01-31T17:39:15Z",
      "side": 1,
      "message": "I dunno--I don\u0027t feel like making \"The StringPiece may not be valid after SimpleURLLoader destruction\" part of the interface contract for OnDataReceived as being a very large burden on consumers.  Destroying an object that is responsible for calling you is something that seems reasonable to ask consumers to be aware of and sensitive to.  I wouldn\u0027t have any objection to adding that warning to the SimpleURLLoaderStreamHandler::OnDataReceived interface contract and skipping saving the body_data_pipe_ across this call.\n\nHaving said that, the increased fragility may be an illusion.  The fragility I noticed when I first read this was \"What happens if some other call into the BodyReader happens during the callback?\"  But I think the BodyReader is assuming at a reasonably basic architectural level that that won\u0027t happen, so getting an invalid reference if it does is probably better than just blindly executing code without realizing the reentrancy has occurred.  So I wouldn\u0027t object to leaving this here if you want to preserve the interface contract.\n\nIf there are specific vulnerabilities (at the use case level, or at the implementation level) I\u0027m missing, please call them out to me and I\u0027ll re-evaluate.",
      "parentUuid": "b5811c7d_43c26bd8",
      "range": {
        "startLine": 465,
        "startChar": 20,
        "endLine": 465,
        "endChar": 35
      },
      "revId": "883b270ba22e5d5ce1634b36a75b8633736592f2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3e275f51_0cba9311",
        "filename": "content/public/common/simple_url_loader.cc",
        "patchSetId": 4
      },
      "lineNbr": 465,
      "author": {
        "id": 1115968
      },
      "writtenOn": "2018-02-01T16:15:51Z",
      "side": 1,
      "message": "The consumer can only call the resume callback we pass it during a callback - that\u0027s guarded by a PostTask (SimpleURLLoader itself has no methods to call other than the destructor: it\u0027s just fire and forget), so I think we\u0027re safe on the re-entrancy front.\n\nMy main concern is just the complexity of the little data pipe / weak_this dance, along with the similar, if simpler, dance in DownloadAsStreamBodyHandler.",
      "parentUuid": "870230d8_8975e066",
      "range": {
        "startLine": 465,
        "startChar": 20,
        "endLine": 465,
        "endChar": 35
      },
      "revId": "883b270ba22e5d5ce1634b36a75b8633736592f2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "788f1b63_c2febdda",
        "filename": "content/public/common/simple_url_loader.cc",
        "patchSetId": 4
      },
      "lineNbr": 465,
      "author": {
        "id": 1001809
      },
      "writtenOn": "2018-02-02T21:12:14Z",
      "side": 1,
      "message": "Sorry, I\u0027m not finding myself with strong opinions.  (*Possibly* the newspapers should be called :-}.) . I think it\u0027s pretty clear what this code does, and it\u0027s all near each other (major plus), so I\u0027m not particularly concerned about the fragility.  And I also am not particularly attached to the interface guarantee, so I wouldn\u0027t object to getting rid of that guarantee and simplifying the implementation.  Completely up to you.",
      "parentUuid": "3e275f51_0cba9311",
      "range": {
        "startLine": 465,
        "startChar": 20,
        "endLine": 465,
        "endChar": 35
      },
      "revId": "883b270ba22e5d5ce1634b36a75b8633736592f2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "adfcb16b_76187fde",
        "filename": "content/public/common/simple_url_loader.cc",
        "patchSetId": 4
      },
      "lineNbr": 465,
      "author": {
        "id": 1115968
      },
      "writtenOn": "2018-02-02T22:07:44Z",
      "side": 1,
      "message": "Think I\u0027ll leave it as-is.  The \"can delete\" guarantee is the one I care about, but then we\u0027re going to have to do some magic to call EndReadData when we need to, regardless - only other option would be a bool to track this state, and end it in the destructor, which seems not really much better.",
      "parentUuid": "788f1b63_c2febdda",
      "range": {
        "startLine": 465,
        "startChar": 20,
        "endLine": 465,
        "endChar": 35
      },
      "revId": "883b270ba22e5d5ce1634b36a75b8633736592f2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a9438c36_2f6afcb6",
        "filename": "content/public/common/simple_url_loader.cc",
        "patchSetId": 4
      },
      "lineNbr": 1184,
      "author": {
        "id": 1115968
      },
      "writtenOn": "2018-01-24T23:14:03Z",
      "side": 1,
      "message": "Any consumer that wants to stream data, and not treat 4xx/5xx responses as failure, will likely want ResponseInfo before we start streaming data to it.  I think we\u0027re safe leaving this for another day, though.  The main thing is I don\u0027t want to encourage consumers to try and get data that may or may not be available yet - URLRequest has a ton of fields that are available at very unclear times, and I would like to avoid that here.\n\nI think the simplest thing to do would be to either add a way to set an OnHeadersReceived callback, or add a callback for it to SimpleURLLoaderStreamHandler.  I\u0027d tend to favor the former, just because I could see doing the latter, only to discover some consumers that don\u0027t download responses as streams really want it, and having two callbacks introduces some ordering issues that I think it\u0027s simplest not to worry about.",
      "range": {
        "startLine": 1184,
        "startChar": 25,
        "endLine": 1184,
        "endChar": 33
      },
      "revId": "883b270ba22e5d5ce1634b36a75b8633736592f2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "77163945_c1296224",
        "filename": "content/public/common/simple_url_loader.cc",
        "patchSetId": 4
      },
      "lineNbr": 1184,
      "author": {
        "id": 1001809
      },
      "writtenOn": "2018-01-31T17:39:15Z",
      "side": 1,
      "message": "Good point.  Though to me it feels funny to design an API, worry about its generality, then leave off a piece that we\u0027re pretty sure is going to be wanted.  So I\u0027d rather address this in this CL, but I\u0027ll defer to you if you don\u0027t want to.\n\nThinking about it, I agree that the best choice is to set an OnHeadersReceived callback, mostly because I don\u0027t want to have a different way to get the headers for the streaming case and for the regular case; that seems weird.  I\u0027d vote for then removing this method and making consumers use the OnHeadersReceived callback if they want that information, just in the name of minimal interfaces.\n\nAll up to you, though.",
      "parentUuid": "a9438c36_2f6afcb6",
      "range": {
        "startLine": 1184,
        "startChar": 25,
        "endLine": 1184,
        "endChar": 33
      },
      "revId": "883b270ba22e5d5ce1634b36a75b8633736592f2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9358ed64_d95346de",
        "filename": "content/public/common/simple_url_loader.cc",
        "patchSetId": 4
      },
      "lineNbr": 1184,
      "author": {
        "id": 1115968
      },
      "writtenOn": "2018-02-01T16:15:51Z",
      "side": 1,
      "message": "I\u0027m not sure why it seems funny to not land part of an API we\u0027ll need in another CL?  I didn\u0027t land upload support or save-to-file support to SimpleURLLoader in the same CL I created the class, despite knowing they\u0027d be needed.  My feeling is that smaller CLs make sure the code gets more attention during review, reduces merge failures, reduces number and latency of review round trips, and discourages more tests.  The downside is that design flays may only be discovered later, and corner cases between how the different CLs interact may be more likely to be missed (Though I think with the greater review coverage, that\u0027s debatable).\n\nWe can also choose to punt adding the API until we\u0027re sure that some consumers need it.\n\nI hadn\u0027t considered getting rid of this method in favor of a callback.  My problem with that is we\u0027d probably see a lot of classes with something like Foo::OnResponseInfoReceived(const ResponseInfo\u0026 info) { response_info_ \u003d info; }, which seems a bit silly.  It also makes SimpleURLLoader conversion a bit trickier if we don\u0027t want to update consumers just do something like that, or if consumers manage multiple SimpleURLLoaders.  Anyhow, we can worry about that whole can of chickens in another CL (Which is another reason smaller CLs are better - having one discussion on something like this rather than 5 at a time is much simpler).",
      "parentUuid": "77163945_c1296224",
      "range": {
        "startLine": 1184,
        "startChar": 25,
        "endLine": 1184,
        "endChar": 33
      },
      "revId": "883b270ba22e5d5ce1634b36a75b8633736592f2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2a5d2ed2_aa4bf886",
        "filename": "content/public/common/simple_url_loader.cc",
        "patchSetId": 4
      },
      "lineNbr": 1184,
      "author": {
        "id": 1001809
      },
      "writtenOn": "2018-02-02T21:12:14Z",
      "side": 1,
      "message": "\u003e I\u0027m not sure why it seems funny to not land part of an API we\u0027ll need in another CL? \n\nIt\u0027s what feels internally related/cohesive, which is at base an aesthetic judgement.  I certainly think there\u0027s value in not landing things until they\u0027re needed, but I also think there\u0027s value in landing code that\u0027s internally related all at once.  But I\u0027m happy to go with your preference for delay.\n\n\u003e I hadn\u0027t considered getting rid of this method in favor of a callback.  \n\nI very much agree that the API decision would be easier to make in the context of some set (possibly singular, though selection bias) of consumer uses.  That\u0027s the major place where I personally have tension with small CLs; when they include interface and implementation without usage it makes it noticeably harder to evaluate the interface.\n\nI don\u0027t think there\u0027s a disagreement that matters here, though--just sharing my thoughts in case there\u0027s anything useful in them for your decision.",
      "parentUuid": "9358ed64_d95346de",
      "range": {
        "startLine": 1184,
        "startChar": 25,
        "endLine": 1184,
        "endChar": 33
      },
      "revId": "883b270ba22e5d5ce1634b36a75b8633736592f2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}