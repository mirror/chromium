{
  "comments": [
    {
      "key": {
        "uuid": "824aeb5f_3ab966ff",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 11,
      "author": {
        "id": 1116027
      },
      "writtenOn": "2017-07-06T12:42:43Z",
      "side": 1,
      "message": "insntance â†’ instance",
      "range": {
        "startLine": 11,
        "startChar": 13,
        "endLine": 11,
        "endChar": 22
      },
      "revId": "e66e8c51f4359b64679686d096188bc7680f6069",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e968e8c2_b43c74b7",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 11,
      "author": {
        "id": 1113941
      },
      "writtenOn": "2017-07-06T14:49:05Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "824aeb5f_3ab966ff",
      "range": {
        "startLine": 11,
        "startChar": 13,
        "endLine": 11,
        "endChar": 22
      },
      "revId": "e66e8c51f4359b64679686d096188bc7680f6069",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d1072f59_31b09897",
        "filename": "ios/web/browser_state.mm",
        "patchSetId": 5
      },
      "lineNbr": 56,
      "author": {
        "id": 1113941
      },
      "writtenOn": "2017-07-06T11:27:25Z",
      "side": 1,
      "message": "Ken, is the reasoning for this being stashed in a Data object that it means we don\u0027t have to worry about defining a sentinel value for the user_id_ field?",
      "range": {
        "startLine": 56,
        "startChar": 6,
        "endLine": 56,
        "endChar": 25
      },
      "revId": "e66e8c51f4359b64679686d096188bc7680f6069",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "37ec6096_a0bb0d1c",
        "filename": "ios/web/browser_state.mm",
        "patchSetId": 5
      },
      "lineNbr": 76,
      "author": {
        "id": 1116027
      },
      "writtenOn": "2017-07-06T12:42:43Z",
      "side": 1,
      "message": "std::map::erase has an overload that takes a \"const key_type\u0026\" parameter and erase the value associated with this key, so those three lines change be changed to:\n\n  g_user_id_to_browser_state.Get().erase(holder-\u003euser_id());\n\nBTW, I think you should DCHECK that the stored value match browser_state:\n\n  DCHECK_EQ(browser_state, g_user_id_to_browser_state.Get()[holder-\u003euser_id()]);",
      "revId": "e66e8c51f4359b64679686d096188bc7680f6069",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a5727c7e_21fdd785",
        "filename": "ios/web/browser_state.mm",
        "patchSetId": 5
      },
      "lineNbr": 76,
      "author": {
        "id": 1113941
      },
      "writtenOn": "2017-07-06T14:49:05Z",
      "side": 1,
      "message": "Hmm, it\u0027s strange that there\u0027s an \"if\" at line 77. Ken, are there legitimate cases (at least in //content) where there would be ServiceUserIdHolder associated with this BrowserState but it wouldn\u0027t have an entry in g_user_id_to_browser_state?",
      "parentUuid": "37ec6096_a0bb0d1c",
      "revId": "e66e8c51f4359b64679686d096188bc7680f6069",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "82e7d724_db274ccb",
        "filename": "ios/web/browser_state.mm",
        "patchSetId": 5
      },
      "lineNbr": 85,
      "author": {
        "id": 1113941
      },
      "writtenOn": "2017-07-06T11:27:25Z",
      "side": 1,
      "message": "Ken, what\u0027s the reasoning beyond this being stashed in a Data object rather than BrowserContext just having a unique_ptr\u003cServiceManagerConnection\u003e?",
      "range": {
        "startLine": 85,
        "startChar": 6,
        "endLine": 85,
        "endChar": 48
      },
      "revId": "e66e8c51f4359b64679686d096188bc7680f6069",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7dea98b7_4ab9c2d9",
        "filename": "ios/web/browser_state.mm",
        "patchSetId": 5
      },
      "lineNbr": 243,
      "author": {
        "id": 1116027
      },
      "writtenOn": "2017-07-06T12:42:43Z",
      "side": 1,
      "message": "followup:\n\nThis is a virtual method and BrowserState::Initialize is called from BrowserState subclasses\u0027 constructor. It means that if any of those classes is subclassed, then the wrong version of the virtual method will be called.\n\nAs all BrowserState subclasses should not be instantiated directly but are constructed by helper objects (see [1]), we can make this safer by adding the call to BrowserState::Initialize after constructing the objects.\n\nThis will make the code slightly diverges from src/chrome/ but I prefer that pattern.\n\n[1]:\n  - TestChromeBrowser constructor is called from:\n    - TestChromeBrowserState::Builder::Build\n    - TestChromeBrowserState::GetOffTheRecordChromeBrowserState\n  - ChromeBrowserStateImpl constructor is called from:\n    - ChromeBrowserStateManagerImpl::GetBrowserState\n  - OffTheRecordChromeBrowserState constructor is called from:\n    - ChromeBrowserStateImpl::GetOffTheRecordChromeBrowserState",
      "range": {
        "startLine": 243,
        "startChar": 18,
        "endLine": 243,
        "endChar": 36
      },
      "revId": "e66e8c51f4359b64679686d096188bc7680f6069",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7ca7d486_0b36d1c0",
        "filename": "ios/web/browser_state.mm",
        "patchSetId": 5
      },
      "lineNbr": 243,
      "author": {
        "id": 1113941
      },
      "writtenOn": "2017-07-06T14:49:05Z",
      "side": 1,
      "message": "This makes sense to me, and I\u0027ll look at it in a followup. Unfortunately, it won\u0027t work for web::TestBrowserState, which is used as a naked variable all over the place.",
      "parentUuid": "7dea98b7_4ab9c2d9",
      "range": {
        "startLine": 243,
        "startChar": 18,
        "endLine": 243,
        "endChar": 36
      },
      "revId": "e66e8c51f4359b64679686d096188bc7680f6069",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}