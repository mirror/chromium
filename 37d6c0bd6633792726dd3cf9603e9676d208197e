{
  "comments": [
    {
      "key": {
        "uuid": "77c3f4f3_c32d8407",
        "filename": "ash/app_list/app_list_presenter_delegate.cc",
        "patchSetId": 2
      },
      "lineNbr": 93,
      "author": {
        "id": 1001118
      },
      "writtenOn": "2017-07-17T19:14:02Z",
      "side": 1,
      "message": "Yeah, you either need to know the ctor/dtor ordering for each observer relative to the MaximizeModeController (to avoid checks) or you need to check for a null controller on remove (and even possibly on add). This is just a trade-off between connecting individual components with less straightforward lifetimes, or using the \u0027always-valid\u0027 Shell owner object (but that shouldn\u0027t be a dumping ground).\n\nI\u0027m not sure there\u0027s a great solution here, but I have a couple ideas: (1) Add a static MaximizeModeObserver::RemoveObserver method that bails if the Shell\u0027s instance is null (presumably it\u0027s okay to no-op there, but a similar AddObserver helper would need to [D]CHECK for non-null). (2) A crazy idea: base::ScopedObserver (or similiar/subclass) could handle destruction of observed objects itself by implementing a new DestructionObserver interface and making observed classes call back when destroyed... (that\u0027s probably too crazy)",
      "revId": "37d6c0bd6633792726dd3cf9603e9676d208197e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3fee7979_89be2efe",
        "filename": "ash/app_list/app_list_presenter_delegate.cc",
        "patchSetId": 2
      },
      "lineNbr": 93,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2017-07-17T19:53:10Z",
      "side": 1,
      "message": "I prefer to try to get the lifetimes right and do the if() checks only where needed. The existence of one of these checks provides useful information to the reader of the class.\n\nAsh startup and shutdown code is generally pretty well exercised by tests -- things should blow up immediately. However, in general I\u0027m OK with being conservative about if() checks in destructors, since it\u0027s really hard to find shutdown crashes in the field.",
      "parentUuid": "77c3f4f3_c32d8407",
      "revId": "37d6c0bd6633792726dd3cf9603e9676d208197e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8bacb507_cdb5f5fb",
        "filename": "ash/app_list/app_list_presenter_delegate.cc",
        "patchSetId": 2
      },
      "lineNbr": 93,
      "author": {
        "id": 1160212
      },
      "writtenOn": "2017-07-17T21:23:45Z",
      "side": 1,
      "message": "Just to clarify, we should leave it as is?",
      "parentUuid": "3fee7979_89be2efe",
      "revId": "37d6c0bd6633792726dd3cf9603e9676d208197e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b562f9c9_c05117a0",
        "filename": "ash/app_list/app_list_presenter_delegate.cc",
        "patchSetId": 2
      },
      "lineNbr": 93,
      "author": {
        "id": 1001118
      },
      "writtenOn": "2017-07-17T21:33:17Z",
      "side": 1,
      "message": "Yeah, it\u0027s fine as-is, so long as the existing checks really are needed.",
      "parentUuid": "8bacb507_cdb5f5fb",
      "revId": "37d6c0bd6633792726dd3cf9603e9676d208197e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8024e375_5200f3b4",
        "filename": "ash/wm/maximize_mode/maximize_mode_controller.cc",
        "patchSetId": 2
      },
      "lineNbr": 181,
      "author": {
        "id": 1001118
      },
      "writtenOn": "2017-07-17T19:14:02Z",
      "side": 1,
      "message": "Please remove this TODO now, thanks!",
      "range": {
        "startLine": 181,
        "startChar": 31,
        "endLine": 181,
        "endChar": 39
      },
      "revId": "37d6c0bd6633792726dd3cf9603e9676d208197e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "347c3652_ad3a400e",
        "filename": "ash/wm/maximize_mode/maximize_mode_controller.cc",
        "patchSetId": 2
      },
      "lineNbr": 181,
      "author": {
        "id": 1160212
      },
      "writtenOn": "2017-07-17T21:23:45Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8024e375_5200f3b4",
      "range": {
        "startLine": 181,
        "startChar": 31,
        "endLine": 181,
        "endChar": 39
      },
      "revId": "37d6c0bd6633792726dd3cf9603e9676d208197e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "786456a7_ebc8824a",
        "filename": "ash/wm/maximize_mode/maximize_mode_controller.h",
        "patchSetId": 2
      },
      "lineNbr": 98,
      "author": {
        "id": 1001118
      },
      "writtenOn": "2017-07-17T19:14:02Z",
      "side": 1,
      "message": "nit: I might name these simply AddObserver and RemoveObserver",
      "range": {
        "startLine": 98,
        "startChar": 7,
        "endLine": 98,
        "endChar": 30
      },
      "revId": "37d6c0bd6633792726dd3cf9603e9676d208197e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "db659c2f_9c28d9d4",
        "filename": "ash/wm/maximize_mode/maximize_mode_controller.h",
        "patchSetId": 2
      },
      "lineNbr": 98,
      "author": {
        "id": 1160212
      },
      "writtenOn": "2017-07-17T21:23:45Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "786456a7_ebc8824a",
      "range": {
        "startLine": 98,
        "startChar": 7,
        "endLine": 98,
        "endChar": 30
      },
      "revId": "37d6c0bd6633792726dd3cf9603e9676d208197e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "08a26c40_0a7d38b1",
        "filename": "ash/wm/maximize_mode/maximize_mode_observer.h",
        "patchSetId": 2
      },
      "lineNbr": 5,
      "author": {
        "id": 1001118
      },
      "writtenOn": "2017-07-17T19:14:02Z",
      "side": 1,
      "message": "nit: fix the header guard\u0027s spelling of MAXIMIZE here and elsewhere",
      "range": {
        "startLine": 5,
        "startChar": 8,
        "endLine": 5,
        "endChar": 53
      },
      "revId": "37d6c0bd6633792726dd3cf9603e9676d208197e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d195e897_61b2d559",
        "filename": "ash/wm/maximize_mode/maximize_mode_observer.h",
        "patchSetId": 2
      },
      "lineNbr": 5,
      "author": {
        "id": 1160212
      },
      "writtenOn": "2017-07-17T21:23:45Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "08a26c40_0a7d38b1",
      "range": {
        "startLine": 5,
        "startChar": 8,
        "endLine": 5,
        "endChar": 53
      },
      "revId": "37d6c0bd6633792726dd3cf9603e9676d208197e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}