{
  "comments": [
    {
      "key": {
        "uuid": "42dd2432_96dfec7b",
        "filename": "content/browser/renderer_host/render_widget_host_unittest.cc",
        "patchSetId": 14
      },
      "lineNbr": 201,
      "author": {
        "id": 1158749
      },
      "writtenOn": "2018-01-19T20:29:30Z",
      "side": 1,
      "message": "use |renderer_compositor_frame_sink_|",
      "range": {
        "startLine": 201,
        "startChar": 15,
        "endLine": 201,
        "endChar": 53
      },
      "revId": "61d6384eeff864c67e3d872309707801a17356de",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "038dc67c_474c3d32",
        "filename": "content/browser/renderer_host/render_widget_host_unittest.cc",
        "patchSetId": 14
      },
      "lineNbr": 202,
      "author": {
        "id": 1158749
      },
      "writtenOn": "2018-01-19T20:29:30Z",
      "side": 1,
      "message": "I agree, I think mock_renderer_compositor_frame_sink is better :)",
      "range": {
        "startLine": 202,
        "startChar": 7,
        "endLine": 202,
        "endChar": 41
      },
      "revId": "61d6384eeff864c67e3d872309707801a17356de",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "40f57859_204ceedf",
        "filename": "content/browser/renderer_host/render_widget_host_unittest.cc",
        "patchSetId": 14
      },
      "lineNbr": 203,
      "author": {
        "id": 1158749
      },
      "writtenOn": "2018-01-19T20:29:30Z",
      "side": 1,
      "message": "the resource hold by this unique_ptr will be freed at the end of this function. I think the best way to do it is pass this mock in as a parameter so you have the full control of it. i.e., void SetMockRendererCompositorFrameSink(viz::MockCompositorFrameSinkClient) or SetMockRendererCompositorFrameSink(CompositorFrameSinkClientPtr)",
      "revId": "61d6384eeff864c67e3d872309707801a17356de",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ed648872_4f3dc6e2",
        "filename": "content/browser/renderer_host/render_widget_host_unittest.cc",
        "patchSetId": 14
      },
      "lineNbr": 1739,
      "author": {
        "id": 1158749
      },
      "writtenOn": "2018-01-19T20:29:30Z",
      "side": 1,
      "message": "use |renderer_compositor_frame_sink_|",
      "range": {
        "startLine": 1739,
        "startChar": 13,
        "endLine": 1739,
        "endChar": 53
      },
      "revId": "61d6384eeff864c67e3d872309707801a17356de",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "22a3581e_145594b1",
        "filename": "content/browser/renderer_host/render_widget_host_unittest.cc",
        "patchSetId": 14
      },
      "lineNbr": 1822,
      "author": {
        "id": 1158749
      },
      "writtenOn": "2018-01-19T20:29:30Z",
      "side": 1,
      "message": "use |renderer_compositor_frame_sink_|",
      "range": {
        "startLine": 1822,
        "startChar": 15,
        "endLine": 1822,
        "endChar": 55
      },
      "revId": "61d6384eeff864c67e3d872309707801a17356de",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9d6c6154_483108ff",
        "filename": "content/browser/renderer_host/render_widget_host_unittest.cc",
        "patchSetId": 14
      },
      "lineNbr": 2911,
      "author": {
        "id": 1158749
      },
      "writtenOn": "2018-01-19T20:29:30Z",
      "side": 1,
      "message": "use  |renderer_compositor_frame_sink_|",
      "range": {
        "startLine": 2911,
        "startChar": 13,
        "endLine": 2911,
        "endChar": 53
      },
      "revId": "61d6384eeff864c67e3d872309707801a17356de",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}