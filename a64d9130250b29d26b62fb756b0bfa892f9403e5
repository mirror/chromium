{
  "comments": [
    {
      "key": {
        "uuid": "5e801e5b_c1567f0c",
        "filename": "base/trace_event/memory_dump_manager.cc",
        "patchSetId": 1
      },
      "lineNbr": 195,
      "author": {
        "id": 1125359
      },
      "writtenOn": "2017-08-23T04:56:26Z",
      "side": 1,
      "message": "I should have fixed this. I think we should add:\nif (heap_profiler_serialization_state_)\n  return false;\n\nOtherwise enabling heap profiler when tracing would cause crash when serializing the dump in ExportHeapDump()",
      "revId": "a64d9130250b29d26b62fb756b0bfa892f9403e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ad9cc37d_23dacb6d",
        "filename": "base/trace_event/memory_dump_manager.cc",
        "patchSetId": 1
      },
      "lineNbr": 243,
      "author": {
        "id": 1125359
      },
      "writtenOn": "2017-08-23T04:56:26Z",
      "side": 1,
      "message": "shouldn\u0027t this return false?",
      "range": {
        "startLine": 242,
        "startChar": 7,
        "endLine": 243,
        "endChar": 26
      },
      "revId": "a64d9130250b29d26b62fb756b0bfa892f9403e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1c3fba2f_3ddc2b48",
        "filename": "base/trace_event/memory_dump_manager.cc",
        "patchSetId": 1
      },
      "lineNbr": 246,
      "author": {
        "id": 1125359
      },
      "writtenOn": "2017-08-23T04:56:26Z",
      "side": 1,
      "message": "I don\u0027t think this should be moved outside the if (heap_profiling_state_ \u003d\u003d HeapProfilingState::ENABLED).\nIf the state was Disabled, then we do not need to disable it permanently.\nIIRC, the reason for permanently disabling is that once it is enabled and disabled, enabling again causes us to miss frees that happened in allocator hooks and cannot remove the inserted allocator hooks for malloc and re-add them. We also reuse the allocation_register_. So, the accounting will go wrong.",
      "range": {
        "startLine": 246,
        "startChar": 48,
        "endLine": 246,
        "endChar": 68
      },
      "revId": "a64d9130250b29d26b62fb756b0bfa892f9403e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "376ec116_3fdbe4a9",
        "filename": "base/trace_event/memory_dump_manager.h",
        "patchSetId": 1
      },
      "lineNbr": 146,
      "author": {
        "id": 1125359
      },
      "writtenOn": "2017-08-23T04:56:26Z",
      "side": 1,
      "message": "This is my fault, add a comment here:\nThis is to be used by the memory instrumentation service. See MemoryInstrumentation::EnableHeapProfiling to enable profiling across all processes.",
      "range": {
        "startLine": 146,
        "startChar": 7,
        "endLine": 146,
        "endChar": 26
      },
      "revId": "a64d9130250b29d26b62fb756b0bfa892f9403e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e08c4700_95bff131",
        "filename": "base/trace_event/memory_dump_manager.h",
        "patchSetId": 1
      },
      "lineNbr": 151,
      "author": {
        "id": 1125359
      },
      "writtenOn": "2017-08-23T04:56:26Z",
      "side": 1,
      "message": "This is not really needed? The other function can be used by the clients, since EnableHeapProfiling takes the enum.",
      "range": {
        "startLine": 148,
        "startChar": 1,
        "endLine": 151,
        "endChar": 3
      },
      "revId": "a64d9130250b29d26b62fb756b0bfa892f9403e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f5b4e8f4_6eebd73e",
        "filename": "base/trace_event/memory_dump_manager.h",
        "patchSetId": 1
      },
      "lineNbr": 153,
      "author": {
        "id": 1125359
      },
      "writtenOn": "2017-08-23T04:56:26Z",
      "side": 1,
      "message": "I\u0027d name is GetHeapProfilingMode since it takes a lock. getters named with this style is expected to be fast and not do anything time consuming.",
      "range": {
        "startLine": 153,
        "startChar": 20,
        "endLine": 153,
        "endChar": 39
      },
      "revId": "a64d9130250b29d26b62fb756b0bfa892f9403e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e652798f_8bcb7ec9",
        "filename": "base/trace_event/memory_dump_manager.h",
        "patchSetId": 1
      },
      "lineNbr": 333,
      "author": {
        "id": 1125359
      },
      "writtenOn": "2017-08-23T04:56:26Z",
      "side": 1,
      "message": "Can we just get rid of this now?\nWe anyway store the mode and the state need not be very explicit here.\nDisabled mode can be used instead of disabled permanently. It doesn\u0027t increase readability much. If you prefer you can rename it. It might be good to change the order of the declaration of values in HeapProfilingMode enum.",
      "range": {
        "startLine": 333,
        "startChar": 2,
        "endLine": 333,
        "endChar": 20
      },
      "revId": "a64d9130250b29d26b62fb756b0bfa892f9403e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9e0a4548_27498bd5",
        "filename": "base/trace_event/memory_dump_manager.h",
        "patchSetId": 1
      },
      "lineNbr": 334,
      "author": {
        "id": 1125359
      },
      "writtenOn": "2017-08-23T04:56:26Z",
      "side": 1,
      "message": "Comment : The mode of the heap profiler when the heap_profiling_state_ is ENABLED. It is set to kHeapProfilingModeInvalid when heap_profiling_state_ is not ENABLED.",
      "revId": "a64d9130250b29d26b62fb756b0bfa892f9403e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "016a4f7d_178a0a96",
        "filename": "base/trace_event/memory_dump_manager.h",
        "patchSetId": 1
      },
      "lineNbr": 335,
      "author": {
        "id": 1125359
      },
      "writtenOn": "2017-08-23T04:56:26Z",
      "side": 1,
      "message": "can we do this initialization in constructor? just to be consistent with other. Not sure if there is a style rule about this.",
      "range": {
        "startLine": 335,
        "startChar": 43,
        "endLine": 335,
        "endChar": 68
      },
      "revId": "a64d9130250b29d26b62fb756b0bfa892f9403e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "57b8b2ca_5d03cb34",
        "filename": "services/resource_coordinator/memory_instrumentation/coordinator_impl.cc",
        "patchSetId": 1
      },
      "lineNbr": 196,
      "author": {
        "id": 1125359
      },
      "writtenOn": "2017-08-23T04:56:26Z",
      "side": 1,
      "message": "crbug.com/...",
      "range": {
        "startLine": 196,
        "startChar": 47,
        "endLine": 196,
        "endChar": 0
      },
      "revId": "a64d9130250b29d26b62fb756b0bfa892f9403e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cbc430b9_69fbfeff",
        "filename": "services/resource_coordinator/memory_instrumentation/coordinator_impl.cc",
        "patchSetId": 1
      },
      "lineNbr": 240,
      "author": {
        "id": 1125359
      },
      "writtenOn": "2017-08-23T04:56:26Z",
      "side": 1,
      "message": "Heap profiling in MDM can be enabled by some other code calling MDM::EnableHeapProfiling(). So, can you add a comment in MDM.h.\nIn any case it looks cleaner to have a state here that says heap_profling_enabled_.",
      "range": {
        "startLine": 240,
        "startChar": 6,
        "endLine": 240,
        "endChar": 38
      },
      "revId": "a64d9130250b29d26b62fb756b0bfa892f9403e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e5c0d20c_2016172a",
        "filename": "services/resource_coordinator/public/cpp/memory_instrumentation/client_process_impl.cc",
        "patchSetId": 1
      },
      "lineNbr": 187,
      "author": {
        "id": 1125359
      },
      "writtenOn": "2017-08-23T04:56:26Z",
      "side": 1,
      "message": "Can you add a bool here? It is easier to follow EnableHeapProfilingCallback takes a bool.",
      "range": {
        "startLine": 186,
        "startChar": 15,
        "endLine": 187,
        "endChar": 55
      },
      "revId": "a64d9130250b29d26b62fb756b0bfa892f9403e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2e79c57f_2a9d7234",
        "filename": "services/resource_coordinator/public/cpp/memory_instrumentation/memory_instrumentation.cc",
        "patchSetId": 1
      },
      "lineNbr": 65,
      "author": {
        "id": 1125359
      },
      "writtenOn": "2017-08-23T04:56:26Z",
      "side": 1,
      "message": "You dont need the base::Bind here. Shouldn\u0027t work with bind?",
      "range": {
        "startLine": 65,
        "startChar": 41,
        "endLine": 65,
        "endChar": 51
      },
      "revId": "a64d9130250b29d26b62fb756b0bfa892f9403e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e3e2ccfb_0110310f",
        "filename": "services/resource_coordinator/public/cpp/memory_instrumentation/memory_instrumentation.h",
        "patchSetId": 1
      },
      "lineNbr": 53,
      "author": {
        "id": 1125359
      },
      "writtenOn": "2017-08-23T04:56:26Z",
      "side": 1,
      "message": "bug for the todo here.\nWhy do we need to expose to devtools? Sorry I do not know what is the goal here.\nWhy not just pass command line to enable in benchmarks?",
      "range": {
        "startLine": 53,
        "startChar": 5,
        "endLine": 53,
        "endChar": 9
      },
      "revId": "a64d9130250b29d26b62fb756b0bfa892f9403e5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}