{
  "comments": [
    {
      "key": {
        "uuid": "bcc2ef23_9a395578",
        "filename": "third_party/WebKit/LayoutTests/TestExpectations",
        "patchSetId": 20
      },
      "lineNbr": 3262,
      "author": {
        "id": 1115924
      },
      "writtenOn": "2017-12-01T01:28:07Z",
      "side": 1,
      "message": "instantiation-error-*.html in the current patchset passes even just after this CL (might be failing flakily though), because I relaxed the test expectations.",
      "revId": "4d479f3c977787389166a4dfa50a2e95f76aa631",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "67746fdb_ff2d914a",
        "filename": "third_party/WebKit/LayoutTests/TestExpectations",
        "patchSetId": 20
      },
      "lineNbr": 3268,
      "author": {
        "id": 1115924
      },
      "writtenOn": "2017-12-01T01:28:07Z",
      "side": 1,
      "message": "These three tests (Lines 3268-3270) fails just after this CL, and will pass once neis@\u0027s v8-side CL is landed.",
      "revId": "4d479f3c977787389166a4dfa50a2e95f76aa631",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6d97676f_8a58491e",
        "filename": "third_party/WebKit/LayoutTests/external/wpt/html/semantics/scripting-1/the-script-element/module/instantiation-error-1.html",
        "patchSetId": 20
      },
      "lineNbr": 27,
      "author": {
        "id": 1115924
      },
      "writtenOn": "2017-12-01T01:28:07Z",
      "side": 1,
      "message": "neis@, should we also check that each exception object are distinct? i.e.\nassert_not_equals(log[1], log[3]) etc.\nProbably ditto for instantiation-error-{2,3,4}.html",
      "revId": "4d479f3c977787389166a4dfa50a2e95f76aa631",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f848792c_c9287e21",
        "filename": "third_party/WebKit/LayoutTests/external/wpt/html/semantics/scripting-1/the-script-element/module/instantiation-error-1.html",
        "patchSetId": 20
      },
      "lineNbr": 27,
      "author": {
        "id": 1119597
      },
      "writtenOn": "2017-12-04T10:32:26Z",
      "side": 1,
      "message": "Yes, we should. Do I understand correctly, that errors 1, 2 and 4 are still guaranteed to be the same by HTML? Equally for 3 and 5.",
      "parentUuid": "6d97676f_8a58491e",
      "revId": "4d479f3c977787389166a4dfa50a2e95f76aa631",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1e95b591_4960b7f3",
        "filename": "third_party/WebKit/LayoutTests/external/wpt/html/semantics/scripting-1/the-script-element/module/instantiation-error-1.html",
        "patchSetId": 20
      },
      "lineNbr": 27,
      "author": {
        "id": 1115924
      },
      "writtenOn": "2017-12-05T01:10:37Z",
      "side": 1,
      "message": "\u003e Do I understand correctly, that errors 1, 2 and 4 are still guaranteed to be the same by HTML?\n\nThe situation was more complicated than I thought.\n\n- According to the spec: Yes they will be the same in this case, however:\n  - It looks like somehow being the same accidentially, because Instantiate() is called three time and one error object returned by one Instantiate() invocation is reported to all three \u003cscript\u003es.\n  - Error object identity can be nondeterministic (e.g. affected by the network fetch order) in general, and I feel developers can\u0027t rely on error object identity.\n  So if we want to check the error object identity (1\u003d\u003d2\u003d\u003d4 and 3\u003d\u003d5), I think we\u0027ll have to make the spec more deterministic as for error object identity.\n- According to the Blink impl, No, they are all distinct.\n  This is because, in the spec, Step 8 of\n  https://html.spec.whatwg.org/#fetch-the-descendants-of-and-instantiate-a-module-script\n  is asynchronous, while in Blink it completes synchronously.\n\nInstantiation is executed once for each \u003cscript\u003e element, and thus the error object created for each \u003cscript\u003e element is distinct (if ECMAScript-side spec makes instantiation return distinct error objects for each invocation for the same module script).\n\nBut the error objects are put to the same place, i.e. the \u003cscript\u003e element\u0027s error-to-rethrow, and thus in some cases, some of error objects reported to the \u003cscript\u003e elements can be the same, because error-to-rethrow can overwritten before execution.",
      "parentUuid": "f848792c_c9287e21",
      "revId": "4d479f3c977787389166a4dfa50a2e95f76aa631",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "72eff9c6_5a5a8a9c",
        "filename": "third_party/WebKit/LayoutTests/external/wpt/html/semantics/scripting-1/the-script-element/module/instantiation-error-5.html",
        "patchSetId": 20
      },
      "lineNbr": 22,
      "author": {
        "id": 1115924
      },
      "writtenOn": "2017-12-01T01:28:07Z",
      "side": 1,
      "message": "In this case we can/should assert the errors are different object, because they are different instantiation errors caused by different module scripts IIUC.",
      "revId": "4d479f3c977787389166a4dfa50a2e95f76aa631",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c258b5eb_a0621df0",
        "filename": "third_party/WebKit/Source/bindings/core/v8/ScriptModuleTest.cpp",
        "patchSetId": 20
      },
      "lineNbr": 230,
      "author": {
        "id": 1115924
      },
      "writtenOn": "2017-12-01T01:28:07Z",
      "side": 1,
      "message": "I confirmed that this test passes if neis@\u0027s v8-side CL is applied.",
      "revId": "4d479f3c977787389166a4dfa50a2e95f76aa631",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "17e45c95_3421a2b6",
        "filename": "third_party/WebKit/Source/core/loader/modulescript/ModuleTreeLinker.cpp",
        "patchSetId": 20
      },
      "lineNbr": 131,
      "author": {
        "id": 1115924
      },
      "writtenOn": "2017-12-01T01:28:07Z",
      "side": 1,
      "message": "Previously, ModulePendingScriptTreeClient::NotifyModuleTreeLoadFinished() has an assertion to check that the returned module script is ready for evaluation, or has an error.\nAfter this CL (and the spec update), the concept of \"is ready for evaluation\" (instantiated successfully, evaluated successfully, or has evaluation error) cannot be checked from Blink/HTML-spec side.\nHow can, or should we keep the assertion?",
      "revId": "4d479f3c977787389166a4dfa50a2e95f76aa631",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9c0720e7_33fa5068",
        "filename": "third_party/WebKit/Source/core/loader/modulescript/ModuleTreeLinkerTest.cpp",
        "patchSetId": 20
      },
      "lineNbr": 97,
      "author": {
        "id": 1115924
      },
      "writtenOn": "2017-12-01T01:28:07Z",
      "side": 1,
      "message": "I changed this to a parse error (from instantiation error), because MTL is basically no longer affected by instantiation errors.",
      "revId": "4d479f3c977787389166a4dfa50a2e95f76aa631",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}