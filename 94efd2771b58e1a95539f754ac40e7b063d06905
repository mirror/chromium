{
  "comments": [
    {
      "key": {
        "uuid": "c2bf4afb_a0114370",
        "filename": "base/optional_unittest.cc",
        "patchSetId": 5
      },
      "lineNbr": 511,
      "author": {
        "id": 1115919
      },
      "writtenOn": "2018-02-01T14:55:43Z",
      "side": 1,
      "message": "It turned out that this causes compile failure with MSVC.\n\nhttps://logs.chromium.org/v/?s\u003dchromium%2Fbb%2Ftryserver.chromium.win%2Fwin-msvc-rel%2F43763%2F%2B%2Frecipes%2Fsteps%2Fcompile__with_patch_%2F0%2Fstdout\n\n../..\\base/optional.h(348): error C2039: \u0027value\u0027: is not a member of \u0027std::is_constructible\u003cbase::OptionalTest_ForwardConstructor_Test::TestBody::Test,const base::Optional\u003cint\u003e \u0026\u003e\u0027\n\nThe message looks confusing, but IIUC (and huge thanks to C++ experts sitting around me),\nit is caused by circular dependency; Optional\u003cTest\u003e needs to look at std::is_constructible via IsConvertibleFromOptional\u003c\u003e, which needs to check constructor overload resolution including Test(Optional\u003cTest\u003e), which requires Optional\u003cTest\u003e.\n\nIt is found that that is not specific to this impl nor MSVC.\nActually, we\u0027d hit the same issue with latest clang / gcc, e.g.\n\nhttps://godbolt.org/#g:!((g:!((g:!((h:codeEditor,i:(j:1,lang:c%2B%2B,source:%27%23include+%3Coptional%3E%0A%23include+%3Ctype_traits%3E%0A%0Astruct+Test+%7B%0A++Test(const+std::optional%3Cint%3E%26)+%7B%7D%0A++Test(const+std::optional%3CTest%3E%26)+%7B%7D%0A%7D%3B%0A%0Astatic_assert(%0A++++std::is_constructible%3CTest,+const+std::optional%3Cint%3E%26%3E::value,+%22test%22)%3B%27),l:%275%27,n:%270%27,o:%27C%2B%2B+source+%231%27,t:%270%27)),k:33.333333333333336,l:%274%27,n:%270%27,o:%27%27,s:0,t:%270%27),(g:!((h:compiler,i:(compiler:clang_trunk,filters:(b:%270%27,binary:%271%27,commentOnly:%270%27,demangle:%270%27,directives:%270%27,execute:%271%27,intel:%270%27,trim:%270%27),lang:c%2B%2B,libs:!(),options:%27-std%3Dc%2B%2B17%27,source:1),l:%275%27,n:%270%27,o:%27x86-64+clang+(trunk)+(Editor+%231,+Compiler+%231)+C%2B%2B%27,t:%270%27)),k:33.333333333333336,l:%274%27,n:%270%27,o:%27%27,s:0,t:%270%27),(g:!((h:output,i:(compiler:1,editor:1),l:%275%27,n:%270%27,o:%27%231+with+x86-64+clang+(trunk)%27,t:%270%27)),k:33.33333333333333,l:%274%27,n:%270%27,o:%27%27,s:0,t:%270%27)),l:%272%27,n:%270%27,o:%27%27,t:%270%27)),version:4\n\nActually, overload resolution requires to access it, class T with T(Optional\u003cT\u003e) constructor itself looks problematic. E.g.;\n\nhttps://godbolt.org/#g:!((g:!((g:!((h:codeEditor,i:(j:1,lang:c%2B%2B,source:\u0027%23include+%3Coptional%3E%0A%23include+%3Ctype_traits%3E%0A%0Astruct+Test+%7B%0A++Test(const+std::optional%3CTest%3E%26)+%7B%7D%0A%7D%3B%0A%0Avoid+f(const+std::optional%3Cint%3E%26+param)+%7B%0A++Test+t(param)%3B%0A%7D%0A\u0027),l:\u00275\u0027,n:\u00270\u0027,o:\u0027C%2B%2B+source+%231\u0027,t:\u00270\u0027)),k:33.333333333333336,l:\u00274\u0027,n:\u00270\u0027,o:\u0027\u0027,s:0,t:\u00270\u0027),(g:!((h:compiler,i:(compiler:clang_trunk,filters:(b:\u00270\u0027,binary:\u00271\u0027,commentOnly:\u00270\u0027,demangle:\u00270\u0027,directives:\u00270\u0027,execute:\u00271\u0027,intel:\u00270\u0027,trim:\u00270\u0027),lang:c%2B%2B,libs:!(),options:\u0027-std%3Dc%2B%2B17\u0027,source:1),l:\u00275\u0027,n:\u00270\u0027,o:\u0027x86-64+clang+(trunk)+(Editor+%231,+Compiler+%231)+C%2B%2B\u0027,t:\u00270\u0027)),k:33.333333333333336,l:\u00274\u0027,n:\u00270\u0027,o:\u0027\u0027,s:0,t:\u00270\u0027),(g:!((h:output,i:(compiler:1,editor:1),l:\u00275\u0027,n:\u00270\u0027,o:\u0027%231+with+x86-64+clang+(trunk)\u0027,t:\u00270\u0027)),k:33.33333333333333,l:\u00274\u0027,n:\u00270\u0027,o:\u0027\u0027,s:0,t:\u00270\u0027)),l:\u00272\u0027,n:\u00270\u0027,o:\u0027\u0027,t:\u00270\u0027)),version:4\n\nThus, I think it is reasonable to drop it from the test cases, considering;\n- that ctor definition looks rare.\n- Even if it is defined, latest standard library impl looks to have similar issues, so in terms of compatibility, that test cases look not very valuable.\n\nWDYT?\n\nNote that, _probably_, the reason why clang/gcc passed the test cases is;\nbecause of the above reason, IsConvertibleFromOptional\u003cT, T\u003e is an error, so Optional(const Optional\u003cU\u003e\u0026), Optional(Optional\u003cU\u003e\u0026\u0026) ctors where U \u003d T, and Optional(U\u0026\u0026) ctor seem to be removed from overload resolution thanks to SFINAE, while MSVC reports an error here, instead. (Though I don\u0027t have a good approach to make sure that reason...)",
      "revId": "94efd2771b58e1a95539f754ac40e7b063d06905",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}