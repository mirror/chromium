{
  "comments": [
    {
      "key": {
        "uuid": "d3e47a16_28b95cf3",
        "filename": "extensions/browser/extension_registrar.cc",
        "patchSetId": 20
      },
      "lineNbr": 54,
      "author": {
        "id": 1115745
      },
      "writtenOn": "2017-10-03T13:20:15Z",
      "side": 1,
      "message": "nit: maybe\n} else {  // Extension is enabled.\n\nfor clarity",
      "revId": "01a8fcac22950e4c9afe6f08c9dd06deb37c7f68",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cd43950d_460c2a2d",
        "filename": "extensions/browser/extension_registrar.cc",
        "patchSetId": 20
      },
      "lineNbr": 54,
      "author": {
        "id": 1003321
      },
      "writtenOn": "2017-10-05T20:09:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d3e47a16_28b95cf3",
      "revId": "01a8fcac22950e4c9afe6f08c9dd06deb37c7f68",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8a28cd08_fc198eb4",
        "filename": "extensions/browser/extension_registrar.cc",
        "patchSetId": 20
      },
      "lineNbr": 209,
      "author": {
        "id": 1115745
      },
      "writtenOn": "2017-10-03T13:20:15Z",
      "side": 1,
      "message": "/sigh... another existing bug for a TODO:\nConsider:\n- Reload is triggered\n- Extension is disabled for reason reload\n- Some other disable reason comes in (say, sync)\n- Disable reasons are added\n- Reload is finished\n- We re-enable it here and get rid of all those disable reasons\n\nInstead, we should only remove the reload disable reason here, and re-enable the extension iff there are no other reasons.",
      "revId": "01a8fcac22950e4c9afe6f08c9dd06deb37c7f68",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2b54e7cc_4670d676",
        "filename": "extensions/browser/extension_registrar.cc",
        "patchSetId": 20
      },
      "lineNbr": 209,
      "author": {
        "id": 1003321
      },
      "writtenOn": "2017-10-05T20:09:33Z",
      "side": 1,
      "message": "ExtensionRegistrar shouldn\u0027t care (yet) when Reload is triggered. ExtensionService decides whether to call ReplaceReloadedExtension.\n\nIn your scenario, I think UnloadExtension would be called in the 2nd step, so the extension would be removed from ExtensionService\u0027s reloading_extensions_. ExtensionService would then just add the \"reloaded\" extension as a disabled extension, instead of calling ReplaceReloadedExtension.",
      "parentUuid": "8a28cd08_fc198eb4",
      "revId": "01a8fcac22950e4c9afe6f08c9dd06deb37c7f68",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "93608e37_10454038",
        "filename": "extensions/browser/extension_registrar.cc",
        "patchSetId": 20
      },
      "lineNbr": 209,
      "author": {
        "id": 1115745
      },
      "writtenOn": "2017-10-05T22:24:15Z",
      "side": 1,
      "message": "ExtensionService::ReloadExtensionImpl does:\n\n    DisableExtension(extension_id, extensions::disable_reason::DISABLE_RELOAD);\n    DCHECK(registry_-\u003edisabled_extensions().Contains(extension_id));\n    reloading_extensions_.insert(extension_id);\n\nSo the extension is a) in the disabled set and b) in the reloading_extensions_ set (by design).\n\nSo, if after that, while it\u0027s reloading, we added a new disable reason, the extension would *not* be unloaded again, and we\u0027d remove that disable reason.  Right?",
      "parentUuid": "2b54e7cc_4670d676",
      "revId": "01a8fcac22950e4c9afe6f08c9dd06deb37c7f68",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e6136728_cbe4ce89",
        "filename": "extensions/browser/extension_registrar_unittest.cc",
        "patchSetId": 20
      },
      "lineNbr": 56,
      "author": {
        "id": 1115745
      },
      "writtenOn": "2017-10-03T13:20:15Z",
      "side": 1,
      "message": "Is it worth making this a StrictMock so that we can verify these calls?",
      "revId": "01a8fcac22950e4c9afe6f08c9dd06deb37c7f68",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a2467f04_9ac06325",
        "filename": "extensions/browser/extension_registrar_unittest.cc",
        "patchSetId": 20
      },
      "lineNbr": 56,
      "author": {
        "id": 1003321
      },
      "writtenOn": "2017-10-05T20:09:33Z",
      "side": 1,
      "message": "My feeling is the ExtensionService tests should cover that.\n\nUnrelatedly, I\u0027ll test that ExtensionRegistrar behaves correctly when CanEnable/DisableExtension return false. But that makes this a stub, not a mock.",
      "parentUuid": "e6136728_cbe4ce89",
      "revId": "01a8fcac22950e4c9afe6f08c9dd06deb37c7f68",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9660ed0b_f3cb88ce",
        "filename": "extensions/browser/extension_registrar_unittest.cc",
        "patchSetId": 20
      },
      "lineNbr": 56,
      "author": {
        "id": 1115745
      },
      "writtenOn": "2017-10-05T22:24:15Z",
      "side": 1,
      "message": "IMO, it\u0027s nice to have unittests be small, and relying on a delegate implementation\u0027s tests to test that the delegate is called by the delegator feels wrong.  If the test fails, you don\u0027t know if it\u0027s a bug in ExtensionRegistrar (e.g., not calling or calling improperly) or a bug in ExtensionService (incorrectly reacting to the notification).  Additionally, it has the unpleasant side-effect of needing to rely on ExtensionService tests to know if ExtensionRegistrar is behaving properly.  This gets messier down the road when we have an app shell variant of ExtensionRegistrar::Delegate(), because then we consider behavior in AppShell to be tested by ExtensionService tests. :(\n\nIf we test ExtensionRegistrar for the calling behavior and ExtensionService for the reacting behavior, then it should be clear where a new bug is, and we get better local coverage for testing.\n\nWDYT?",
      "parentUuid": "a2467f04_9ac06325",
      "revId": "01a8fcac22950e4c9afe6f08c9dd06deb37c7f68",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}