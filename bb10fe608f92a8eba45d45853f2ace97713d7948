{
  "comments": [
    {
      "key": {
        "uuid": "fa0a50a7_a12f0473",
        "filename": "third_party/WebKit/Source/bindings/core/v8/V8AbstractEventListener.cpp",
        "patchSetId": 4
      },
      "lineNbr": 177,
      "author": {
        "id": 1000098
      },
      "writtenOn": "2017-10-19T10:06:08Z",
      "side": 1,
      "message": "\"in accordance with the spec\" or \"according to the spec\"\n\nhttps://forum.wordreference.com/threads/accordance-with-or-accordance-to.1933170/",
      "revId": "bb10fe608f92a8eba45d45853f2ace97713d7948",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b60505c8_1d77ff39",
        "filename": "third_party/WebKit/Source/bindings/core/v8/V8AbstractEventListener.cpp",
        "patchSetId": 4
      },
      "lineNbr": 177,
      "author": {
        "id": 1247388
      },
      "writtenOn": "2017-10-19T10:45:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fa0a50a7_a12f0473",
      "revId": "bb10fe608f92a8eba45d45853f2ace97713d7948",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "42a3c31d_a8513bdf",
        "filename": "third_party/WebKit/Source/bindings/core/v8/V8AbstractEventListener.cpp",
        "patchSetId": 4
      },
      "lineNbr": 179,
      "author": {
        "id": 1000098
      },
      "writtenOn": "2017-10-19T10:06:08Z",
      "side": 1,
      "message": "Usually we use \"TODO(rakina): ... \" notation to mark this should be fixed in the future.\nThe id can be yours, as it is used to record who added this comment, rather than\nwho is assigned to this TODO.\nhttps://google.github.io/styleguide/cppguide.html#TODO_Comments",
      "revId": "bb10fe608f92a8eba45d45853f2ace97713d7948",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eec484fd_2290b04e",
        "filename": "third_party/WebKit/Source/bindings/core/v8/V8AbstractEventListener.cpp",
        "patchSetId": 4
      },
      "lineNbr": 179,
      "author": {
        "id": 1247388
      },
      "writtenOn": "2017-10-19T10:45:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "42a3c31d_a8513bdf",
      "revId": "bb10fe608f92a8eba45d45853f2ace97713d7948",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4db743c3_e060446b",
        "filename": "third_party/WebKit/Source/bindings/core/v8/V8AbstractEventListener.cpp",
        "patchSetId": 4
      },
      "lineNbr": 181,
      "author": {
        "id": 1000098
      },
      "writtenOn": "2017-10-19T10:06:08Z",
      "side": 1,
      "message": "Can a event be `BeforeUnloadEvent` but its type is not `beforeunload`?",
      "revId": "bb10fe608f92a8eba45d45853f2ace97713d7948",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "87538057_3e8177d2",
        "filename": "third_party/WebKit/Source/bindings/core/v8/V8AbstractEventListener.cpp",
        "patchSetId": 4
      },
      "lineNbr": 181,
      "author": {
        "id": 1002507
      },
      "writtenOn": "2017-10-19T10:25:12Z",
      "side": 1,
      "message": "Hmm, this seems a little different from what the spec is saying.  \"The event handler processing algorithm\" step 5 says \"if E is a BeforeUnloadEvent object and E\u0027s type is beforeunload\", so the condition should be:\n    event-\u003eIsBeforeUnloadEvent() \u0026\u0026 event-type() \u003d\u003d EventTypeNames::beforeunload\n\nIf the condition is true, we need to check if |return_value| is null or non-null.  If the above condition is false (not beforeunload), then we need to check if |return_value| is false or not (ignoring special error event handling case).",
      "revId": "bb10fe608f92a8eba45d45853f2ace97713d7948",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e7de9d36_6d197916",
        "filename": "third_party/WebKit/Source/bindings/core/v8/V8AbstractEventListener.cpp",
        "patchSetId": 4
      },
      "lineNbr": 181,
      "author": {
        "id": 1247388
      },
      "writtenOn": "2017-10-19T10:45:24Z",
      "side": 1,
      "message": "So, that part of the spec is implemented correctly right now (as far as my understanding, might be wrong)\nThe return value of the BeforeUnloadEvent is converted to string here. https://cs.chromium.org/chromium/src/third_party/WebKit/Source/bindings/core/v8/V8AbstractEventListener.cpp?q\u003dv8abstracteventlistener\u0026dr\u003dCSs\u0026l\u003d170\n\nThe non-null checking is done in https://cs.chromium.org/chromium/src/third_party/WebKit/Source/core/dom/Document.cpp?sq\u003dpackage:chromium\u0026l\u003d3354\n\nThe testcase that previously failed has this scenario: a CustomEvent with type beforeunload is fired, and the onbeforeunload function returns a boolean false. \nIn the spec, it should be going to the \"Otherwise\" section of step 5. See the note explaining why the event will not be canceled.\n\nThe test fails because the CustomEvent is not a BeforeUnloadEvent, so the return value is not converted to string because it doesn\u0027t fulfill the condition of the if clause in this file that I linked, meaning it stays as a boolean false. That means it will fullfill ShouldPreventDefault(return_value) and the event got canceled.\n\nBut it\u0027s also possible that we move all the step 5 check for BeforeUnloadEvent or events with type beforeunload here so it will be less confusing. I don\u0027t know if that\u0027s better though.",
      "parentUuid": "87538057_3e8177d2",
      "revId": "bb10fe608f92a8eba45d45853f2ace97713d7948",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "022a75a1_af6fb5c0",
        "filename": "third_party/WebKit/Source/bindings/core/v8/V8AbstractEventListener.cpp",
        "patchSetId": 4
      },
      "lineNbr": 181,
      "author": {
        "id": 1247388
      },
      "writtenOn": "2017-10-19T10:45:24Z",
      "side": 1,
      "message": "Not sure, but even if there is an event like that, the OnBeforeUnloadEventHandler doesn\u0027t apply to it (it only applies to events with the type \u0027beforeunload\u0027)",
      "parentUuid": "4db743c3_e060446b",
      "revId": "bb10fe608f92a8eba45d45853f2ace97713d7948",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "96cb03a1_e7b8b32b",
        "filename": "third_party/WebKit/Source/bindings/core/v8/V8AbstractEventListener.cpp",
        "patchSetId": 4
      },
      "lineNbr": 181,
      "author": {
        "id": 1002507
      },
      "writtenOn": "2017-10-19T12:59:58Z",
      "side": 1,
      "message": "It\u0027s definitely better to do refactoring here about the step 5.  Please refactor the code from line 170 to line 182 (the end of this function).\n\nAlso note that, IIUC, the statement in the spec \"If E is a BeforeUnloadEvent object and E\u0027s type is beforeunload\" does NOT mean:\n    case a) E is a BeforeUnloadEvent object,\n    case b) E\u0027s type is beforeunload\n    and if either of case a) or b), ...\nI understand the statement as\n    condition a) E is a BeforeUnloadEvent object,\n    condition b) E\u0027s type is beforeunload\n    and if both of the conditions a) and b) are satisfied, ...\n\nIf both cases are okay, then the statement must be \"If case a) OR case b), ...\" instead of \"If condition a) AND condition b), ...\"",
      "parentUuid": "e7de9d36_6d197916",
      "revId": "bb10fe608f92a8eba45d45853f2ace97713d7948",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2c2ef8f8_e8c5a4b9",
        "filename": "third_party/WebKit/Source/bindings/core/v8/V8AbstractEventListener.cpp",
        "patchSetId": 4
      },
      "lineNbr": 181,
      "author": {
        "id": 1247388
      },
      "writtenOn": "2017-10-19T13:34:58Z",
      "side": 1,
      "message": "OK, will do. Should I put the code for the whole step 5 (so, applying the code for all events) or should it be specifically just for Events with the type beforeunload and BeforeUnloadEvents?\n\nAlso, yeah, I understand the spec the same way as you (the second interpretation you mentioned).\n\nWhat I meant by the \"step 5 check for BeforeUnloadEvent or events with type beforeunload\" that I mentioned in the previous comment was the first case and the last (\"otherwise\") case of the step 5. The first case will take BeforeUnloadEvent that has the type beforeunload, the last case will take events that are of the type beforeunload but isn\u0027t a BeforeUnloadEvent :D. Sorry for the bad wording!",
      "parentUuid": "96cb03a1_e7b8b32b",
      "revId": "bb10fe608f92a8eba45d45853f2ace97713d7948",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3999ca79_0e476f69",
        "filename": "third_party/WebKit/Source/bindings/core/v8/V8AbstractEventListener.cpp",
        "patchSetId": 4
      },
      "lineNbr": 181,
      "author": {
        "id": 1002507
      },
      "writtenOn": "2017-10-19T15:09:51Z",
      "side": 1,
      "message": "\u003e OK, will do. Should I put the code for the whole step 5 (so, applying the code for all events) or should it be specifically just for Events with the type beforeunload and BeforeUnloadEvents?\n\nEither will do.  It\u0027s great to fix things around, but it\u0027s also okay to focus on beforeunload.",
      "parentUuid": "2c2ef8f8_e8c5a4b9",
      "revId": "bb10fe608f92a8eba45d45853f2ace97713d7948",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6a4a8f2f_f7dd8ff4",
        "filename": "third_party/WebKit/Source/bindings/core/v8/V8AbstractEventListener.cpp",
        "patchSetId": 4
      },
      "lineNbr": 181,
      "author": {
        "id": 1002507
      },
      "writtenOn": "2017-10-19T15:29:03Z",
      "side": 1,
      "message": "Let me clarify my point.\n\nIIUC, this CL doesn\u0027t handle a case that\n  E is a BeforeUnloadEvent object, and\n  E\u0027s type is beforeunload, and\n  the return value is not null\nIn this case, we need to do preventDefault (\u003d set E\u0027s cancel flag).  However, this CL seems not cancelling it.\n\nSo, I think that we need to do some refactoring around here just in order to fix beforeunload event.  I\u0027m fine to ignore \"special error event handling\" case.  It seems not implemented here.  I vaguely remember that we have \"special error event handling\" case\u0027s code somewhere else.",
      "parentUuid": "3999ca79_0e476f69",
      "revId": "bb10fe608f92a8eba45d45853f2ace97713d7948",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a5249604_d31bee69",
        "filename": "third_party/WebKit/Source/bindings/core/v8/V8AbstractEventListener.cpp",
        "patchSetId": 4
      },
      "lineNbr": 181,
      "author": {
        "id": 1247388
      },
      "writtenOn": "2017-10-20T07:12:40Z",
      "side": 1,
      "message": "I did the refactoring (and now all the test passes!). PTAL :D",
      "parentUuid": "6a4a8f2f_f7dd8ff4",
      "revId": "bb10fe608f92a8eba45d45853f2ace97713d7948",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}