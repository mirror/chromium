// Copyright 2017 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file was generated by:
//   tools/json_schema_compiler/compiler.py.
// NOTE: The format of types has changed. 'FooType' is now
//   'chrome.fileManagerPrivate.FooType'.
// Please run the closure compiler before committing changes.
// See https://chromium.googlesource.com/chromium/src/+/master/docs/closure_compilation.md

/** @fileoverview Externs generated from namespace: fileManagerPrivate */

/**
 * @const
 */
chrome.fileManagerPrivate = {};

/**
 * @enum {string}
 * @see https://developer.chrome.com/extensions/fileManagerPrivate#type-VolumeType
 */
chrome.fileManagerPrivate.VolumeType = {
  DRIVE: 'drive',
  DOWNLOADS: 'downloads',
  REMOVABLE: 'removable',
  ARCHIVE: 'archive',
  PROVIDED: 'provided',
  MTP: 'mtp',
  MEDIA_VIEW: 'media_view',
  TESTING: 'testing',
};

/**
 * @enum {string}
 * @see https://developer.chrome.com/extensions/fileManagerPrivate#type-DeviceType
 */
chrome.fileManagerPrivate.DeviceType = {
  USB: 'usb',
  SD: 'sd',
  OPTICAL: 'optical',
  MOBILE: 'mobile',
  UNKNOWN: 'unknown',
};

/**
 * @enum {string}
 * @see https://developer.chrome.com/extensions/fileManagerPrivate#type-MountCondition
 */
chrome.fileManagerPrivate.MountCondition = {
  UNKNOWN: 'unknown',
  UNSUPPORTED: 'unsupported',
};

/**
 * @enum {string}
 * @see https://developer.chrome.com/extensions/fileManagerPrivate#type-MountContext
 */
chrome.fileManagerPrivate.MountContext = {
  USER: 'user',
  AUTO: 'auto',
};

/**
 * @enum {string}
 * @see https://developer.chrome.com/extensions/fileManagerPrivate#type-MountCompletedEventType
 */
chrome.fileManagerPrivate.MountCompletedEventType = {
  MOUNT: 'mount',
  UNMOUNT: 'unmount',
};

/**
 * @enum {string}
 * @see https://developer.chrome.com/extensions/fileManagerPrivate#type-MountCompletedStatus
 */
chrome.fileManagerPrivate.MountCompletedStatus = {
  SUCCESS: 'success',
  ERROR_UNKNOWN: 'error_unknown',
  ERROR_INTERNAL: 'error_internal',
  ERROR_INVALID_ARGUMENT: 'error_invalid_argument',
  ERROR_INVALID_PATH: 'error_invalid_path',
  ERROR_PATH_ALREADY_MOUNTED: 'error_path_already_mounted',
  ERROR_PATH_NOT_MOUNTED: 'error_path_not_mounted',
  ERROR_DIRECTORY_CREATION_FAILED: 'error_directory_creation_failed',
  ERROR_INVALID_MOUNT_OPTIONS: 'error_invalid_mount_options',
  ERROR_INVALID_UNMOUNT_OPTIONS: 'error_invalid_unmount_options',
  ERROR_INSUFFICIENT_PERMISSIONS: 'error_insufficient_permissions',
  ERROR_MOUNT_PROGRAM_NOT_FOUND: 'error_mount_program_not_found',
  ERROR_MOUNT_PROGRAM_FAILED: 'error_mount_program_failed',
  ERROR_INVALID_DEVICE_PATH: 'error_invalid_device_path',
  ERROR_UNKNOWN_FILESYSTEM: 'error_unknown_filesystem',
  ERROR_UNSUPPORTED_FILESYSTEM: 'error_unsupported_filesystem',
  ERROR_INVALID_ARCHIVE: 'error_invalid_archive',
  ERROR_AUTHENTICATION: 'error_authentication',
  ERROR_PATH_UNMOUNTED: 'error_path_unmounted',
};

/**
 * @enum {string}
 * @see https://developer.chrome.com/extensions/fileManagerPrivate#type-TransferState
 */
chrome.fileManagerPrivate.TransferState = {
  IN_PROGRESS: 'in_progress',
  COMPLETED: 'completed',
  FAILED: 'failed',
};

/**
 * @enum {string}
 * @see https://developer.chrome.com/extensions/fileManagerPrivate#type-TransferType
 */
chrome.fileManagerPrivate.TransferType = {
  UPLOAD: 'upload',
  DOWNLOAD: 'download',
};

/**
 * @enum {string}
 * @see https://developer.chrome.com/extensions/fileManagerPrivate#type-CopyProgressStatusType
 */
chrome.fileManagerPrivate.CopyProgressStatusType = {
  BEGIN_COPY_ENTRY: 'begin_copy_entry',
  END_COPY_ENTRY: 'end_copy_entry',
  PROGRESS: 'progress',
  SUCCESS: 'success',
  ERROR: 'error',
};

/**
 * @enum {string}
 * @see https://developer.chrome.com/extensions/fileManagerPrivate#type-FileWatchEventType
 */
chrome.fileManagerPrivate.FileWatchEventType = {
  CHANGED: 'changed',
  ERROR: 'error',
};

/**
 * @enum {string}
 * @see https://developer.chrome.com/extensions/fileManagerPrivate#type-ChangeType
 */
chrome.fileManagerPrivate.ChangeType = {
  ADD_OR_UPDATE: 'add_or_update',
  DELETE: 'delete',
};

/**
 * @enum {string}
 * @see https://developer.chrome.com/extensions/fileManagerPrivate#type-SearchType
 */
chrome.fileManagerPrivate.SearchType = {
  EXCLUDE_DIRECTORIES: 'EXCLUDE_DIRECTORIES',
  SHARED_WITH_ME: 'SHARED_WITH_ME',
  OFFLINE: 'OFFLINE',
  ALL: 'ALL',
};

/**
 * @enum {string}
 * @see https://developer.chrome.com/extensions/fileManagerPrivate#type-ZoomOperationType
 */
chrome.fileManagerPrivate.ZoomOperationType = {
  IN: 'in',
  OUT: 'out',
  RESET: 'reset',
};

/**
 * @enum {string}
 * @see https://developer.chrome.com/extensions/fileManagerPrivate#type-InspectionType
 */
chrome.fileManagerPrivate.InspectionType = {
  NORMAL: 'normal',
  CONSOLE: 'console',
  ELEMENT: 'element',
  BACKGROUND: 'background',
};

/**
 * @enum {string}
 * @see https://developer.chrome.com/extensions/fileManagerPrivate#type-DeviceEventType
 */
chrome.fileManagerPrivate.DeviceEventType = {
  DISABLED: 'disabled',
  REMOVED: 'removed',
  HARD_UNPLUGGED: 'hard_unplugged',
  FORMAT_START: 'format_start',
  FORMAT_SUCCESS: 'format_success',
  FORMAT_FAIL: 'format_fail',
  RENAME_START: 'rename_start',
  RENAME_SUCCESS: 'rename_success',
  RENAME_FAIL: 'rename_fail',
};

/**
 * @enum {string}
 * @see https://developer.chrome.com/extensions/fileManagerPrivate#type-DriveSyncErrorType
 */
chrome.fileManagerPrivate.DriveSyncErrorType = {
  DELETE_WITHOUT_PERMISSION: 'delete_without_permission',
  SERVICE_UNAVAILABLE: 'service_unavailable',
  NO_SERVER_SPACE: 'no_server_space',
  MISC: 'misc',
};

/**
 * @enum {string}
 * @see https://developer.chrome.com/extensions/fileManagerPrivate#type-TaskResult
 */
chrome.fileManagerPrivate.TaskResult = {
  OPENED: 'opened',
  MESSAGE_SENT: 'message_sent',
  FAILED: 'failed',
  EMPTY: 'empty',
};

/**
 * @enum {string}
 * @see https://developer.chrome.com/extensions/fileManagerPrivate#type-DriveShareType
 */
chrome.fileManagerPrivate.DriveShareType = {
  CAN_EDIT: 'can_edit',
  CAN_COMMENT: 'can_comment',
  CAN_VIEW: 'can_view',
};

/**
 * @enum {string}
 * @see https://developer.chrome.com/extensions/fileManagerPrivate#type-EntryPropertyName
 */
chrome.fileManagerPrivate.EntryPropertyName = {
  SIZE: 'size',
  MODIFICATION_TIME: 'modificationTime',
  MODIFICATION_BY_ME_TIME: 'modificationByMeTime',
  THUMBNAIL_URL: 'thumbnailUrl',
  CROPPED_THUMBNAIL_URL: 'croppedThumbnailUrl',
  IMAGE_WIDTH: 'imageWidth',
  IMAGE_HEIGHT: 'imageHeight',
  IMAGE_ROTATION: 'imageRotation',
  PINNED: 'pinned',
  PRESENT: 'present',
  HOSTED: 'hosted',
  AVAILABLE_OFFLINE: 'availableOffline',
  AVAILABLE_WHEN_METERED: 'availableWhenMetered',
  DIRTY: 'dirty',
  CUSTOM_ICON_URL: 'customIconUrl',
  CONTENT_MIME_TYPE: 'contentMimeType',
  SHARED_WITH_ME: 'sharedWithMe',
  SHARED: 'shared',
  STARRED: 'starred',
  EXTERNAL_FILE_URL: 'externalFileUrl',
};

/**
 * @enum {string}
 * @see https://developer.chrome.com/extensions/fileManagerPrivate#type-EntryTagVisibility
 */
chrome.fileManagerPrivate.EntryTagVisibility = {
  PRIVATE: 'private',
  PUBLIC: 'public',
};

/**
 * @enum {string}
 * @see https://developer.chrome.com/extensions/fileManagerPrivate#type-Source
 */
chrome.fileManagerPrivate.Source = {
  FILE: 'file',
  DEVICE: 'device',
  NETWORK: 'network',
  SYSTEM: 'system',
};

/**
 * @enum {string}
 * @see https://developer.chrome.com/extensions/fileManagerPrivate#type-Verb
 */
chrome.fileManagerPrivate.Verb = {
  OPEN_WITH: 'open_with',
  ADD_TO: 'add_to',
  PACK_WITH: 'pack_with',
  SHARE_WITH: 'share_with',
};

/**
 * @enum {string}
 * @see https://developer.chrome.com/extensions/fileManagerPrivate#type-SourceRestriction
 */
chrome.fileManagerPrivate.SourceRestriction = {
  ANY_SOURCE: 'any_source',
  NATIVE_SOURCE: 'native_source',
  NATIVE_OR_DRIVE_SOURCE: 'native_or_drive_source',
};

/**
 * @typedef {{
 *   taskId: string,
 *   title: string,
 *   verb: (!chrome.fileManagerPrivate.Verb|undefined),
 *   iconUrl: string,
 *   isDefault: boolean,
 *   isGenericFileHandler: boolean
 * }}
 * @see https://developer.chrome.com/extensions/fileManagerPrivate#type-FileTask
 */
chrome.fileManagerPrivate.FileTask;

/**
 * @typedef {{
 *   size: (number|undefined),
 *   modificationTime: (number|undefined),
 *   modificationByMeTime: (number|undefined),
 *   thumbnailUrl: (string|undefined),
 *   croppedThumbnailUrl: (string|undefined),
 *   imageWidth: (number|undefined),
 *   imageHeight: (number|undefined),
 *   imageRotation: (number|undefined),
 *   pinned: (boolean|undefined),
 *   present: (boolean|undefined),
 *   hosted: (boolean|undefined),
 *   availableOffline: (boolean|undefined),
 *   availableWhenMetered: (boolean|undefined),
 *   dirty: (boolean|undefined),
 *   customIconUrl: (string|undefined),
 *   contentMimeType: (string|undefined),
 *   sharedWithMe: (boolean|undefined),
 *   shared: (boolean|undefined),
 *   starred: (boolean|undefined),
 *   externalFileUrl: (string|undefined)
 * }}
 * @see https://developer.chrome.com/extensions/fileManagerPrivate#type-EntryProperties
 */
chrome.fileManagerPrivate.EntryProperties;

/**
 * @typedef {{
 *   totalSize: number,
 *   remainingSize: number
 * }}
 * @see https://developer.chrome.com/extensions/fileManagerPrivate#type-MountPointSizeStats
 */
chrome.fileManagerPrivate.MountPointSizeStats;

/**
 * @typedef {{
 *   profileId: string,
 *   displayName: string,
 *   isCurrentProfile: boolean
 * }}
 * @see https://developer.chrome.com/extensions/fileManagerPrivate#type-ProfileInfo
 */
chrome.fileManagerPrivate.ProfileInfo;

/**
 * @typedef {{
 *   volumeId: string,
 *   fileSystemId: (string|undefined),
 *   extensionId: (string|undefined),
 *   source: !chrome.fileManagerPrivate.Source,
 *   volumeLabel: (string|undefined),
 *   profile: !chrome.fileManagerPrivate.ProfileInfo,
 *   sourcePath: (string|undefined),
 *   volumeType: !chrome.fileManagerPrivate.VolumeType,
 *   deviceType: (!chrome.fileManagerPrivate.DeviceType|undefined),
 *   devicePath: (string|undefined),
 *   isParentDevice: (boolean|undefined),
 *   isReadOnly: boolean,
 *   isReadOnlyRemovableDevice: boolean,
 *   hasMedia: boolean,
 *   configurable: boolean,
 *   watchable: boolean,
 *   mountCondition: (!chrome.fileManagerPrivate.MountCondition|undefined),
 *   mountContext: (!chrome.fileManagerPrivate.MountContext|undefined),
 *   diskFileSystemType: (string|undefined)
 * }}
 * @see https://developer.chrome.com/extensions/fileManagerPrivate#type-VolumeMetadata
 */
chrome.fileManagerPrivate.VolumeMetadata;

/**
 * @typedef {{
 *   eventType: !chrome.fileManagerPrivate.MountCompletedEventType,
 *   status: !chrome.fileManagerPrivate.MountCompletedStatus,
 *   volumeMetadata: !chrome.fileManagerPrivate.VolumeMetadata,
 *   shouldNotify: boolean
 * }}
 * @see https://developer.chrome.com/extensions/fileManagerPrivate#type-MountCompletedEvent
 */
chrome.fileManagerPrivate.MountCompletedEvent;

/**
 * @typedef {{
 *   fileUrl: string,
 *   transferState: !chrome.fileManagerPrivate.TransferState,
 *   transferType: !chrome.fileManagerPrivate.TransferType,
 *   processed: number,
 *   total: number,
 *   num_total_jobs: number
 * }}
 * @see https://developer.chrome.com/extensions/fileManagerPrivate#type-FileTransferStatus
 */
chrome.fileManagerPrivate.FileTransferStatus;

/**
 * @typedef {{
 *   type: !chrome.fileManagerPrivate.DriveSyncErrorType,
 *   fileUrl: string
 * }}
 * @see https://developer.chrome.com/extensions/fileManagerPrivate#type-DriveSyncErrorEvent
 */
chrome.fileManagerPrivate.DriveSyncErrorEvent;

/**
 * @typedef {{
 *   type: !chrome.fileManagerPrivate.CopyProgressStatusType,
 *   sourceUrl: (string|undefined),
 *   destinationUrl: (string|undefined),
 *   size: (number|undefined),
 *   error: (string|undefined)
 * }}
 * @see https://developer.chrome.com/extensions/fileManagerPrivate#type-CopyProgressStatus
 */
chrome.fileManagerPrivate.CopyProgressStatus;

/**
 * @typedef {{
 *   url: string,
 *   changes: !Array<!chrome.fileManagerPrivate.ChangeType>
 * }}
 * @see https://developer.chrome.com/extensions/fileManagerPrivate#type-FileChange
 */
chrome.fileManagerPrivate.FileChange;

/**
 * @typedef {{
 *   eventType: !chrome.fileManagerPrivate.FileWatchEventType,
 *   entry: Object,
 *   changedFiles: (!Array<!chrome.fileManagerPrivate.FileChange>|undefined)
 * }}
 * @see https://developer.chrome.com/extensions/fileManagerPrivate#type-FileWatchEvent
 */
chrome.fileManagerPrivate.FileWatchEvent;

/**
 * @typedef {{
 *   driveEnabled: boolean,
 *   cellularDisabled: boolean,
 *   hostedFilesDisabled: boolean,
 *   searchSuggestEnabled: boolean,
 *   use24hourClock: boolean,
 *   allowRedeemOffers: boolean,
 *   timezone: string
 * }}
 * @see https://developer.chrome.com/extensions/fileManagerPrivate#type-Preferences
 */
chrome.fileManagerPrivate.Preferences;

/**
 * @typedef {{
 *   cellularDisabled: (boolean|undefined),
 *   hostedFilesDisabled: (boolean|undefined)
 * }}
 * @see https://developer.chrome.com/extensions/fileManagerPrivate#type-PreferencesChange
 */
chrome.fileManagerPrivate.PreferencesChange;

/**
 * @typedef {{
 *   query: string,
 *   nextFeed: string
 * }}
 * @see https://developer.chrome.com/extensions/fileManagerPrivate#type-SearchParams
 */
chrome.fileManagerPrivate.SearchParams;

/**
 * @typedef {{
 *   query: string,
 *   types: !chrome.fileManagerPrivate.SearchType,
 *   maxResults: number
 * }}
 * @see https://developer.chrome.com/extensions/fileManagerPrivate#type-SearchMetadataParams
 */
chrome.fileManagerPrivate.SearchMetadataParams;

/**
 * @typedef {{
 *   entry: Object,
 *   highlightedBaseName: string
 * }}
 * @see https://developer.chrome.com/extensions/fileManagerPrivate#type-SearchResult
 */
chrome.fileManagerPrivate.SearchResult;

/**
 * @typedef {{
 *   type: string,
 *   reason: (string|undefined),
 *   hasCellularNetworkAccess: boolean
 * }}
 * @see https://developer.chrome.com/extensions/fileManagerPrivate#type-DriveConnectionState
 */
chrome.fileManagerPrivate.DriveConnectionState;

/**
 * @typedef {{
 *   type: !chrome.fileManagerPrivate.DeviceEventType,
 *   devicePath: string
 * }}
 * @see https://developer.chrome.com/extensions/fileManagerPrivate#type-DeviceEvent
 */
chrome.fileManagerPrivate.DeviceEvent;

/**
 * @typedef {{
 *   providerId: string,
 *   extensionId: (string|undefined),
 *   name: string,
 *   configurable: boolean,
 *   watchable: boolean,
 *   multipleMounts: boolean,
 *   source: string
 * }}
 */
var Provider;

/**
 * @typedef {{
 *   id: string,
 *   title: (string|undefined)
 *   source: !chrome.fileManagerPrivate.manifestTypes.FileSystemProviderSource
 * }}
 * @see https://developer.chrome.com/extensions/fileManagerPrivate#type-ProvidingExtension
 */
chrome.fileManagerPrivate.ProvidingExtension;

/**
 * Logout the current user for navigating to the re-authentication screen for
 * the Google account.
 * @see https://developer.chrome.com/extensions/fileManagerPrivate#method-logoutUserForReauthentication
 */
chrome.fileManagerPrivate.logoutUserForReauthentication = function() {};

/**
 * Cancels file selection.
 * @see https://developer.chrome.com/extensions/fileManagerPrivate#method-cancelDialog
 */
chrome.fileManagerPrivate.cancelDialog = function() {};

/**
 * Executes file browser task over selected files. |taskId| The unique
 * identifier of task to execute. |entries| Array of entries |callback|
 * @param {string} taskId
 * @param {!Array<Object>} entries
 * @param {function(!chrome.fileManagerPrivate.TaskResult):void} callback
 *     |result| Result of the task execution.
 * @see https://developer.chrome.com/extensions/fileManagerPrivate#method-executeTask
 */
chrome.fileManagerPrivate.executeTask = function(taskId, entries, callback) {};

/**
 * Sets the default task for the supplied MIME types and path extensions. Lists
 * of MIME types and URLs may contain duplicates. Additionally, the list of MIME
 * types can be empty. |taskId| The unique identifier of task to mark as
 * default. |entries| Array of selected entries to extract path extensions from.
 * |mimeTypes| Array of selected file MIME types. |callback|
 * @param {string} taskId
 * @param {!Array<Object>} entries
 * @param {!Array<string>} mimeTypes
 * @param {function():void} callback Callback that does not take arguments.
 * @see https://developer.chrome.com/extensions/fileManagerPrivate#method-setDefaultTask
 */
chrome.fileManagerPrivate.setDefaultTask = function(taskId, entries, mimeTypes, callback) {};

/**
 * Gets the list of tasks that can be performed over selected files. |entries|
 * Array of selected entries |callback|
 * @param {!Array<Object>} entries
 * @param {function(!Array<!chrome.fileManagerPrivate.FileTask>):void} callback
 *     |tasks| The list of matched file entries for this task.
 * @see https://developer.chrome.com/extensions/fileManagerPrivate#method-getFileTasks
 */
chrome.fileManagerPrivate.getFileTasks = function(entries, callback) {};

/**
 * Gets the MIME type of a file. |entry| Entry to be checked. |callback|
 * @param {Object} entry
 * @param {function(string):void} callback |result| Mime type of the file.
 * @see https://developer.chrome.com/extensions/fileManagerPrivate#method-getMimeType
 */
chrome.fileManagerPrivate.getMimeType = function(entry, callback) {};

/**
 * Gets localized strings and initialization data. |callback|
 * @param {function(Object):void} callback |result| Hash containing the string
 *     assets.
 * @see https://developer.chrome.com/extensions/fileManagerPrivate#method-getStrings
 */
chrome.fileManagerPrivate.getStrings = function(callback) {};

/**
 * Adds file watch. |entry| Entry to watch |callback|
 * @param {Object} entry
 * @param {function((boolean|undefined)):void} callback |success| True when file
 *     watch is successfully added.
 * @see https://developer.chrome.com/extensions/fileManagerPrivate#method-addFileWatch
 */
chrome.fileManagerPrivate.addFileWatch = function(entry, callback) {};

/**
 * Removes file watch. |entry| Watched entry |callback|
 * @param {Object} entry
 * @param {function((boolean|undefined)):void} callback |success| True when file
 *     watch is successfully removed.
 * @see https://developer.chrome.com/extensions/fileManagerPrivate#method-removeFileWatch
 */
chrome.fileManagerPrivate.removeFileWatch = function(entry, callback) {};

/**
 * Enables the extenal file scheme necessary to initiate drags to the browser
 * window for files on the external backend.
 * @see https://developer.chrome.com/extensions/fileManagerPrivate#method-enableExternalFileScheme
 */
chrome.fileManagerPrivate.enableExternalFileScheme = function() {};

/**
 * Requests granting R/W permissions for the passed entries. It's a best effort
 * operation. Some files may not be granted access if the url is invalid or not
 * backed by the external file system. |entryUrls| Urls for the entries to be
 * accessed. |callback|
 * @param {!Array<string>} entryUrls
 * @param {function():void} callback Callback that does not take arguments.
 * @see https://developer.chrome.com/extensions/fileManagerPrivate#method-grantAccess
 */
chrome.fileManagerPrivate.grantAccess = function(entryUrls, callback) {};

/**
 * Selects multiple files. |selectedPaths| Array of selected paths
 * |shouldReturnLocalPath| true if paths need to be resolved to local paths.
 * |callback|
 * @param {!Array<string>} selectedPaths
 * @param {boolean} shouldReturnLocalPath
 * @param {function():void} callback Callback that does not take arguments.
 * @see https://developer.chrome.com/extensions/fileManagerPrivate#method-selectFiles
 */
chrome.fileManagerPrivate.selectFiles = function(selectedPaths, shouldReturnLocalPath, callback) {};

/**
 * Selects a file. |selectedPath| A selected path |index| Index of Filter
 * |forOpening| true if paths are selected for opening. false if for saving.
 * |shouldReturnLocalPath| true if paths need to be resolved to local paths.
 * |callback|
 * @param {string} selectedPath
 * @param {number} index
 * @param {boolean} forOpening
 * @param {boolean} shouldReturnLocalPath
 * @param {function():void} callback Callback that does not take arguments.
 * @see https://developer.chrome.com/extensions/fileManagerPrivate#method-selectFile
 */
chrome.fileManagerPrivate.selectFile = function(selectedPath, index, forOpening, shouldReturnLocalPath, callback) {};

/**
 * Requests additional properties for files. |entries| list of entries |names|
 * list of requested properties by their names. |callback| Completion callback.
 * May return less than requested properties     if some are not available. In
 * the same time, it can return properties     which were not requested (if it's
 * cheap to compute them).
 * @param {!Array<Object>} entries
 * @param {!Array<!chrome.fileManagerPrivate.EntryPropertyName>} names
 * @param {function(!Array<!chrome.fileManagerPrivate.EntryProperties>):void}
 *     callback |entryProperties| A dictionary containing properties of the
 *     requested entries.
 * @see https://developer.chrome.com/extensions/fileManagerPrivate#method-getEntryProperties
 */
chrome.fileManagerPrivate.getEntryProperties = function(entries, names, callback) {};

/**
 * Pins/unpins a Drive file in the cache. |entry| Entry to pin/unpin. |pin| Pass
 * true to pin the file. |callback| Completion callback.
 * $(ref:runtime.lastError) will be set if     there was an error.
 * @param {Object} entry
 * @param {boolean} pin
 * @param {function():void} callback Callback that does not take arguments.
 * @see https://developer.chrome.com/extensions/fileManagerPrivate#method-pinDriveFile
 */
chrome.fileManagerPrivate.pinDriveFile = function(entry, pin, callback) {};

/**
 * Resolves entries in the isolated file system and returns corresponding
 * entries in the external file system mounted to Chrome OS file manager
 * backend. If resolving entry fails, the entry will be just ignored and the
 * corresponding entry does not appear in the result.
 * @param {!Array<Object>} entries
 * @param {function(!Array<Object>):void} callback |entries| External entries.
 * @see https://developer.chrome.com/extensions/fileManagerPrivate#method-resolveIsolatedEntries
 */
chrome.fileManagerPrivate.resolveIsolatedEntries = function(entries, callback) {};

/**
 * Creates and returns isolated file system entries from the given entries in
 * the external file system mounted to Chrome OS file manager backend. If
 * resolving entry fails, the entry will be just ignored and the corresponding
 * entry does not appear in the result.
 * @param {!Array<Object>} entries
 * @param {function(!Array<Object>):void} callback |entries| External entries.
 * @see https://developer.chrome.com/extensions/fileManagerPrivate#method-createIsolatedEntries
 */
chrome.fileManagerPrivate.createIsolatedEntries = function(entries, callback) {};

/**
 * Mount a resource or a file. |source| Mount point source. For compressed files
 * it is relative file path     within external file system |callback|
 * @param {string} source
 * @param {function(string):void} callback |sourcePath| Source path of the
 *     mount.
 * @see https://developer.chrome.com/extensions/fileManagerPrivate#method-addMount
 */
chrome.fileManagerPrivate.addMount = function(source, callback) {};

/**
 * Unmounts a mounted resource. |volumeId| An ID of the volume.
 * @param {string} volumeId
 * @see https://developer.chrome.com/extensions/fileManagerPrivate#method-removeMount
 */
chrome.fileManagerPrivate.removeMount = function(volumeId) {};

/**
 * Get the list of mounted volumes. |callback|
 * @param {function(!Array<!chrome.fileManagerPrivate.VolumeMetadata>):void}
 *     callback |volumeMetadataList| The list of VolumeMetadata representing
 *     mounted volumes.
 * @see https://developer.chrome.com/extensions/fileManagerPrivate#method-getVolumeMetadataList
 */
chrome.fileManagerPrivate.getVolumeMetadataList = function(callback) {};

/**
 * Cancels ongoing file transfers for selected files. |entries| Array of files
 * for which ongoing transfer should be canceled. |callback| Completion callback
 * of the cancel.
 * @param {!Array<Object>} entries
 * @param {function():void} callback Callback that does not take arguments.
 * @see https://developer.chrome.com/extensions/fileManagerPrivate#method-cancelFileTransfers
 */
chrome.fileManagerPrivate.cancelFileTransfers = function(entries, callback) {};

/**
 * Cancels all ongoing file transfers. |callback| Completion callback of the
 * cancel.
 * @param {function():void} callback Callback that does not take arguments.
 * @see https://developer.chrome.com/extensions/fileManagerPrivate#method-cancelAllFileTransfers
 */
chrome.fileManagerPrivate.cancelAllFileTransfers = function(callback) {};

/**
 * Starts to copy an entry. If the source is a directory, the copy is done
 * recursively. |entry| Entry of the source entry to be copied. |parentEntry|
 * Entry for the destination (parent) directory. |newName| Name of the new
 * entry. It must not contain '/'. |callback| Completion callback.
 * @param {Object} entry
 * @param {Object} parentEntry
 * @param {string} newName
 * @param {function(number):void} callback |copyId| ID of the copy task. Can be
 *     used to identify the progress, and to cancel the task.
 * @see https://developer.chrome.com/extensions/fileManagerPrivate#method-startCopy
 */
chrome.fileManagerPrivate.startCopy = function(entry, parentEntry, newName, callback) {};

/**
 * Cancels the running copy task. |copyId| ID of the copy task to be cancelled.
 * |callback| Completion callback of the cancel.
 * @param {number} copyId
 * @param {function():void} callback Callback that does not take arguments.
 * @see https://developer.chrome.com/extensions/fileManagerPrivate#method-cancelCopy
 */
chrome.fileManagerPrivate.cancelCopy = function(copyId, callback) {};

/**
 * Retrieves total and remaining size of a mount point. |volumeId| ID of the
 * volume to be checked. |callback|
 * @param {string} volumeId
 * @param {function((!chrome.fileManagerPrivate.MountPointSizeStats|undefined)):void}
 *     callback |sizeStats| Name/value pairs of size stats. Will be undefined if
 *     stats could not be determined.
 * @see https://developer.chrome.com/extensions/fileManagerPrivate#method-getSizeStats
 */
chrome.fileManagerPrivate.getSizeStats = function(volumeId, callback) {};

/**
 * Formats a mounted volume. |volumeId| ID of the volume to be formatted.
 * @param {string} volumeId
 * @see https://developer.chrome.com/extensions/fileManagerPrivate#method-formatVolume
 */
chrome.fileManagerPrivate.formatVolume = function(volumeId) {};

/**
 * Renames a mounted volume. |volumeId| ID of the volume to be renamed.
 * |newName| New name of the target volume.
 * @param {string} volumeId
 * @param {string} newName
 * @see https://developer.chrome.com/extensions/fileManagerPrivate#method-renameVolume
 */
chrome.fileManagerPrivate.renameVolume = function(volumeId, newName) {};

/**
 * Retrieves file manager preferences. |callback|
 * @param {function(!chrome.fileManagerPrivate.Preferences):void} callback
 * @see https://developer.chrome.com/extensions/fileManagerPrivate#method-getPreferences
 */
chrome.fileManagerPrivate.getPreferences = function(callback) {};

/**
 * Sets file manager preferences. |changeInfo|
 * @param {!chrome.fileManagerPrivate.PreferencesChange} changeInfo
 * @see https://developer.chrome.com/extensions/fileManagerPrivate#method-setPreferences
 */
chrome.fileManagerPrivate.setPreferences = function(changeInfo) {};

/**
 * Performs drive content search. |searchParams| |callback|
 * @param {!chrome.fileManagerPrivate.SearchParams} searchParams
 * @param {function(!Array<Object>, string):void} callback |entries| |nextFeed|
 *     ID of the feed that contains next chunk of the search result.     Should
 *     be sent to the next searchDrive request to perform     incremental
 *     search.
 * @see https://developer.chrome.com/extensions/fileManagerPrivate#method-searchDrive
 */
chrome.fileManagerPrivate.searchDrive = function(searchParams, callback) {};

/**
 * Performs drive metadata search. |searchParams| |callback|
 * @param {!chrome.fileManagerPrivate.SearchMetadataParams} searchParams
 * @param {function(!Array<!chrome.fileManagerPrivate.SearchResult>):void}
 *     callback
 * @see https://developer.chrome.com/extensions/fileManagerPrivate#method-searchDriveMetadata
 */
chrome.fileManagerPrivate.searchDriveMetadata = function(searchParams, callback) {};

/**
 * Search files in the volume having |volumeId| by using |hashList|.
 * sub-directories) the given |targetDirectoryUrl|.
 * @param {string} volumeId
 * @param {!Array<string>} hashList
 * @param {function(Object):void} callback |urls| The map of hash and array of
 *     FileEntry's URL. The array can be empty if the corresponding file is not
 *     found.
 * @see https://developer.chrome.com/extensions/fileManagerPrivate#method-searchFilesByHashes
 */
chrome.fileManagerPrivate.searchFilesByHashes = function(volumeId, hashList, callback) {};

/**
 * Create a zip file for the selected files. |parentEntry| Entry of the
 * directory containing the selected files. |entries| Entries of the selected
 * files. The files must be under the     directory specified by |parentEntry|.
 * |destName| Name of the destination zip file. The zip file will be created
 * under the directory specified by |parentEntry|. |callback| TODO(mtomasz):
 * Swap order of |entries| and |parentEntry|.
 * @param {Object} parentEntry
 * @param {!Array<Object>} entries
 * @param {string} destName
 * @param {function((boolean|undefined)):void} callback
 * @see https://developer.chrome.com/extensions/fileManagerPrivate#method-zipSelection
 */
chrome.fileManagerPrivate.zipSelection = function(parentEntry, entries, destName, callback) {};

/**
 * Retrieves the state of the current drive connection. |callback|
 * @param {function(!chrome.fileManagerPrivate.DriveConnectionState):void}
 *     callback
 * @see https://developer.chrome.com/extensions/fileManagerPrivate#method-getDriveConnectionState
 */
chrome.fileManagerPrivate.getDriveConnectionState = function(callback) {};

/**
 * Checks whether the path name length fits in the limit of the filesystem.
 * |parentEntry| The entry of the parent directory entry. |name| The name of the
 * file. |callback| Called back when the check is finished.
 * @param {Object} parentEntry
 * @param {string} name
 * @param {function(boolean):void} callback |result| true if the length is in
 *     the valid range, false otherwise.
 * @see https://developer.chrome.com/extensions/fileManagerPrivate#method-validatePathNameLength
 */
chrome.fileManagerPrivate.validatePathNameLength = function(parentEntry, name, callback) {};

/**
 * Changes the zoom factor of the Files app. |operation| Zooming mode.
 * @param {!chrome.fileManagerPrivate.ZoomOperationType} operation
 * @see https://developer.chrome.com/extensions/fileManagerPrivate#method-zoom
 */
chrome.fileManagerPrivate.zoom = function(operation) {};

/**
 * Requests a Drive API OAuth2 access token. |refresh| Whether the token should
 * be refetched instead of using the cached     one. |callback|
 * @param {boolean} refresh
 * @param {function(string):void} callback |accessToken| OAuth2 access token, or
 *     an empty string if failed to fetch.
 * @see https://developer.chrome.com/extensions/fileManagerPrivate#method-requestAccessToken
 */
chrome.fileManagerPrivate.requestAccessToken = function(refresh, callback) {};

/**
 * Requests a Webstore API OAuth2 access token. |callback|
 * @param {function(string):void} callback |accessToken| OAuth2 access token, or
 *     an empty string if failed to fetch.
 * @see https://developer.chrome.com/extensions/fileManagerPrivate#method-requestWebStoreAccessToken
 */
chrome.fileManagerPrivate.requestWebStoreAccessToken = function(callback) {};

/**
 * Requests a share dialog url for the specified file. |entry| The entry to
 * share. |callback|
 * @param {Object} entry
 * @param {function(string):void} callback |url| Result url.
 * @see https://developer.chrome.com/extensions/fileManagerPrivate#method-getShareUrl
 */
chrome.fileManagerPrivate.getShareUrl = function(entry, callback) {};

/**
 * Requests a download url to download the file contents. |entry| The entry to
 * download. |callback|
 * @param {Object} entry
 * @param {function(string):void} callback |url| Result url.
 * @see https://developer.chrome.com/extensions/fileManagerPrivate#method-getDownloadUrl
 */
chrome.fileManagerPrivate.getDownloadUrl = function(entry, callback) {};

/**
 * Requests to share drive files. |entry| Entry to be shared. |shareType| Type
 * of access that is getting granted.
 * @param {Object} entry
 * @param {!chrome.fileManagerPrivate.DriveShareType} shareType
 * @param {function():void} callback Callback that does not take arguments.
 * @see https://developer.chrome.com/extensions/fileManagerPrivate#method-requestDriveShare
 */
chrome.fileManagerPrivate.requestDriveShare = function(entry, shareType, callback) {};

/**
 * Obtains a list of profiles that are logged-in.
 * @param {function(!Array<!chrome.fileManagerPrivate.ProfileInfo>, string, string):void}
 *     callback |profiles| List of profile information. |runningProfile| ID of
 *     the profile that runs the application instance. |showingProfile| ID of
 *     the profile that shows the application window.
 * @see https://developer.chrome.com/extensions/fileManagerPrivate#method-getProfiles
 */
chrome.fileManagerPrivate.getProfiles = function(callback) {};

/**
 * Opens inspector window. |type| InspectionType which specifies how to open
 * inspector.
 * @param {!chrome.fileManagerPrivate.InspectionType} type
 * @see https://developer.chrome.com/extensions/fileManagerPrivate#method-openInspector
 */
chrome.fileManagerPrivate.openInspector = function(type) {};

/**
 * Computes an MD5 checksum for the given file. |entry| The entry of the file to
 * checksum. |callback|
 * @param {Object} entry
 * @param {function(string):void} callback |checksum| Result checksum.
 * @see https://developer.chrome.com/extensions/fileManagerPrivate#method-computeChecksum
 */
chrome.fileManagerPrivate.computeChecksum = function(entry, callback) {};

/**
 * Is UMA enabled?
 * @param {function(boolean):void} callback |result| Boolean result returned by
 *     the invoked function.
 * @see https://developer.chrome.com/extensions/fileManagerPrivate#method-isUMAEnabled
 */
chrome.fileManagerPrivate.isUMAEnabled = function(callback) {};

/**
 * Sets a tag on a file or a directory. Only Drive files are supported.
 * @param {Object} entry
 * @param {!chrome.fileManagerPrivate.EntryTagVisibility} visibility
 * @param {string} key
 * @param {string} value
 * @param {function():void} callback Callback that does not take arguments.
 * @see https://developer.chrome.com/extensions/fileManagerPrivate#method-setEntryTag
 */
chrome.fileManagerPrivate.setEntryTag = function(entry, visibility, key, value, callback) {};

/**
 * Returns if Piex loader is enabled.
 * @param {function(boolean):void} callback |result| Boolean result returned by
 *     the invoked function.
 * @see https://developer.chrome.com/extensions/fileManagerPrivate#method-isPiexLoaderEnabled
 */
chrome.fileManagerPrivate.isPiexLoaderEnabled = function(callback) {};

/**
 * Returns list of available providers.
 * @param {function((!Array<!Provider>|undefined))} callback
 */
chrome.fileManagerPrivate.getProviders = function(callback) {};

/**
 * Requests adding a new provided file system. If not possible, then an error
 * via chrome.runtime.lastError is returned.
 * @param {string} providerId
 * @param {function()} callback
 */
chrome.fileManagerPrivate.addProvidedFileSystem =
    function(providerId, callback) {};

/**
 * Requests configuring an existing volume. If not possible, then returns an
 * error via chrome.runtime.lastError.
 * @param {string} volumeId
 * @param {function():void} callback Callback that does not take arguments.
 * @see https://developer.chrome.com/extensions/fileManagerPrivate#method-configureVolume
 */
chrome.fileManagerPrivate.configureVolume = function(volumeId, callback) {};

/**
 * Requests list of custom actions for the specified entries. If not possible,
 * then an error via chrome.runtime.lastError is returned.
 * @param {!Array<Object>} entries
 * @param {function(!Array<!chrome.fileManagerPrivate.fileSystemProvider.Action>):void}
 *     callback |actions| List of actions.
 * @see https://developer.chrome.com/extensions/fileManagerPrivate#method-getCustomActions
 */
chrome.fileManagerPrivate.getCustomActions = function(entries, callback) {};

/**
 * Executes a custom action for a set of entries. If not possible, then an error
 * via chrome.runtime.lastError is returned.
 * @param {!Array<Object>} entries
 * @param {string} actionId
 * @param {function():void} callback Callback that does not take arguments.
 * @see https://developer.chrome.com/extensions/fileManagerPrivate#method-executeCustomAction
 */
chrome.fileManagerPrivate.executeCustomAction = function(entries, actionId, callback) {};

/**
 * Get the total size of a directory. |entry| Entry of the target directory.
 * |callback|
 * @param {Object} entry
 * @param {function(number):void} callback |size| result size.
 * @see https://developer.chrome.com/extensions/fileManagerPrivate#method-getDirectorySize
 */
chrome.fileManagerPrivate.getDirectorySize = function(entry, callback) {};

/**
 * Gets recently modified files across file systems. |restriction| Flag to
 * restrict sources of recent files. |callback|
 * @param {!chrome.fileManagerPrivate.SourceRestriction} restriction
 * @param {function(!Array<Object>):void} callback |entries| Recently modified
 *     entries.
 * @see https://developer.chrome.com/extensions/fileManagerPrivate#method-getRecentFiles
 */
chrome.fileManagerPrivate.getRecentFiles = function(restriction, callback) {};

/**
 * Creates an isolated file system for an entry. |entry| The entry to create an
 * isolated file system URL for. |callback|
 * @param {Object} entry
 * @param {function(string):void} callback |url| Result url.
 * @see https://developer.chrome.com/extensions/fileManagerPrivate#method-createIsolatedUrl
 */
chrome.fileManagerPrivate.createIsolatedUrl = function(entry, callback) {};

/**
 * @type {!ChromeEvent}
 * @see https://developer.chrome.com/extensions/fileManagerPrivate#event-onMountCompleted
 */
chrome.fileManagerPrivate.onMountCompleted;

/**
 * @type {!ChromeEvent}
 * @see https://developer.chrome.com/extensions/fileManagerPrivate#event-onFileTransfersUpdated
 */
chrome.fileManagerPrivate.onFileTransfersUpdated;

/**
 * @type {!ChromeEvent}
 * @see https://developer.chrome.com/extensions/fileManagerPrivate#event-onCopyProgress
 */
chrome.fileManagerPrivate.onCopyProgress;

/**
 * @type {!ChromeEvent}
 * @see https://developer.chrome.com/extensions/fileManagerPrivate#event-onDirectoryChanged
 */
chrome.fileManagerPrivate.onDirectoryChanged;

/**
 * @type {!ChromeEvent}
 * @see https://developer.chrome.com/extensions/fileManagerPrivate#event-onPreferencesChanged
 */
chrome.fileManagerPrivate.onPreferencesChanged;

/**
 * @type {!ChromeEvent}
 * @see https://developer.chrome.com/extensions/fileManagerPrivate#event-onDriveConnectionStatusChanged
 */
chrome.fileManagerPrivate.onDriveConnectionStatusChanged;

/**
 * @type {!ChromeEvent}
 * @see https://developer.chrome.com/extensions/fileManagerPrivate#event-onDeviceChanged
 */
chrome.fileManagerPrivate.onDeviceChanged;

/**
 * @type {!ChromeEvent}
 * @see https://developer.chrome.com/extensions/fileManagerPrivate#event-onDriveSyncError
 */
chrome.fileManagerPrivate.onDriveSyncError;

/**
 * @type {!ChromeEvent}
 * @see https://developer.chrome.com/extensions/fileManagerPrivate#event-onAppsUpdated
 */
chrome.fileManagerPrivate.onAppsUpdated;
