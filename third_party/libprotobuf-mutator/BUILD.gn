# Copyright 2017 The Chromium Authors. All rights reserved.
import("//build/config/sanitizers/sanitizers.gni")
import("//third_party/libprotobuf-mutator/libprotobuf_mutator.gni")

config("include_config") {
  include_dirs = [ "src/" ]
}

config("protobuf_full_when_part_of_libprotobuf_mutator_config") {
  # Instrument using ASAN otherwise we get container overflow false
  # positives
  if (use_libfuzzer && !is_win) {
    cflags = cflags_for_nontargeted_code
  }
}

config("nontargeted_part_of_libprotobuf_mutator_config") {
  # Only remove ASAN and UBSAN instrumentation and not MSAN since it does not
  # seem to work unless the whole binary is instrumented.
  if (use_libfuzzer && !is_win) {
    cflags = [ "-fno-sanitize=address" ]
    cflags += cflags_for_nontargeted_code
  }
}

source_set("libprotobuf-mutator") {
  testonly = true
  configs += [
    ":include_config",
    ":nontargeted_part_of_libprotobuf_mutator_config",
  ]

  public_configs = [ ":include_config" ]
  sources = [
    "src/src/binary_format.cc",
    "src/src/libfuzzer/libfuzzer_macro.cc",
    "src/src/libfuzzer/libfuzzer_mutator.cc",
    "src/src/mutator.cc",
    "src/src/text_format.cc",
    "src/src/utf8_fix.cc",
  ]
  deps = [
    "//third_party/protobuf:protobuf_full",
  ]

  # Let ClusterFuzz builders know to not build targets that depend on
  # libprotobuf-mutator for AFL.
  if (use_afl) {
    all_dependent_configs = [ "//testing/libfuzzer:no_clusterfuzz" ]
  }
}
