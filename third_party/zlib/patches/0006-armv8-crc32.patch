From b2ec178a0c790e8210e5c43ff8d3ec9c74fb13fe Mon Sep 17 00:00:00 2001
From: Adenilson Cavalcanti <adenilson.cavalcanti@arm.com>
Date: Thu, 10 Aug 2017 15:17:07 -0700
Subject: [PATCH] Using ARMv8 CRC32 specific instruction

CRC32 affects performance for both image decompression (PNG)
as also in general browsing while accessing websites that serve
content using compression (i.e. Content-Encoding: gzip).

This first patch implements an optimized CRC32 function using the
dedicated instruction available in ARMv8. This instruction is available
in new Android devices featuring an ARMv8 SoC, like Nexus 5x and
Google Pixel.

It should be between 6x (A53: 116ms X 22ms for a 4Kx4Kx4 buffer) to
10x faster (A72: 91ms x 9ms) than the C implementation currently used
by zlib.

PNG decoding performance gains should be around 5-7%.

Change-Id: I069408ebc06c49a3c2be4ba3253319e025ee09d7
---
 third_party/zlib/BUILD.gn        | 13 ++++++--
 third_party/zlib/README.chromium |  2 +-
 third_party/zlib/armv8_crc32.c   | 64 ++++++++++++++++++++++++++++++++++++++++
 third_party/zlib/armv8_crc32.h   | 15 ++++++++++
 third_party/zlib/crc32.c         | 10 +++++++
 5 files changed, 100 insertions(+), 4 deletions(-)
 create mode 100644 third_party/zlib/armv8_crc32.c
 create mode 100644 third_party/zlib/armv8_crc32.h

diff --git a/third_party/zlib/BUILD.gn b/third_party/zlib/BUILD.gn
index 11f57ef..19667ea 100644
--- a/third_party/zlib/BUILD.gn
+++ b/third_party/zlib/BUILD.gn
@@ -137,6 +137,15 @@ static_library("zlib") {
     }
   }
 
+  # TODO: enable arm64, see crbug.com/754929.
+  if (current_cpu == "arm" && arm_arch == "armv8-a+crc") {
+    sources += [
+      "armv8_crc32.c",
+      "armv8_crc32.h",
+    ]
+    defines = [ "USE_ARMV8_CRC32" ]
+  }
+
   defines = []
   deps = []
 
@@ -162,9 +171,7 @@ static_library("zlib") {
 
   public_configs = [ ":zlib_config" ]
 
-  deps += [
-    ":zlib_x86_simd"
-  ]
+  deps += [ ":zlib_x86_simd" ]
 }
 
 config("minizip_warnings") {
diff --git a/third_party/zlib/README.chromium b/third_party/zlib/README.chromium
index 14e2d169..cc746a5 100644
--- a/third_party/zlib/README.chromium
+++ b/third_party/zlib/README.chromium
@@ -22,4 +22,4 @@ Local Modifications:
    imported.
  - The contents of the google directory are original Chromium-specific
    additions.
- - Plus the changes in 'patches' folder.
\ No newline at end of file
+ - Plus the changes in 'patches' folder.
diff --git a/third_party/zlib/armv8_crc32.c b/third_party/zlib/armv8_crc32.c
new file mode 100644
index 0000000..cfd2333
--- /dev/null
+++ b/third_party/zlib/armv8_crc32.c
@@ -0,0 +1,64 @@
+/* Copyright (C) 1995-2011, 2016 Mark Adler
+ * Copyright (C) 2017 ARM Holdings Inc.
+ * Authors: Adenilson Cavalcanti <adenilson.cavalcanti@arm.com>
+ *          Yang Zhang <yang.zhang@arm.com>
+ * This software is provided 'as-is', without any express or implied
+ * warranty.  In no event will the authors be held liable for any damages
+ * arising from the use of this software.
+ * Permission is granted to anyone to use this software for any purpose,
+ * including commercial applications, and to alter it and redistribute it
+ * freely, subject to the following restrictions:
+ * 1. The origin of this software must not be misrepresented; you must not
+ *  claim that you wrote the original software. If you use this software
+ *    in a product, an acknowledgment in the product documentation would be
+ *    appreciated but is not required.
+ * 2. Altered source versions must be plainly marked as such, and must not be
+ *    misrepresented as being the original software.
+ * 3. This notice may not be removed or altered from any source distribution.
+ */
+#include "armv8_crc32.h"
+#include <arm_acle.h>
+
+uint32_t armv8_crc32_little(uint32_t crc,
+			    const unsigned char *buf,
+			    size_t len)
+{
+    uint32_t c;
+    const uint32_t *buf4;
+
+    c = crc;
+    c = ~c;
+    while (len && ((ptrdiff_t)buf & 3)) {
+        c = __crc32b(c, *buf++);
+        len--;
+    }
+
+    buf4 = (const uint32_t *)(const void *)buf;
+
+    while (len >= 32) {
+        c = __crc32w(c, *buf4++);
+        c = __crc32w(c, *buf4++);
+        c = __crc32w(c, *buf4++);
+        c = __crc32w(c, *buf4++);
+        c = __crc32w(c, *buf4++);
+        c = __crc32w(c, *buf4++);
+        c = __crc32w(c, *buf4++);
+        c = __crc32w(c, *buf4++);
+        len -= 32;
+    }
+
+    while (len >= 4) {
+        c = __crc32w(c, *buf4++);
+        len -= 4;
+    }
+
+    buf = (const unsigned char *)buf4;
+    if (len) {
+        do {
+            c = __crc32b(c, *buf++);
+        } while (--len);
+    }
+
+    c = ~c;
+    return c;
+}
diff --git a/third_party/zlib/armv8_crc32.h b/third_party/zlib/armv8_crc32.h
new file mode 100644
index 0000000..7123cf7
--- /dev/null
+++ b/third_party/zlib/armv8_crc32.h
@@ -0,0 +1,15 @@
+/* Copyright 2017 The Chromium Authors. All rights reserved.
+ * Use of this source code is governed by a BSD-style license that can be
+ * found in the LICENSE file.
+ */
+#ifndef __ARMV8_CRC__
+#define __ARMV8_CRC__
+
+// Depending on the compiler flavor, size_t may be defined in
+// one or the other header. See:
+// http://stackoverflow.com/questions/26410466/gcc-linaro-compiler-throws-error-unknown-type-name-size-t
+#include <stddef.h>
+#include <stdint.h>
+
+uint32_t armv8_crc32_little(uint32_t crc, const unsigned char* buf, size_t len);
+#endif
diff --git a/third_party/zlib/crc32.c b/third_party/zlib/crc32.c
index 9162429..abc2ef1 100644
--- a/third_party/zlib/crc32.c
+++ b/third_party/zlib/crc32.c
@@ -32,6 +32,12 @@
 #include "x86.h"
 #include "zutil.h"      /* for STDC and FAR definitions */
 
+#if defined(USE_ARMV8_CRC32)
+#ifdef __ARM_ACLE
+#include "armv8_crc32.h"
+#endif
+#endif
+
 /* Definitions for doing the crc four data bytes at a time. */
 #if !defined(NOBYFOUR) && defined(Z_U4)
 #  define BYFOUR
@@ -241,7 +247,11 @@ unsigned long ZEXPORT crc32(crc, buf, len)
     const unsigned char FAR *buf;
     uInt len;
 {
+#if defined(__ARM_ACLE) && defined(USE_ARMV8_CRC32)
+    return armv8_crc32_little(crc, buf, len);
+#else
     return crc32_z(crc, buf, len);
+#endif
 }
 
 #ifdef BYFOUR
-- 
2.7.4

