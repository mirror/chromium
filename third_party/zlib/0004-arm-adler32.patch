From d54be9b8cb05e3ce1a98c88345cf0f4f47956d09 Mon Sep 17 00:00:00 2001
From: Adenilson Cavalcanti <adenilson.cavalcanti@arm.com>
Date: Mon, 30 Jan 2017 15:30:38 -0800
Subject: [PATCH] NEON implementation for Adler32

The checksum is calculated in the uncompressed PNG data and can be made
much faster by using SIMD.

Tests in ARMv8 yielded an improvement of about 3x (e.g. walltime was
350ms x 125ms for a 4096x4096 bytes executed 30 times).

This alone yields a performance boost for PNG decoding ranging
from 5% to 18% depending on a few factors (SoC, battery status,
big/little, etc).
---
 third_party/zlib/BUILD.gn                   |   2 +
 third_party/zlib/README.chromium            |   1 +
 third_party/zlib/adler32.c                  |   8 ++
 third_party/zlib/contrib/arm/neon_adler32.c | 161 ++++++++++++++++++++++++++++
 third_party/zlib/contrib/arm/neon_adler32.h |  27 +++++
 5 files changed, 199 insertions(+)
 create mode 100644 third_party/zlib/contrib/arm/neon_adler32.c
 create mode 100644 third_party/zlib/contrib/arm/neon_adler32.h

diff --git a/third_party/zlib/BUILD.gn b/third_party/zlib/BUILD.gn
index 224c286..5e8cdd4 100644
--- a/third_party/zlib/BUILD.gn
+++ b/third_party/zlib/BUILD.gn
@@ -85,6 +85,8 @@ static_library("zlib") {
         "contrib/arm/chunkcopy.h",
         "contrib/arm/inffast.c",
         "contrib/arm/inflate.c",
+        "contrib/arm/neon_adler32.c",
+        "contrib/arm/neon_adler32.h",
       ]
     }
   }
diff --git a/third_party/zlib/README.chromium b/third_party/zlib/README.chromium
index ff5c6ab..6d4e97c 100644
--- a/third_party/zlib/README.chromium
+++ b/third_party/zlib/README.chromium
@@ -29,3 +29,4 @@ Local Modifications:
  - 0002-uninitializedcheck.patch: default-initialize state->check, see
    crbug.com/697481
  - 0003-arm-inffast.patch: ARM optimized inflate using NEON.
+ - 0004-arm-adler32.patch: ARM optimized Adler32 checksum using NEON.
diff --git a/third_party/zlib/adler32.c b/third_party/zlib/adler32.c
index d0be438..6bb9265 100644
--- a/third_party/zlib/adler32.c
+++ b/third_party/zlib/adler32.c
@@ -6,6 +6,9 @@
 /* @(#) $Id$ */
 
 #include "zutil.h"
+#if (defined(__ARM_NEON__) || defined(__ARM_NEON))
+#include "contrib/arm/neon_adler32.h"
+#endif
 
 local uLong adler32_combine_ OF((uLong adler1, uLong adler2, z_off64_t len2));
 
@@ -65,6 +68,11 @@ uLong ZEXPORT adler32_z(adler, buf, len)
     const Bytef *buf;
     z_size_t len;
 {
+#if (defined(__ARM_NEON__) || defined(__ARM_NEON))
+    if (len >= 16)
+        return NEON_adler32(adler, buf, len);
+#endif
+
     unsigned long sum2;
     unsigned n;
 
diff --git a/third_party/zlib/contrib/arm/neon_adler32.c b/third_party/zlib/contrib/arm/neon_adler32.c
new file mode 100644
index 0000000..9d08214
--- /dev/null
+++ b/third_party/zlib/contrib/arm/neon_adler32.c
@@ -0,0 +1,161 @@
+/* Copyright (C) 1995-2011, 2016 Mark Adler
+ * Copyright (C) 2017 ARM Holdings Inc.
+ * Authors: Adenilson Cavalcanti <adenilson.cavalcanti@arm.com>
+ *          Simon Hosie <simon.hosie@arm.com>
+ * This software is provided 'as-is', without any express or implied
+ * warranty.  In no event will the authors be held liable for any damages
+ * arising from the use of this software.
+ * Permission is granted to anyone to use this software for any purpose,
+ * including commercial applications, and to alter it and redistribute it
+ * freely, subject to the following restrictions:
+ * 1. The origin of this software must not be misrepresented; you must not
+ *  claim that you wrote the original software. If you use this software
+ *    in a product, an acknowledgment in the product documentation would be
+ *    appreciated but is not required.
+ * 2. Altered source versions must be plainly marked as such, and must not be
+ *    misrepresented as being the original software.
+ * 3. This notice may not be removed or altered from any source distribution.
+ */
+
+#include "neon_adler32.h"
+#if (defined(__ARM_NEON__) || defined(__ARM_NEON))
+#include <arm_neon.h>
+
+/* This is the threshold where doing accumulation may overflow. */
+#define M_NMAX 5552
+/* The largest prime smaller than 65536. */
+#define M_BASE 65521
+
+static void NEON_accum32(uint32_t *s, const unsigned char *buf,
+                         unsigned int len)
+{
+    /* Please refer to the 'Algorithm' section of:
+     * https://en.wikipedia.org/wiki/Adler-32
+     * Here, 'taps' represents the 'n' scalar multiplier of 'B', which
+     * will be multiplied and accumulated.
+     */
+    static const uint8_t taps[32] = {
+        32, 31, 30, 29, 28, 27, 26, 25,
+        24, 23, 22, 21, 20, 19, 18, 17,
+        16, 15, 14, 13, 12, 11, 10, 9,
+        8, 7, 6, 5, 4, 3, 2, 1 };
+
+    /* This may result in some register spilling (and 4 unnecessary VMOVs). */
+    const uint8x16_t t0 = vld1q_u8(taps);
+    const uint8x16_t t1 = vld1q_u8(taps + 16);
+    const uint8x8_t n_first_low = vget_low_u8(t0);
+    const uint8x8_t n_first_high = vget_high_u8(t0);
+    const uint8x8_t n_second_low = vget_low_u8(t1);
+    const uint8x8_t n_second_high = vget_high_u8(t1);
+
+    uint32x2_t adacc2, s2acc2, as;
+    uint16x8_t adler, sum2;
+    uint8x16_t d0, d1;
+
+    uint32x4_t adacc = vdupq_n_u32(0);
+    uint32x4_t s2acc = vdupq_n_u32(0);
+    adacc = vsetq_lane_u32(s[0], adacc, 0);
+    s2acc = vsetq_lane_u32(s[1], s2acc, 0);
+
+    /*  Think of it as a vectorized form of the code implemented to
+     * handle the tail (or a DO16 on steroids). But in this case
+     * we handle 32 elements and better exploit the pipeline.
+     */
+    while (len >= 2) {
+        d0 = vld1q_u8(buf);
+        d1 = vld1q_u8(buf + 16);
+        s2acc = vaddq_u32(s2acc, vshlq_n_u32(adacc, 5));
+        adler = vpaddlq_u8(d0);
+        adler = vpadalq_u8(adler, d1);
+        sum2 = vmull_u8(n_first_low, vget_low_u8(d0));
+        sum2 = vmlal_u8(sum2, n_first_high, vget_high_u8(d0));
+        sum2 = vmlal_u8(sum2, n_second_low, vget_low_u8(d1));
+        sum2 = vmlal_u8(sum2, n_second_high, vget_high_u8(d1));
+        adacc = vpadalq_u16(adacc, adler);
+        s2acc = vpadalq_u16(s2acc, sum2);
+        len -= 2;
+        buf += 32;
+    }
+
+    /* This is the same as before, but we only handle 16 elements as
+     * we are almost done.
+     */
+    while (len > 0) {
+        d0 = vld1q_u8(buf);
+        s2acc = vaddq_u32(s2acc, vshlq_n_u32(adacc, 4));
+        adler = vpaddlq_u8(d0);
+        sum2 = vmull_u8(n_second_low, vget_low_u8(d0));
+        sum2 = vmlal_u8(sum2, n_second_high, vget_high_u8(d0));
+        adacc = vpadalq_u16(adacc, adler);
+        s2acc = vpadalq_u16(s2acc, sum2);
+        buf += 16;
+        len--;
+    }
+
+    /* Combine the accumulated components (adler and sum2). */
+    adacc2 = vpadd_u32(vget_low_u32(adacc), vget_high_u32(adacc));
+    s2acc2 = vpadd_u32(vget_low_u32(s2acc), vget_high_u32(s2acc));
+    as = vpadd_u32(adacc2, s2acc2);
+
+    /* Store the results. */
+    s[0] = vget_lane_u32(as, 0);
+    s[1] = vget_lane_u32(as, 1);
+}
+
+static void NEON_handle_tail(uint32_t *pair, const unsigned char *buf,
+                             unsigned int len)
+{
+    /* In case of doubt, check what DO1() does. */
+    for (unsigned int i = 0; i < len; ++i) {
+        pair[0] += buf[i];
+        pair[1] += pair[0];
+    }
+}
+
+unsigned long NEON_adler32(unsigned long adler, const unsigned char *buf,
+                           const unsigned int len)
+{
+    /* Initial Adler-32 value (deferred check for len == 1 speed). */
+    if (!buf)
+        return 1L;
+
+    unsigned long sum2;
+    uint32_t pair[2];
+    unsigned int n = M_NMAX;
+    unsigned int done = 0;
+
+    /* Split Adler-32 into component sums. */
+    sum2 = (adler >> 16) & 0xffff;
+    adler &= 0xffff;
+    pair[0] = adler;
+    pair[1] = sum2;
+
+    for (unsigned int i = 0; i < len; i += n) {
+        /* Substraction avoids an overflow if len == UINT_MAX (2^32@Linux),
+         * which is not allowed as PNG format establishes a maximum valid IDAT
+         * size of 2GB (being 8KB and 32KB common).
+         */
+        if ((len - i) < n)
+            n = len - i;
+
+        if (n < 16)
+            break;
+
+        NEON_accum32(pair, buf + i, n / 16);
+        pair[0] %= M_BASE;
+        pair[1] %= M_BASE;
+
+        done += (n / 16) * 16;
+    }
+
+    /* Handle the tail elements. */
+    if (done < len) {
+        NEON_handle_tail(pair, (buf + done), len - done);
+        pair[0] %= M_BASE;
+        pair[1] %= M_BASE;
+    }
+
+    /* D = B * 65536 + A, see: https://en.wikipedia.org/wiki/Adler-32. */
+    return (pair[1] << 16) | pair[0];
+}
+#endif
diff --git a/third_party/zlib/contrib/arm/neon_adler32.h b/third_party/zlib/contrib/arm/neon_adler32.h
new file mode 100644
index 0000000..274b970
--- /dev/null
+++ b/third_party/zlib/contrib/arm/neon_adler32.h
@@ -0,0 +1,27 @@
+/* Copyright (C) 1995-2011, 2016 Mark Adler
+ * Copyright (C) 2017 ARM Holdings Inc.
+ * Authors: Adenilson Cavalcanti <adenilson.cavalcanti@arm.com>
+ *          Simon Hosie <simon.hosie@arm.com>
+ * This software is provided 'as-is', without any express or implied
+ * warranty.  In no event will the authors be held liable for any damages
+ * arising from the use of this software.
+ * Permission is granted to anyone to use this software for any purpose,
+ * including commercial applications, and to alter it and redistribute it
+ * freely, subject to the following restrictions:
+ * 1. The origin of this software must not be misrepresented; you must not
+ *  claim that you wrote the original software. If you use this software
+ *    in a product, an acknowledgment in the product documentation would be
+ *    appreciated but is not required.
+ * 2. Altered source versions must be plainly marked as such, and must not be
+ *    misrepresented as being the original software.
+ * 3. This notice may not be removed or altered from any source distribution.
+ */
+#ifndef __NEON_ADLER32__
+#define __NEON_ADLER32__
+
+#if (defined(__ARM_NEON__) || defined(__ARM_NEON))
+unsigned long NEON_adler32(unsigned long adler,
+                           const unsigned char* buf,
+                           const unsigned int len);
+#endif
+#endif
-- 
2.7.4

