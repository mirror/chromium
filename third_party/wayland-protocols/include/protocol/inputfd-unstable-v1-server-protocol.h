/* Generated by wayland-scanner 1.13.0 */

#ifndef INPUTFD_UNSTABLE_V1_SERVER_PROTOCOL_H
#define INPUTFD_UNSTABLE_V1_SERVER_PROTOCOL_H

#include <stdint.h>
#include <stddef.h>
#include "wayland-server.h"

#ifdef  __cplusplus
extern "C" {
#endif

struct wl_client;
struct wl_resource;

/**
 * @page page_inputfd_unstable_v1 The inputfd_unstable_v1 protocol
 * Wayland protocol for direct fd access to input devices
 *
 * @section page_desc_inputfd_unstable_v1 Description
 *
 * This description provides a high-level overview of the interfaces
 * in this protocol. For details, see the protocol specification.
 *
 * Some input devices do not interact with the windowing system. Examples
 * of such input devices are gaming controllers or 3D mice. In many cases,
 * a client requires direct access to the device to access or interpret
 * device-specific functionality.
 *
 * This interface provides client access to input devices via a file
 * descriptor (fd). The compositor may restrict the type of device
 * accessible and it may restrict specific events from being sent to the
 * client (e.g.  by masking the Home button on a gamepad). Otherwise, a
 * client should treat the device as if opened manually.
 *
 * Multiple input devices may exists and be assigned to different seats.
 * The top-level object of this protocol is a wp_inputfd_manager. A client
 * must request the desired interface for a given seat. This object then
 * provides the list of devices for that category that match the fd type of
 * that interface. At the moment, only the evdev fd type is supported but in
 * the future, a device may be accessible via multiple fd interfaces.
 *
 * Once a compositor deems a device to be focused on the client or on a
 * client's surface it sends a focus_in event with a file descriptor for
 * this device. A compositor may arbitrarily revoke access
 * to the device by sending a wp_inputfd.focus_out. Additionally, a
 * compositor may invoke system functionality to restrict access to the
 * file descriptor, e.g. by using EVIOCREVOKE on an evdev fd.
 *
 * Otherwise, a client should treat the file descriptor as direct access to
 * the device for the duration of it having access.
 *
 * Warning! The protocol described in this file is experimental and
 * backward incompatible changes may be made. Backward compatible changes
 * may be added together with the corresponding interface version bump.
 * Backward incompatible changes are done by bumping the version number in
 * the protocol and interface names and resetting the interface version.
 * Once the protocol is to be declared stable, the 'z' prefix and the
 * version number in the protocol and interface names are removed and the
 * interface version number is reset.
 *
 * @section page_ifaces_inputfd_unstable_v1 Interfaces
 * - @subpage page_iface_zwp_inputfd_manager_v1 - controller object for direct fd access input devices
 * - @subpage page_iface_zwp_inputfd_seat_evdev_v1 - controller object for input devices of a seat
 * - @subpage page_iface_zwp_inputfd_device_evdev_v1 - evdev-compatible inputfd device
 * @section page_copyright_inputfd_unstable_v1 Copyright
 * <pre>
 *
 * Copyright 2017 Â© Red Hat, Inc.
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation files
 * (the "Software"), to deal in the Software without restriction,
 * including without limitation the rights to use, copy, modify, merge,
 * publish, distribute, sublicense, and/or sell copies of the Software,
 * and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the
 * next paragraph) shall be included in all copies or substantial
 * portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT.  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 * </pre>
 */
struct wl_seat;
struct wl_surface;
struct zwp_inputfd_device_evdev_v1;
struct zwp_inputfd_manager_v1;
struct zwp_inputfd_seat_evdev_v1;

/**
 * @page page_iface_zwp_inputfd_manager_v1 zwp_inputfd_manager_v1
 * @section page_iface_zwp_inputfd_manager_v1_desc Description
 *
 * An object that provides access to the input devices available for
 * direct fd access on this system. All input devices are associated with
 * a seat, to get access to the actual devices use
 * wp_inputfd_manager.get_seat_evdev.
 * @section page_iface_zwp_inputfd_manager_v1_api API
 * See @ref iface_zwp_inputfd_manager_v1.
 */
/**
 * @defgroup iface_zwp_inputfd_manager_v1 The zwp_inputfd_manager_v1 interface
 *
 * An object that provides access to the input devices available for
 * direct fd access on this system. All input devices are associated with
 * a seat, to get access to the actual devices use
 * wp_inputfd_manager.get_seat_evdev.
 */
extern const struct wl_interface zwp_inputfd_manager_v1_interface;
/**
 * @page page_iface_zwp_inputfd_seat_evdev_v1 zwp_inputfd_seat_evdev_v1
 * @section page_iface_zwp_inputfd_seat_evdev_v1_desc Description
 *
 * An object that provides access to the input devices available on this
 * seat via an evdev-compatible file descriptor. After binding to this
 * interface, the compositor immediately sends a set of
 * wp_inputfd_seat_evdev.device_added events for currently available
 * devices and later whenever a new device becomes available.
 * @section page_iface_zwp_inputfd_seat_evdev_v1_api API
 * See @ref iface_zwp_inputfd_seat_evdev_v1.
 */
/**
 * @defgroup iface_zwp_inputfd_seat_evdev_v1 The zwp_inputfd_seat_evdev_v1 interface
 *
 * An object that provides access to the input devices available on this
 * seat via an evdev-compatible file descriptor. After binding to this
 * interface, the compositor immediately sends a set of
 * wp_inputfd_seat_evdev.device_added events for currently available
 * devices and later whenever a new device becomes available.
 */
extern const struct wl_interface zwp_inputfd_seat_evdev_v1_interface;
/**
 * @page page_iface_zwp_inputfd_device_evdev_v1 zwp_inputfd_device_evdev_v1
 * @section page_iface_zwp_inputfd_device_evdev_v1_desc Description
 *
 * The wp_inputfd_device_evdev interface represents one device node
 * in the Linux kernel evdev interface. The fd passed to the client
 * supports the ioctls and read/write commands of that interface. The
 * protocol makes no guarantees which ioctls are available on the fd,
 * this decision is made by the kernel.
 *
 * A device has a number of static characteristics, e.g. device
 * name and pid/vid. These capabilities are sent in an event sequence
 * immediately after the wp_inputfd_seat.device_added event. This initial
 * event sequence is terminated by a wp_inputfd_device_evdev.done event. This
 * sequence is sent only once and always before the first
 * wp_inputfd_device.focus_in event.
 *
 * A device is the representation of a logical device as exposed by the
 * underlying system and may only represent parts of a single physical
 * input device. It is the client's task to identify the device as part
 * of a physical device and to group the logical devices together as
 * appropriate.
 * @section page_iface_zwp_inputfd_device_evdev_v1_api API
 * See @ref iface_zwp_inputfd_device_evdev_v1.
 */
/**
 * @defgroup iface_zwp_inputfd_device_evdev_v1 The zwp_inputfd_device_evdev_v1 interface
 *
 * The wp_inputfd_device_evdev interface represents one device node
 * in the Linux kernel evdev interface. The fd passed to the client
 * supports the ioctls and read/write commands of that interface. The
 * protocol makes no guarantees which ioctls are available on the fd,
 * this decision is made by the kernel.
 *
 * A device has a number of static characteristics, e.g. device
 * name and pid/vid. These capabilities are sent in an event sequence
 * immediately after the wp_inputfd_seat.device_added event. This initial
 * event sequence is terminated by a wp_inputfd_device_evdev.done event. This
 * sequence is sent only once and always before the first
 * wp_inputfd_device.focus_in event.
 *
 * A device is the representation of a logical device as exposed by the
 * underlying system and may only represent parts of a single physical
 * input device. It is the client's task to identify the device as part
 * of a physical device and to group the logical devices together as
 * appropriate.
 */
extern const struct wl_interface zwp_inputfd_device_evdev_v1_interface;

/**
 * @ingroup iface_zwp_inputfd_manager_v1
 * @struct zwp_inputfd_manager_v1_interface
 */
struct zwp_inputfd_manager_v1_interface {
	/**
	 * get the evdev seat for receiving device notifications
	 *
	 * Get the wp_inputfd_seat_evdev object for the given seat. This
	 * object provides access to all exposed devices in this seat via
	 * evdev-compatible file descriptors.
	 *
	 * The decision which device is available through this interface is
	 * made by the compositor. The protocol makes no guarantees whether
	 * a specific device is available through this interface.
	 * @param seat The wl_seat object to retrieve the input devices for
	 */
	void (*get_seat_evdev)(struct wl_client *client,
			       struct wl_resource *resource,
			       uint32_t inputfd_seat,
			       struct wl_resource *seat);
	/**
	 * release the memory for the inputfd manager object
	 *
	 * Destroy the wp_inputfd_manager object. Objects created from
	 * this object are unaffected and should be destroyed separately.
	 */
	void (*destroy)(struct wl_client *client,
			struct wl_resource *resource);
};


/**
 * @ingroup iface_zwp_inputfd_manager_v1
 */
#define ZWP_INPUTFD_MANAGER_V1_GET_SEAT_EVDEV_SINCE_VERSION 1
/**
 * @ingroup iface_zwp_inputfd_manager_v1
 */
#define ZWP_INPUTFD_MANAGER_V1_DESTROY_SINCE_VERSION 1

/**
 * @ingroup iface_zwp_inputfd_seat_evdev_v1
 * @struct zwp_inputfd_seat_evdev_v1_interface
 */
struct zwp_inputfd_seat_evdev_v1_interface {
	/**
	 * release the memory for the inputfd seat object
	 *
	 * Destroy the wp_inputfd_seat_evdev object. Objects created from
	 * this object are unaffected and should be destroyed separately.
	 */
	void (*destroy)(struct wl_client *client,
			struct wl_resource *resource);
};

#define ZWP_INPUTFD_SEAT_EVDEV_V1_DEVICE_ADDED 0

/**
 * @ingroup iface_zwp_inputfd_seat_evdev_v1
 */
#define ZWP_INPUTFD_SEAT_EVDEV_V1_DEVICE_ADDED_SINCE_VERSION 1

/**
 * @ingroup iface_zwp_inputfd_seat_evdev_v1
 */
#define ZWP_INPUTFD_SEAT_EVDEV_V1_DESTROY_SINCE_VERSION 1

/**
 * @ingroup iface_zwp_inputfd_seat_evdev_v1
 * Sends an device_added event to the client owning the resource.
 * @param resource_ The client's resource
 * @param id the newly added device
 */
static inline void
zwp_inputfd_seat_evdev_v1_send_device_added(struct wl_resource *resource_, struct wl_resource *id)
{
	wl_resource_post_event(resource_, ZWP_INPUTFD_SEAT_EVDEV_V1_DEVICE_ADDED, id);
}

/**
 * @ingroup iface_zwp_inputfd_device_evdev_v1
 * @struct zwp_inputfd_device_evdev_v1_interface
 */
struct zwp_inputfd_device_evdev_v1_interface {
	/**
	 * destroy the inputfd object
	 *
	 * This destroys the client's resource for this inputfd object.
	 */
	void (*destroy)(struct wl_client *client,
			struct wl_resource *resource);
};

#define ZWP_INPUTFD_DEVICE_EVDEV_V1_NAME 0
#define ZWP_INPUTFD_DEVICE_EVDEV_V1_USB_ID 1
#define ZWP_INPUTFD_DEVICE_EVDEV_V1_DONE 2
#define ZWP_INPUTFD_DEVICE_EVDEV_V1_REMOVED 3
#define ZWP_INPUTFD_DEVICE_EVDEV_V1_FOCUS_IN 4
#define ZWP_INPUTFD_DEVICE_EVDEV_V1_FOCUS_OUT 5

/**
 * @ingroup iface_zwp_inputfd_device_evdev_v1
 */
#define ZWP_INPUTFD_DEVICE_EVDEV_V1_NAME_SINCE_VERSION 1
/**
 * @ingroup iface_zwp_inputfd_device_evdev_v1
 */
#define ZWP_INPUTFD_DEVICE_EVDEV_V1_USB_ID_SINCE_VERSION 1
/**
 * @ingroup iface_zwp_inputfd_device_evdev_v1
 */
#define ZWP_INPUTFD_DEVICE_EVDEV_V1_DONE_SINCE_VERSION 1
/**
 * @ingroup iface_zwp_inputfd_device_evdev_v1
 */
#define ZWP_INPUTFD_DEVICE_EVDEV_V1_REMOVED_SINCE_VERSION 1
/**
 * @ingroup iface_zwp_inputfd_device_evdev_v1
 */
#define ZWP_INPUTFD_DEVICE_EVDEV_V1_FOCUS_IN_SINCE_VERSION 1
/**
 * @ingroup iface_zwp_inputfd_device_evdev_v1
 */
#define ZWP_INPUTFD_DEVICE_EVDEV_V1_FOCUS_OUT_SINCE_VERSION 1

/**
 * @ingroup iface_zwp_inputfd_device_evdev_v1
 */
#define ZWP_INPUTFD_DEVICE_EVDEV_V1_DESTROY_SINCE_VERSION 1

/**
 * @ingroup iface_zwp_inputfd_device_evdev_v1
 * Sends an name event to the client owning the resource.
 * @param resource_ The client's resource
 * @param name the device name
 */
static inline void
zwp_inputfd_device_evdev_v1_send_name(struct wl_resource *resource_, const char *name)
{
	wl_resource_post_event(resource_, ZWP_INPUTFD_DEVICE_EVDEV_V1_NAME, name);
}

/**
 * @ingroup iface_zwp_inputfd_device_evdev_v1
 * Sends an usb_id event to the client owning the resource.
 * @param resource_ The client's resource
 * @param vid USB vendor id
 * @param pid USB product id
 */
static inline void
zwp_inputfd_device_evdev_v1_send_usb_id(struct wl_resource *resource_, uint32_t vid, uint32_t pid)
{
	wl_resource_post_event(resource_, ZWP_INPUTFD_DEVICE_EVDEV_V1_USB_ID, vid, pid);
}

/**
 * @ingroup iface_zwp_inputfd_device_evdev_v1
 * Sends an done event to the client owning the resource.
 * @param resource_ The client's resource
 */
static inline void
zwp_inputfd_device_evdev_v1_send_done(struct wl_resource *resource_)
{
	wl_resource_post_event(resource_, ZWP_INPUTFD_DEVICE_EVDEV_V1_DONE);
}

/**
 * @ingroup iface_zwp_inputfd_device_evdev_v1
 * Sends an removed event to the client owning the resource.
 * @param resource_ The client's resource
 */
static inline void
zwp_inputfd_device_evdev_v1_send_removed(struct wl_resource *resource_)
{
	wl_resource_post_event(resource_, ZWP_INPUTFD_DEVICE_EVDEV_V1_REMOVED);
}

/**
 * @ingroup iface_zwp_inputfd_device_evdev_v1
 * Sends an focus_in event to the client owning the resource.
 * @param resource_ The client's resource
 * @param fd file descriptor to the device
 * @param surface The current surface that has the device's focus
 */
static inline void
zwp_inputfd_device_evdev_v1_send_focus_in(struct wl_resource *resource_, uint32_t serial, int32_t fd, struct wl_resource *surface)
{
	wl_resource_post_event(resource_, ZWP_INPUTFD_DEVICE_EVDEV_V1_FOCUS_IN, serial, fd, surface);
}

/**
 * @ingroup iface_zwp_inputfd_device_evdev_v1
 * Sends an focus_out event to the client owning the resource.
 * @param resource_ The client's resource
 */
static inline void
zwp_inputfd_device_evdev_v1_send_focus_out(struct wl_resource *resource_)
{
	wl_resource_post_event(resource_, ZWP_INPUTFD_DEVICE_EVDEV_V1_FOCUS_OUT);
}

#ifdef  __cplusplus
}
#endif

#endif
