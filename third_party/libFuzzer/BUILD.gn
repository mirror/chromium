# Copyright 2016 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/config/sanitizers/sanitizers.gni")

template("fuzzing_engine") {
  source_set(target_name) {
    sources = invoker.sources

    # Engine should be compiled without coverage (infinite loop in trace_cmp).
    configs -= [ "//build/config/sanitizers:default_sanitizer_flags" ]
    configs -= [ "//build/config/coverage:coverage" ]

    # Coverage build is slower than regular fuzzing build. Due to that, it's not
    # intended to be used for fuzzing. Sanitizer coverage is needed for fuzzing.
    # We do not use it for coverage build, beucase it adds unnecessary overhead.
    if (!use_clang_coverage) {
      configs +=
          [ "//build/config/sanitizers:default_sanitizer_flags_but_coverage" ]
    }

  }
}

fuzzing_engine("libfuzzer") {
  sources = [
    "src/FuzzerClangCounters.cpp",
    "src/FuzzerCrossOver.cpp",
    "src/FuzzerDriver.cpp",
    "src/FuzzerExtFunctionsDlsym.cpp",
    "src/FuzzerExtFunctionsDlsymWin.cpp",
    "src/FuzzerExtFunctionsWeak.cpp",
    "src/FuzzerExtFunctionsWeakAlias.cpp",
    "src/FuzzerExtraCounters.cpp",
    "src/FuzzerIO.cpp",
    "src/FuzzerIOPosix.cpp",
    "src/FuzzerIOWindows.cpp",
    "src/FuzzerLoop.cpp",
    "src/FuzzerMain.cpp",
    "src/FuzzerMerge.cpp",
    "src/FuzzerMutate.cpp",
    "src/FuzzerSHA1.cpp",
    "src/FuzzerShmemPosix.cpp",
    "src/FuzzerShmemWindows.cpp",
    "src/FuzzerTracePC.cpp",
    "src/FuzzerUtil.cpp",
    "src/FuzzerUtilDarwin.cpp",
    "src/FuzzerUtilLinux.cpp",
    "src/FuzzerUtilPosix.cpp",
    "src/FuzzerUtilWindows.cpp",
  ]
}

fuzzing_engine("afl_driver") {
  sources = [
    "src/afl/afl_driver.cpp",
  ]
}
