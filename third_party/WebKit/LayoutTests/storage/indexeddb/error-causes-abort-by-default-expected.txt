CONSOLE ERROR: line 1: ConstraintError: Key already exists in the object store.
CONSOLE ERROR: line 1: ConstraintError: Key already exists in the object store.
Verify that a transaction with an error aborts unless preventDefault() is called.

On success, you will see a series of "PASS" messages, followed by "TEST COMPLETE".


dbname = "error-causes-abort-by-default.html"
indexedDB.deleteDatabase(dbname)
indexedDB.open(dbname)
setVersionSuccess():
trans = event.target.transaction
PASS trans is non-null.
db.createObjectStore('storeName', null)

Test: prevent the default event behavior prevents the transaction from aborting
trans = db.transaction(['storeName'], 'readwrite')
trans.onabort = unexpectedAbortCallback
trans.oncomplete = transactionCompleted
store = trans.objectStore('storeName')
store.add({x: 'value', y: 'zzz'}, 'key')
event.target.source.add({x: 'value', y: 'zzz'}, 'key')
event.preventDefault()
PASS Transaction completed

Test: allowing the default event behavior, which aborts the transaction
trans = db.transaction(['storeName'], 'readwrite')
trans.onabort = transactionAborted1
trans.oncomplete = unexpectedCompleteCallback
store = trans.objectStore('storeName')
store.add({x: 'value', y: 'zzz'}, 'key')
Doing nothing to prevent the default action...
PASS Transaction aborted

Test: no error handler implicitly allows allowing the default event behavior, which aborts the transaction
trans = db.transaction(['storeName'], 'readwrite')
trans.onabort = transactionAborted2
trans.oncomplete = unexpectedCompleteCallback
store = trans.objectStore('storeName')
store.add({x: 'value', y: 'zzz'}, 'key')
Omitting an onerror handler on request; transaction should abort
PASS Transaction aborted
PASS successfullyParsed is true

TEST COMPLETE

