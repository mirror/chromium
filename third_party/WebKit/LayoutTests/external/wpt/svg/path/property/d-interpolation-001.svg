<?xml version="1.0" encoding="UTF-8"?>
<svg xmlns="http://www.w3.org/2000/svg"
     xmlns:h="http://www.w3.org/1999/xhtml">
  <metadata>
    <link xmlns="http://www.w3.org/1999/xhtml" rel="help" href="https://svgwg.org/svg2-draft/paths.html#TheDProperty"/>
    <meta xmlns="http://www.w3.org/1999/xhtml" name="assert" content="d is a property"/>
  </metadata>

  <h:style id="stylesheet"/>
  <path id="target"/>
  <path id="reference"/>

  <h:script src="/resources/testharness.js"/>
  <h:script src="/resources/testharnessreport.js"/>
  <h:script src="resources/interpolation-testcommon.js"/>
  <h:script><![CDATA[
      'use strict';

      // Distinct number of path segments
      test_no_interpolation({
        property: 'd',
        from: "path('M 0 0 H 1 H 2')",
        to: "path('M 0 0 H 3')"
      });

      test_no_interpolation({
        property: 'd',
        from: "path('M 1 2 L 3 4 Z')",
        to: "none"
      });

      // Distinct segment types
      test_no_interpolation({
        property: 'd',
        from: "path('M 10 0 H 11')",
        to: "path('M 20 0 V 2')"
      });

      test_no_interpolation({
        property: 'd',
        from: "path('M 1 2 L 4 6 Z')",
        to: "path('M 1 2 H 4 V 6')"
      });

      // Exercise each segment type
      test_interpolation({
        property: 'd',
        from: "path('M 0 0 Z')",
        to: "path('M 0 0 Z')"
      }, [
        {at: -1, expect: "path('M 0 0 Z')"},
        {at: 0, expect: "path('M 0 0 Z')"},
        {at: 0.125, expect: "path('M 0 0 Z')"},
        {at: 0.875, expect: "path('M 0 0 Z')"},
        {at: 1, expect: "path('M 0 0 Z')"},
        {at: 2, expect: "path('M 0 0 Z')"}
      ]);

      test_interpolation({
        property: 'd',
        from: "path('M 20 70')",
        to: "path('M 100 30')"
      }, [
        {at: -1, expect: "path('M -60 110')"},
        {at: 0, expect: "path('M 20 70')"},
        {at: 0.125, expect: "path('M 30 65')"},
        {at: 0.875, expect: "path('M 90 35')"},
        {at: 1, expect: "path('M 100 30')"},
        {at: 2, expect: "path('M 180 -10')"}
      ]);

      test_interpolation({
        property: 'd',
        from: "path('m 20 70')",
        to: "path('m 100 30')"
      }, [
        {at: -1, expect: "path('M -60 110')"},
        {at: 0, expect: "path('M 20 70')"},
        {at: 0.125, expect: "path('M 30 65')"},
        {at: 0.875, expect: "path('M 90 35')"},
        {at: 1, expect: "path('M 100 30')"},
        {at: 2, expect: "path('M 180 -10')"}
      ]);

      test_interpolation({
        property: 'd',
        from: "path('m 100 200 L 120 270')",
        to: "path('m 100 200 L 200 230')"
      }, [
        {at: -1, expect: "path('M 100 200 L 40 310')"},
        {at: 0, expect: "path('M 100 200 L 120 270')"},
        {at: 0.125, expect: "path('M 100 200 L 130 265')"},
        {at: 0.875, expect: "path('M 100 200 L 190 235')"},
        {at: 1, expect: "path('M 100 200 L 200 230')"},
        {at: 2, expect: "path('M 100 200 L 280 190')"}
      ]);

      test_interpolation({
        property: 'd',
        from: "path('m 100 200 l 20 70')",
        to: "path('m 100 200 l 100 30')"
      }, [
        {at: -1, expect: "path('M 100 200 L 40 310')"},
        {at: 0, expect: "path('M 100 200 L 120 270')"},
        {at: 0.125, expect: "path('M 100 200 L 130 265')"},
        {at: 0.875, expect: "path('M 100 200 L 190 235')"},
        {at: 1, expect: "path('M 100 200 L 200 230')"},
        {at: 2, expect: "path('M 100 200 L 280 190')"}
      ]);
  ]]></h:script>
</svg>
