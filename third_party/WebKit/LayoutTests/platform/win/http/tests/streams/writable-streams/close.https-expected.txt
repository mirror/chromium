This is a testharness.js-based test.
Harness Error. harness_status.status = 1 , harness_status.message = 11 duplicate test names: "fulfillment value of ws.close() call must be undefined even if the underlying sink returns a non-undefined value", "when sink calls error asynchronously while closing, the stream should become errored", "when sink calls error synchronously while closing, the stream should become errored", "when close is called on a WritableStream in writable state, ready should return a fulfilled promise", "when close is called on a WritableStream in waiting state, ready promise should be fulfilled", "when close is called on a WritableStream in waiting state, ready should be fulfilled immediately even if close takes a long time", "returning a thenable from close() should work", "releaseLock() should not change the result of sync close()", "releaseLock() should not change the result of async close()", "close() should set state to CLOSED even if writer has detached", "the promise returned by async abort during close should resolve"
PASS fulfillment value of ws.close() call must be undefined even if the underlying sink returns a non-undefined value 
PASS when sink calls error asynchronously while closing, the stream should become errored 
PASS when sink calls error synchronously while closing, the stream should become errored 
PASS when close is called on a WritableStream in writable state, ready should return a fulfilled promise 
PASS when close is called on a WritableStream in waiting state, ready promise should be fulfilled 
PASS when close is called on a WritableStream in waiting state, ready should be fulfilled immediately even if close takes a long time 
PASS returning a thenable from close() should work 
PASS releaseLock() should not change the result of sync close() 
PASS releaseLock() should not change the result of async close() 
PASS close() should set state to CLOSED even if writer has detached 
PASS the promise returned by async abort during close should resolve 
PASS Untitled 
PASS fulfillment value of ws.close() call must be undefined even if the underlying sink returns a non-undefined value 
PASS when sink calls error asynchronously while closing, the stream should become errored 
PASS when sink calls error synchronously while closing, the stream should become errored 
PASS when close is called on a WritableStream in writable state, ready should return a fulfilled promise 
PASS when close is called on a WritableStream in waiting state, ready promise should be fulfilled 
PASS when close is called on a WritableStream in waiting state, ready should be fulfilled immediately even if close takes a long time 
PASS returning a thenable from close() should work 
PASS releaseLock() should not change the result of sync close() 
PASS releaseLock() should not change the result of async close() 
PASS close() should set state to CLOSED even if writer has detached 
PASS the promise returned by async abort during close should resolve 
PASS fulfillment value of ws.close() call must be undefined even if the underlying sink returns a non-undefined value 
PASS when sink calls error asynchronously while closing, the stream should become errored 
PASS when sink calls error synchronously while closing, the stream should become errored 
PASS when close is called on a WritableStream in writable state, ready should return a fulfilled promise 
PASS when close is called on a WritableStream in waiting state, ready promise should be fulfilled 
PASS when close is called on a WritableStream in waiting state, ready should be fulfilled immediately even if close takes a long time 
PASS returning a thenable from close() should work 
PASS releaseLock() should not change the result of sync close() 
PASS releaseLock() should not change the result of async close() 
PASS close() should set state to CLOSED even if writer has detached 
PASS the promise returned by async abort during close should resolve 
PASS fulfillment value of ws.close() call must be undefined even if the underlying sink returns a non-undefined value 
PASS when sink calls error asynchronously while closing, the stream should become errored 
PASS when sink calls error synchronously while closing, the stream should become errored 
PASS when close is called on a WritableStream in writable state, ready should return a fulfilled promise 
PASS when close is called on a WritableStream in waiting state, ready promise should be fulfilled 
PASS when close is called on a WritableStream in waiting state, ready should be fulfilled immediately even if close takes a long time 
PASS returning a thenable from close() should work 
PASS releaseLock() should not change the result of sync close() 
PASS releaseLock() should not change the result of async close() 
PASS close() should set state to CLOSED even if writer has detached 
PASS the promise returned by async abort during close should resolve 
Harness: the test ran to completion.

