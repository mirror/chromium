// Copyright 2017 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module blink.mojom;

import "third_party/WebKit/public/platform/modules/fetch/fetch_api_request.mojom";
import "third_party/WebKit/public/platform/modules/fetch/fetch_api_response.mojom";
import "mojo/common/string16.mojom";
import "url/mojo/origin.mojom";

// This enum is used in histograms, so do not change the ordering and always
// append new types to the end.
// See "CacheStorageErrorType" in enums.xml.
enum CacheStorageError {
  kSuccess = 0,
  kErrorExists = 1,
  kErrorStorage = 2,
  kErrorNotFound = 3,
  kErrorQuotaExceeded = 4,
  kErrorCacheNameNotFound = 5,
  kErrorQueryTooLarge = 6,
  // TODO(cmumford): kErrorNotImplemented is deprecated. Remove use in code.
  kErrorNotImplemented = 7,
  // Add new values here.
  kLast = kErrorNotImplemented
};

union OpenResult {
  CacheStorageError status;
  //associated CacheStorageCache cache;
};

// Controls how requests are matched in the Cache API.
struct QueryParams {
  bool ignore_search;
  bool ignore_method;
  bool ignore_vary;
  string? cache_name;
};

union MatchResult {
  CacheStorageError status;
  blink.mojom.FetchAPIResponse response;
};

interface CacheStorage {
  Has(url.mojom.Origin origin, mojo.common.mojom.String16 cache_name) => (CacheStorageError result);
  Delete(url.mojom.Origin origin, mojo.common.mojom.String16 cache_name) => (CacheStorageError result);
  Keys(url.mojom.Origin origin) => (array<mojo.common.mojom.String16> keys);
  Match(url.mojom.Origin origin, blink.mojom.FetchAPIRequest request, QueryParams match_params) => (MatchResult result);
};
