// Copyright 2017 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module blink.mojom;

import "mojo/common/time.mojom";
import "services/network/public/interfaces/fetch_api.mojom";
import "storage/public/interfaces/blobs.mojom";
import "third_party/WebKit/public/platform/referrer.mojom";
import "url/mojo/url.mojom";

// Type of the context associated with a request.
enum RequestContextType {
  UNSPECIFIED,
  AUDIO,
  BEACON,
  CSP_REPORT,
  DOWNLOAD,
  EMBED,
  EVENT_SOURCE,
  FAVICON,
  FETCH,
  FONT,
  FORM,
  FRAME,
  HYPERLINK,
  IFRAME,
  IMAGE,
  IMAGE_SET,
  IMPORT,
  INTERNAL,
  LOCATION,
  MANIFEST,
  OBJECT,
  PING,
  PLUGIN,
  PREFETCH,
  SCRIPT,
  SERVICE_WORKER,
  SHARED_WORKER,
  SUBRESOURCE,
  STYLE,
  TRACK,
  VIDEO,
  WORKER,
  XML_HTTP_REQUEST,
  XSLT,
};

// Frame type of the context associated with a request.
enum RequestContextFrameType {
  AUXILIARY,
  NESTED,
  NONE,
  TOP_LEVEL,
};

// Credentials mode indicating which credentials should be included with a
// request.
enum FetchCredentialsMode {
  OMIT,
  SAME_ORIGIN,
  INCLUDE,
  PASSWORD,
};

// Whether this is a regular fetch, or a foreign fetch request.
enum ServiceWorkerFetchType {
  FETCH,
  FOREIGN_FETCH,
};

enum ResponseError {
  Unknown,
  PromiseRejected,
  DefaultPrevented,
  NoV8Instance,
  ResponseTypeError,
  ResponseTypeOpaque,
  ResponseTypeNotBasicOrDefault,
  BodyUsed,
  ResponseTypeOpaqueForClientRequest,
  ResponseTypeOpaqueRedirect,
  BodyLocked,
  NoForeignFetchResponse,
  ForeignFetchHeadersWithoutOrigin,
  ForeignFetchMismatchedOrigin,
  RedirectedResponseForNotFollowRequest,
  DataPipeCreationFailed,
};

struct FetchAPIRequest {
  network.mojom.FetchRequestMode mode;
  bool is_main_resource_load;
  RequestContextType request_context_type;
  RequestContextFrameType frame_type;
  url.mojom.Url url;
  string method;
  map<string, string> headers;
  string? blob_uuid;
  uint64 blob_size;
  storage.mojom.Blob? blob;
  Referrer referrer;
  FetchCredentialsMode credentials_mode;
  network.mojom.FetchRedirectMode redirect_mode;
  string? integrity;
  string? client_id;
  bool is_reload;
  ServiceWorkerFetchType fetch_type;
};

struct FetchAPIResponse {
  array<url.mojom.Url> url_list;
  int32 status_code;
  string status_text;
  network.mojom.FetchResponseType response_type;
  map<string, string> headers;
  string? blob_uuid;
  uint64 blob_size;
  ResponseError error;
  mojo.common.mojom.Time response_time;
  string cache_storage_cache_name;
  array<string> cors_exposed_header_names;
};
