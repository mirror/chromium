// Copyright 2017 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module password_manager.mojom;

import "url/mojo/origin.mojom";
import "url/mojo/url.mojom";

enum CredentialMediationRequirement {
  kSilent,
  kOptional,
  kRequired
};

enum CredentialManagerError {
  SUCCESS,
  DISABLED,
  PENDINGREQUEST,
  PASSWORDSTOREUNAVAILABLE,
  UNKNOWN
};

union Credential {
  PasswordCredential password_credential;
  FederatedCredential federated_credential;
};

struct PasswordCredential {
  string id;
  string? name;
  url.mojom.Url? icon;
  string password;
};

struct FederatedCredential {
  string id;
  string? name;
  url.mojom.Url? icon;
  url.mojom.Origin federation;
};

interface CredentialManager {
  // Store credential. For navigator.credentials.store().
  Store(Credential credential) => ();

  // Require user mediation. For navigator.credentials.preventSilentAccess().
  PreventSilentAccess() => ();

  // Get Credential. For navigator.credentials.get().
  // The result callback will return a non-null and valid Credential
  // if succeeded, or null with a CredentialManagerError if failed.
  Get(CredentialMediationRequirement mediation,
      bool include_passwords,
      array<url.mojom.Url> federations)
      => (CredentialManagerError error, Credential? credential);
};
