// Copyright 2017 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

{% from 'templates/macros.tmpl' import source_files_for_generated_file %}
{{source_files_for_generated_file(template_file, input_files)}}
// clang-format off

#ifndef CSSUnresolvedProperty_h
#define CSSUnresolvedProperty_h

#include "core/CSSPropertyNames.h"
#include "platform/wtf/text/WTFString.h"

namespace blink {

class CSSUnresolvedProperty {
 public:
  CORE_EXPORT static const CSSUnresolvedProperty& Get(CSSPropertyID);

  explicit constexpr CSSUnresolvedProperty() {}

  // For backwards compatibility when passing around CSSUnresolvedProperty references.
  // In case we need to call a function that hasn't been converted to using
  // property classes yet.
  virtual CSSPropertyID PropertyID() const {
    NOTREACHED();
    return CSSPropertyInvalid;
  }
  bool IDEquals(CSSPropertyID id) const { return CSSPropertyID() == id; }
  virtual bool IsResolvedProperty() const { return false; }
  virtual const char* GetPropertyName() const {
    NOTREACHED();
    return nullptr;
  }
  virtual const WTF::AtomicString& GetPropertyNameAtomicString() const {
    NOTREACHED();
    return *(new WTF::AtomicString());
  }
  WTF::String GetPropertyNameString() const {
    // We share the StringImpl with the AtomicStrings.
    return GetPropertyNameAtomicString().GetString();
  }


  static const CSSUnresolvedProperty& GetCSSPropertyVariableInternal();
  {% for property_class_data in property_classes_by_property_id %}
  static const CSSUnresolvedProperty& Get{{property_class_data.property_id}}Internal();
  {% endfor %}

 protected:
  static const CSSUnresolvedProperty& GetNonAliasProperty(CSSPropertyID);
};

}  // namespace blink

#endif  // CSSUnresolvedProperty_h
