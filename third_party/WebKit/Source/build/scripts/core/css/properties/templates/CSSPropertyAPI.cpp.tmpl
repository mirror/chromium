// Copyright 2017 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

{% from 'templates/macros.tmpl' import source_files_for_generated_file %}
{{source_files_for_generated_file(template_file, input_files)}}
// clang-format off

#include "core/css/properties/CSSPropertyAPI.h"

{% for api_class_data in api_classes_by_property_id %}
#include "core/css/properties/{{api_class_data.classname}}.h"
{% endfor %}

namespace blink {

namespace {

#if defined(OS_WIN) && defined(COMPILER_MSVC)
// TODO(meade): Delete the Windows+MSVC-specific code when we stop compiling
// blink with MSVC. In the meantime, this special implementation is required
// because MSVC doesn't initialize vtables for objects defined as constexpr.
// Not using constexpr is considerably slower, however we don't ship any
// real builds using MSVC, and this is just to avoid crashing bots that
// still need to use MSVC (e.g. for the dEQP tests, which use exceptions).
// See http://crbug.com/753010.
#define STATIC_CONSTEXPR static const
#define STATIC_CONSTEXPR_CONST static const
{% for _, property_id, classname in api_classes_by_property_id %}
STATIC_CONSTEXPR {{classname}}* api_{{property_id.lower()}}() {
  STATIC_CONSTEXPR {{classname}} api({{property_id}});
  return &api;
}
{% endfor %}

const CSSPropertyAPI& GetAPI(CSSPropertyID id) {
  STATIC_CONSTEXPR_CONST CSSPropertyAPI* const property_apis[] = {
    {% for api_class_data in api_classes_by_property_id %}
    api_{{api_class_data.property_id.lower()}}(),  // {{api_class_data.property_id}}
    {% endfor %}
  };
  // Subtract 1 because CSSPropertyInvalid does not appear in the array.
  return *property_apis[id - 1];
}
#undef STATIC_CONSTEXPR
#undef STATIC_CONSTEXPR_CONST
#else
#define STATIC_CONSTEXPR static constexpr
#define STATIC_CONSTEXPR_CONST static constexpr const
{% for _, property_id, classname in api_classes_by_property_id %}
STATIC_CONSTEXPR {{classname}} api_{{property_id.lower()}}({{property_id}});
{% endfor %}

const CSSPropertyAPI& GetAPI(CSSPropertyID id) {
  STATIC_CONSTEXPR_CONST CSSPropertyAPI* const property_apis[] = {
    {% for api_class_data in api_classes_by_property_id %}
    &api_{{api_class_data.property_id.lower()}},  // {{api_class_data.property_id}}
    {% endfor %}
  };
  // Subtract 1 because CSSPropertyInvalid does not appear in the array.
  return *property_apis[id - 1];
}
#undef STATIC_CONSTEXPR
#undef STATIC_CONSTEXPR_CONST
#endif

} // namespace

#if defined(OS_WIN) && defined(COMPILER_MSVC)
{% for api_class_data in api_classes_by_property_id %}
const CSSPropertyAPI& Get{{api_class_data.property_id}}API() {
  return *api_{{api_class_data.property_id.lower()}}();
}
{% endfor %}
#else
{% for api_class_data in api_classes_by_property_id %}
const CSSPropertyAPI& Get{{api_class_data.property_id}}API() {
  return api_{{api_class_data.property_id.lower()}};
}
{% endfor %}
#endif

const CSSPropertyAPI& CSSPropertyAPI::Get(CSSPropertyID id) {
  DCHECK_NE(id, CSSPropertyInvalid);
  DCHECK_LE(id, {{last_property_id}});  // last_property_id
  return GetAPI(id);
}

}  // namespace blink

