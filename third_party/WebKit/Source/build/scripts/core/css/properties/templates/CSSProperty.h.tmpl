// Copyright 2017 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

{% from 'templates/macros.tmpl' import source_files_for_generated_file %}
{{source_files_for_generated_file(template_file, input_files)}}
// clang-format off

#ifndef CSSProperty_h
#define CSSProperty_h

#include "core/CSSPropertyNames.h"
#include "platform/heap/HeapAllocator.h"
#include "platform/text/TextDirection.h"
#include "platform/text/WritingMode.h"

namespace blink {

class CSSParserContext;
class CSSParserLocalContext;
class CSSParserTokenRange;
class StylePropertyShorthand;
class LayoutObject;
class ComputedStyle;
class Longhand;
class Shorthand;

enum PhysicalBoxSide { kTopSide, kRightSide, kBottomSide, kLeftSide };

class CSSProperty {
 public:
  CORE_EXPORT static const CSSProperty& Get(CSSPropertyID);

  constexpr CSSProperty(CSSPropertyID id) : id_(id) {}

  // For backwards compatibility when passing around CSSProperty references.
  // In case we need to call a function that hasn't been converted to using
  // property classes yet.
  CSSPropertyID PropertyID() const { return id_; }

  virtual bool IsInterpolable() const { return false; }
  virtual bool IsInherited() const { return false; }
  virtual bool IsRepeated() const { return false; }
  virtual char RepetitionSeparator() const {
    NOTREACHED();
    return 0;
  }
  virtual bool IsDescriptor() const { return false; }
  virtual bool SupportsPercentage() const { return false; }
  virtual bool IsProperty() const { return true; }
  virtual bool IsEnabled() const { return true; }
  virtual bool IsAffectedByAll() const { return IsEnabled() && IsProperty(); }
  virtual bool IsLayoutDependent(const ComputedStyle* style, LayoutObject* layout_object) const { return false; }
  virtual CSSPropertyID ResolveDirectionAwareProperty(
      TextDirection,
      WritingMode) const {
    return PropertyID();
  }
  virtual bool IsShorthand() const { return false; }
  bool IsLonghand() const { return !IsShorthand(); }
  static void FilterEnabledCSSPropertiesIntoVector(const CSSPropertyID*,
                                                   size_t length,
                                                   Vector<CSSPropertyID>&);

 protected:
  static const StylePropertyShorthand& BorderDirections();
  static CSSPropertyID ResolveAfterToPhysicalProperty(
      TextDirection,
      WritingMode,
      const StylePropertyShorthand&);
  static CSSPropertyID ResolveBeforeToPhysicalProperty(
      TextDirection,
      WritingMode,
      const StylePropertyShorthand&);
  static CSSPropertyID ResolveEndToPhysicalProperty(
      TextDirection,
      WritingMode,
      const StylePropertyShorthand&);
  static CSSPropertyID ResolveStartToPhysicalProperty(
      TextDirection,
      WritingMode,
      const StylePropertyShorthand&);

 private:
  const CSSPropertyID id_;
};

// TODO(rjwright): Split these into CSSLonghand and CSSShorthand classes?
{% for property_class_data in property_classes_by_property_id %}
  {% if property_class_data.superclass != None %}
const {{property_class_data.superclass}}& Get{{property_class_data.property_id}}();
  {% else %}
const CSSProperty& Get{{property_class_data.property_id}}();
  {% endif %}
{% endfor %}

}  // namespace blink

#endif  // CSSProperty_h
