// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py.
// DO NOT MODIFY!

// This file has been generated from the Jinja2 template in
// third_party/WebKit/Source/bindings/templates/callback_function.cpp.tmpl

// clang-format off

#include "VoidCallbackFunctionModules.h"

#include "bindings/core/v8/ExceptionState.h"
#include "bindings/core/v8/ScriptState.h"
#include "bindings/core/v8/ToV8.h"
#include "bindings/core/v8/V8Binding.h"
#include "core/dom/ExecutionContext.h"
#include "wtf/Assertions.h"

namespace blink {

// static
VoidCallbackFunctionModules* VoidCallbackFunctionModules::create(ScriptState* scriptState, v8::Local<v8::Value> callback) {
  if (isUndefinedOrNull(callback))
    return nullptr;
  return new VoidCallbackFunctionModules(scriptState, v8::Local<v8::Function>::Cast(callback));
}

VoidCallbackFunctionModules::VoidCallbackFunctionModules(ScriptState* scriptState, v8::Local<v8::Function> callback)
    : m_scriptState(scriptState),
    m_callback(scriptState->isolate(), this, callback) {
  DCHECK(!m_callback.isEmpty());
}

DEFINE_TRACE_WRAPPERS(VoidCallbackFunctionModules) {
  visitor->traceWrappers(m_callback.cast<v8::Value>());
}

bool VoidCallbackFunctionModules::call(ScriptWrappable* scriptWrappable) {
  if (m_callback.isEmpty())
    return false;

  if (!m_scriptState->contextIsValid())
    return false;

  ExecutionContext* context = m_scriptState->getExecutionContext();
  DCHECK(context);
  if (context->isContextSuspended() || context->isContextDestroyed())
    return false;

  // TODO(bashi): Make sure that using DummyExceptionStateForTesting is OK.
  // crbug.com/653769
  DummyExceptionStateForTesting exceptionState;
  ScriptState::Scope scope(m_scriptState.get());
  v8::Isolate* isolate = m_scriptState->isolate();

  v8::Local<v8::Value> thisValue = ToV8(
      scriptWrappable,
      m_scriptState->context()->Global(),
      isolate);

  v8::Local<v8::Value> *argv = nullptr;
  v8::TryCatch exceptionCatcher(isolate);
  exceptionCatcher.SetVerbose(true);

  v8::Local<v8::Value> v8ReturnValue;
  if (!V8ScriptRunner::callFunction(m_callback.newLocal(isolate),
                                    context,
                                    thisValue,
                                    0,
                                    argv,
                                    isolate).ToLocal(&v8ReturnValue)) {
    return false;
  }

  return true;
}

VoidCallbackFunctionModules* NativeValueTraits<VoidCallbackFunctionModules>::nativeValue(v8::Isolate* isolate, v8::Local<v8::Value> value, ExceptionState& exceptionState) {
  return VoidCallbackFunctionModules::create(ScriptState::current(isolate), value);
}

}  // namespace blink
