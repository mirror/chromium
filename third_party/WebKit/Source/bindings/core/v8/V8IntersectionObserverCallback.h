// Copyright 2015 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file has been auto-generated by code_generator_v8.py. DO NOT MODIFY!

#ifndef V8IntersectionObserverCallback_h
#define V8IntersectionObserverCallback_h

#include "bindings/core/v8/ActiveDOMCallback.h"
#include "bindings/core/v8/DOMWrapperWorld.h"
#include "bindings/core/v8/ScopedPersistent.h"
#include "core/CoreExport.h"
#include "core/dom/IntersectionObserverCallback.h"

namespace blink {

class V8IntersectionObserverCallback final : public IntersectionObserverCallback, public ActiveDOMCallback {
    WILL_BE_USING_GARBAGE_COLLECTED_MIXIN(V8IntersectionObserverCallback);
public:
    static PassOwnPtrWillBeRawPtr<V8IntersectionObserverCallback> create(v8::Local<v8::Function> callback, v8::Local<v8::Object> owner, ScriptState* scriptState)
    {
        return adoptPtrWillBeNoop(new V8IntersectionObserverCallback(callback, owner, scriptState));
    }

    ~V8IntersectionObserverCallback() override;

    DECLARE_VIRTUAL_TRACE();

    void handleEvent(WillBeHeapVector<RefPtrWillBeMember<IntersectionObserverEntry>>&, IntersectionObserver*) override;
    ExecutionContext* executionContext() const override { return ContextLifecycleObserver::executionContext(); }
private:
    CORE_EXPORT V8IntersectionObserverCallback(v8::Local<v8::Function>, v8::Local<v8::Object>, ScriptState*);

    static void setWeakCallback(const v8::WeakCallbackInfo<V8IntersectionObserverCallback>&);

    ScopedPersistent<v8::Function> m_callback;
    RefPtr<ScriptState> m_scriptState;
};

}
#endif // V8IntersectionObserverCallback_h
