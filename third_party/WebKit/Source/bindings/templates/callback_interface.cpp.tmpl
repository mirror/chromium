{% filter format_blink_cpp_source_code %}

{% include 'copyright_block.txt' %}

#include "{{this_include_header_name}}"

{% for filename in cpp_includes %}
#include "{{filename}}"
{% endfor %}

namespace blink {

{% for method in methods %}

{% set return_type = 'void' if method.cpp_type == 'void' else 'v8::Maybe<%s>' % method.cpp_type %}
{% set return_nothing = 'return' if method.cpp_type == 'void' else 'return v8::Nothing<%s>()' % method.cpp_type %}

{{return_type}} {{v8_class}}::{{method.name}}({{method.argument_declarations | join(', ')}}) {
  if (!IsCallbackInterfaceRunnable(CallbackRelevantContext(),
                                   IncumbentContext())) {
    V8ThrowException::ThrowError(
        GetIsolate(),
        ExceptionMessages::FailedToExecute(
            "{{method.name}}",
            "{{cpp_class}}",
            "The provided callback is no longer runnable."));
    {{return_nothing}};
  }

  ScriptState::Scope scope(CallbackRelevantContext());

  v8::Local<v8::Object> argument_creation_context =
      CallbackRelevantContext()->GetContext()->Global();
  ALLOW_UNUSED_LOCAL(argument_creation_context);
  {% for argument in method.arguments %}
  v8::Local<v8::Value> {{argument.handle}} = {{argument.cpp_value_to_v8_value}};
  {% endfor %}
  {% if method.arguments %}
  v8::Local<v8::Value> argv[] = { {{method.arguments | join(', ', 'handle')}} };
  {% else %}
  {# Empty array initializers are illegal, and don\'t compile in MSVC. #}
  v8::Local<v8::Value> *argv = 0;
  {% endif %}

  v8::Isolate* isolate = GetIsolate();

  v8::TryCatch exceptionCatcher(isolate);
  exceptionCatcher.SetVerbose(true);

  v8::MaybeLocal<v8::Value> maybe_call_result =
      V8ScriptRunner::CallFunction(
          CallbackObject().As<v8::Function>(),
          ExecutionContext::From(CallbackRelevantContext()),
          v8::Undefined(isolate),
          {{method.arguments | length}},
          argv,
          isolate);

  {% if method.idl_type == 'boolean' %}
  v8::Local<v8::Value> call_result;
  if (!maybe_call_result.ToLocal(&call_result)) {
    {{return_nothing}};
  }
  ExceptionState exception_state(GetIsolate(),
                                 ExceptionState::kExecutionContext,
                                 "{{cpp_class}}",
                                 "{{method.name}}");
  bool native_result = NativeValueTraits<IDLBoolean>::NativeValue(
      isolate, call_result, exception_state);
  return exception_state.HadException() ?
      v8::Nothing<bool>() : v8::Just<bool>(native_result);
  {% else %}
  ALLOW_UNUSED_LOCAL(maybe_call_result);
  {% endif %}
}

{% endfor %}

}  // namespace blink

{% endfilter %}{# format_blink_cpp_source_code #}
