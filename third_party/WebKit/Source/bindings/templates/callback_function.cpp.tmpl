{% from 'utilities.cpp.tmpl' import v8_value_to_local_cpp_value %}
{% filter format_blink_cpp_source_code %}

{% include 'copyright_block.txt' %}

#include "{{cpp_class}}.h"

{% for filename in cpp_includes %}
#include "{{filename}}"
{% endfor %}

namespace blink {

// static
{{cpp_class}}* {{cpp_class}}::create(ScriptState* scriptState, v8::Local<v8::Value> callback) {
  if (isUndefinedOrNull(callback))
    return nullptr;
  return new {{cpp_class}}(scriptState, v8::Local<v8::Function>::Cast(callback));
}

{{cpp_class}}::{{cpp_class}}(ScriptState* scriptState, v8::Local<v8::Function> callback)
    : m_scriptState(scriptState),
    m_callback(scriptState->isolate(), this, callback) {
  DCHECK(!m_callback.isEmpty());
}

DEFINE_TRACE_WRAPPERS({{cpp_class}}) {
  visitor->traceWrappers(m_callback.cast<v8::Value>());
}

bool {{cpp_class}}::call({{argument_declarations | join(', ')}}) {
  if (m_callback.isEmpty())
    return false;

  if (!m_scriptState->contextIsValid())
    return false;

  ExecutionContext* context = m_scriptState->getExecutionContext();
  DCHECK(context);
  if (context->isContextSuspended() || context->isContextDestroyed())
    return false;

  // TODO(bashi): Make sure that using DummyExceptionStateForTesting is OK.
  // crbug.com/653769
  DummyExceptionStateForTesting exceptionState;
  ScriptState::Scope scope(m_scriptState.get());
  v8::Isolate* isolate = m_scriptState->isolate();

  v8::Local<v8::Value> thisValue = ToV8(
      scriptWrappable,
      m_scriptState->context()->Global(),
      isolate);

  {% for argument in arguments %}
  v8::Local<v8::Value> {{argument.argument_name}} = {{argument.cpp_value_to_v8_value}};
  {% endfor %}
  {% if arguments %}
  v8::Local<v8::Value> argv[] = { {{arguments | join(', ', 'argument_name')}} };
  {% else %}
  {# Empty array initializers are illegal, and don\'t compile in MSVC. #}
  v8::Local<v8::Value> *argv = nullptr;
  {% endif %}
  v8::TryCatch exceptionCatcher(isolate);
  exceptionCatcher.SetVerbose(true);

  v8::Local<v8::Value> v8ReturnValue;
  if (!V8ScriptRunner::callFunction(m_callback.newLocal(isolate),
                                    context,
                                    thisValue,
                                    {{arguments | length}},
                                    argv,
                                    isolate).ToLocal(&v8ReturnValue)) {
    return false;
  }

  {% if return_value %}
  {{v8_value_to_local_cpp_value(return_value) | indent(2)}}
  returnValue = cppValue;
  {% endif %}
  return true;
}

{{cpp_class}}* NativeValueTraits<{{cpp_class}}>::nativeValue(v8::Isolate* isolate, v8::Local<v8::Value> value, ExceptionState& exceptionState) {
  return {{cpp_class}}::create(ScriptState::current(isolate), value);
}

}  // namespace blink

{% endfilter %}{# format_blink_cpp_source_code #}
