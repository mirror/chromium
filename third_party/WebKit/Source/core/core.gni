# Copyright 2014 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/config/chrome_build.gni")
import("//third_party/WebKit/Source/config.gni")

blink_core_output_dir = "$root_gen_dir/blink/core"

# This file sets core_config_add and core_config_remove lists of configs to
# modify the default lists of configs set in the build as appropriate for core
# targets. This avoids duplicating logic across many targets.
core_config_add = [
  "//build/config/compiler:wexit_time_destructors",
  "//third_party/WebKit/Source:config",
  "//third_party/WebKit/Source:non_test_config",
  "//third_party/WebKit/Source/core:config",
]
core_config_remove = []

# Compute the optimization level. The GYP code sets "optimize: max" which sets
# speed-over-size optimization for official builds on Windows only. The GN's
# build optimize_max config applies this optimization on all platforms, so
# compute how to modify the config list to duplicate the GYP behavior.
# TODO revisit this behavior, as the Windows-specific part seems suspicious.
if (is_win && is_official_build) {
  core_config_remove += [ "//build/config/compiler:default_optimization" ]
  core_config_add += [ "//build/config/compiler:optimize_max" ]
}

if (remove_webcore_debug_symbols) {
  core_config_remove += [ "//build/config/compiler:default_symbols" ]
  core_config_add += [ "//build/config/compiler:no_symbols" ]
}

# Use this target type to link core targets.
if (is_component_build) {
  # To get exported symbols correct in component builds, the files must be in
  # source sets.
  core_link_large_target_type = "source_set"
  core_link_small_target_type = "source_set"
} else {
  # In static builds some of the libraries can get >2GB on Windows so we need
  # to split the targets for the larger ones.
  core_link_large_target_type = "split_static_library"
  core_link_small_target_type = "static_library"
}

# This file is the GN version of core.gypi. We rebase most paths to be absolute
# so these lists can be used by BUILD files in different directories without
# worrying about the base directory.
_gypi =
    exec_script("//build/gypi_to_gn.py",
                [
                  rebase_path("core.gypi"),
                  "--replace=<(SHARED_INTERMEDIATE_DIR)=$root_gen_dir",
                  "--replace=<(blink_core_output_dir)=$blink_core_output_dir",
                ],
                "scope",
                [ "core.gypi" ])

# Files for which bindings (.cpp and .h files) will be generated.
core_idl_files = get_path_info(_gypi.core_idl_files, "abspath")
core_idl_with_modules_dependency_files =
    get_path_info(_gypi.core_idl_with_modules_dependency_files, "abspath")

core_dictionary_idl_files =
    get_path_info(_gypi.core_dictionary_idl_files, "abspath")
core_testing_dictionary_idl_files =
    get_path_info(_gypi.core_testing_dictionary_idl_files, "abspath")

# 'partial interface', target (right side of) 'implements', and
# interfaces with static bindings (in bindings/core/v8/)
core_dependency_idl_files =
    get_path_info(_gypi.core_dependency_idl_files, "abspath")

# Interfaces that inherit from Event, including Event itself.
core_event_idl_files = get_path_info(_gypi.core_event_idl_files, "abspath")

# IDL files that only have typedefs/enums.
core_typedefs_enums_only_idl_files =
    get_path_info(_gypi.core_typedefs_enums_only_idl_files, "abspath")

webcore_non_rendering_files =
    get_path_info(_gypi.webcore_non_rendering_files, "abspath")
webcore_rendering_files =
    get_path_info(_gypi.webcore_rendering_files, "abspath")
webcore_html_files = get_path_info(_gypi.webcore_html_files, "abspath")
webcore_svg_files = get_path_info(_gypi.webcore_svg_files, "abspath")
webcore_testing_idl_files =
    get_path_info(_gypi.webcore_testing_idl_files, "abspath")
webcore_testing_idl_with_modules_dependency_files =
    get_path_info(_gypi.webcore_testing_idl_with_modules_dependency_files,
                  "abspath")
webcore_testing_dependency_idl_files =
    get_path_info(_gypi.webcore_testing_dependency_idl_files, "abspath")
generated_core_dictionary_files =
    get_path_info(_gypi.generated_core_dictionary_files, "abspath")
generated_core_testing_dictionary_files =
    get_path_info(_gypi.generated_core_testing_dictionary_files, "abspath")
generated_webcore_testing_idl_files =
    get_path_info(_gypi.generated_webcore_testing_idl_files, "abspath")
webcore_testing_files = get_path_info(_gypi.webcore_testing_files, "abspath")
