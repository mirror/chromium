// Copyright 2017 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

enum CanPlayTypeResult { "" /* empty string */, "maybe", "probably" };

[
    NoInterfaceObject,
    Exposed=(Window,Worker)
] interface MediaPlayer {
    // error state
    readonly attribute MediaError? error;

    // network state
    attribute DOMString src;
    // FIXME: attribute MediaProvider? srcObject; crbug.com/387740
    readonly attribute DOMString currentSrc;
    attribute DOMString? crossOrigin;
    const unsigned short NETWORK_EMPTY = 0;
    const unsigned short NETWORK_IDLE = 1;
    const unsigned short NETWORK_LOADING = 2;
    const unsigned short NETWORK_NO_SOURCE = 3;
    [ImplementedAs=getNetworkState] readonly attribute unsigned short networkState;
    attribute DOMString preload;
    readonly attribute TimeRanges buffered;
    void load();
    CanPlayTypeResult canPlayType(DOMString type);

    // ready state
    const unsigned short HAVE_NOTHING = 0;
    const unsigned short HAVE_METADATA = 1;
    const unsigned short HAVE_CURRENT_DATA = 2;
    const unsigned short HAVE_FUTURE_DATA = 3;
    const unsigned short HAVE_ENOUGH_DATA = 4;
    [ImplementedAs=getReadyState] readonly attribute unsigned short readyState;
    readonly attribute boolean seeking;

    // playback state
    attribute double currentTime;
    // FIXME: void fastSeek(double time);
    readonly attribute unrestricted double duration;
    // FIXME: Date getStartDate(); crbug.com/312699
    readonly attribute boolean paused;
    attribute double defaultPlaybackRate;
    attribute double playbackRate;
    readonly attribute TimeRanges played;
    readonly attribute TimeRanges seekable;
    readonly attribute boolean ended;
    attribute boolean autoplay;
    attribute boolean loop;
    [CallWith=ScriptState, ImplementedAs=playForBindings] Promise<void> play();
    void pause();

    // controls
    [RaisesException=Setter] attribute double volume;
    attribute boolean muted;
    attribute boolean defaultMuted;

    // tracks
    [SameObject, RuntimeEnabled=AudioVideoTracks] readonly attribute AudioTrackList audioTracks;
    [SameObject, RuntimeEnabled=AudioVideoTracks] readonly attribute VideoTrackList videoTracks;
    [SameObject] readonly attribute TextTrackList textTracks;
    [RaisesException] TextTrack addTextTrack(TextTrackKind kind, optional DOMString label = "", optional DOMString language = "");

    // Non-standard APIs
    // The number of bytes consumed by the media decoder.
    [MeasureAs=PrefixedAudioDecodedByteCount] readonly attribute unsigned long webkitAudioDecodedByteCount;
    [MeasureAs=PrefixedVideoDecodedByteCount] readonly attribute unsigned long webkitVideoDecodedByteCount;
};
