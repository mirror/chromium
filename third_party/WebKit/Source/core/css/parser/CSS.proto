// Copyright 2017 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// Based on the grammar provided here: https://goo.gl/svLze7
// Most top level definitions here (mostly messages, but also the enum "h", is
// named after a rule or token in the grammar. The messages that aren't were
// implemented to hack around shortcomings in the protobuf format (such as
// "StringCharOrQuote"). These can be identified because they are preceded by
// a comment that says "Not in grammar".

syntax = "proto2";

package css_parser_proto_fuzzer;

// Tokens
// TODO(metzman): Implement CDO, CDC, UNICODERANGE, and range.
// The following tokens are implmented in code and do not have their own
// message: INCLUDES, DASHMATCH, HASH, STRING IMPORT_SYM, PAGE_SYM, MEDIA_SYM,
// FONT_FACE_SYM, CHARSET_SYM, NAMESPACE_SYM, IMPORTANT_SYM, EMS, EXS, NUMBER,
// and PERCENTAGE.
// DIMEN not implemented since it isnt used in any production.

// This is named "h" because it represents the "h" token in the grammar this is
// based off of.
enum H {
  ZERO = 48;
  ONE = 49;
  TWO = 50;
  THREE = 51;
  FOUR = 52;
  FIVE = 53;
  SIX = 54;
  SEVEN = 55;
  EIGHT = 56;
  NINE = 57;
  A_UPPER = 65;
  B_UPPER = 66;
  C_UPPER = 67;
  D_UPPER = 68;
  E_UPPER = 69;
  F_UPPER = 70;
  A_LOWER = 97;
  B_LOWER = 98;
  C_LOWER = 99;
  D_LOWER = 100;
  E_LOWER = 101;
  F_LOWER = 102;
}

// TODO(metzman): Add "nonascii" token from grammar.

message Unicode {
  required H ascii_value_1 = 1;
  optional H ascii_value_2 = 2;
  optional H ascii_value_3 = 3;
  optional H ascii_value_4 = 4;
  optional H ascii_value_5 = 5;
  optional H ascii_value_6 = 6;
  optional UnrepeatedW unrepeated_w = 7;
}

// unicode | '\' [#x20-#x7E#x80-#xD7FF#xE000-#xFFFD#x10000-#x10FFFF]
message Escape {
  // #x20-#x7E
  enum AsciiValue {
    SPACE = 32;
    EXCLAMATION_POINT = 33;
    DOUBLE_QUOTE = 34;
    HASH = 35;
    DOLLAR = 36;
    PERCENT = 37;
    AMPERSAND = 38;
    APOSTROPHE = 39;
    OPEN_PAREN = 40;
    CLOSE_PAREN = 41;
    STAR = 42;
    PLUS = 43;
    COMMA = 44;
    MINUS = 45;
    DOT = 46;
    SLASH = 47;
    ZERO = 48;
    ONE = 49;
    TWO = 50;
    THREE = 51;
    FOUR = 52;
    FIVE = 53;
    SIX = 54;
    SEVEN = 55;
    EIGHT = 56;
    NINE = 57;
    COLON = 58;
    SEMI_COLON = 59;
    LESS_THAN = 60;
    EQUAL = 61;
    GREATER_THAN = 62;
    QUESTION = 63;
    AT_SIGN = 64;
    A_UPPER = 65;
    B_UPPER = 66;
    C_UPPER = 67;
    D_UPPER = 68;
    E_UPPER = 69;
    F_UPPER = 70;
    G_UPPER = 71;
    H_UPPER = 72;
    I_UPPER = 73;
    J_UPPER = 74;
    K_UPPER = 75;
    L_UPPER = 76;
    M_UPPER = 77;
    N_UPPER = 78;
    O_UPPER = 79;
    P_UPPER = 80;
    Q_UPPER = 81;
    R_UPPER = 82;
    S_UPPER = 83;
    T_UPPER = 84;
    U_UPPER = 85;
    V_UPPER = 86;
    W_UPPER = 87;
    X_UPPER = 88;
    Y_UPPER = 89;
    Z_UPPER = 90;
    OPEN_BRACKET = 91;
    BACKSLASH = 92;
    CLOSE_BRACKET = 93;
    CARET = 94;
    UNDERSCORE = 95;
    BACKTICK = 96;
    A_LOWER = 97;
    B_LOWER = 98;
    C_LOWER = 99;
    D_LOWER = 100;
    E_LOWER = 101;
    F_LOWER = 102;
    G_LOWER = 103;
    H_LOWER = 104;
    I_LOWER = 105;
    J_LOWER = 106;
    K_LOWER = 107;
    L_LOWER = 108;
    M_LOWER = 109;
    N_LOWER = 110;
    O_LOWER = 111;
    P_LOWER = 112;
    Q_LOWER = 113;
    R_LOWER = 114;
    S_LOWER = 115;
    T_LOWER = 116;
    U_LOWER = 117;
    V_LOWER = 118;
    W_LOWER = 119;
    X_LOWER = 120;
    Y_LOWER = 121;
    Z_LOWER = 122;
    OPEN_CURLY_BRACE = 123;
    PIPE = 124;
    CLOSE_CURLY_BRACE_ = 125;
    TILDE = 126;
  }

  oneof rhs {
    Unicode unicode = 1;
    AsciiValue ascii_value = 2;
  }
  // TODO(metzman): determine if we care about unicode points not covered here.
}

message Nmstart {
  enum AsciiValue {
    A_UPPER = 65;
    B_UPPER = 66;
    C_UPPER = 67;
    D_UPPER = 68;
    E_UPPER = 69;
    F_UPPER = 70;
    G_UPPER = 71;
    H_UPPER = 72;
    I_UPPER = 73;
    J_UPPER = 74;
    K_UPPER = 75;
    L_UPPER = 76;
    M_UPPER = 77;
    N_UPPER = 78;
    O_UPPER = 79;
    P_UPPER = 80;
    Q_UPPER = 81;
    R_UPPER = 82;
    S_UPPER = 83;
    T_UPPER = 84;
    U_UPPER = 85;
    V_UPPER = 86;
    W_UPPER = 87;
    X_UPPER = 88;
    Y_UPPER = 89;
    Z_UPPER = 90;
    A_LOWER = 97;
    B_LOWER = 98;
    C_LOWER = 99;
    D_LOWER = 100;
    E_LOWER = 101;
    F_LOWER = 102;
    G_LOWER = 103;
    H_LOWER = 104;
    I_LOWER = 105;
    J_LOWER = 106;
    K_LOWER = 107;
    L_LOWER = 108;
    M_LOWER = 109;
    N_LOWER = 110;
    O_LOWER = 111;
    P_LOWER = 112;
    Q_LOWER = 113;
    R_LOWER = 114;
    S_LOWER = 115;
    T_LOWER = 116;
    U_LOWER = 117;
    V_LOWER = 118;
    W_LOWER = 119;
    X_LOWER = 120;
    Y_LOWER = 121;
    Z_LOWER = 122;
  }

  oneof rhs {
    AsciiValue ascii_value = 1;
    Escape escape = 2;
    // TODO(metzman): Add nonascii token once (if) I implement it.
  }
}

message Nmchar {
  enum AsciiValue {
    MINUS = 45;
    ZERO = 48;
    ONE = 49;
    TWO = 50;
    THREE = 51;
    FOUR = 52;
    FIVE = 53;
    SIX = 54;
    SEVEN = 55;
    EIGHT = 56;
    NINE = 57;
    A_UPPER = 65;
    B_UPPER = 66;
    C_UPPER = 67;
    D_UPPER = 68;
    E_UPPER = 69;
    F_UPPER = 70;
    G_UPPER = 71;
    H_UPPER = 72;
    I_UPPER = 73;
    J_UPPER = 74;
    K_UPPER = 75;
    L_UPPER = 76;
    M_UPPER = 77;
    N_UPPER = 78;
    O_UPPER = 79;
    P_UPPER = 80;
    Q_UPPER = 81;
    R_UPPER = 82;
    S_UPPER = 83;
    T_UPPER = 84;
    U_UPPER = 85;
    V_UPPER = 86;
    W_UPPER = 87;
    X_UPPER = 88;
    Y_UPPER = 89;
    Z_UPPER = 90;
    A_LOWER = 97;
    B_LOWER = 98;
    C_LOWER = 99;
    D_LOWER = 100;
    E_LOWER = 101;
    F_LOWER = 102;
    G_LOWER = 103;
    H_LOWER = 104;
    I_LOWER = 105;
    J_LOWER = 106;
    K_LOWER = 107;
    L_LOWER = 108;
    M_LOWER = 109;
    N_LOWER = 110;
    O_LOWER = 111;
    P_LOWER = 112;
    Q_LOWER = 113;
    R_LOWER = 114;
    S_LOWER = 115;
    T_LOWER = 116;
    U_LOWER = 117;
    V_LOWER = 118;
    W_LOWER = 119;
    X_LOWER = 120;
    Y_LOWER = 121;
    Z_LOWER = 122;
  }
  oneof rhs {
    AsciiValue ascii_value = 1;
    Escape escape = 2;
    // TODO(metzman): Add nonascii token once (if) I implement it.
  }
}

// string1, string2 and string
message String {
  // TODO(metzman): determine if these hacks are more efficient than enforcing
  // constraints on string types in the actual code.
  required bool use_single_quotes = 1;
  repeated StringCharOrQuote string_char_quotes = 2;
}

// Not in grammar.
message StringCharOrQuote {
  enum QuoteChar {
    UNSET = 0;
    IS_SET = 1;
  }
  oneof rhs {
    StringChar string_char = 2;
    QuoteChar quote_char = 1;
  }
}

message StringChar {
  enum Space {
    UNSET = 0;
    IS_SET = 1;
  }
  oneof rhs {
    UrlChar url_char = 1;
    Space space = 2;
    // '\' nl
    Nl nl = 3;
  }
}

message Ident {
  optional bool starting_minus = 1 [default = false];  // -
  required Nmstart nmstart = 2;
  repeated Nmchar nmchars = 3;
}

message Name {
  required Nmchar first_nmchar = 1;
  repeated Nmchar later_nmchars = 2;
}

message Num {
  oneof rhs {
    float float_value = 1;
    sint64 signed_int_value = 2;
  }
}

message UrlChar {
  enum AsciiValue {
    NUL = 0;
    // #x9
    HT = 9;

    // #x21
    EXCLAMATION_POINT = 33;

    // #x23-#x26
    HASH = 35;
    DOLLAR = 36;
    PERCENT = 37;
    AMPERSAND = 38;

    // #x26-#x27
    APOSTROPHE = 39;
    OPEN_PAREN = 40;
    CLOSE_PAREN = 41;
    STAR = 42;
    PLUS = 43;
    COMMA = 44;
    MINUS = 45;
    DOT = 46;
    SLASH = 47;
    ZERO = 48;
    ONE = 49;
    TWO = 50;
    THREE = 51;
    FOUR = 52;
    FIVE = 53;
    SIX = 54;
    SEVEN = 55;
    EIGHT = 56;
    NINE = 57;
    COLON = 58;
    SEMI_COLON = 59;
    LESS_THAN = 60;
    EQUAL = 61;
    GREATER_THAN = 62;
    QUESTION = 63;
    AT_SIGN = 64;
    A_UPPER = 65;
    B_UPPER = 66;
    C_UPPER = 67;
    D_UPPER = 68;
    E_UPPER = 69;
    F_UPPER = 70;
    G_UPPER = 71;
    H_UPPER = 72;
    I_UPPER = 73;
    J_UPPER = 74;
    K_UPPER = 75;
    L_UPPER = 76;
    M_UPPER = 77;
    N_UPPER = 78;
    O_UPPER = 79;
    P_UPPER = 80;
    Q_UPPER = 81;
    R_UPPER = 82;
    S_UPPER = 83;
    T_UPPER = 84;
    U_UPPER = 85;
    V_UPPER = 86;
    W_UPPER = 87;
    X_UPPER = 88;
    Y_UPPER = 89;
    Z_UPPER = 90;
    OPEN_BRACKET = 91;
    BACKSLASH = 92;
    CLOSE_BRACKET = 93;
    CARET = 94;
    UNDERSCORE = 95;
    BACKTICK = 96;
    A_LOWER = 97;
    B_LOWER = 98;
    C_LOWER = 99;
    D_LOWER = 100;
    E_LOWER = 101;
    F_LOWER = 102;
    G_LOWER = 103;
    H_LOWER = 104;
    I_LOWER = 105;
    J_LOWER = 106;
    K_LOWER = 107;
    L_LOWER = 108;
    M_LOWER = 109;
    N_LOWER = 110;
    O_LOWER = 111;
    P_LOWER = 112;
    Q_LOWER = 113;
    R_LOWER = 114;
    S_LOWER = 115;
    T_LOWER = 116;
    U_LOWER = 117;
    V_LOWER = 118;
    W_LOWER = 119;
    X_LOWER = 120;
    Y_LOWER = 121;
    Z_LOWER = 122;
    OPEN_CURLY_BRACE = 123;
    PIPE = 124;
    CLOSE_CURLY_BRACE_ = 125;
    TILDE = 126;
  }
  oneof rhs {
    AsciiValue ascii_value = 1;
    Escape escape = 2;
    // TODO(metzman): nonascii
  }
}

message W {
  repeated UnrepeatedW unrepeated_w = 1;
}

// Not in grammar
message UnrepeatedW {
  enum AsciiValue {
    // #x9 ('\t')
    HT = 9;
    // #xA ('\n')
    LF = 10;
    // #xC ('\f')
    FF = 12;
    // #xD ('\r')
    CR = 13;
    // #x20 (' ')
    SPACE = 32;
  }
  required AsciiValue ascii_value = 1;
}

message Nl {
  enum NewlineKind {
    // #xA ('\n')
    LF = 10;
    // #xD #xA ('\r\n') Pseudo value, since we don't need SOH
    CR_LF = 1;
    // #xD ('\r')
    CR = 13;
    // #xC ('\f')
    FF = 12;
  }
  required NewlineKind newline_kind = 1;
}

// {num}[px|cm|mm|in|pt|pc]
message Length {
  enum Unit {
    PX = 1;
    CM = 2;
    MM = 3;
    IN = 4;
    PT = 5;
    PC = 6;
  }
  required Num num = 1;
  required Unit unit = 2;
}

// {num}[deg|rad|grad]
message Angle {
  enum Unit {
    DEG = 1;
    RAD = 2;
    GRAD = 3;
  }
  required Num num = 1;
  required Unit unit = 2;
}

// {num}[ms|s]
message Time {
  enum Unit {
    MS = 1;
    S = 2;
  }
  required Num num = 1;
  required Unit unit = 2;
}

// {num}[Hz|kHz]
message Freq {
  enum Unit {
    _HZ = 1;  // Hack around really dumb build bug
    KHZ = 2;
  }
  required Num num = 1;
  required Unit unit = 2;
}

message Uri {
  // "url(" w (string | url* ) w ")"
  // TODO(metzman): Add url token once (if) I implement it.
  required String value = 1;
}

// FUNCTION. Not named Function to avoid conflict.
message FunctionToken {
  required Ident ident = 1;
}
// end tokens

// rules
// TODO(metzman): Add rules for @apply, @keyframes (including
// -webkit-keyframes), @viewport, @supports.
message StyleSheet {
  optional CharsetDeclaration charset_declaration = 1;
  repeated Import imports = 2;
  repeated Namespace namespaces = 3;
  repeated RulesetOrMediaOrPageOrFontFace ruleset_media_page_font_faces = 4;
}

// Not in grammar.
message CharsetDeclaration {
  required String string = 2;
}

// Not in grammar.
message RulesetOrMediaOrPageOrFontFace {
  oneof rhs {
    Ruleset ruleset = 1;
    Media media = 2;
    Page page = 3;
    FontFace font_face = 4;
  }
}

message Import {
  oneof rhs {
    Uri uri = 1;
    String string = 2;
  }
  optional MediumList medium_list = 3;
}

// Not in grammar.
message MediumList {
  required Medium first_medium = 1;
  repeated Medium later_mediums = 2;
}

message Namespace {
  optional NamespacePrefix namespace_prefix = 1;
  oneof rhs {
    String string = 2;
    Uri uri = 3;
  }
}

// TODO(metzman): Determine if this is unnecessary.
message NamespacePrefix {
  required Ident ident = 1;
}

message Media {
  required MediumList medium_list = 1;
  repeated Ruleset rulesets = 2;
}

// TODO(metzman): Determine if this is unnecessary.
message Medium {
  required Ident ident = 1;
}

message Page {
  optional Ident ident = 1;
  optional PseudoPage pseudo_page = 2;
  required DeclarationList declaration_list = 3;
}

// Not in grammar.
message DeclarationList {
  required Declaration first_declaration = 1;
  repeated Declaration later_declarations = 2;
}

// TODO(metzman): Determine if this is unnecessary.
message PseudoPage {
  required Ident ident = 1;
}

message FontFace {
  required DeclarationList declaration_list = 1;
}

message Operator {
  enum AsciiValue {
    COMMA = 44;
    SLASH = 47;
  }
  optional AsciiValue ascii_value = 1;
}

message Combinator {
  enum AsciiValue {
    PLUS = 43;
    GREATER_THAN = 62;
  }
  optional AsciiValue ascii_value = 1;
}

message UnaryOperator {
  enum AsciiValue {
    PLUS = 43;
    MINUS = 45;
  }
  required AsciiValue ascii_value = 1;
}

// TODO(metzman): Determine if this is unnecessary.
message Property {
  enum Name {
    ALL = 1;
    _WEBKIT_ANIMATION_ITERATION_COUNT = 2;
    FONT_FEATURE_SETTINGS = 3;
    _WEBKIT_TEXT_EMPHASIS_POSITION = 4;
    _WEBKIT_TEXT_EMPHASIS_STYLE = 5;
    GRID_TEMPLATE_ROWS = 6;
    TEXT_UNDERLINE_POSITION = 7;
    _WEBKIT_FLEX_GROW = 8;
    SCROLL_SNAP_MARGIN_RIGHT = 9;
    _WEBKIT_COLUMN_RULE = 10;
    _WEBKIT_ORDER = 11;
    GRID_ROW_GAP = 12;
    BACKDROP_FILTER = 13;
    FONT_VARIANT_EAST_ASIAN = 14;
    BUFFERED_RENDERING = 15;
    _WEBKIT_APPEARANCE = 16;
    OUTLINE_WIDTH = 17;
    ALIGNMENT_BASELINE = 18;
    _WEBKIT_FLEX_FLOW = 19;
    COLUMN_RULE = 20;
    GRID_COLUMN_GAP = 21;
    _WEBKIT_BORDER_AFTER = 22;
    _WEBKIT_COLUMN_BREAK_INSIDE = 23;
    _WEBKIT_SHAPE_OUTSIDE = 24;
    _WEBKIT_PRINT_COLOR_ADJUST = 25;
    LIST_STYLE_TYPE = 26;
    PAGE_BREAK_BEFORE = 27;
    FLOOD_COLOR = 28;
    TEXT_ANCHOR = 29;
    _WEBKIT_PADDING_START = 30;
    _WEBKIT_USER_SELECT = 31;
    _WEBKIT_COLUMN_RULE_COLOR = 32;
    PADDING_LEFT = 33;
    _WEBKIT_BACKFACE_VISIBILITY = 34;
    _WEBKIT_MARGIN_BEFORE = 35;
    BREAK_INSIDE = 36;
    COLUMN_COUNT = 37;
    _WEBKIT_LOGICAL_HEIGHT = 38;
    PERSPECTIVE = 39;
    MAX_BLOCK_SIZE = 40;
    _WEBKIT_ANIMATION_PLAY_STATE = 41;
    BORDER_IMAGE_REPEAT = 42;
    _WEBKIT_FONT_SIZE_DELTA = 43;
    SCROLL_PADDING_BOTTOM = 44;
    BORDER_RIGHT_STYLE = 45;
    BORDER_LEFT_STYLE = 46;
    SCROLL_SNAP_MARGIN_BLOCK = 47;
    FLEX_FLOW = 48;
    OUTLINE_COLOR = 49;
    FLEX_GROW = 50;
    MAX_WIDTH = 51;
    GRID_COLUMN = 52;
    IMAGE_ORIENTATION = 53;
    ANIMATION_DURATION = 54;
    _WEBKIT_COLUMNS = 55;
    _WEBKIT_BOX_FLEX_GROUP = 56;
    _WEBKIT_ANIMATION_DELAY = 57;
    _EPUB_TEXT_EMPHASIS = 58;
    FLEX_SHRINK = 59;
    TEXT_RENDERING = 60;
    ALIGN_ITEMS = 61;
    BORDER_COLLAPSE = 62;
    OFFSET = 63;
    TEXT_COMBINE_UPRIGHT = 64;
    _WEBKIT_MASK_POSITION_X = 65;
    _WEBKIT_MASK_POSITION_Y = 66;
    OUTLINE_STYLE = 67;
    _WEBKIT_MARGIN_BOTTOM_COLLAPSE = 68;
    COLOR_INTERPOLATION_FILTERS = 69;
    FONT_VARIANT = 70;
    _WEBKIT_ANIMATION_FILL_MODE = 71;
    BORDER_RIGHT = 72;
    VISIBILITY = 73;
    TRANSFORM_BOX = 74;
    FONT_VARIANT_CAPS = 75;
    _EPUB_TEXT_EMPHASIS_COLOR = 76;
    _WEBKIT_BORDER_BEFORE_STYLE = 77;
    RESIZE = 78;
    _WEBKIT_RTL_ORDERING = 79;
    _WEBKIT_BOX_ORDINAL_GROUP = 80;
    PAINT_ORDER = 81;
    STROKE_LINECAP = 82;
    ANIMATION_DIRECTION = 83;
    _WEBKIT_FONT_FEATURE_SETTINGS = 84;
    BORDER_TOP_LEFT_RADIUS = 85;
    _WEBKIT_COLUMN_WIDTH = 86;
    _WEBKIT_BOX_ALIGN = 87;
    _WEBKIT_PADDING_AFTER = 88;
    COLUMN_WIDTH = 89;
    LIST_STYLE = 90;
    _WEBKIT_MASK_REPEAT_Y = 91;
    _WEBKIT_MARGIN_BEFORE_COLLAPSE = 92;
    STROKE = 93;
    TEXT_DECORATION_LINE = 94;
    _WEBKIT_BACKGROUND_SIZE = 95;
    _WEBKIT_MASK_REPEAT_X = 96;
    PADDING_BOTTOM = 97;
    FONT_STYLE = 98;
    _WEBKIT_TRANSITION_DELAY = 99;
    BACKGROUND_REPEAT = 100;
    FLEX_BASIS = 101;
    BORDER_IMAGE_SLICE = 102;
    _WEBKIT_TRANSFORM_ORIGIN = 103;
    SCROLL_BOUNDARY_BEHAVIOR_X = 104;
    SCROLL_BOUNDARY_BEHAVIOR_Y = 105;
    VECTOR_EFFECT = 106;
    _WEBKIT_ANIMATION_TIMING_FUNCTION = 107;
    _WEBKIT_BORDER_AFTER_STYLE = 108;
    _WEBKIT_PERSPECTIVE_ORIGIN_X = 109;
    _WEBKIT_PERSPECTIVE_ORIGIN_Y = 110;
    INLINE_SIZE = 111;
    OUTLINE = 112;
    FONT_DISPLAY = 113;
    _WEBKIT_BORDER_BEFORE = 114;
    BORDER_IMAGE_SOURCE = 115;
    TRANSITION_DURATION = 116;
    SCROLL_PADDING_TOP = 117;
    ORDER = 118;
    _WEBKIT_BOX_ORIENT = 119;
    COUNTER_RESET = 120;
    COLOR_RENDERING = 121;
    FLEX_DIRECTION = 122;
    _WEBKIT_TEXT_STROKE_WIDTH = 123;
    FONT_VARIANT_NUMERIC = 124;
    SCROLL_SNAP_MARGIN_BLOCK_END = 125;
    MIN_HEIGHT = 126;
    SCROLL_PADDING_INLINE_START = 127;
    _WEBKIT_MASK_BOX_IMAGE = 128;
    LEFT = 129;
    _WEBKIT_MASK = 130;
    _WEBKIT_BORDER_AFTER_WIDTH = 131;
    STROKE_WIDTH = 132;
    _WEBKIT_BOX_DECORATION_BREAK = 133;
    _WEBKIT_MASK_POSITION = 134;
    BACKGROUND_ORIGIN = 135;
    _WEBKIT_BORDER_START_COLOR = 136;
    FONT_STRETCH = 137;
    _WEBKIT_BACKGROUND_CLIP = 138;
    SCROLL_SNAP_MARGIN_TOP = 139;
    _WEBKIT_BORDER_HORIZONTAL_SPACING = 140;
    BORDER_RADIUS = 141;
    FLEX = 142;
    TEXT_INDENT = 143;
    HYPHENS = 144;
    COLUMN_RULE_WIDTH = 145;
    _WEBKIT_MARGIN_AFTER = 146;
    _EPUB_CAPTION_SIDE = 147;
    BREAK_AFTER = 148;
    TEXT_TRANSFORM = 149;
    TOUCH_ACTION = 150;
    FONT_SIZE = 151;
    _WEBKIT_ANIMATION_NAME = 152;
    SCROLL_PADDING_INLINE = 153;
    OFFSET_PATH = 154;
    SCROLL_SNAP_MARGIN = 155;
    PADDING_TOP = 156;
    SCROLL_SNAP_ALIGN = 157;
    _WEBKIT_TEXT_COMBINE = 158;
    _WEBKIT_FLEX_SHRINK = 159;
    RX = 160;
    RY = 161;
    CONTENT = 162;
    PADDING_RIGHT = 163;
    _WEBKIT_TRANSFORM = 164;
    MARKER_MID = 165;
    _WEBKIT_MIN_LOGICAL_WIDTH = 166;
    CLIP_RULE = 167;
    FONT_FAMILY = 168;
    SCROLL_SNAP_TYPE = 169;
    TEXT_DECORATION_SKIP = 170;
    TRANSITION = 171;
    FILTER = 172;
    BORDER_RIGHT_WIDTH = 173;
    _WEBKIT_FLEX_DIRECTION = 174;
    _WEBKIT_MASK_COMPOSITE = 175;
    MIX_BLEND_MODE = 176;
    COLOR_INTERPOLATION = 177;
    BORDER_TOP_STYLE = 178;
    FILL_OPACITY = 179;
    MARKER_START = 180;
    BORDER_BOTTOM_WIDTH = 181;
    _WEBKIT_TEXT_EMPHASIS = 182;
    GRID_AREA = 183;
    SIZE = 184;
    BACKGROUND_CLIP = 185;
    _WEBKIT_TEXT_FILL_COLOR = 186;
    TOP = 187;
    _WEBKIT_BOX_REFLECT = 188;
    BORDER_WIDTH = 189;
    OFFSET_ANCHOR = 190;
    MAX_INLINE_SIZE = 191;
    _WEBKIT_COLUMN_RULE_STYLE = 192;
    _WEBKIT_COLUMN_COUNT = 193;
    ANIMATION_PLAY_STATE = 194;
    PADDING = 195;
    DOMINANT_BASELINE = 196;
    BACKGROUND_ATTACHMENT = 197;
    _WEBKIT_BOX_SIZING = 198;
    _WEBKIT_BOX_FLEX = 199;
    TEXT_ORIENTATION = 200;
    BACKGROUND_POSITION = 201;
    _WEBKIT_BORDER_START_WIDTH = 202;
    _EPUB_TEXT_EMPHASIS_STYLE = 203;
    ISOLATION = 204;
    _EPUB_TEXT_ORIENTATION = 205;
    _WEBKIT_BORDER_BOTTOM_RIGHT_RADIUS = 206;
    R = 207;
    BORDER_LEFT_WIDTH = 208;
    GRID_COLUMN_END = 209;
    BACKGROUND_BLEND_MODE = 210;
    VERTICAL_ALIGN = 211;
    CLIP = 212;
    GRID_AUTO_ROWS = 213;
    OFFSET_ROTATE = 214;
    MARGIN_LEFT = 215;
    ANIMATION_NAME = 216;
    TEXT_DECORATION = 217;
    BORDER = 218;
    _WEBKIT_TRANSITION_TIMING_FUNCTION = 219;
    MARGIN_BOTTOM = 220;
    UNICODE_RANGE = 221;
    ANIMATION = 222;
    _WEBKIT_SHAPE_MARGIN = 223;
    FONT_WEIGHT = 224;
    SHAPE_MARGIN = 225;
    MASK_TYPE = 226;
    SCROLL_PADDING = 227;
    MIN_INLINE_SIZE = 228;
    OBJECT_POSITION = 229;
    PAGE_BREAK_AFTER = 230;
    _WEBKIT_MASK_CLIP = 231;
    WHITE_SPACE = 232;
    _WEBKIT_BORDER_AFTER_COLOR = 233;
    _WEBKIT_MAX_LOGICAL_WIDTH = 234;
    _WEBKIT_BORDER_BEFORE_COLOR = 235;
    FONT_KERNING = 236;
    _EPUB_WORD_BREAK = 237;
    CLEAR = 238;
    ANIMATION_TIMING_FUNCTION = 239;
    _WEBKIT_BORDER_RADIUS = 240;
    SCROLL_PADDING_RIGHT = 241;
    _WEBKIT_TEXT_DECORATIONS_IN_EFFECT = 242;
    _WEBKIT_ANIMATION_DIRECTION = 243;
    JUSTIFY_SELF = 244;
    TRANSITION_TIMING_FUNCTION = 245;
    SCROLL_SNAP_STOP = 246;
    COUNTER_INCREMENT = 247;
    _WEBKIT_TRANSFORM_STYLE = 248;
    GRID_AUTO_COLUMNS = 249;
    _WEBKIT_ALIGN_CONTENT = 250;
    FONT = 251;
    FLEX_WRAP = 252;
    GRID_ROW_START = 253;
    LIST_STYLE_IMAGE = 254;
    _WEBKIT_TAP_HIGHLIGHT_COLOR = 255;
    _WEBKIT_TEXT_EMPHASIS_COLOR = 256;
    BORDER_LEFT = 257;
    _WEBKIT_BORDER_END_COLOR = 258;
    COLUMNS = 259;
    BOX_SHADOW = 260;
    _WEBKIT_FLEX_WRAP = 261;
    ALIGN_SELF = 262;
    BORDER_BOTTOM = 263;
    BORDER_SPACING = 264;
    _WEBKIT_COLUMN_SPAN = 265;
    GRID_ROW_END = 266;
    _WEBKIT_BORDER_END = 267;
    PERSPECTIVE_ORIGIN = 268;
    PAGE_BREAK_INSIDE = 269;
    ORPHANS = 270;
    _WEBKIT_BORDER_START_STYLE = 271;
    SCROLL_BEHAVIOR = 272;
    COLUMN_SPAN = 273;
    _WEBKIT_HYPHENATE_CHARACTER = 274;
    COLUMN_FILL = 275;
    TAB_SIZE = 276;
    CONTAIN = 277;
    X = 278;
    GRID_ROW = 279;
    BORDER_BOTTOM_RIGHT_RADIUS = 280;
    LINE_HEIGHT = 281;
    STROKE_LINEJOIN = 282;
    TEXT_ALIGN_LAST = 283;
    OFFSET_POSITION = 284;
    WORD_SPACING = 285;
    TRANSFORM_STYLE = 286;
    _WEBKIT_APP_REGION = 287;
    _WEBKIT_BORDER_END_STYLE = 288;
    _WEBKIT_TRANSFORM_ORIGIN_Z = 289;
    _WEBKIT_TRANSFORM_ORIGIN_X = 290;
    _WEBKIT_TRANSFORM_ORIGIN_Y = 291;
    BACKGROUND_REPEAT_X = 292;
    BACKGROUND_REPEAT_Y = 293;
    BORDER_BOTTOM_COLOR = 294;
    _WEBKIT_RUBY_POSITION = 295;
    _WEBKIT_LOGICAL_WIDTH = 296;
    TEXT_JUSTIFY = 297;
    SCROLL_SNAP_MARGIN_INLINE_START = 298;
    CAPTION_SIDE = 299;
    MASK_SOURCE_TYPE = 300;
    _WEBKIT_MASK_BOX_IMAGE_SLICE = 301;
    _WEBKIT_BORDER_IMAGE = 302;
    TEXT_SIZE_ADJUST = 303;
    _WEBKIT_TEXT_SECURITY = 304;
    _EPUB_WRITING_MODE = 305;
    GRID_TEMPLATE = 306;
    _WEBKIT_MASK_BOX_IMAGE_REPEAT = 307;
    _WEBKIT_MASK_REPEAT = 308;
    _WEBKIT_JUSTIFY_CONTENT = 309;
    BASELINE_SHIFT = 310;
    BORDER_IMAGE = 311;
    TEXT_DECORATION_COLOR = 312;
    COLOR = 313;
    SHAPE_IMAGE_THRESHOLD = 314;
    SHAPE_RENDERING = 315;
    CY = 316;
    CX = 317;
    _WEBKIT_USER_MODIFY = 318;
    OFFSET_DISTANCE = 319;
    _WEBKIT_BORDER_BOTTOM_LEFT_RADIUS = 320;
    SPEAK = 321;
    BORDER_BOTTOM_LEFT_RADIUS = 322;
    _WEBKIT_COLUMN_BREAK_AFTER = 323;
    _WEBKIT_FONT_SMOOTHING = 324;
    _WEBKIT_MAX_LOGICAL_HEIGHT = 325;
    _WEBKIT_LINE_BREAK = 326;
    FILL_RULE = 327;
    _WEBKIT_MARGIN_START = 328;
    MIN_WIDTH = 329;
    _EPUB_TEXT_COMBINE = 330;
    BREAK_BEFORE = 331;
    CARET_COLOR = 332;
    EMPTY_CELLS = 333;
    DIRECTION = 334;
    CLIP_PATH = 335;
    JUSTIFY_CONTENT = 336;
    SCROLL_PADDING_BLOCK_END = 337;
    Z_INDEX = 338;
    BACKGROUND_POSITION_Y = 339;
    TEXT_DECORATION_STYLE = 340;
    GRID_TEMPLATE_AREAS = 341;
    _WEBKIT_MIN_LOGICAL_HEIGHT = 342;
    FONT_SIZE_ADJUST = 343;
    SCROLL_PADDING_BLOCK = 344;
    OVERFLOW_ANCHOR = 345;
    CURSOR = 346;
    SCROLL_SNAP_MARGIN_BLOCK_START = 347;
    _WEBKIT_MASK_BOX_IMAGE_SOURCE = 348;
    MARGIN = 349;
    _WEBKIT_ANIMATION = 350;
    LETTER_SPACING = 351;
    ORIENTATION = 352;
    WILL_CHANGE = 353;
    _WEBKIT_HIGHLIGHT = 354;
    TRANSFORM_ORIGIN = 355;
    FONT_VARIANT_LIGATURES = 356;
    _WEBKIT_ANIMATION_DURATION = 357;
    _WEBKIT_MASK_ORIGIN = 358;
    _WEBKIT_CLIP_PATH = 359;
    WORD_BREAK = 360;
    TABLE_LAYOUT = 361;
    TEXT_OVERFLOW = 362;
    _WEBKIT_LOCALE = 363;
    _WEBKIT_FLEX = 364;
    GRID_AUTO_FLOW = 365;
    BORDER_TOP_RIGHT_RADIUS = 366;
    BORDER_IMAGE_OUTSET = 367;
    PLACE_ITEMS = 368;
    BORDER_LEFT_COLOR = 369;
    FONT_VARIATION_SETTINGS = 370;
    BORDER_RIGHT_COLOR = 371;
    MIN_ZOOM = 372;
    SCROLL_SNAP_MARGIN_INLINE = 373;
    _WEBKIT_BORDER_BEFORE_WIDTH = 374;
    BACKFACE_VISIBILITY = 375;
    BACKGROUND_IMAGE = 376;
    _WEBKIT_TRANSITION_PROPERTY = 377;
    WRITING_MODE = 378;
    STROKE_OPACITY = 379;
    _WEBKIT_MARGIN_COLLAPSE = 380;
    BOX_SIZING = 381;
    MARGIN_TOP = 382;
    COLUMN_RULE_COLOR = 383;
    Y = 384;
    POSITION = 385;
    SCROLL_SNAP_MARGIN_BOTTOM = 386;
    LIST_STYLE_POSITION = 387;
    _WEBKIT_BOX_PACK = 388;
    SCROLL_PADDING_INLINE_END = 389;
    QUOTES = 390;
    BORDER_TOP = 391;
    SCROLL_PADDING_LEFT = 392;
    _WEBKIT_TRANSITION = 393;
    _WEBKIT_COLUMN_BREAK_BEFORE = 394;
    LIGHTING_COLOR = 395;
    BACKGROUND_SIZE = 396;
    _WEBKIT_PADDING_BEFORE = 397;
    _WEBKIT_BORDER_TOP_LEFT_RADIUS = 398;
    FLOOD_OPACITY = 399;
    LINE_HEIGHT_STEP = 400;
    _WEBKIT_MASK_SIZE = 401;
    TEXT_ALIGN = 402;
    _WEBKIT_FILTER = 403;
    WORD_WRAP = 404;
    MAX_ZOOM = 405;
    GRID = 406;
    BACKGROUND = 407;
    HEIGHT = 408;
    GRID_COLUMN_START = 409;
    ANIMATION_FILL_MODE = 410;
    ROTATE = 411;
    MARKER_END = 412;
    D = 413;
    JUSTIFY_ITEMS = 414;
    ZOOM = 415;
    SCROLL_PADDING_BLOCK_START = 416;
    _WEBKIT_MARGIN_TOP_COLLAPSE = 417;
    PAGE = 418;
    RIGHT = 419;
    USER_SELECT = 420;
    MARGIN_RIGHT = 421;
    MARKER = 422;
    LINE_BREAK = 423;
    _WEBKIT_MARGIN_END = 424;
    _WEBKIT_TRANSITION_DURATION = 425;
    _WEBKIT_WRITING_MODE = 426;
    BORDER_TOP_WIDTH = 427;
    BOTTOM = 428;
    PLACE_CONTENT = 429;
    _WEBKIT_SHAPE_IMAGE_THRESHOLD = 430;
    _WEBKIT_USER_DRAG = 431;
    _WEBKIT_BORDER_VERTICAL_SPACING = 432;
    _WEBKIT_COLUMN_GAP = 433;
    _WEBKIT_OPACITY = 434;
    BACKGROUND_COLOR = 435;
    COLUMN_GAP = 436;
    SHAPE_OUTSIDE = 437;
    _WEBKIT_PADDING_END = 438;
    _WEBKIT_BORDER_START = 439;
    ANIMATION_DELAY = 440;
    UNICODE_BIDI = 441;
    TEXT_SHADOW = 442;
    _WEBKIT_BOX_DIRECTION = 443;
    IMAGE_RENDERING = 444;
    SRC = 445;
    GRID_GAP = 446;
    POINTER_EVENTS = 447;
    BORDER_IMAGE_WIDTH = 448;
    MIN_BLOCK_SIZE = 449;
    TRANSITION_PROPERTY = 450;
    _WEBKIT_MASK_IMAGE = 451;
    FLOAT = 452;
    MAX_HEIGHT = 453;
    OUTLINE_OFFSET = 454;
    _WEBKIT_BOX_SHADOW = 455;
    OVERFLOW_WRAP = 456;
    BLOCK_SIZE = 457;
    TRANSFORM = 458;
    PLACE_SELF = 459;
    WIDTH = 460;
    STROKE_MITERLIMIT = 461;
    STOP_OPACITY = 462;
    BORDER_TOP_COLOR = 463;
    TRANSLATE = 464;
    OBJECT_FIT = 465;
    _WEBKIT_MASK_BOX_IMAGE_WIDTH = 466;
    _WEBKIT_BACKGROUND_ORIGIN = 467;
    _WEBKIT_ALIGN_ITEMS = 468;
    TRANSITION_DELAY = 469;
    SCROLL_SNAP_MARGIN_LEFT = 470;
    BORDER_STYLE = 471;
    ANIMATION_ITERATION_COUNT = 472;
    _WEBKIT_MARGIN_AFTER_COLLAPSE = 473;
    // Should be named OVERFLOW but can't because a macro uses this.
    _OVERFLOW = 474;
    USER_ZOOM = 475;
    _WEBKIT_BORDER_TOP_RIGHT_RADIUS = 476;
    GRID_TEMPLATE_COLUMNS = 477;
    _WEBKIT_ALIGN_SELF = 478;
    _WEBKIT_PERSPECTIVE_ORIGIN = 479;
    COLUMN_RULE_STYLE = 480;
    DISPLAY = 481;
    _WEBKIT_COLUMN_RULE_WIDTH = 482;
    _WEBKIT_BOX_LINES = 483;
    BORDER_COLOR = 484;
    _WEBKIT_FLEX_BASIS = 485;
    STROKE_DASHOFFSET = 486;
    _WEBKIT_TEXT_SIZE_ADJUST = 487;
    SCROLL_BOUNDARY_BEHAVIOR = 488;
    _WEBKIT_TEXT_STROKE = 489;
    WIDOWS = 490;
    FILL = 491;
    OVERFLOW_Y = 492;
    OVERFLOW_X = 493;
    OPACITY = 494;
    _WEBKIT_PERSPECTIVE = 495;
    _WEBKIT_TEXT_STROKE_COLOR = 496;
    SCROLL_SNAP_MARGIN_INLINE_END = 497;
    SCALE = 498;
    _WEBKIT_TEXT_ORIENTATION = 499;
    _WEBKIT_MASK_BOX_IMAGE_OUTSET = 500;
    ALIGN_CONTENT = 501;
    _WEBKIT_BORDER_END_WIDTH = 502;
    BORDER_BOTTOM_STYLE = 503;
    MASK = 504;
    BACKGROUND_POSITION_X = 505;
    _EPUB_TEXT_TRANSFORM = 506;
    STOP_COLOR = 507;
    STROKE_DASHARRAY = 508;
    _WEBKIT_LINE_CLAMP = 509;
  }
  required Name name = 1;
}

message Ruleset {
  required SelectorList selector_list = 1;
  required DeclarationList declaration_list = 2;
}

// Not in grammar.
message SelectorList {
  required Selector first_selector = 1;
  repeated Selector later_selectors = 2;
}

message Selector {
  required SimpleSelector simple_selector = 1;
  repeated CombinatorAndSimpleSelector combinator_simple_selectors = 2;
}

// Not in grammar.
message CombinatorAndSimpleSelector {
  required Combinator combinator = 1;
  required SimpleSelector simple_selector = 2;
}

message SimpleSelector {
  optional ElementName element_name = 1;
  repeated HashOrClassOrAttribOrPseudo hash_class_attrib_pseudos = 2;
}

// Not in grammar.
message HashOrClassOrAttribOrPseudo {
  oneof rhs {
    Name hash = 1;  // "#"
    _Class _class = 2;
    Attrib attrib = 3;
    Pseudo pseudo = 4;
  }
}

// Not in grammar. Not named Class to avoid confusion with class keyword in c++.
message _Class {
  required Ident ident = 1;
}

message ElementName {
  // Since setting a bool is cheap, don't use oneof.
  required bool star = 1;
  optional Ident ident = 2;
}

message Attrib {
  required Ident ident = 1;
  // [ [ '=' | INCLUDES | DASHMATCH ] S*
  // [ IDENT | STRING ] S* ]?
  optional AttribPartTwo attrib_part_two = 2;
}

message AttribPartTwo {
  enum EqualOrIncludesOrDashmatch {
    EQUAL = 1;
    INCLUDES = 2;
    DASHMATCH = 3;
  }
  required EqualOrIncludesOrDashmatch equal_includes_dashmatch = 1;
  oneof rhs {
    Ident ident = 4;
    String string = 5;
  }
}

message Pseudo {
  oneof rhs {
    Ident ident_1 = 1;
    FunctionToken function_token = 2;
  }
  required Ident ident_2 = 3;
}

message Declaration {
  // property ':' S* expr prio? | /* empty */
  optional NonEmptyDeclaration nonempty_declaration = 1;
}

message NonEmptyDeclaration {
  enum Prio {
    UNSET = 0;
    IS_SET = 1;
  }
  required Property property = 1;
  required Expr expr = 2;
  optional Prio prio = 3;
}

message Expr {
  required Term term = 1;
  repeated OperatorTerm operator_terms = 2;
}

// Not in grammar.
message OperatorTerm {
  required Operator _operator = 1;
  required Term term = 2;
}

message Term {
  optional UnaryOperator unary_operator = 1;
  oneof rhs {
    //  [ NUMBER S* | PERCENTAGE S* | LENGTH S* | EMS S* | EXS S* | ANGLE S* |
    // TIME S* | FREQ S* | function ]
    TermPart term_part = 2;
    // | STRING
    String string = 3;
  }
  // S* | IDENT S* | URI S* | UNICODERANGE S* | hexcolor
  optional Ident ident = 4;
  optional Uri uri = 5;
  // TODO(metzman): Add UNICODERANGE token once (if) I implement it.
  optional Hexcolor hexcolor = 6;
}

// Not in grammar.
message TermPart {
  // NUMBER
  required Num number = 1;
  // S* | PERCENTAGE
  optional Num percentage = 2;  // num "%"
  // S* | LENGTH
  optional Length length = 3;
  optional Num ems = 4;  // {num}em
  optional Num exs = 5;  // {num}ex
  optional Angle angle = 6;
  optional Time time = 7;
  optional Freq freq = 8;
  optional Function function = 9;
}

message Function {
  required FunctionToken function_token = 1;
  required Expr expr = 2;
}

message Hexcolor {
  required HexcolorThree first_three = 1;
  optional HexcolorThree last_three = 2;
}

// Not in grammar.
message HexcolorThree {
  // 0-9A-Za-z
  required H ascii_value_1 = 1;
  required H ascii_value_2 = 2;
  required H ascii_value_3 = 3;
}

message Input {
  enum CSSParserMode {
    kHTMLStandardMode = 0;
    kHTMLQuirksMode = 1;
    kSVGAttributeMode = 2;
    kCSSViewportRuleMode = 3;
    kCSSFontFaceRuleMode = 4;
    kUASheetMode = 5;
  }
  required CSSParserMode css_parser_mode = 1;
  required bool defer_property_parsing = 2;
  required StyleSheet style_sheet = 3;
  required bool is_dynamic_profile = 4;
}
