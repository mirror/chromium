{
// This file specifies fields in ComputedStyle that we would like to
// generate, but are not CSS properties.

  parameters: {
    // If true, we do not include this field in ComputedStyleBase::InheritFrom
    // and ComputedStyleBase::CopyNonInheritedFromCached.
    custom_copy: {
      default: false,
    },

    // If true, we do not include this field in ComputedStyleBase::InheritedEqual
    // and ComputedStyleBase::NonInheritedEqual.
    custom_compare: {
      default: false,
    },

    // Controls whether the field has the "mutable" C++ keyword.
    mutable: {
      default: false,
    },

    // - longhands: ["property", "other-property"]
    // The property is a shorthand for several other properties.
    longhands: {
    },

    // - field_group
    // Name of the group that this field belongs to. Fields in the same group are stored
    // together as a nested class inside ComputedStyle and dynamically allocated on use.
    // Leave this out if the field is stored directly on ComputedStyle.
    // If you want to auto group this property use: field_group: "*[->subgroup]".
    // If you use the auto grouping function check if your property is in CSSPropertiesRanking.json5
    // -  If yes, only provide: field_group: "*"
    // -  If no, you can specify a subgroup following the asterisk: field_group: "*[->subgroup]"
    field_group: {
      value_type: "str"
    },

    // - field_size
    // Number of bits needed to store this field. Only used for storage_only
    // fields. If specified, the field will be stored as bit field. Otherwise
    // it will be stored as a normal data member.
    field_size: {
      valid_type: "int",
    },

    // - field_template
    // Affects how the interface to this field is generated.
    // TODO(sashab, meade): Remove this once TypedOM types are specified for
    // every property, since this value can be inferred from that.
    field_template: {
      valid_values: [
        // Field is stored as an enum and has a initial/getter/setter/resetter.
        // If include_paths is empty, we would also generate the corresponding
        // enum definition in ComputedStyleConstants.h.
        "keyword",
        // Field can take on any subset of values from a list of keywords.
        "multi_keyword",
        // Field stores a primitive value like int/bool. The type is specified by
        // type_name. The interface has a initial/getter/setter/resetter.
        "primitive",
        // Field is stored as a bool, whose default value is false
        // and can only be set to true. Has a initial/getter/setter.
        "monotonic_flag",
        // Field has type specified at type_name and has a getter/setter.
        // Also has a setter taking an rvalue reference. Cannot be packed.
        "external",
        // Only the storage is generated. The interface is handwritten.
        "storage_only",
        // Field is stored as a wrapper_pointer_name to a class.
        "pointer",
        // Preset "length" for external and Length class
        // This preset represents:  field_template: "external"
        //                          type_name: "Length"
        //                          include_paths: ["platform/Length.h"]
        "<[a-z]+>"
      ],
    },

    // - include_paths: ["path/to/file1.h", "path/to/file2.h"]
    // List of files containing the definitions of types in 'type_name'. Each of
    // these files will appear as a #include in ComputedStyleBase.h. For
    // example, if the type_name is 'Vector<String>', include_paths should be
    // ["platform/wtf/Vector.h", "platform/wtf/text/WTFString.h"]
    include_paths: {
      default: [],
    },

    // Name of the pointer type that wraps this field (e.g. RefPtr).
    // Can only be set if the field template is storage_only.
    wrapper_pointer_name: {
      valid_type: "str",
      valid_values: ["RefPtr", "Persistent", "std::unique_ptr"],
    },

    // - keywords: ["keyword1", "keyword2"]
    // This specifies all valid keyword values for the property.
    // TODO(sashab): Once all properties are represented here, delete
    // CSSValueKeywords.in and use this list instead.
    keywords: {
      default: [],
    },

    // - default_value: "keyword-value"
    // This specifies the default value for this field.
    // - for keyword fields, this is the initial keyword
    // - for other fields, this is a string containg the C++ expression
    //   that is used to initialise the field.
    default_value: {
    },

    // - inherited
    // The property will inherit by default if no value is specified, typically
    // mentioned in specifications as "Inherited: yes"
    inherited: {
      default: false,
      valid_type: "bool",
    },

    // - name_for_methods: "BlendMode"
    // Tweaks how we choose defaults for getter, setter, initial and type_name.
    // For example, setting this to BlendMode will make us use a setter of setBlendMode
    // - initial
    // The initial value accessor on the ComputedStyle, defaults to e.g. initialBoxShadow
    // - getter
    // The ComputedStyle getter, defaults to e.g. borderBottomLeft
    // - setter
    // The ComputedStyle setter, defaults to e.g. setBorderBottomLeft
    // - type_name
    // The computed type for the property. Only required for the default value
    // application, defaults to e.g. EDisplay
    name_for_methods: {
    },
    getter: {
    },
    setter: {
    },
    initial: {
    },
    type_name: {
    },

    // - computed_style_custom_functions: Any function specified in the list is not automatically
    // generated in ComputedStyle. Use this when a generated function is not correct.
    computed_style_custom_functions: {
      default: [],
      valid_type: "list",
      valid_values: ["getter", "setter", "reset", "mutable"],
    },

    // The rest is the same as CSSProperties.json5, but the only relevant ones in
    // this file are:
    // name, field_template, include_paths, default_value, type_name, keyword,
    // inherited
  },

  data: [
    {
      name: "IsLink",
      field_template: "monotonic_flag",
      default_value: "false",
      custom_copy: true,
      custom_compare: true,
    },
    {
      name: "BorderLeftColorIsCurrentColor",
      field_template: "primitive",
      default_value: "true",
      type_name: "bool",
      field_group: "surround",
    },
    {
      name: "BorderRightColorIsCurrentColor",
      field_template: "primitive",
      default_value: "true",
      type_name: "bool",
      field_group: "surround",
    },
    {
      name: "BorderBottomColorIsCurrentColor",
      field_template: "primitive",
      default_value: "true",
      type_name: "bool",
      field_group: "surround",
    },
    {
      name: "InsideLink",
      field_template: "keyword",
      default_value: "not-inside-link",
      keywords: ["not-inside-link", "inside-unvisited-link", "inside-visited-link"],
      inherited: true,
    },
    // Style can not be shared.
    {
      name: "Unique",
      field_template: "monotonic_flag",
      default_value: "false",
      custom_copy: true,
      custom_compare: true,
      mutable: true,
    },
    // Whether this style is affected by these pseudo-classes.
    {
      name: "AffectedByFocusWithin",
      field_template: "monotonic_flag",
      default_value: "false",
      custom_copy: true,
      custom_compare: true,
    },
    {
      name: "AffectedByHover",
      field_template: "monotonic_flag",
      default_value: "false",
      custom_copy: true,
      custom_compare: true,
    },
    {
      name: "AffectedByActive",
      field_template: "monotonic_flag",
      default_value: "false",
      custom_copy: true,
      custom_compare: true,
    },
    {
      name: "AffectedByDrag",
      field_template: "monotonic_flag",
      default_value: "false",
      custom_copy: true,
      custom_compare: true,
    },
    // A non-inherited property references a variable or @apply is used
    {
      name: "HasVariableReferenceFromNonInheritedProperty",
      field_template: "monotonic_flag",
      default_value: "false",
      custom_copy: true,
      custom_compare: true,
    },
    // Explicitly inherits a non-inherited property
    {
      name: "HasExplicitlyInheritedProperties",
      field_template: "monotonic_flag",
      default_value: "false",
      custom_copy: true,
      custom_compare: true,
      mutable: true,
    },
    // These are set if we used viewport or rem units when resolving a length.
    // TODO(shend): HasViewportUnits should be a monotonic_flag.
    {
      name: "HasViewportUnits",
      field_template: "primitive",
      default_value: "false",
      type_name: "bool",
      custom_compare: true,
    },
    {
      name: "HasRemUnits",
      field_template: "monotonic_flag",
      default_value: "false",
      custom_compare: true,
    },
    // These properties only have generated storage, and their methods are handwritten in ComputedStyle.
    // TODO(shend): Remove these fields and delete the 'storage_only' template.
    {
      name: "EmptyState",
      field_template: "primitive",
      default_value: "false",
      type_name: "bool",
      custom_copy: true,
      custom_compare: true,
      computed_style_custom_functions: ["getter", "setter"],
    },
    {
      name: "StyleType",
      field_template: "primitive",
      field_size: 6,
      default_value: "PseudoId::kPseudoIdNone",
      type_name: "unsigned",
      custom_copy: true,
      custom_compare: true,
      computed_style_custom_functions: ["getter", "setter"],
    },
    {
      name: "PseudoBits",
      field_template: "primitive",
      field_size: 8,
      default_value: "kPseudoIdNone",
      type_name: "unsigned",
      custom_copy: true,
      custom_compare: true,
      computed_style_custom_functions: ["getter", "setter"],
    },
    // True if 'underline solid' is the only text decoration on this element.
    {
      name: "HasSimpleUnderline",
      field_template: "primitive",
      default_value: "false",
      type_name: "bool",
      inherited: true,
      computed_style_custom_functions: ["getter", "setter"],
    },
    // TODO(shend): vertical align is actually a CSS property, but since we don't support union fields
    // which can be either a keyword or Length, this is specified in this file for now. Remove this
    // once we can support union fields.
    {
      name: "VerticalAlign",
      field_template: "primitive",
      field_size: 4,
      type_name: "unsigned",
      default_value: "static_cast<unsigned>(EVerticalAlign::kBaseline)",
      computed_style_custom_functions: ["getter", "setter"],
    },
    {
      name: "VerticalAlignLength",
      field_template: "external",
      default_value: "Length()",
      include_paths: ["platform/Length.h"],
      type_name: "Length",
      field_group: "box",
      computed_style_custom_functions: ["getter", "setter"],
    },
    {
      name: "border-image",
      field_template: "external",
      include_paths: ["core/style/NinePieceImage.h"],
      type_name: "NinePieceImage",
      field_group: "surround",
      default_value: "NinePieceImage()",
    },
    {
      name: "Background",
      field_template: "external",
      include_paths: ["core/style/FillLayer.h"],
      type_name: "FillLayer",
      default_value: "FillLayer(kBackgroundFillLayer, true)",
      field_group: "background",
      computed_style_custom_functions: ["getter", "setter"],
    },
    {
      name: "HasAutoClip",
      field_template: "primitive",
      type_name: "bool",
      default_value: "true",
      field_group: "visual",
      computed_style_custom_functions: ["getter", "setter"],
    },
    {
      name: "HasAutoZIndex",
      field_template: "primitive",
      type_name: "bool",
      field_group: "box",
      default_value: "true",
      computed_style_custom_functions: ["getter", "setter"],
    },
    {
      name: "font",
      field_template: "external",
      include_paths: ["platform/fonts/Font.h"],
      type_name: "Font",
      field_group: "inherited",
      inherited: true,
      default_value: "Font()",
      computed_style_custom_functions: ["getter", "setter"],
    },
    {
      name: "VisitedLinkColor",
      inherited: true,
      field_template: "<color>",
      field_group: "inherited",
      default_value: "Color::kBlack",
    },
    {
      name: "TextAutosizingMultiplier",
      inherited: true,
      field_template: "primitive",
      type_name: "float",
      field_group: "inherited",
      default_value: "1.0",
      computed_style_custom_functions: ["getter", "setter"],
    },
    {
      name: "VisitedLinkTextStrokeColor",
      inherited: true,
      field_template: "external",
      type_name: "Color",
      include_paths: ["platform/graphics/Color.h"],
      default_value: "Color()",
      field_group: "*",
      computed_style_custom_functions: ["getter", "setter"],
    },
    {
      name: "VisitedLinkTextFillColor",
      inherited: true,
      field_template: "external",
      type_name: "Color",
      include_paths: ["platform/graphics/Color.h"],
      default_value: "Color()",
      field_group: "*",
      computed_style_custom_functions: ["getter", "setter"],
    },
    {
      name: "VisitedLinkTextEmphasisColor",
      inherited: true,
      field_template: "external",
      type_name: "Color",
      include_paths: ["platform/graphics/Color.h"],
      default_value: "Color()",
      field_group: "*",
      computed_style_custom_functions: ["getter", "setter"],
    },
    {
      name: "VisitedLinkCaretColor",
      inherited: true,
      field_template: "external",
      type_name: "Color",
      include_paths: ["platform/graphics/Color.h"],
      default_value: "Color()",
      field_group: "*",
      computed_style_custom_functions: ["getter", "setter"],
    },
    {
      name: "CursorData",
      inherited: true,
      field_template: "external",
      type_name: "CursorList",
      include_paths: ["core/style/CursorList.h"],
      default_value: "nullptr",
      wrapper_pointer_name: "Persistent",
      field_group: "*",
      computed_style_custom_functions: ["getter", "setter"],
    },
    {
      name: "EffectiveZoom",
      inherited: true,
      field_template: "primitive",
      type_name: "float",
      default_value: "1.0f",
      field_group: "*",
      computed_style_custom_functions: ["getter", "setter"],
    },
    {
      name: "TextStrokeColorIsCurrentColor",
      inherited: true,
      field_template: "primitive",
      type_name: "bool",
      default_value: "true",
      field_group: "*",
      computed_style_custom_functions: ["getter", "setter"],
    },
    {
      name: "TextFillColorIsCurrentColor",
      inherited: true,
      field_template: "primitive",
      type_name: "bool",
      default_value: "true",
      field_group: "*",
      computed_style_custom_functions: ["getter", "setter"],
    },
    {
      name: "TextEmphasisColorIsCurrentColor",
      inherited: true,
      field_template: "primitive",
      type_name: "bool",
      default_value: "true",
      field_group: "*",
      computed_style_custom_functions: ["getter", "setter"],
    },
    {
      name: "CaretColorIsCurrentColor",
      inherited: true,
      field_template: "primitive",
      type_name: "bool",
      default_value: "false",
      field_group: "*",
      computed_style_custom_functions: ["getter", "setter"],
    },
    {
      name: "CaretColorIsAuto",
      inherited: true,
      field_template: "primitive",
      type_name: "bool",
      default_value: "true",
      field_group: "*",
      computed_style_custom_functions: ["getter", "setter"],
    },
    {
      name: "VisitedLinkTextStrokeColorIsCurrentColor",
      inherited: true,
      field_template: "primitive",
      type_name: "bool",
      default_value: "true",
      field_group: "*",
      computed_style_custom_functions: ["getter", "setter"],
    },
    {
      name: "VisitedLinkTextFillColorIsCurrentColor",
      inherited: true,
      field_template: "primitive",
      type_name: "bool",
      default_value: "true",
      field_group: "*",
      computed_style_custom_functions: ["getter", "setter"],
    },
    {
      name: "VisitedLinkTextEmphasisColorIsCurrentColor",
      inherited: true,
      field_template: "primitive",
      type_name: "bool",
      default_value: "true",
      field_group: "*",
      computed_style_custom_functions: ["getter", "setter"],
    },
    {
      name: "VisitedLinkCaretColorIsCurrentColor",
      inherited: true,
      field_template: "primitive",
      type_name: "bool",
      default_value: "false",
      field_group: "*",
      computed_style_custom_functions: ["getter", "setter"],
    },
    {
      name: "VisitedLinkCaretColorIsAuto",
      inherited: true,
      field_template: "primitive",
      type_name: "bool",
      default_value: "true",
      field_group: "*",
      computed_style_custom_functions: ["getter", "setter"],
    },
    {
      name: "TextEmphasisFill",
      inherited: true,
      field_template: "keyword",
      type_name: "TextEmphasisFill",
      default_value: "filled",
      keywords: ["filled", "open"],
      field_group: "*",
    },
    {
      name: "TextEmphasisMark",
      inherited: true,
      field_template: "keyword",
      type_name: "TextEmphasisMark",
      default_value: "none",
      keywords: ["none", "auto", "dot", "circle", "double-circle", "triangle", "sesame", "custom"],
      field_group: "*",
      computed_style_custom_functions: ["getter", "setter"],
    },
    {
      name: "TextIndentLine",
      inherited: true,
      field_template: "keyword",
      type_name: "TextIndentLine",
      keywords: ["first-line", "each-line"],
      default_value: "first-line",
      field_group: "*",
    },
    {
      name: "TextIndentType",
      inherited: true,
      field_template: "keyword",
      type_name: "TextIndentType",
      keywords: ["normal", "hanging"],
      default_value: "normal",
      field_group: "*",
    },
    // Though will-change is not itself an inherited property, the intent
    // expressed by 'will-change: contents' includes descendants.
    {
      name: "SubtreeWillChangeContents",
      inherited: true,
      field_template: "primitive",
      type_name: "bool",
      default_value: "false",
      field_group: "*",
    },
    {
      name: "SelfOrAncestorHasDirAutoAttribute",
      inherited: true,
      field_template: "primitive",
      type_name: "bool",
      default_value: "false",
      field_group: "*",
    },
    // Though position: sticky is not itself an inherited property, being a
    // descendent of a sticky element changes some document lifecycle logic.
    {
      name: "SubtreeIsSticky",
      inherited: true,
      field_template: "primitive",
      type_name: "bool",
      default_value: "false",
      field_group: "*",
    },
    {
      name: "HyphenationLimitBefore",
      inherited: true,
      field_template: "primitive",
      type_name: "short",
      default_value: "-1",
      field_group: "*",
      computed_style_custom_functions: ["getter", "setter"],
    },
    {
      name: "HyphenationLimitAfter",
      inherited: true,
      field_template: "primitive",
      type_name: "short",
      default_value: "-1",
      field_group: "*",
      computed_style_custom_functions: ["getter", "setter"],
    },
    {
      name: "HyphenationLimitLines",
      inherited: true,
      field_template: "primitive",
      type_name: "short",
      default_value: "-1",
      field_group: "*",
      computed_style_custom_functions: ["getter", "setter"],
    },
    {
      name: "EffectiveTouchAction",
      inherited: true,
      field_template: "primitive",
      include_paths: ["platform/graphics/TouchAction.h"],
      type_name: "TouchAction",
      field_size: 6,
      default_value: "TouchAction::kTouchActionAuto",
      field_group: "*",
      computed_style_custom_functions: ["getter", "setter"],
    },
    {
      name: "TextEmphasisCustomMark",
      inherited: true,
      field_template: "external",
      type_name: "AtomicString",
      include_paths: ["platform/wtf/text/AtomicString.h"],
      default_value: "AtomicString()",
      field_group: "*",
    },
    {
      name: "AppliedTextDecorations",
      inherited: true,
      field_template: "external",
      type_name: "AppliedTextDecorationList",
      include_paths: ["core/style/AppliedTextDecorationList.h"],
      default_value: "nullptr",
      wrapper_pointer_name: "RefPtr",
      field_group: "*",
      computed_style_custom_functions: ["getter", "setter"],
    },
    {
      name: "InheritedVariables",
      inherited: true,
      field_template: "external",
      type_name: "StyleInheritedVariables",
      include_paths: ["core/style/StyleInheritedVariables.h"],
      default_value: "nullptr",
      wrapper_pointer_name: "RefPtr",
      field_group: "*",
      computed_style_custom_functions: ["getter", "setter"],
    },
    {
      name: "Mask",
      field_template: "external",
      type_name: "FillLayer",
      field_group: "*",
      default_value: "FillLayer(kMaskFillLayer, true)",
      computed_style_custom_functions: ["getter", "setter"],
    },
    {
      name: "CounterDirectives",
      field_template: "external",
      type_name: "CounterDirectiveMap",
      field_group: "*",
      default_value: "nullptr",
      wrapper_pointer_name: "std::unique_ptr",
      include_paths: ["core/style/CounterDirectives.h"],
      computed_style_custom_functions: ["getter", "setter"],
    },
    {
      name: "Animations",
      field_template: "external",
      type_name: "CSSAnimationData",
      field_group: "*",
      default_value: "nullptr",
      wrapper_pointer_name: "std::unique_ptr",
      include_paths: ["core/animation/css/CSSAnimationData.h"],
      computed_style_custom_functions: ["getter", "setter"],
    },
    {
      name: "Transitions",
      field_template: "external",
      type_name: "CSSTransitionData",
      field_group: "*",
      default_value: "nullptr",
      wrapper_pointer_name: "std::unique_ptr",
      include_paths: ["core/animation/css/CSSTransitionData.h"],
      computed_style_custom_functions: ["getter", "setter"],
    },
    {
      name: "MaskBoxImage",
      field_template: "external",
      type_name: "NinePieceImage",
      field_group: "*",
      default_value: "NinePieceImage::MaskDefaults()",
      include_paths: ["core/style/NinePieceImage.h"],
      computed_style_custom_functions: ["getter", "setter"],
    },
    {
      name: "PageSize",
      field_template: "external",
      type_name: "FloatSize",
      field_group: "*",
      default_value: "FloatSize()",
      include_paths: ["platform/geometry/FloatSize.h"],
    },
    {
      name: "OutlineColorIsCurrentColor",
      field_template: "primitive",
      default_value: "true",
      type_name: "bool",
      field_group: "*",
    },
    // TODO(shend): Investigate why this doesn't interact with other outline fields.
    {
      name: "OutlineStyleIsAuto",
      field_template: "primitive",
      type_name: "bool",
      default_value: "false",
      field_group: "*",
    },
    {
      name: "VisitedLinkTextDecorationColor",
      field_template: "external",
      type_name: "StyleColor",
      field_group: "*",
      default_value: "StyleColor::CurrentColor()",
      computed_style_custom_functions: ["getter", "setter"],
    },
    {
      name: "VisitedLinkBackgroundColor",
      field_template: "external",
      type_name: "StyleColor",
      field_group: "*",
      default_value: "StyleColor(Color::kTransparent)",
      computed_style_custom_functions: ["getter", "setter"],
    },
    {
      name: "VisitedLinkOutlineColor",
      field_template: "external",
      type_name: "StyleColor",
      field_group: "*",
      default_value: "StyleColor::CurrentColor()",
      computed_style_custom_functions: ["getter", "setter"],
    },
    {
      name: "VisitedLinkBorderLeftColor",
      field_template: "external",
      type_name: "StyleColor",
      field_group: "*",
      default_value: "StyleColor::CurrentColor()",
      computed_style_custom_functions: ["getter", "setter"],
    },
    {
      name: "VisitedLinkBorderRightColor",
      field_template: "external",
      type_name: "StyleColor",
      field_group: "*",
      default_value: "StyleColor::CurrentColor()",
      computed_style_custom_functions: ["getter", "setter"],
    },
    {
      name: "VisitedLinkBorderTopColor",
      field_template: "external",
      type_name: "StyleColor",
      field_group: "*",
      default_value: "StyleColor::CurrentColor()",
      computed_style_custom_functions: ["getter", "setter"],
    },
    {
      name: "VisitedLinkBorderBottomColor",
      field_template: "external",
      type_name: "StyleColor",
      field_group: "*",
      default_value: "StyleColor::CurrentColor()",
      computed_style_custom_functions: ["getter", "setter"],
    },
    {
      name: "CallbackSelectors",
      field_template: "external",
      type_name: "Vector<String>",
      field_group: "*",
      default_value: "Vector<String>()",
      include_paths: ["platform/wtf/Vector.h", "platform/wtf/text/WTFString.h"],
      computed_style_custom_functions: ["getter", "setter"],
    },
    {
      name: "PaintImages",
      field_template: "external",
      type_name: "PaintImages",
      field_group: "*",
      default_value: "nullptr",
      wrapper_pointer_name: "std::unique_ptr",
      custom_compare: true,
      include_paths: ["core/style/PaintImages.h"],
      computed_style_custom_functions: ["getter", "setter"],
    },
    {
      name: "NonInheritedVariables",
      field_template: "external",
      type_name: "StyleNonInheritedVariables",
      field_group: "*",
      default_value: "nullptr",
      wrapper_pointer_name: "std::unique_ptr",
      include_paths: ["core/style/StyleNonInheritedVariables.h"],
      computed_style_custom_functions: ["getter", "setter"],
    },
    {
      name: "PageSizeType",
      field_template: "keyword",
      keywords: ["auto", "landscape", "portrait", "resolved"],
      field_group: "*",
      default_value: "auto",
    },
    {
      name: "HasCurrentOpacityAnimation",
      field_template: "primitive",
      type_name: "bool",
      field_group: "*",
      default_value: "false",
    },
    {
      name: "HasCurrentTransformAnimation",
      field_template: "primitive",
      type_name: "bool",
      field_group: "*",
      default_value: "false",
    },
    {
      name: "HasCurrentFilterAnimation",
      field_template: "primitive",
      type_name: "bool",
      field_group: "*",
      default_value: "false",
    },
    {
      name: "HasCurrentBackdropFilterAnimation",
      field_template: "primitive",
      type_name: "bool",
      field_group: "*",
      default_value: "false",
    },
    {
      name: "IsRunningOpacityAnimationOnCompositor",
      field_template: "primitive",
      type_name: "bool",
      field_group: "*",
      custom_compare: true,
      default_value: "false",
    },
    {
      name: "IsRunningTransformAnimationOnCompositor",
      field_template: "primitive",
      type_name: "bool",
      field_group: "*",
      custom_compare: true,
      default_value: "false",
    },
    {
      name: "IsRunningFilterAnimationOnCompositor",
      field_template: "primitive",
      type_name: "bool",
      field_group: "*",
      custom_compare: true,
      default_value: "false",
    },
    {
      name: "IsRunningBackdropFilterAnimationOnCompositor",
      field_template: "primitive",
      type_name: "bool",
      field_group: "*",
      custom_compare: true,
      default_value: "false",
    },
    // A stacking context is painted atomically and defines a stacking order,
    // whereas a containing stacking context defines in which order the stacking
    // contexts below are painted.
    // See CSS 2.1, Appendix E (https://www.w3.org/TR/CSS21/zindex.html) for more
    // details.
    {
      name: "IsStackingContext",
      field_template: "primitive",
      type_name: "bool",
      field_group: "*",
      default_value: "false",
    },
    // Plugins require accelerated compositing for reasons external to blink.
    // In which case, we need to update the ComputedStyle on the
    // LayoutEmbeddedObject, so store this bit so that the style actually changes
    // when the plugin becomes composited.
    {
      name: "RequiresAcceleratedCompositingForExternalReasons",
      field_template: "primitive",
      type_name: "bool",
      field_group: "*",
      default_value: "false",
    },
    {
      name: "HasInlineTransform",
      field_template: "primitive",
      type_name: "bool",
      field_group: "*",
      default_value: "false",
    },
    // Style adjustment for appearance is disabled when certain properties are set.
    {
      name: "HasAuthorBackground",
      field_template: "primitive",
      type_name: "bool",
      field_group: "*",
      default_value: "false",
    },
    {
      name: "HasAuthorBorder",
      field_template: "primitive",
      type_name: "bool",
      field_group: "*",
      default_value: "false",
    },
    {
      name: "WillChangeProperties",
      field_template: "external",
      type_name: "Vector<CSSPropertyID>",
      field_group: "*->will-change",
      default_value: "Vector<CSSPropertyID>()",
      include_paths: ["platform/wtf/Vector.h", "core/CSSPropertyNames.h"],
    },
    {
      name: "WillChangeContents",
      field_template: "primitive",
      type_name: "bool",
      field_group: "*->will-change",
      default_value: "false",
    },
    {
      name: "WillChangeScrollPosition",
      field_template: "primitive",
      type_name: "bool",
      field_group: "*->will-change",
      default_value: "false",
    },
    {
      name: "ColumnRuleColorIsCurrentColor",
      field_template: "primitive",
      default_value: "true",
      type_name: "bool",
      field_group: "*->multi-col",
    },
    {
      name: "VisitedLinkColumnRuleColor",
      field_template: "external",
      type_name: "StyleColor",
      field_group: "*->multi-col",
      default_value: "StyleColor::CurrentColor()",
      include_paths: ["core/css/StyleColor.h"],
      computed_style_custom_functions: ["getter", "setter"],
    },
    {
      name: "ColumnAutoWidth",
      field_template: "primitive",
      type_name: "bool",
      field_group: "*->multi-col",
      default_value: "true",
      computed_style_custom_functions: ["getter", "setter"],
    },
    {
      name: "ColumnAutoCount",
      field_template: "primitive",
      type_name: "bool",
      field_group: "*->multi-col",
      default_value: "true",
      computed_style_custom_functions: ["getter", "setter"],
    },
    {
      name: "ColumnNormalGap",
      field_template: "primitive",
      type_name: "bool",
      field_group: "*->multi-col",
      default_value: "true",
      computed_style_custom_functions: ["getter", "setter"],
    },
    {
      name: "NamedGridColumnLines",
      field_template: "external",
      type_name: "NamedGridLinesMap",
      field_group: "*->grid",
      default_value: "NamedGridLinesMap()",
      include_paths: ["core/style/NamedGridLinesMap.h"],
    },
    {
      name: "NamedGridRowLines",
      field_template: "external",
      type_name: "NamedGridLinesMap",
      field_group: "*->grid",
      default_value: "NamedGridLinesMap()",
      include_paths: ["core/style/NamedGridLinesMap.h"],
    },
    {
      name: "OrderedNamedGridColumnLines",
      field_template: "external",
      type_name: "OrderedNamedGridLines",
      field_group: "*->grid",
      default_value: "OrderedNamedGridLines()",
      include_paths: ["core/style/OrderedNamedGridLines.h"],
    },
    {
      name: "OrderedNamedGridRowLines",
      field_template: "external",
      type_name: "OrderedNamedGridLines",
      field_group: "*->grid",
      default_value: "OrderedNamedGridLines()",
      include_paths: ["core/style/OrderedNamedGridLines.h"],
    },
    {
      name: "AutoRepeatNamedGridColumnLines",
      field_template: "external",
      type_name: "NamedGridLinesMap",
      field_group: "*->grid",
      default_value: "NamedGridLinesMap()",
      include_paths: ["core/style/NamedGridLinesMap.h"],
    },
    {
      name: "AutoRepeatNamedGridRowLines",
      field_template: "external",
      type_name: "NamedGridLinesMap",
      field_group: "*->grid",
      default_value: "NamedGridLinesMap()",
      include_paths: ["core/style/NamedGridLinesMap.h"],
    },
    {
      name: "AutoRepeatOrderedNamedGridColumnLines",
      field_template: "external",
      type_name: "OrderedNamedGridLines",
      field_group: "*->grid",
      default_value: "OrderedNamedGridLines()",
      include_paths: ["core/style/OrderedNamedGridLines.h"],
    },
    {
      name: "AutoRepeatOrderedNamedGridRowLines",
      field_template: "external",
      type_name: "OrderedNamedGridLines",
      field_group: "*->grid",
      default_value: "OrderedNamedGridLines()",
      include_paths: ["core/style/OrderedNamedGridLines.h"],
    },
    {
      name: "NamedGridArea",
      field_template: "external",
      type_name: "NamedGridAreaMap",
      field_group: "*->grid",
      default_value: "NamedGridAreaMap()",
      include_paths: ["core/style/GridArea.h"]
    },
    {
      name: "NamedGridAreaRowCount",
      field_template: "primitive",
      type_name: "size_t",
      field_group: "*->grid",
      default_value: "0",
    },
    {
      name: "NamedGridAreaColumnCount",
      field_template: "primitive",
      type_name: "size_t",
      field_group: "*->grid",
      default_value: "0",
    },
    {
      name: "GridAutoRepeatColumns",
      field_template: "external",
      type_name: "Vector<GridTrackSize>",
      field_group: "*->grid",
      default_value: "Vector<GridTrackSize>()",
      include_paths: ["platform/wtf/Vector.h", "core/style/GridTrackSize.h"],
    },
    {
      name: "GridAutoRepeatRows",
      field_template: "external",
      type_name: "Vector<GridTrackSize>",
      field_group: "*->grid",
      default_value: "Vector<GridTrackSize>()",
      include_paths: ["platform/wtf/Vector.h", "core/style/GridTrackSize.h"],
    },
    {
      name: "GridAutoRepeatColumnsInsertionPoint",
      field_template: "primitive",
      type_name: "size_t",
      field_group: "*->grid",
      default_value: "0",
    },
    {
      name: "GridAutoRepeatRowsInsertionPoint",
      field_template: "primitive",
      type_name: "size_t",
      field_group: "*->grid",
      default_value: "0",
    },
    {
      name: "GridAutoRepeatColumnsType",
      field_template: "keyword",
      type_name: "AutoRepeatType",
      field_group: "*->grid",
      keywords: ["no-auto-repeat", "auto-fill", "auto-fit"],
      default_value: "no-auto-repeat",
    },
    {
      name: "GridAutoRepeatRowsType",
      field_template: "keyword",
      type_name: "AutoRepeatType",
      field_group: "*->grid",
      keywords: ["no-auto-repeat", "auto-fill", "auto-fit"],
      default_value: "no-auto-repeat",
    },
  ],
}
