# Copyright 2014 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//third_party/WebKit/Source/config.gni")

blink_modules_output_dir = "$root_gen_dir/blink/modules"

_gypi = exec_script(
        "//build/gypi_to_gn.py",
        [
          rebase_path("modules.gypi"),
          "--replace=<(SHARED_INTERMEDIATE_DIR)=$root_gen_dir",
          "--replace=<(blink_modules_output_dir)=$blink_modules_output_dir",
        ],
        "scope",
        [ "modules.gypi" ])

_tmp_modules_idl_files = _gypi.modules_idl_files

# modules_idl_files has a magic variable in it that is an embedder hook,
# remove that since it's not a file (need to do this before rebasing).
_tmp_modules_idl_files -= [ "<@(extra_blink_module_idl_files)" ]
modules_idl_files = get_path_info(_tmp_modules_idl_files, "abspath")

modules_dictionary_idl_files =
    get_path_info(_gypi.modules_dictionary_idl_files, "abspath")

# 'partial interface' or target (right side of) 'implements'
modules_dependency_idl_files =
    get_path_info(_gypi.modules_dependency_idl_files, "abspath")

modules_event_idl_files =
    get_path_info(_gypi.modules_event_idl_files, "abspath")

# interfaces that inherit from Event
generated_modules_files =
    get_path_info(_gypi.generated_modules_files, "abspath")

generated_modules_dictionary_files =
    get_path_info(_gypi.generated_modules_dictionary_files, "abspath")

# Remove GYP variables from the list (need to do this before rebasing).
_tmp_modules_files = _gypi.modules_files
_tmp_modules_files -= [
  "<@(extra_blink_module_files)",
  "<@(generated_modules_dictionary_files)",
  "<@(generated_modules_files)",
]
modules_files = get_path_info(_tmp_modules_files, "abspath")

# Account for GYP var expansion.
modules_files += generated_modules_files + generated_modules_dictionary_files

# 'partial interface' or target (right side of) 'implements'
modules_testing_dependency_idl_files =
    get_path_info(_gypi.modules_testing_dependency_idl_files, "abspath")

# Defines a part of blink modules. This is either a source set or a static
# library with defaults for commonly-used values.
#
#   deps
#      Default deps are automatically appended to any specified on the caller.
#
#   visibility
#      Normal meaning if defined. If undefined, defaults to everything in core.
template("blink_modules_sources") {
  if (is_component_build) {
    target_type = "source_set"
  } else {
    target_type = "static_library"
  }

  target(target_type, target_name) {
    # The visibility will get overridden by forward_variables_from below if the
    # invoker defined it.
    visibility = [ "//third_party/WebKit/Source/modules/*" ]

    deps = [
      "//third_party/WebKit/Source/core",
      "//third_party/WebKit/Source/modules:make_modules_generated",
      "//third_party/icu",
    ]
    if (defined(invoker.deps)) {
      deps += invoker.deps
    }

    # Take everything else not handled above from the invoker.
    forward_variables_from(invoker, "*", [ "deps" ])
  }
}
set_defaults("blink_modules_sources") {
  # This sets the default list of configs when the blink_core_sources target
  # is defined. The default_compiler_configs comes from BUILDCONFIG.gn and
  # is the list normally applied to static libraries and source sets.
  configs = default_compiler_configs
  configs += [
    # TODO(jschuh): crbug.com/167187 fix size_t to int truncations.
    "//build/config/compiler:no_size_t_to_int_warning",
    "//third_party/WebKit/Source:config",
    "//third_party/WebKit/Source/modules:modules_implementation",
    "//third_party/WebKit/Source:non_test_config",
    "//third_party/WebKit/Source:inside_blink",
  ]
  if (remove_webcore_debug_symbols) {
    configs -= [ "//build/config/compiler:default_symbols" ]
    configs += [ "//build/config/compiler:no_symbols" ]
  }
}
