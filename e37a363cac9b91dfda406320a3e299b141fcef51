{
  "comments": [
    {
      "key": {
        "uuid": "b6bdbaf3_d8e2f108",
        "filename": "net/base/mime_sniffer_fuzzer.cc",
        "patchSetId": 2
      },
      "lineNbr": 48,
      "author": {
        "id": 1160910
      },
      "writtenOn": "2018-01-12T23:01:30Z",
      "side": 1,
      "message": "Shall we do the truncation after the url and mime_type_hint has been extracted? The fuzzer should still be able to blow up those strings.",
      "revId": "e37a363cac9b91dfda406320a3e299b141fcef51",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9f4d1ceb_d8c9b8c7",
        "filename": "net/base/mime_sniffer_fuzzer.cc",
        "patchSetId": 2
      },
      "lineNbr": 48,
      "author": {
        "id": 1149974
      },
      "writtenOn": "2018-01-13T00:48:57Z",
      "side": 1,
      "message": "I\u0027d rather do:\n\n  if (size \u003e kMaxInputSize) return 0;\n\nThus, fuzzing engine could \"learn\" that long inputs do not make sense, as they don\u0027t give any new coverage. While with current approach, fuzzing engine can blindly believe that longs inputs are useful and mutation-worthy.",
      "parentUuid": "b6bdbaf3_d8e2f108",
      "revId": "e37a363cac9b91dfda406320a3e299b141fcef51",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0dbec6ea_85483b8e",
        "filename": "net/base/mime_sniffer_fuzzer.cc",
        "patchSetId": 2
      },
      "lineNbr": 48,
      "author": {
        "id": 1160910
      },
      "writtenOn": "2018-01-16T15:09:01Z",
      "side": 1,
      "message": "Ah. Good to know FFR.\n\nSo yeah, I\u0027d suggest combining the two. Don\u0027t check the size too early. Extract the url and mime_type_hint values which aren\u0027t size constrained, but return early afterwards if the remainder (i.e. the buffer to sniff) is larger than kMaxInputSize.",
      "parentUuid": "9f4d1ceb_d8c9b8c7",
      "revId": "e37a363cac9b91dfda406320a3e299b141fcef51",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}