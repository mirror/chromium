{
  "comments": [
    {
      "key": {
        "uuid": "da14af1a_1a497329",
        "filename": "/COMMIT_MSG",
        "patchSetId": 6
      },
      "lineNbr": 7,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2018-01-23T01:52:00Z",
      "side": 1,
      "message": "nit: We\u0027re protecting more than this now.  Let\u0027s update the description once we settle on the right things to be checking.",
      "range": {
        "startLine": 7,
        "startChar": 44,
        "endLine": 7,
        "endChar": 62
      },
      "revId": "b75ca80d8a0585441376aa7770ad8982222bf315",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f8582200_f40f3243",
        "filename": "chrome/browser/devtools/devtools_sanity_browsertest.cc",
        "patchSetId": 6
      },
      "lineNbr": 2107,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2018-01-23T01:52:00Z",
      "side": 1,
      "message": "It seems like we don\u0027t want to prevent this.  Could be useful to let pages link to their own blob and filesystem URLs in DevTools.\n\nblob:chrome://foo is a different story, and should be blocked if we\u0027re blocking chrome:// URLs in general.",
      "revId": "b75ca80d8a0585441376aa7770ad8982222bf315",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "95b8ac75_bba63a03",
        "filename": "chrome/browser/devtools/devtools_sanity_browsertest.cc",
        "patchSetId": 6
      },
      "lineNbr": 2109,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2018-01-23T01:52:00Z",
      "side": 1,
      "message": "view-source: is a prefix, so this looks like an invalid URL.  I\u0027m not opposed to blocking invalid URLs, but you may also want to test that view-source:http://chromium.org is not blocked while view-source:chrome://settings is blocked.",
      "revId": "b75ca80d8a0585441376aa7770ad8982222bf315",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ef48e25e_db1d83aa",
        "filename": "chrome/browser/devtools/devtools_sanity_browsertest.cc",
        "patchSetId": 6
      },
      "lineNbr": 2110,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2018-01-23T01:52:00Z",
      "side": 1,
      "message": "Blocking file:// URLs seems like a good call.",
      "revId": "b75ca80d8a0585441376aa7770ad8982222bf315",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "09de61b6_c5f1bcd9",
        "filename": "chrome/browser/devtools/devtools_sanity_browsertest.cc",
        "patchSetId": 6
      },
      "lineNbr": 2124,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2018-01-23T01:52:00Z",
      "side": 1,
      "message": "nit: EXPECT_EQ to let the rest of the test cases run and get all the output at once?\n\nYou can also use something like the line below within the for loop to print more context about which test case is failing:\nSCOPED_TRACE(base::StringPrintf(\"...while testing URL: %s\", pair.first));",
      "range": {
        "startLine": 2124,
        "startChar": 4,
        "endLine": 2124,
        "endChar": 13
      },
      "revId": "b75ca80d8a0585441376aa7770ad8982222bf315",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "52cbdc29_e052066c",
        "filename": "chrome/browser/devtools/devtools_window.cc",
        "patchSetId": 6
      },
      "lineNbr": 1292,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2018-01-23T01:52:00Z",
      "side": 1,
      "message": "Any chance you could use the corresponding RenderFrameHost\u0027s process if it does exist (i.e., not in the remote debugging case)?",
      "range": {
        "startLine": 1292,
        "startChar": 10,
        "endLine": 1292,
        "endChar": 53
      },
      "revId": "b75ca80d8a0585441376aa7770ad8982222bf315",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}