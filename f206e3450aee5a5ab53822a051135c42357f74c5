{
  "comments": [
    {
      "key": {
        "uuid": "944369bf_c375acc0",
        "filename": "content/child/service_worker/service_worker_network_provider.cc",
        "patchSetId": 4
      },
      "lineNbr": 203,
      "author": {
        "id": 1161621
      },
      "writtenOn": "2017-08-16T05:29:16Z",
      "side": 1,
      "message": "Notify SWProviderContext to close SWProviderHost mojo connection.\nSeems this is necessary, otherwise some layout tests and browser_tests fail, showed by trybots result for ps#1. I\u0027m not very clear about the root cause, would you please help to elaborate more to speed up my investigation to dig deeper? Thanks!\n\nIIUC SWNetworkProvider has different lifetime with SWProviderContext, which is held as scoped_refptr\u003c\u003e by both SWNetworkProvider and WebServiceWorkerProviderImpl. So maybe we should also modify the existing comments about SWProviderContext?\n\"\n// Created and destructed on the main thread. Unless otherwise noted, all\n// methods are called on the main thread. The lifetime of this class is equals\n// to the corresponding ServiceWorkerNetworkProvider.\n\"\nat https://cs.chromium.org/chromium/src/content/child/service_worker/service_worker_provider_context.h?rcl\u003dadda1f9b50e60b82bd26c04bcf883bf7aa3d1289\u0026l\u003d41",
      "range": {
        "startLine": 203,
        "startChar": 15,
        "endLine": 203,
        "endChar": 41
      },
      "revId": "f206e3450aee5a5ab53822a051135c42357f74c5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "510a1764_92659142",
        "filename": "content/child/service_worker/service_worker_network_provider.cc",
        "patchSetId": 4
      },
      "lineNbr": 203,
      "author": {
        "id": 1125915
      },
      "writtenOn": "2017-08-16T08:48:36Z",
      "side": 1,
      "message": "I\u0027m also still investigating, but SWContextClinent seems one of the owners too. At least, I don\u0027t think we need to keep it in SWContextClient during worker is running since it\u0027s just used at the startup, and keeping SWProviderContext in SWContextClient seems problematic.",
      "parentUuid": "944369bf_c375acc0",
      "range": {
        "startLine": 203,
        "startChar": 15,
        "endLine": 203,
        "endChar": 41
      },
      "revId": "f206e3450aee5a5ab53822a051135c42357f74c5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "41f09517_86b68c24",
        "filename": "content/child/service_worker/service_worker_network_provider.cc",
        "patchSetId": 4
      },
      "lineNbr": 203,
      "author": {
        "id": 1000128
      },
      "writtenOn": "2017-08-16T23:19:52Z",
      "side": 1,
      "message": "Let me investigate the failures too. I suspect this CL is unmasking some bug in the our current code.\n\nHum, I totally missed that ServiceWorkerContextClient also has a ref ptr to ServiceWorkerProviderContext as shimazu mentions above.\n\nI don\u0027t think we want to kill the bindings in the network provider dtor, since that kills the ProviderHost on the browser. As speculated on the crash bug, it\u0027s conceivable that WebServiceWorkerProviderImpl still is alive and causes IPC with the same provider_id to be sent to the browser. It seems we should keep the bindings alive as long as ServiceWorkerProviderContext is alive.",
      "parentUuid": "510a1764_92659142",
      "range": {
        "startLine": 203,
        "startChar": 15,
        "endLine": 203,
        "endChar": 41
      },
      "revId": "f206e3450aee5a5ab53822a051135c42357f74c5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2dbea884_aff25f8f",
        "filename": "content/child/service_worker/service_worker_network_provider.cc",
        "patchSetId": 4
      },
      "lineNbr": 203,
      "author": {
        "id": 1000128
      },
      "writtenOn": "2017-08-17T02:04:58Z",
      "side": 1,
      "message": "Looking specifically at client-navigate.https.html, it looks like the problem is we call frame.remove() to remove the Client and then expect ServiceWorkerRegistration.unregister() to cleanly remove the worker. But when we move the Mojo bindings, frame.remove() no longer causes the client to synchronously-(ish) be removed: the ProviderHost stays alive so the Client still exists, which means unregister() doesn\u0027t take effect.\n\nIt\u0027s possible this is a bug in the existing code... I don\u0027t know if its guaranteed that even if the Mojo binding is destroyed as SWNetworkProvider does now, the ServiceWorkerProviderHost is destructed in a \"timely\" manner. I don\u0027t know if we have the ordering guarantees we need.",
      "parentUuid": "41f09517_86b68c24",
      "range": {
        "startLine": 203,
        "startChar": 15,
        "endLine": 203,
        "endChar": 41
      },
      "revId": "f206e3450aee5a5ab53822a051135c42357f74c5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6725dd97_71e40866",
        "filename": "content/child/service_worker/service_worker_network_provider.cc",
        "patchSetId": 4
      },
      "lineNbr": 203,
      "author": {
        "id": 1161621
      },
      "writtenOn": "2017-08-17T03:15:43Z",
      "side": 1,
      "message": "Currently SWProviderHost mojo connections for client context and sw context are bound on different IPC channels.\n  For client context: bound on legacy IPC channel.\n  For sw context:     bound on EmbeddedWorkerInstanceClientImpl mojo pipe, which is different with legacy IPC channel.\n\nSo for the case of client-navigate.https.html, frame.remove() causes SWNetworkProvider destruction synchronously, this leads to SWProviderHost mojo connection broken causing content::SWProviderHost destruction in browser side, the broken behavior is just like a broken notification IPC message sent to browser via the bound IPC channel, and because SWRegistration.unregister also sends UnRegister IPC via the same IPC channel, so the ordering is guaranteed and all the tests were running well before this CL.\nBut with ps#1, seems frame.remove() does not destruct SWProviderContext synchronously, so it fails for so many tests.",
      "parentUuid": "2dbea884_aff25f8f",
      "range": {
        "startLine": 203,
        "startChar": 15,
        "endLine": 203,
        "endChar": 41
      },
      "revId": "f206e3450aee5a5ab53822a051135c42357f74c5",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}