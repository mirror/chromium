{
  "comments": [
    {
      "key": {
        "uuid": "ab9a88de_04609f01",
        "filename": "chrome/browser/password_manager/password_manager_browsertest.cc",
        "patchSetId": 6
      },
      "lineNbr": 594,
      "author": {
        "id": 1002737
      },
      "writtenOn": "2018-01-22T11:20:04Z",
      "side": 1,
      "message": "I agree that the test meant to do ExecuteScriptWithScopedUserGesture instead of content::ExecuteScript. I also think that it\u0027s applicable to all \u0027ExecuteScript\u0027 instances in this file and not just 6 calls.\nI don\u0027t understand though why the tests are failing with ExecuteScript in the new architecture. Do you have an explanation and corresponding logs?",
      "range": {
        "startLine": 594,
        "startChar": 14,
        "endLine": 594,
        "endChar": 57
      },
      "revId": "73d052170dce722e6144e949b004df75e59da093",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "07132870_6184c444",
        "filename": "chrome/browser/password_manager/password_manager_browsertest.cc",
        "patchSetId": 6
      },
      "lineNbr": 594,
      "author": {
        "id": 1125369
      },
      "writtenOn": "2018-01-22T16:48:50Z",
      "side": 1,
      "message": "Done substituting all |ExecuteScript()| here.\n\nHere is my explanation for the 6 test failures with UserActivationV2:\n\nIn our new model, user activation is a frame state which doesn\u0027t automatically expire when the \"holder\" var goes out of scope (unlike UserGestureIndicator).  Here is the design doc if you are interested:\nhttps://docs.google.com/document/d/1erpl1yqJlc1pH0QvVVmi1s3WzqQLsEXTLLh6VuYp228/edit#heading\u003dh.hy5wkxbrpq6o\n\nThe 6 failing tests here assume that the script has user activation but following tasks don\u0027t.\n\nE.g. in PasswordManagerBrowserTestBase.NoFormElementTest, the ExecuteScript call in VerifyPasswordIsSavedAndFilled runs with activation but the test stalls in a later task if the task finds a user activation.  My debugging suggests that a RenderFrameImpl::CommitNavigation() becomes successful with an available user activation in our new model which the test doesn\u0027t like.\n\nhttps://logs.chromium.org/v/?s\u003dchromium%2Fbb%2Ftryserver.chromium.linux%2Flinux_chromium_rel_ng%2F622292%2F%2B%2Frecipes%2Fsteps%2Fbrowser_tests__with_patch_%2F0%2Flogs%2FPasswordManagerBrowserTestBase.NoFormElementTest%2F0\n\nDoes it make sense to you now?",
      "parentUuid": "ab9a88de_04609f01",
      "range": {
        "startLine": 594,
        "startChar": 14,
        "endLine": 594,
        "endChar": 57
      },
      "revId": "73d052170dce722e6144e949b004df75e59da093",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f0fe5871_37a1442c",
        "filename": "chrome/browser/password_manager/password_manager_browsertest.cc",
        "patchSetId": 6
      },
      "lineNbr": 594,
      "author": {
        "id": 1002737
      },
      "writtenOn": "2018-01-22T18:28:59Z",
      "side": 1,
      "message": "Can you tell me how to enable the feature so that I can play with the tests tomorrow? It sounds very concerning if CommitNavigation() isn\u0027t successful today.\n\nI feel that my question from another comment isn\u0027t addressed. Why would a test use content::ExecuteScript consciously instead of content::ExecuteScriptWithScopedUserGesture? Is there an example? I\u0027m asking because if nobody needs content::ExecuteScript (i.e. with pending activation) then we could just update content::ExecuteScript with the new implementation.",
      "parentUuid": "07132870_6184c444",
      "range": {
        "startLine": 594,
        "startChar": 14,
        "endLine": 594,
        "endChar": 57
      },
      "revId": "73d052170dce722e6144e949b004df75e59da093",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "147b7cd6_18b112d4",
        "filename": "chrome/browser/password_manager/password_manager_browsertest.cc",
        "patchSetId": 6
      },
      "lineNbr": 594,
      "author": {
        "id": 1125369
      },
      "writtenOn": "2018-01-22T20:25:05Z",
      "side": 1,
      "message": "\u003e Can you tell me how to enable the feature so that I can play with the tests tomorrow? It sounds very concerning if CommitNavigation() isn\u0027t successful today.\n\nIf you can provide some insight re what these tests want the browser to do after script execution, that will be great!  I originally guessed the tests doesn\u0027t want navigation so tried adding \"navigate \u003d false;\" to the script (blindly :( ) w/o any luck.\n\nYou can enable the feature through any of these:\n--enable-features\u003dUserActivationV2\nchrome://flags/#user-activation-v2\n\n\n\u003e I feel that my question from another comment isn\u0027t addressed. Why would a test use content::ExecuteScript consciously instead of content::ExecuteScriptWithScopedUserGesture? Is there an example? I\u0027m asking because if nobody needs content::ExecuteScript (i.e. with pending activation) then we could just update content::ExecuteScript with the new implementation.\n\nI see your point now.  For examples in the other category, see the failures here:\nhttps://ci.chromium.org/buildbot/tryserver.chromium.linux/linux_chromium_rel_ng/629279\nThe answer to \"why\" depends on what a particular test wants to check.  Suppose w.l.o.g that the test is \"if X then Y\".\n\n- If the JS in the test is part of the precondition (X), then check Y should be done in the same context of the script (that assumes user activation).  From a user interaction perspective, it is equivalent to: X \u003d {user interacted with the page, some JS got executed} and Y \u003d {then the browser did something as a result of both of these}.  The last part shouldn\u0027t just assume there is no user gesture (unless of course the JS itself consumes it though a popup or navigation).\n\n- If the JS in the test is not part of \"if X then Y\" but merely a setup shortcut for the test (e.g. to avoid having C++ APIs only for the setup), it could be fine to test \"if X then Y\" outside of the JS context.  Hence partially resetting the script\u0027s outcome through a forced consumption of activation could be reasonable.\n\nFeel free to VC to make sure we are on the same page.",
      "parentUuid": "f0fe5871_37a1442c",
      "range": {
        "startLine": 594,
        "startChar": 14,
        "endLine": 594,
        "endChar": 57
      },
      "revId": "73d052170dce722e6144e949b004df75e59da093",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f9272751_26ab743c",
        "filename": "content/public/test/browser_test_utils.cc",
        "patchSetId": 6
      },
      "lineNbr": 151,
      "author": {
        "id": 1002737
      },
      "writtenOn": "2018-01-22T11:20:04Z",
      "side": 1,
      "message": "I don\u0027t think it\u0027s common for Chrome to omit the parameters. Doesn\u0027t WARN_UNUSED_RESULT work if you apply if to definition?",
      "range": {
        "startLine": 151,
        "startChar": 25,
        "endLine": 151,
        "endChar": 30
      },
      "revId": "73d052170dce722e6144e949b004df75e59da093",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "63dfdacd_4bdda8ee",
        "filename": "content/public/test/browser_test_utils.cc",
        "patchSetId": 6
      },
      "lineNbr": 151,
      "author": {
        "id": 1125369
      },
      "writtenOn": "2018-01-22T16:48:50Z",
      "side": 1,
      "message": "- Done with param names.\n- Tried the following:\n  bool f(args) WARN_UNUSED_RESULT {body}\n  GCC doesn\u0027t like it (\"GCC does not allow \u0027warn_unused_result\u0027 attribute in this position on a function definition...\").  Not sure why we have other examples in our codebase that works.\n\nAnyway, this is not part of this CL, so marking this comment as resolved.",
      "parentUuid": "f9272751_26ab743c",
      "range": {
        "startLine": 151,
        "startChar": 25,
        "endLine": 151,
        "endChar": 30
      },
      "revId": "73d052170dce722e6144e949b004df75e59da093",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a8e23f3d_5fe8daf5",
        "filename": "content/public/test/browser_test_utils.cc",
        "patchSetId": 6
      },
      "lineNbr": 169,
      "author": {
        "id": 1002737
      },
      "writtenOn": "2018-01-22T11:20:04Z",
      "side": 1,
      "message": "Does this code path make sense for any of the tests we have? It seems strange because if the user gesture isn\u0027t needed for executing |script| then the function can just use ExecuteJavaScriptForTests.",
      "range": {
        "startLine": 168,
        "startChar": 1,
        "endLine": 169,
        "endChar": 37
      },
      "revId": "73d052170dce722e6144e949b004df75e59da093",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ac6dc60f_ac9fb8c2",
        "filename": "content/public/test/browser_test_utils.cc",
        "patchSetId": 6
      },
      "lineNbr": 169,
      "author": {
        "id": 1125369
      },
      "writtenOn": "2018-01-22T16:48:50Z",
      "side": 1,
      "message": "I know that all tests in password_manager_browsertest.cc pass if they all use scoped user activation as in my latest patch (which is the same as patch 4 btw).  Hopefully that addresses your concern.\n\nNote, however, that there two separate expectations to consider:\n- if the script expects a user gesture, and\n- if the test-tasks after the script expects a user gesture.\n\nLet\u0027s continue the discussion in my comment in password_manager_browsertest.cc where it seems more relevant (so marking this comment as resolved in favor of the other one).",
      "parentUuid": "a8e23f3d_5fe8daf5",
      "range": {
        "startLine": 168,
        "startChar": 1,
        "endLine": 169,
        "endChar": 37
      },
      "revId": "73d052170dce722e6144e949b004df75e59da093",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}