{
  "comments": [
    {
      "key": {
        "uuid": "ce784fdd_1d1fd6ed",
        "filename": "third_party/WebKit/Source/build/scripts/core/css/properties/templates/CSSPropertyAPI.h.tmpl",
        "patchSetId": 1
      },
      "lineNbr": 36,
      "author": {
        "id": 1197444
      },
      "writtenOn": "2017-09-27T00:17:36Z",
      "side": 1,
      "message": "maybe GetId -\u003e PropertyID?",
      "revId": "22431348a24373232ce636043c78b09ba3c99328",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2f412dc3_7ed03b85",
        "filename": "third_party/WebKit/Source/build/scripts/core/css/properties/templates/CSSPropertyAPI.h.tmpl",
        "patchSetId": 1
      },
      "lineNbr": 36,
      "author": {
        "id": 1116008
      },
      "writtenOn": "2017-09-27T03:53:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ce784fdd_1d1fd6ed",
      "revId": "22431348a24373232ce636043c78b09ba3c99328",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "463d3daf_4c9c4678",
        "filename": "third_party/WebKit/Source/build/scripts/core/css/properties/templates/CSSPropertyAPI.h.tmpl",
        "patchSetId": 1
      },
      "lineNbr": 75,
      "author": {
        "id": 1197444
      },
      "writtenOn": "2017-09-27T00:17:36Z",
      "side": 1,
      "message": "Alternatively, we could make GetID() virtual:\n\n    virtual CSSPropertyID GetID() const { NOTREACHED(); }\n\nthen in a subclass:\n\n    CSSPropertyID GetID() const override { return CSSPropertyIDFoo; }\n\nIt seems more consistent with the other methods like IsDescriptor() and SupportsPercentage(). But I\u0027m okay with what you have since it\u0027s only going to be temporary I\u0027m guessing?",
      "revId": "22431348a24373232ce636043c78b09ba3c99328",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6c1aeb6d_07382d4c",
        "filename": "third_party/WebKit/Source/build/scripts/core/css/properties/templates/CSSPropertyAPI.h.tmpl",
        "patchSetId": 1
      },
      "lineNbr": 75,
      "author": {
        "id": 1116008
      },
      "writtenOn": "2017-09-27T03:53:33Z",
      "side": 1,
      "message": "This would make perfect sense if we had a class for every property. Many of the properties still share API constructors, with instances only discriminated by the stored CSSPropertyID. Prior to this change, properties that shared constructors also shared an instance.",
      "parentUuid": "463d3daf_4c9c4678",
      "revId": "22431348a24373232ce636043c78b09ba3c99328",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4744ea3d_76d1d14d",
        "filename": "third_party/WebKit/Source/build/scripts/core/css/properties/templates/CSSPropertyAPI.h.tmpl",
        "patchSetId": 1
      },
      "lineNbr": 75,
      "author": {
        "id": 1197444
      },
      "writtenOn": "2017-09-27T03:56:59Z",
      "side": 1,
      "message": "Ah makes sense! Will we eventually remove shared APIs? Seems better to me if properties A1 and A2 share the same parent class A with all the common logic, than having A1 and A2 use the same class A (which I believe is what \u0027api_class\u0027 is for).",
      "parentUuid": "6c1aeb6d_07382d4c",
      "revId": "22431348a24373232ce636043c78b09ba3c99328",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}