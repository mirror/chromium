{
  "comments": [
    {
      "key": {
        "uuid": "efd3f9a6_81855ce1",
        "filename": "chrome/browser/ui/tabs/tab_metrics_event.proto",
        "patchSetId": 4
      },
      "lineNbr": 49,
      "author": {
        "id": 1000763
      },
      "writtenOn": "2017-12-05T18:11:49Z",
      "side": 1,
      "message": "Scheme is quite generic. Maybe ProtocalHandlerType?",
      "range": {
        "startLine": 49,
        "startChar": 7,
        "endLine": 49,
        "endChar": 14
      },
      "revId": "1b64108d137a2c7cac696c3b9a5fb02e82d56b3f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1d741845_7a91252e",
        "filename": "chrome/browser/ui/tabs/tab_metrics_event.proto",
        "patchSetId": 4
      },
      "lineNbr": 49,
      "author": {
        "id": 1003321
      },
      "writtenOn": "2017-12-07T20:37:53Z",
      "side": 1,
      "message": "How about ProtocolHandlerScheme.",
      "parentUuid": "efd3f9a6_81855ce1",
      "range": {
        "startLine": 49,
        "startChar": 7,
        "endLine": 49,
        "endChar": 14
      },
      "revId": "1b64108d137a2c7cac696c3b9a5fb02e82d56b3f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f1a10c22_e57713ab",
        "filename": "chrome/browser/ui/tabs/tab_metrics_logger_impl.cc",
        "patchSetId": 4
      },
      "lineNbr": 40,
      "author": {
        "id": 1000763
      },
      "writtenOn": "2017-12-05T18:11:49Z",
      "side": 1,
      "message": "Assuming this code stays in sync with the enum in the protobuff is rather fragile.",
      "range": {
        "startLine": 35,
        "startChar": 0,
        "endLine": 40,
        "endChar": 2
      },
      "revId": "1b64108d137a2c7cac696c3b9a5fb02e82d56b3f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1089cb93_3d9bc3c9",
        "filename": "chrome/browser/ui/tabs/tab_metrics_logger_impl.cc",
        "patchSetId": 4
      },
      "lineNbr": 40,
      "author": {
        "id": 1003321
      },
      "writtenOn": "2017-12-05T18:27:58Z",
      "side": 1,
      "message": "This array should only change if Chrome adds schemes in the future, and the changes should only be additions, not insertions. There\u0027s a risk that a well-meaning CL inserts a new item alphabetically or accidentally transposes something. We can mitigate that risk with a test for GetSchemeValueFromString (preferred), or by replacing this array with a 21-branch if/else chain of strcmp\u0027s (ugly). So would exposing GetSchemeValueFromString to a test be an OK solution?\n\nThe protobuf itself will be used by our analysis pipeline to interpret the data correctly. The values of the enum in the proto shouldn\u0027t change, or we\u0027d have all the fun issues that come with client/server incompatibility. I think we just have to take that as a given.",
      "parentUuid": "f1a10c22_e57713ab",
      "range": {
        "startLine": 35,
        "startChar": 0,
        "endLine": 40,
        "endChar": 2
      },
      "revId": "1b64108d137a2c7cac696c3b9a5fb02e82d56b3f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d11c02db_1d9ba7a8",
        "filename": "chrome/browser/ui/tabs/tab_metrics_logger_impl.cc",
        "patchSetId": 4
      },
      "lineNbr": 40,
      "author": {
        "id": 1000763
      },
      "writtenOn": "2017-12-05T22:46:00Z",
      "side": 1,
      "message": "Exposing for test SGTM.",
      "parentUuid": "1089cb93_3d9bc3c9",
      "range": {
        "startLine": 35,
        "startChar": 0,
        "endLine": 40,
        "endChar": 2
      },
      "revId": "1b64108d137a2c7cac696c3b9a5fb02e82d56b3f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "860f087b_cb5f3b4b",
        "filename": "chrome/browser/ui/tabs/tab_metrics_logger_impl.cc",
        "patchSetId": 4
      },
      "lineNbr": 40,
      "author": {
        "id": 1003321
      },
      "writtenOn": "2017-12-07T20:37:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d11c02db_1d9ba7a8",
      "range": {
        "startLine": 35,
        "startChar": 0,
        "endLine": 40,
        "endChar": 2
      },
      "revId": "1b64108d137a2c7cac696c3b9a5fb02e82d56b3f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "08b356d3_3f3d8fce",
        "filename": "chrome/browser/ui/tabs/tab_metrics_logger_impl.cc",
        "patchSetId": 4
      },
      "lineNbr": 68,
      "author": {
        "id": 1115963
      },
      "writtenOn": "2017-12-07T04:18:23Z",
      "side": 1,
      "message": "nit: Blank line after return.",
      "revId": "1b64108d137a2c7cac696c3b9a5fb02e82d56b3f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a4a5c341_80ae3695",
        "filename": "chrome/browser/ui/tabs/tab_metrics_logger_impl.cc",
        "patchSetId": 4
      },
      "lineNbr": 68,
      "author": {
        "id": 1003321
      },
      "writtenOn": "2017-12-07T20:37:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "08b356d3_3f3d8fce",
      "revId": "1b64108d137a2c7cac696c3b9a5fb02e82d56b3f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a36ba4a3_0f92222d",
        "filename": "chrome/browser/ui/tabs/tab_metrics_logger_impl.cc",
        "patchSetId": 4
      },
      "lineNbr": 94,
      "author": {
        "id": 1115963
      },
      "writtenOn": "2017-12-07T04:18:23Z",
      "side": 1,
      "message": "So we only record URLs that are the default handler? You might also want to record non-default but accepted handlers. (Those can still be chosen by the user in the Open With context menu.) But yes, the default handler is the main thing to care about.",
      "revId": "1b64108d137a2c7cac696c3b9a5fb02e82d56b3f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f772b3a0_d3ca54cc",
        "filename": "chrome/browser/ui/tabs/tab_metrics_logger_impl.cc",
        "patchSetId": 4
      },
      "lineNbr": 94,
      "author": {
        "id": 1003321
      },
      "writtenOn": "2017-12-07T20:37:53Z",
      "side": 1,
      "message": "\"non-default but accepted handlers\" -- Ideally that\u0027s what we want: the accepted handlers (default and non-default), but not the blocked/denied handlers. Is this what ProtocolHandlerRegistry::GetHandlersFor returns? https://cs.chromium.org/chromium/src/chrome/browser/custom_handlers/protocol_handler_registry.h?type\u003dcs\u0026sq\u003dpackage:chromium\u0026l\u003d160",
      "parentUuid": "a36ba4a3_0f92222d",
      "revId": "1b64108d137a2c7cac696c3b9a5fb02e82d56b3f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "44db2964_57f75e7f",
        "filename": "chrome/browser/ui/tabs/tab_metrics_logger_impl.cc",
        "patchSetId": 4
      },
      "lineNbr": 96,
      "author": {
        "id": 1115963
      },
      "writtenOn": "2017-12-07T04:18:23Z",
      "side": 1,
      "message": "I haven\u0027t seen UKM code before. Let me clarify what this is doing and you tell me if I\u0027m write.\n\nThis is recording an association from origin (implicitly; this method is only called with an |entry| associated with the origin of |handler.url()|) to a scheme, which this handler handles.\n\nSo for example, this might get the entry for \"mail.google.com\", and set its \"DefaultProtocolHandler\" value to \"mailto\".\n\nI\u0027m not sure where SetDefaultProtocolHandler is defined. It isn\u0027t in code search or in this CL. Is it magically generated by a proto? Does it store only a single scheme associated with an origin?\n\nWhat if an origin handles two protocols?",
      "revId": "1b64108d137a2c7cac696c3b9a5fb02e82d56b3f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "76e9296d_9625fad3",
        "filename": "chrome/browser/ui/tabs/tab_metrics_logger_impl.cc",
        "patchSetId": 4
      },
      "lineNbr": 96,
      "author": {
        "id": 1003321
      },
      "writtenOn": "2017-12-07T20:37:53Z",
      "side": 1,
      "message": "\u003e I haven\u0027t seen UKM code before. Let me clarify what this is doing and you tell me if I\u0027m write.\n\nUKM is fairly new and not many of us are familiar with it yet. That\u0027s partly why all the TabManager UKM metrics are sequestered into this one file.\n\n\u003e \n\u003e This is recording an association from origin (implicitly; this method is only called with an |entry| associated with the origin of |handler.url()|) to a scheme, which this handler handles.\n\u003e \n\u003e So for example, this might get the entry for \"mail.google.com\", and set its \"DefaultProtocolHandler\" value to \"mailto\".\n\nClose, but we\u0027re recording the full page URL. The TabManager.TabMetrics Entry we\u0027re recording is a group of metrics that will be associated with the current tab\u0027s URL.\n\nWe want protocol handler info because we suspect it can help us learn about the site -- if a lot of users have a \"mailto\" handler that points to a URL under the \"mail.google.com\" origin, we can guess that pages under the \"mail.google.com\" origin are mail clients.\n\nThe origin trickery is my way of getting protocol handler data from URLs. We might have a \"mailto\" handler set to a URL like:\n\n    \"https://mail.google.com/compose?to\u003d%s\"\n\nBut when we visit a page, the URL will look like:\n\n    \"https://mail.google.com/compose?to\u003duser@example.com\"\n\nSo if we tried to find which protocols the real URL is registered for, we won\u0027t find any results. If we strip out the path, we bypass the \"%s\" field, and can ignore whatever path-level redirects a site might use.\n\n\u003e \n\u003e I\u0027m not sure where SetDefaultProtocolHandler is defined. It isn\u0027t in code search or in this CL. Is it magically generated by a proto?\n\nThe change in ukm.xml adds a DefaultProtocolHandler field to the the TabManager.TabMetrics entry. We do generate code from ukm.xml in the form of \"builders\", which work somewhat like protocol buffers. Given a metric called \"DefaultProtocolHandler\", the class will have a function \"SetDefaultProtocolHandler\".\n\nThe function itself just adds a \u003cmetric name, metric value\u003e pair to the entry\u0027s vector of recorded metrics. See SetKeyEventCount for an example:\n\nhttps://cs.chromium.org/chromium/src/out/Debug/gen/services/metrics/public/cpp/ukm_builders.cc?type\u003dcs\u0026q\u003dsetkeyeventcount\u0026sq\u003dpackage:chromium\n\n\u003e Does it store only a single scheme associated with an origin?\n\u003e \n\u003e What if an origin handles two protocols?\n\nNo, it will store a new metric each time we call the function -- kind of like a \"repeated\" field in a proto, although the backing impl is different. So if \"mail.google.com\" is associated with \"mailto\" and \"irc\", the entry for \"https://mail.google.com/compose?to\u003duser@example.com\" will have two values for the DefaultProtocolHandler metric: \"mailto\" and \"irc\".",
      "parentUuid": "44db2964_57f75e7f",
      "revId": "1b64108d137a2c7cac696c3b9a5fb02e82d56b3f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "47f9bd06_51fedd60",
        "filename": "chrome/browser/ui/tabs/tab_metrics_logger_impl.cc",
        "patchSetId": 4
      },
      "lineNbr": 96,
      "author": {
        "id": 1115963
      },
      "writtenOn": "2017-12-08T02:06:36Z",
      "side": 1,
      "message": "Thanks, that\u0027s a very good explanation. Maybe sprinkle some of that in here as a comment?\n\nWhether you want to record more than the default depends what you are using it for. If you want to know what mail client *users* prefer, then measuring only the default is sensible.\n\nIf (as your above explanation suggests --- \"We want protocol handler info because we suspect it can help us learn about the site\") you will probably want to store all of the handlers that the site offers, whether they have been accepted by the user or not.",
      "parentUuid": "76e9296d_9625fad3",
      "revId": "1b64108d137a2c7cac696c3b9a5fb02e82d56b3f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}