{
  "comments": [
    {
      "key": {
        "uuid": "dc840941_3aa07992",
        "filename": "content/browser/renderer_host/media/media_stream_dispatcher_host.cc",
        "patchSetId": 3
      },
      "lineNbr": 144,
      "author": {
        "id": 1113991
      },
      "writtenOn": "2017-07-20T02:57:43Z",
      "side": 1,
      "message": "Shouldn\u0027t this trigger a StreamGenerationFailed message back to \nthe Renderer? Alternatively make OpenDevice \u003d\u003e (bool success)\nin the mojom.\n\nSince both ways change the existing protocol, a TODO()+bug could \nbe the best course of action.",
      "range": {
        "startLine": 144,
        "startChar": 4,
        "endLine": 144,
        "endChar": 10
      },
      "revId": "d658dee9c7011e166e20a71d40d3569238af81d7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e5cc6673_f48cb8f6",
        "filename": "content/browser/renderer_host/media/media_stream_dispatcher_host.cc",
        "patchSetId": 3
      },
      "lineNbr": 144,
      "author": {
        "id": 1120018
      },
      "writtenOn": "2017-07-20T16:12:41Z",
      "side": 1,
      "message": "Added a TODO here. May be we can use DeviceOpenFailed IPC message(unused currently) to report this failure to renderer.",
      "parentUuid": "dc840941_3aa07992",
      "range": {
        "startLine": 144,
        "startChar": 4,
        "endLine": 144,
        "endChar": 10
      },
      "revId": "d658dee9c7011e166e20a71d40d3569238af81d7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "03daa116_d3419fd0",
        "filename": "content/browser/renderer_host/media/media_stream_dispatcher_host.cc",
        "patchSetId": 3
      },
      "lineNbr": 161,
      "author": {
        "id": 1113991
      },
      "writtenOn": "2017-07-20T02:57:43Z",
      "side": 1,
      "message": "nit: If you put the DVLOG() before DCHECK()s, you\u0027ll always\nsee the printout, even when and whether the program crashes.",
      "range": {
        "startLine": 161,
        "startChar": 0,
        "endLine": 161,
        "endChar": 41
      },
      "revId": "d658dee9c7011e166e20a71d40d3569238af81d7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ca70f63a_eadae060",
        "filename": "content/browser/renderer_host/media/media_stream_dispatcher_host.cc",
        "patchSetId": 3
      },
      "lineNbr": 161,
      "author": {
        "id": 1120018
      },
      "writtenOn": "2017-07-20T16:12:41Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "03daa116_d3419fd0",
      "range": {
        "startLine": 161,
        "startChar": 0,
        "endLine": 161,
        "endChar": 41
      },
      "revId": "d658dee9c7011e166e20a71d40d3569238af81d7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c820f291_5fea54bf",
        "filename": "content/renderer/media/media_stream_video_capturer_source.cc",
        "patchSetId": 3
      },
      "lineNbr": 238,
      "author": {
        "id": 1113991
      },
      "writtenOn": "2017-07-20T02:57:43Z",
      "side": 1,
      "message": "Using static objects/methods breaks encapsulation and, as you can\nsee, makes it hard to test the class.  Instead, you could consider\njust injecting on constructor a factory method of sorts:\n\nclass MediaStreamVideoCapturerSource :... {\n public:\n  using GetRemoteAssociatedInterfaceCallback \u003d \n    base::Callback\u003cvoid(mojom::MediaStreamDispatcherHostPtr)\u003e;\n\nand cache it upon constructor call in a const member e.g.\n|get_remote_associated_interface_callback_|, then\ncall it here like:\n  get_remote_associated_interface_callback_.Run(\u0026dispatcher_host_);\n\nOf course it changes a bit the _unittest.cc because you\u0027ll need to\nchange MockMojoMediaStreamDispatcherHost to be an impl of mojom::MSDH,\nthen make a StrongBinding to it inside the \"factory\" you inject:\n\n    mojo_msdhost_binding_ \u003d mojo::MakeStrongBinding(\n        base::MakeUnique\u003cMockMojoMediaStreamDispatcherHost\u003e(),\n        mojo::MakeRequest(\u0026mojo_msdhost));\n\nyou can access (for mocking) the created \nMockMojoMediaStreamDispatcherHost via mojo_msdhost_binding_-\u003eimpl()\n(with casting) like I\u0027m doing here:\nhttps://chromium-review.googlesource.com/c/566145/14/media/mojo/clients/mojo_video_encode_accelerator_unittest.cc",
      "range": {
        "startLine": 238,
        "startChar": 4,
        "endLine": 238,
        "endChar": 30
      },
      "revId": "d658dee9c7011e166e20a71d40d3569238af81d7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "04d5227f_ee54166c",
        "filename": "content/renderer/media/media_stream_video_capturer_source.cc",
        "patchSetId": 3
      },
      "lineNbr": 238,
      "author": {
        "id": 1120018
      },
      "writtenOn": "2017-07-20T06:16:47Z",
      "side": 1,
      "message": "We need |dispatcher_host_| internal to MediaStreamVideoCapturerSource class as well. Please see MediaStreamVideoCapturerSource::OnCapturingLinkSecured above at l.199. How do we get a |dispatcher_host_| without using this static method?\n\nCan we not follow a pattern similar to what we are doing in MediaStreamDispatcher(part 1 CL) and VideoCaptureImpl for now?\n\nEventually, when MediaStreamDispatcherHost no longer inherits BrowserMessageFilter and BrowserAssociatedInterface, I wanted to do something similar as below.\nhttps://cs.chromium.org/chromium/src/content/renderer/media/media_devices_event_dispatcher_unittest.cc?dr\u003dCSs\u0026l\u003d78\nhttps://cs.chromium.org/chromium/src/content/renderer/media/user_media_client_impl_unittest.cc?dr\u003dCSs\u0026l\u003d402.",
      "parentUuid": "c820f291_5fea54bf",
      "range": {
        "startLine": 238,
        "startChar": 4,
        "endLine": 238,
        "endChar": 30
      },
      "revId": "d658dee9c7011e166e20a71d40d3569238af81d7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9f7978bc_5e60862c",
        "filename": "content/renderer/media/media_stream_video_capturer_source.cc",
        "patchSetId": 3
      },
      "lineNbr": 238,
      "author": {
        "id": 1113991
      },
      "writtenOn": "2017-07-20T08:05:48Z",
      "side": 1,
      "message": "Sure, we can leave it as is and add a TODO+bug. My suggestion wasn\u0027t \nremoving |dispatcher_host_|, but changing these lines to:\n\nif (!dispatcher_host_.get())\n  get_remote_associated_interface_callback_.Run(\u0026dispatcher_host_);\n\nand let the object constructing MediaStreamDispatcherHost\nto pass to it a (partially) bound base::Callback pointing to\nChildThreadImpl::current()-\u003echannel()-\u003eGetRemoteAssociatedInterface().",
      "parentUuid": "04d5227f_ee54166c",
      "range": {
        "startLine": 238,
        "startChar": 4,
        "endLine": 238,
        "endChar": 30
      },
      "revId": "d658dee9c7011e166e20a71d40d3569238af81d7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c760a991_0c10e6dc",
        "filename": "content/renderer/media/media_stream_video_capturer_source.cc",
        "patchSetId": 3
      },
      "lineNbr": 238,
      "author": {
        "id": 1120018
      },
      "writtenOn": "2017-07-20T16:12:41Z",
      "side": 1,
      "message": "Made changes similar to part 1 CL, based on emircan@\u0027s friend class suggestion.\nNot adding a TODO as I am anyway taking this up in one of my next CL.",
      "parentUuid": "9f7978bc_5e60862c",
      "range": {
        "startLine": 238,
        "startChar": 4,
        "endLine": 238,
        "endChar": 30
      },
      "revId": "d658dee9c7011e166e20a71d40d3569238af81d7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}