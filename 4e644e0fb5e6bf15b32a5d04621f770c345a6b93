{
  "comments": [
    {
      "key": {
        "uuid": "47042487_c5d91a21",
        "filename": "components/viz/service/frame_sinks/video_detector.cc",
        "patchSetId": 38
      },
      "lineNbr": 91,
      "author": {
        "id": 1146978
      },
      "writtenOn": "2017-11-07T20:31:25Z",
      "side": 1,
      "message": "I think the only thing you ever use FrameSinkManagerImpl for is to get SurfaceManager. Would it make more sense to pass that in?",
      "revId": "4e644e0fb5e6bf15b32a5d04621f770c345a6b93",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fc5df3dd_72525a7a",
        "filename": "components/viz/service/frame_sinks/video_detector.cc",
        "patchSetId": 38
      },
      "lineNbr": 91,
      "author": {
        "id": 1174470
      },
      "writtenOn": "2017-11-07T21:55:55Z",
      "side": 1,
      "message": "I think in the long term valid FrameSinkIds will be kept in FrameSinkManagerImpl? Currently they\u0027re in SurfaceManager only because of SurfaceSequences.",
      "parentUuid": "47042487_c5d91a21",
      "revId": "4e644e0fb5e6bf15b32a5d04621f770c345a6b93",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "aeac35ef_efe50560",
        "filename": "components/viz/service/frame_sinks/video_detector.cc",
        "patchSetId": 38
      },
      "lineNbr": 91,
      "author": {
        "id": 1146978
      },
      "writtenOn": "2017-11-08T15:44:38Z",
      "side": 1,
      "message": "Maybe in the long term (eg. that change might never happen). For now only SurfaceManager is required, right?",
      "parentUuid": "fc5df3dd_72525a7a",
      "revId": "4e644e0fb5e6bf15b32a5d04621f770c345a6b93",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e5d6949a_65c75ba6",
        "filename": "components/viz/service/frame_sinks/video_detector.cc",
        "patchSetId": 38
      },
      "lineNbr": 96,
      "author": {
        "id": 1174470
      },
      "writtenOn": "2017-11-07T21:55:55Z",
      "side": 1,
      "message": "kylechar, maybe we can also avoid doing this unless we have an observer? What do you think? Is it worth it?",
      "revId": "4e644e0fb5e6bf15b32a5d04621f770c345a6b93",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ce78d9cc_acb08f47",
        "filename": "components/viz/service/frame_sinks/video_detector.cc",
        "patchSetId": 38
      },
      "lineNbr": 96,
      "author": {
        "id": 1146978
      },
      "writtenOn": "2017-11-08T15:44:38Z",
      "side": 1,
      "message": "The \"do we have any observers\" check is just a proxy check for \"are we running Chrome OS\", right? Like, it will always be true on Chrome SO (modulo some tests) and always false elsewhere? Not creating VideoDetector on other operating systems would remove the need to check if we have observers and let you hook into RegisterFrameSinkId / InvalidateFrameSinkId to create ClientInfo (which would remove the need to lookup IsFrameSinkIdValid).",
      "parentUuid": "e5d6949a_65c75ba6",
      "revId": "4e644e0fb5e6bf15b32a5d04621f770c345a6b93",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f1b1e653_40416c4c",
        "filename": "components/viz/service/frame_sinks/video_detector.cc",
        "patchSetId": 38
      },
      "lineNbr": 99,
      "author": {
        "id": 1146978
      },
      "writtenOn": "2017-11-08T15:44:38Z",
      "side": 1,
      "message": "I just realize you\u0027re not removing this as a SurfaceObserver.",
      "revId": "4e644e0fb5e6bf15b32a5d04621f770c345a6b93",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b238f3c2_813b920b",
        "filename": "components/viz/service/frame_sinks/video_detector.cc",
        "patchSetId": 38
      },
      "lineNbr": 135,
      "author": {
        "id": 1146978
      },
      "writtenOn": "2017-11-07T20:31:25Z",
      "side": 1,
      "message": "It seems unfortunate having to do three different map lookups (valid FrameSinkId, get ClientInfo and then get Surface) each time a surface gets drawn. I guess hooking into RegisterFrameSinkId() wouldn\u0027t work with your early exit when there are no observers though, so I\u0027m not sure it\u0027s super actionable.",
      "revId": "4e644e0fb5e6bf15b32a5d04621f770c345a6b93",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dd4b065c_85ce50d7",
        "filename": "components/viz/service/frame_sinks/video_detector.cc",
        "patchSetId": 38
      },
      "lineNbr": 135,
      "author": {
        "id": 1174470
      },
      "writtenOn": "2017-11-07T21:55:55Z",
      "side": 1,
      "message": "Shouldn\u0027t SurfaceObserver methods get Surface* instead of SurfaceId (except for those that refer to deleted surfaces)? That can remove one map lookup. I can make the check for FrameSinkId validity a DCHECK, but I think it might happen in real life. I think it is possible that a child destroys its FrameSink but the parent is still embedding the child\u0027s Surface and OnSurfaceWillBeDrawn is called.",
      "parentUuid": "b238f3c2_813b920b",
      "revId": "4e644e0fb5e6bf15b32a5d04621f770c345a6b93",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "83ba8c85_83269922",
        "filename": "components/viz/service/frame_sinks/video_detector.cc",
        "patchSetId": 38
      },
      "lineNbr": 135,
      "author": {
        "id": 1174470
      },
      "writtenOn": "2017-11-07T22:08:00Z",
      "side": 1,
      "message": "Another idea. Surface has a weak pointer to CFSS. Maybe I can check if that\u0027s not null instead of looking up whether the FrameSinkId is valid? WDYT?",
      "parentUuid": "dd4b065c_85ce50d7",
      "revId": "4e644e0fb5e6bf15b32a5d04621f770c345a6b93",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "41eaacfc_8edc4952",
        "filename": "components/viz/service/frame_sinks/video_detector.cc",
        "patchSetId": 38
      },
      "lineNbr": 135,
      "author": {
        "id": 1146978
      },
      "writtenOn": "2017-11-08T15:44:38Z",
      "side": 1,
      "message": "CFSS destruction isn\u0027t necessarily aligned in FrameSinkId validity today. Passing in a Surface* is interesting, not sure if there are any problems with it but maybe...",
      "parentUuid": "83ba8c85_83269922",
      "revId": "4e644e0fb5e6bf15b32a5d04621f770c345a6b93",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9502e377_6f4c6fa9",
        "filename": "components/viz/service/frame_sinks/video_detector.h",
        "patchSetId": 38
      },
      "lineNbr": 91,
      "author": {
        "id": 1146978
      },
      "writtenOn": "2017-11-07T20:31:25Z",
      "side": 1,
      "message": "base:unordered_map?",
      "revId": "4e644e0fb5e6bf15b32a5d04621f770c345a6b93",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "80dca6e3_4a9b6a7c",
        "filename": "components/viz/service/frame_sinks/video_detector.h",
        "patchSetId": 38
      },
      "lineNbr": 91,
      "author": {
        "id": 1174470
      },
      "writtenOn": "2017-11-07T21:55:55Z",
      "side": 1,
      "message": "base::flat_map? Done.",
      "parentUuid": "9502e377_6f4c6fa9",
      "revId": "4e644e0fb5e6bf15b32a5d04621f770c345a6b93",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "457eecd4_b3d2d457",
        "filename": "components/viz/service/frame_sinks/video_detector_unittest.cc",
        "patchSetId": 38
      },
      "lineNbr": 93,
      "author": {
        "id": 1146978
      },
      "writtenOn": "2017-11-07T20:31:25Z",
      "side": 1,
      "message": "I didn\u0027t realize TickClock already existed, very cool.",
      "revId": "4e644e0fb5e6bf15b32a5d04621f770c345a6b93",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bab0a50d_a1f5389e",
        "filename": "components/viz/service/frame_sinks/video_detector_unittest.cc",
        "patchSetId": 38
      },
      "lineNbr": 168,
      "author": {
        "id": 1146978
      },
      "writtenOn": "2017-11-07T20:31:25Z",
      "side": 1,
      "message": "Is it possible to hit this condition (it\u0027s the same as the exit condition in loop).",
      "revId": "4e644e0fb5e6bf15b32a5d04621f770c345a6b93",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4e3fb3c0_7620fdb2",
        "filename": "components/viz/service/frame_sinks/video_detector_unittest.cc",
        "patchSetId": 38
      },
      "lineNbr": 168,
      "author": {
        "id": 1174470
      },
      "writtenOn": "2017-11-07T21:55:55Z",
      "side": 1,
      "message": "Oops. Fixed.",
      "parentUuid": "bab0a50d_a1f5389e",
      "revId": "4e644e0fb5e6bf15b32a5d04621f770c345a6b93",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1c23771a_d051e897",
        "filename": "components/viz/service/frame_sinks/video_detector_unittest.cc",
        "patchSetId": 38
      },
      "lineNbr": 314,
      "author": {
        "id": 1146978
      },
      "writtenOn": "2017-11-07T20:31:25Z",
      "side": 1,
      "message": "nit: Declare d in the loop?",
      "revId": "4e644e0fb5e6bf15b32a5d04621f770c345a6b93",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8bdecac6_9b868f51",
        "filename": "components/viz/service/frame_sinks/video_detector_unittest.cc",
        "patchSetId": 38
      },
      "lineNbr": 314,
      "author": {
        "id": 1174470
      },
      "writtenOn": "2017-11-07T21:55:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1c23771a_d051e897",
      "revId": "4e644e0fb5e6bf15b32a5d04621f770c345a6b93",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}