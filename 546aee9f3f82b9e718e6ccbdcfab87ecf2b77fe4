{
  "comments": [
    {
      "key": {
        "uuid": "c5192fe1_ecf42979",
        "filename": "ash/mojo_interface_factory.h",
        "patchSetId": 5
      },
      "lineNbr": 32,
      "author": {
        "id": 1000763
      },
      "writtenOn": "2017-10-10T17:19:43Z",
      "side": 1,
      "message": "OnceCallbak?",
      "range": {
        "startLine": 32,
        "startChar": 10,
        "endLine": 32,
        "endChar": 18
      },
      "revId": "546aee9f3f82b9e718e6ccbdcfab87ecf2b77fe4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ecc2f344_8b572657",
        "filename": "ash/mojo_interface_factory.h",
        "patchSetId": 5
      },
      "lineNbr": 32,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2017-10-11T17:43:36Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c5192fe1_ecf42979",
      "range": {
        "startLine": 32,
        "startChar": 10,
        "endLine": 32,
        "endChar": 18
      },
      "revId": "546aee9f3f82b9e718e6ccbdcfab87ecf2b77fe4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a3147509_c60aff2e",
        "filename": "ash/mojo_test_interface_factory.h",
        "patchSetId": 5
      },
      "lineNbr": 10,
      "author": {
        "id": 1000763
      },
      "writtenOn": "2017-10-10T17:19:43Z",
      "side": 1,
      "message": "Forward declare BinderRegistry?",
      "range": {
        "startLine": 10,
        "startChar": 10,
        "endLine": 10,
        "endChar": 63
      },
      "revId": "546aee9f3f82b9e718e6ccbdcfab87ecf2b77fe4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5ce6b0b1_1f76fcbc",
        "filename": "ash/mojo_test_interface_factory.h",
        "patchSetId": 5
      },
      "lineNbr": 10,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2017-10-11T17:43:36Z",
      "side": 1,
      "message": "I can\u0027t forward declare it, it\u0027s a typedef (well, a \"using\"). :-(",
      "parentUuid": "a3147509_c60aff2e",
      "range": {
        "startLine": 10,
        "startChar": 10,
        "endLine": 10,
        "endChar": 63
      },
      "revId": "546aee9f3f82b9e718e6ccbdcfab87ecf2b77fe4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d5291393_9ae16786",
        "filename": "ash/mus/manifest.json",
        "patchSetId": 5
      },
      "lineNbr": 32,
      "author": {
        "id": 1000763
      },
      "writtenOn": "2017-10-10T17:19:43Z",
      "side": 1,
      "message": "It\u0027s unfortunate this has to be in the real manifest. But as the code isn\u0027t linked into the real ash it seems ok.",
      "range": {
        "startLine": 29,
        "startChar": 8,
        "endLine": 32,
        "endChar": 10
      },
      "revId": "546aee9f3f82b9e718e6ccbdcfab87ecf2b77fe4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "37fa6118_4284d9e1",
        "filename": "ash/mus/manifest.json",
        "patchSetId": 5
      },
      "lineNbr": 32,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2017-10-11T17:43:36Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "d5291393_9ae16786",
      "range": {
        "startLine": 29,
        "startChar": 8,
        "endLine": 32,
        "endChar": 10
      },
      "revId": "546aee9f3f82b9e718e6ccbdcfab87ecf2b77fe4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3b5e04ba_13c4acda",
        "filename": "ash/public/interfaces/system_tray_test_api.mojom",
        "patchSetId": 5
      },
      "lineNbr": 12,
      "author": {
        "id": 1000763
      },
      "writtenOn": "2017-10-10T17:19:43Z",
      "side": 1,
      "message": "kFoo style.",
      "range": {
        "startLine": 12,
        "startChar": 2,
        "endLine": 12,
        "endChar": 12
      },
      "revId": "546aee9f3f82b9e718e6ccbdcfab87ecf2b77fe4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8cde5abb_bdb949bf",
        "filename": "ash/public/interfaces/system_tray_test_api.mojom",
        "patchSetId": 5
      },
      "lineNbr": 12,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2017-10-11T17:43:36Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3b5e04ba_13c4acda",
      "range": {
        "startLine": 12,
        "startChar": 2,
        "endLine": 12,
        "endChar": 12
      },
      "revId": "546aee9f3f82b9e718e6ccbdcfab87ecf2b77fe4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3ae31c04_4e1253b5",
        "filename": "ash/system/tray/system_tray_test_api.h",
        "patchSetId": 5
      },
      "lineNbr": 15,
      "author": {
        "id": 1000763
      },
      "writtenOn": "2017-10-10T17:19:43Z",
      "side": 1,
      "message": "This class is compiled into a static library, how come you need the ASH_EXPORT?",
      "range": {
        "startLine": 15,
        "startChar": 6,
        "endLine": 15,
        "endChar": 17
      },
      "revId": "546aee9f3f82b9e718e6ccbdcfab87ecf2b77fe4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "da86207f_e7c8b95d",
        "filename": "ash/system/tray/system_tray_test_api.h",
        "patchSetId": 5
      },
      "lineNbr": 15,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2017-10-11T17:43:36Z",
      "side": 1,
      "message": "Removed ASH_EXPORT.",
      "parentUuid": "3ae31c04_4e1253b5",
      "range": {
        "startLine": 15,
        "startChar": 6,
        "endLine": 15,
        "endChar": 17
      },
      "revId": "546aee9f3f82b9e718e6ccbdcfab87ecf2b77fe4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3b67d125_e31359d4",
        "filename": "chrome/browser/ui/ash/networking_config_delegate_chromeos_browsertest.cc",
        "patchSetId": 5
      },
      "lineNbr": 39,
      "author": {
        "id": 1000763
      },
      "writtenOn": "2017-10-10T17:19:43Z",
      "side": 1,
      "message": "\u0027test_api\u0027 is very generic. Maybe \u0027tray_test_api\u0027?",
      "range": {
        "startLine": 39,
        "startChar": 35,
        "endLine": 39,
        "endChar": 43
      },
      "revId": "546aee9f3f82b9e718e6ccbdcfab87ecf2b77fe4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c69648fa_49ad5a64",
        "filename": "chrome/browser/ui/ash/networking_config_delegate_chromeos_browsertest.cc",
        "patchSetId": 5
      },
      "lineNbr": 39,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2017-10-11T17:43:36Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3b67d125_e31359d4",
      "range": {
        "startLine": 39,
        "startChar": 35,
        "endLine": 39,
        "endChar": 43
      },
      "revId": "546aee9f3f82b9e718e6ccbdcfab87ecf2b77fe4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "46e34aaa_97abb775",
        "filename": "chrome/browser/ui/ash/networking_config_delegate_chromeos_browsertest.cc",
        "patchSetId": 5
      },
      "lineNbr": 47,
      "author": {
        "id": 1000763
      },
      "writtenOn": "2017-10-10T17:19:43Z",
      "side": 1,
      "message": "optional: this seems like a common pattern we\u0027re going to have (same with the Waiter below). It would be nice if both could be reduced to single lines, perhaps by way of calling template functions?",
      "range": {
        "startLine": 45,
        "startChar": 2,
        "endLine": 47,
        "endChar": 13
      },
      "revId": "546aee9f3f82b9e718e6ccbdcfab87ecf2b77fe4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f458622f_ebf68fba",
        "filename": "chrome/browser/ui/ash/networking_config_delegate_chromeos_browsertest.cc",
        "patchSetId": 5
      },
      "lineNbr": 47,
      "author": {
        "id": 1002808
      },
      "writtenOn": "2017-10-11T16:42:29Z",
      "side": 1,
      "message": "There is no way to destructure the nice familiar member function call syntax (i.e. \"test_api-\u003eDoWhatever()\") with template magic, so we can\u0027t really do this without either making the call syntax worse or making test_api a different type. We also can\u0027t create an appropriate wrapper type using templates alone, because the transform between response callback argument types and sync call output argument types is too complex.\n\nWe can however generate a new test helper type from the bindings generator. We already generate  *InterceptorForTesting as one example. Could do something like:\n\n  // generated from a mojom Foo interface definition\n  class FooAsyncWaiter : public Foo {\n   public:\n    FooAsyncWaiter(FooPtr* proxy) : proxy_(proxy) {}\n\n    // generated methods for every Foo message that expects a response\n    // we use sync call signatures and forward to the async proxy\n    void QueryFrobinator(int index, std::string* status) override {\n      base::RunLoop loop;\n      proxy_-\u003eQueryFrobinator(\n          index,\n          base::BindOnce([](base::RunLoop* loop, std::string* out_status,\n                            const std::string\u0026 status) {\n                           *out_status \u003d status;\n                           loop-\u003eQuit();\n                         }));\n      loop.Run();\n    }\n   // ...\n  };\n\nThen test code can simply write\n\n  mojom::FooPtr foo \u003d /* get a FooPtr... */;\n  mojom::FooAsyncWaiter foo_waiter(\u0026foo);\n\n  foo-\u003eMakeNonResponseCalls();\n  foo-\u003eQueryFrobinator(42, base::Bind...) // can still make async calls\n\n  // make an async call that blocks and looks like a sync call, but\n  // still pumps the message loop.\n  std::string status;\n  foo_waiter-\u003eQueryFrobinator(42, \u0026status);\n\nNote that I would like to avoid actually replacing the FooPtr in tests like this, so if we were to add a new generated helper I\u0027d want it to wrap an externally owned FooPtr as above.\n\nAlso not crazy about the \"async waiter\" name. It\u0027s really a kind of pseudo-synchronous Foo than a Foo \"waiter\". mojom::FooPseudosync just rolls right off the tongue, doesn\u0027t it?",
      "parentUuid": "46e34aaa_97abb775",
      "range": {
        "startLine": 45,
        "startChar": 2,
        "endLine": 47,
        "endChar": 13
      },
      "revId": "546aee9f3f82b9e718e6ccbdcfab87ecf2b77fe4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3bdbbabd_d9abfec3",
        "filename": "chrome/browser/ui/ash/networking_config_delegate_chromeos_browsertest.cc",
        "patchSetId": 5
      },
      "lineNbr": 47,
      "author": {
        "id": 1002808
      },
      "writtenOn": "2017-10-11T16:44:36Z",
      "side": 1,
      "message": "\u003e There is no way to destructure the nice familiar member function call syntax (i.e. \"test_api-\u003eDoWhatever()\") with template magic, so we can\u0027t really do this without either making the call syntax worse or making test_api a different type. We also can\u0027t create an appropriate wrapper type using templates alone, because the transform between response callback argument types and sync call output argument types is too complex.\n\u003e \n\u003e We can however generate a new test helper type from the bindings generator. We already generate  *InterceptorForTesting as one example. Could do something like:\n\u003e \n\u003e   // generated from a mojom Foo interface definition\n\u003e   class FooAsyncWaiter : public Foo {\n\u003e    public:\n\u003e     FooAsyncWaiter(FooPtr* proxy) : proxy_(proxy) {}\n\u003e \n\u003e     // generated methods for every Foo message that expects a response\n\u003e     // we use sync call signatures and forward to the async proxy\n\u003e     void QueryFrobinator(int index, std::string* status) override {\n\u003e       base::RunLoop loop;\n\u003e       proxy_-\u003eQueryFrobinator(\n\u003e           index,\n\u003e           base::BindOnce([](base::RunLoop* loop, std::string* out_status,\n\u003e                             const std::string\u0026 status) {\n\u003e                            *out_status \u003d status;\n\u003e                            loop-\u003eQuit();\n\u003e                          }));\n\nAnd of course we\u0027d actually bind loop and out_status here...\n\n\u003e       loop.Run();\n\u003e     }\n\u003e    // ...\n\u003e   };\n\u003e \n\u003e Then test code can simply write\n\u003e \n\u003e   mojom::FooPtr foo \u003d /* get a FooPtr... */;\n\u003e   mojom::FooAsyncWaiter foo_waiter(\u0026foo);\n\u003e \n\u003e   foo-\u003eMakeNonResponseCalls();\n\u003e   foo-\u003eQueryFrobinator(42, base::Bind...) // can still make async calls\n\u003e \n\u003e   // make an async call that blocks and looks like a sync call, but\n\u003e   // still pumps the message loop.\n\u003e   std::string status;\n\u003e   foo_waiter-\u003eQueryFrobinator(42, \u0026status);\n\u003e \n\u003e Note that I would like to avoid actually replacing the FooPtr in tests like this, so if we were to add a new generated helper I\u0027d want it to wrap an externally owned FooPtr as above.\n\u003e \n\u003e Also not crazy about the \"async waiter\" name. It\u0027s really a kind of pseudo-synchronous Foo than a Foo \"waiter\". mojom::FooPseudosync just rolls right off the tongue, doesn\u0027t it?",
      "parentUuid": "f458622f_ebf68fba",
      "range": {
        "startLine": 45,
        "startChar": 2,
        "endLine": 47,
        "endChar": 13
      },
      "revId": "546aee9f3f82b9e718e6ccbdcfab87ecf2b77fe4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7e7d6b9e_2a1e25a5",
        "filename": "chrome/browser/ui/ash/networking_config_delegate_chromeos_browsertest.cc",
        "patchSetId": 5
      },
      "lineNbr": 47,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2017-10-11T17:43:36Z",
      "side": 1,
      "message": "Per offline discussion - Ken\u0027s solution sounds good and he\u0027s going to look into the bindings generator. Thanks Ken!",
      "parentUuid": "3bdbbabd_d9abfec3",
      "range": {
        "startLine": 45,
        "startChar": 2,
        "endLine": 47,
        "endChar": 13
      },
      "revId": "546aee9f3f82b9e718e6ccbdcfab87ecf2b77fe4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cf6691fb_7afd1b7c",
        "filename": "chrome/browser/ui/ash/networking_config_delegate_chromeos_browsertest.cc",
        "patchSetId": 5
      },
      "lineNbr": 53,
      "author": {
        "id": 1000763
      },
      "writtenOn": "2017-10-10T17:19:43Z",
      "side": 1,
      "message": "\u0027api\u0027 is *super* generic. Maybe SystemTrayTestApi?",
      "range": {
        "startLine": 53,
        "startChar": 8,
        "endLine": 53,
        "endChar": 12
      },
      "revId": "546aee9f3f82b9e718e6ccbdcfab87ecf2b77fe4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "aac00835_776d8d68",
        "filename": "chrome/browser/ui/ash/networking_config_delegate_chromeos_browsertest.cc",
        "patchSetId": 5
      },
      "lineNbr": 53,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2017-10-11T17:43:36Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "cf6691fb_7afd1b7c",
      "range": {
        "startLine": 53,
        "startChar": 8,
        "endLine": 53,
        "endChar": 12
      },
      "revId": "546aee9f3f82b9e718e6ccbdcfab87ecf2b77fe4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ce04e9be_a6c185c0",
        "filename": "chrome/browser/ui/ash/system_tray_client_browsertest.cc",
        "patchSetId": 5
      },
      "lineNbr": 150,
      "author": {
        "id": 1000763
      },
      "writtenOn": "2017-10-10T17:19:43Z",
      "side": 1,
      "message": "Similar comment about test_api being overly generic.",
      "range": {
        "startLine": 150,
        "startChar": 35,
        "endLine": 150,
        "endChar": 43
      },
      "revId": "546aee9f3f82b9e718e6ccbdcfab87ecf2b77fe4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8979ffd2_aea4f3fe",
        "filename": "chrome/browser/ui/ash/system_tray_client_browsertest.cc",
        "patchSetId": 5
      },
      "lineNbr": 150,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2017-10-11T17:43:36Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ce04e9be_a6c185c0",
      "range": {
        "startLine": 150,
        "startChar": 35,
        "endLine": 150,
        "endChar": 43
      },
      "revId": "546aee9f3f82b9e718e6ccbdcfab87ecf2b77fe4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2a00f495_c5341130",
        "filename": "chrome/browser/ui/ash/system_tray_client_browsertest.cc",
        "patchSetId": 5
      },
      "lineNbr": 168,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2017-10-09T18:35:36Z",
      "side": 1,
      "message": "Frankly, I\u0027m not too happy with this. It\u0027s 8 lines to call a method that returns a bool. The need for CaptureNext\u003c\u003e specialization really hurts the readability of the call itself. I tried a \"using\" declaration in the next file, which helps a little but is still very verbose.\n\nDo you think this is better, or do you think I should stick with the version in patchset 1 that only works for non-ref types?  Any other ideas?",
      "revId": "546aee9f3f82b9e718e6ccbdcfab87ecf2b77fe4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "68efaf5a_e1e505f5",
        "filename": "chrome/browser/ui/ash/system_tray_client_browsertest.cc",
        "patchSetId": 5
      },
      "lineNbr": 168,
      "author": {
        "id": 1002808
      },
      "writtenOn": "2017-10-09T20:56:53Z",
      "side": 1,
      "message": "I believe we can avoid the explicit CaptureNext template invocation, but we have to make some changes to the bindings generator so that we can accurately infer input types (and thus ultimately the callback signature) from output types. This means defining something like:\n\n    template \u003cT\u003e\n    struct ResponseCallbackHelper {\n      using ArgType \u003d T;\n    };\n\nand then specializing it for exceptional types like std::string, std::vector\u003cU\u003e, and std::map\u003cU\u003e. We can then also generate specializations for any typemap target types which aren\u0027t explicitly marked as pass-by-value.",
      "parentUuid": "2a00f495_c5341130",
      "revId": "546aee9f3f82b9e718e6ccbdcfab87ecf2b77fe4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c09ab6bb_cb31bb23",
        "filename": "chrome/browser/ui/ash/system_tray_client_browsertest.cc",
        "patchSetId": 5
      },
      "lineNbr": 168,
      "author": {
        "id": 1002808
      },
      "writtenOn": "2017-10-09T21:34:00Z",
      "side": 1,
      "message": "... This does unfortunately fail in cases where different mojom types map to the same target type, because we end up emitting duplicate definitions of the same specialization.\n\nI\u0027m not sure how to deal with that.",
      "parentUuid": "68efaf5a_e1e505f5",
      "revId": "546aee9f3f82b9e718e6ccbdcfab87ecf2b77fe4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5362a79b_a2fb4739",
        "filename": "chrome/browser/ui/ash/system_tray_client_browsertest.cc",
        "patchSetId": 5
      },
      "lineNbr": 168,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2017-10-11T17:43:36Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "c09ab6bb_cb31bb23",
      "revId": "546aee9f3f82b9e718e6ccbdcfab87ecf2b77fe4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bd6fe077_250a524e",
        "filename": "chrome/test/base/chrome_test_launcher.cc",
        "patchSetId": 5
      },
      "lineNbr": 169,
      "author": {
        "id": 1000763
      },
      "writtenOn": "2017-10-10T17:19:43Z",
      "side": 1,
      "message": "Isn\u0027t this the same as:\nbase::Bind(\u0026ash::mojo_test_interface_factory::RegisterInterfaces) ?",
      "range": {
        "startLine": 166,
        "startChar": 6,
        "endLine": 169,
        "endChar": 10
      },
      "revId": "546aee9f3f82b9e718e6ccbdcfab87ecf2b77fe4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "af86c2c4_9d246501",
        "filename": "chrome/test/base/chrome_test_launcher.cc",
        "patchSetId": 5
      },
      "lineNbr": 169,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2017-10-11T17:43:36Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "bd6fe077_250a524e",
      "range": {
        "startLine": 166,
        "startChar": 6,
        "endLine": 169,
        "endChar": 10
      },
      "revId": "546aee9f3f82b9e718e6ccbdcfab87ecf2b77fe4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "acb5f3f3_1d12fe4b",
        "filename": "mojo/public/cpp/test_support/waiter.h",
        "patchSetId": 5
      },
      "lineNbr": 67,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2017-10-09T18:35:36Z",
      "side": 1,
      "message": "Even in a contrived example with short names, we\u0027re still at 4-5 lines to call a single method.",
      "revId": "546aee9f3f82b9e718e6ccbdcfab87ecf2b77fe4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1739c28b_88140395",
        "filename": "mojo/public/cpp/test_support/waiter.h",
        "patchSetId": 5
      },
      "lineNbr": 67,
      "author": {
        "id": 1002808
      },
      "writtenOn": "2017-10-09T20:56:53Z",
      "side": 1,
      "message": "That\u0027s compared to 3 lines for an equivalent sync IPC, so the difference doesn\u0027t seem that significant. Still, I would obviously like to avoid it if possible, if for no other reason than \"mojom::Foo::DooFooCallback\" is totally redundant information to a human who is not a C++ compiler.",
      "parentUuid": "acb5f3f3_1d12fe4b",
      "revId": "546aee9f3f82b9e718e6ccbdcfab87ecf2b77fe4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "92d1a399_26d318ec",
        "filename": "mojo/public/cpp/test_support/waiter.h",
        "patchSetId": 5
      },
      "lineNbr": 67,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2017-10-10T03:35:28Z",
      "side": 1,
      "message": "Yeah, good point that sync is still 3 lines. But I agree the ash::mojom::SystemTrayTestApi::IsBubbleViewVisibleCallback is unfortunate.",
      "parentUuid": "1739c28b_88140395",
      "revId": "546aee9f3f82b9e718e6ccbdcfab87ecf2b77fe4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}