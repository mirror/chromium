{
  "comments": [
    {
      "key": {
        "uuid": "801d5c53_a5674775",
        "filename": "content/browser/service_worker/service_worker_version.cc",
        "patchSetId": 4
      },
      "lineNbr": 1337,
      "author": {
        "id": 1000128
      },
      "writtenOn": "2017-08-17T07:52:30Z",
      "side": 1,
      "message": "I think it\u0027s better if SendMessage is done after the worker is promoted to active... otherwise we might as well just resolve the promise on the renderer-side without waiting for the ping-pong from the browser.\n\nI.e., when we do promote the worker to .active, we should resolve the promise after doing that; and when the worker is already .active, we should resolve already. (Actually in this case maybe we should just be resolving on the renderer side without sending the SkipWaiting IPC message?)\n\nAccording to the spec, the promise is supposed to resolve after updating registration and worker state. I.e,. skipWaiting().then(() \u003d\u003e // self.registration.active should be this worker). Are there no tests for that now?\n\nAlso reading over the spec, I think there is some strangeness: the skipWaiting() promise isn\u0027t really useful. When we *couldn\u0027t* immediately activate the worker (Try Activate returns early), we resolve skipWaiting() immediately, and when we do activate the worker, we wait until activation finishes before resolving skipWaiting(). It seems there\u0027s little guarantees about the skiPWaiting() promsie and I don\u0027t think that was intended. I\u0027ll write a spec issue.",
      "revId": "3bead4835ac4e8c5f0203591bff17e4480d51f79",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5ba7dfc4_1122ede3",
        "filename": "content/browser/service_worker/service_worker_version.cc",
        "patchSetId": 4
      },
      "lineNbr": 1337,
      "author": {
        "id": 1000128
      },
      "writtenOn": "2017-08-17T08:03:45Z",
      "side": 1,
      "message": "Filed https://github.com/w3c/ServiceWorker/issues/1187",
      "parentUuid": "801d5c53_a5674775",
      "revId": "3bead4835ac4e8c5f0203591bff17e4480d51f79",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "67270e99_c6634e69",
        "filename": "content/browser/service_worker/service_worker_version.cc",
        "patchSetId": 4
      },
      "lineNbr": 1337,
      "author": {
        "id": 1000128
      },
      "writtenOn": "2017-08-17T23:05:30Z",
      "side": 1,
      "message": "Based on Jake\u0027s reply, the spec was intended. For now, we should try to follow the spec:\n- If we couldn\u0027t activate, resolve immediately.\n- If we do activate, resolve after the worker has been promoted to .active.\n\nI think what we\u0027re failing currently is we resolve after the \u0027activate\u0027 event has been dispatched, but should be resolving before. I.e., the order should be:\n\n1. promote to active\n2. set state to \u0027activating\u0027\n3. resolve promise\n4. dispatch \u0027activate\u0027 event",
      "parentUuid": "5ba7dfc4_1122ede3",
      "revId": "3bead4835ac4e8c5f0203591bff17e4480d51f79",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9f36d6d2_e46cfc17",
        "filename": "content/browser/service_worker/service_worker_version.cc",
        "patchSetId": 4
      },
      "lineNbr": 1337,
      "author": {
        "id": 1223459
      },
      "writtenOn": "2017-08-18T02:23:28Z",
      "side": 1,
      "message": "Thanks for clarifying it, but I am a bit confused about that:\nJake said \"It could resolve once the service worker has begun activating.\", but in https://github.com/w3c/ServiceWorker/issues/1015, he also said \"I\u0027d prefer it if skipWaiting always waited until the service worker became activating, but as @asutherland points out there\u0027s too much code out there using it in waitUntil, so it\u0027ll become a deadlock.\", and in the commit https://github.com/w3c/ServiceWorker/pull/1019, \"(so promise resolves right away after\nsetting the skip waiting flag)\"",
      "parentUuid": "67270e99_c6634e69",
      "revId": "3bead4835ac4e8c5f0203591bff17e4480d51f79",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "df39f837_cee18fe6",
        "filename": "content/browser/service_worker/service_worker_version.cc",
        "patchSetId": 4
      },
      "lineNbr": 1337,
      "author": {
        "id": 1223459
      },
      "writtenOn": "2017-08-18T02:57:23Z",
      "side": 1,
      "message": "I am not sure I understand correctly, but if we resolve promise after setting state to \u0027activating\u0027, will the following case cause deadlock?\naddEventListener(\u0027install\u0027, () \u003d\u003e event.waitUntil(skipWaiting()));",
      "parentUuid": "9f36d6d2_e46cfc17",
      "revId": "3bead4835ac4e8c5f0203591bff17e4480d51f79",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "659399e6_142c0596",
        "filename": "content/browser/service_worker/service_worker_version.cc",
        "patchSetId": 4
      },
      "lineNbr": 1337,
      "author": {
        "id": 1000128
      },
      "writtenOn": "2017-08-21T04:50:07Z",
      "side": 1,
      "message": "No, the steps 1-4 are for the second bullet point. Basically, if skipWaiting() caused us to activate, we resolve the promise after \u0027activating\u0027, but if we couldn\u0027t yet activate, resolve the promise now (very weird, IMO, but that\u0027s the spec).",
      "parentUuid": "df39f837_cee18fe6",
      "revId": "3bead4835ac4e8c5f0203591bff17e4480d51f79",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}