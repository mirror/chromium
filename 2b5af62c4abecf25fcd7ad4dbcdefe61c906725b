{
  "comments": [
    {
      "key": {
        "uuid": "e5c77799_aae2a994",
        "filename": "chrome/browser/ui/login/login_handler.cc",
        "patchSetId": 10
      },
      "lineNbr": 45,
      "author": {
        "id": 1000805
      },
      "writtenOn": "2017-07-13T01:26:49Z",
      "side": 1,
      "message": "Nit: How come we need this?",
      "revId": "2b5af62c4abecf25fcd7ad4dbcdefe61c906725b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0e69e46f_6ab16a6f",
        "filename": "chrome/browser/ui/login/login_handler.cc",
        "patchSetId": 10
      },
      "lineNbr": 45,
      "author": {
        "id": 1002092
      },
      "writtenOn": "2017-07-13T05:28:16Z",
      "side": 1,
      "message": "Done (was from an earlier patchset)",
      "parentUuid": "e5c77799_aae2a994",
      "revId": "2b5af62c4abecf25fcd7ad4dbcdefe61c906725b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a181e754_2cf7db3a",
        "filename": "chrome/browser/ui/login/login_handler_unittest.cc",
        "patchSetId": 10
      },
      "lineNbr": 100,
      "author": {
        "id": 1000805
      },
      "writtenOn": "2017-07-13T01:26:49Z",
      "side": 1,
      "message": "It feels fragile that we encode the exact strings above and muck with things here.  As we make string changes that don\u0027t affect test correctness, we have to update lots of entries.\n\nWould be nice to just string search for the expected authority within the larger text string, or something.",
      "revId": "2b5af62c4abecf25fcd7ad4dbcdefe61c906725b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "37fa3a05_2ec80764",
        "filename": "chrome/browser/ui/login/login_handler_unittest.cc",
        "patchSetId": 10
      },
      "lineNbr": 100,
      "author": {
        "id": 1002092
      },
      "writtenOn": "2017-07-13T05:28:16Z",
      "side": 1,
      "message": "I agree that coupling to the exact strings is fragile, but is seems reasonable here to ensure the various states are covered. In a way it makes these change-detector tests (i.e. go/tott-350 \"Change-Detector Tests Considered Harmful\". But putting logic in tests can also be bad (i.e. go/tott-338 \"Don\u0027t Put Logic in Tests\").\n\nJust searching for the hostname doesn\u0027t allow the distinction between proxies and non-proxies to be tested.\n\nAnd trying to construct strings with more logic makes failed expectations harder to read. I couldn\u0027t come up with a good improvement. Happy to take suggestions.",
      "parentUuid": "a181e754_2cf7db3a",
      "revId": "2b5af62c4abecf25fcd7ad4dbcdefe61c906725b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a5fde74e_fb2c60a7",
        "filename": "chrome/browser/ui/views/harmony/chrome_layout_provider.h",
        "patchSetId": 10
      },
      "lineNbr": 20,
      "author": {
        "id": 1000805
      },
      "writtenOn": "2017-07-13T01:26:49Z",
      "side": 1,
      "message": "Why is \"web-modal\" relevant?  Are there dialogs (e.g. the bookmark bubble) that use a different indent?  If we want a distinction like that it seems like we\u0027d want to encode it in the name here or something.\n\nI wonder if this is really something we should specify a constant for.  Maybe it would be better to just remove the indent pre-Harmony, by nuking this concept entirely.",
      "revId": "2b5af62c4abecf25fcd7ad4dbcdefe61c906725b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a6075674_d9ce95a1",
        "filename": "chrome/browser/ui/views/harmony/chrome_layout_provider.h",
        "patchSetId": 10
      },
      "lineNbr": 20,
      "author": {
        "id": 1002092
      },
      "writtenOn": "2017-07-13T01:54:12Z",
      "side": 1,
      "message": "\u003e Are there dialogs (e.g. the bookmark bubble) that use a different indent?\n\nyes - exactly.\n\nI\u0027m fine with removing the indent from http-auth pre-harmony (alluded to it in an earlier comment even..)",
      "parentUuid": "a5fde74e_fb2c60a7",
      "revId": "2b5af62c4abecf25fcd7ad4dbcdefe61c906725b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cf9a0068_c86bc8cf",
        "filename": "chrome/browser/ui/views/harmony/chrome_layout_provider.h",
        "patchSetId": 10
      },
      "lineNbr": 20,
      "author": {
        "id": 1002092
      },
      "writtenOn": "2017-07-13T05:28:16Z",
      "side": 1,
      "message": "Done (removed DISTANCE_DIALOG_INPUT_FIELD_HORIZONTAL_INDENT - 0 indents for all)",
      "parentUuid": "a6075674_d9ce95a1",
      "revId": "2b5af62c4abecf25fcd7ad4dbcdefe61c906725b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3ece82d3_88364358",
        "filename": "chrome/browser/ui/views/harmony/chrome_layout_provider.h",
        "patchSetId": 10
      },
      "lineNbr": 24,
      "author": {
        "id": 1000805
      },
      "writtenOn": "2017-07-13T01:26:49Z",
      "side": 1,
      "message": "I discussed this some with bettes@.  For now, we\u0027re scrapping this.  Just have textfields start at (right edge of widest label + 1 layout unit), rounded to the next rightward layout unit.\n\nHe\u0027ll post on the bug.",
      "revId": "2b5af62c4abecf25fcd7ad4dbcdefe61c906725b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0a61729b_fb578c4e",
        "filename": "chrome/browser/ui/views/harmony/chrome_layout_provider.h",
        "patchSetId": 10
      },
      "lineNbr": 24,
      "author": {
        "id": 1002092
      },
      "writtenOn": "2017-07-13T05:28:16Z",
      "side": 1,
      "message": "Done (removed DISTANCE_INPUT_LABEL_MINIMIUM_WIDTH - replaced with TODO)",
      "parentUuid": "3ece82d3_88364358",
      "revId": "2b5af62c4abecf25fcd7ad4dbcdefe61c906725b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8d3451b6_1a3a6d18",
        "filename": "chrome/browser/ui/views/harmony/textfield_layout.cc",
        "patchSetId": 10
      },
      "lineNbr": 12,
      "author": {
        "id": 1000805
      },
      "writtenOn": "2017-07-13T01:26:49Z",
      "side": 1,
      "message": "Nit: I suspect you could remove this without using any additional lines below.",
      "revId": "2b5af62c4abecf25fcd7ad4dbcdefe61c906725b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a01383ee_6027435d",
        "filename": "chrome/browser/ui/views/harmony/textfield_layout.cc",
        "patchSetId": 10
      },
      "lineNbr": 12,
      "author": {
        "id": 1002092
      },
      "writtenOn": "2017-07-13T05:28:16Z",
      "side": 1,
      "message": "with label_min_width gone that\u0027s no longer the case. I don\u0027t think there is a downside to having this and there is no upside to scattering `views::` in more places below.",
      "parentUuid": "8d3451b6_1a3a6d18",
      "revId": "2b5af62c4abecf25fcd7ad4dbcdefe61c906725b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1b4b49a2_2478e09c",
        "filename": "chrome/browser/ui/views/harmony/textfield_layout.cc",
        "patchSetId": 10
      },
      "lineNbr": 17,
      "author": {
        "id": 1000805
      },
      "writtenOn": "2017-07-13T01:26:49Z",
      "side": 1,
      "message": "Nit: If you think these add sufficient readability to be worth naming, consider defining them in grid_layout.h itself so others can also benefit",
      "revId": "2b5af62c4abecf25fcd7ad4dbcdefe61c906725b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0523016c_a59439a6",
        "filename": "chrome/browser/ui/views/harmony/textfield_layout.cc",
        "patchSetId": 10
      },
      "lineNbr": 17,
      "author": {
        "id": 1002092
      },
      "writtenOn": "2017-07-13T05:28:16Z",
      "side": 1,
      "message": "I tried things, but hated them all.\n\nI think using \"0\"/\"1\" is awful. But I don\u0027t think `views::GridLayout::kSizeToMinimum` is really an improvement. And I don\u0027t think I can get away with `views::kFixed`. Maybe, nested in views,\n\nnamespace grid_layout {\n  enum class Alignment {..}\n  enum class SizeType {..}\n  constexpr float kFixed .. \n  constexpr float KStretchy..\n}\n\n\nThen to get the call sites readable again, we\u0027d just end up with a `using` delcaration. But that\u0027s not much of an improvement over declaring these constexpr in anonymous namespaces.\n\n\n\nThe way I would share this would be to declare\n\n  void AddFixedPaddingRow(int size);\n  void AddStretchyPaddingRow(int min_size);\n\n  void StartFixedRow(int column_set_id, int height \u003d 0);\n  void StartStretchyRow(int column_set_id, int min_height \u003d 0);\n\n(ColumnSet::)\n\n  void AddFixedPaddingColumn(int width);\n  void AddStretchyPaddingColumn(int min_width);\n\n  void AddFixedColumn(GridLayout::Alignment h_align, ..\n  void AddStretchyColumn(GridLayout::Alignment h_align, ..\n\n\nBut I think that makes the GridLayout API more confusing.\n\n\n(In my mind, all the alternatives have downsides that outweigh the downside of the current approach, but maybe you have a preference)",
      "parentUuid": "1b4b49a2_2478e09c",
      "revId": "2b5af62c4abecf25fcd7ad4dbcdefe61c906725b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7d54b555_2f62b8d4",
        "filename": "chrome/browser/ui/views/harmony/textfield_layout.cc",
        "patchSetId": 10
      },
      "lineNbr": 17,
      "author": {
        "id": 1000805
      },
      "writtenOn": "2017-07-14T01:24:03Z",
      "side": 1,
      "message": "I just figured GridLayout::kFixed/kStretchy.  If that sucks, I don\u0027t have a better idea.",
      "parentUuid": "0523016c_a59439a6",
      "revId": "2b5af62c4abecf25fcd7ad4dbcdefe61c906725b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e753d60a_a983c4d4",
        "filename": "chrome/browser/ui/views/harmony/textfield_layout.cc",
        "patchSetId": 10
      },
      "lineNbr": 17,
      "author": {
        "id": 1002092
      },
      "writtenOn": "2017-07-14T04:25:42Z",
      "side": 1,
      "message": "I suspect the iceberg yak here is that using something other than 0 or 1 for `resize_percent` is a rare use-case, but the API is currently optimized for that.\n\nTo fix, the ticket may be something like (in grid_layout.h)\n\nnamespace views {\n\nstruct ProportionalResize {\n  const float ratio;\n  explicit constexpr ProportionalResize(float ratio) : ratio(ratio) {}\n};\n\nconstexpr ProportionalResize kFixed(0.f);\nconstexpr ProportionalResize kStretchy(1.f);\n\n...\n\n\n(_maybe_ with kFixed/kStretchy nested in `class GridLayout`, but I\u0027d rather not..)\n\n\nThen client code is forced to pick fixed/stretchy or to pass ProportionalResize(0.3) to the Add[Padding]{Row,Column}() methods (or preferably their own named constant rather than a magic rvalue).\n\nBut introducing this piecemeal into GridLayout could make the API more confusing, so it\u0027s an epic refactor.\n\nI\u0027ll play around with this when I\u0027m next in a brute-force refactoring kinda mood..",
      "parentUuid": "7d54b555_2f62b8d4",
      "revId": "2b5af62c4abecf25fcd7ad4dbcdefe61c906725b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9cdcb860_ffa8e2d6",
        "filename": "chrome/browser/ui/views/harmony/textfield_layout.cc",
        "patchSetId": 10
      },
      "lineNbr": 25,
      "author": {
        "id": 1000805
      },
      "writtenOn": "2017-07-13T01:26:49Z",
      "side": 1,
      "message": "Kinda feels like the padding above the top row in the stack should be added manually by the containing dialog, just as any padding below the last row would be.\n\nThis would become necessary (rather than just nice) if we have any dialogs that put such stacks at the top of their content.\n\nAt that point, AddTextfieldRow() just becomes a layout-\u003eAddPaddingRow() call followed by a call to AddFirstTextfieldRow(), which can then inline the rest of this method.",
      "revId": "2b5af62c4abecf25fcd7ad4dbcdefe61c906725b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2b8e3b6e_88ee52e9",
        "filename": "chrome/browser/ui/views/harmony/textfield_layout.cc",
        "patchSetId": 10
      },
      "lineNbr": 25,
      "author": {
        "id": 1002092
      },
      "writtenOn": "2017-07-13T05:28:16Z",
      "side": 1,
      "message": "Done. Although I am not sure this is better -- I liked that the client code is not forced to figure out what DISTANCE_ metric they should be using. It now increases the likelihood of a wrong choice, or of the necessary padding being ignored.",
      "parentUuid": "9cdcb860_ffa8e2d6",
      "revId": "2b5af62c4abecf25fcd7ad4dbcdefe61c906725b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9f26a0c8_1b898c18",
        "filename": "chrome/browser/ui/views/harmony/textfield_layout.cc",
        "patchSetId": 10
      },
      "lineNbr": 25,
      "author": {
        "id": 1000805
      },
      "writtenOn": "2017-07-14T01:24:03Z",
      "side": 1,
      "message": "I think it\u0027s OK.  It\u0027s easy to imagine a row of textboxes below something that should not have UNRELATED_CONTROL_VERTICAL_LARGE.\n\nProbably all this will get simpler in the handwavey Harmony v2 world.",
      "parentUuid": "2b8e3b6e_88ee52e9",
      "revId": "2b5af62c4abecf25fcd7ad4dbcdefe61c906725b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "84a08361_ee974e6c",
        "filename": "chrome/browser/ui/views/harmony/textfield_layout.cc",
        "patchSetId": 10
      },
      "lineNbr": 25,
      "author": {
        "id": 1002092
      },
      "writtenOn": "2017-07-14T04:25:42Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "9f26a0c8_1b898c18",
      "revId": "2b5af62c4abecf25fcd7ad4dbcdefe61c906725b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "183c4261_f0785a2a",
        "filename": "chrome/browser/ui/views/harmony/textfield_layout.cc",
        "patchSetId": 10
      },
      "lineNbr": 63,
      "author": {
        "id": 1000805
      },
      "writtenOn": "2017-07-13T01:26:49Z",
      "side": 1,
      "message": "Note that we want this column to start on a layoutunit-aligned boundary... not sure exactly how to do that in gridlayout today.",
      "revId": "2b5af62c4abecf25fcd7ad4dbcdefe61c906725b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d2729be4_037c02d2",
        "filename": "chrome/browser/ui/views/harmony/textfield_layout.cc",
        "patchSetId": 10
      },
      "lineNbr": 63,
      "author": {
        "id": 1002092
      },
      "writtenOn": "2017-07-13T01:54:12Z",
      "side": 1,
      "message": "It is not possible - GridLayout has no snap-to-grid. (So, actually, the \"simpler\" mock is much more complicated..)\n\nWe could (a) implement this in GridLayout, or (b) we could create a subclass of views::Label which rounds its preferred width up to multiples of kHarmonyLayoutUnit, or (c) we could try to mash this logic into views::Label using DISTANCE_ metrics. My preference is (b).\n\n\nAssuming (b). Options are: anonymous-namespace in textfield_layout.cc or a class in c/b/ui/views/harmony \n\n\n.. any preferences?",
      "parentUuid": "183c4261_f0785a2a",
      "revId": "2b5af62c4abecf25fcd7ad4dbcdefe61c906725b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "81e5c89d_fff35494",
        "filename": "chrome/browser/ui/views/harmony/textfield_layout.cc",
        "patchSetId": 10
      },
      "lineNbr": 63,
      "author": {
        "id": 1000805
      },
      "writtenOn": "2017-07-13T02:20:13Z",
      "side": 1,
      "message": "Probably (a), since the Harmony layout docs talk about snapping all the horizontal widths and start points of everything to layout units.  So it\u0027s not just applicable to the case of textfield-after-label.",
      "parentUuid": "d2729be4_037c02d2",
      "revId": "2b5af62c4abecf25fcd7ad4dbcdefe61c906725b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "40aad7d6_7c733861",
        "filename": "chrome/browser/ui/views/login_view.cc",
        "patchSetId": 10
      },
      "lineNbr": 26,
      "author": {
        "id": 1000805
      },
      "writtenOn": "2017-07-13T01:26:49Z",
      "side": 1,
      "message": "Nit: a -\u003e and",
      "revId": "2b5af62c4abecf25fcd7ad4dbcdefe61c906725b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9600e104_8dd2fcea",
        "filename": "chrome/browser/ui/views/login_view.cc",
        "patchSetId": 10
      },
      "lineNbr": 26,
      "author": {
        "id": 1002092
      },
      "writtenOn": "2017-07-13T05:28:16Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "40aad7d6_7c733861",
      "revId": "2b5af62c4abecf25fcd7ad4dbcdefe61c906725b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3a6c62ca_813c8adc",
        "filename": "chrome/browser/ui/views/login_view.cc",
        "patchSetId": 10
      },
      "lineNbr": 48,
      "author": {
        "id": 1000805
      },
      "writtenOn": "2017-07-13T01:26:49Z",
      "side": 1,
      "message": "Hmmmmmmmm.\n\nIt seems like it\u0027d be more correct to say that the textfields have a preferred width of some number of characters.  Then in Harmony the dialog ends up sized to 320 anyway due to snapping the preferred sizes of the children, unless the font/label strings are so large/long that we go over that; and pre-Harmony the width doesn\u0027t become ridiculously small, it just maybe becomes smaller.",
      "revId": "2b5af62c4abecf25fcd7ad4dbcdefe61c906725b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1e3e7215_a839c843",
        "filename": "chrome/browser/ui/views/login_view.cc",
        "patchSetId": 10
      },
      "lineNbr": 48,
      "author": {
        "id": 1002092
      },
      "writtenOn": "2017-07-13T01:54:12Z",
      "side": 1,
      "message": "You might need to be more specific.\n\nTextfield::default_with_in_chars_ initializes to 0. Do we want textfield_layout.cc to call Textfield::set_default_with_in_chars(kSomeConstant); Or do we want a DISTANCE_ metric for this?",
      "parentUuid": "3a6c62ca_813c8adc",
      "revId": "2b5af62c4abecf25fcd7ad4dbcdefe61c906725b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1ab14ae6_a4262670",
        "filename": "chrome/browser/ui/views/login_view.cc",
        "patchSetId": 10
      },
      "lineNbr": 48,
      "author": {
        "id": 1000805
      },
      "writtenOn": "2017-07-13T02:20:13Z",
      "side": 1,
      "message": "I don\u0027t know that we want either -- I think we want to set a preferred character width on these specific textfields from this dialog.  The preferred character width will inherently be based on the context of what the textfield is supposed to hold, so I don\u0027t think it\u0027s the sort of thing we could specify in the layout provider or at the textfield.cc level.",
      "parentUuid": "1e3e7215_a839c843",
      "revId": "2b5af62c4abecf25fcd7ad4dbcdefe61c906725b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "62281323_3a6c6b75",
        "filename": "chrome/browser/ui/views/login_view.cc",
        "patchSetId": 10
      },
      "lineNbr": 48,
      "author": {
        "id": 1002092
      },
      "writtenOn": "2017-07-13T05:28:16Z",
      "side": 1,
      "message": "We could pass in an argument to ConfigureTextfieldStack to do this. But that\u0027s more complex.\n\n`constexpr int kMessageWidth \u003d 320;` is what the dialog used to do, it\u0027s simple, and it satisfies the current set of use cases. I don\u0027t think we need something more complex unless our use-cases change.\n\n(And when --secondary-ui-md is default we can just pass in 0, so I don\u0027t want to add temporary complexity when the simple thing works).",
      "parentUuid": "1ab14ae6_a4262670",
      "revId": "2b5af62c4abecf25fcd7ad4dbcdefe61c906725b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b73277b0_4fa04a27",
        "filename": "ui/views/layout/layout_provider.h",
        "patchSetId": 10
      },
      "lineNbr": 66,
      "author": {
        "id": 1000805
      },
      "writtenOn": "2017-07-13T01:26:49Z",
      "side": 1,
      "message": "I kinda think we want both textfields and buttons to be \"font height + a fixed amount of padding\".  Changing the font height should change the textfield height (and button height) to something other than 28.  So if we\u0027re going to add a layout constant, I sort of feel like it should be the \"control vertical padding\" instead of the \"control height\".\n\nYou discuss this in your commentary; basically, I think you should indeed go that route and not this one.\n\nI\u0027m worried that there\u0027s an obvious reason why this is dumb, e.g. that bold fonts are 1 pt taller and so their buttons would be larger, or something.  But hardcoding a 28 pt height for either textfields of buttons just feels wrong, whereas saying \"we have this much \u0027control edge\u0027 padding around the top and bottom\" matches up well with how I think of these being sized.",
      "revId": "2b5af62c4abecf25fcd7ad4dbcdefe61c906725b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1d098532_325b5e07",
        "filename": "ui/views/layout/layout_provider.h",
        "patchSetId": 10
      },
      "lineNbr": 66,
      "author": {
        "id": 1002092
      },
      "writtenOn": "2017-07-13T01:54:12Z",
      "side": 1,
      "message": "\"font height\" is a tricky thing to pin down. We have the point size, ascenders/descenders, and line height, and it all changes depending on the platform/typeface. But HarmonyTypographyProvider::GetLineHeight has most of the required arithmetic already.\n\nwdyt about\n\nmax(style::GetLineHeight(CONTEXT_TEXTFIELD), font_list.GetHeight()) + GetDistanceMetric(DISTANCE_CONTROL_VERTICAL_PADDING);\n\nNote this would mean we would not try to normalize MdTextButton and Textfield heights in this CL (buttons need a zero line height in order to not break things and are in-use pre-harmony, so I think that should be dealt with separately).\n\nDISTANCE_CONTROL_VERTICAL_PADDING is 3 on non-harmony (constant in textfield.cc) and kHarmonyLayoutUnit/2 for Harmony.\n\nLineHeight on Harmony is already 20pt, and will mix in the appropriate platform-specific arithmetic to get the correct result.\n\nSo 20 + 4(top) + 4(bottom) gets us to 28.",
      "parentUuid": "b73277b0_4fa04a27",
      "revId": "2b5af62c4abecf25fcd7ad4dbcdefe61c906725b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "038510c3_056bcc24",
        "filename": "ui/views/layout/layout_provider.h",
        "patchSetId": 10
      },
      "lineNbr": 66,
      "author": {
        "id": 1000805
      },
      "writtenOn": "2017-07-13T02:20:13Z",
      "side": 1,
      "message": "Basically, that sounds good.\n\nYour numbers didn\u0027t all make sense to me above so let me try to restate you:  you want the padding value to compute as 3 pre-Harmony and 4 in Harmony, so you use it directly above and below, and you double it when computing the total height.\n\nThat\u0027s how I would do things.  I think it\u0027s what you said above except \"/4\" where you wrote a \"/2\".",
      "parentUuid": "1d098532_325b5e07",
      "revId": "2b5af62c4abecf25fcd7ad4dbcdefe61c906725b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ffcd6292_23d1379f",
        "filename": "ui/views/layout/layout_provider.h",
        "patchSetId": 10
      },
      "lineNbr": 66,
      "author": {
        "id": 1002092
      },
      "writtenOn": "2017-07-13T05:28:16Z",
      "side": 1,
      "message": "Done. Note (even as is): I think this change adds complexity that we don\u0027t have a clear use-case for.\n\nAlso I sunk a lot of time trying to get this to work in a more general way (e.g. inside Textfield), but too many things inherit from textfield already, and rely on Textfield::GetInsets() to return special things, e.g., for the omnibox. I don\u0027t think it\u0027s appropriate to introduce Harmony layout ideas in a way that conflicts with Textfield being used outside of secondary UI.\n\nI also can\u0027t make it work for MdTextButton any more, since line heights are only meaningful with --secondary-ui-md.\n\nThe result is that only textfield_layout.cc uses this - nothing in ui/views - so the plumbing for this is now on ChromeLayoutProvider. Moving it to live entirely in textfield_layout.cc would also be a sane choice, IMO.\n\n(But TBH kRowHeight \u003d 28 also satisfies the current set of use cases that the spec caters for. Wiht that, font sizes configured to have a height of more than 22 will still increase the size of the textbox, while those between 15 and 22 will fit within the 28px used for smaller fonts. We don\u0027t start \"snapping\" line heights to a grid in that case, so using 3px for padding rather than 4px for padding doesn\u0027t seem like an important distinction to make).",
      "parentUuid": "038510c3_056bcc24",
      "revId": "2b5af62c4abecf25fcd7ad4dbcdefe61c906725b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ed6d1df6_b38bb634",
        "filename": "ui/views/layout/layout_provider.h",
        "patchSetId": 10
      },
      "lineNbr": 66,
      "author": {
        "id": 1000805
      },
      "writtenOn": "2017-07-14T01:24:03Z",
      "side": 1,
      "message": "Probably long-term we should find and eliminate cases where doing this inside Textfield breaks something.  For example, the omnibox should probably be using the same insets as other textfields.  For now, trying to deal with all that just means scope creep, so definitely we shouldn\u0027t do it.  But I think this is the right long-term path.\n\nIt also seems like line heights being meaningful all the time would allow this to work on buttons.  It is almost certainly not worth trying to make that happen pre-Harmony, so that sounds like a \"wait for Harmony to be default and then use this there as well\" type case.",
      "parentUuid": "ffcd6292_23d1379f",
      "revId": "2b5af62c4abecf25fcd7ad4dbcdefe61c906725b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f41cb27f_920d413e",
        "filename": "ui/views/layout/layout_provider.h",
        "patchSetId": 10
      },
      "lineNbr": 66,
      "author": {
        "id": 1002092
      },
      "writtenOn": "2017-07-14T04:25:42Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "ed6d1df6_b38bb634",
      "revId": "2b5af62c4abecf25fcd7ad4dbcdefe61c906725b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}