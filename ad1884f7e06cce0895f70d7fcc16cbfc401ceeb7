{
  "comments": [
    {
      "key": {
        "uuid": "efd755eb_7f9f9adc",
        "filename": "components/url_formatter/elide_url.cc",
        "patchSetId": 1
      },
      "lineNbr": 263,
      "author": {
        "id": 1000805
      },
      "writtenOn": "2017-07-06T16:25:33Z",
      "side": 1,
      "message": "Does this mean if we have a very long path and a very short width to display it in, we will elide the end of the domain (incl. TLD) + path instead of the subdomain + path?\n\nIf so that seems like another TODO for a later fix.  We should probably check whether the string would fit if we replaced the whole path with an ellipsis; if so, we\u0027re good to elide using the existing method, but if not, then we should further elide from the front.\n\nWhich is basically what the code below will do.  I wonder whether the loop this was guarding has disappeared and this code can just go away, or if it\u0027s merely moved to a helper and we still have a concern.",
      "revId": "ad1884f7e06cce0895f70d7fcc16cbfc401ceeb7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "55d319d3_85ec84c4",
        "filename": "components/url_formatter/elide_url.cc",
        "patchSetId": 1
      },
      "lineNbr": 263,
      "author": {
        "id": 1115963
      },
      "writtenOn": "2017-07-07T01:04:47Z",
      "side": 1,
      "message": "\u003e Does this mean if we have a very long path and a very short width to display it in, we will elide the end of the domain (incl. TLD) + path instead of the subdomain + path?\n\nYes, if the path is very long (\u003e 1024 elements which means at least 2048 characters if every segment is a single char) then we\u0027ll just chop off the end.\n\nI looked deeper and realised that the problem is ElideComponentizedPath is O(N^2), which is probably why this check exists (in fact 1024 might be too large a cutoff). If nothing else, I think that logic belongs in ECP, not here. Added a TODO.\n\n\u003e We should probably check whether the string would fit if we replaced the whole path with an ellipsis; if so, we\u0027re good to elide using the existing method, but if not, then we should further elide from the front.\n\nI\u0027m not sure ... if we replace the whole path with an ellipsis it\u0027s highly likely to succeed but then we may end up using only 100px of a 1000px row, followed by a silly looking ellipsis. I think we can do a better job... I\u0027m thinking of changing ECP when given very long paths to try halving the length each time instead of -1, making it O(N log N) instead of O(N^2).",
      "parentUuid": "efd755eb_7f9f9adc",
      "revId": "ad1884f7e06cce0895f70d7fcc16cbfc401ceeb7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3035779b_c27a87d4",
        "filename": "components/url_formatter/elide_url.cc",
        "patchSetId": 1
      },
      "lineNbr": 263,
      "author": {
        "id": 1000805
      },
      "writtenOn": "2017-07-07T01:25:38Z",
      "side": 1,
      "message": "I think you misunderstood my proposal.\n\nIf we replace the whole path with an ellipsis and it fits, we should throw out that thing we just created, and use the existing formatting behavior on the original string, since it will work correctly and not have the bug you describe.\n\nIf it still doesn\u0027t fit, then we know replacing the path with an ellipsis was correct, and we should proceed to the remainder of the eliding code to trim the subdomain.\n\nMaking ECP not N^2 would be good.  Binary-searching the length will work as long as you know that each added component makes the name strictly longer.  Given the weirdness of unicode + ligatures and such, I\u0027m not certain whether that\u0027s true, maybe it is?",
      "parentUuid": "55d319d3_85ec84c4",
      "revId": "ad1884f7e06cce0895f70d7fcc16cbfc401ceeb7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "17c89e26_d56b5f14",
        "filename": "components/url_formatter/elide_url.cc",
        "patchSetId": 1
      },
      "lineNbr": 263,
      "author": {
        "id": 1115963
      },
      "writtenOn": "2017-07-07T01:42:11Z",
      "side": 1,
      "message": "I see. That just short circuits bisecting the path in the edge case that not even the domain fits. That\u0027s a valid optimization but I\u0027m not sure it\u0027s worth doing (it doesn\u0027t solve the problem this check is trying to solve, which is a very long path, part of which fits).\n\n\u003e Binary-searching the length will work as long as you know that each added component makes the name strictly longer.  Given the weirdness of unicode + ligatures and such, I\u0027m not certain whether that\u0027s true, maybe it is?\n\nI wasn\u0027t proposing a binary search, just that if the length is long (say, \u003e20), we halve the length on each attempt instead of subtracting 1. The result would be imperfect (may cut off too much) but acceptable and only suboptimal in cases where the path is quite long. We can also bisect.\n\nI\u0027m quite sure string length and text width are non-monotonic in certain cases. But I don\u0027t think we have to worry about that, as long as we are okay with the text not always taking up the maximum allowable width in edge cases.\n\nPhishing shouldn\u0027t be a concern here: this is only for non-secure contexts (such as the status bubble).",
      "parentUuid": "3035779b_c27a87d4",
      "revId": "ad1884f7e06cce0895f70d7fcc16cbfc401ceeb7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "020e39b4_13c8e598",
        "filename": "components/url_formatter/elide_url.cc",
        "patchSetId": 1
      },
      "lineNbr": 300,
      "author": {
        "id": 1000805
      },
      "writtenOn": "2017-07-06T16:25:33Z",
      "side": 1,
      "message": "Nit: Remove blank line?",
      "revId": "ad1884f7e06cce0895f70d7fcc16cbfc401ceeb7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f17d9a64_d533014b",
        "filename": "components/url_formatter/elide_url.cc",
        "patchSetId": 1
      },
      "lineNbr": 300,
      "author": {
        "id": 1115963
      },
      "writtenOn": "2017-07-07T01:04:47Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "020e39b4_13c8e598",
      "revId": "ad1884f7e06cce0895f70d7fcc16cbfc401ceeb7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}