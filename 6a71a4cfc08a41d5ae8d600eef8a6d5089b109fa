{
  "comments": [
    {
      "key": {
        "uuid": "0afbab81_6c4b9f1e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 12,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-11-29T06:35:49Z",
      "side": 1,
      "message": "inside",
      "range": {
        "startLine": 12,
        "startChar": 48,
        "endLine": 12,
        "endChar": 53
      },
      "revId": "6a71a4cfc08a41d5ae8d600eef8a6d5089b109fa",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c80b2898_9bdfe818",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 12,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-11-29T06:35:49Z",
      "side": 1,
      "message": "Missing period after frame?",
      "range": {
        "startLine": 12,
        "startChar": 32,
        "endLine": 12,
        "endChar": 37
      },
      "revId": "6a71a4cfc08a41d5ae8d600eef8a6d5089b109fa",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "989d45c3_a1fbd121",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 12,
      "author": {
        "id": 1126745
      },
      "writtenOn": "2017-11-29T18:53:32Z",
      "side": 1,
      "message": "Done and thanks!",
      "parentUuid": "0afbab81_6c4b9f1e",
      "range": {
        "startLine": 12,
        "startChar": 48,
        "endLine": 12,
        "endChar": 53
      },
      "revId": "6a71a4cfc08a41d5ae8d600eef8a6d5089b109fa",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "24098ff1_4dde339a",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 12,
      "author": {
        "id": 1126745
      },
      "writtenOn": "2017-11-29T18:53:32Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c80b2898_9bdfe818",
      "range": {
        "startLine": 12,
        "startChar": 32,
        "endLine": 12,
        "endChar": 37
      },
      "revId": "6a71a4cfc08a41d5ae8d600eef8a6d5089b109fa",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "caa8c0b1_e3b7d142",
        "filename": "content/renderer/render_widget.cc",
        "patchSetId": 3
      },
      "lineNbr": 2174,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-11-29T06:35:49Z",
      "side": 1,
      "message": "Was that necessary for this refactor, or was it a separate cleanup to match this check being done in other similar places?",
      "range": {
        "startLine": 2174,
        "startChar": 21,
        "endLine": 2174,
        "endChar": 60
      },
      "revId": "6a71a4cfc08a41d5ae8d600eef8a6d5089b109fa",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1defda6e_3b19802b",
        "filename": "content/renderer/render_widget.cc",
        "patchSetId": 3
      },
      "lineNbr": 2174,
      "author": {
        "id": 1126745
      },
      "writtenOn": "2017-11-29T18:53:32Z",
      "side": 1,
      "message": "Hmm, this is not necessary for this refactor and is a separate cleanup. But I believe it can wait to be _added_ in a separate CL (e.g.,  the one refactoring Web[FrameWidget|View]Impl::SelectionBounds which is used in in GetSelectionBounds referenced in line 2194.\n\nSo I will undo this. Thanks for pointing this out.",
      "parentUuid": "caa8c0b1_e3b7d142",
      "range": {
        "startLine": 2174,
        "startChar": 21,
        "endLine": 2174,
        "endChar": 60
      },
      "revId": "6a71a4cfc08a41d5ae8d600eef8a6d5089b109fa",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e5720840_5d0f7081",
        "filename": "content/renderer/render_widget.cc",
        "patchSetId": 3
      },
      "lineNbr": 2202,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-11-29T06:35:49Z",
      "side": 1,
      "message": "Do we need to set |params.is_anchor_first| to false when |focused_frame| is null to match previous behavior?  Maybe just initialize it to false before your if check for clarity?",
      "range": {
        "startLine": 2202,
        "startChar": 8,
        "endLine": 2202,
        "endChar": 30
      },
      "revId": "6a71a4cfc08a41d5ae8d600eef8a6d5089b109fa",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "34cd99e7_c836d00c",
        "filename": "content/renderer/render_widget.cc",
        "patchSetId": 3
      },
      "lineNbr": 2202,
      "author": {
        "id": 1126745
      },
      "writtenOn": "2017-11-29T18:53:32Z",
      "side": 1,
      "message": "Asking out of curiosity, do we not initialize basic types in IPC_STRUCT_MEMBER or sth. I had hard time following the macros.\n\nBut as for clarity I agree it is worth adding the line.",
      "parentUuid": "e5720840_5d0f7081",
      "range": {
        "startLine": 2202,
        "startChar": 8,
        "endLine": 2202,
        "endChar": 30
      },
      "revId": "6a71a4cfc08a41d5ae8d600eef8a6d5089b109fa",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9f3e93bb_df9b5c9c",
        "filename": "content/renderer/render_widget.cc",
        "patchSetId": 3
      },
      "lineNbr": 2202,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-11-30T02:26:22Z",
      "side": 1,
      "message": "I\u0027m not 100% sure, but it\u0027s probably best not to rely on it in any case.  I think when needed, one can specify the default value as an optional third arg to the macro.",
      "parentUuid": "34cd99e7_c836d00c",
      "range": {
        "startLine": 2202,
        "startChar": 8,
        "endLine": 2202,
        "endChar": 30
      },
      "revId": "6a71a4cfc08a41d5ae8d600eef8a6d5089b109fa",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "60e472c9_22c506bf",
        "filename": "content/renderer/render_widget.cc",
        "patchSetId": 3
      },
      "lineNbr": 2202,
      "author": {
        "id": 1126745
      },
      "writtenOn": "2017-11-30T16:30:23Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "9f3e93bb_df9b5c9c",
      "range": {
        "startLine": 2202,
        "startChar": 8,
        "endLine": 2202,
        "endChar": 30
      },
      "revId": "6a71a4cfc08a41d5ae8d600eef8a6d5089b109fa",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bfc038e9_ae5c0248",
        "filename": "content/renderer/render_widget.cc",
        "patchSetId": 3
      },
      "lineNbr": 2581,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-11-29T06:35:49Z",
      "side": 1,
      "message": "It\u0027s a bit sad to have to implement this again, given that we already have FocusedLocalFrameInWidget() on WebFrameWidgetImpl.  WDYT about exposing something like that publicly from WebFrameWidget?  Would Blink owners be ok with that?",
      "range": {
        "startLine": 2578,
        "startChar": 0,
        "endLine": 2581,
        "endChar": 76
      },
      "revId": "6a71a4cfc08a41d5ae8d600eef8a6d5089b109fa",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9e5764f7_48dbd951",
        "filename": "content/renderer/render_widget.cc",
        "patchSetId": 3
      },
      "lineNbr": 2581,
      "author": {
        "id": 1126745
      },
      "writtenOn": "2017-11-29T18:53:32Z",
      "side": 1,
      "message": "I agree it will be a good API to live inside WebFrameWidget. Essentially, it would be a public (wrapper) of the blink/core method WebFrameWidgetBase::FocusedLocalFrameInWidget() which we use for IME. I will wait for blink owner\u0027s feedback on this.",
      "parentUuid": "bfc038e9_ae5c0248",
      "range": {
        "startLine": 2578,
        "startChar": 0,
        "endLine": 2581,
        "endChar": 76
      },
      "revId": "6a71a4cfc08a41d5ae8d600eef8a6d5089b109fa",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "11c62c5d_d85698ef",
        "filename": "content/renderer/render_widget.cc",
        "patchSetId": 3
      },
      "lineNbr": 2581,
      "author": {
        "id": 1000112
      },
      "writtenOn": "2017-11-30T02:44:28Z",
      "side": 1,
      "message": "Since it\u0027s just a convenience helper function I don\u0027t see any problem with exposing this from public/ - certainly seems better than duplicating the logic.  Why is it OK to use this only in local frame cases?  Are there outstanding OOPIF issues here with editing?  If so, perhaps the comment for the public API should make it clear usage is discouraged and link to a bug tracking making editing work correctly in all OOPIF cases.",
      "parentUuid": "9e5764f7_48dbd951",
      "range": {
        "startLine": 2578,
        "startChar": 0,
        "endLine": 2581,
        "endChar": 76
      },
      "revId": "6a71a4cfc08a41d5ae8d600eef8a6d5089b109fa",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c9313d7a_78849c2f",
        "filename": "content/renderer/render_widget.cc",
        "patchSetId": 3
      },
      "lineNbr": 2581,
      "author": {
        "id": 1126745
      },
      "writtenOn": "2017-11-30T16:30:23Z",
      "side": 1,
      "message": "\u003e Since it\u0027s just a convenience helper function I don\u0027t see any problem with exposing this from public/ - certainly seems better than duplicating the logic.\n\nThanks. In that case, I will a helper method to WebFrameWidget,\n\n\u003e Why is it OK to use this only in local frame cases?  Are there outstanding OOPIF issues here with editing?  If so, perhaps the comment for the public API should make it clear usage is discouraged and link to a bug tracking making editing work correctly in all OOPIF cases.\n\n(Assuming I understand the concern correctly:) RemoteFrames do not contain any logic for editing and IME. All the logic lives inside LocalFrame (and its related classes). For OOPIFs its not different. All such tasks are directly routed to and obtained from the OOPIF process where similarly to the main frame\u0027s case, the local frame corresponding to the OOPIF holds the state and handles the requests.\n\nThe RemoteFrame only lives as a shallow placeholder in the remote parent (or child process).\n\nThat being said, I believe for almost all the tasks handled inside a WebFrameWidget or RenderWidget we are dealing with WebLocalFrames.",
      "parentUuid": "11c62c5d_d85698ef",
      "range": {
        "startLine": 2578,
        "startChar": 0,
        "endLine": 2581,
        "endChar": 76
      },
      "revId": "6a71a4cfc08a41d5ae8d600eef8a6d5089b109fa",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "82b7221d_cc8dd5c0",
        "filename": "content/renderer/render_widget.h",
        "patchSetId": 3
      },
      "lineNbr": 886,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-11-29T06:35:49Z",
      "side": 1,
      "message": "Let\u0027s document what this does in a comment.",
      "range": {
        "startLine": 886,
        "startChar": 0,
        "endLine": 886,
        "endChar": 64
      },
      "revId": "6a71a4cfc08a41d5ae8d600eef8a6d5089b109fa",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "51414a2d_fd12fd08",
        "filename": "content/renderer/render_widget.h",
        "patchSetId": 3
      },
      "lineNbr": 886,
      "author": {
        "id": 1126745
      },
      "writtenOn": "2017-11-29T18:53:32Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "82b7221d_cc8dd5c0",
      "range": {
        "startLine": 886,
        "startChar": 0,
        "endLine": 886,
        "endChar": 64
      },
      "revId": "6a71a4cfc08a41d5ae8d600eef8a6d5089b109fa",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "32f21262_99e531a0",
        "filename": "third_party/WebKit/Source/core/frame/WebLocalFrameImpl.cpp",
        "patchSetId": 3
      },
      "lineNbr": 1073,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-11-29T06:35:49Z",
      "side": 1,
      "message": "would it be useful to preserve this WebViewImpl.cpp comment on this line, and another in IsSelectionAnchorFirst?\n// plugins/mouse-capture-inside-shadow.html reaches here.",
      "revId": "6a71a4cfc08a41d5ae8d600eef8a6d5089b109fa",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fd606c82_a1978b7f",
        "filename": "third_party/WebKit/Source/core/frame/WebLocalFrameImpl.cpp",
        "patchSetId": 3
      },
      "lineNbr": 1073,
      "author": {
        "id": 1126745
      },
      "writtenOn": "2017-11-29T18:53:32Z",
      "side": 1,
      "message": "Done. Ditto for IsSelectionAnchorFirst().",
      "parentUuid": "32f21262_99e531a0",
      "revId": "6a71a4cfc08a41d5ae8d600eef8a6d5089b109fa",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}