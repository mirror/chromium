{
  "comments": [
    {
      "key": {
        "uuid": "2cf9fb6d_303836cc",
        "filename": "content/common/page_state.mojom",
        "patchSetId": 21
      },
      "lineNbr": 16,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-10-13T18:22:59Z",
      "side": 1,
      "message": "refer \u003d\u003e prefer",
      "range": {
        "startLine": 16,
        "startChar": 3,
        "endLine": 16,
        "endChar": 8
      },
      "revId": "f4c4a15af1367528d4b3b492a675787fc1eb3083",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2211e70a_63d03e6d",
        "filename": "content/common/page_state.mojom",
        "patchSetId": 21
      },
      "lineNbr": 16,
      "author": {
        "id": 1189064
      },
      "writtenOn": "2017-10-13T21:21:19Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2cf9fb6d_303836cc",
      "range": {
        "startLine": 16,
        "startChar": 3,
        "endLine": 16,
        "endChar": 8
      },
      "revId": "f4c4a15af1367528d4b3b492a675787fc1eb3083",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0f801f77_e06945ab",
        "filename": "content/common/page_state.mojom",
        "patchSetId": 21
      },
      "lineNbr": 32,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-10-13T18:22:59Z",
      "side": 1,
      "message": "Sorry I think there was some miscommunication. ARC++ puts the next ordinal above each interface / union / struct with ordinals, and then has a global next MinVersion (like what we currently have at line 30)",
      "range": {
        "startLine": 32,
        "startChar": 0,
        "endLine": 32,
        "endChar": 21
      },
      "revId": "f4c4a15af1367528d4b3b492a675787fc1eb3083",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "df022759_320477c6",
        "filename": "content/common/page_state.mojom",
        "patchSetId": 21
      },
      "lineNbr": 32,
      "author": {
        "id": 1189064
      },
      "writtenOn": "2017-10-13T21:21:19Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0f801f77_e06945ab",
      "range": {
        "startLine": 32,
        "startChar": 0,
        "endLine": 32,
        "endChar": 21
      },
      "revId": "f4c4a15af1367528d4b3b492a675787fc1eb3083",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0375db7b_995642f2",
        "filename": "content/common/page_state.mojom",
        "patchSetId": 21
      },
      "lineNbr": 37,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-10-13T18:22:59Z",
      "side": 1,
      "message": "FWIW, I think using mojo.common.mojom.Time (and String16) is OK (especially given that we still use url.mojom.Url).\n\nIdeally the serialization test we have below will catch instances where the internal serialization changes... at that point we can decide to fork custom versions of those structs for serialization purposes or figure something else out...\n\nyzshen, what do you think?",
      "revId": "f4c4a15af1367528d4b3b492a675787fc1eb3083",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "83f3cb7a_b5ece079",
        "filename": "content/common/page_state.mojom",
        "patchSetId": 21
      },
      "lineNbr": 37,
      "author": {
        "id": 1104639
      },
      "writtenOn": "2017-10-13T19:29:23Z",
      "side": 1,
      "message": "If we are going to use types outside of this file, it would be nice to:\n1) Add comments at the definitions of those types, saying that non-backward-compat changes to those types will require forking them, and pointing people to here.\n\n2) For each of those types, have a separate unittest to deserialize (from stored bytes) and verify all fields have expected values.\n\nUsing a \"fork-on-write\" approach slows down people touching those types, but at least with (1)\u0026(2) we are less likely to have compatibility issues in the field.\n\nWDYT? Thanks!",
      "parentUuid": "0375db7b_995642f2",
      "revId": "f4c4a15af1367528d4b3b492a675787fc1eb3083",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "38e623a7_ba1b843e",
        "filename": "content/common/page_state.mojom",
        "patchSetId": 21
      },
      "lineNbr": 37,
      "author": {
        "id": 1189064
      },
      "writtenOn": "2017-10-13T21:21:19Z",
      "side": 1,
      "message": "Daniel, I drew the line at native vs not native, which is why I retained string16 and Url but not Time. This seemed like the most obvious line to draw at the time based on what Yuzhu said about these structs likely being converted in the near future. \n\nWRT 2), the PageStateSerializationTest.BackwardsCompat_V26 already deserializes every field from stored bytes and verifies values. I can add a test that does this separately for fields with an external definition, but I\u0027m not sure how much extra value that adds over the existing test.\n\nI am happy to do #1. I\u0027ve added my first attempt at such a comment to the relevant files, but I\u0027m not sure what action I should recommend to future authors who want to make a backwards-incompatible change.",
      "parentUuid": "83f3cb7a_b5ece079",
      "revId": "f4c4a15af1367528d4b3b492a675787fc1eb3083",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a54c5845_26aea19c",
        "filename": "content/common/page_state.mojom",
        "patchSetId": 21
      },
      "lineNbr": 37,
      "author": {
        "id": 1104639
      },
      "writtenOn": "2017-10-13T21:51:48Z",
      "side": 1,
      "message": "\"WRT 2), the PageStateSerializationTest.BackwardsCompat_V26 already deserializes every field from stored bytes and verifies values. I can add a test that does this separately for fields with an external definition, but I\u0027m not sure how much extra value that adds over the existing test.\"\n\nThe thing is, it is not obvious (at least to untrained eyes like mine) that BackwardsCompat_V26 covers exactly every external type. Having minimal test cases (an additional unittest for each external type) is recommended.\n\nIf it is actually easy to verify by skimming the code that every external type is included in that BackwardsCompat_26, and it is easy to figure out when any of them fails to deserialize to expected value, please point me to it. I could be wrong.\n\nSorry for being picky here. Breaking backward compatibility accidentally is usually pretty painful, and I would like to make sure we don\u0027t get into that trouble.",
      "parentUuid": "38e623a7_ba1b843e",
      "revId": "f4c4a15af1367528d4b3b492a675787fc1eb3083",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d5dbbf2c_556ca62a",
        "filename": "content/common/page_state.mojom",
        "patchSetId": 21
      },
      "lineNbr": 37,
      "author": {
        "id": 1104639
      },
      "writtenOn": "2017-10-13T21:55:04Z",
      "side": 1,
      "message": "\"I am happy to do #1. I\u0027ve added my first attempt at such a comment to the relevant files, but I\u0027m not sure what action I should recommend to future authors who want to make a backwards-incompatible change.\"\n\nWe probably should figure out the action now instead of then. :)\nCould it be \"talk to the page state serialization owners, and help/let them duplicate the type in their code before you make the backward-incompat change\"?",
      "parentUuid": "a54c5845_26aea19c",
      "revId": "f4c4a15af1367528d4b3b492a675787fc1eb3083",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fab8684a_efd840e4",
        "filename": "content/common/page_state.mojom",
        "patchSetId": 21
      },
      "lineNbr": 37,
      "author": {
        "id": 1189064
      },
      "writtenOn": "2017-10-13T22:12:01Z",
      "side": 1,
      "message": "I can write \"page state serialization owners\" but this is a bit vague since the file doesn\u0027t have clear ownership more specific than the top-level OWNERS of content/. I could spell out usernames but people don\u0027t say on projects forever. WDYT?",
      "parentUuid": "d5dbbf2c_556ca62a",
      "revId": "f4c4a15af1367528d4b3b492a675787fc1eb3083",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c6c8b9c0_ab4c1078",
        "filename": "content/common/page_state.mojom",
        "patchSetId": 21
      },
      "lineNbr": 37,
      "author": {
        "id": 1104639
      },
      "writtenOn": "2017-10-13T22:18:35Z",
      "side": 1,
      "message": "I don\u0027t have a strong opinion here. At least we make them aware that those types are used by this feature. And then they should be able to figure out who to talk to.",
      "parentUuid": "fab8684a_efd840e4",
      "revId": "f4c4a15af1367528d4b3b492a675787fc1eb3083",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e78e9ef4_92520b9a",
        "filename": "content/common/page_state.mojom",
        "patchSetId": 21
      },
      "lineNbr": 37,
      "author": {
        "id": 1189064
      },
      "writtenOn": "2017-10-16T23:40:18Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c6c8b9c0_ab4c1078",
      "revId": "f4c4a15af1367528d4b3b492a675787fc1eb3083",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}