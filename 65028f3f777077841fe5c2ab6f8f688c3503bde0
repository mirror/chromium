{
  "comments": [
    {
      "key": {
        "uuid": "480c2dcc_e7e94ba1",
        "filename": "chrome/browser/chromeos/preferences.cc",
        "patchSetId": 2
      },
      "lineNbr": 124,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2017-07-27T19:31:03Z",
      "side": 1,
      "message": "I\u0027m not too familiar with the prefs policy code. Why is this one a local state pref whereas the other one is a user profile pref?",
      "revId": "65028f3f777077841fe5c2ab6f8f688c3503bde0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dcb8d625_64d1ce4d",
        "filename": "chrome/browser/chromeos/preferences.cc",
        "patchSetId": 2
      },
      "lineNbr": 124,
      "author": {
        "id": 1161144
      },
      "writtenOn": "2017-07-28T00:29:14Z",
      "side": 1,
      "message": "I am not either :) My idea is that because the name can only be set by the device owner (and is seen the same by every user), this is local state rather than user preference. I can be wrong of course. How would you handle that case?\n\nJulian?",
      "parentUuid": "480c2dcc_e7e94ba1",
      "revId": "65028f3f777077841fe5c2ab6f8f688c3503bde0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "12360c8a_861ccd21",
        "filename": "chrome/browser/chromeos/preferences.cc",
        "patchSetId": 2
      },
      "lineNbr": 124,
      "author": {
        "id": 1000640
      },
      "writtenOn": "2017-07-28T09:22:33Z",
      "side": 1,
      "message": "Correct whatever preference is global for all profiles should end up in the local state pref store. In case of something only settable by one user (or none in case of enterprise owned device) this is fine. Putting here something that everyone can edit is a recipe for chaos unfortunately there are cases where this is unavoidable like for keyboard layouts that sort-of kind-of have to be preserved on the login screen too. \n\nYour case is clear and fine though. :)",
      "parentUuid": "dcb8d625_64d1ce4d",
      "revId": "65028f3f777077841fe5c2ab6f8f688c3503bde0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7557d308_2f23a84e",
        "filename": "chrome/browser/chromeos/preferences.cc",
        "patchSetId": 2
      },
      "lineNbr": 124,
      "author": {
        "id": 1161144
      },
      "writtenOn": "2017-07-29T06:59:17Z",
      "side": 1,
      "message": "I moved the policy for the name setting to device policy. This doesn\u0027t change the local state decision for the preference, right?",
      "parentUuid": "12360c8a_861ccd21",
      "revId": "65028f3f777077841fe5c2ab6f8f688c3503bde0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6b29edfa_c712108a",
        "filename": "components/policy/resources/policy_templates.json",
        "patchSetId": 2
      },
      "lineNbr": 9855,
      "author": {
        "id": 1000640
      },
      "writtenOn": "2017-07-28T09:22:33Z",
      "side": 1,
      "message": "If the device owner is setting this value in something else then the pref behind this policy this is true. \n\nE.g. you have another pref somewhere \"other.devicename\" and then upon setting up case you do realcastname \u003d castreceivername.empty() ? otherprefname : castreceivername; then its fine. \n\nIf you want however to let the user override the empty pref then you will need a handler that will ignore an empty set value in the policy store as it if has not been set as we discussed yesterday in chat.",
      "range": {
        "startLine": 9855,
        "startChar": 254,
        "endLine": 9855,
        "endChar": 295
      },
      "revId": "65028f3f777077841fe5c2ab6f8f688c3503bde0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4851bd00_e6fe4c01",
        "filename": "components/policy/resources/policy_templates.json",
        "patchSetId": 2
      },
      "lineNbr": 9855,
      "author": {
        "id": 1161144
      },
      "writtenOn": "2017-07-28T17:26:34Z",
      "side": 1,
      "message": "So I plan to do something like this when I write the UI:\n\nstring name \u003d prefs_registry-\u003eGetValue(kCastReceiverName).empty() ? cast_receiver-\u003eGetName() :\n  prefs_registry-\u003eGetValue(kCastReceiverName).empty();\nbool editable \u003d prefs_registry-\u003ePrefValueFromDefaultStore(kCastReceiverName);\n\nThis way the name gets set as documented, and if that empty string came from the default store (and not the cloud policy store) we know that an admin didn\u0027t set the policy and therefore the user can edit the name. \n\nSounds about right?",
      "parentUuid": "6b29edfa_c712108a",
      "range": {
        "startLine": 9855,
        "startChar": 254,
        "endLine": 9855,
        "endChar": 295
      },
      "revId": "65028f3f777077841fe5c2ab6f8f688c3503bde0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4d882366_f22e7dd6",
        "filename": "components/policy/resources/policy_templates.json",
        "patchSetId": 2
      },
      "lineNbr": 9855,
      "author": {
        "id": 1161144
      },
      "writtenOn": "2017-07-29T16:18:18Z",
      "side": 1,
      "message": "Copy/pasting even in pseudo code :( And I\u0027d get the string as a string16 for UI.\n\nstring name \u003d IsBlank(prefs_registry-\u003eGetValue(kCastReceiverName)) ? cast_receiver-\u003eGetName() :\n  Trim(prefs_registry-\u003eGetValue(kCastReceiverName)));\nbool editable \u003d prefs_registry-\u003ePrefValueFromDefaultStore(kCastReceiverName);",
      "parentUuid": "4851bd00_e6fe4c01",
      "range": {
        "startLine": 9855,
        "startChar": 254,
        "endLine": 9855,
        "endChar": 295
      },
      "revId": "65028f3f777077841fe5c2ab6f8f688c3503bde0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}