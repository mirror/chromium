{
  "comments": [
    {
      "key": {
        "uuid": "d8bd8c16_6529dcf6",
        "filename": "content/browser/loader/cross_site_document_blocking_browsertest.cc",
        "patchSetId": 26
      },
      "lineNbr": 165,
      "author": {
        "id": 1142059
      },
      "writtenOn": "2017-12-04T16:17:01Z",
      "side": 1,
      "message": "nit: Would you mind also confirming that sendRequest is not blocked for something that wouldn\u0027t otherwise fail e.g. some image? Just to make sure that the bytes\u003d logic is correct.",
      "revId": "31fcc987202bf2c3498252a8448f79dd163f501d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d7fd8f79_47973561",
        "filename": "content/browser/loader/cross_site_document_blocking_browsertest.cc",
        "patchSetId": 26
      },
      "lineNbr": 165,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-12-04T20:15:33Z",
      "side": 1,
      "message": "\u003e nit: Would you mind also confirming that sendRequest is not blocked for something that wouldn\u0027t otherwise fail e.g. some image? Just to make sure that the bytes\u003d logic is correct.\n\nGood idea.  I\u0027ve added valid.js to this test and the one above, and I tested the CORS case as well.",
      "parentUuid": "d8bd8c16_6529dcf6",
      "revId": "31fcc987202bf2c3498252a8448f79dd163f501d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8d4b0f9f_a10f2850",
        "filename": "content/browser/loader/cross_site_document_resource_handler.cc",
        "patchSetId": 26
      },
      "lineNbr": 110,
      "author": {
        "id": 1142059
      },
      "writtenOn": "2017-12-04T16:17:01Z",
      "side": 1,
      "message": "Maybe mime_type_confirmed_blockable?",
      "range": {
        "startLine": 110,
        "startChar": 6,
        "endLine": 110,
        "endChar": 25
      },
      "revId": "31fcc987202bf2c3498252a8448f79dd163f501d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bae6e98d_971f4506",
        "filename": "content/browser/loader/cross_site_document_resource_handler.cc",
        "patchSetId": 26
      },
      "lineNbr": 110,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-12-04T20:15:33Z",
      "side": 1,
      "message": "\u003e Maybe mime_type_confirmed_blockable?\n\nSure.  I went with confirmed_blockable, both for brevity and because the TODO mentions we might use small reads as a cause as well.",
      "parentUuid": "8d4b0f9f_a10f2850",
      "range": {
        "startLine": 110,
        "startChar": 6,
        "endLine": 110,
        "endChar": 25
      },
      "revId": "31fcc987202bf2c3498252a8448f79dd163f501d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5158b9d3_2049fba8",
        "filename": "content/browser/loader/cross_site_document_resource_handler.cc",
        "patchSetId": 26
      },
      "lineNbr": 141,
      "author": {
        "id": 1142059
      },
      "writtenOn": "2017-12-04T16:17:01Z",
      "side": 1,
      "message": "nit: would be nice to inline this in the trace event, so we avoid doing serialization if tracing is turned off. If inlining is very ugly you could also use a helper function / lambda.",
      "revId": "31fcc987202bf2c3498252a8448f79dd163f501d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5bbef959_d7e44165",
        "filename": "content/browser/loader/cross_site_document_resource_handler.cc",
        "patchSetId": 26
      },
      "lineNbr": 141,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-12-04T20:15:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5158b9d3_2049fba8",
      "revId": "31fcc987202bf2c3498252a8448f79dd163f501d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9f2bb96e_e03d1e10",
        "filename": "content/browser/loader/cross_site_document_resource_handler.cc",
        "patchSetId": 26
      },
      "lineNbr": 154,
      "author": {
        "id": 1142059
      },
      "writtenOn": "2017-12-04T16:17:01Z",
      "side": 1,
      "message": "I think memcpy is in \u003ccstring\u003e, so let\u0027s include that.",
      "revId": "31fcc987202bf2c3498252a8448f79dd163f501d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ebd36c50_d13ffe5f",
        "filename": "content/browser/loader/cross_site_document_resource_handler.cc",
        "patchSetId": 26
      },
      "lineNbr": 154,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-12-04T18:18:42Z",
      "side": 1,
      "message": "Minor nit: \u003cstring.h\u003e, since strictly speaking, \u003ccstring\u003e is only required to declare std::memcpy.",
      "parentUuid": "9f2bb96e_e03d1e10",
      "revId": "31fcc987202bf2c3498252a8448f79dd163f501d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e7412c00_9c47ad68",
        "filename": "content/browser/loader/cross_site_document_resource_handler.cc",
        "patchSetId": 26
      },
      "lineNbr": 154,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-12-04T20:15:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9f2bb96e_e03d1e10",
      "revId": "31fcc987202bf2c3498252a8448f79dd163f501d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7e29624a_558ca86f",
        "filename": "content/browser/loader/cross_site_document_resource_handler.cc",
        "patchSetId": 26
      },
      "lineNbr": 154,
      "author": {
        "id": 1142059
      },
      "writtenOn": "2017-12-04T20:35:50Z",
      "side": 1,
      "message": "dcheng\u0027s suggestion not yet resolved.",
      "parentUuid": "e7412c00_9c47ad68",
      "revId": "31fcc987202bf2c3498252a8448f79dd163f501d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "86c29c7d_6d833a6a",
        "filename": "content/browser/loader/cross_site_document_resource_handler.cc",
        "patchSetId": 26
      },
      "lineNbr": 154,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-12-04T22:26:37Z",
      "side": 1,
      "message": "\u003e dcheng\u0027s suggestion not yet resolved.\n\nWoops, his comment must have come in while I was working on yours.  Done.",
      "parentUuid": "7e29624a_558ca86f",
      "revId": "31fcc987202bf2c3498252a8448f79dd163f501d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "07975fb2_7dd20f7f",
        "filename": "content/browser/loader/cross_site_document_resource_handler.cc",
        "patchSetId": 26
      },
      "lineNbr": 194,
      "author": {
        "id": 1142059
      },
      "writtenOn": "2017-12-04T16:17:01Z",
      "side": 1,
      "message": "perf nit: would be nice to have an early out like ChildProcessSecurityPolicyImpl::GetInstance()-\u003eHasAnyIsolatedOrigins() to avoid creating the origin from the URL in the normal case. Feel free to do it in a followup.",
      "revId": "31fcc987202bf2c3498252a8448f79dd163f501d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ed2e0b4d_6624c21d",
        "filename": "content/browser/loader/cross_site_document_resource_handler.cc",
        "patchSetId": 26
      },
      "lineNbr": 194,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-12-04T20:15:33Z",
      "side": 1,
      "message": "\u003e perf nit: would be nice to have an early out like ChildProcessSecurityPolicyImpl::GetInstance()-\u003eHasAnyIsolatedOrigins() to avoid creating the origin from the URL in the normal case. Feel free to do it in a followup.\n\nInteresting.  I\u0027m not opposed for a followup, but I think it may be unnecessary since (1) we\u0027re on track to launch accounts.google.com isolation in M63, so it will always be true in Chrome, and (2) I\u0027m hoping to remove this check in the fairly near future, per the TODO above.",
      "parentUuid": "07975fb2_7dd20f7f",
      "revId": "31fcc987202bf2c3498252a8448f79dd163f501d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a8a8a5f1_5d22ecfb",
        "filename": "content/browser/loader/cross_site_document_resource_handler.cc",
        "patchSetId": 26
      },
      "lineNbr": 265,
      "author": {
        "id": 1142059
      },
      "writtenOn": "2017-12-04T16:17:01Z",
      "side": 1,
      "message": "Would prefer setting:\nneeds_sniffing_ \u003d !base::LowerCaseEqualsASCII(nosniff_header, \"nosniff\") \u0026\u0026 range_header.empty();\n\nSo we only set the bool once. A comment like:\n  // Only sniff if there is no nosniff header, and the request is not a range request, so that attackers...\n\nYou can probably combine the above comments as well into one paragraph.",
      "revId": "31fcc987202bf2c3498252a8448f79dd163f501d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "59043d57_a44f4223",
        "filename": "content/browser/loader/cross_site_document_resource_handler.cc",
        "patchSetId": 26
      },
      "lineNbr": 265,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-12-04T20:15:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a8a8a5f1_5d22ecfb",
      "revId": "31fcc987202bf2c3498252a8448f79dd163f501d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "119a188d_9025bc5c",
        "filename": "content/browser/loader/cross_site_document_resource_handler_unittest.cc",
        "patchSetId": 26
      },
      "lineNbr": 45,
      "author": {
        "id": 1142059
      },
      "writtenOn": "2017-12-04T16:17:01Z",
      "side": 1,
      "message": "nit: prefer constant-style naming for new enums:\nhttps://google.github.io/styleguide/cppguide.html#Enumerator_Names\n\ne.g. kOmit, kAllowAny, etc.",
      "revId": "31fcc987202bf2c3498252a8448f79dd163f501d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4dfe8e3f_303f0957",
        "filename": "content/browser/loader/cross_site_document_resource_handler_unittest.cc",
        "patchSetId": 26
      },
      "lineNbr": 45,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-12-04T20:15:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "119a188d_9025bc5c",
      "revId": "31fcc987202bf2c3498252a8448f79dd163f501d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "076b7c35_e90ae2ff",
        "filename": "content/browser/loader/cross_site_document_resource_handler_unittest.cc",
        "patchSetId": 26
      },
      "lineNbr": 183,
      "author": {
        "id": 1142059
      },
      "writtenOn": "2017-12-04T16:17:01Z",
      "side": 1,
      "message": "std::make_unique to avoid bare new:\nauto stream_sink \u003d std::make_unique\u003cTestResourceHandler\u003e(\u0026stream_sink_status_, \u0026stream_sink_body_);",
      "revId": "31fcc987202bf2c3498252a8448f79dd163f501d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "50f7294a_927bde33",
        "filename": "content/browser/loader/cross_site_document_resource_handler_unittest.cc",
        "patchSetId": 26
      },
      "lineNbr": 183,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-12-04T20:15:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "076b7c35_e90ae2ff",
      "revId": "31fcc987202bf2c3498252a8448f79dd163f501d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a23f4e7f_692113d9",
        "filename": "content/browser/loader/cross_site_document_resource_handler_unittest.cc",
        "patchSetId": 26
      },
      "lineNbr": 240,
      "author": {
        "id": 1142059
      },
      "writtenOn": "2017-12-04T16:17:01Z",
      "side": 1,
      "message": "base::MakeRefCounted",
      "revId": "31fcc987202bf2c3498252a8448f79dd163f501d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "01d84f16_2607ccec",
        "filename": "content/browser/loader/cross_site_document_resource_handler_unittest.cc",
        "patchSetId": 26
      },
      "lineNbr": 240,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-12-04T20:15:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a23f4e7f_692113d9",
      "revId": "31fcc987202bf2c3498252a8448f79dd163f501d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "edfccbd4_04f43fe8",
        "filename": "content/browser/loader/cross_site_document_resource_handler_unittest.cc",
        "patchSetId": 26
      },
      "lineNbr": 266,
      "author": {
        "id": 1142059
      },
      "writtenOn": "2017-12-04T16:17:01Z",
      "side": 1,
      "message": "It feels a bit wrong that this test reaches so deep into the guts of document_blocker_ to verify state, but since many of these members are write-once it\u0027s probably fine.",
      "revId": "31fcc987202bf2c3498252a8448f79dd163f501d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "70cb5383_014c80fd",
        "filename": "content/browser/loader/cross_site_document_resource_handler_unittest.cc",
        "patchSetId": 26
      },
      "lineNbr": 266,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-12-04T20:15:33Z",
      "side": 1,
      "message": "Ack.",
      "parentUuid": "edfccbd4_04f43fe8",
      "revId": "31fcc987202bf2c3498252a8448f79dd163f501d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "880d2121_bb560716",
        "filename": "content/browser/loader/cross_site_document_resource_handler_unittest.cc",
        "patchSetId": 26
      },
      "lineNbr": 321,
      "author": {
        "id": 1142059
      },
      "writtenOn": "2017-12-04T16:17:01Z",
      "side": 1,
      "message": "nit: I would just pull the scenarios into the top anon namespace.",
      "revId": "31fcc987202bf2c3498252a8448f79dd163f501d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d7d489db_bf75090e",
        "filename": "content/browser/loader/cross_site_document_resource_handler_unittest.cc",
        "patchSetId": 26
      },
      "lineNbr": 321,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-12-04T20:15:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "880d2121_bb560716",
      "revId": "31fcc987202bf2c3498252a8448f79dd163f501d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e43a2145_759e5d6b",
        "filename": "content/browser/loader/cross_site_document_resource_handler_unittest.cc",
        "patchSetId": 26
      },
      "lineNbr": 322,
      "author": {
        "id": 1142059
      },
      "writtenOn": "2017-12-04T16:17:01Z",
      "side": 1,
      "message": "Should we have one that was allowed due to a too small first read?",
      "revId": "31fcc987202bf2c3498252a8448f79dd163f501d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8d4e8379_1302e546",
        "filename": "content/browser/loader/cross_site_document_resource_handler_unittest.cc",
        "patchSetId": 26
      },
      "lineNbr": 322,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-12-04T20:15:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e43a2145_759e5d6b",
      "revId": "31fcc987202bf2c3498252a8448f79dd163f501d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "51a01c9b_b89359ac",
        "filename": "content/public/browser/content_browser_client.h",
        "patchSetId": 26
      },
      "lineNbr": 253,
      "author": {
        "id": 1142059
      },
      "writtenOn": "2017-12-04T16:17:01Z",
      "side": 1,
      "message": "nit: No implementation actually needs |url|, so you could omit it.",
      "revId": "31fcc987202bf2c3498252a8448f79dd163f501d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3a7d52da_e8f32427",
        "filename": "content/public/browser/content_browser_client.h",
        "patchSetId": 26
      },
      "lineNbr": 253,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-12-04T20:15:33Z",
      "side": 1,
      "message": "\u003e nit: No implementation actually needs |url|, so you could omit it.\n\nActually, Nick and I decided to put the LinkDoctor check back into ChromeContentBrowserClient, since the resource_fetcher_impl.cc change wasn\u0027t looking good.",
      "parentUuid": "51a01c9b_b89359ac",
      "revId": "31fcc987202bf2c3498252a8448f79dd163f501d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "452f14a6_ee8f329f",
        "filename": "content/renderer/fetchers/resource_fetcher_impl.cc",
        "patchSetId": 26
      },
      "lineNbr": 312,
      "author": {
        "id": 1002169
      },
      "writtenOn": "2017-12-04T21:35:53Z",
      "side": 1,
      "message": "Given that there\u0027s some doubt about whether this approach works, and given that the line above is pretty weird (Access-Control-Allow-Origin is being set on the request, but that\u0027s a response header), I think it makes sense to go back to your original filtering based on the link doctor URL. https://developers.google.com/api-client-library/javascript/features/authentication indicates that PII won\u0027t be available via googleapis.com unless you go through an oauth flow.",
      "revId": "31fcc987202bf2c3498252a8448f79dd163f501d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "12396577_3e2d8834",
        "filename": "content/renderer/fetchers/resource_fetcher_impl.cc",
        "patchSetId": 26
      },
      "lineNbr": 312,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-12-04T22:26:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "452f14a6_ee8f329f",
      "revId": "31fcc987202bf2c3498252a8448f79dd163f501d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "676361ce_a3f0e7e1",
        "filename": "third_party/WebKit/Source/platform/loader/fetch/ResourceFetcher.cpp",
        "patchSetId": 26
      },
      "lineNbr": 609,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-12-04T18:18:42Z",
      "side": 1,
      "message": "Super minor nit: either const ref here, or std::move() below when calling SetRequestorOrigin().",
      "revId": "31fcc987202bf2c3498252a8448f79dd163f501d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5eee8520_9b545858",
        "filename": "third_party/WebKit/Source/platform/loader/fetch/ResourceFetcher.cpp",
        "patchSetId": 26
      },
      "lineNbr": 609,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-12-04T22:26:37Z",
      "side": 1,
      "message": "\u003e Super minor nit: either const ref here, or std::move() below when calling SetRequestorOrigin().\n\nDone.  (It was just a move from below but const ref works.)",
      "parentUuid": "676361ce_a3f0e7e1",
      "revId": "31fcc987202bf2c3498252a8448f79dd163f501d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1c35394b_719ace82",
        "filename": "third_party/WebKit/Source/platform/loader/fetch/ResourceFetcher.cpp",
        "patchSetId": 26
      },
      "lineNbr": 617,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-12-04T18:18:42Z",
      "side": 1,
      "message": "I wish there was a way to be more explicit about this: it feels really indirect that these set of conditions being true implies an isolated world. For example, why is it important to check IsUnique() here? \n\nCan you help me understand what an \"isolated world execution context\" is? Does it mean the isolated world in which content scripts run? Or the actual Document corresponds to the execution context of an extension background/event page?",
      "range": {
        "startLine": 612,
        "startChar": 0,
        "endLine": 617,
        "endChar": 25
      },
      "revId": "31fcc987202bf2c3498252a8448f79dd163f501d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "68f0542a_af85d221",
        "filename": "third_party/WebKit/Source/platform/loader/fetch/ResourceFetcher.cpp",
        "patchSetId": 26
      },
      "lineNbr": 617,
      "author": {
        "id": 1002169
      },
      "writtenOn": "2017-12-04T21:35:53Z",
      "side": 1,
      "message": "Maybe you want to suggest a rewording? \"Isolated world execution context\" is just me trying to speak Blink, and apparently failing. I\u0027d be more than happy for this to explicitly mention extension content scripts, but I thought layering required us to pretend they didn\u0027t exist.\n\nTwo cases that can cause this branch to be taken are: a fetch from setIsolatedWorldSecurityOrigin (via the test API), and a fetch from extension content scripts.  There are also isolated worlds carved out for ISOLATED_WORLD_ID_APPLESCRIPT and ISOLATED_WORLD_ID_CHROME_INTERNAL (which is used by dom distiller and offline pages). Unclear if either of these initiate fetches/XHRs, but if they do, they might hit this branch as well.\n\nAFAIK when a document is loaded in from a chrome-extension:// resource, its scripts run in the main world. My understanding of isolated worlds is that they are a way to get a second execution context running in the same document.\n\nChecking IsUnique() here is defensive -- I was worried about the case where Context.GetSecurityOrigin() is non-unique, but options.security_origin was default-initialized, and we don\u0027t want to lose the information. It is also important not to assign RequestorOrigin if both |origin| and |Context().GetSecurityOrigin()| are unique, because another code path might have assigned RequestorOrigin to be the Origin of the URL -- \"request.SetRequestorOrigin(SecurityOrigin::Create(GetDocument().Url()));\" occurs in at least a couple spots.",
      "parentUuid": "1c35394b_719ace82",
      "range": {
        "startLine": 612,
        "startChar": 0,
        "endLine": 617,
        "endChar": 25
      },
      "revId": "31fcc987202bf2c3498252a8448f79dd163f501d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}