{
  "comments": [
    {
      "key": {
        "uuid": "58f5dfd1_e83c6e4f",
        "filename": "ash/accessibility/accessibility_controller.cc",
        "patchSetId": 9
      },
      "lineNbr": 106,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2017-11-09T21:41:04Z",
      "side": 1,
      "message": "It\u0027s unfortunate this is necessary. I think the browser test TrayAccessibilityTest is doing something wrong with how it simulates login (in theory it shouldn\u0027t need to poke directly into ash). I\u0027m going to take a quick look at removing AccessibilityController::SetPrefServiceForTest() -- I should have an answer today.\n\nFor now this is fine, just be aware I might delete pref_service_for_test_ soon. :-)",
      "revId": "c1731ce87818feef286c390fb0802baa95431149",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "99dcb3ad_a1785265",
        "filename": "chrome/browser/chromeos/arc/enterprise/arc_cert_store_bridge_browsertest.cc",
        "patchSetId": 9
      },
      "lineNbr": 106,
      "author": {
        "id": 1175129
      },
      "writtenOn": "2017-11-15T15:07:41Z",
      "side": 1,
      "message": "nit: Could you add a comment similar to the one in external_filesystem_apitest.cc ?\n\ne.g.\n// this is required because this test creates a secondary\n// profile synchronously, so we need to let the policy code\n// know not to expect cached policy.",
      "range": {
        "startLine": 106,
        "startChar": 56,
        "endLine": 106,
        "endChar": 78
      },
      "revId": "c1731ce87818feef286c390fb0802baa95431149",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f2a5873b_d153696c",
        "filename": "chrome/browser/chromeos/arc/enterprise/arc_cert_store_bridge_browsertest.cc",
        "patchSetId": 9
      },
      "lineNbr": 106,
      "author": {
        "id": 1001963
      },
      "writtenOn": "2017-12-10T13:21:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "99dcb3ad_a1785265",
      "range": {
        "startLine": 106,
        "startChar": 56,
        "endLine": 106,
        "endChar": 78
      },
      "revId": "c1731ce87818feef286c390fb0802baa95431149",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "37230368_f7e3986c",
        "filename": "chrome/browser/chromeos/login/users/user_manager_unittest.cc",
        "patchSetId": 9
      },
      "lineNbr": 283,
      "author": {
        "id": 1175129
      },
      "writtenOn": "2017-11-15T15:07:41Z",
      "side": 1,
      "message": "Why is this needed here? If this is to prevent state from leaking to other test runs, shouldn\u0027t it be done in TearDown()?",
      "range": {
        "startLine": 283,
        "startChar": 2,
        "endLine": 283,
        "endChar": 18
      },
      "revId": "c1731ce87818feef286c390fb0802baa95431149",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4a93daf4_88549387",
        "filename": "chrome/browser/chromeos/login/users/user_manager_unittest.cc",
        "patchSetId": 9
      },
      "lineNbr": 283,
      "author": {
        "id": 1001963
      },
      "writtenOn": "2017-12-10T13:21:33Z",
      "side": 1,
      "message": "You have to call ResetUserManager() after calling UserLoggedIn() or else you crash due to dangling observers.\n\nMany tests want to check assertions after calling ResetUserManager() so it\u0027s not always appropriate to call it in TearDown(). Mostly, I\u0027m just following the example used everywhere else in the file (for example, see ScreenLockAvailability in this same file).",
      "parentUuid": "37230368_f7e3986c",
      "range": {
        "startLine": 283,
        "startChar": 2,
        "endLine": 283,
        "endChar": 18
      },
      "revId": "c1731ce87818feef286c390fb0802baa95431149",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9b0c5298_35362af9",
        "filename": "chrome/browser/chromeos/policy/user_cloud_policy_manager_chromeos.cc",
        "patchSetId": 9
      },
      "lineNbr": 14,
      "author": {
        "id": 1175129
      },
      "writtenOn": "2017-11-15T15:07:41Z",
      "side": 1,
      "message": "nit: Unnecessary - the style guide[1] says that foo.cc may rely on foo.h\u0027s includes, and stack_trace.h is included in user_cloud_policy_manager_chromeos.h\n\n[1] https://google.github.io/styleguide/cppguide.html#Names_and_Order_of_Includes",
      "range": {
        "startLine": 14,
        "startChar": 21,
        "endLine": 14,
        "endChar": 32
      },
      "revId": "c1731ce87818feef286c390fb0802baa95431149",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c3839015_de9b7f60",
        "filename": "chrome/browser/chromeos/policy/user_cloud_policy_manager_chromeos.cc",
        "patchSetId": 9
      },
      "lineNbr": 14,
      "author": {
        "id": 1001963
      },
      "writtenOn": "2017-12-10T13:21:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9b0c5298_35362af9",
      "range": {
        "startLine": 14,
        "startChar": 21,
        "endLine": 14,
        "endChar": 32
      },
      "revId": "c1731ce87818feef286c390fb0802baa95431149",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1d8c0b36_7087e982",
        "filename": "chrome/browser/chromeos/policy/user_cloud_policy_manager_chromeos.cc",
        "patchSetId": 9
      },
      "lineNbr": 14,
      "author": {
        "id": 1126309
      },
      "writtenOn": "2017-12-13T21:43:16Z",
      "side": 1,
      "message": "nit: This is already included from the header.",
      "revId": "c1731ce87818feef286c390fb0802baa95431149",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e4c742ca_4c19ca54",
        "filename": "chrome/browser/chromeos/policy/user_cloud_policy_manager_chromeos.cc",
        "patchSetId": 9
      },
      "lineNbr": 174,
      "author": {
        "id": 1126309
      },
      "writtenOn": "2017-12-13T21:43:16Z",
      "side": 1,
      "message": "nit: Shouldn\u0027t |waiting_for_initial_policy_fetch_| be mentioned here instead? Or I\u0027m not following the logic here.\n\nAnd also please surround the variable name by \"|\" in the comment.",
      "range": {
        "startLine": 174,
        "startChar": 48,
        "endLine": 174,
        "endChar": 70
      },
      "revId": "c1731ce87818feef286c390fb0802baa95431149",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e8c3d3cd_9bbf4a0c",
        "filename": "chrome/browser/chromeos/policy/user_cloud_policy_manager_chromeos.cc",
        "patchSetId": 9
      },
      "lineNbr": 178,
      "author": {
        "id": 1126309
      },
      "writtenOn": "2017-12-13T21:43:16Z",
      "side": 1,
      "message": "nit: Maybe use LOG_IF(FATAL)? It will be more obvious that the whole condition is only related to the assertion.",
      "revId": "c1731ce87818feef286c390fb0802baa95431149",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b8ae703d_4bb8aba4",
        "filename": "chrome/browser/chromeos/policy/user_cloud_policy_manager_chromeos.cc",
        "patchSetId": 9
      },
      "lineNbr": 191,
      "author": {
        "id": 1175129
      },
      "writtenOn": "2017-11-15T15:07:41Z",
      "side": 1,
      "message": "Is it ok that we\u0027re not calling service()-\u003eRefreshPolicy here anymore?",
      "range": {
        "startLine": 191,
        "startChar": 4,
        "endLine": 191,
        "endChar": 29
      },
      "revId": "c1731ce87818feef286c390fb0802baa95431149",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0826a80e_e68245cb",
        "filename": "chrome/browser/chromeos/policy/user_cloud_policy_manager_chromeos.cc",
        "patchSetId": 9
      },
      "lineNbr": 191,
      "author": {
        "id": 1001963
      },
      "writtenOn": "2017-12-10T13:21:33Z",
      "side": 1,
      "message": "Yes, this is very very intentional. If initialization is complete, we\u0027re in the synchronous-profile-load flow (i.e. after a browser restart). The old behavior where we forced a policy refresh was working around a problem where waiting_for_initial_policy_fetch_ was set even when we were in synchronous-profile-load mode, which has now been fixed.\n\nBasically, if we\u0027re in synchronous-profile-load mode, and we don\u0027t have cached policy, we invoke the fatal_error_callback_ -- otherwise, we mark our policy as loaded (no need to refresh since we already have cached data).",
      "parentUuid": "b8ae703d_4bb8aba4",
      "range": {
        "startLine": 191,
        "startChar": 4,
        "endLine": 191,
        "endChar": 29
      },
      "revId": "c1731ce87818feef286c390fb0802baa95431149",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c6977f0c_a374aae5",
        "filename": "chrome/browser/chromeos/policy/user_cloud_policy_manager_chromeos.cc",
        "patchSetId": 9
      },
      "lineNbr": 207,
      "author": {
        "id": 1175129
      },
      "writtenOn": "2017-11-15T15:07:41Z",
      "side": 1,
      "message": "Consider adding a comment that this is safe because this class owns wildacrd_login_checker_ (and WildcardLoginChecker would not call the callback after being destroyed).",
      "range": {
        "startLine": 207,
        "startChar": 25,
        "endLine": 207,
        "endChar": 35
      },
      "revId": "c1731ce87818feef286c390fb0802baa95431149",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e2558e43_e4e789eb",
        "filename": "chrome/browser/chromeos/policy/user_cloud_policy_manager_chromeos.cc",
        "patchSetId": 9
      },
      "lineNbr": 207,
      "author": {
        "id": 1001963
      },
      "writtenOn": "2017-12-10T13:21:33Z",
      "side": 1,
      "message": "Done, but typically we don\u0027t do that because that\u0027s kind of the default when you aren\u0027t using a WeakPointerFactory.",
      "parentUuid": "c6977f0c_a374aae5",
      "range": {
        "startLine": 207,
        "startChar": 25,
        "endLine": 207,
        "endChar": 35
      },
      "revId": "c1731ce87818feef286c390fb0802baa95431149",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "72983878_1b0e3715",
        "filename": "chrome/browser/chromeos/policy/user_cloud_policy_manager_chromeos.cc",
        "patchSetId": 9
      },
      "lineNbr": 264,
      "author": {
        "id": 1126309
      },
      "writtenOn": "2017-12-13T21:43:16Z",
      "side": 1,
      "message": "nit: I believe the overridden methods are typically not documented additionally - the explanation should come from the base class.\n\nOr you wanted to say this method is more than just an overridden listener method? But then I\u0027d suggest to have a separate method with a clearer name and documentation.",
      "revId": "c1731ce87818feef286c390fb0802baa95431149",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e2de055c_162a68a2",
        "filename": "chrome/browser/chromeos/policy/user_cloud_policy_manager_chromeos.cc",
        "patchSetId": 9
      },
      "lineNbr": 399,
      "author": {
        "id": 1175129
      },
      "writtenOn": "2017-11-15T15:07:41Z",
      "side": 1,
      "message": "What about passing the |user| into UserCloudPolicyManagerChromeOS\u0027s ctor instead? This feels kind of fragile, should we ever expand on the multi-user scenarios.",
      "range": {
        "startLine": 399,
        "startChar": 49,
        "endLine": 399,
        "endChar": 62
      },
      "revId": "c1731ce87818feef286c390fb0802baa95431149",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f603a0a9_ca9350ba",
        "filename": "chrome/browser/chromeos/policy/user_cloud_policy_manager_chromeos.cc",
        "patchSetId": 9
      },
      "lineNbr": 399,
      "author": {
        "id": 1001963
      },
      "writtenOn": "2017-12-10T13:21:33Z",
      "side": 1,
      "message": "Great point, and I suspect this fixes a bug when trying to load policy for a secondary user. I\u0027ve changed to pass in the user\u0027s account id.",
      "parentUuid": "e2de055c_162a68a2",
      "range": {
        "startLine": 399,
        "startChar": 49,
        "endLine": 399,
        "endChar": 62
      },
      "revId": "c1731ce87818feef286c390fb0802baa95431149",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "68d23a55_ec0ae0f0",
        "filename": "chrome/browser/chromeos/policy/user_cloud_policy_manager_chromeos.cc",
        "patchSetId": 9
      },
      "lineNbr": 415,
      "author": {
        "id": 1175129
      },
      "writtenOn": "2017-11-15T15:07:41Z",
      "side": 1,
      "message": "Is the purpose of this to retain pre-existing flags, but DCHECK-fail if there were pre-existing flags? Why would we want to DCHECK-fail here in that case?",
      "range": {
        "startLine": 414,
        "startChar": 0,
        "endLine": 415,
        "endChar": 32
      },
      "revId": "c1731ce87818feef286c390fb0802baa95431149",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "07dc2b6a_b26543ba",
        "filename": "chrome/browser/chromeos/policy/user_cloud_policy_manager_chromeos.cc",
        "patchSetId": 9
      },
      "lineNbr": 415,
      "author": {
        "id": 1001963
      },
      "writtenOn": "2017-12-10T13:21:33Z",
      "side": 1,
      "message": "No, it\u0027s just checking our expectation that we\u0027re adding only a single flag (kProfileRequiresPolicy). It\u0027s kind of a dumb DCHECK() but we do this elsewhere so I copied it here as well.",
      "parentUuid": "68d23a55_ec0ae0f0",
      "range": {
        "startLine": 414,
        "startChar": 0,
        "endLine": 415,
        "endChar": 32
      },
      "revId": "c1731ce87818feef286c390fb0802baa95431149",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b3b57fdb_c0eb45ae",
        "filename": "chrome/browser/chromeos/policy/user_cloud_policy_manager_chromeos.h",
        "patchSetId": 9
      },
      "lineNbr": 126,
      "author": {
        "id": 1175129
      },
      "writtenOn": "2017-11-15T15:07:41Z",
      "side": 1,
      "message": "nit: What about StorePolicyRequired? I think it\u0027d be nice if it was obvious that this is about setting the flag for future sessions, not for this particular UserCloudPolicyManagerChromeOS instance\u0027s behavior.",
      "range": {
        "startLine": 126,
        "startChar": 7,
        "endLine": 126,
        "endChar": 24
      },
      "revId": "c1731ce87818feef286c390fb0802baa95431149",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "91860ef6_942502b9",
        "filename": "chrome/browser/chromeos/policy/user_cloud_policy_manager_chromeos.h",
        "patchSetId": 9
      },
      "lineNbr": 126,
      "author": {
        "id": 1001963
      },
      "writtenOn": "2017-12-10T13:21:33Z",
      "side": 1,
      "message": "I think this naming is appropriate for a setter, but I\u0027ve updated the documentation to clarify the behavior.",
      "parentUuid": "b3b57fdb_c0eb45ae",
      "range": {
        "startLine": 126,
        "startChar": 7,
        "endLine": 126,
        "endChar": 24
      },
      "revId": "c1731ce87818feef286c390fb0802baa95431149",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2d678d1d_f870965a",
        "filename": "chrome/browser/chromeos/policy/user_cloud_policy_manager_chromeos.h",
        "patchSetId": 9
      },
      "lineNbr": 126,
      "author": {
        "id": 1126309
      },
      "writtenOn": "2017-12-13T21:43:16Z",
      "side": 1,
      "message": "I\u0027m also not insisting, but my opinion is that something like with the word \"Store\" or \"Persist\" would be clearer. As a typical setter just updates some data in memory, without persisting it through restarts.",
      "parentUuid": "91860ef6_942502b9",
      "range": {
        "startLine": 126,
        "startChar": 7,
        "endLine": 126,
        "endChar": 24
      },
      "revId": "c1731ce87818feef286c390fb0802baa95431149",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "31e05707_bf7b8018",
        "filename": "chrome/browser/chromeos/policy/user_cloud_policy_manager_chromeos_unittest.cc",
        "patchSetId": 9
      },
      "lineNbr": 353,
      "author": {
        "id": 1175129
      },
      "writtenOn": "2017-11-15T15:07:41Z",
      "side": 1,
      "message": "Please add a comment that this is \"automatically\" verified on TearDown(), as it seems rather non-obvious.",
      "range": {
        "startLine": 353,
        "startChar": 7,
        "endLine": 353,
        "endChar": 28
      },
      "revId": "c1731ce87818feef286c390fb0802baa95431149",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c0759ea7_9addd8b7",
        "filename": "chrome/browser/chromeos/policy/user_cloud_policy_manager_chromeos_unittest.cc",
        "patchSetId": 9
      },
      "lineNbr": 353,
      "author": {
        "id": 1001963
      },
      "writtenOn": "2017-12-10T13:21:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "31e05707_bf7b8018",
      "range": {
        "startLine": 353,
        "startChar": 7,
        "endLine": 353,
        "endChar": 28
      },
      "revId": "c1731ce87818feef286c390fb0802baa95431149",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5e0cd365_c62f3892",
        "filename": "chrome/browser/chromeos/policy/user_policy_manager_factory_chromeos.cc",
        "patchSetId": 9
      },
      "lineNbr": 186,
      "author": {
        "id": 1175129
      },
      "writtenOn": "2017-11-15T15:07:41Z",
      "side": 1,
      "message": "Does this buy us anything? (Except for tests), the flag is only evaluated in this function after this test.\nSo if we ever have to e.g. revoke a domain from the \"non-enterprise-user list\", we would have to reset the requires-policy flag for users from that domain.\n\nOr is the point of doing it here better testability of the decision?",
      "range": {
        "startLine": 186,
        "startChar": 30,
        "endLine": 186,
        "endChar": 54
      },
      "revId": "c1731ce87818feef286c390fb0802baa95431149",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cff0c0d8_4296c0d6",
        "filename": "chrome/browser/chromeos/policy/user_policy_manager_factory_chromeos.cc",
        "patchSetId": 9
      },
      "lineNbr": 186,
      "author": {
        "id": 1001963
      },
      "writtenOn": "2017-12-10T13:21:33Z",
      "side": 1,
      "message": "In general, we want to know if users have policy in known_users. Long term this will be valuable, so I\u0027d like to keep this up-to-date whenever possible (for example, some of the ext4 migration stuff would\u0027ve been easier to handle if we knew prior to mounting cryptohome if a given user had policy).",
      "parentUuid": "5e0cd365_c62f3892",
      "range": {
        "startLine": 186,
        "startChar": 30,
        "endLine": 186,
        "endChar": 54
      },
      "revId": "c1731ce87818feef286c390fb0802baa95431149",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9be4b7a9_fcb559a3",
        "filename": "chrome/browser/chromeos/policy/user_policy_manager_factory_chromeos.cc",
        "patchSetId": 9
      },
      "lineNbr": 218,
      "author": {
        "id": 1175129
      },
      "writtenOn": "2017-11-15T15:07:41Z",
      "side": 1,
      "message": "nit: checked",
      "range": {
        "startLine": 218,
        "startChar": 26,
        "endLine": 218,
        "endChar": 31
      },
      "revId": "c1731ce87818feef286c390fb0802baa95431149",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8a9d9e4c_d66cdd2b",
        "filename": "chrome/browser/chromeos/policy/user_policy_manager_factory_chromeos.cc",
        "patchSetId": 9
      },
      "lineNbr": 218,
      "author": {
        "id": 1001963
      },
      "writtenOn": "2017-12-10T13:21:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9be4b7a9_fcb559a3",
      "range": {
        "startLine": 218,
        "startChar": 26,
        "endLine": 218,
        "endChar": 31
      },
      "revId": "c1731ce87818feef286c390fb0802baa95431149",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4d9ea3a1_c65fb243",
        "filename": "chrome/browser/chromeos/policy/user_policy_manager_factory_chromeos.cc",
        "patchSetId": 9
      },
      "lineNbr": 361,
      "author": {
        "id": 1175129
      },
      "writtenOn": "2017-11-15T15:07:41Z",
      "side": 1,
      "message": "nit: consider adding /* fatal_error_callback */",
      "range": {
        "startLine": 361,
        "startChar": 18,
        "endLine": 361,
        "endChar": 26
      },
      "revId": "c1731ce87818feef286c390fb0802baa95431149",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dcfe5ae8_30c1ac6e",
        "filename": "chrome/browser/chromeos/policy/user_policy_manager_factory_chromeos.cc",
        "patchSetId": 9
      },
      "lineNbr": 361,
      "author": {
        "id": 1001963
      },
      "writtenOn": "2017-12-10T13:21:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4d9ea3a1_c65fb243",
      "range": {
        "startLine": 361,
        "startChar": 18,
        "endLine": 361,
        "endChar": 26
      },
      "revId": "c1731ce87818feef286c390fb0802baa95431149",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d1eaaa3a_14903621",
        "filename": "components/user_manager/known_user.cc",
        "patchSetId": 9
      },
      "lineNbr": 495,
      "author": {
        "id": 1000623
      },
      "writtenOn": "2017-11-14T17:27:21Z",
      "side": 1,
      "message": "nit drop {}",
      "revId": "c1731ce87818feef286c390fb0802baa95431149",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9effe65b_6e9e90bd",
        "filename": "components/user_manager/known_user.h",
        "patchSetId": 9
      },
      "lineNbr": 140,
      "author": {
        "id": 1126309
      },
      "writtenOn": "2017-12-13T21:43:16Z",
      "side": 1,
      "message": "nit: Please add an empty line before this.",
      "revId": "c1731ce87818feef286c390fb0802baa95431149",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b9146018_4a38779a",
        "filename": "components/user_manager/known_user.h",
        "patchSetId": 9
      },
      "lineNbr": 143,
      "author": {
        "id": 1000623
      },
      "writtenOn": "2017-11-14T17:27:21Z",
      "side": 1,
      "message": "I think we prefer enum classes?\nhttps://chromium-cpp.appspot.com/ (look for enumerated type)",
      "revId": "c1731ce87818feef286c390fb0802baa95431149",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6bc059b2_6ad5e736",
        "filename": "components/user_manager/known_user.h",
        "patchSetId": 9
      },
      "lineNbr": 143,
      "author": {
        "id": 1001963
      },
      "writtenOn": "2017-12-10T13:21:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b9146018_4a38779a",
      "revId": "c1731ce87818feef286c390fb0802baa95431149",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5d801a47_1bc32c1e",
        "filename": "components/user_manager/known_user.h",
        "patchSetId": 9
      },
      "lineNbr": 143,
      "author": {
        "id": 1126309
      },
      "writtenOn": "2017-12-13T21:43:16Z",
      "side": 1,
      "message": "nit: Why typedef, not just \"enum ProfileRequiresPolicy\"?\nAnd probably use the C++11 type-safe enum classes?",
      "revId": "c1731ce87818feef286c390fb0802baa95431149",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "81e49cab_41c6342e",
        "filename": "components/user_manager/known_user.h",
        "patchSetId": 9
      },
      "lineNbr": 144,
      "author": {
        "id": 1000623
      },
      "writtenOn": "2017-11-14T17:27:21Z",
      "side": 1,
      "message": "We should probably use constant-style naming here, so kUnknown, kPolicyRequired, etc. There\u0027s a chance UNKNOWN may conflict with a macro",
      "revId": "c1731ce87818feef286c390fb0802baa95431149",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b30cf01c_d535398f",
        "filename": "components/user_manager/known_user.h",
        "patchSetId": 9
      },
      "lineNbr": 144,
      "author": {
        "id": 1001963
      },
      "writtenOn": "2017-12-10T13:21:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "81e49cab_41c6342e",
      "revId": "c1731ce87818feef286c390fb0802baa95431149",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}