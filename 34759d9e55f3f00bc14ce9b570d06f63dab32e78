{
  "comments": [
    {
      "key": {
        "uuid": "f67e27b7_65c390e8",
        "filename": "chrome/browser/media/router/discovery/mdns/cast_media_sink_service_impl.cc",
        "patchSetId": 6
      },
      "lineNbr": 118,
      "author": {
        "id": 1133789
      },
      "writtenOn": "2017-08-10T21:34:04Z",
      "side": 1,
      "message": "Is it possible for |network_id| to be equal to |current_network_id_|? Maybe consider adding a check to short circuit this case.",
      "revId": "34759d9e55f3f00bc14ce9b570d06f63dab32e78",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "83ab1041_c26d937c",
        "filename": "chrome/browser/media/router/discovery/mdns/cast_media_sink_service_impl.cc",
        "patchSetId": 6
      },
      "lineNbr": 120,
      "author": {
        "id": 1212411
      },
      "writtenOn": "2017-08-09T21:19:25Z",
      "side": 1,
      "message": "nit: { is not necessary for one line statement. Maybe \n\nif (!IsNetworkIdUnknownOrDisconnected(last_network_id)) {\n  sink_cache_[last_network_id]....\n}\n\nto avoid two \u0027return\u0027. Fine to leave it...",
      "range": {
        "startLine": 120,
        "startChar": 59,
        "endLine": 120,
        "endChar": 60
      },
      "revId": "34759d9e55f3f00bc14ce9b570d06f63dab32e78",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a31b1723_9f242fbe",
        "filename": "chrome/browser/media/router/discovery/mdns/cast_media_sink_service_impl.cc",
        "patchSetId": 6
      },
      "lineNbr": 120,
      "author": {
        "id": 1133789
      },
      "writtenOn": "2017-08-10T21:34:04Z",
      "side": 1,
      "message": "It seems in the current logic, we aren\u0027t saving sinks to cache if we are switching from one valid network id to another valid network id.",
      "parentUuid": "83ab1041_c26d937c",
      "range": {
        "startLine": 120,
        "startChar": 59,
        "endLine": 120,
        "endChar": 60
      },
      "revId": "34759d9e55f3f00bc14ce9b570d06f63dab32e78",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bdedb46c_d674cbd4",
        "filename": "chrome/browser/media/router/discovery/mdns/cast_media_sink_service_impl.cc",
        "patchSetId": 6
      },
      "lineNbr": 134,
      "author": {
        "id": 1133789
      },
      "writtenOn": "2017-08-10T21:34:04Z",
      "side": 1,
      "message": "This also erases |current_service_ip_endpoints_| (which might\u0027ve been added by mDNS calling OpenChannels) and replaces it with entries in the cache. Since we are changing networks, I suppose this is fine for metrics purposes.",
      "revId": "34759d9e55f3f00bc14ce9b570d06f63dab32e78",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1d3f2816_fa7bddc3",
        "filename": "chrome/browser/media/router/discovery/mdns/cast_media_sink_service_impl.h",
        "patchSetId": 6
      },
      "lineNbr": 93,
      "author": {
        "id": 1133789
      },
      "writtenOn": "2017-08-10T21:34:04Z",
      "side": 1,
      "message": "Is \u003d nullptr needed since it will always be set in the constructor?",
      "range": {
        "startLine": 93,
        "startChar": 54,
        "endLine": 93,
        "endChar": 0
      },
      "revId": "34759d9e55f3f00bc14ce9b570d06f63dab32e78",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "53e7df7d_05915c13",
        "filename": "chrome/browser/media/router/discovery/mdns/cast_media_sink_service_impl.h",
        "patchSetId": 6
      },
      "lineNbr": 96,
      "author": {
        "id": 1133789
      },
      "writtenOn": "2017-08-10T21:34:04Z",
      "side": 1,
      "message": "nit: add blank line above",
      "revId": "34759d9e55f3f00bc14ce9b570d06f63dab32e78",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a9944483_b00cb0ef",
        "filename": "chrome/browser/media/router/discovery/mdns/cast_media_sink_service_impl_unittest.cc",
        "patchSetId": 6
      },
      "lineNbr": 77,
      "author": {
        "id": 1133789
      },
      "writtenOn": "2017-08-10T21:34:04Z",
      "side": 1,
      "message": "Can socket-\u003eid() be returned in the lambda?",
      "revId": "34759d9e55f3f00bc14ce9b570d06f63dab32e78",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1c844772_41f0c40a",
        "filename": "chrome/browser/media/router/discovery/mdns/cast_media_sink_service_impl_unittest.cc",
        "patchSetId": 6
      },
      "lineNbr": 89,
      "author": {
        "id": 1133789
      },
      "writtenOn": "2017-08-10T21:34:04Z",
      "side": 1,
      "message": "nit: Can one set of braces be removed? Also for consistency, either add DiscoveryNetworkInfo here or omit it below.",
      "revId": "34759d9e55f3f00bc14ce9b570d06f63dab32e78",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "57733517_48776b4b",
        "filename": "chrome/browser/media/router/discovery/mdns/cast_media_sink_service_impl_unittest.cc",
        "patchSetId": 6
      },
      "lineNbr": 283,
      "author": {
        "id": 1133789
      },
      "writtenOn": "2017-08-10T21:34:04Z",
      "side": 1,
      "message": "This syntax is not very pleasant... I would suggest capturing the Observer* during the EXPECT_CALL for OpenSocketInternal and using it to invoke OnError. Failing that, perhaps a helper method to do the static_cast would help a bit.",
      "revId": "34759d9e55f3f00bc14ce9b570d06f63dab32e78",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}