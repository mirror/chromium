{
  "comments": [
    {
      "key": {
        "uuid": "6e8f240a_f02007a3",
        "filename": "ash/wallpaper/wallpaper_controller.cc",
        "patchSetId": 9
      },
      "lineNbr": 1195,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2017-12-14T15:24:03Z",
      "side": 1,
      "message": "I\u0027m a little unclear on this. Do you care about lock screen or multiprofile user adding screen? IsActiveUserSession will be true then. Or is this a guard for policy being set too late?\n\nThis seems like it might lead to a race condition where ash receiving the policy late could lead to the wallpaper not being applied. Is the policy guaranteed to be loaded before login can happen?",
      "revId": "3ec88e8254923ceb5f856952e1ea4ceab29b398e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c9a76b33_8930443e",
        "filename": "ash/wallpaper/wallpaper_controller.cc",
        "patchSetId": 9
      },
      "lineNbr": 1195,
      "author": {
        "id": 1118421
      },
      "writtenOn": "2017-12-14T20:01:49Z",
      "side": 1,
      "message": "No, the device wallpaper only shows on login screen, not lock screen or multiprofile user adding screen.\n\nIt\u0027s not guaranteed that the policy can be loaded (if there is any policy change) before login can happen. Actually I think it happens always after that.\n|is_device_wallpaper_policy_enforced_| is firstly initialized by WallpaperControllerClient::Init(). Then depending on the initial value, the login wallpaper will either show the device wallpaper (if true) or the user\u0027s wallpaper (if false). WallpaperPolicyHandler will observe the policy change and notify WallpaperController about the change and update the login wallpaper if necessary.\n\nThere are several possible cases:\n1. |is_device_wallpaper_policy_enforced_| is false -\u003e login screen shows the user\u0027s wallpaper -\u003e WallpaperPolicyHandler receives the change -\u003e login screen wallpaper is then replaced by the device wallpaper\n2. |is_device_wallpaper_policy_enforced_| is true -\u003e login screen shows the device wallpaper -\u003e WallpaperPolicyHandler receives the policy clear -\u003e login screen wallpaper reverts to the user\u0027s wallpaper\n3. |is_device_wallpaper_policy_enforced_| is true -\u003e login screen shows the device wallpaper -\u003e WallpaperPolicyHandler receives the change -\u003e login screen wallpaper changes to a different device wallpaper",
      "parentUuid": "6e8f240a_f02007a3",
      "revId": "3ec88e8254923ceb5f856952e1ea4ceab29b398e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a280b3ba_afa53d19",
        "filename": "ash/wallpaper/wallpaper_controller.cc",
        "patchSetId": 9
      },
      "lineNbr": 1195,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2017-12-14T23:11:06Z",
      "side": 1,
      "message": "I was worried about a case like policy-enforced \u003d false, user logs in, policy arrives with policy-enforced true, wallpaper doesn\u0027t change. But I guess the policy-enforced wallpaper is only the login screen wallpaper, not the user\u0027s wallpaper? So this is OK?\n\n(Do we have a policy that can override the user\u0027s wallpaper? Or do we just have a policy that prevents the user from changing it? I imagine schoolchildren might set obnoxious wallpaper sometimes.)",
      "parentUuid": "c9a76b33_8930443e",
      "revId": "3ec88e8254923ceb5f856952e1ea4ceab29b398e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "71b13a6b_5af4bdbb",
        "filename": "chrome/browser/ui/ash/wallpaper_controller_client.cc",
        "patchSetId": 9
      },
      "lineNbr": 251,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2017-12-14T15:24:03Z",
      "side": 1,
      "message": "For future CL: You might want to do that in SetClientAndPaths() and maybe rename that method to Initialize(). That way it will be atomic with all the other setup.",
      "revId": "3ec88e8254923ceb5f856952e1ea4ceab29b398e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "02278370_e1d8b7e0",
        "filename": "chrome/browser/ui/ash/wallpaper_controller_client.cc",
        "patchSetId": 9
      },
      "lineNbr": 251,
      "author": {
        "id": 1118421
      },
      "writtenOn": "2017-12-14T20:01:49Z",
      "side": 1,
      "message": "We\u0027ve already had a Init() function. Moved this TODO to WallpaperControllerClient::Init().",
      "parentUuid": "71b13a6b_5af4bdbb",
      "revId": "3ec88e8254923ceb5f856952e1ea4ceab29b398e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "11f598aa_30097bc2",
        "filename": "chrome/browser/ui/ash/wallpaper_controller_client.cc",
        "patchSetId": 9
      },
      "lineNbr": 251,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2017-12-14T23:11:06Z",
      "side": 1,
      "message": "For future: We should do it all atomically in one mojo call so that it is only 1 IPC.",
      "parentUuid": "02278370_e1d8b7e0",
      "revId": "3ec88e8254923ceb5f856952e1ea4ceab29b398e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5c027fa3_b42a646c",
        "filename": "chrome/browser/ui/ash/wallpaper_policy_handler.cc",
        "patchSetId": 9
      },
      "lineNbr": 82,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2017-12-14T15:24:03Z",
      "side": 1,
      "message": "This won\u0027t work under mash (you can\u0027t call code in //ash from the browser, since it is in another process). This at least needs a TODO. We might need to duplicate the path computation code in the browser. Alternately, you can move the path computation code into WallpaperControllerClient and send the path in the SetClientAndPaths() call.",
      "revId": "3ec88e8254923ceb5f856952e1ea4ceab29b398e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9159635f_553ac1ec",
        "filename": "chrome/browser/ui/ash/wallpaper_policy_handler.cc",
        "patchSetId": 9
      },
      "lineNbr": 82,
      "author": {
        "id": 1179965
      },
      "writtenOn": "2017-12-14T16:51:29Z",
      "side": 1,
      "message": "Could you explain why GetDevicePolicyWallpaperFilePath() won\u0027t work if it only accesses static members of WallpaperController? How is it different from this use here? https://cs.chromium.org/chromium/src/chrome/browser/ui/webui/chromeos/login/signin_screen_handler.cc?type\u003dcs\u0026l\u003d892 Thanks!",
      "parentUuid": "5c027fa3_b42a646c",
      "revId": "3ec88e8254923ceb5f856952e1ea4ceab29b398e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "94756852_456e3a1d",
        "filename": "chrome/browser/ui/ash/wallpaper_policy_handler.cc",
        "patchSetId": 9
      },
      "lineNbr": 82,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2017-12-14T17:03:20Z",
      "side": 1,
      "message": "Under mash, the code in //ash runs in a separate process, even though it is linked into the chrome binary. This is just like renderer processes.\n\nSo even though this is a static function, it uses static variables. There will be two copies of those variables, one in the browser process and one in the ash process. I don\u0027t think the one in the browser process will be initialized (since it\u0027s not running any of the other code in ash::WallpaperController).\n\nThe only code allowed to be accessed from the browser process is code in //ash/public, which has been vetted to work OK on both sides of the process boundary. It\u0027s mostly mojo interfaces, constants, shared structures, and a few utility functions that don\u0027t share data.\n\n(This sort of thing is clearer for browser vs. renderer because of the //chrome/browser vs. //chrome/renderer directory structure.)\n\nThe access you point out is a constant, which will work. However, that constant really ought to be moved to //ash/public if both sides need it.",
      "parentUuid": "9159635f_553ac1ec",
      "revId": "3ec88e8254923ceb5f856952e1ea4ceab29b398e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b4c28b5a_33b6829d",
        "filename": "chrome/browser/ui/ash/wallpaper_policy_handler.cc",
        "patchSetId": 9
      },
      "lineNbr": 82,
      "author": {
        "id": 1179965
      },
      "writtenOn": "2017-12-14T17:58:34Z",
      "side": 1,
      "message": "I see, so which of the workaround do you think is the most acceptable? 1) Send the computed path during initialization, but for custom wallpapers there\u0027re four variations, so the mojo call will take many parameters.. 2) Having two separate computation methods. 3) Create mojo callback to get device/custom wallpaper dir computation results. 4) IIUC in WallpaperControllerClient if we directly do: ash::WallpaperController::dir_user_data_path_ \u003d SOME_CHROME_FILE_PATH, in addition to the SetClientAndPaths() mojo call, it should work? But it may be a bad approach to initialize the two copies separately? \n\nThanks!",
      "parentUuid": "94756852_456e3a1d",
      "revId": "3ec88e8254923ceb5f856952e1ea4ceab29b398e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "308d3d13_47c1b125",
        "filename": "chrome/browser/ui/ash/wallpaper_policy_handler.cc",
        "patchSetId": 9
      },
      "lineNbr": 82,
      "author": {
        "id": 1118421
      },
      "writtenOn": "2017-12-14T20:01:49Z",
      "side": 1,
      "message": "I used mojo call the get device wallpaper file path in my previous patch but thought I can use static method so removed it in later patches. Bring it back. Let me know if it\u0027s acceptable to introduce a mojo call just for this.",
      "parentUuid": "b4c28b5a_33b6829d",
      "revId": "3ec88e8254923ceb5f856952e1ea4ceab29b398e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7da330c1_c925aa83",
        "filename": "chrome/browser/ui/ash/wallpaper_policy_handler.cc",
        "patchSetId": 9
      },
      "lineNbr": 82,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2017-12-14T23:11:06Z",
      "side": 1,
      "message": "I think it would be best to introduce a mojo struct with all the paths needed for wallpaper, then pass that struct in the SetClientAndPaths() call. I\u0027m OK with it having a lot of paths. It\u0027s OK to store copies of the same path in both chrome and ash as long as there\u0027s only one place that computes them. I\u0027m OK with that being in chrome and pushing the data to ash. I think that would make this class less asynchronous (no more waiting for the path).\n\nDoes that sound OK? Can you compute the path you need at startup/init time?",
      "parentUuid": "308d3d13_47c1b125",
      "revId": "3ec88e8254923ceb5f856952e1ea4ceab29b398e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a507740f_5a4028dd",
        "filename": "chrome/browser/ui/ash/wallpaper_policy_handler.cc",
        "patchSetId": 9
      },
      "lineNbr": 82,
      "author": {
        "id": 1179965
      },
      "writtenOn": "2017-12-15T00:47:05Z",
      "side": 1,
      "message": "The problem is that the paths may have unlimited possibilities, e.g. https://cs.chromium.org/chromium/src/chrome/browser/chromeos/login/users/wallpaper/wallpaper_manager.cc?dr\u003dCSs\u0026l\u003d636  |wallpaper_files_id| and |file_path| can take random values.\n\nCan we add the following three lines at this point https://cs.chromium.org/chromium/src/chrome/browser/ui/ash/wallpaper_controller_client.cc?l\u003d238\n\nash::WallpaperController::dir_user_data_path_ \u003d user_data_path;\nash::WallpaperController::dir_chrome_os_wallpapers_path_ \u003d chromeos_wallpapers_path;\nash::WallpaperController::dir_chrome_os_custom_wallpapers_path_ \u003d chromeos_custom_wallpapers_path;\n\nAnd all the methods that calculate paths will stay in //ash as utility functions.. Is it a bad approach?..\n\n(I think ideally only //ash should need the wallpaper paths, but due to legacy reasons, Chrome (for example the wallpaper pick extension) still depends on them, and we\u0027re still working on it..)",
      "parentUuid": "7da330c1_c925aa83",
      "revId": "3ec88e8254923ceb5f856952e1ea4ceab29b398e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "78f2222d_b317d268",
        "filename": "chrome/browser/ui/ash/wallpaper_policy_handler.cc",
        "patchSetId": 9
      },
      "lineNbr": 108,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2017-12-14T15:24:03Z",
      "side": 1,
      "message": "super-nit: |exists|",
      "revId": "3ec88e8254923ceb5f856952e1ea4ceab29b398e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7b0cd4dd_d4d37776",
        "filename": "chrome/browser/ui/ash/wallpaper_policy_handler.cc",
        "patchSetId": 9
      },
      "lineNbr": 108,
      "author": {
        "id": 1118421
      },
      "writtenOn": "2017-12-14T20:01:49Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "78f2222d_b317d268",
      "revId": "3ec88e8254923ceb5f856952e1ea4ceab29b398e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8280536b_0a24576b",
        "filename": "chrome/browser/ui/ash/wallpaper_policy_handler.cc",
        "patchSetId": 9
      },
      "lineNbr": 179,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2017-12-14T15:24:03Z",
      "side": 1,
      "message": "Is there existing test coverage for this code somewhere? There\u0027s a lot going on here and no tests in this CL.",
      "revId": "3ec88e8254923ceb5f856952e1ea4ceab29b398e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5cfae9d6_b5913181",
        "filename": "chrome/browser/ui/ash/wallpaper_policy_handler.cc",
        "patchSetId": 9
      },
      "lineNbr": 179,
      "author": {
        "id": 1118421
      },
      "writtenOn": "2017-12-14T20:01:49Z",
      "side": 1,
      "message": "The old codes has an existing test coverage for device policy, see WallpaperManagerPolicyTest.DevicePolicyTest. After hooking up the new codes with WallpaperController(Client), I will modify the test to make sure it works.",
      "parentUuid": "8280536b_0a24576b",
      "revId": "3ec88e8254923ceb5f856952e1ea4ceab29b398e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f3a5820a_94eb6429",
        "filename": "chrome/browser/ui/ash/wallpaper_policy_handler.h",
        "patchSetId": 9
      },
      "lineNbr": 14,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2017-12-14T15:24:03Z",
      "side": 1,
      "message": "nit: Code under //chrome should not be in a namespace. (We violate this in a lot of existing code, but that\u0027s the style guidance these days.)",
      "revId": "3ec88e8254923ceb5f856952e1ea4ceab29b398e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "935fe385_c49ea80a",
        "filename": "chrome/browser/ui/ash/wallpaper_policy_handler.h",
        "patchSetId": 9
      },
      "lineNbr": 14,
      "author": {
        "id": 1118421
      },
      "writtenOn": "2017-12-14T20:01:49Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f3a5820a_94eb6429",
      "revId": "3ec88e8254923ceb5f856952e1ea4ceab29b398e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "438bb1b5_c4924183",
        "filename": "chrome/browser/ui/ash/wallpaper_policy_handler.h",
        "patchSetId": 9
      },
      "lineNbr": 22,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2017-12-14T15:24:03Z",
      "side": 1,
      "message": "Is this based on a similar class elsewhere?",
      "revId": "3ec88e8254923ceb5f856952e1ea4ceab29b398e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ef271219_9b2870c4",
        "filename": "chrome/browser/ui/ash/wallpaper_policy_handler.h",
        "patchSetId": 9
      },
      "lineNbr": 22,
      "author": {
        "id": 1118421
      },
      "writtenOn": "2017-12-14T20:01:49Z",
      "side": 1,
      "message": "No. We have similar codes in WallpaperManager and that\u0027s going to be removed in a following-up CL.",
      "parentUuid": "438bb1b5_c4924183",
      "revId": "3ec88e8254923ceb5f856952e1ea4ceab29b398e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}