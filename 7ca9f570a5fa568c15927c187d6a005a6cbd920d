{
  "comments": [
    {
      "key": {
        "uuid": "5d42d0a8_371261fa",
        "filename": "third_party/WebKit/Source/platform/heap/HeapAllocator.h",
        "patchSetId": 2
      },
      "lineNbr": 234,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2018-01-05T09:18:31Z",
      "side": 1,
      "message": "Nit: Maybe we can rename this method to NotifyNewObjectInCollection. This method works for only entries in collections.",
      "revId": "7ca9f570a5fa568c15927c187d6a005a6cbd920d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "28b95abf_bb3e7133",
        "filename": "third_party/WebKit/Source/platform/heap/HeapAllocator.h",
        "patchSetId": 2
      },
      "lineNbr": 252,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2018-01-04T04:43:12Z",
      "side": 1,
      "message": "Won\u0027t this end up with marking HeapHashSet\u003cWeakMember\u003cT\u003e\u003e strongly unconditionally?",
      "revId": "7ca9f570a5fa568c15927c187d6a005a6cbd920d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5dced5c0_eecca4ef",
        "filename": "third_party/WebKit/Source/platform/heap/HeapAllocator.h",
        "patchSetId": 2
      },
      "lineNbr": 252,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2018-01-04T08:47:37Z",
      "side": 1,
      "message": "kNoWeakHandlingInCollection means that we will call to Trace() instead of TraceInCollection() which means that only strong fields will be traced.\n\nThere are already tests for each container that test WeakMember handling. (Tests with \"ExpectNoWriteBarrier\" in IncrementalMarkingTest.cpp)",
      "parentUuid": "28b95abf_bb3e7133",
      "revId": "7ca9f570a5fa568c15927c187d6a005a6cbd920d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "057900b2_e5f29070",
        "filename": "third_party/WebKit/Source/platform/heap/HeapAllocator.h",
        "patchSetId": 2
      },
      "lineNbr": 252,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2018-01-04T15:29:51Z",
      "side": 1,
      "message": "I was reading the code base but actually confused :)\n\nWould you help me understand the relationship between Trace(), TraceInCollection(), kNoWeakHandlingInCollections and kWeakHandlingInCollections? What does each combination do and when is it used?",
      "parentUuid": "5dced5c0_eecca4ef",
      "revId": "7ca9f570a5fa568c15927c187d6a005a6cbd920d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8b76da67_cd851b7e",
        "filename": "third_party/WebKit/Source/platform/heap/HeapAllocator.h",
        "patchSetId": 2
      },
      "lineNbr": 252,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2018-01-04T15:38:52Z",
      "side": 1,
      "message": "It\u0027s a bit tricky :) I would summarize it as follows; please correct me if I am wrong.\n\nTrace():\n- Trace strong members \n- Register weak slots when not used from containers (this is potentially problematic currently as slots can get registered multiple times). \n\nTraceInCollection()\n- Tracing with special weak handling, e.g., clearing of weak slots\n\nkNoWeakHandlingInCollections -\u003e Trace()\nkWeakHandlingInCollections -\u003e TraceInCollection or Trace, depending on whether weakness actually is needed (e.g. you could have kWeakHandlingInCollections in a collection that only has strong references)",
      "parentUuid": "057900b2_e5f29070",
      "revId": "7ca9f570a5fa568c15927c187d6a005a6cbd920d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "87ea6a32_e6dc9919",
        "filename": "third_party/WebKit/Source/platform/heap/HeapAllocator.h",
        "patchSetId": 2
      },
      "lineNbr": 252,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2018-01-04T23:27:19Z",
      "side": 1,
      "message": "This CL looks correct, so LGTM.\n\nHowever, why do we need both \"Trace / TraceInCollection \"and \"kNoWeakHandlingInCollections / kWeakHandlingInCollections\"? I guess either is sufficient because what we want to specify is just whether we should handle weak processing or not.",
      "parentUuid": "8b76da67_cd851b7e",
      "revId": "7ca9f570a5fa568c15927c187d6a005a6cbd920d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3334c39d_e7ec840f",
        "filename": "third_party/WebKit/Source/platform/heap/HeapAllocator.h",
        "patchSetId": 2
      },
      "lineNbr": 252,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2018-01-05T07:27:57Z",
      "side": 1,
      "message": "I am not trying to change the trace API with the write barrier.\n\nHistorically, objects in containers are traced with TraceInCollection which also performs weak handling. This weak handling is different from the weak handling were slots are registered that are then processed in the atomic pause.\n\nFor the write barrier we would like to use the regular Trace method though that does not have weak handling. This is the reason we have two paths in some cases.\n\nHaving said that, this is pretty much the most complicated part for the barrier. The rest should be easier then :)",
      "parentUuid": "87ea6a32_e6dc9919",
      "revId": "7ca9f570a5fa568c15927c187d6a005a6cbd920d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c41852a0_7e407c92",
        "filename": "third_party/WebKit/Source/platform/heap/HeapAllocator.h",
        "patchSetId": 2
      },
      "lineNbr": 252,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2018-01-05T09:18:31Z",
      "side": 1,
      "message": "Yes, I think this CL is correct. I\u0027m just confused by the complexity of TraceInCollection while reviewing this CL.\n\n\u003e This weak handling is different from the weak handling were slots are registered that are then processed in the atomic pause.\n\nYes, they are different.\n\nHowever, is there any case where we want to specify kWeakHandlingInCollection but specify kWeakPointersActStrong? (I don\u0027t think so.)\n\nI think that kWeakHandlingInCollection should imply kWeakPointersActWeak and kNoWeakHandlingInCollection should imply kWeakPointersActStrong. If that is the case, can we remove one of the flags?\n\n(Sorry, I\u0027m talking about a refactoring not related to your CL.)",
      "parentUuid": "3334c39d_e7ec840f",
      "revId": "7ca9f570a5fa568c15927c187d6a005a6cbd920d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "537fa3c7_9cb759ea",
        "filename": "third_party/WebKit/Source/platform/wtf/LinkedHashSet.h",
        "patchSetId": 2
      },
      "lineNbr": 874,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2018-01-04T04:43:12Z",
      "side": 1,
      "message": "Do we probably need to add a write barrier when we update impl_ as well?",
      "revId": "7ca9f570a5fa568c15927c187d6a005a6cbd920d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0ee8ac02_0735ca00",
        "filename": "third_party/WebKit/Source/platform/wtf/LinkedHashSet.h",
        "patchSetId": 2
      },
      "lineNbr": 874,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2018-01-04T08:47:37Z",
      "side": 1,
      "message": "The fact that all hashing containers use HashTable at some level (their impl_) makes all of this fall out.\n\nThat said, I am still double-checking that we didn\u0027t miss anything and add further tests.",
      "parentUuid": "537fa3c7_9cb759ea",
      "revId": "7ca9f570a5fa568c15927c187d6a005a6cbd920d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}