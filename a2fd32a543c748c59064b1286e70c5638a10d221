{
  "comments": [
    {
      "key": {
        "uuid": "f17f8a8f_3bc9fe65",
        "filename": "third_party/WebKit/Source/bindings/scripts/v8_dictionary.py",
        "patchSetId": 4
      },
      "lineNbr": 77,
      "author": {
        "id": 1115863
      },
      "writtenOn": "2017-11-30T07:26:52Z",
      "side": 1,
      "message": "Is it difficult just to add |origin_trial_members| to the jinja context? Having a separate list for origin trial members would be simpler than having a flag and a filter I guess?",
      "revId": "a2fd32a543c748c59064b1286e70c5638a10d221",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2842870f_1b1215b0",
        "filename": "third_party/WebKit/Source/bindings/scripts/v8_dictionary.py",
        "patchSetId": 4
      },
      "lineNbr": 77,
      "author": {
        "id": 1002507
      },
      "writtenOn": "2017-11-30T08:24:05Z",
      "side": 1,
      "message": "Probably the problem is that we need to handle combinations of runtime-enabled, secure context and origin-trial conditions.  All the three conditions are orthogonal rather than \"independent\", so we have to handle arbitrary combinations of them.",
      "parentUuid": "f17f8a8f_3bc9fe65",
      "revId": "a2fd32a543c748c59064b1286e70c5638a10d221",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "27a70eef_4d919f2f",
        "filename": "third_party/WebKit/Source/bindings/scripts/v8_dictionary.py",
        "patchSetId": 4
      },
      "lineNbr": 77,
      "author": {
        "id": 1153414
      },
      "writtenOn": "2017-11-30T17:02:42Z",
      "side": 1,
      "message": "Yes, we would need three exclusive lists to avoid using filters: origin-trial, runtime-enabled, and \"normal\" (i.e. neither of the first two). Origin trial and runtime enabled are mutually-exclusive (there\u0027s a check in the bindings script to guarantee that). Secure context doesn\u0027t apply to dictionary members, so that simplifies things a little bit here.\n\nI agree that avoiding a filter would be preferred. Is it worth reworking this into multiple lists to do that?",
      "parentUuid": "2842870f_1b1215b0",
      "revId": "a2fd32a543c748c59064b1286e70c5638a10d221",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ab83c7a2_861d101b",
        "filename": "third_party/WebKit/Source/bindings/scripts/v8_dictionary.py",
        "patchSetId": 4
      },
      "lineNbr": 77,
      "author": {
        "id": 1115863
      },
      "writtenOn": "2017-11-30T23:06:58Z",
      "side": 1,
      "message": "IMHO filters are difficult to understand but I don\u0027t think it\u0027s worth reworking.",
      "parentUuid": "27a70eef_4d919f2f",
      "revId": "a2fd32a543c748c59064b1286e70c5638a10d221",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "be465539_7c5e6e8c",
        "filename": "third_party/WebKit/Source/bindings/scripts/v8_utilities.py",
        "patchSetId": 4
      },
      "lineNbr": 453,
      "author": {
        "id": 1115863
      },
      "writtenOn": "2017-11-30T07:26:52Z",
      "side": 1,
      "message": "Could you explain when {context} is nullptr? Looks like we are adding DCHECK(execution_context).",
      "revId": "a2fd32a543c748c59064b1286e70c5638a10d221",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "850b8a4e_5b1fe6f5",
        "filename": "third_party/WebKit/Source/bindings/scripts/v8_utilities.py",
        "patchSetId": 4
      },
      "lineNbr": 453,
      "author": {
        "id": 1153414
      },
      "writtenOn": "2017-11-30T17:02:42Z",
      "side": 1,
      "message": "That\u0027s true the context shouldn\u0027t be null in the usage. I based this on the existing filters for exposed and secure context in code_generator.py.\n\nRemoved the condition, and leave it any callers to ensure appropriate checks are in place.",
      "parentUuid": "be465539_7c5e6e8c",
      "revId": "a2fd32a543c748c59064b1286e70c5638a10d221",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7769fe56_ed85cd70",
        "filename": "third_party/WebKit/Source/bindings/templates/dictionary_v8.cpp.tmpl",
        "patchSetId": 4
      },
      "lineNbr": 132,
      "author": {
        "id": 1115863
      },
      "writtenOn": "2017-11-30T07:26:52Z",
      "side": 1,
      "message": "executionContext -\u003e execution_context",
      "revId": "a2fd32a543c748c59064b1286e70c5638a10d221",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1b981afc_7419a9ba",
        "filename": "third_party/WebKit/Source/bindings/templates/dictionary_v8.cpp.tmpl",
        "patchSetId": 4
      },
      "lineNbr": 132,
      "author": {
        "id": 1001470
      },
      "writtenOn": "2017-11-30T14:03:00Z",
      "side": 1,
      "message": "This function still uses lowerCamelCase for other variable names. (e.g. creationContext, {{member.name}}HasValueOrDefault.) I think it better not to mix styles in a function.",
      "parentUuid": "7769fe56_ed85cd70",
      "revId": "a2fd32a543c748c59064b1286e70c5638a10d221",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bdefd2a1_dd985a80",
        "filename": "third_party/WebKit/Source/bindings/templates/dictionary_v8.cpp.tmpl",
        "patchSetId": 4
      },
      "lineNbr": 132,
      "author": {
        "id": 1153414
      },
      "writtenOn": "2017-11-30T17:02:42Z",
      "side": 1,
      "message": "Yes, I was going to use execution_context, but didn\u0027t want to mix styles. I figured it was best done as a separate cleanup.",
      "parentUuid": "1b981afc_7419a9ba",
      "revId": "a2fd32a543c748c59064b1286e70c5638a10d221",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}