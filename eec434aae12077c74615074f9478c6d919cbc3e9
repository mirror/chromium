{
  "comments": [
    {
      "key": {
        "uuid": "55bce4f6_8c24b941",
        "filename": "third_party/WebKit/Source/core/dom/events/EventListener.h",
        "patchSetId": 4
      },
      "lineNbr": 58,
      "author": {
        "id": 1002405
      },
      "writtenOn": "2018-01-29T08:08:00Z",
      "side": 1,
      "message": "Should I change all virtual overrides in this file to follow use \"override\"?\n\nvoid Trace(blink::Visitor* visitor) override {}",
      "range": {
        "startLine": 58,
        "startChar": 2,
        "endLine": 58,
        "endChar": 9
      },
      "revId": "eec434aae12077c74615074f9478c6d919cbc3e9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bcf1daeb_da6a85a2",
        "filename": "third_party/WebKit/Source/core/dom/events/EventListener.h",
        "patchSetId": 4
      },
      "lineNbr": 58,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2018-01-29T08:58:26Z",
      "side": 1,
      "message": "\u0027virtual\u0027 should be used at the most parent class. Other classes should use \u0027override\u0027.",
      "parentUuid": "55bce4f6_8c24b941",
      "range": {
        "startLine": 58,
        "startChar": 2,
        "endLine": 58,
        "endChar": 9
      },
      "revId": "eec434aae12077c74615074f9478c6d919cbc3e9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d74d892e_c10ab2dc",
        "filename": "third_party/WebKit/Source/core/dom/events/EventListener.h",
        "patchSetId": 4
      },
      "lineNbr": 58,
      "author": {
        "id": 1002405
      },
      "writtenOn": "2018-01-29T10:18:29Z",
      "side": 1,
      "message": "Right. The existing code breaks this convention. I am going to change it to use override.",
      "parentUuid": "bcf1daeb_da6a85a2",
      "range": {
        "startLine": 58,
        "startChar": 2,
        "endLine": 58,
        "endChar": 9
      },
      "revId": "eec434aae12077c74615074f9478c6d919cbc3e9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7b01232c_d195045d",
        "filename": "third_party/WebKit/Source/core/dom/events/EventListener.h",
        "patchSetId": 4
      },
      "lineNbr": 58,
      "author": {
        "id": 1002405
      },
      "writtenOn": "2018-01-29T10:31:57Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d74d892e_c10ab2dc",
      "range": {
        "startLine": 58,
        "startChar": 2,
        "endLine": 58,
        "endChar": 9
      },
      "revId": "eec434aae12077c74615074f9478c6d919cbc3e9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a7b24f23_dc8156b7",
        "filename": "third_party/WebKit/Source/core/dom/events/EventListener.h",
        "patchSetId": 4
      },
      "lineNbr": 60,
      "author": {
        "id": 1002405
      },
      "writtenOn": "2018-01-29T08:08:00Z",
      "side": 1,
      "message": "Example override of NameInHeapSnapshot for TraceWrapperBase object that is not a ScriptWrappable.\n\nIf you can think of better name for this function, please let me know.\n\nSubsequent CLs will change other instances of TraceWrapperBase that are non-ScriptWrappable nodes in similar way.",
      "range": {
        "startLine": 60,
        "startChar": 22,
        "endLine": 60,
        "endChar": 40
      },
      "revId": "eec434aae12077c74615074f9478c6d919cbc3e9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c27d699c_50b3ab13",
        "filename": "third_party/WebKit/Source/core/dom/events/EventListener.h",
        "patchSetId": 4
      },
      "lineNbr": 60,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2018-01-29T08:58:26Z",
      "side": 1,
      "message": "I\u0027m not sure if it\u0027s worth adding names to all TraceWrapperBases.\n\nOnce we have a unified GC, TraceWrapperBase will be gone and all GarbageCollected classes will be traced. It wouldn\u0027t be nice to manually add names to all GarbageCollected...\n\nAt the moment, I\u0027d recommend you add names to only popular TraceWrapperBases (e.g., EventListeners), instead of all.",
      "parentUuid": "a7b24f23_dc8156b7",
      "range": {
        "startLine": 60,
        "startChar": 22,
        "endLine": 60,
        "endChar": 40
      },
      "revId": "eec434aae12077c74615074f9478c6d919cbc3e9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "988dd0ef_41b4c756",
        "filename": "third_party/WebKit/Source/core/dom/events/EventListener.h",
        "patchSetId": 4
      },
      "lineNbr": 60,
      "author": {
        "id": 1002405
      },
      "writtenOn": "2018-01-29T10:18:29Z",
      "side": 1,
      "message": "Handling the popular cases would be OK in short-term.\n\nOnce we switch to GarbageCollected, we would need a similar method. Maybe then we can generate the method using macros.",
      "parentUuid": "c27d699c_50b3ab13",
      "range": {
        "startLine": 60,
        "startChar": 22,
        "endLine": 60,
        "endChar": 40
      },
      "revId": "eec434aae12077c74615074f9478c6d919cbc3e9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f8031840_aa668627",
        "filename": "third_party/WebKit/Source/platform/bindings/ScriptWrappableVisitor.h",
        "patchSetId": 4
      },
      "lineNbr": 55,
      "author": {
        "id": 1002405
      },
      "writtenOn": "2018-01-29T08:08:00Z",
      "side": 1,
      "message": "The heap snapshotting visitor will use this callback.",
      "range": {
        "startLine": 55,
        "startChar": 15,
        "endLine": 55,
        "endChar": 28
      },
      "revId": "eec434aae12077c74615074f9478c6d919cbc3e9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "76b346d4_5fba4612",
        "filename": "third_party/WebKit/Source/platform/bindings/ScriptWrappableVisitor.h",
        "patchSetId": 4
      },
      "lineNbr": 55,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2018-01-29T08:58:26Z",
      "side": 1,
      "message": "Should we consider creating a different WrapperDescriptor for HeapSnapshotVisitor?\n\nI think it would make more sense to have one descriptor per visitor type.",
      "parentUuid": "f8031840_aa668627",
      "range": {
        "startLine": 55,
        "startChar": 15,
        "endLine": 55,
        "endChar": 28
      },
      "revId": "eec434aae12077c74615074f9478c6d919cbc3e9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b6a98053_a0597b4f",
        "filename": "third_party/WebKit/Source/platform/bindings/ScriptWrappableVisitor.h",
        "patchSetId": 4
      },
      "lineNbr": 55,
      "author": {
        "id": 1002405
      },
      "writtenOn": "2018-01-29T10:18:29Z",
      "side": 1,
      "message": "This struct captures all properties that might be interesting for visitors. Since it is stack allocated, there is not much overhead in adding a field.\n\nI would like to keep the visitor dispatching mechanism should be generic, so it doesn\u0027t know about concrete visitors. Otherwise, we would have to duplicate Visit() methods to call specific visitor with specific wrapper descriptor.",
      "parentUuid": "76b346d4_5fba4612",
      "range": {
        "startLine": 55,
        "startChar": 15,
        "endLine": 55,
        "endChar": 28
      },
      "revId": "eec434aae12077c74615074f9478c6d919cbc3e9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e3a0f6fa_9cc09740",
        "filename": "third_party/WebKit/Source/platform/bindings/ScriptWrappableVisitor.h",
        "patchSetId": 4
      },
      "lineNbr": 55,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2018-01-29T13:35:46Z",
      "side": 1,
      "message": "Makes sense.",
      "parentUuid": "b6a98053_a0597b4f",
      "range": {
        "startLine": 55,
        "startChar": 15,
        "endLine": 55,
        "endChar": 28
      },
      "revId": "eec434aae12077c74615074f9478c6d919cbc3e9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "582ab797_dfd9bb00",
        "filename": "third_party/WebKit/Source/platform/bindings/ScriptWrappableVisitor.h",
        "patchSetId": 4
      },
      "lineNbr": 153,
      "author": {
        "id": 1002405
      },
      "writtenOn": "2018-01-29T08:08:00Z",
      "side": 1,
      "message": "An alternative would be to use WTF::IsSubclass\u003cT, const TraceWrapperBase\u003e::value and then to cast to TraceWrapperBase. That did not work out due to multiple inheritance (TraceWrapperBase is not necessarily the first super-class in T)",
      "range": {
        "startLine": 153,
        "startChar": 11,
        "endLine": 153,
        "endChar": 29
      },
      "revId": "eec434aae12077c74615074f9478c6d919cbc3e9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "66d0f9d7_2b6bdd12",
        "filename": "third_party/WebKit/Source/platform/bindings/ScriptWrappableVisitor.h",
        "patchSetId": 4
      },
      "lineNbr": 153,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2018-01-29T08:58:26Z",
      "side": 1,
      "message": "Is there any case where T does not inherit from TraceWrapperBase?\n\nIf yes, I\u0027d suggest adding NameInHeapSnapshot to GarbageCollected, not TraceWrapperBase. Then you can just call NameInHeapSnapshot since it\u0027s guaranteed that all pointers traced by ScriptWrappableVisitor are GarbageCollected. (Once we have the unified GC, this should anyway happen because TraceWrapperBase will be gone.)",
      "parentUuid": "582ab797_dfd9bb00",
      "range": {
        "startLine": 153,
        "startChar": 11,
        "endLine": 153,
        "endChar": 29
      },
      "revId": "eec434aae12077c74615074f9478c6d919cbc3e9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b41fe57f_f67668f8",
        "filename": "third_party/WebKit/Source/platform/bindings/ScriptWrappableVisitor.h",
        "patchSetId": 4
      },
      "lineNbr": 153,
      "author": {
        "id": 1002405
      },
      "writtenOn": "2018-01-29T10:18:29Z",
      "side": 1,
      "message": "One example is T \u003d blink::Supplement\u003cblink::LocalFrame\u003e, which is GarbageCollectedMixin.\n\nAdding the function to GarbageCollectedMixin should work. I am not sure about GarbageCollected though since it does not have a virtual table. Wouldn\u0027t that increase each object size by one pointer?",
      "parentUuid": "66d0f9d7_2b6bdd12",
      "range": {
        "startLine": 153,
        "startChar": 11,
        "endLine": 153,
        "endChar": 29
      },
      "revId": "eec434aae12077c74615074f9478c6d919cbc3e9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f62d5b7d_99185880",
        "filename": "third_party/WebKit/Source/platform/bindings/ScriptWrappableVisitor.h",
        "patchSetId": 4
      },
      "lineNbr": 153,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2018-01-29T10:22:24Z",
      "side": 1,
      "message": "GarbageCollected is currently non-virtual. Adding anything there might have big impact for overall memory consumption.",
      "parentUuid": "b41fe57f_f67668f8",
      "range": {
        "startLine": 153,
        "startChar": 11,
        "endLine": 153,
        "endChar": 29
      },
      "revId": "eec434aae12077c74615074f9478c6d919cbc3e9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ea7a1009_8093e0ad",
        "filename": "third_party/WebKit/Source/platform/bindings/ScriptWrappableVisitor.h",
        "patchSetId": 4
      },
      "lineNbr": 153,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2018-01-29T13:35:46Z",
      "side": 1,
      "message": "Yeah, agreed.\n\nWould you help me understand how NameInHeapSnapshot is going to be used?\n\nFor example, do you think you can solve your problem by adding HeapSnapshotVisitor::Visit(ScriptWrappable*, ...)?\n\nIf your goal is to dump names of ScriptWrappable, adding NameInHeapSnapshot to TraceWrapperBase wouldn\u0027t make much sense (it would make more sense to add HeapSnapshotVisitor::Visit(ScriptWrappable*, ...)). If your goal is to dump all names of TraceWrapperBase, you\u0027ll need to come up with a more general approach.",
      "parentUuid": "f62d5b7d_99185880",
      "range": {
        "startLine": 153,
        "startChar": 11,
        "endLine": 153,
        "endChar": 29
      },
      "revId": "eec434aae12077c74615074f9478c6d919cbc3e9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}