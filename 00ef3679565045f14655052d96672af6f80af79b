{
  "comments": [
    {
      "key": {
        "uuid": "8c94b13a_21523380",
        "filename": "content/browser/shared_worker/shared_worker_content_settings_proxy_impl.cc",
        "patchSetId": 24
      },
      "lineNbr": 25,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-07-28T08:59:19Z",
      "side": 1,
      "message": "Nit: std::move() this as well",
      "range": {
        "startLine": 25,
        "startChar": 12,
        "endLine": 25,
        "endChar": 16
      },
      "revId": "00ef3679565045f14655052d96672af6f80af79b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "510a5be8_ec58ab81",
        "filename": "content/browser/shared_worker/shared_worker_content_settings_proxy_impl.h",
        "patchSetId": 24
      },
      "lineNbr": 46,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-07-28T08:59:19Z",
      "side": 1,
      "message": "Not a blocking comment, but I wonder if we should just have SharedWorkerHost own this / implement this in a followup? Then we don\u0027t need a WeakPtr (and the lifetime will be strongly associated with the SharedWorkerHost).",
      "range": {
        "startLine": 46,
        "startChar": 2,
        "endLine": 46,
        "endChar": 46
      },
      "revId": "00ef3679565045f14655052d96672af6f80af79b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ad2e3e32_4b0599f7",
        "filename": "content/browser/shared_worker/shared_worker_host.cc",
        "patchSetId": 24
      },
      "lineNbr": 210,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-07-28T08:59:19Z",
      "side": 1,
      "message": "Nit: #include \u003cutility\u003e",
      "range": {
        "startLine": 210,
        "startChar": 2,
        "endLine": 210,
        "endChar": 11
      },
      "revId": "00ef3679565045f14655052d96672af6f80af79b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e8386904_090d7807",
        "filename": "content/common/worker_messages.h",
        "patchSetId": 24
      },
      "lineNbr": 52,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-07-28T08:59:19Z",
      "side": 1,
      "message": "Nit: move this comment above line 51 (and then clang-format should indent correctly)",
      "range": {
        "startLine": 52,
        "startChar": 0,
        "endLine": 52,
        "endChar": 53
      },
      "revId": "00ef3679565045f14655052d96672af6f80af79b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a7b037a4_e3f4670a",
        "filename": "content/renderer/render_thread_impl.cc",
        "patchSetId": 24
      },
      "lineNbr": 2280,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-07-28T08:59:19Z",
      "side": 1,
      "message": "Nit: if it\u0027s possible, let\u0027s wrap this in a scoped handle as soon as possible to make sure we handle the lifetime correctly",
      "range": {
        "startLine": 2280,
        "startChar": 6,
        "endLine": 2280,
        "endChar": 36
      },
      "revId": "00ef3679565045f14655052d96672af6f80af79b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4a41430b_1211e540",
        "filename": "content/renderer/shared_worker/embedded_shared_worker_stub.cc",
        "patchSetId": 24
      },
      "lineNbr": 148,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-07-28T08:59:19Z",
      "side": 1,
      "message": "Basically, just move this up into render_thread_impl.cc and then use std::move()",
      "range": {
        "startLine": 148,
        "startChar": 6,
        "endLine": 148,
        "endChar": 35
      },
      "revId": "00ef3679565045f14655052d96672af6f80af79b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0c99c1e5_3ab4ffaa",
        "filename": "third_party/WebKit/Source/core/workers/SharedWorkerContentSettingsProxy.cpp",
        "patchSetId": 24
      },
      "lineNbr": 27,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-07-28T08:59:19Z",
      "side": 1,
      "message": "If we want to disallow this on unique origins, we should do the check in the browser side code rather than here (either in addition, or just move this check). I personally would just move the check into the browser side code rather than duplicating it unless we know this is performance critical.\n\nThe reason is we cannot trust renderer processes from the browser process, as it\u0027s possible a compromised renderer can simply bypass this check and send a unique origin anyway.",
      "range": {
        "startLine": 26,
        "startChar": 0,
        "endLine": 27,
        "endChar": 17
      },
      "revId": "00ef3679565045f14655052d96672af6f80af79b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "32de29a9_00985657",
        "filename": "third_party/WebKit/Source/core/workers/SharedWorkerContentSettingsProxy.cpp",
        "patchSetId": 24
      },
      "lineNbr": 45,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-07-28T08:59:19Z",
      "side": 1,
      "message": "This is subtle. I assume this is safe because each worker has a dedicated thread?\n\n(Not sure if it\u0027s worth documenting this in a comment somewhere.",
      "range": {
        "startLine": 43,
        "startChar": 0,
        "endLine": 45,
        "endChar": 41
      },
      "revId": "00ef3679565045f14655052d96672af6f80af79b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c170b713_723e0fcf",
        "filename": "third_party/WebKit/Source/core/workers/SharedWorkerContentSettingsProxy.h",
        "patchSetId": 24
      },
      "lineNbr": 16,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-07-28T08:59:19Z",
      "side": 1,
      "message": "Nit: rewrap this line so it\u0027s not so short.",
      "revId": "00ef3679565045f14655052d96672af6f80af79b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a18977c4_0ab98288",
        "filename": "third_party/WebKit/Source/core/workers/SharedWorkerContentSettingsProxy.h",
        "patchSetId": 24
      },
      "lineNbr": 31,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-07-28T08:59:19Z",
      "side": 1,
      "message": "Nit: destructed \u003d\u003e is destructed",
      "range": {
        "startLine": 31,
        "startChar": 36,
        "endLine": 31,
        "endChar": 46
      },
      "revId": "00ef3679565045f14655052d96672af6f80af79b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4729326d_2462f3d6",
        "filename": "third_party/WebKit/public/web/shared_worker_content_settings_proxy.mojom",
        "patchSetId": 24
      },
      "lineNbr": 18,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-07-28T08:59:19Z",
      "side": 1,
      "message": "Do we have more than one origin active per SharedWorkerHost?\n\n(This shouldn\u0027t be blocking, as it replicates the original logic. However, I\u0027m wondering why we need to pass it over IPC; perhaps the interface or method comments could explain more a bit about the relationship between SharedWorkerHost and different origins)",
      "range": {
        "startLine": 18,
        "startChar": 17,
        "endLine": 18,
        "endChar": 40
      },
      "revId": "00ef3679565045f14655052d96672af6f80af79b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}