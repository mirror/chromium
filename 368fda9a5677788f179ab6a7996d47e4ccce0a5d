{
  "comments": [
    {
      "key": {
        "uuid": "56238be2_83a18ff0",
        "filename": "chrome/browser/page_load_metrics/observers/service_worker_page_load_metrics_observer.cc",
        "patchSetId": 10
      },
      "lineNbr": 333,
      "author": {
        "id": 1000781
      },
      "writtenOn": "2017-07-13T03:21:50Z",
      "side": 1,
      "message": "I think we should remove this DCHECK_NE().\nWhen the Search SW doesn\u0027t call FetchEvent.respondWith(), preparation_type is UNKNOWN.",
      "revId": "368fda9a5677788f179ab6a7996d47e4ccce0a5d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "caed31d5_10137fd4",
        "filename": "chrome/common/page_load_metrics/page_load_metrics.mojom",
        "patchSetId": 10
      },
      "lineNbr": 85,
      "author": {
        "id": 1136769
      },
      "writtenOn": "2017-07-14T18:26:45Z",
      "side": 1,
      "message": "circling back to earlier comments here, if we anticipate adding service worker timings to this struct in a follow up change in the near term, then calling it ServiceWorkerTiming seems ok. Otherwise, I\u0027d prefer to either name the struct ServiceWorkerMetadata, or, if we don\u0027t anticipate adding other fields beyond preparation_type, moving it into PageLoadMetadata as service_worker_preparation_type (can make it optional, and leave it unset for non SW controlled pages)",
      "revId": "368fda9a5677788f179ab6a7996d47e4ccce0a5d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1f038cfe_d7906ac0",
        "filename": "chrome/common/page_load_metrics/page_load_timing.cc",
        "patchSetId": 10
      },
      "lineNbr": 46,
      "author": {
        "id": 1136769
      },
      "writtenOn": "2017-07-14T18:26:45Z",
      "side": 1,
      "message": "this should be updated to also test that timing.service_worker_timing is empty",
      "revId": "368fda9a5677788f179ab6a7996d47e4ccce0a5d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5191828a_efe5d641",
        "filename": "third_party/WebKit/Source/platform/loader/fetch/ResourceResponse.h",
        "patchSetId": 10
      },
      "lineNbr": 581,
      "author": {
        "id": 1000781
      },
      "writtenOn": "2017-07-13T03:21:50Z",
      "side": 1,
      "message": "Copy this in ResourceResponse::CopyData() and ResourceResponse::ResourceResponse(CrossThreadResourceResponseData* data).",
      "revId": "368fda9a5677788f179ab6a7996d47e4ccce0a5d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e8856474_60b0ac83",
        "filename": "third_party/WebKit/public/BUILD.gn",
        "patchSetId": 10
      },
      "lineNbr": 837,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-07-13T10:12:00Z",
      "side": 1,
      "message": "Nit: no it.",
      "range": {
        "startLine": 837,
        "startChar": 16,
        "endLine": 837,
        "endChar": 19
      },
      "revId": "368fda9a5677788f179ab6a7996d47e4ccce0a5d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ff138a75_3d87f9fb",
        "filename": "third_party/WebKit/public/BUILD.gn",
        "patchSetId": 10
      },
      "lineNbr": 838,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-07-13T10:12:00Z",
      "side": 1,
      "message": "It\u0027s because //third_party/WebKit/public:mojo_bindings depends on private (not exported?) content types. So linking this into anything that\u0027s not //content will unfortunately just Not Work. I think we should probably think of a more generic name for this, so we can group the web_features.mojom from +loonybear in here as well.",
      "range": {
        "startLine": 837,
        "startChar": 43,
        "endLine": 838,
        "endChar": 54
      },
      "revId": "368fda9a5677788f179ab6a7996d47e4ccce0a5d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "23da22fe_39c9dd60",
        "filename": "third_party/WebKit/public/BUILD.gn",
        "patchSetId": 10
      },
      "lineNbr": 845,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-07-13T10:12:00Z",
      "side": 1,
      "message": "I think this block shouldn\u0027t be needed.",
      "range": {
        "startLine": 843,
        "startChar": 0,
        "endLine": 845,
        "endChar": 27
      },
      "revId": "368fda9a5677788f179ab6a7996d47e4ccce0a5d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5bf9cbbf_7f187c9b",
        "filename": "third_party/WebKit/public/platform/modules/serviceworker/service_worker_preparation_type.mojom",
        "patchSetId": 10
      },
      "lineNbr": 40,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-07-13T10:12:00Z",
      "side": 1,
      "message": "I would strongly prefer to avoid defining this sentinel value in the enum: this makes ParamTraits and StructTraits asymmetrical in behavior (IPC rejects this sentinel value, while Mojo will happily accept it), and forces client code using this enum to have to write an extra case to handle a sentinel that should never appear.\n\nWhile it\u0027s ugly, from an IPC standpoint, it\u0027d be preferable to keep the LAST \u003d START_IN_EXISTING_READY_PROCESS idiom, and then do the not nice looking arithmetic on the scoped enum.",
      "range": {
        "startLine": 38,
        "startChar": 0,
        "endLine": 40,
        "endChar": 11
      },
      "revId": "368fda9a5677788f179ab6a7996d47e4ccce0a5d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4d618421_5fd43f25",
        "filename": "tools/metrics/histograms/histograms.xml",
        "patchSetId": 10
      },
      "lineNbr": 50539,
      "author": {
        "id": 1000781
      },
      "writtenOn": "2017-07-13T03:21:50Z",
      "side": 1,
      "message": "And also when the service worker didn\u0027t call FetchEvent.respondWith(), PageLoad.Clients.ServiceWorker.PreparationType is UNKNOWN.",
      "revId": "368fda9a5677788f179ab6a7996d47e4ccce0a5d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}