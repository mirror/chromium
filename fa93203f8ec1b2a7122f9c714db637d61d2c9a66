{
  "comments": [
    {
      "key": {
        "uuid": "aa13bcaf_e6411ad1",
        "filename": "chrome/browser/media/router/discovery/mdns/cast_media_sink_service_impl.h",
        "patchSetId": 3
      },
      "lineNbr": 229,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2017-10-02T19:07:29Z",
      "side": 1,
      "message": "Cast discovery doesn\u0027t need HTTP.  Why is this being added?",
      "revId": "fa93203f8ec1b2a7122f9c714db637d61d2c9a66",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "02d1ba2e_6fe7cf68",
        "filename": "chrome/browser/media/router/discovery/mdns/cast_media_sink_service_impl.h",
        "patchSetId": 3
      },
      "lineNbr": 229,
      "author": {
        "id": 1115968
      },
      "writtenOn": "2017-10-02T19:14:33Z",
      "side": 1,
      "message": "It is dependent on the NetLog, which is part of the URLRequestContext.  Currently NetLog is owned and created by BrowserProcessImpl, but it\u0027s moving into the network service.  So there will be no way to get it on the UI thread.  Eventually it will be moved completely out of process, but for now, there\u0027s an in-process NetworkService object, which lives on the IOThread and creates URLRequestContexts, so we can grab the NetLog from that, for the moment.  Eventually, we\u0027ll have a cross-process socket wrapper which this class will need to be switched to, but that\u0027s still some ways off.",
      "parentUuid": "aa13bcaf_e6411ad1",
      "revId": "fa93203f8ec1b2a7122f9c714db637d61d2c9a66",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "82f5e94e_1abf6310",
        "filename": "chrome/browser/media/router/discovery/mdns/cast_media_sink_service_impl.h",
        "patchSetId": 3
      },
      "lineNbr": 229,
      "author": {
        "id": 1115968
      },
      "writtenOn": "2017-10-02T19:16:49Z",
      "side": 1,
      "message": "Oh, and \"service\" in this context means an out-of-process Mojo service, not a BrowserContextKeyedService.",
      "parentUuid": "02d1ba2e_6fe7cf68",
      "revId": "fa93203f8ec1b2a7122f9c714db637d61d2c9a66",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "deba4a3c_3457787f",
        "filename": "chrome/browser/media/router/discovery/mdns/cast_media_sink_service_impl.h",
        "patchSetId": 3
      },
      "lineNbr": 229,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2017-10-02T22:32:03Z",
      "side": 1,
      "message": "OK.  Can you add a comment here to the effect that \"This is a temporary workaround to get access to the net::NetLog* from the NetworkService.\"\n\nI assume that this will go away when we refactor our discovery code to use the out-of-process NetworkService.\n\nOur team makes pretty heavy use of sockets (UDP, TCP, SSL) across a variety of protocols.  It would be a good idea for us to take a look at the current plans for NetworkService to see how it fits with our requirements.  Is there a design doc we could get started with?",
      "parentUuid": "82f5e94e_1abf6310",
      "revId": "fa93203f8ec1b2a7122f9c714db637d61d2c9a66",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f9809547_ab0d8e45",
        "filename": "chrome/browser/media/router/discovery/mdns/cast_media_sink_service_impl.h",
        "patchSetId": 3
      },
      "lineNbr": 229,
      "author": {
        "id": 1115968
      },
      "writtenOn": "2017-10-02T23:14:43Z",
      "side": 1,
      "message": "Will do.  Note that \"URLRequestContext\" is more \"Your gateway to centralized network objects\" rather than just \"Thing you use to make URLRequests\".\n\nWhen you\u0027re using the network service, you won\u0027t need this, since both NetLog and the URLRequestContext will be on the other side of the process divide, though you will need to use either a NetworkContext or NetworkService object to create sockets.\n\nUnfortunately, there\u0027s no single design doc.  Encompassing service worker, TCP/UDP/SSL sockets, appcache, network state monitoring, proxies, cookies, cache configuration, cache access, auth, client certs, iOS, downloads, navigation, mime sniffing, safe browsing, DNS resolution, etc, in a single doc just doesn\u0027t work.  While there was certainly discussion of overall design, that mostly focused on URLRequests, due to the complexities there.\n\nxunjieli plans to work on design and implementation of the socket API for the network service this quarter.  I imagine TCP/UDP/SSL sockets will be a fairly straightforward wrapper around lower level APIs (Though for SSL, our only low level API uses socket pools, so not sure how that will work).",
      "parentUuid": "deba4a3c_3457787f",
      "revId": "fa93203f8ec1b2a7122f9c714db637d61d2c9a66",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}