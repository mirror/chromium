{
  "comments": [
    {
      "key": {
        "uuid": "440b76be_a5aa25a3",
        "filename": "third_party/WebKit/Source/core/editing/commands/InsertTextCommand.cpp",
        "patchSetId": 1
      },
      "lineNbr": 100,
      "author": {
        "id": 1229332
      },
      "writtenOn": "2017-10-05T23:13:04Z",
      "side": 1,
      "message": "Note: another option instead of just not trying to perform a trivial replace in this case would be to try to check if we have whitespace immediately on either side of the selection, and proceed with the trival replace if we don\u0027t. However, I\u0027m not sure it\u0027s a good idea to add more complexity here.",
      "revId": "1e4e77ed94f4571421c631556aa84ea94baa4016",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "34aac4b0_231e8290",
        "filename": "third_party/WebKit/Source/core/editing/commands/InsertTextCommandTest.cpp",
        "patchSetId": 1
      },
      "lineNbr": 109,
      "author": {
        "id": 1116193
      },
      "writtenOn": "2017-10-06T06:29:34Z",
      "side": 1,
      "message": "Just for comparison, could you also test the following cases in the same test case?\n\n\"foo^ bar|\" --\u003e insertText(\" \")\n\"foo^bar| \" --\u003e insertText(\"\")\n\"foo^bar |\" --\u003e insertText(\" \")\n\nI expect that the results should be the same.\n\nAlso, having the following reverse cases (in another test case?) would be helpful:\n\n\"\u003cp\u003ebaz\u003c/p\u003e^bar| foo\" --\u003e insertText(\"\")\n\"\u003cp\u003ebaz\u003c/p\u003e^bar |foo\" --\u003e insertText(\" \")\n\"\u003cp\u003ebaz\u003c/p\u003e ^bar|foo\" --\u003e insertText(\"\")\n\"\u003cp\u003ebaz\u003c/p\u003e^ bar|foo\" --\u003e insertText(\" \")\n\nLastly, how do we handle \\t?\n\nfoo\\t^bar|\u003cp\u003ebaz\u003c/p\u003e --\u003e insertText(\"\")\n\nWould this result in breaking foo and baz?",
      "range": {
        "startLine": 109,
        "startChar": 51,
        "endLine": 109,
        "endChar": 60
      },
      "revId": "1e4e77ed94f4571421c631556aa84ea94baa4016",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "404429fd_421083c3",
        "filename": "third_party/WebKit/Source/core/editing/commands/InsertTextCommandTest.cpp",
        "patchSetId": 1
      },
      "lineNbr": 109,
      "author": {
        "id": 1144165
      },
      "writtenOn": "2017-10-06T18:24:34Z",
      "side": 1,
      "message": "\u003e Lastly, how do we handle \\t?\n\u003e \n\u003e foo\\t^bar|\u003cp\u003ebaz\u003c/p\u003e --\u003e insertText(\"\")\n\u003e \n\u003e Would this result in breaking foo and baz?\n\nI believe so. Without white-space:pre/pre-wrap, \\t should be handled as if it\u0027s a space.",
      "parentUuid": "34aac4b0_231e8290",
      "range": {
        "startLine": 109,
        "startChar": 51,
        "endLine": 109,
        "endChar": 60
      },
      "revId": "1e4e77ed94f4571421c631556aa84ea94baa4016",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0ffbf5ac_850977fb",
        "filename": "third_party/WebKit/Source/core/editing/commands/InsertTextCommandTest.cpp",
        "patchSetId": 1
      },
      "lineNbr": 109,
      "author": {
        "id": 1229332
      },
      "writtenOn": "2017-10-06T20:00:45Z",
      "side": 1,
      "message": "Changwan, for your second proposed test:\n\"foo^bar| \" --\u003e insertText(\"\")\n\nThe space after \"bar\" is already being collapsed, so it\u0027s not correct for InsertTextCommand to change it to non-collapsed.\n\nSame for the third reversed test:\n\"\u003cp\u003ebaz\u003c/p\u003e ^bar|foo\" --\u003e insertText(\"\")",
      "parentUuid": "404429fd_421083c3",
      "range": {
        "startLine": 109,
        "startChar": 51,
        "endLine": 109,
        "endChar": 60
      },
      "revId": "1e4e77ed94f4571421c631556aa84ea94baa4016",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2848fadc_21241abc",
        "filename": "third_party/WebKit/Source/core/editing/commands/InsertTextCommandTest.cpp",
        "patchSetId": 1
      },
      "lineNbr": 114,
      "author": {
        "id": 1002258
      },
      "writtenOn": "2017-10-06T01:47:48Z",
      "side": 1,
      "message": "Should we really need to change U+0020 to U+00A0 for empty composition\ncommitting?\n\nI think empty composition should do nothing.",
      "revId": "1e4e77ed94f4571421c631556aa84ea94baa4016",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ea167351_71ee5000",
        "filename": "third_party/WebKit/Source/core/editing/commands/InsertTextCommandTest.cpp",
        "patchSetId": 1
      },
      "lineNbr": 114,
      "author": {
        "id": 1229332
      },
      "writtenOn": "2017-10-06T02:14:02Z",
      "side": 1,
      "message": "changwan@ already decided in https://codereview.chromium.org/2874783004 that calling CommitText() with an empty string should delete the text. If we support that behavior, we need to update the whitespace properly.",
      "parentUuid": "2848fadc_21241abc",
      "revId": "1e4e77ed94f4571421c631556aa84ea94baa4016",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}