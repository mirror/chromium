{
  "comments": [
    {
      "key": {
        "uuid": "7ac76254_05bf9f99",
        "filename": "base/threading/thread_restrictions.h",
        "patchSetId": 8
      },
      "lineNbr": 75,
      "author": {
        "id": 1000193
      },
      "writtenOn": "2017-09-19T23:40:44Z",
      "side": 1,
      "message": "Sad rant: It does feel like a fairly big abstraction leak to have this, since we know that for some of these, we will never be able to remove (that is, this is not a temporary/in-progress thing). At best, we\u0027re using this file to scope visibility of the API, which feels weird.",
      "revId": "f7987a06e8e5319d86dab577265eb6988194ff45",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5c554561_0c438441",
        "filename": "base/threading/thread_restrictions.h",
        "patchSetId": 8
      },
      "lineNbr": 75,
      "author": {
        "id": 1002897
      },
      "writtenOn": "2017-09-25T13:37:19Z",
      "side": 1,
      "message": "Are you saying that using thread_restrictions.h to scope visibility of the WaitableEvent/ConditionVariable APIs is weird?\n\nWaitableEvent/ConditionVariable should rarely be used because they are a common source of hangs, deadlocks and data races. Friend lists in thread_restrictions.h guarantees that //base OWNERS will review all use cases, which is desirable.",
      "parentUuid": "7ac76254_05bf9f99",
      "revId": "f7987a06e8e5319d86dab577265eb6988194ff45",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0e2e077e_15608d33",
        "filename": "base/threading/thread_restrictions.h",
        "patchSetId": 8
      },
      "lineNbr": 75,
      "author": {
        "id": 1001534
      },
      "writtenOn": "2017-09-25T20:12:50Z",
      "side": 1,
      "message": "Agreed that this paradigm is being used as intended. FWIW it\u0027s a re-use of the existing paradigm for ThreadRestrictions\u0027 API (see friends in private section of ThreadRestrictions).\n\nThe abstraction violation is weird I agree but it\u0027s the price to pay to ensure these APIs aren\u0027t used willy-nilly in our codebase (outside of testing).",
      "parentUuid": "5c554561_0c438441",
      "revId": "f7987a06e8e5319d86dab577265eb6988194ff45",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0ca81b46_75126b01",
        "filename": "base/threading/thread_restrictions.h",
        "patchSetId": 8
      },
      "lineNbr": 75,
      "author": {
        "id": 1000193
      },
      "writtenOn": "2017-09-26T04:00:52Z",
      "side": 1,
      "message": "Right, I understand why - but hopefully you can see why it\u0027s slightly unfortunate to have //base knowing about its consumers - particularly when these consumers won\u0027t go away. That is, this isn\u0027t a \u0027burndown list\u0027 so much as a whitelist, and the API is, well, an API that\u0027s exposed :)\n\nAnyways, it was more an unfortunate layering break that, say, something like Cronet or libchrome has to \"know\" about all these consumers. It feels like it\u0027s something that in an ideal world would be something like a presubmit script (noting new includes) or a Clang plugin (noting new instantiations), tied to the product and its product-specific restrictions on the API.\n\nThat\u0027s not strictly related to this CL, other than worth noting that we\u0027ve identified that this won\u0027t be going away :)",
      "parentUuid": "0e2e077e_15608d33",
      "revId": "f7987a06e8e5319d86dab577265eb6988194ff45",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "72dfd7c2_ed53ce5c",
        "filename": "base/threading/thread_restrictions.h",
        "patchSetId": 8
      },
      "lineNbr": 75,
      "author": {
        "id": 1002897
      },
      "writtenOn": "2017-09-26T16:03:51Z",
      "side": 1,
      "message": "Yes, I understand your concerns.",
      "parentUuid": "0ca81b46_75126b01",
      "revId": "f7987a06e8e5319d86dab577265eb6988194ff45",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}