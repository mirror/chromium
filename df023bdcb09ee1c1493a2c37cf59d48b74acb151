{
  "comments": [
    {
      "key": {
        "uuid": "e5cc9bfd_5a6f014e",
        "filename": "chrome/android/BUILD.gn",
        "patchSetId": 2
      },
      "lineNbr": 614,
      "author": {
        "id": 1181690
      },
      "writtenOn": "2017-08-22T19:55:16Z",
      "side": 1,
      "message": "Duplicate?",
      "revId": "df023bdcb09ee1c1493a2c37cf59d48b74acb151",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "491d7d90_765f1b86",
        "filename": "chrome/android/BUILD.gn",
        "patchSetId": 2
      },
      "lineNbr": 614,
      "author": {
        "id": 1140427
      },
      "writtenOn": "2017-08-24T19:16:01Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e5cc9bfd_5a6f014e",
      "revId": "df023bdcb09ee1c1493a2c37cf59d48b74acb151",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3097d813_85e7f5c0",
        "filename": "chrome/android/javatests/src/org/chromium/chrome/browser/permissions/QuotaTest.java",
        "patchSetId": 2
      },
      "lineNbr": 42,
      "author": {
        "id": 1181690
      },
      "writtenOn": "2017-08-22T19:55:16Z",
      "side": 1,
      "message": "Does this compile with it being protected and QuotaTest no longer extending PermissionTestCaseBase?",
      "revId": "df023bdcb09ee1c1493a2c37cf59d48b74acb151",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0b9f9c73_39d1203f",
        "filename": "chrome/android/javatests/src/org/chromium/chrome/browser/permissions/QuotaTest.java",
        "patchSetId": 2
      },
      "lineNbr": 42,
      "author": {
        "id": 1002237
      },
      "writtenOn": "2017-08-22T20:47:39Z",
      "side": 1,
      "message": "Note: QuotaTest and PermissionUpdateWaiter are both in the package org.chromium.chrome.browser.permissions, so this should be fine.",
      "parentUuid": "3097d813_85e7f5c0",
      "revId": "df023bdcb09ee1c1493a2c37cf59d48b74acb151",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "13bf39e5_21c7003d",
        "filename": "chrome/android/javatests/src/org/chromium/chrome/browser/permissions/QuotaTest.java",
        "patchSetId": 2
      },
      "lineNbr": 42,
      "author": {
        "id": 1181690
      },
      "writtenOn": "2017-08-22T21:02:03Z",
      "side": 1,
      "message": "I thought that was the point of the unnamed package access identifier... TIL, I guess.",
      "parentUuid": "0b9f9c73_39d1203f",
      "revId": "df023bdcb09ee1c1493a2c37cf59d48b74acb151",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "57f23855_85a83322",
        "filename": "chrome/test/android/javatests/src/org/chromium/chrome/test/ChromeActivityTestRule.java",
        "patchSetId": 2
      },
      "lineNbr": 68,
      "author": {
        "id": 1181690
      },
      "writtenOn": "2017-08-22T19:55:16Z",
      "side": 1,
      "message": "On the one hand, I\u0027m a little wary of this -- Rules should call their own setup logic, and inheritance should be left out of it.\n\nOn the other hand, I imagine this is a case where order of execution matters -- you need mTestCommon.setUp to be called before PermissionTestRule does its thing. This seems like something that could be defined in a more abstract Rule base class -- something that\u0027s responsible for just ruleSetUp and ruleTearDown and provided empty implementations of each.\n\nIf we do decide to (or have to) do ruleSetUp and ruleTearDown, I certainly think they should be done in the same place (as opposed to the current implementation, which does the former here and the latter down in PermissionTestRule).",
      "revId": "df023bdcb09ee1c1493a2c37cf59d48b74acb151",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "47fae9e7_d4f3611c",
        "filename": "chrome/test/android/javatests/src/org/chromium/chrome/test/ChromeActivityTestRule.java",
        "patchSetId": 2
      },
      "lineNbr": 68,
      "author": {
        "id": 1002237
      },
      "writtenOn": "2017-08-22T20:47:39Z",
      "side": 1,
      "message": "Just in very general terms, if we can avoid using inheritance, that would be great! Particularly for rules, since part of the point there was re-use and not requiring particular inheritance, etc., so it\u0027s probably wise to use the same concept for everything related to rules as far as we can.",
      "parentUuid": "57f23855_85a83322",
      "revId": "df023bdcb09ee1c1493a2c37cf59d48b74acb151",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f65a9e42_48c509cd",
        "filename": "chrome/test/android/javatests/src/org/chromium/chrome/test/ChromeActivityTestRule.java",
        "patchSetId": 2
      },
      "lineNbr": 68,
      "author": {
        "id": 1140427
      },
      "writtenOn": "2017-08-24T19:16:01Z",
      "side": 1,
      "message": "guilty as charged ðŸ””ðŸ””ðŸ””\nthis actually do not need inheritance, I just got confused when debugging this one.\nCurrently since a lot of test rules inherited the inheritance from test base classes (aha)\n\nthere are a couple of situations for this, where test rule Parent is parent of Child\n\nIf Child\u0027s setUp want to run before Parent\u0027s setUp, then we would \"package\" Parent\u0027s setUp into base statement, e.g.\n\nclass Child extends Parent{\n  Statement apply(Statement base) {\n    Statement ParentsetUpAndTestRun \u003d super.apply(base);\n    return new Statement(){ () -\u003e ChildSetUp(); ParentsetUpAndTestRun.evaluate();};\n  }\n}\n\nIf Child\u0027s setUp runs after parent\u0027s setup, then it\u0027s simply pass Child statement into super\n\nclass Child extends Parent{\n  Statement apply(Statement base) {\n    return super.apply(new Statement(){ () -\u003e ChildSetUp(); base.evaluate();});\n  }\n}\n\nIf child\u0027s setUp runs in between parent\u0027s setup, which test base classes sometimes do e.g.\n\npublic void setUp() {\n  childSetUp1();\n  super.setUp();\n  childSetUp2();\n}\n\nThis actually becomes rather unintuitive, e.g.\n\nclass Child extends Parent{\n  Statement apply(Statement base) {\n    Statement ParentsetUpAndTestRun \u003d super.apply(\n        new Statement(){() -\u003e ChildSetUp2(); base.evaluate()});\n    return new Statement(){ () -\u003e ChildSetUp1(); ParentsetUpAndTestRun.evaluate();};\n  }\n}\n\nOverall this is rather *annoying* to handle the parent, child test rule order. That\u0027s why during\nthe next refactoring stage, I would argue we look into a compound test rule\n(as discussed with John offline before) that controls rule running order, and also consider\nthe possibility of most if not all rules final.\n\nChanged.",
      "parentUuid": "47fae9e7_d4f3611c",
      "revId": "df023bdcb09ee1c1493a2c37cf59d48b74acb151",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}