{
  "comments": [
    {
      "key": {
        "uuid": "dfa3ced2_645aa98c",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 25,
      "author": {
        "id": 1002725
      },
      "writtenOn": "2018-01-04T16:42:53Z",
      "side": 1,
      "message": "there\u0027s no infinite recursion here, right? it would block, but why would it OOM?",
      "revId": "7158f35c3524fa87b1b505cf6dee0477a631f31c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8b02e6be_27d35e64",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 25,
      "author": {
        "id": 1245462
      },
      "writtenOn": "2018-01-04T19:50:46Z",
      "side": 1,
      "message": "No, no infinite recursion. Something else is leaking. My guess is some GPU channel handle. I can only tell that /proc/x/smaps shows that memory runs away from us... We need to investigate this.",
      "parentUuid": "dfa3ced2_645aa98c",
      "revId": "7158f35c3524fa87b1b505cf6dee0477a631f31c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1347a8e1_df267113",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 25,
      "author": {
        "id": 1245462
      },
      "writtenOn": "2018-01-12T16:27:16Z",
      "side": 1,
      "message": "I think the allocations happen in GpuServiceProxy::EstablishGpuChannel (called from GpuProcessHost::EstablishGpuChannel):\n\n  params.Allocate(buffer);\n  ...\n  new GpuService_EstablishGpuChannel_ForwardToCallback ...",
      "parentUuid": "8b02e6be_27d35e64",
      "revId": "7158f35c3524fa87b1b505cf6dee0477a631f31c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a4c42697_9b3ec301",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 28,
      "author": {
        "id": 1002725
      },
      "writtenOn": "2018-01-04T16:42:53Z",
      "side": 1,
      "message": "that\u0027s not correct for out of process gpu. GpuProcessHost destructor runs when gpu process crashes as well, and sending out GPU_ACCESS_DENIED is wrong\n\nsounds like it would be better for BrowserGpuChannelHostFactory to listen to some sort of shutdown signal, and just stop retrying if that\u0027s the case. And there appear to be such a signal already: BrowserGpuChannelHostFactory::CloseChannel.\n\nOr a simpler workaround would be to just have OnEstablishedOnIO post EstablishOnIO instead",
      "revId": "7158f35c3524fa87b1b505cf6dee0477a631f31c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f4096767_a91cbeb7",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 28,
      "author": {
        "id": 1245462
      },
      "writtenOn": "2018-01-04T19:50:46Z",
      "side": 1,
      "message": "\u003e Or a simpler workaround would be to just have OnEstablishedOnIO post EstablishOnIO instead\n\nDone.",
      "parentUuid": "a4c42697_9b3ec301",
      "revId": "7158f35c3524fa87b1b505cf6dee0477a631f31c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}