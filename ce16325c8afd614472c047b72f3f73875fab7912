{
  "comments": [
    {
      "key": {
        "uuid": "3fbabfb3_5f666dc6",
        "filename": "chrome/browser/page_load_metrics/observers/data_reduction_proxy_metrics_observer.cc",
        "patchSetId": 3
      },
      "lineNbr": 353,
      "author": {
        "id": 1127744
      },
      "writtenOn": "2018-01-09T22:58:30Z",
      "side": 1,
      "message": "nit: Why do either of these variables need to be passed to RequestProcessDump() method? Can that method directly access/generate these?",
      "range": {
        "startLine": 353,
        "startChar": 23,
        "endLine": 353,
        "endChar": 44
      },
      "revId": "ce16325c8afd614472c047b72f3f73875fab7912",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "29c2cf57_3bd6da48",
        "filename": "chrome/browser/page_load_metrics/observers/data_reduction_proxy_metrics_observer.cc",
        "patchSetId": 3
      },
      "lineNbr": 353,
      "author": {
        "id": 1166490
      },
      "writtenOn": "2018-01-09T23:56:26Z",
      "side": 1,
      "message": "I prefer this functionality for virtualizing the functionality. The alternative is to have the unittest capture the process id and callback as well, but I\u0027d rather have the unittest know about less of the core impl.",
      "parentUuid": "3fbabfb3_5f666dc6",
      "range": {
        "startLine": 353,
        "startChar": 23,
        "endLine": 353,
        "endChar": 44
      },
      "revId": "ce16325c8afd614472c047b72f3f73875fab7912",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2008ed5f_131ab04b",
        "filename": "chrome/browser/page_load_metrics/observers/data_reduction_proxy_metrics_observer.cc",
        "patchSetId": 3
      },
      "lineNbr": 488,
      "author": {
        "id": 1127744
      },
      "writtenOn": "2018-01-09T22:58:30Z",
      "side": 1,
      "message": "Is it costly to obtain a memory dump?",
      "range": {
        "startLine": 488,
        "startChar": 40,
        "endLine": 488,
        "endChar": 58
      },
      "revId": "ce16325c8afd614472c047b72f3f73875fab7912",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c8065ca2_af98a41a",
        "filename": "chrome/browser/page_load_metrics/observers/data_reduction_proxy_metrics_observer.cc",
        "patchSetId": 3
      },
      "lineNbr": 488,
      "author": {
        "id": 1166490
      },
      "writtenOn": "2018-01-09T23:56:26Z",
      "side": 1,
      "message": "primiano, any thoughts on this?",
      "parentUuid": "2008ed5f_131ab04b",
      "range": {
        "startLine": 488,
        "startChar": 40,
        "endLine": 488,
        "endChar": 58
      },
      "revId": "ce16325c8afd614472c047b72f3f73875fab7912",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dce97904_929d9cd7",
        "filename": "chrome/browser/page_load_metrics/observers/data_reduction_proxy_metrics_observer.cc",
        "patchSetId": 3
      },
      "lineNbr": 488,
      "author": {
        "id": 1142059
      },
      "writtenOn": "2018-01-10T04:52:27Z",
      "side": 1,
      "message": "+1. We could always add a metric :D",
      "parentUuid": "c8065ca2_af98a41a",
      "range": {
        "startLine": 488,
        "startChar": 40,
        "endLine": 488,
        "endChar": 58
      },
      "revId": "ce16325c8afd614472c047b72f3f73875fab7912",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "037dd67f_cfc8dcfb",
        "filename": "chrome/browser/page_load_metrics/observers/data_reduction_proxy_metrics_observer.cc",
        "patchSetId": 3
      },
      "lineNbr": 488,
      "author": {
        "id": 1166490
      },
      "writtenOn": "2018-01-10T16:53:25Z",
      "side": 1,
      "message": "I\u0027m less worried about how long it takes to execute vs how many CPU cycles it takes. Because of the threading of this, I\u0027m not sure if there is a great way to measure how expensive this is in those terms. If anyone wants UMA of timeticks::now - timeticks::now at the start, I\u0027m happy to add it, but I doubt I would personally look at it.",
      "parentUuid": "dce97904_929d9cd7",
      "range": {
        "startLine": 488,
        "startChar": 40,
        "endLine": 488,
        "endChar": 58
      },
      "revId": "ce16325c8afd614472c047b72f3f73875fab7912",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "30732205_4fe96480",
        "filename": "chrome/browser/page_load_metrics/observers/data_reduction_proxy_metrics_observer.cc",
        "patchSetId": 3
      },
      "lineNbr": 488,
      "author": {
        "id": 1142059
      },
      "writtenOn": "2018-01-10T17:19:29Z",
      "side": 1,
      "message": "Yeah fair point. It looks like we already measure the total duration in Memory.Experimental.Debug.GlobalDumpDuration, but I\u0027m not sure we have the aggregate CPU time.",
      "parentUuid": "037dd67f_cfc8dcfb",
      "range": {
        "startLine": 488,
        "startChar": 40,
        "endLine": 488,
        "endChar": 58
      },
      "revId": "ce16325c8afd614472c047b72f3f73875fab7912",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "722995d4_bec3b1fd",
        "filename": "chrome/browser/page_load_metrics/observers/data_reduction_proxy_metrics_observer.cc",
        "patchSetId": 3
      },
      "lineNbr": 488,
      "author": {
        "id": 1002871
      },
      "writtenOn": "2018-01-10T19:52:24Z",
      "side": 1,
      "message": "Check with ssid@.  IIRC he computed this before enabling go/slow-memory-reports where the same question came up.\n\ntimeticks doesn\u0027t make too much sense. the cost is spread over several tasks on several threads, and other tasks might be interleaved in the middle.\nEventually we should sum up the threadticks of each task posted by base::MemoryDumpManager if we wanted this, but that\u0027s non trivial work.",
      "parentUuid": "30732205_4fe96480",
      "range": {
        "startLine": 488,
        "startChar": 40,
        "endLine": 488,
        "endChar": 58
      },
      "revId": "ce16325c8afd614472c047b72f3f73875fab7912",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "315ebb3d_9fb3f603",
        "filename": "chrome/browser/page_load_metrics/observers/data_reduction_proxy_metrics_observer.cc",
        "patchSetId": 3
      },
      "lineNbr": 488,
      "author": {
        "id": 1166490
      },
      "writtenOn": "2018-01-10T23:35:42Z",
      "side": 1,
      "message": "Talked to ssid. The defaults of SUMMARY_ONLY and BACKGROUND in RequestGlobalMemoryDumpForPid should have low cost.",
      "parentUuid": "722995d4_bec3b1fd",
      "range": {
        "startLine": 488,
        "startChar": 40,
        "endLine": 488,
        "endChar": 58
      },
      "revId": "ce16325c8afd614472c047b72f3f73875fab7912",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8f23aa6e_6030dab6",
        "filename": "chrome/browser/page_load_metrics/observers/data_reduction_proxy_metrics_observer.cc",
        "patchSetId": 3
      },
      "lineNbr": 488,
      "author": {
        "id": 1125359
      },
      "writtenOn": "2018-01-10T23:43:07Z",
      "side": 1,
      "message": "The current summary_mode should be invoking just 4-5 functions which just return total numbers. In future there is a plan to include more details into summary mode. At that point we will add metrics about time taken for dump and processing before enabling it.",
      "parentUuid": "315ebb3d_9fb3f603",
      "range": {
        "startLine": 488,
        "startChar": 40,
        "endLine": 488,
        "endChar": 58
      },
      "revId": "ce16325c8afd614472c047b72f3f73875fab7912",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ee87f532_03571810",
        "filename": "components/data_reduction_proxy/proto/pageload_metrics.proto",
        "patchSetId": 3
      },
      "lineNbr": 120,
      "author": {
        "id": 1127744
      },
      "writtenOn": "2018-01-09T22:58:30Z",
      "side": 1,
      "message": "Add a disclaimer about OOPIF :)",
      "range": {
        "startLine": 120,
        "startChar": 56,
        "endLine": 120,
        "endChar": 0
      },
      "revId": "ce16325c8afd614472c047b72f3f73875fab7912",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a189964e_b0e70d05",
        "filename": "components/data_reduction_proxy/proto/pageload_metrics.proto",
        "patchSetId": 3
      },
      "lineNbr": 120,
      "author": {
        "id": 1166490
      },
      "writtenOn": "2018-01-09T23:56:26Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ee87f532_03571810",
      "range": {
        "startLine": 120,
        "startChar": 56,
        "endLine": 120,
        "endChar": 0
      },
      "revId": "ce16325c8afd614472c047b72f3f73875fab7912",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}