{
  "comments": [
    {
      "key": {
        "uuid": "2b80b182_9868f729",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 1115884
      },
      "writtenOn": "2018-02-07T15:20:20Z",
      "side": 1,
      "message": "Could you also add an explanation for the reason for this change? I think it\u0027s a good change whether it fixes 795369 or not, but at present it is only a speculative fix right?",
      "revId": "2798fb88c9e50e9b3a1a6bcb91efe1770c74f309",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "74401e65_a07af493",
        "filename": "third_party/leveldatabase/env_chromium.cc",
        "patchSetId": 1
      },
      "lineNbr": 251,
      "author": {
        "id": 1115884
      },
      "writtenOn": "2018-02-06T23:39:47Z",
      "side": 1,
      "message": "I\u0027ve never used the MRUCache class, but I believe you can ditch using file_evicted_ and instead initialize cache_position_ to file_cache_-\u003eend() and check against that.",
      "revId": "2798fb88c9e50e9b3a1a6bcb91efe1770c74f309",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "18624d66_aaf361d8",
        "filename": "third_party/leveldatabase/env_chromium.cc",
        "patchSetId": 1
      },
      "lineNbr": 293,
      "author": {
        "id": 1115884
      },
      "writtenOn": "2018-02-06T23:39:47Z",
      "side": 1,
      "message": "The dangling \"1\" is odd formatting. Code review bug?",
      "revId": "2798fb88c9e50e9b3a1a6bcb91efe1770c74f309",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "44a1661a_dc469edd",
        "filename": "third_party/leveldatabase/env_chromium.cc",
        "patchSetId": 1
      },
      "lineNbr": 422,
      "author": {
        "id": 1115884
      },
      "writtenOn": "2018-02-06T23:39:47Z",
      "side": 1,
      "message": "Was this a leftover value from testing?",
      "revId": "2798fb88c9e50e9b3a1a6bcb91efe1770c74f309",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e3758acc_58f62870",
        "filename": "third_party/leveldatabase/env_chromium.cc",
        "patchSetId": 1
      },
      "lineNbr": 422,
      "author": {
        "id": 1001917
      },
      "writtenOn": "2018-02-07T22:00:53Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "44a1661a_dc469edd",
      "revId": "2798fb88c9e50e9b3a1a6bcb91efe1770c74f309",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "be07eaa3_bcbcfed2",
        "filename": "third_party/leveldatabase/env_chromium.cc",
        "patchSetId": 1
      },
      "lineNbr": 728,
      "author": {
        "id": 1115884
      },
      "writtenOn": "2018-02-06T23:39:47Z",
      "side": 1,
      "message": "I think this implementation will be simpler if you always have a FileCache, but just use maxint of handle eviction is disabled.",
      "revId": "2798fb88c9e50e9b3a1a6bcb91efe1770c74f309",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "af0edd33_ddce7ec0",
        "filename": "third_party/leveldatabase/env_chromium.cc",
        "patchSetId": 1
      },
      "lineNbr": 728,
      "author": {
        "id": 1001917
      },
      "writtenOn": "2018-02-07T22:00:53Z",
      "side": 1,
      "message": "Since we\u0027re doing map and list work, I\u0027d rather avoid doing that work if we don\u0027t need to....\n\nlet me know what you think about the new approach.",
      "parentUuid": "be07eaa3_bcbcfed2",
      "revId": "2798fb88c9e50e9b3a1a6bcb91efe1770c74f309",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5d5c8c6f_9ec4f049",
        "filename": "third_party/leveldatabase/env_chromium.cc",
        "patchSetId": 1
      },
      "lineNbr": 728,
      "author": {
        "id": 1115884
      },
      "writtenOn": "2018-02-07T23:17:53Z",
      "side": 1,
      "message": "I agree with your desire for a fast implementation. But, correct me if I\u0027m wrong, the *only* time that you aren\u0027t using a file cache is when the LevelDBFileHandleEviction is disabled. No tests set this flag, so this means that ChromiumRandomAccessFile ships untested. Given that all operations on the MRUCache are O(1) this seems like added risk and complexity to improve the performance for what I will be a test-only case (possibly a finch trial?). I hope I\u0027m not being stubborn, but it doesn\u0027t seem like a worthwhile trade-off to me.\n\nP.S. I believe Windows has an unlimited number of file descriptors, so I\u0027m not correct that ChromiumRandomAccessFile will be untested, but still it\u0027s inconsistent and I\u0027m still in favor of simpler.",
      "parentUuid": "af0edd33_ddce7ec0",
      "revId": "2798fb88c9e50e9b3a1a6bcb91efe1770c74f309",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4a69ff92_c04994eb",
        "filename": "third_party/leveldatabase/env_chromium.cc",
        "patchSetId": 1
      },
      "lineNbr": 728,
      "author": {
        "id": 1001917
      },
      "writtenOn": "2018-02-08T00:15:12Z",
      "side": 1,
      "message": "Windows suffers for no reason here, as it has no file descriptor limit.",
      "parentUuid": "5d5c8c6f_9ec4f049",
      "revId": "2798fb88c9e50e9b3a1a6bcb91efe1770c74f309",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}