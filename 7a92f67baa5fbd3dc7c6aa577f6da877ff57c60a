{
  "comments": [
    {
      "key": {
        "uuid": "f5768db0_48446ad5",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 9,
      "author": {
        "id": 1149974
      },
      "writtenOn": "2017-11-13T22:25:30Z",
      "side": 1,
      "message": "can you also add OWNERS file with your and my chromium accounts in it?",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 9,
        "endChar": 7
      },
      "revId": "7a92f67baa5fbd3dc7c6aa577f6da877ff57c60a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0d50772c_d576e856",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 9,
      "author": {
        "id": 1164104
      },
      "writtenOn": "2017-11-15T18:15:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f5768db0_48446ad5",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 9,
        "endChar": 7
      },
      "revId": "7a92f67baa5fbd3dc7c6aa577f6da877ff57c60a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e8d2c43d_de67ab3f",
        "filename": "tools/code_coverage/coverage.py",
        "patchSetId": 2
      },
      "lineNbr": 24,
      "author": {
        "id": 1149974
      },
      "writtenOn": "2017-11-13T22:25:30Z",
      "side": 1,
      "message": "I don\u0027t really know why, but lots of python scripts in Chromium are using:\n\n  from __future__ import print_function\n  # and then print calls like the following one:\n  print(\u0027Building %s\u0027 % str(targets))\n\n\nI think it\u0027s worth to switch to that print() version",
      "revId": "7a92f67baa5fbd3dc7c6aa577f6da877ff57c60a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "62343ef8_cdcf0b56",
        "filename": "tools/code_coverage/coverage.py",
        "patchSetId": 2
      },
      "lineNbr": 24,
      "author": {
        "id": 1164104
      },
      "writtenOn": "2017-11-15T18:15:13Z",
      "side": 1,
      "message": "sounds good! Looks like this will be a major change in Python 3.0.",
      "parentUuid": "e8d2c43d_de67ab3f",
      "revId": "7a92f67baa5fbd3dc7c6aa577f6da877ff57c60a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b721255b_7115d1c0",
        "filename": "tools/code_coverage/coverage.py",
        "patchSetId": 2
      },
      "lineNbr": 135,
      "author": {
        "id": 1149974
      },
      "writtenOn": "2017-11-13T22:25:30Z",
      "side": 1,
      "message": "I wonder if we can make paths shorter. This can be done in the follow-up CLs, but let\u0027s at least remove SRC_ROOT_PATH prefix from the full paths.",
      "range": {
        "startLine": 135,
        "startChar": 32,
        "endLine": 135,
        "endChar": 36
      },
      "revId": "7a92f67baa5fbd3dc7c6aa577f6da877ff57c60a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3c50895f_801487fd",
        "filename": "tools/code_coverage/coverage.py",
        "patchSetId": 2
      },
      "lineNbr": 135,
      "author": {
        "id": 1164104
      },
      "writtenOn": "2017-11-15T18:15:13Z",
      "side": 1,
      "message": "Is there any benefits making the paths shorter?",
      "parentUuid": "b721255b_7115d1c0",
      "range": {
        "startLine": 135,
        "startChar": 32,
        "endLine": 135,
        "endChar": 36
      },
      "revId": "7a92f67baa5fbd3dc7c6aa577f6da877ff57c60a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "97268e54_43c80df4",
        "filename": "tools/code_coverage/coverage.py",
        "patchSetId": 2
      },
      "lineNbr": 135,
      "author": {
        "id": 1149974
      },
      "writtenOn": "2017-11-15T22:01:19Z",
      "side": 1,
      "message": "I\u0027m slightly worried about potential issues when we start storing and serving the reports to users. We had some issues with file paths length in the past (at least on Windows). \n\nFor example, imagine that you generate coverage report on a bot, and source code is located at some weird directory (e.g. /b/clusterfuzz/slave-bot/builds/chromium-browser-libfuzzer_mac-release-asan_53aadfd01f0d682b1d94abd5ad7af8a887b5763e/revisions/libfuzzer-mac-release-509875/)\n\nThen, imagine that we serve it via HTTP from another bot, and the web root is another weirdly named directory. And so on... I mean it\u0027s just a redundant information that doesn\u0027t have any value, but may cause extra troubles.",
      "parentUuid": "3c50895f_801487fd",
      "range": {
        "startLine": 135,
        "startChar": 32,
        "endLine": 135,
        "endChar": 36
      },
      "revId": "7a92f67baa5fbd3dc7c6aa577f6da877ff57c60a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b6f7d6e6_d9b3ec3b",
        "filename": "tools/code_coverage/coverage.py",
        "patchSetId": 2
      },
      "lineNbr": 135,
      "author": {
        "id": 1164104
      },
      "writtenOn": "2017-11-20T17:14:39Z",
      "side": 1,
      "message": "sounds reasonable, I\u0027ve filed a separate bug for this: crbug.com/786577.",
      "parentUuid": "97268e54_43c80df4",
      "range": {
        "startLine": 135,
        "startChar": 32,
        "endLine": 135,
        "endChar": 36
      },
      "revId": "7a92f67baa5fbd3dc7c6aa577f6da877ff57c60a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "05014100_15e2a9f3",
        "filename": "tools/code_coverage/coverage.py",
        "patchSetId": 2
      },
      "lineNbr": 179,
      "author": {
        "id": 1149974
      },
      "writtenOn": "2017-11-13T22:25:30Z",
      "side": 1,
      "message": "What\u0027s the benefit or building targets via the script? IMHO it would be better to just run the specified targets (those can be located in different directories or even outside of Chromium checkout), but maybe I\u0027m missing something important?",
      "range": {
        "startLine": 179,
        "startChar": 4,
        "endLine": 179,
        "endChar": 17
      },
      "revId": "7a92f67baa5fbd3dc7c6aa577f6da877ff57c60a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7cf17ae1_c9285f42",
        "filename": "tools/code_coverage/coverage.py",
        "patchSetId": 2
      },
      "lineNbr": 179,
      "author": {
        "id": 1164104
      },
      "writtenOn": "2017-11-15T18:15:13Z",
      "side": 1,
      "message": "I thought about making the script accepting a binary, but I didn\u0027t go with that for the following 2 reasons:\n\n1. Based on the feedback from iOS team regarding using the iOS code coverage script, people are busy and lazy, and they prefer \"one click\" end to end experience, even if it\u0027s just one extra step to build the targets, many people will just move away from it.\n\n2. I understand it\u0027s always nice to support more features (run binaries outside of Chromium checkout), but is it really needed now? I don\u0027t think we have enough data to confirm or deny it, so how about keeping things simple for now, and once it proves to be something needed, we\u0027ll implement it in the future.\n\nWDYT?",
      "parentUuid": "05014100_15e2a9f3",
      "range": {
        "startLine": 179,
        "startChar": 4,
        "endLine": 179,
        "endChar": 17
      },
      "revId": "7a92f67baa5fbd3dc7c6aa577f6da877ff57c60a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "607ee376_20b26257",
        "filename": "tools/code_coverage/coverage.py",
        "patchSetId": 2
      },
      "lineNbr": 179,
      "author": {
        "id": 1149974
      },
      "writtenOn": "2017-11-15T22:01:19Z",
      "side": 1,
      "message": "Very fair points, and as per today\u0027s meeting it seems that we want to have this in the script.",
      "parentUuid": "7cf17ae1_c9285f42",
      "range": {
        "startLine": 179,
        "startChar": 4,
        "endLine": 179,
        "endChar": 17
      },
      "revId": "7a92f67baa5fbd3dc7c6aa577f6da877ff57c60a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6fe878e1_cdef4b04",
        "filename": "tools/code_coverage/coverage.py",
        "patchSetId": 2
      },
      "lineNbr": 179,
      "author": {
        "id": 1164104
      },
      "writtenOn": "2017-11-20T17:14:39Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "607ee376_20b26257",
      "range": {
        "startLine": 179,
        "startChar": 4,
        "endLine": 179,
        "endChar": 17
      },
      "revId": "7a92f67baa5fbd3dc7c6aa577f6da877ff57c60a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a8b7c349_22e1aac0",
        "filename": "tools/code_coverage/coverage.py",
        "patchSetId": 2
      },
      "lineNbr": 294,
      "author": {
        "id": 1149974
      },
      "writtenOn": "2017-11-13T22:25:30Z",
      "side": 1,
      "message": "are these checks really needed? I think we\u0027ve blocked incorrect usage via asserts in GN files. Is there any invalid combination of flags that we didn\u0027t block?",
      "range": {
        "startLine": 294,
        "startChar": 4,
        "endLine": 294,
        "endChar": 22
      },
      "revId": "7a92f67baa5fbd3dc7c6aa577f6da877ff57c60a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c9cc427d_89a67c6b",
        "filename": "tools/code_coverage/coverage.py",
        "patchSetId": 2
      },
      "lineNbr": 294,
      "author": {
        "id": 1164104
      },
      "writtenOn": "2017-11-15T18:15:13Z",
      "side": 1,
      "message": "My intention was to check use_clang_coverage flag is added to args.gn, if an user forgot to add the flag and he/she won\u0027t be able to find out until the tests finish running, and with tests running in single-process mode, it may take a long time, and it would be frustrating for the users to have to re-run all tests because of this \"obvious\" mistake.\n\nBut, in any case, there is no need to validate the combination, only validating use_clang_coverage is used should be enough, I\u0027ll make the change and see if it lgty.",
      "parentUuid": "a8b7c349_22e1aac0",
      "range": {
        "startLine": 294,
        "startChar": 4,
        "endLine": 294,
        "endChar": 22
      },
      "revId": "7a92f67baa5fbd3dc7c6aa577f6da877ff57c60a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "745e847a_d2c4bca7",
        "filename": "tools/code_coverage/coverage.py",
        "patchSetId": 2
      },
      "lineNbr": 294,
      "author": {
        "id": 1149974
      },
      "writtenOn": "2017-11-15T22:01:19Z",
      "side": 1,
      "message": "Sounds good. Yes, checking for use_clang_coverage is definitely important. As for incompatible combinations of flags, it would be better to have all checks in the same place, i.e. GN files, as we do now (e.g. https://cs.chromium.org/chromium/src/build/config/coverage/coverage.gni)",
      "parentUuid": "c9cc427d_89a67c6b",
      "range": {
        "startLine": 294,
        "startChar": 4,
        "endLine": 294,
        "endChar": 22
      },
      "revId": "7a92f67baa5fbd3dc7c6aa577f6da877ff57c60a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b4943068_dc27a4cf",
        "filename": "tools/code_coverage/coverage.py",
        "patchSetId": 2
      },
      "lineNbr": 294,
      "author": {
        "id": 1164104
      },
      "writtenOn": "2017-11-20T17:14:39Z",
      "side": 1,
      "message": "good point! I\u0027ll move the checks to there.",
      "parentUuid": "745e847a_d2c4bca7",
      "range": {
        "startLine": 294,
        "startChar": 4,
        "endLine": 294,
        "endChar": 22
      },
      "revId": "7a92f67baa5fbd3dc7c6aa577f6da877ff57c60a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4cbefedc_ee4bc10f",
        "filename": "tools/code_coverage/coverage.py",
        "patchSetId": 2
      },
      "lineNbr": 366,
      "author": {
        "id": 1149974
      },
      "writtenOn": "2017-11-13T22:25:30Z",
      "side": 1,
      "message": "I\u0027m not sure that\u0027s the best way to handle multiple targets and specific options. For example, I tried to run two fuzz targets that need two different cmdline arguments:\n\n  $ tools/code_coverage/coverage.py zlib_uncompress_fuzzer h264_bitstream_parser_fuzzer -b out/coverage -o yuke2 -c\u003d\"-runs\u003d0 ~/fuzzing/zlib_uncompress_fuzzer\" -c\u003d\"-runs\u003d0 ~/fuzzing/h264_bitstream_parser_fuzzer\"\n\nThat ended up with the following:\n\n  Running zlib_uncompress_fuzzer with command: out/coverage/zlib_uncompress_fuzzer --test-launcher-jobs\u003d1 -runs\u003d0 ~/fuzzing/h264_bitstream_parser_fuzzer\n  Running h264_bitstream_parser_fuzzer with command: out/coverage/h264_bitstream_parser_fuzzer --test-launcher-jobs\u003d1 -runs\u003d0 ~/fuzzing/h264_bitstream_parser_fuzzer\n\nWhich is wrong, as libFuzzer ignores arguments with \"--\" and everything after that. Also note that it used the same argument for two different targets.\n\n\nI believe that a better solution would be to specify a full commands like:\n\n  $ tools/code_coverage/coverage.py -c \"zlib_uncompress_fuzzer -runs\u003d0 ~/fuzzing/zlib_uncompress_fuzzer\" \"h264_bitstream_parser_fuzzer -runs\u003d0 ~/fuzzing/h264_bitstream_parser_fuzzer\"\n\nFirst element of each command can be extracted and used as a value of |target| argument.\n\nWhat do you think about that?",
      "range": {
        "startLine": 366,
        "startChar": 27,
        "endLine": 366,
        "endChar": 34
      },
      "revId": "7a92f67baa5fbd3dc7c6aa577f6da877ff57c60a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bd71dc72_8e9b0ed9",
        "filename": "tools/code_coverage/coverage.py",
        "patchSetId": 2
      },
      "lineNbr": 366,
      "author": {
        "id": 1164104
      },
      "writtenOn": "2017-11-15T18:15:13Z",
      "side": 1,
      "message": "Yup, that\u0027s incorrect, I didn\u0027t realize running a fuzzer target requires target specific commands, I agree specifying a full command makes more sense.\n\nAs mentioned in another comment, so far, I still think building is necessary, so I\u0027ll make the command looks like:\n\n$ tools/code_coverage/coverage.py zlib_uncompress_fuzzer h264_bitstream_parser_fuzzer -b out/Coverag -c \"zlib_uncompress_fuzzer -runs\u003d0 ~/fuzzing/zlib_uncompress_fuzzer\" \"h264_bitstream_parser_fuzzer -runs\u003d0 ~/fuzzing/h264_bitstream_parser_fuzzer\"\n\nregarding \"First element of each command can be extracted and used as a value of |target| argument.\", this won\u0027t work for mobile platforms, for example, iOS generates a \".app\" artifact, and it uses iossim to run tests, so the first element will always be iossim, but we can have an extra logic to determine the target/binary name.\n\nOne thing I\u0027m not sure is that, does fuzzer target requires \"--test-launcher-jobs\u003d1\" argument or alike? I think we should still append this argument to the user specified command, my reason is that, it\u0027s not obvious that \"--test-launcher-jobs\u003d1\" is required to run tests to generate code coverage data, and it\u0027s not easy to debug when the \"merge\" step fails, so I think it\u0027s unfair to ask the users to remember pass this argument to run tests.",
      "parentUuid": "4cbefedc_ee4bc10f",
      "range": {
        "startLine": 366,
        "startChar": 27,
        "endLine": 366,
        "endChar": 34
      },
      "revId": "7a92f67baa5fbd3dc7c6aa577f6da877ff57c60a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "41cc6bc7_65e996fb",
        "filename": "tools/code_coverage/coverage.py",
        "patchSetId": 2
      },
      "lineNbr": 366,
      "author": {
        "id": 1149974
      },
      "writtenOn": "2017-11-15T22:01:19Z",
      "side": 1,
      "message": "Agreed on your suggestion. Thanks for clarifications regarding iOS case!\n\n\"--test-launcher-jobs\u003d1\" is not needed for fuzzers and actually kinda breaks them, as libFuzzer ignores all the arguments after that one.\n\nThough good point regarding automatically adding that argument to the tests. I cannot think of anything better then some helper function that understands whether we are going to run a unittest or anything else.\n\nWe might invoke `gn refs \u003cbuild_dir\u003e \"testing/gtest\"` in that helper function, e.g.:\n\n  $ gn refs out/test/ \"testing/gtest\" | egrep \":zlib_uncompress_fuzzer\"\n  $ gn refs out/test/ \"testing/gtest\" | egrep \":crypto_unittests\"\n  //crypto:crypto_unittests\n\n\nto understand whether we are running a test or something else",
      "parentUuid": "bd71dc72_8e9b0ed9",
      "range": {
        "startLine": 366,
        "startChar": 27,
        "endLine": 366,
        "endChar": 34
      },
      "revId": "7a92f67baa5fbd3dc7c6aa577f6da877ff57c60a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "305edd28_43b17f3b",
        "filename": "tools/code_coverage/coverage.py",
        "patchSetId": 2
      },
      "lineNbr": 366,
      "author": {
        "id": 1164104
      },
      "writtenOn": "2017-11-20T17:14:39Z",
      "side": 1,
      "message": "That\u0027s a very good idea! Thanks!",
      "parentUuid": "41cc6bc7_65e996fb",
      "range": {
        "startLine": 366,
        "startChar": 27,
        "endLine": 366,
        "endChar": 34
      },
      "revId": "7a92f67baa5fbd3dc7c6aa577f6da877ff57c60a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "83454fe8_9688b3bb",
        "filename": "tools/code_coverage/coverage.py",
        "patchSetId": 2
      },
      "lineNbr": 398,
      "author": {
        "id": 1149974
      },
      "writtenOn": "2017-11-13T22:28:48Z",
      "side": 1,
      "message": "I would prefer just printing the URL, as popping up a tab in browser can be quite distracting, e.g. iamgine you launched a large unit tests binary and switched to doing other tasks on your machine, you probably don\u0027t want to suddenly jump into the browser window :)",
      "range": {
        "startLine": 398,
        "startChar": 2,
        "endLine": 398,
        "endChar": 39
      },
      "revId": "7a92f67baa5fbd3dc7c6aa577f6da877ff57c60a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "140f9440_9dd6feca",
        "filename": "tools/code_coverage/coverage.py",
        "patchSetId": 2
      },
      "lineNbr": 398,
      "author": {
        "id": 1164104
      },
      "writtenOn": "2017-11-15T18:15:13Z",
      "side": 1,
      "message": "Good point!",
      "parentUuid": "83454fe8_9688b3bb",
      "range": {
        "startLine": 398,
        "startChar": 2,
        "endLine": 398,
        "endChar": 39
      },
      "revId": "7a92f67baa5fbd3dc7c6aa577f6da877ff57c60a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}