{
  "comments": [
    {
      "key": {
        "uuid": "c00cb8fc_3bb8ea57",
        "filename": "cc/trees/property_tree.cc",
        "patchSetId": 2
      },
      "lineNbr": 1747,
      "author": {
        "id": 1128438
      },
      "writtenOn": "2017-05-24T00:16:27Z",
      "side": 1,
      "message": "I\u0027d like to add a comment here, and/or where we act on this when true in LayerTreeHostImpl, but I\u0027m actually not sure why we need to call set_needs_update_draw_properties on the LayerTreeImpl for transform animations, but not for opacity/filter animations, and also only on the impl thread.\n\nI\u0027ve preserved logic, but if thoughts to better explain let me know.",
      "range": {
        "startLine": 1747,
        "startChar": 12,
        "endLine": 1747,
        "endChar": 29
      },
      "revId": "90d00c51e95224f38e8dd50e74b538204983eaee",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7b76e622_31af67b4",
        "filename": "cc/trees/property_tree.cc",
        "patchSetId": 2
      },
      "lineNbr": 1747,
      "author": {
        "id": 1115895
      },
      "writtenOn": "2017-05-24T19:05:02Z",
      "side": 1,
      "message": "This seems incorrect to me.  If you don\u0027t call SetNeedsUDP then LayerTreeImpl::UpdateDrawProperties will early out.  Definitely agreed that this should be consistent, and it seems to me that they both need it (rather than neither).",
      "parentUuid": "c00cb8fc_3bb8ea57",
      "range": {
        "startLine": 1747,
        "startChar": 12,
        "endLine": 1747,
        "endChar": 29
      },
      "revId": "90d00c51e95224f38e8dd50e74b538204983eaee",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "11c072bd_9feac129",
        "filename": "cc/trees/property_tree.cc",
        "patchSetId": 2
      },
      "lineNbr": 1747,
      "author": {
        "id": 1108704
      },
      "writtenOn": "2017-05-24T21:37:52Z",
      "side": 1,
      "message": "Should be safe to do for all cases.\n\nThe reason was whether transform is animating could change what layer we draw, but not the opacity and filter animation. This was added here: https://codereview.chromium.org/1409393005.",
      "parentUuid": "7b76e622_31af67b4",
      "range": {
        "startLine": 1747,
        "startChar": 12,
        "endLine": 1747,
        "endChar": 29
      },
      "revId": "90d00c51e95224f38e8dd50e74b538204983eaee",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "36d618e9_eccc36ee",
        "filename": "cc/trees/property_tree.cc",
        "patchSetId": 2
      },
      "lineNbr": 1747,
      "author": {
        "id": 1128438
      },
      "writtenOn": "2017-05-24T22:20:41Z",
      "side": 1,
      "message": "Thanks for the insight. I\u0027d like to better understand our design philosophy w.r.t. property trees and keeping them up to date. Are we ok with (1) as was done here to date, intentionally not marking effect tree in need of update if we know we don\u0027t care about recomputing other fields that may depend on node fields we\u0027ve just mutated?\n\nOr, do we prefer (2) any time we mutate a field on a node, we should also mark the involved tree as in need of update, and its LayerTreeImpl as needing UDP. Even though we may know it\u0027s unnecessary, there is a desire to have a consistent property tree state. This would ensure that dependent node fields are always kept up to date, and prevent fragile logic bugs/dependencies down the line. Though there may be no field dependency today, one could be added later.\n\nI\u0027d infer (2) from discussion, but then if that\u0027s the case, don\u0027t we actually need to mark effect tree and LayerTreeImpl for update for FILTER case as well on principle?\n\nAnd, if (2), exploring safer ways to enforce like setter methods on the nodes/trees, or helper methods, could be warranted since it\u0027s easy to overlook.\n\nFILTER specifically has a comment about knowing we don\u0027t need the subtree to be rebuilt. It seems like rebuilding could be expensive in some cases. So I want to understand the above better to carry into both this and future work thinking.",
      "parentUuid": "11c072bd_9feac129",
      "range": {
        "startLine": 1747,
        "startChar": 12,
        "endLine": 1747,
        "endChar": 29
      },
      "revId": "90d00c51e95224f38e8dd50e74b538204983eaee",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "194508eb_ecbf31af",
        "filename": "cc/trees/property_tree.cc",
        "patchSetId": 2
      },
      "lineNbr": 1747,
      "author": {
        "id": 1128438
      },
      "writtenOn": "2017-05-25T21:12:29Z",
      "side": 1,
      "message": "Added comment to note why we track whether a transform was updated.\n\nI talked with flackr@ about OPACITY/FILTER cases and we believe the fields mutated don\u0027t require any add\u0027l propagation that warrants UDP.\n\nSo I think the answer to my question is both (1) and (2) -- we do intentionally write logic to micro-manage property tree nodes and only set bits to recompute what/when needed, but we strive to uphold (2) and not get things wrong in our micro-management. The tree state should be the same were it to be re-computed fully vs. what we do in our micro-mutations.",
      "parentUuid": "36d618e9_eccc36ee",
      "range": {
        "startLine": 1747,
        "startChar": 12,
        "endLine": 1747,
        "endChar": 29
      },
      "revId": "90d00c51e95224f38e8dd50e74b538204983eaee",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5e7edbbe_f961c694",
        "filename": "cc/trees/property_tree.cc",
        "patchSetId": 2
      },
      "lineNbr": 1750,
      "author": {
        "id": 1115895
      },
      "writtenOn": "2017-05-24T19:05:02Z",
      "side": 1,
      "message": "Just for my own knowledge, why do we only check for node existence some of the time? It seems like this should always be important?",
      "revId": "90d00c51e95224f38e8dd50e74b538204983eaee",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2a3a2d64_e9a70fa7",
        "filename": "cc/trees/property_tree.cc",
        "patchSetId": 2
      },
      "lineNbr": 1750,
      "author": {
        "id": 1108704
      },
      "writtenOn": "2017-05-24T21:37:52Z",
      "side": 1,
      "message": "I have vague memory of trying this for impl but don\u0027t remember why, possibly unittests?",
      "parentUuid": "5e7edbbe_f961c694",
      "revId": "90d00c51e95224f38e8dd50e74b538204983eaee",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4db1fa3f_6d155fae",
        "filename": "cc/trees/property_tree.cc",
        "patchSetId": 2
      },
      "lineNbr": 1750,
      "author": {
        "id": 1128438
      },
      "writtenOn": "2017-05-24T22:20:41Z",
      "side": 1,
      "message": "I did see some test failures when I did this all the time. I\u0027ll look into and follow up.",
      "parentUuid": "2a3a2d64_e9a70fa7",
      "revId": "90d00c51e95224f38e8dd50e74b538204983eaee",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "67a7eefa_375cc58d",
        "filename": "cc/trees/property_tree.cc",
        "patchSetId": 2
      },
      "lineNbr": 1750,
      "author": {
        "id": 1128438
      },
      "writtenOn": "2017-05-25T21:12:29Z",
      "side": 1,
      "message": "If we DCHECK from LayerTreeHostImpl we see test failures below. I claim that this patch strictly improves the code base, and we could further improve through exploring/fixing this separately. Added comment.\n\n9 tests crashed:\n    LayerTreeHostCommonTest.AnimationsForRenderSurfaceHierarchy (../../cc/trees/layer_tree_host_common_unittest.cc:2009)\n    LayerTreeHostCommonTest.DrawPropertyScales (../../cc/trees/layer_tree_host_common_unittest.cc:7883)\n    LayerTreeHostCommonTest.MaximumAnimationScaleFactor (../../cc/trees/layer_tree_host_common_unittest.cc:7404)\n    LayerTreeHostCommonTest/LCDTextTest.CanUseLCDTextWithAnimationContentsOpaque/0 (../../cc/trees/layer_tree_host_common_unittest.cc:4591)\n    LayerTreeHostCommonTest/LCDTextTest.CanUseLCDTextWithAnimationContentsOpaque/2 (../../cc/trees/layer_tree_host_common_unittest.cc:4591)\n    LayerTreeHostCommonTest/LCDTextTest.CanUseLCDTextWithAnimationContentsOpaque/4 (../../cc/trees/layer_tree_host_common_unittest.cc:4591)\n    LayerTreeHostCommonTest/LCDTextTest.CanUseLCDTextWithAnimationContentsOpaque/6 (../../cc/trees/layer_tree_host_common_unittest.cc:4591)\n    LayerTreeHostImplTest.PrepareToDrawSucceedsAndFails (../../cc/trees/layer_tree_host_impl_unittest.cc:3930)\n    LayerTreeHostImplTest.PrepareToDrawWhenDrawAndSwapFullViewportEveryFrame (../../cc/trees/layer_tree_host_impl_unittest.cc:4043)",
      "parentUuid": "4db1fa3f_6d155fae",
      "revId": "90d00c51e95224f38e8dd50e74b538204983eaee",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "de09c802_12f95fba",
        "filename": "cc/trees/property_tree.cc",
        "patchSetId": 2
      },
      "lineNbr": 1764,
      "author": {
        "id": 1128438
      },
      "writtenOn": "2017-05-25T21:12:29Z",
      "side": 1,
      "message": "flackr@ noted draw_property_utils::UpdatePropertyTrees doesn\u0027t check needs_update_draw_properties, so this case shouldn\u0027t need UDP. I am still wrapping head around when we need to update what, and what the overall cc per frame call stacks into these methods look like, so if I\u0027m missing something here let me know.",
      "range": {
        "startLine": 1764,
        "startChar": 12,
        "endLine": 1764,
        "endChar": 47
      },
      "revId": "90d00c51e95224f38e8dd50e74b538204983eaee",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}