{
  "comments": [
    {
      "key": {
        "uuid": "08373cf0_018722e4",
        "filename": "content/browser/service_worker/service_worker_provider_host.cc",
        "patchSetId": 8
      },
      "lineNbr": 562,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-11-10T06:52:23Z",
      "side": 1,
      "message": "I\u0027m a bit confused by this comment. We should always strive to keep our branches self-consistent, nor should side-by-side installs be sending IPCs between each other. If this is aiming to defend against bad values from the renderer, we should move it to where the IPC is initially received in the renderer.",
      "range": {
        "startLine": 559,
        "startChar": 0,
        "endLine": 562,
        "endChar": 17
      },
      "revId": "afe10a73f6e25352890cc6b22fe6c775af1d5e34",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a193d92b_554a5ab7",
        "filename": "content/browser/service_worker/service_worker_provider_host.cc",
        "patchSetId": 8
      },
      "lineNbr": 562,
      "author": {
        "id": 1223459
      },
      "writtenOn": "2017-11-10T07:15:17Z",
      "side": 1,
      "message": "Thanks, this was moved from ServiceWorkerContainer::CountFeature.  And the original background is https://bugs.chromium.org/p/chromium/issues/detail?id\u003d758419.\nDo you think we should move it back to ServiceWorkerContainer::CountFeature?",
      "parentUuid": "08373cf0_018722e4",
      "range": {
        "startLine": 559,
        "startChar": 0,
        "endLine": 562,
        "endChar": 17
      },
      "revId": "afe10a73f6e25352890cc6b22fe6c775af1d5e34",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c17b84e1_f743927d",
        "filename": "content/browser/service_worker/service_worker_provider_host.cc",
        "patchSetId": 8
      },
      "lineNbr": 562,
      "author": {
        "id": 1000128
      },
      "writtenOn": "2017-11-13T04:05:57Z",
      "side": 1,
      "message": "[+nhiroki] Our original fix was probably not right: we should have stopped the browser from reading in the invalid values from disk instead of letting it send them to the renderer and have the renderer ignore them in ServiceWorkerContainer::CountFeature(). So now we have a bit of confusion.\n\nThe renderer should never be sending us an invalid value. What I think we should do is:\n\n1) [browser] ServiceWorkerStorage::GetOrCreateRegistration() or ServiceWorkerVersion::set_used_features() should ignore invalid values (from disk).\n2) [renderer] Then ServiceWorkerContainer::CountFeature can trust all values sent by the browser process without verification. \n3) [browser] ServiceWorkerDispatcherHost::OnCountFeature should bad-message-received if the renderer sends it an invalid value.",
      "parentUuid": "a193d92b_554a5ab7",
      "range": {
        "startLine": 559,
        "startChar": 0,
        "endLine": 562,
        "endChar": 17
      },
      "revId": "afe10a73f6e25352890cc6b22fe6c775af1d5e34",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b09382b2_831d6bfa",
        "filename": "content/browser/service_worker/service_worker_provider_host.cc",
        "patchSetId": 8
      },
      "lineNbr": 562,
      "author": {
        "id": 1001472
      },
      "writtenOn": "2017-11-13T04:12:05Z",
      "side": 1,
      "message": "+1, this comment really confused me as well, we should check this only at the place where we read things out from the persisted values.",
      "parentUuid": "c17b84e1_f743927d",
      "range": {
        "startLine": 559,
        "startChar": 0,
        "endLine": 562,
        "endChar": 17
      },
      "revId": "afe10a73f6e25352890cc6b22fe6c775af1d5e34",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7607732b_8383169b",
        "filename": "content/browser/service_worker/service_worker_provider_host.cc",
        "patchSetId": 8
      },
      "lineNbr": 562,
      "author": {
        "id": 1115976
      },
      "writtenOn": "2017-11-13T08:15:55Z",
      "side": 1,
      "message": "SGTM. Thank you for taking a look at this.",
      "parentUuid": "b09382b2_831d6bfa",
      "range": {
        "startLine": 559,
        "startChar": 0,
        "endLine": 562,
        "endChar": 17
      },
      "revId": "afe10a73f6e25352890cc6b22fe6c775af1d5e34",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "24297108_7181fe3b",
        "filename": "content/browser/service_worker/service_worker_provider_host.cc",
        "patchSetId": 8
      },
      "lineNbr": 562,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-11-14T08:03:02Z",
      "side": 1,
      "message": "One thing that I\u0027m not sure about here: it seems like this scenario can only happen from a Chrome downgrade right? For session state, we just throw away the data completely in that case. Maybe we should have a more generic mechanism for that rather than relying on individual features to catch this...\n\n(I suspect that in general, profile downgrade is simply not feasible.)",
      "parentUuid": "7607732b_8383169b",
      "range": {
        "startLine": 559,
        "startChar": 0,
        "endLine": 562,
        "endChar": 17
      },
      "revId": "afe10a73f6e25352890cc6b22fe6c775af1d5e34",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "943620c3_8bf4ea02",
        "filename": "content/browser/service_worker/service_worker_provider_host.cc",
        "patchSetId": 8
      },
      "lineNbr": 562,
      "author": {
        "id": 1000128
      },
      "writtenOn": "2017-11-14T08:11:34Z",
      "side": 1,
      "message": "That\u0027s probably right that it\u0027d be better to have a generic mechanism to detect profile downgrade but it seems like it doesn\u0027t exist yet.\n\nWe also originally imagined the following scenario:\n1) Chrome 63.0.5555.0 ships ShinyFeature which is feature #1234.\n2) Uh-oh, Chrome 63.0.6666.0 decides to unship ShinyFeature by reverting, and now feature #1234 is past the number of features.\n3) Chrome 63.0.6666.0 has to do deal with feature #1234 which is out of range.\n\nBut now I see step 2) should have not changed the number of features when unshipping.\n\nAnyway, profile downgrade apparently happens frequently, we got several reports for https://bugs.chromium.org/p/chromium/issues/detail?id\u003d758419. I think it\u0027s because people are running Stable/Beta/Dev on the same profile directory?",
      "parentUuid": "24297108_7181fe3b",
      "range": {
        "startLine": 559,
        "startChar": 0,
        "endLine": 562,
        "endChar": 17
      },
      "revId": "afe10a73f6e25352890cc6b22fe6c775af1d5e34",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}