{
  "comments": [
    {
      "key": {
        "uuid": "88524604_4f5f9f3d",
        "filename": "content/browser/service_worker/service_worker_provider_host.cc",
        "patchSetId": 3
      },
      "lineNbr": 857,
      "author": {
        "id": 1000128
      },
      "writtenOn": "2017-09-07T05:20:59Z",
      "side": 1,
      "message": "It seems we could save some lines of code by just not running the callback here, since the renderer ignores it anyway?",
      "revId": "7e8f08e02613c1feb5f07566472416e990242e2f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "00af6106_c692f0c0",
        "filename": "content/browser/service_worker/service_worker_provider_host.cc",
        "patchSetId": 3
      },
      "lineNbr": 857,
      "author": {
        "id": 1161621
      },
      "writtenOn": "2017-09-07T06:03:32Z",
      "side": 1,
      "message": "There are 2 reasons to run |callback| here:\n  1. Mojo forces us to run it for whatever cases, except the case that the mojo connection has broken.\n  2. Running |callback| here enables renderer side release the corresponding pending callback there.",
      "parentUuid": "88524604_4f5f9f3d",
      "revId": "7e8f08e02613c1feb5f07566472416e990242e2f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "64e6534f_d8ee93de",
        "filename": "content/browser/service_worker/service_worker_provider_host.cc",
        "patchSetId": 3
      },
      "lineNbr": 857,
      "author": {
        "id": 1000128
      },
      "writtenOn": "2017-09-07T06:29:11Z",
      "side": 1,
      "message": "For reason (1), would it be necessary and sufficient to run the callback in the dtor of SWProviderHost? As written, it seems there could be times we get destructed before calling the callback. (But yea, I agree we\u0027ll need an error param).\n\nFor reason (2), I\u0027m not sure we need to worry so much about promptly calling the callback because the ServiceWorkerContainer just has the lifetime of a Document and it should eventually get cleaned up. We\u0027re already in a weird state here: if there\u0027s no dispatcher the process is already dead, and if context isn\u0027t alive the browser is shutting down or the service worker db got corrupted. Seems like we can just let Blink clean itself up when the Document is closed... it\u0027s simpler than trying hard in these multi-line statements here and below.",
      "parentUuid": "00af6106_c692f0c0",
      "revId": "7e8f08e02613c1feb5f07566472416e990242e2f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b61187a5_61a66a08",
        "filename": "content/browser/service_worker/service_worker_provider_host.cc",
        "patchSetId": 3
      },
      "lineNbr": 1211,
      "author": {
        "id": 1000128
      },
      "writtenOn": "2017-09-07T05:20:59Z",
      "side": 1,
      "message": "ditto, should we just ignore this?",
      "revId": "7e8f08e02613c1feb5f07566472416e990242e2f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ff29ea87_2b41047f",
        "filename": "content/browser/service_worker/service_worker_provider_host.h",
        "patchSetId": 3
      },
      "lineNbr": 344,
      "author": {
        "id": 1000128
      },
      "writtenOn": "2017-09-07T05:20:59Z",
      "side": 1,
      "message": "great! since now the struct is just a |callback|, we could remove the struct and use |callback| directly everywhere?",
      "revId": "7e8f08e02613c1feb5f07566472416e990242e2f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "45c79027_fdb91aab",
        "filename": "content/browser/service_worker/service_worker_provider_host.h",
        "patchSetId": 3
      },
      "lineNbr": 344,
      "author": {
        "id": 1161621
      },
      "writtenOn": "2017-09-07T06:03:32Z",
      "side": 1,
      "message": "If we just use |callback| directly, the condition \u0027if (!callback)\u0027 will have two possible cases:\n  1. There is not any |callback| ever set at all.\nor\n  2. The |callback| has been set but has already run.\n\nBut, our code logic needs to differentiate above 2 cases, we must ensure |callback| to be set only once, and after that we must reject all other getRegistrationForReady requests. The logic is inside ServiceWorkerProviderHost::IsValidGetRegistrationForReadyMessage().",
      "parentUuid": "ff29ea87_2b41047f",
      "revId": "7e8f08e02613c1feb5f07566472416e990242e2f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "636bf2e3_c0d5cfb0",
        "filename": "content/browser/service_worker/service_worker_provider_host.h",
        "patchSetId": 3
      },
      "lineNbr": 344,
      "author": {
        "id": 1000128
      },
      "writtenOn": "2017-09-07T06:29:11Z",
      "side": 1,
      "message": "Right, and we are tracking these states using std::unique_ptr\u003cOneShotCallback\u003e one_shot_callback_. When one_shot_callback_.is_null(), we are in (1). When one_shot_callback_-\u003ecallback.is_null(), we are in (2). It seems we can just do this using std::unique_ptr\u003cOnceCallback\u003e callback_. When callback_.is_null(), we are in (1). When callback_-\u003ecallback.is_null(), we are in (2). No?",
      "parentUuid": "45c79027_fdb91aab",
      "revId": "7e8f08e02613c1feb5f07566472416e990242e2f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6763b48d_ee0c8cb7",
        "filename": "content/child/service_worker/web_service_worker_provider_impl.cc",
        "patchSetId": 3
      },
      "lineNbr": 324,
      "author": {
        "id": 1000128
      },
      "writtenOn": "2017-09-07T05:20:59Z",
      "side": 1,
      "message": "more succinctly: \"We reach here only if the service worker system is aborting. But since ServiceWorkerContainer#ready should never reject (https://w3c.github.io/ServiceWorker/#navigator-service-worker-ready), just do nothing.\"\n\nBut this is making me feel like the browser process just shouldn\u0027t send this message? Then the callback doesn\u0027t need |error| or |error_msg| params.",
      "revId": "7e8f08e02613c1feb5f07566472416e990242e2f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "25a3bbff_849eaafa",
        "filename": "content/child/service_worker/web_service_worker_provider_impl.cc",
        "patchSetId": 3
      },
      "lineNbr": 324,
      "author": {
        "id": 1161621
      },
      "writtenOn": "2017-09-07T06:03:32Z",
      "side": 1,
      "message": "Yeah it\u0027s true that there is not any legacy IPC being sent to notify such an error case before, but it just leaves the callback added here https://cs.chromium.org/chromium/src/content/child/service_worker/service_worker_dispatcher.cc?rcl\u003da34790c47ddf793fb011ceba391abb4b405806fc\u0026l\u003d136 to be pending for ever.\n\nAck about the clearer comment suggestion, will change later.",
      "parentUuid": "6763b48d_ee0c8cb7",
      "revId": "7e8f08e02613c1feb5f07566472416e990242e2f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}