{
  "comments": [
    {
      "key": {
        "uuid": "d23d9742_aed0f8aa",
        "filename": "/COMMIT_MSG",
        "patchSetId": 11
      },
      "lineNbr": 12,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-08-08T00:51:18Z",
      "side": 1,
      "message": "I\u0027m curious, which part of the new approach prevents this inheritance?",
      "revId": "c28ea08b38e46e9f42d141316522fc07285a70fb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4202f83f_3a055330",
        "filename": "/COMMIT_MSG",
        "patchSetId": 11
      },
      "lineNbr": 12,
      "author": {
        "id": 1211509
      },
      "writtenOn": "2017-08-08T10:46:07Z",
      "side": 1,
      "message": "The existing code in Blink enumerates the schemes which inherit a policy from their parent: https://cs.chromium.org/chromium/src/third_party/WebKit/Source/core/dom/Document.cpp?rcl\u003d2dab99eb614d76c0446b46538515f13a77319408\u0026l\u003d5590.",
      "parentUuid": "d23d9742_aed0f8aa",
      "revId": "c28ea08b38e46e9f42d141316522fc07285a70fb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9ca2c25d_7208f0fd",
        "filename": "chrome/browser/chrome_navigation_browsertest.cc",
        "patchSetId": 11
      },
      "lineNbr": 451,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-08-08T00:51:18Z",
      "side": 1,
      "message": "Is there a reason these tests live in the chrome/ layer?  Most of the implementation seems to be within content.",
      "revId": "c28ea08b38e46e9f42d141316522fc07285a70fb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f2bd52c8_c7cf2d53",
        "filename": "chrome/browser/chrome_navigation_browsertest.cc",
        "patchSetId": 11
      },
      "lineNbr": 451,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-08-08T22:46:30Z",
      "side": 1,
      "message": "Yes, content_browsertests don\u0027t appear to actually load full error pages, but rather leave the contents blank. When I tried the test below from content/, is_error() was false, and the location.href of the committed document was \"http://invalid.foo\" instead of chrome-error://chromewebdata/.  The url_is_unreachable in DidCommit was false (despite the correct 404 status code); I didn\u0027t dig much further into why, but maybe because of https://cs.chromium.org/chromium/src/content/renderer/render_frame_impl.cc?l\u003d2515\u0026rcl\u003d10820afc6a5b6462e5382ee518c74dcf763669be and/or https://cs.chromium.org/chromium/src/chrome/renderer/net/net_error_helper.cc?l\u003d226\u0026rcl\u003d10820afc6a5b6462e5382ee518c74dcf763669be being in chrome/.",
      "parentUuid": "9ca2c25d_7208f0fd",
      "revId": "c28ea08b38e46e9f42d141316522fc07285a70fb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8b8209b2_17f1fd39",
        "filename": "chrome/browser/chrome_navigation_browsertest.cc",
        "patchSetId": 11
      },
      "lineNbr": 451,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-08-08T23:34:02Z",
      "side": 1,
      "message": "Ah, thanks.  Maybe it\u0027s worth mentioning in the test comment that it\u0027s here because error pages are only fully defined in chrome/.",
      "parentUuid": "f2bd52c8_c7cf2d53",
      "revId": "c28ea08b38e46e9f42d141316522fc07285a70fb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b5c48f83_20c37307",
        "filename": "chrome/browser/chrome_navigation_browsertest.cc",
        "patchSetId": 11
      },
      "lineNbr": 482,
      "author": {
        "id": 1001500
      },
      "writtenOn": "2017-08-07T21:59:21Z",
      "side": 1,
      "message": "Do we need to explicitly wrap these in domAutomationController.send() calls? Most content/ tests don\u0027t, so I wonder if it is just syntax sugar we have in content/ that helps eliminate it.",
      "range": {
        "startLine": 482,
        "startChar": 19,
        "endLine": 482,
        "endChar": 47
      },
      "revId": "c28ea08b38e46e9f42d141316522fc07285a70fb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2b3a825d_5735d675",
        "filename": "chrome/browser/chrome_navigation_browsertest.cc",
        "patchSetId": 11
      },
      "lineNbr": 482,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-08-08T22:46:30Z",
      "side": 1,
      "message": "I thought ExecuteScript doesn\u0027t require this, but ExecuteScriptAndExtract* do: https://cs.chromium.org/chromium/src/content/public/test/browser_test_utils.h?l\u003d245\u0026rcl\u003df552ae48cd2725ebcb2b5811e74699e376b32bab\nAFAICT the tests in content/ that extract return values also use the domAutomationController.send right now; if there\u0027s a way to get away without it, I\u0027d like to know. :)  I think that\u0027s something that Nick is simplifying in his ExecuteScript refactor though?",
      "parentUuid": "b5c48f83_20c37307",
      "range": {
        "startLine": 482,
        "startChar": 19,
        "endLine": 482,
        "endChar": 47
      },
      "revId": "c28ea08b38e46e9f42d141316522fc07285a70fb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d08f266c_2c63bced",
        "filename": "chrome/browser/chrome_navigation_browsertest.cc",
        "patchSetId": 11
      },
      "lineNbr": 521,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-08-04T23:53:59Z",
      "side": 1,
      "message": "This whole scenario turned out not to be a problem after all -- the Android Webview tests were failing due to URL mismatch in DidFinishLoad and not due to this.  But I had the test already written, so thought I might as well keep it to increase test coverage for it beyond Android Webview  as we keep refactoring error pages.  This logic currently lives in Blink in RenderFrameImpl::RunScriptsAtDocumentReady [1], and ideally the detection should move to the browser process if we still even care about it, but it\u0027s not something I wanted to do in this CL.\n\n[1] https://cs.chromium.org/chromium/src/content/renderer/render_frame_impl.cc?l\u003d3964\u0026rcl\u003dfbc1f06772af27fab08b74064b914cbdc5fc7418",
      "revId": "c28ea08b38e46e9f42d141316522fc07285a70fb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1477ba8f_27651ae5",
        "filename": "chrome/browser/chrome_navigation_browsertest.cc",
        "patchSetId": 11
      },
      "lineNbr": 521,
      "author": {
        "id": 1001500
      },
      "writtenOn": "2017-08-07T21:59:21Z",
      "side": 1,
      "message": "Thanks for the test. However, it doesn\u0027t seem to check that the content of the error page is indeed there. How does it fail if something doesn\u0027t work correctly?",
      "parentUuid": "d08f266c_2c63bced",
      "revId": "c28ea08b38e46e9f42d141316522fc07285a70fb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b0190786_b0fba8f4",
        "filename": "chrome/browser/chrome_navigation_browsertest.cc",
        "patchSetId": 11
      },
      "lineNbr": 521,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-08-08T22:46:30Z",
      "side": 1,
      "message": "Yes, that\u0027s a fair point.  If the error page doesn\u0027t load, we won\u0027t get PAGE_TYPE_ERROR for the last committed entry\u0027s PageType, as well as last_navigation_succeeded(), but I agree it\u0027s worth also checking that the error page text actually showed up for this test.  One problem with checking it is that the text appears to be loaded asynchronously by scripts running on the error page after DidFinishLoad.  I was hesitant to add a polling check for it, but did it now, as I didn\u0027t see a better way.",
      "parentUuid": "1477ba8f_27651ae5",
      "revId": "c28ea08b38e46e9f42d141316522fc07285a70fb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3d3141ce_e599c4d3",
        "filename": "chrome/test/data/empty_with_404.html.mock-http-headers",
        "patchSetId": 11
      },
      "lineNbr": 2,
      "author": {
        "id": 1001500
      },
      "writtenOn": "2017-08-07T21:59:21Z",
      "side": 1,
      "message": "Should this also include Content-Length: 0?",
      "revId": "c28ea08b38e46e9f42d141316522fc07285a70fb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "96940dd1_95c0b71d",
        "filename": "chrome/test/data/empty_with_404.html.mock-http-headers",
        "patchSetId": 11
      },
      "lineNbr": 2,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-08-08T22:46:30Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3d3141ce_e599c4d3",
      "revId": "c28ea08b38e46e9f42d141316522fc07285a70fb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "12c32a1e_9a3493c5",
        "filename": "content/browser/child_process_security_policy_impl.cc",
        "patchSetId": 11
      },
      "lineNbr": 681,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-08-04T23:53:59Z",
      "side": 1,
      "message": "This drops redirects to the error page URL for PlzNavigate (this is checked by NavigationRequest::OnRequestRedirected).  For non-PlzNavigate, sadly, this isn\u0027t enough, as that path goes through ResourceLoader::OnReceivedRedirect, which checks CanRequestURL instead of CanRedirectToURL.  We could make it work on the old path by checking CanRedirectToURL instead of/in addition to CanRequestURL, but I figured it wasn\u0027t worth the effort, given that PlzNavigate is ready to ship.",
      "revId": "c28ea08b38e46e9f42d141316522fc07285a70fb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3707da15_23bbeef1",
        "filename": "content/browser/child_process_security_policy_impl.cc",
        "patchSetId": 11
      },
      "lineNbr": 681,
      "author": {
        "id": 1211509
      },
      "writtenOn": "2017-08-07T13:40:19Z",
      "side": 1,
      "message": "SGTM, but I\u0027ll defer to folks who own that code for their opinion. It will be lovely when all the non-PlzNavigate code is ripped out of the codebase to avoid this kind of confusion.",
      "parentUuid": "12c32a1e_9a3493c5",
      "revId": "c28ea08b38e46e9f42d141316522fc07285a70fb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "19c19ce5_0135a8d3",
        "filename": "content/browser/child_process_security_policy_unittest.cc",
        "patchSetId": 11
      },
      "lineNbr": 211,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-08-04T23:53:59Z",
      "side": 1,
      "message": "We get this for free since we don\u0027t grant special access to the error scheme or origin in CPSP.",
      "revId": "c28ea08b38e46e9f42d141316522fc07285a70fb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dbc763de_ace91093",
        "filename": "content/browser/child_process_security_policy_unittest.cc",
        "patchSetId": 11
      },
      "lineNbr": 211,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-08-08T00:51:18Z",
      "side": 1,
      "message": "I thought that we did end up committing the error URL in normal processes, right?  Won\u0027t that be a problem if CanCommitURL returns false for it?",
      "parentUuid": "19c19ce5_0135a8d3",
      "revId": "c28ea08b38e46e9f42d141316522fc07285a70fb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ad3df566_99ed55f0",
        "filename": "content/browser/child_process_security_policy_unittest.cc",
        "patchSetId": 11
      },
      "lineNbr": 211,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-08-08T22:46:30Z",
      "side": 1,
      "message": "I think today the committed URL (params.url in DidCommit) is the URL of the page that failed to load, not kUnreachableWebDataURL, so that should be fine.  This check will only matter if someone explicitly tries to navigate to kUnreachableWebDataURL, like in one of my tests.  I think params.base_url, as well as one of the redirect entries has kUnreachableWebDataURL though, and some places check that, e.g. [1].  Interestingly, the URL we pass to DidStartProvisionalLoad and DidFinishLoad are indeed kUnreachableWebDataURL when we are loading the error page.  It\u0027s a mess :/, and we will probably need to revisit this if we want to make error pages commit with the new error scheme, rather than with the URL that failed to load. \n\n[1] https://cs.chromium.org/chromium/src/content/browser/frame_host/navigation_handle_impl.cc?l\u003d787\u0026rcl\u003dafc7dd011216d97d717336c698d0bac4b6802a15",
      "parentUuid": "dbc763de_ace91093",
      "revId": "c28ea08b38e46e9f42d141316522fc07285a70fb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "62451c5e_4ca76db2",
        "filename": "content/browser/child_process_security_policy_unittest.cc",
        "patchSetId": 11
      },
      "lineNbr": 211,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-08-08T23:34:02Z",
      "side": 1,
      "message": "I see.  Ok, we can revisit later if it becomes a problem.",
      "parentUuid": "ad3df566_99ed55f0",
      "revId": "c28ea08b38e46e9f42d141316522fc07285a70fb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ecefeb96_bb6595e0",
        "filename": "content/browser/frame_host/render_frame_host_impl.cc",
        "patchSetId": 11
      },
      "lineNbr": 2289,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-08-04T23:53:59Z",
      "side": 1,
      "message": "It\u0027d be nice to make CanRequestURL return false for the error page URL, and it was what I tried initially to cancel the navigation if a renderer sets \"location\u003d\u0027chrome-error://chromewebdata\u0027\",  but that didn\u0027t work out.\n\nThe reason is that this causes RPHI::FilterURL to rewrite the error URL to \"about:blank\" in a lot of places (DidStart, DidCommit in the redirect chain, DidFinishLoad), and it turned out that some of those places actually care about the error URL being preserved.  For example, Android Webview monitors the URL in WCO::DidFinishLoad and has explicit checks against the error page URL for it [1].\n\nI wanted to do this as it just seems saner to not let renderers directly navigate to chrome-error://, plus not doing this causes the external protocol handler to come up.  For now, I\u0027ve replaced this with a narrowed check here in OnBeginNavigation, which works for PlzNavigate.  If we wanted to support the same without PlzNavigate, we could modify ResourceDispatcherHostImpl::ShouldServiceRequest to drop it, but again I\u0027m not sure it\u0027s worth the trouble at this point.\n\n[1] See https://cs.chromium.org/chromium/src/android_webview/browser/aw_contents_statics.cc?l\u003d67\u0026rcl\u003deb478a08ad6f0944e1ddf17e25948e6686abb300 and \nhttps://cs.chromium.org/chromium/src/android_webview/java/src/org/chromium/android_webview/AwWebContentsObserver.java?l\u003d44\u0026rcl\u003deb478a08ad6f0944e1ddf17e25948e6686abb300",
      "revId": "c28ea08b38e46e9f42d141316522fc07285a70fb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "49682e23_2591fdf7",
        "filename": "content/browser/frame_host/render_frame_host_impl.cc",
        "patchSetId": 11
      },
      "lineNbr": 2289,
      "author": {
        "id": 1001500
      },
      "writtenOn": "2017-08-07T21:59:21Z",
      "side": 1,
      "message": "Should we also consider this a bad message and terminate the renderer process?",
      "parentUuid": "ecefeb96_bb6595e0",
      "revId": "c28ea08b38e46e9f42d141316522fc07285a70fb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ae08cc93_3dcd9b2c",
        "filename": "content/browser/frame_host/render_frame_host_impl.cc",
        "patchSetId": 11
      },
      "lineNbr": 2289,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-08-08T22:46:30Z",
      "side": 1,
      "message": "I considered this - I think in the common case though, this is probably not a sign of an exploited renderer, but rather someone typing in \"location\u003d\u0027chrome-error://chromewebdata\u0027\" in DevTools, after finding out that this is what \"location.href\" returns on an error page.  I didn\u0027t think this was worth killing the process for, but if you feel it\u0027s worth it, I can add it.",
      "parentUuid": "49682e23_2591fdf7",
      "revId": "c28ea08b38e46e9f42d141316522fc07285a70fb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4fde9562_9b52591e",
        "filename": "content/browser/frame_host/render_frame_host_impl.cc",
        "patchSetId": 11
      },
      "lineNbr": 2289,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-08-08T23:34:02Z",
      "side": 1,
      "message": "Yeah, given that the renderer doesn\u0027t block pages from doing it, we probably shouldn\u0027t kill the renderer if it happens.",
      "parentUuid": "ae08cc93_3dcd9b2c",
      "revId": "c28ea08b38e46e9f42d141316522fc07285a70fb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7632ab6e_69ae2c9e",
        "filename": "content/common/url_schemes.cc",
        "patchSetId": 11
      },
      "lineNbr": 70,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-08-08T00:51:18Z",
      "side": 1,
      "message": "Does this scheme bypass CSP for some other reason?",
      "revId": "c28ea08b38e46e9f42d141316522fc07285a70fb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e096314f_a0dc27d3",
        "filename": "content/common/url_schemes.cc",
        "patchSetId": 11
      },
      "lineNbr": 70,
      "author": {
        "id": 1211509
      },
      "writtenOn": "2017-08-08T10:46:07Z",
      "side": 1,
      "message": "That\u0027s a good question. I wonder what our current behavior is for `frame-src \u0027none\u0027` when committing the existing error page? It\u0027s probably not correct. :) I\u0027m a little wary of adding another scheme to this list, as I think it\u0027s already a bit less restrictive than it should be.\n\nRather than poke at it in this patch, I\u0027d suggest adding a `TODO(mkwst)`, and I\u0027ll try to put together reasonable behavior.",
      "parentUuid": "7632ab6e_69ae2c9e",
      "revId": "c28ea08b38e46e9f42d141316522fc07285a70fb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "91ff8d9c_ace3d212",
        "filename": "content/common/url_schemes.cc",
        "patchSetId": 11
      },
      "lineNbr": 70,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-08-08T22:46:30Z",
      "side": 1,
      "message": "frame-src: \u0027none\u0027 makes an error page in a subframe not load without PlzNavigate, but it appears to load with PlzNavigate, whether or not chrome-error:// is included in csp_bypassing_schemes.  Though with PlzNav, the error page contents is \"Requests to the server have been blocked by an extension,\" which is probably not right. :/\n  \nI followed Mike\u0027s suggestion and added a TODO to deal with this in a followup.",
      "parentUuid": "e096314f_a0dc27d3",
      "revId": "c28ea08b38e46e9f42d141316522fc07285a70fb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1a906c16_535e7487",
        "filename": "content/common/url_schemes.cc",
        "patchSetId": 11
      },
      "lineNbr": 70,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-08-08T23:34:02Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "91ff8d9c_ace3d212",
      "revId": "c28ea08b38e46e9f42d141316522fc07285a70fb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5d15e68f_4d6de35f",
        "filename": "content/public/common/url_constants.cc",
        "patchSetId": 11
      },
      "lineNbr": 64,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-08-04T23:53:59Z",
      "side": 1,
      "message": "Originally, I had this without the trailing slash, which cause issues with fragment navigations on the error page.  This is apparently a thing and exercised by ErrorPageAutoReloadTest.IgnoresSameDocumentNavigation and DNSError_DoReloadAfterSameDocumentNavigation.  Having the trailing slash allows the fragment navigation to happen (apparently due to intricacies deep in the URL parsing code), which I don\u0027t think is that bad if we ever want to add more structure to chrome-error URLs.  It also makes more sense anyway.",
      "revId": "c28ea08b38e46e9f42d141316522fc07285a70fb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b35e7338_43d89a56",
        "filename": "content/public/common/url_constants.cc",
        "patchSetId": 11
      },
      "lineNbr": 64,
      "author": {
        "id": 1211509
      },
      "writtenOn": "2017-08-07T13:40:19Z",
      "side": 1,
      "message": "This seems fine to me. We shouldn\u0027t rely on having the same behavior as `data:` here, because `data:`\u0027s fragment navigation behavior is absurd. :)",
      "parentUuid": "5d15e68f_4d6de35f",
      "revId": "c28ea08b38e46e9f42d141316522fc07285a70fb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "42172992_179f95d7",
        "filename": "content/public/common/url_constants.h",
        "patchSetId": 11
      },
      "lineNbr": 21,
      "author": {
        "id": 1001500
      },
      "writtenOn": "2017-08-07T21:59:21Z",
      "side": 1,
      "message": "nit: kChromeErrorScheme?",
      "revId": "c28ea08b38e46e9f42d141316522fc07285a70fb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "24ee2be5_0f65409d",
        "filename": "content/public/common/url_constants.h",
        "patchSetId": 11
      },
      "lineNbr": 21,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-08-08T22:46:30Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "42172992_179f95d7",
      "revId": "c28ea08b38e46e9f42d141316522fc07285a70fb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}