{
  "comments": [
    {
      "key": {
        "uuid": "c12382fe_6cf16c67",
        "filename": "chrome/browser/chrome_content_browser_client.cc",
        "patchSetId": 27
      },
      "lineNbr": 1239,
      "author": {
        "id": 1142059
      },
      "writtenOn": "2017-12-04T20:35:50Z",
      "side": 1,
      "message": "perf nit: LinkDoctorBaseURL does a full GURL parse, would you mind inlining it in the if statement to avoid this work if the initiator is not unique?",
      "range": {
        "startLine": 1239,
        "startChar": 45,
        "endLine": 1239,
        "endChar": 62
      },
      "revId": "a51a9743f711302b0ef2d189516f6ddcc166b7eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4af88646_5bc0b147",
        "filename": "chrome/browser/chrome_content_browser_client.cc",
        "patchSetId": 27
      },
      "lineNbr": 1239,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-12-04T22:26:37Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c12382fe_6cf16c67",
      "range": {
        "startLine": 1239,
        "startChar": 45,
        "endLine": 1239,
        "endChar": 62
      },
      "revId": "a51a9743f711302b0ef2d189516f6ddcc166b7eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c083628f_365a371b",
        "filename": "content/browser/loader/cross_site_document_resource_handler.cc",
        "patchSetId": 27
      },
      "lineNbr": 71,
      "author": {
        "id": 1002169
      },
      "writtenOn": "2017-12-04T21:35:53Z",
      "side": 1,
      "message": "If there are downstream handlers that might defer during OnWillRead, then it seems like we might be in trouble here, since we\u0027re assuming that |buf| . I\u0027m not sure this happens in practice, since otherwise it\u0027s not clear how the ResourceLoader would be told of the final value of *buf after resuming (unless *buf points straight into ResourceLoader memory??!? \u003cinsert arthur lies-on-internet meme\u003e).\n\nIn other words: I have a gut worry that the state-machine complexity in the mime_sniffing_resource_handler is actually dictated by the handler API, and this handler is incorrect in those cases. I guess we\u0027ll find out?",
      "revId": "a51a9743f711302b0ef2d189516f6ddcc166b7eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a36bbb6c_01e78be1",
        "filename": "content/browser/loader/cross_site_document_resource_handler.cc",
        "patchSetId": 27
      },
      "lineNbr": 71,
      "author": {
        "id": 1142059
      },
      "writtenOn": "2017-12-04T22:00:58Z",
      "side": 1,
      "message": "*buf points into resource loader memory: https://cs.chromium.org/chromium/src/content/browser/loader/resource_loader.cc?rcl\u003d62fe5b7ce29d093f44c3a630517499e75b5959d3\u0026l\u003d695\n\nSo a ResourceHandler should be safe to deref it on resume. One thing to do would be to make this class a ResourceController and wait until Resume is called before executing this block.",
      "parentUuid": "c083628f_365a371b",
      "revId": "a51a9743f711302b0ef2d189516f6ddcc166b7eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "08c52eeb_0197fb19",
        "filename": "content/browser/loader/cross_site_document_resource_handler.cc",
        "patchSetId": 27
      },
      "lineNbr": 71,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-12-04T22:26:37Z",
      "side": 1,
      "message": "\u003e *buf points into resource loader memory: https://cs.chromium.org/chromium/src/content/browser/loader/resource_loader.cc?rcl\u003d62fe5b7ce29d093f44c3a630517499e75b5959d3\u0026l\u003d695\n\u003e \n\u003e So a ResourceHandler should be safe to deref it on resume. One thing to do would be to make this class a ResourceController and wait until Resume is called before executing this block.\n\nIs that something we should do now, or in a followup?  Would it be something like DetachableResourceHandler::Controller?",
      "parentUuid": "a36bbb6c_01e78be1",
      "revId": "a51a9743f711302b0ef2d189516f6ddcc166b7eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fd1baea2_68a25ee9",
        "filename": "content/browser/loader/cross_site_document_resource_handler.cc",
        "patchSetId": 27
      },
      "lineNbr": 71,
      "author": {
        "id": 1142059
      },
      "writtenOn": "2017-12-04T22:52:12Z",
      "side": 1,
      "message": "I would be most comfortable landing the Controller thing now, but since the feature is gated on isolated origins the risk is relatively low (at least we can turn it off in an emergency or something).\n\nI\u0027ll be honest, this code is very easy to get wrong and constantly trips me up, so I feel like \"better safe than sorry\" makes sense :)",
      "parentUuid": "08c52eeb_0197fb19",
      "revId": "a51a9743f711302b0ef2d189516f6ddcc166b7eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1e6d6e20_704b54ff",
        "filename": "content/browser/loader/cross_site_document_resource_handler.cc",
        "patchSetId": 27
      },
      "lineNbr": 71,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-12-04T23:00:13Z",
      "side": 1,
      "message": "\u003e I would be most comfortable landing the Controller thing now, but since the feature is gated on isolated origins the risk is relatively low (at least we can turn it off in an emergency or something).\n\u003e \n\u003e I\u0027ll be honest, this code is very easy to get wrong and constantly trips me up, so I feel like \"better safe than sorry\" makes sense :)\n\nIt\u0027s a good idea.  :)  I\u0027ve uploaded a first super rough draft of it to see if I understand your suggestion.  Is this in the right direction?",
      "parentUuid": "fd1baea2_68a25ee9",
      "revId": "a51a9743f711302b0ef2d189516f6ddcc166b7eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b24ba9f3_ba8704c1",
        "filename": "content/browser/loader/cross_site_document_resource_handler.cc",
        "patchSetId": 27
      },
      "lineNbr": 71,
      "author": {
        "id": 1142059
      },
      "writtenOn": "2017-12-04T23:07:59Z",
      "side": 1,
      "message": "Yes that\u0027s exactly what I had in mind.",
      "parentUuid": "1e6d6e20_704b54ff",
      "revId": "a51a9743f711302b0ef2d189516f6ddcc166b7eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "62261483_149557ca",
        "filename": "content/browser/loader/cross_site_document_resource_handler.cc",
        "patchSetId": 27
      },
      "lineNbr": 71,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-12-05T01:53:13Z",
      "side": 1,
      "message": "\u003e Yes that\u0027s exactly what I had in mind.\n\nGreat.  I\u0027ve cleaned it up and added unit tests for it.  (We pass the same set of scenarios in and make sure they work in the case OnWillRead is deferred.)",
      "parentUuid": "b24ba9f3_ba8704c1",
      "revId": "a51a9743f711302b0ef2d189516f6ddcc166b7eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fe54a0cf_194e2520",
        "filename": "content/browser/loader/cross_site_document_resource_handler.cc",
        "patchSetId": 27
      },
      "lineNbr": 98,
      "author": {
        "id": 1002169
      },
      "writtenOn": "2017-12-04T21:35:53Z",
      "side": 1,
      "message": "Is it possible to get here, and have blocked_read_completed_ be true? (e.g. due to an upstream resource handler that\u0027s also buffering?). If so it seems like this would sniff the second chunk, and potentially allow it, even though blocked_read_completed_ is true?",
      "revId": "a51a9743f711302b0ef2d189516f6ddcc166b7eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "20ccf287_20d831b0",
        "filename": "content/browser/loader/cross_site_document_resource_handler.cc",
        "patchSetId": 27
      },
      "lineNbr": 98,
      "author": {
        "id": 1142059
      },
      "writtenOn": "2017-12-04T22:00:58Z",
      "side": 1,
      "message": "I don\u0027t think it should be possible, but I\u0027m not 100% sure. I didn\u0027t think you could get e.g. 2 OnWillReads in a row without an OnReadCompleted for the first one.",
      "parentUuid": "fe54a0cf_194e2520",
      "revId": "a51a9743f711302b0ef2d189516f6ddcc166b7eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "74a357e7_13910d67",
        "filename": "content/browser/loader/cross_site_document_resource_handler.cc",
        "patchSetId": 27
      },
      "lineNbr": 98,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-12-04T22:26:37Z",
      "side": 1,
      "message": "\u003e I don\u0027t think it should be possible, but I\u0027m not 100% sure. I didn\u0027t think you could get e.g. 2 OnWillReads in a row without an OnReadCompleted for the first one.\n\nAdded a DCHECK(!blocked_read_completed_), so at least we\u0027ll know.",
      "parentUuid": "20ccf287_20d831b0",
      "revId": "a51a9743f711302b0ef2d189516f6ddcc166b7eb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}