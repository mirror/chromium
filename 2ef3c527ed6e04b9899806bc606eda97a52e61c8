{
  "comments": [
    {
      "key": {
        "uuid": "7e27967a_36a1e843",
        "filename": "third_party/WebKit/Source/bindings/templates/callback_function.cpp.tmpl",
        "patchSetId": 6
      },
      "lineNbr": 38,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2017-11-13T13:16:09Z",
      "side": 1,
      "message": "I\u0027m concerned about fixing the TODO... Won\u0027t it have a risk of producing a reference cycle?\n\nAlso what\u0027s the point of running a callback function on an already detached incumbent realm?",
      "revId": "2ef3c527ed6e04b9899806bc606eda97a52e61c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "88ae027f_d313a6ac",
        "filename": "third_party/WebKit/Source/bindings/templates/callback_function.cpp.tmpl",
        "patchSetId": 6
      },
      "lineNbr": 38,
      "author": {
        "id": 1002507
      },
      "writtenOn": "2017-11-13T14:02:57Z",
      "side": 1,
      "message": "\u003e I\u0027m concerned about fixing the TODO... Won\u0027t it have a risk of producing a reference cycle?\n\nReference cycles are expected and it\u0027s quite normal in web specs.  As we\u0027re willing to conform to the web specs, Blink needs to be able to handle reference cycles.\n\nI\u0027m not planning to fix this point before ScriptState gets Oilpanized.  Once everything is well organized, (I hope that) Blink will be able to hold a strong reference to the incumbent realm without causing a leak.\n\n\u003e Also what\u0027s the point of running a callback function on an already detached incumbent realm?\n\nI simply don\u0027t know which web spec prohibits running callback functions if the incumbent environment is detached.  Supposing that it\u0027s not prohibited by web specs, Blink should be able to run it.\n\nI\u0027d rather want a good reason when Blink is doing a different thing from web specs.  AFAIK, the specs don\u0027t prohibit it, and the incumbent realm is rarely used except for navigation, why do we better prohibit running callback functions if the incumbent environment is detached?",
      "parentUuid": "7e27967a_36a1e843",
      "revId": "2ef3c527ed6e04b9899806bc606eda97a52e61c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f5f86dc0_eab507d8",
        "filename": "third_party/WebKit/Source/bindings/templates/callback_function.cpp.tmpl",
        "patchSetId": 6
      },
      "lineNbr": 38,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2017-11-14T00:14:47Z",
      "side": 1,
      "message": "Blink should follow the spec. We can do this by oilpanizing ScriptState and supporting the wrapper tracing for v8::Context held by ScriptState.\n\n\u003e Also what\u0027s the point of running a callback function on an already detached incumbent realm?\n\nThis was a question to the spec :)",
      "parentUuid": "88ae027f_d313a6ac",
      "revId": "2ef3c527ed6e04b9899806bc606eda97a52e61c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b8d56ee1_3e23f852",
        "filename": "third_party/WebKit/Source/bindings/templates/callback_function.cpp.tmpl",
        "patchSetId": 6
      },
      "lineNbr": 38,
      "author": {
        "id": 1002507
      },
      "writtenOn": "2017-11-14T07:33:02Z",
      "side": 1,
      "message": "\u003e This was a question to the spec :)\n\nWe don\u0027t want to change the spec on this point, I think, because it\u0027s simply doesn\u0027t make much sense.\n\nFor example,\n\na) A callback function is registered to a user agent.  The callback function\u0027s realm is X, and the incumbent realm at that time is X, too.\nb) X is not detached, and the user agent invokes the callback function.\nc) The callback function invokes another function whose realm is Y that is detached.\n\nStep c) has nothing to do with HTML or Web IDL, it\u0027s purely ECMAScript things (a function invokes another function), and ECMAScript doesn\u0027t recognize a \"frame\" nor \"detach\".  There is no good way to prohibit step c).\n\nGiven that there is no way to prohibit running a function created in a certain realm, it\u0027s an imperfect solution to prohibit running a callback function when the incumbent realm is detached.  Such a solution will make 98.0%-working-code be 98.4%-working-code.  I don\u0027t think that the spec people are happy with such an imperfect solution.",
      "parentUuid": "f5f86dc0_eab507d8",
      "revId": "2ef3c527ed6e04b9899806bc606eda97a52e61c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b44c048c_ccd55403",
        "filename": "third_party/WebKit/Source/bindings/templates/callback_function.cpp.tmpl",
        "patchSetId": 6
      },
      "lineNbr": 39,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2017-11-13T13:16:09Z",
      "side": 1,
      "message": "Can we use ContextIsValid()?\n\nMaybe would it be better to make IsCallbackFunctionRunnable check both relevant ScriptState and incumbent ScriptState?",
      "revId": "2ef3c527ed6e04b9899806bc606eda97a52e61c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fa512a79_85a95c04",
        "filename": "third_party/WebKit/Source/bindings/templates/callback_function.cpp.tmpl",
        "patchSetId": 6
      },
      "lineNbr": 39,
      "author": {
        "id": 1002507
      },
      "writtenOn": "2017-11-13T14:02:57Z",
      "side": 1,
      "message": "\u003e Maybe would it be better to make IsCallbackFunctionRunnable check both relevant ScriptState and incumbent ScriptState?\n\nThat\u0027s what my first version was. ;)  And I changed my mind according to your review comment.  I now believe that it\u0027s the right direction to make the incumbent environment alive.",
      "parentUuid": "b44c048c_ccd55403",
      "revId": "2ef3c527ed6e04b9899806bc606eda97a52e61c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b8964b52_e51e90d3",
        "filename": "third_party/WebKit/Source/bindings/templates/callback_function.cpp.tmpl",
        "patchSetId": 6
      },
      "lineNbr": 39,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2017-11-14T00:14:47Z",
      "side": 1,
      "message": "Yeah, sorry about that. At that point I was thinking that we won\u0027t need to check IncumbentScriptState()-\u003eGetContext() before calling the callback. If we need to check it, it looks better to check it in IsCallbackFunctionRunnable().",
      "parentUuid": "fa512a79_85a95c04",
      "revId": "2ef3c527ed6e04b9899806bc606eda97a52e61c8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}