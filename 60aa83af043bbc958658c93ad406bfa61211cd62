{
  "comments": [
    {
      "key": {
        "uuid": "d9afd23e_611eccb4",
        "filename": "content/network/network_change_manager_client_impl.cc",
        "patchSetId": 2
      },
      "lineNbr": 10,
      "author": {
        "id": 1120845
      },
      "writtenOn": "2017-08-30T21:26:17Z",
      "side": 1,
      "message": "Presubmit doesn\u0027t like these two #include.\n\n\n      Illegal include: \"content/public/browser/browser_thread.h\"\n    Because of \"-content\" from content/network\u0027s include_rules. \\\n      Illegal include: \"content/public/browser/network_service_instance.h\"\n    Because of \"-content\" from content/network\u0027s include_rules. \\",
      "revId": "60aa83af043bbc958658c93ad406bfa61211cd62",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "467be9d9_1cd1247f",
        "filename": "content/network/network_change_manager_client_impl.cc",
        "patchSetId": 2
      },
      "lineNbr": 10,
      "author": {
        "id": 1001809
      },
      "writtenOn": "2017-08-31T17:21:51Z",
      "side": 1,
      "message": "Hmmm.  It\u0027s an interesting question as to whether NCMCI belongs in content/network or not.  If we think of content/network as becoming a component, it does--this is the client side of the component interface which will be compiled into the consumers of that interface.  If we think of it as becoming a service (which is the right model), I don\u0027t think NCNMI belongs here--services expose mojo interfaces, not C++ interfaces, and don\u0027t have very much code compiled into consumers.  But this code will be needed in all consumers.  \n\nMatt (or eventually John): Does the service directory model have a slot for \"code that belongs in the consumer of the service\"?\n\nHelen: I\u0027m not worried about including network_service_instance (if we decide to leave this code in content/network pending resolution of the discussion above), but I\u0027m inclined to remove browser_thread.h and replace it with a simple sequence checker (and a note in the header file about needing to use this on the thread on which it was created).  My rational is that the Mojo world is going to be much more abstract and less tied to global concepts, and there\u0027s no reason we might not create a process at some point that has nothing to do with the UI/IO/FILE/etc. distinctions we currently have in the browser process.",
      "parentUuid": "d9afd23e_611eccb4",
      "revId": "60aa83af043bbc958658c93ad406bfa61211cd62",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "81452274_e4148dcd",
        "filename": "content/network/network_change_manager_client_impl.cc",
        "patchSetId": 2
      },
      "lineNbr": 10,
      "author": {
        "id": 1115968
      },
      "writtenOn": "2017-09-12T20:25:41Z",
      "side": 1,
      "message": "If this depends on BrowserThread, it should be in content/public/browser, or components/.  I\u0027m not seeing a need to depend on BrowserThread here - presumably we\u0027ll want to use it in the renderer, too, and enable non-content-embedders to use it as well, neither of which can use BrowserThread.",
      "parentUuid": "467be9d9_1cd1247f",
      "revId": "60aa83af043bbc958658c93ad406bfa61211cd62",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bb0779cc_e1fd74a5",
        "filename": "content/network/network_change_manager_client_impl.h",
        "patchSetId": 2
      },
      "lineNbr": 20,
      "author": {
        "id": 1001809
      },
      "writtenOn": "2017-08-31T17:21:51Z",
      "side": 1,
      "message": "Comment describing usage before the class?  \n\nMore specifically: When I hit this class my first thought was \"Why does this exist?  The clients will just implement the NetworkChangeManagerClient interface to get notifications.\"  Which, yes, means I wasn\u0027t remembering the design doc, but many people who read this in the future won\u0027t have read your design doc :-}.",
      "range": {
        "startLine": 20,
        "startChar": 21,
        "endLine": 20,
        "endChar": 51
      },
      "revId": "60aa83af043bbc958658c93ad406bfa61211cd62",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8109881b_1a703251",
        "filename": "content/network/network_change_manager_client_impl.h",
        "patchSetId": 2
      },
      "lineNbr": 79,
      "author": {
        "id": 1001809
      },
      "writtenOn": "2017-08-31T17:21:51Z",
      "side": 1,
      "message": "I\u0027d prefer the pattern where you could do a static Get() method to get a pointer to the global, and then these methods would be non-static methods on that global.",
      "range": {
        "startLine": 79,
        "startChar": 16,
        "endLine": 79,
        "endChar": 30
      },
      "revId": "60aa83af043bbc958658c93ad406bfa61211cd62",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e437ec7a_9998cc89",
        "filename": "content/network/network_change_manager_impl.cc",
        "patchSetId": 2
      },
      "lineNbr": 39,
      "author": {
        "id": 1115968
      },
      "writtenOn": "2017-09-12T20:25:41Z",
      "side": 1,
      "message": "optional:  Could just use std::set and pass in an iterator here.  Admittedly, this shouldn\u0027t be common, but we\u0027ll often see multiple deletions at once, and that gets us O(log n) insertion and deletion with minimal additional complexity (Or could use std::set and take a pointer here, which has the same complexity, if slightly worse performance, since it does a search + rebalance).",
      "range": {
        "startLine": 39,
        "startChar": 37,
        "endLine": 39,
        "endChar": 39
      },
      "revId": "60aa83af043bbc958658c93ad406bfa61211cd62",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9777f7f6_5f190942",
        "filename": "content/network/network_change_manager_impl.cc",
        "patchSetId": 2
      },
      "lineNbr": 54,
      "author": {
        "id": 1115968
      },
      "writtenOn": "2017-09-12T20:25:41Z",
      "side": 1,
      "message": "nit:  Can use range for loop",
      "range": {
        "startLine": 54,
        "startChar": 54,
        "endLine": 54,
        "endChar": 55
      },
      "revId": "60aa83af043bbc958658c93ad406bfa61211cd62",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3827f414_3be042a3",
        "filename": "content/network/network_change_manager_impl.h",
        "patchSetId": 2
      },
      "lineNbr": 44,
      "author": {
        "id": 1115968
      },
      "writtenOn": "2017-09-12T20:25:41Z",
      "side": 1,
      "message": "There is also mojo::InterfacePtrSet - it looks not great, though there\u0027s a TODO about improving it.",
      "range": {
        "startLine": 44,
        "startChar": 21,
        "endLine": 44,
        "endChar": 50
      },
      "revId": "60aa83af043bbc958658c93ad406bfa61211cd62",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b474f56b_e7ccfd50",
        "filename": "content/network/network_change_manager_impl_unittest.cc",
        "patchSetId": 2
      },
      "lineNbr": 17,
      "author": {
        "id": 1120845
      },
      "writtenOn": "2017-08-30T21:26:17Z",
      "side": 1,
      "message": "presubmit doesn\u0027t like three of these includes\n\n  content/network/network_change_manager_impl_unittest.cc\n      Illegal include: \"content/public/browser/browser_thread.h\"\n    Because of \"-content\" from content/network\u0027s include_rules. \\\n  content/network/network_change_manager_impl_unittest.cc\n      Illegal include: \"content/public/common/content_features.h\"\n    Because of \"-content\" from content/network\u0027s include_rules. \\\n  content/network/network_change_manager_impl_unittest.cc\n      Illegal include: \"content/public/test/test_browser_thread_bundle.h\"\n    Because of \"-content\" from content/network\u0027s include_rules.",
      "revId": "60aa83af043bbc958658c93ad406bfa61211cd62",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "64ef354a_f9c80b9a",
        "filename": "content/network/network_service_impl.h",
        "patchSetId": 2
      },
      "lineNbr": 10,
      "author": {
        "id": 1001809
      },
      "writtenOn": "2017-08-31T17:21:51Z",
      "side": 1,
      "message": "Why?",
      "range": {
        "startLine": 10,
        "startChar": 10,
        "endLine": 10,
        "endChar": 16
      },
      "revId": "60aa83af043bbc958658c93ad406bfa61211cd62",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7b62986c_31de36af",
        "filename": "content/public/common/network_change_manager.mojom",
        "patchSetId": 2
      },
      "lineNbr": 8,
      "author": {
        "id": 1001809
      },
      "writtenOn": "2017-08-31T17:21:51Z",
      "side": 1,
      "message": "Given that these are declared in the typemaps, do they need to be defined here?  \n\nHigher level (since I could imagine the answer to the above question is \"yes\"): I\u0027m uncomfortable with \"this needs to match the definition\" without any enforcement.  Ideal would be for it to automatically be created as matching those types.  Less ideal would be either to have tests (could be compile time) to enforce that they\u0027re the same, or to do explicit mapping between the mojo enums and the C++ enums (e.g.content/public/common/cookie_manager_traits.cc).  Which I guess was the best thing I found when doing cookies, so I\u0027ll recommend that while indicating that if you can auto-convert in some fashion I missed that\u0027s better :-}.",
      "range": {
        "startLine": 8,
        "startChar": 5,
        "endLine": 8,
        "endChar": 19
      },
      "revId": "60aa83af043bbc958658c93ad406bfa61211cd62",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1b42c9c2_95d263e1",
        "filename": "content/public/common/network_change_manager.mojom",
        "patchSetId": 2
      },
      "lineNbr": 8,
      "author": {
        "id": 1115968
      },
      "writtenOn": "2017-09-12T20:25:41Z",
      "side": 1,
      "message": "Yes, they do - remember that Mojo is cross process.  We\u0027d need these if a consumer were written in Java or something (Which seems an entirely reasonable thing to do, at least for this interface)",
      "parentUuid": "7b62986c_31de36af",
      "range": {
        "startLine": 8,
        "startChar": 5,
        "endLine": 8,
        "endChar": 19
      },
      "revId": "60aa83af043bbc958658c93ad406bfa61211cd62",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d25b9053_a989ef80",
        "filename": "content/public/common/network_change_manager.mojom",
        "patchSetId": 2
      },
      "lineNbr": 61,
      "author": {
        "id": 1120845
      },
      "writtenOn": "2017-08-30T21:26:17Z",
      "side": 1,
      "message": "(I will get rid of the tabs in the next PS.)",
      "range": {
        "startLine": 61,
        "startChar": 0,
        "endLine": 61,
        "endChar": 1
      },
      "revId": "60aa83af043bbc958658c93ad406bfa61211cd62",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "790b4584_64ac84f1",
        "filename": "content/public/common/network_change_notifier.typemap",
        "patchSetId": 2
      },
      "lineNbr": 3,
      "author": {
        "id": 1115968
      },
      "writtenOn": "2017-09-12T20:25:41Z",
      "side": 1,
      "message": "Rather than use typemaps, I\u0027d suggest just having NetworkChangeManagerImpl do the conversions itself.  Since there\u0027s only one source class, and a lot of consumers, we don\u0027t need to expose the net enum to consumers...I think?  If we want users to be using net enums, then NetworkChangeManagerClientImpl should be using them instead of the net enums.",
      "range": {
        "startLine": 3,
        "startChar": 22,
        "endLine": 3,
        "endChar": 29
      },
      "revId": "60aa83af043bbc958658c93ad406bfa61211cd62",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}