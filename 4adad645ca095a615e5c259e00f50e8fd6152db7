{
  "comments": [
    {
      "key": {
        "uuid": "ef1ff20c_8afa4278",
        "filename": "components/viz/common/surfaces/local_surface_id.h",
        "patchSetId": 6
      },
      "lineNbr": 56,
      "author": {
        "id": 1146978
      },
      "writtenOn": "2017-11-27T18:22:11Z",
      "side": 1,
      "message": "I\u0027m not a huge fan of re-implementing this logic more than once. Can you make operator\u003c a non-member function and then implement the other comparison operators with it? I mean like:\n\ninline bool operator\u003c (const X\u0026 lhs, const X\u0026 rhs){ /* do actual comparison */ }\ninline bool operator\u003e (const X\u0026 lhs, const X\u0026 rhs){return  operator\u003c (rhs,lhs);}\ninline bool operator\u003c\u003d(const X\u0026 lhs, const X\u0026 rhs){return !operator\u003e (lhs,rhs);}\ninline bool operator\u003e\u003d(const X\u0026 lhs, const X\u0026 rhs){return !operator\u003c (lhs,rhs);}",
      "revId": "4adad645ca095a615e5c259e00f50e8fd6152db7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "88def388_f99cb1da",
        "filename": "components/viz/service/surfaces/surface.cc",
        "patchSetId": 6
      },
      "lineNbr": 322,
      "author": {
        "id": 1146978
      },
      "writtenOn": "2017-11-27T18:22:11Z",
      "side": 1,
      "message": "Can you comment why this happens?",
      "revId": "4adad645ca095a615e5c259e00f50e8fd6152db7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3c3e611a_7be7d223",
        "filename": "components/viz/service/surfaces/surface.cc",
        "patchSetId": 6
      },
      "lineNbr": 348,
      "author": {
        "id": 1146978
      },
      "writtenOn": "2017-11-27T18:22:11Z",
      "side": 1,
      "message": "If this a member function I don\u0027t think you need to pass in |existing_dependencies|? Also the output variables aren\u0027t really need, since this function could just call SurfaceDependenciesChanged()?",
      "revId": "4adad645ca095a615e5c259e00f50e8fd6152db7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f1d4197a_1bcf8e21",
        "filename": "components/viz/service/surfaces/surface.h",
        "patchSetId": 6
      },
      "lineNbr": 276,
      "author": {
        "id": 1146978
      },
      "writtenOn": "2017-11-27T18:22:11Z",
      "side": 1,
      "message": "Does this have a relation to |activation_dependencies| or |late_activation_dependencies_|?",
      "revId": "4adad645ca095a615e5c259e00f50e8fd6152db7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f22736b2_7b2e2915",
        "filename": "components/viz/service/surfaces/surface_dependency_tracker.h",
        "patchSetId": 6
      },
      "lineNbr": 40,
      "author": {
        "id": 1146978
      },
      "writtenOn": "2017-11-27T18:22:11Z",
      "side": 1,
      "message": "Do the actual Surface objects still track the dependency SurfaceIds then?",
      "revId": "4adad645ca095a615e5c259e00f50e8fd6152db7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7aedea19_e188bf56",
        "filename": "components/viz/service/surfaces/surface_dependency_tracker.h",
        "patchSetId": 6
      },
      "lineNbr": 66,
      "author": {
        "id": 1146978
      },
      "writtenOn": "2017-11-27T18:22:11Z",
      "side": 1,
      "message": "This is hard enough to parse that I\u0027m not sure I understand exactly what this map is.",
      "range": {
        "startLine": 65,
        "startChar": 18,
        "endLine": 66,
        "endChar": 37
      },
      "revId": "4adad645ca095a615e5c259e00f50e8fd6152db7",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}