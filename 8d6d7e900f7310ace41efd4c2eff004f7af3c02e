{
  "comments": [
    {
      "key": {
        "uuid": "6349a781_bcccf534",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 7,
      "author": {
        "id": 1001534
      },
      "writtenOn": "2017-07-20T20:23:07Z",
      "side": 1,
      "message": "What\u0027s the \"File thread\"? BrowserThread::FILE is deprecated.",
      "range": {
        "startLine": 7,
        "startChar": 23,
        "endLine": 7,
        "endChar": 41
      },
      "revId": "8d6d7e900f7310ace41efd4c2eff004f7af3c02e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "581e3dbe_a513138b",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 7,
      "author": {
        "id": 1110029
      },
      "writtenOn": "2017-07-20T20:48:25Z",
      "side": 1,
      "message": "This is renderer process code (and to be more precise, blink code). So no BrowserThread. The file thread is what RenderThreadImpl::GetFileThreadTaskRunner() returns.",
      "parentUuid": "6349a781_bcccf534",
      "range": {
        "startLine": 7,
        "startChar": 23,
        "endLine": 7,
        "endChar": 41
      },
      "revId": "8d6d7e900f7310ace41efd4c2eff004f7af3c02e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4fba5f51_9150aa73",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 9,
      "author": {
        "id": 1001534
      },
      "writtenOn": "2017-07-20T20:23:07Z",
      "side": 1,
      "message": "off?",
      "range": {
        "startLine": 9,
        "startChar": 8,
        "endLine": 9,
        "endChar": 11
      },
      "revId": "8d6d7e900f7310ace41efd4c2eff004f7af3c02e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f0307e37_d985f76e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 9,
      "author": {
        "id": 1110029
      },
      "writtenOn": "2017-07-20T20:48:25Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4fba5f51_9150aa73",
      "range": {
        "startLine": 9,
        "startChar": 8,
        "endLine": 9,
        "endChar": 11
      },
      "revId": "8d6d7e900f7310ace41efd4c2eff004f7af3c02e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "29c1358c_910e5940",
        "filename": "content/renderer/render_thread_impl.cc",
        "patchSetId": 5
      },
      "lineNbr": 1294,
      "author": {
        "id": 1001472
      },
      "writtenOn": "2017-07-19T16:04:55Z",
      "side": 1,
      "message": "I wonder if we should just create this within Blink, and only expose WebTaskRunner to blink consumers?  It might possibly allow us to replace the underlying infra to sequenced task runner or something else at some point. (And I think we want to avoid directly referring to WebThread as much as possible)\n\nGetFileThreadTaskRunner can get the file WebTaskRunner from blink_platform_impl_ and return SingleThreadTaskRunner by calling its ToSingleThreadTaskRunner method.\n\n(Also interested in what scheduler folks / others think)",
      "revId": "8d6d7e900f7310ace41efd4c2eff004f7af3c02e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d6d5b5c5_fe6872e9",
        "filename": "content/renderer/render_thread_impl.cc",
        "patchSetId": 5
      },
      "lineNbr": 1294,
      "author": {
        "id": 1150969
      },
      "writtenOn": "2017-07-20T10:57:41Z",
      "side": 1,
      "message": "I personally think that exposing only WebTaskRunner is a good idea. However, gab@ is in the best position to make this kind of judgements.\n\nGab, WDYT?",
      "parentUuid": "29c1358c_910e5940",
      "revId": "8d6d7e900f7310ace41efd4c2eff004f7af3c02e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eb1faa58_0aa9fe33",
        "filename": "content/renderer/render_thread_impl.cc",
        "patchSetId": 5
      },
      "lineNbr": 1294,
      "author": {
        "id": 1001534
      },
      "writtenOn": "2017-07-20T20:23:07Z",
      "side": 1,
      "message": "Yes please only expose runner interfaces, this makes it so much easier to migrate to something else later.\n\nEven better would be to only expose something like RenderThreadImpl::CreateFileTaskRunner() which would return a scoped_refptr\u003cbase::SequencedTaskRunner\u003e. Currently this could always be the same underlying task runner which happens to be a single thread but the API should be clear that these can be independent which will allow you to later do a simple switch where those sequences are actually sharing a pool (a la TaskScheduler + post_task.h).\n\nI\u0027m saying this because the hardest part of migrating to TaskScheduler in the browser is sharding BrowserThread::FILE\u0027s users into individual sequences and figuring out all the implicit dependencies. If your API asks users to make this decision from the get go (before the impl actually shards the work) then you at least have the proper labelling from the callers which is by far the hardest part.",
      "parentUuid": "d6d5b5c5_fe6872e9",
      "revId": "8d6d7e900f7310ace41efd4c2eff004f7af3c02e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a91abf1a_6d163cdc",
        "filename": "content/renderer/render_thread_impl.cc",
        "patchSetId": 5
      },
      "lineNbr": 1294,
      "author": {
        "id": 1110029
      },
      "writtenOn": "2017-07-20T20:48:25Z",
      "side": 1,
      "message": "Happy to make whatever changes are necesary. I agree that exposing threads and/or SingleThreadTaskRunners is a bad idea. I\u0027m just not really sure what the best way to do so would be. What code would be creating the thread and/or task runner? What code would own the thread and/or task runner? What API exposes it to blink, and what API exposes it to content?\n\nI\u0027m not sure how to interpret both the suggestion that BlinkPlatformImpl (a class in content) should be the access point to this task runner, but it should be created within blink. How does BlinkPlatformImpl then get access to it?\n\nShould blink::RendererScheduler have a new CreateFileTaskRunner method that returns a WebTaskRunner, which RenderThreadImpl then gets here and owns, passing it to BlinkPlatformImpl to expose it back to blink?\n\nAnd under the hood CreateFileTaskRunner of course still has to somehow create a base::SingleThreadTaskRunner to back the WebTaskRunner.\n\nOf course WebTaskRunner still has the problem that it explicitly exposes a single thread task runner, so you\u0027re not saving any of the migration pains if you later want to move the anything other than a single thread. I\u0027m not even sure if blink has an API to expose a SequencedTaskRunner (is there an overview of blink task scheduling APIs somewhere?)",
      "parentUuid": "eb1faa58_0aa9fe33",
      "revId": "8d6d7e900f7310ace41efd4c2eff004f7af3c02e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f0eef8ac_c01bee4b",
        "filename": "content/renderer/render_thread_impl.cc",
        "patchSetId": 5
      },
      "lineNbr": 1294,
      "author": {
        "id": 1001472
      },
      "writtenOn": "2017-07-21T10:59:34Z",
      "side": 1,
      "message": "WebTaskRunner used to be exposed on public but not anymore. It has an interface to SingleThreadTaskRunner but I feel it could be still better than directly using threads, we can\u0027t change everything at once.\n\nWhat I imagined is something like following, but I could be still missing something.\n\nAdd GetFileTaskRunner() (returns WebTaskRunner) and GetFileThread() (returns SingleThreadedTaskRunner) on Platform interface, and expose the former only if INSIDE_BLINK.  The latter should be used only by non-blink consumers and should go away soon once all non-blink consumers go away.\n\nGetFileTaskRunner can be implemented within Platform.cpp.\n\nPlatform::CurrentThread wouldn\u0027t work in this way but maybe ok for the new code that doesn\u0027t directly use WebThread?\n\nShall we talk this a bit on platform-arch as well? I can start a thread then. Also: if we don\u0027t want to spend too much time I think we could start smaller in parallel, with something like the current patch. (feeling a bit sorry that this taking long)",
      "parentUuid": "a91abf1a_6d163cdc",
      "revId": "8d6d7e900f7310ace41efd4c2eff004f7af3c02e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9f3bb2f5_490c5f80",
        "filename": "third_party/WebKit/public/platform/Platform.h",
        "patchSetId": 5
      },
      "lineNbr": 460,
      "author": {
        "id": 1001534
      },
      "writtenOn": "2017-07-20T20:23:07Z",
      "side": 1,
      "message": "Don\u0027t expose threads if you can help it.",
      "revId": "8d6d7e900f7310ace41efd4c2eff004f7af3c02e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0a0b87e0_32dab7a2",
        "filename": "third_party/WebKit/public/platform/Platform.h",
        "patchSetId": 5
      },
      "lineNbr": 460,
      "author": {
        "id": 1110029
      },
      "writtenOn": "2017-07-20T20:48:25Z",
      "side": 1,
      "message": "Happy not to, but so far nobody has suggested a concrete way not to do so (not even sure if there currently exists some public blink task runner like API that doesn\u0027t explicitly map to a single thread).",
      "parentUuid": "9f3bb2f5_490c5f80",
      "revId": "8d6d7e900f7310ace41efd4c2eff004f7af3c02e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}