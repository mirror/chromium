{
  "comments": [
    {
      "key": {
        "uuid": "e5bdc1fa_5d8c4237",
        "filename": "chrome/browser/sync/test/integration/search_engines_helper.cc",
        "patchSetId": 4
      },
      "lineNbr": 28,
      "author": {
        "id": 1000640
      },
      "writtenOn": "2017-10-09T11:33:48Z",
      "side": 1,
      "message": "In this case the test will still crash if this is not true when the pointer is used below. In that sense is this even needed here.\n\nThe same goes for all those non-null checks.",
      "range": {
        "startLine": 28,
        "startChar": 2,
        "endLine": 28,
        "endChar": 13
      },
      "revId": "b003e25acc41a211eb6a1b8c9fb1ad4013e85c37",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6c3c0075_7aabd45c",
        "filename": "chrome/browser/sync/test/integration/search_engines_helper.cc",
        "patchSetId": 4
      },
      "lineNbr": 28,
      "author": {
        "id": 1153420
      },
      "writtenOn": "2017-10-10T00:11:49Z",
      "side": 1,
      "message": "Hmm, you make an interesting point. I\u0027m conflicted here, on one hand, it\u0027s kind of nice to know that |service| is not optional, one must be specified when viewing this code. I was a big fan of @Nullable annotations in Java. I totally agree that they\u0027re adding lines of code, and they don\u0027t really add anything to the execution.\n\nSwitched some of these methods to take const\u0026s as it was easy. Removed the checks against things that were immediately derefed. Changed the for loop below to be ranged based. Left the checks on things that were checked and then passed to methods that were defined outside this file.",
      "parentUuid": "e5bdc1fa_5d8c4237",
      "range": {
        "startLine": 28,
        "startChar": 2,
        "endLine": 28,
        "endChar": 13
      },
      "revId": "b003e25acc41a211eb6a1b8c9fb1ad4013e85c37",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "eca745c7_3ef75cf7",
        "filename": "chrome/browser/sync/test/integration/sync_test.cc",
        "patchSetId": 4
      },
      "lineNbr": 350,
      "author": {
        "id": 1000640
      },
      "writtenOn": "2017-10-09T11:33:48Z",
      "side": 1,
      "message": "Just in case you didn\u0027t know ASSERT_XXXX is eventually a log + return so asserting inside a function that is not the test body itself will not prevent the rest of the test from running. A truth I learned the hard way. So those asserts will stop the rest of the function but won\u0027t stop the rest of the tests they are called from.",
      "range": {
        "startLine": 350,
        "startChar": 4,
        "endLine": 350,
        "endChar": 15
      },
      "revId": "b003e25acc41a211eb6a1b8c9fb1ad4013e85c37",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "545f2057_3a0737d3",
        "filename": "chrome/browser/sync/test/integration/sync_test.cc",
        "patchSetId": 4
      },
      "lineNbr": 350,
      "author": {
        "id": 1153420
      },
      "writtenOn": "2017-10-10T00:11:49Z",
      "side": 1,
      "message": "Why can\u0027t we just have exceptions. :(\n\nI did not fully understand how this worked, I just knew that ASSERT_X inside methods that returned non-void wouldn\u0027t work. This makes total sense now that you explain it to me, that it is just defined as a \"return;\" which clearly doesn\u0027t compile if there\u0027s a return type. I see.\n\nI think the ideal behavior here is that we stop executing. Some part of setup didn\u0027t work, we\u0027re hosed. Crashing is less than ideal. But as is getting stuck on a checker for 120 seconds until we time out. Returning a boolean seems better. \n\nUgh, sync_test.cc seems to use LOG(FATAL) everywhere... Reworked the pieces I touched to be marginally better.",
      "parentUuid": "eca745c7_3ef75cf7",
      "range": {
        "startLine": 350,
        "startChar": 4,
        "endLine": 350,
        "endChar": 15
      },
      "revId": "b003e25acc41a211eb6a1b8c9fb1ad4013e85c37",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d22cc5cc_538321b3",
        "filename": "components/sync/driver/glue/sync_backend_host_impl.cc",
        "patchSetId": 4
      },
      "lineNbr": 140,
      "author": {
        "id": 1000640
      },
      "writtenOn": "2017-10-09T11:33:48Z",
      "side": 1,
      "message": "Side effect in DCHECK.",
      "range": {
        "startLine": 140,
        "startChar": 4,
        "endLine": 140,
        "endChar": 79
      },
      "revId": "b003e25acc41a211eb6a1b8c9fb1ad4013e85c37",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f416dacc_227cc4b2",
        "filename": "components/sync/driver/glue/sync_backend_host_impl.cc",
        "patchSetId": 4
      },
      "lineNbr": 140,
      "author": {
        "id": 1153420
      },
      "writtenOn": "2017-10-10T00:11:49Z",
      "side": 1,
      "message": "Yikes, thanks for catching these. Fixed, I think. Would be nice if we had a macro that always runs the conditional statement.\n\n#if DCHECK_IS_ON()\n#define XCHECK(cond) cond\n#else // DCHECK_IS_ON()\n#define XCHECK(cond) DCHECK(cond)\n#endif // DCHECK_IS_ON()\n\nWe seem to currently have 201 DCHECK(success) in our codebase, https://cs.chromium.org/search/?q\u003dDCHECK%5C(success%5C)\u0026p\u003d2\u0026sq\u003dpackage:chromium\u0026type\u003dcs",
      "parentUuid": "d22cc5cc_538321b3",
      "range": {
        "startLine": 140,
        "startChar": 4,
        "endLine": 140,
        "endChar": 79
      },
      "revId": "b003e25acc41a211eb6a1b8c9fb1ad4013e85c37",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "05dd4d36_9aed66a3",
        "filename": "components/sync/driver/glue/sync_backend_host_impl.cc",
        "patchSetId": 4
      },
      "lineNbr": 230,
      "author": {
        "id": 1153420
      },
      "writtenOn": "2017-10-10T00:11:49Z",
      "side": 1,
      "message": "Removed.",
      "range": {
        "startLine": 230,
        "startChar": 10,
        "endLine": 230,
        "endChar": 11
      },
      "revId": "b003e25acc41a211eb6a1b8c9fb1ad4013e85c37",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4a065dc0_03c730f2",
        "filename": "components/sync/driver/glue/sync_backend_host_impl.cc",
        "patchSetId": 4
      },
      "lineNbr": 279,
      "author": {
        "id": 1000640
      },
      "writtenOn": "2017-10-09T11:33:48Z",
      "side": 1,
      "message": "Side effect in DCHECK.",
      "range": {
        "startLine": 279,
        "startChar": 4,
        "endLine": 279,
        "endChar": 57
      },
      "revId": "b003e25acc41a211eb6a1b8c9fb1ad4013e85c37",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8c50f707_df9b9e0b",
        "filename": "components/sync/driver/glue/sync_backend_host_impl.cc",
        "patchSetId": 4
      },
      "lineNbr": 279,
      "author": {
        "id": 1153420
      },
      "writtenOn": "2017-10-10T00:11:49Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4a065dc0_03c730f2",
      "range": {
        "startLine": 279,
        "startChar": 4,
        "endLine": 279,
        "endChar": 57
      },
      "revId": "b003e25acc41a211eb6a1b8c9fb1ad4013e85c37",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c3c4e687_acdc6327",
        "filename": "components/sync/driver/sync_service_base.cc",
        "patchSetId": 4
      },
      "lineNbr": 116,
      "author": {
        "id": 1000640
      },
      "writtenOn": "2017-10-09T11:33:48Z",
      "side": 1,
      "message": "Side effect in DCHECK.",
      "range": {
        "startLine": 116,
        "startChar": 3,
        "endLine": 116,
        "endChar": 52
      },
      "revId": "b003e25acc41a211eb6a1b8c9fb1ad4013e85c37",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e84aa1d3_8a700b12",
        "filename": "components/sync/driver/sync_service_base.cc",
        "patchSetId": 4
      },
      "lineNbr": 116,
      "author": {
        "id": 1153420
      },
      "writtenOn": "2017-10-10T00:11:49Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c3c4e687_acdc6327",
      "range": {
        "startLine": 116,
        "startChar": 3,
        "endLine": 116,
        "endChar": 52
      },
      "revId": "b003e25acc41a211eb6a1b8c9fb1ad4013e85c37",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fb2578c8_2c179e66",
        "filename": "components/sync/syncable/model_type.cc",
        "patchSetId": 4
      },
      "lineNbr": 501,
      "author": {
        "id": 1000640
      },
      "writtenOn": "2017-10-09T11:33:48Z",
      "side": 1,
      "message": "This will not work. DCHECKS are no-ops in release code. You need to split the function call from the DCHECK. I only noticed that here but please check all other DCHECKs to not have side effects.",
      "range": {
        "startLine": 501,
        "startChar": 4,
        "endLine": 501,
        "endChar": 39
      },
      "revId": "b003e25acc41a211eb6a1b8c9fb1ad4013e85c37",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "88453987_c012b4c6",
        "filename": "components/sync/syncable/model_type.cc",
        "patchSetId": 4
      },
      "lineNbr": 501,
      "author": {
        "id": 1153420
      },
      "writtenOn": "2017-10-10T00:11:49Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fb2578c8_2c179e66",
      "range": {
        "startLine": 501,
        "startChar": 4,
        "endLine": 501,
        "endChar": 39
      },
      "revId": "b003e25acc41a211eb6a1b8c9fb1ad4013e85c37",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a352cc73_d19dcb43",
        "filename": "components/sync/syncable/model_type.cc",
        "patchSetId": 4
      },
      "lineNbr": 505,
      "author": {
        "id": 1000640
      },
      "writtenOn": "2017-10-09T11:33:48Z",
      "side": 1,
      "message": "Side effect in DCHECK.",
      "range": {
        "startLine": 505,
        "startChar": 4,
        "endLine": 505,
        "endChar": 40
      },
      "revId": "b003e25acc41a211eb6a1b8c9fb1ad4013e85c37",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b3aaac12_43ce310e",
        "filename": "components/sync/syncable/model_type.cc",
        "patchSetId": 4
      },
      "lineNbr": 505,
      "author": {
        "id": 1153420
      },
      "writtenOn": "2017-10-10T00:11:49Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a352cc73_d19dcb43",
      "range": {
        "startLine": 505,
        "startChar": 4,
        "endLine": 505,
        "endChar": 40
      },
      "revId": "b003e25acc41a211eb6a1b8c9fb1ad4013e85c37",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "420cac74_35d81274",
        "filename": "components/sync/test/engine/mock_connection_manager.cc",
        "patchSetId": 4
      },
      "lineNbr": 80,
      "author": {
        "id": 1000640
      },
      "writtenOn": "2017-10-09T11:33:48Z",
      "side": 1,
      "message": "Side effect in DCHECK.",
      "range": {
        "startLine": 80,
        "startChar": 2,
        "endLine": 80,
        "endChar": 49
      },
      "revId": "b003e25acc41a211eb6a1b8c9fb1ad4013e85c37",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c80c59fd_81173a7e",
        "filename": "components/sync/test/engine/mock_connection_manager.cc",
        "patchSetId": 4
      },
      "lineNbr": 80,
      "author": {
        "id": 1153420
      },
      "writtenOn": "2017-10-10T00:11:49Z",
      "side": 1,
      "message": "Ugh, this is test code. Which probably shouldn\u0027t even be DCHECKing. Switched to returning false. \n\nif (!cond) { ADD_FAILURE(); return false; } is getting verbose. Would be nice if we had something like ASSERT_X_AND_RETURN or EXPECT_X_AND_RETURN that would allow us to specify a return value. Or maybe ASSERT could SFINAE in a \"return false;\" or something magical. I guess I could always define my own within sync tests. Leaving verbose for now.",
      "parentUuid": "420cac74_35d81274",
      "range": {
        "startLine": 80,
        "startChar": 2,
        "endLine": 80,
        "endChar": 49
      },
      "revId": "b003e25acc41a211eb6a1b8c9fb1ad4013e85c37",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7bcf02e6_76d3ed6a",
        "filename": "components/sync/tools/sync_client.cc",
        "patchSetId": 4
      },
      "lineNbr": 350,
      "author": {
        "id": 1000640
      },
      "writtenOn": "2017-10-09T11:33:48Z",
      "side": 1,
      "message": "Side effect in DCHECK.",
      "range": {
        "startLine": 350,
        "startChar": 2,
        "endLine": 350,
        "endChar": 45
      },
      "revId": "b003e25acc41a211eb6a1b8c9fb1ad4013e85c37",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e1b298e5_e55abdde",
        "filename": "components/sync/tools/sync_client.cc",
        "patchSetId": 4
      },
      "lineNbr": 350,
      "author": {
        "id": 1153420
      },
      "writtenOn": "2017-10-10T00:11:49Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7bcf02e6_76d3ed6a",
      "range": {
        "startLine": 350,
        "startChar": 2,
        "endLine": 350,
        "endChar": 45
      },
      "revId": "b003e25acc41a211eb6a1b8c9fb1ad4013e85c37",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "949d36fb_49b046b2",
        "filename": "components/sync/tools/sync_client.cc",
        "patchSetId": 4
      },
      "lineNbr": 438,
      "author": {
        "id": 1000640
      },
      "writtenOn": "2017-10-09T11:33:48Z",
      "side": 1,
      "message": "Side effect in DCHECK.",
      "range": {
        "startLine": 438,
        "startChar": 2,
        "endLine": 438,
        "endChar": 41
      },
      "revId": "b003e25acc41a211eb6a1b8c9fb1ad4013e85c37",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1aaea947_4e9fa5ab",
        "filename": "components/sync/tools/sync_client.cc",
        "patchSetId": 4
      },
      "lineNbr": 438,
      "author": {
        "id": 1153420
      },
      "writtenOn": "2017-10-10T00:11:49Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "949d36fb_49b046b2",
      "range": {
        "startLine": 438,
        "startChar": 2,
        "endLine": 438,
        "endChar": 41
      },
      "revId": "b003e25acc41a211eb6a1b8c9fb1ad4013e85c37",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "efe71d60_cda9b4e5",
        "filename": "components/sync/tools/sync_listen_notifications.cc",
        "patchSetId": 4
      },
      "lineNbr": 198,
      "author": {
        "id": 1000640
      },
      "writtenOn": "2017-10-09T11:33:48Z",
      "side": 1,
      "message": "Side effect in DCHECK.",
      "range": {
        "startLine": 198,
        "startChar": 2,
        "endLine": 198,
        "endChar": 41
      },
      "revId": "b003e25acc41a211eb6a1b8c9fb1ad4013e85c37",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0e9f8e56_997258d8",
        "filename": "components/sync/tools/sync_listen_notifications.cc",
        "patchSetId": 4
      },
      "lineNbr": 198,
      "author": {
        "id": 1153420
      },
      "writtenOn": "2017-10-10T00:11:49Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "efe71d60_cda9b4e5",
      "range": {
        "startLine": 198,
        "startChar": 2,
        "endLine": 198,
        "endChar": 41
      },
      "revId": "b003e25acc41a211eb6a1b8c9fb1ad4013e85c37",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}