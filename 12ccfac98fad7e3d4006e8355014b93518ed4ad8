{
  "comments": [
    {
      "key": {
        "uuid": "484a294c_8a865926",
        "filename": "ui/compositor/clip_recorder.cc",
        "patchSetId": 12
      },
      "lineNbr": 25,
      "author": {
        "id": 1000887
      },
      "writtenOn": "2017-07-05T18:58:32Z",
      "side": 1,
      "message": "Thought: an RAII object seems easier now, and push could live on that instead. Cuz otherwise the API looks like u could push without StartPaint() at all now.",
      "revId": "12ccfac98fad7e3d4006e8355014b93518ed4ad8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "90a5a9ac_a23549b5",
        "filename": "ui/compositor/clip_recorder.cc",
        "patchSetId": 12
      },
      "lineNbr": 25,
      "author": {
        "id": 1002513
      },
      "writtenOn": "2017-07-05T20:11:01Z",
      "side": 1,
      "message": "Why do you say that the RAII object seems easier now? That is, why was it more difficult before?\n\nFWIW, StartPaint with this patch only marks a bool stating that we\u0027re in painting, so technically it\u0027s not exactly required. We could rename End calls to something like FlushVisualRect or something along those lines. Those are are also optional for cases where we\u0027re going to release the POB from it.",
      "parentUuid": "484a294c_8a865926",
      "revId": "12ccfac98fad7e3d4006e8355014b93518ed4ad8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f655f5be_7925e4d6",
        "filename": "ui/compositor/clip_recorder.cc",
        "patchSetId": 12
      },
      "lineNbr": 25,
      "author": {
        "id": 1000887
      },
      "writtenOn": "2017-07-05T20:21:43Z",
      "side": 1,
      "message": "It was a bit different as the RAII object would have to pass through to the PaintOpBuffer, and expose all the same things that POB exposes. Whereas now it could be a concrete thing modifying the DisplayItemList and isn\u0027t so API-dependent.\n\nWhat happens if you go and push() without Start, and then have no visual rect (when you want a visual rect tho)? Is that a crasher? We used to DCHECK this, I think.\n\nDeeper thought: If DIL returned an RAII object that had the push API, maybe you could just instantiate that without the DIL for cases where you want to release the POB from it? Like \"RAII DisplayItemList::StartPaint()\" and \"RAII POB::Factory()\" or something?",
      "parentUuid": "90a5a9ac_a23549b5",
      "revId": "12ccfac98fad7e3d4006e8355014b93518ed4ad8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "23b77b8a_c44cc4ad",
        "filename": "ui/compositor/clip_recorder.cc",
        "patchSetId": 12
      },
      "lineNbr": 25,
      "author": {
        "id": 1002513
      },
      "writtenOn": "2017-07-05T20:40:43Z",
      "side": 1,
      "message": "\u003e It was a bit different as the RAII object would have to pass through to the PaintOpBuffer, and expose all the same things that POB exposes. Whereas now it could be a concrete thing modifying the DisplayItemList and isn\u0027t so API-dependent.\n\nI\u0027m not sure I understand :\\ Do you mean RAII scope(display_item_list?); and then display_item_list.push? or do you mean RAII scope(display_item_list); scope.push? Because in the latter case, it\u0027s exactly the same in the sense that it would have to pass through to some other object (DIL instead of POB). In the former case though, you still have an issue that people might forget to scope things, but I guess that might be easy enough to dcheck. In either case, where would we specify the visual rect if needed?\n\n\u003e \n\u003e What happens if you go and push() without Start, and then have no visual rect (when you want a visual rect tho)? Is that a crasher? We used to DCHECK this, I think.\n\nIt\u0027s not a crasher right now. Previously, it was not possible since DIL didn\u0027t expose push functionality and the only way to get a POB was to call StartPaint (which then would DCHECK if you didn\u0027t end paint). I agree that we should probably make it a crasher somehow, but that can be done via a DCHECK or two in Finalize call (ie, if this is top level, then visual_rects.size() \u003d\u003d pob.size() or something along those lines)\n\n\u003e \n\u003e Deeper thought: If DIL returned an RAII object that had the push API, maybe you could just instantiate that without the DIL for cases where you want to release the POB from it? Like \"RAII DisplayItemList::StartPaint()\" and \"RAII POB::Factory()\" or something?\n\nDo you mean for RAII to have two ctors, one that takes DIL and one that creates a self owned POB? Wouldn\u0027t the API be different then? In one case, you would RAII and push and after the scope ends, you have a DIL. In the other case, you would RAII and push but then have to release (for lack of a better word) pob from it before the scope ends. Or do you mean pass a pob into it?\n\nI\u0027m kind of hoping to eliminate code that creates pobs on its own. Is that something you disagree with?",
      "parentUuid": "f655f5be_7925e4d6",
      "revId": "12ccfac98fad7e3d4006e8355014b93518ed4ad8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a50dfd7b_026edcbd",
        "filename": "ui/compositor/clip_recorder.cc",
        "patchSetId": 12
      },
      "lineNbr": 25,
      "author": {
        "id": 1000887
      },
      "writtenOn": "2017-07-05T20:45:06Z",
      "side": 1,
      "message": "\u003e Because in the latter case, it\u0027s exactly the same in the sense that it would have to pass through to some other object (DIL instead of POB)\n\nI mean the latter, and I would expect DIL to no longer have any push methods, they\u0027d move to the RAII thing.\n\n\u003e but that can be done via a DCHECK or two in Finalize call (ie, if this is top level, then visual_rects.size() \u003d\u003d pob.size() or something along those lines)\n\nThat sounds like a good idea to me.\n\n\u003e Do you mean for RAII to have two ctors, one that takes DIL and one that creates a self owned POB?\n\nI was thinking DIL and \"SomethingElse\" can each return the RAII. The SomethingElse spits out a POB when you\u0027re done. The DIL continues to exist after.\n\n\u003e I\u0027m kind of hoping to eliminate code that creates pobs on its own.\n\nI think \"SomethingElse\" satisfies that condition for you, and I agree, it\u0027s nice to enforce going thru this other API which means no creating POB on your own.",
      "parentUuid": "23b77b8a_c44cc4ad",
      "revId": "12ccfac98fad7e3d4006e8355014b93518ed4ad8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3761526a_0fcada1e",
        "filename": "ui/compositor/paint_cache.cc",
        "patchSetId": 12
      },
      "lineNbr": 37,
      "author": {
        "id": 1000887
      },
      "writtenOn": "2017-07-05T18:58:32Z",
      "side": 1,
      "message": "unpaired\n\nThis feels like an explanation due to using the wrong API? Maybe the PaintRecorder could have the DIL instead? It\u0027s still a bunch of more constructors being called on these things tho there too?",
      "revId": "12ccfac98fad7e3d4006e8355014b93518ed4ad8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f3008c59_9e8496ea",
        "filename": "ui/compositor/paint_cache.cc",
        "patchSetId": 12
      },
      "lineNbr": 37,
      "author": {
        "id": 1002513
      },
      "writtenOn": "2017-07-05T20:11:01Z",
      "side": 1,
      "message": "\u003e unpaired\n\nDone.\n\n\u003e \n\u003e This feels like an explanation due to using the wrong API? Maybe the PaintRecorder could have the DIL instead? It\u0027s still a bunch of more constructors being called on these things tho there too?\n\nIn this class, we could technically just not call StartPaint and EndPaint at all and things would work just fine. I\u0027ve added them here since that\u0027s the pattern of calls that we always have. If we change this to eliminate start and rename Ends to something like Flushes, then I could just remove them here since then the API doesn\u0027t require them (ie they aren\u0027t called start/end paint).",
      "parentUuid": "3761526a_0fcada1e",
      "revId": "12ccfac98fad7e3d4006e8355014b93518ed4ad8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c7e4e5e9_c26cd03b",
        "filename": "ui/compositor/paint_cache.cc",
        "patchSetId": 12
      },
      "lineNbr": 37,
      "author": {
        "id": 1000887
      },
      "writtenOn": "2017-07-05T20:21:43Z",
      "side": 1,
      "message": "At the high level, I am wondering why this class owns display_item_list_ instead of PaintRecorder since it wants to ReleaseAsRecord, and could give that record to the cache?",
      "parentUuid": "f3008c59_9e8496ea",
      "revId": "12ccfac98fad7e3d4006e8355014b93518ed4ad8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "25315acd_cf8d887b",
        "filename": "ui/compositor/paint_cache.cc",
        "patchSetId": 12
      },
      "lineNbr": 37,
      "author": {
        "id": 1002513
      },
      "writtenOn": "2017-07-05T20:40:43Z",
      "side": 1,
      "message": "This change is mostly just eliminating the POB usage outside of cc/paint. Do you mean cc::PaintRecorder here or ui::PaintRecorder?\n\ncc::PaintRecorder does basically exactly what PaintCache does here, so we could use it here except that it would complicate ui::PaintRecorder ctor a bit..",
      "parentUuid": "c7e4e5e9_c26cd03b",
      "revId": "12ccfac98fad7e3d4006e8355014b93518ed4ad8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f48bb6dd_c862329b",
        "filename": "ui/compositor/paint_cache.cc",
        "patchSetId": 12
      },
      "lineNbr": 37,
      "author": {
        "id": 1000887
      },
      "writtenOn": "2017-07-05T20:45:46Z",
      "side": 1,
      "message": "\u003e Do you mean cc::PaintRecorder here or ui::PaintRecorder?\n\nLol, sorry I mean ui::PaintRecorder.",
      "parentUuid": "25315acd_cf8d887b",
      "revId": "12ccfac98fad7e3d4006e8355014b93518ed4ad8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1e12b3b2_2479f449",
        "filename": "ui/compositor/paint_cache.h",
        "patchSetId": 12
      },
      "lineNbr": 48,
      "author": {
        "id": 1000887
      },
      "writtenOn": "2017-07-05T18:58:32Z",
      "side": 1,
      "message": "nit: DisplayItemList is greppable",
      "revId": "12ccfac98fad7e3d4006e8355014b93518ed4ad8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8c423cd2_7562006a",
        "filename": "ui/compositor/paint_cache.h",
        "patchSetId": 12
      },
      "lineNbr": 48,
      "author": {
        "id": 1002513
      },
      "writtenOn": "2017-07-05T20:11:01Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1e12b3b2_2479f449",
      "revId": "12ccfac98fad7e3d4006e8355014b93518ed4ad8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}