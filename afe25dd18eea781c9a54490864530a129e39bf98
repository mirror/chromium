{
  "comments": [
    {
      "key": {
        "uuid": "a1c16e51_0b15b23a",
        "filename": "services/resource_coordinator/coordination_unit/tab_signal_generator_impl.cc",
        "patchSetId": 4
      },
      "lineNbr": 42,
      "author": {
        "id": 1112850
      },
      "writtenOn": "2017-08-11T17:24:52Z",
      "side": 1,
      "message": "I am not sure if we need this check. Should net and CPU idleness of a tab include subframes?\n\nBy the way, is TTI a frame level metric or tab level metric? As far as I remember, FMP is a tab level metric.",
      "range": {
        "startLine": 42,
        "startChar": 8,
        "endLine": 42,
        "endChar": 32
      },
      "revId": "afe25dd18eea781c9a54490864530a129e39bf98",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bd72f8fa_e36be9b9",
        "filename": "services/resource_coordinator/coordination_unit/tab_signal_generator_impl.cc",
        "patchSetId": 4
      },
      "lineNbr": 42,
      "author": {
        "id": 1211219
      },
      "writtenOn": "2017-08-11T19:03:32Z",
      "side": 1,
      "message": "I am not sure the granularity of TTI, but FMP is collected for main frame only https://cs.chromium.org/chromium/src/chrome/browser/page_load_metrics/page_load_metrics_observer.h?l\u003d389\n\nAs far as I understand, FMP is main frame, TTI is also targeting main frame. TTI detector is only created for main frame document from the prototype.",
      "parentUuid": "a1c16e51_0b15b23a",
      "range": {
        "startLine": 42,
        "startChar": 8,
        "endLine": 42,
        "endChar": 32
      },
      "revId": "afe25dd18eea781c9a54490864530a129e39bf98",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a06e17ff_a68bc70a",
        "filename": "third_party/WebKit/Source/core/dom/Document.cpp",
        "patchSetId": 4
      },
      "lineNbr": 613,
      "author": {
        "id": 1112850
      },
      "writtenOn": "2017-08-11T17:24:52Z",
      "side": 1,
      "message": "I don\u0027t think we need this check here. Subframes can also send long task idleness to GRC. Whether we only use main frame data or not is determined by GRC, not here.\n\nAnd I think network quiet detector does not have this restriction either, right?",
      "range": {
        "startLine": 613,
        "startChar": 8,
        "endLine": 613,
        "endChar": 23
      },
      "revId": "afe25dd18eea781c9a54490864530a129e39bf98",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6785dbff_0ccd428c",
        "filename": "third_party/WebKit/Source/core/dom/Document.cpp",
        "patchSetId": 4
      },
      "lineNbr": 613,
      "author": {
        "id": 1211219
      },
      "writtenOn": "2017-08-11T19:03:32Z",
      "side": 1,
      "message": "ResourceFetcher is in nature per-document, or say per-frame if I understand correctly.",
      "parentUuid": "a06e17ff_a68bc70a",
      "range": {
        "startLine": 613,
        "startChar": 8,
        "endLine": 613,
        "endChar": 23
      },
      "revId": "afe25dd18eea781c9a54490864530a129e39bf98",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e17840dd_ae0dbe56",
        "filename": "third_party/WebKit/Source/core/loader/LongTaskIdlenessDetector.cpp",
        "patchSetId": 4
      },
      "lineNbr": 47,
      "author": {
        "id": 1112850
      },
      "writtenOn": "2017-08-11T17:24:52Z",
      "side": 1,
      "message": "Why not just make this a const, like kLongTaskIdlenessWindowSeconds?",
      "revId": "afe25dd18eea781c9a54490864530a129e39bf98",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9c6a0d36_2b48229d",
        "filename": "third_party/WebKit/Source/core/loader/LongTaskIdlenessDetector.cpp",
        "patchSetId": 4
      },
      "lineNbr": 47,
      "author": {
        "id": 1211219
      },
      "writtenOn": "2017-08-11T19:03:32Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e17840dd_ae0dbe56",
      "revId": "afe25dd18eea781c9a54490864530a129e39bf98",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "75361966_c1170e11",
        "filename": "third_party/WebKit/Source/core/loader/LongTaskIdlenessDetector.cpp",
        "patchSetId": 4
      },
      "lineNbr": 54,
      "author": {
        "id": 1112850
      },
      "writtenOn": "2017-08-11T17:24:52Z",
      "side": 1,
      "message": "Is it possible that there is never a long task? In that case, we never send idleness signal.\n\nI think we should start the timer after HasFinishedParsing(). And if there is long task, we postpone the timer.\n\nWe also need WillProcessTask. Think about a long task taking 2 sec:\n1. timer starts at t\n2. long task starts at t+0.1 (WillProcessTask)\n3. timer fires at t+0.5 (this should not be fired, or we should not send idleness signal)\n4. long task ends at t+2 (DidProcessTask)\n\nIn the above case, we don\u0027t want to send the idleness signal. Using DidProcessTask alone cannot handle the above case.",
      "revId": "afe25dd18eea781c9a54490864530a129e39bf98",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1b966483_6fe281c7",
        "filename": "third_party/WebKit/Source/core/loader/LongTaskIdlenessDetector.cpp",
        "patchSetId": 4
      },
      "lineNbr": 54,
      "author": {
        "id": 1211219
      },
      "writtenOn": "2017-08-11T19:03:32Z",
      "side": 1,
      "message": "Done\n\nTaskRunnerTimer will be blocked if there\u0027s task being processed, see discussion in https://docs.google.com/document/d/10KAyPzolLLDA_mo9MDNlki1rWu4h6M0br2EjqPuYysY/edit?ts\u003d5989d897#heading\u003dh.k1h25blerz3i\n\nWe still need to verify it with scheduler-dev.",
      "parentUuid": "75361966_c1170e11",
      "revId": "afe25dd18eea781c9a54490864530a129e39bf98",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}