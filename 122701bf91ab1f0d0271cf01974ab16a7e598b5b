{
  "comments": [
    {
      "key": {
        "uuid": "12812821_6420c8d9",
        "filename": "base/message_loop/message_pump_fuchsia.cc",
        "patchSetId": 6
      },
      "lineNbr": 125,
      "author": {
        "id": 1001445
      },
      "writtenOn": "2017-06-06T01:02:09Z",
      "side": 1,
      "message": "the values you get back aren\u0027t necessarily the bits you passed to __mxio_wait_begin() - __mxio_wait_begin() will map the inputs you pass in to the internal signals appropriate for the implementation, then on the way back you need to translate back into the domain you care about (MXIO_EVT_...).  to do that, call __mxio_wait_end() with the raw signals from the kernel. it looks something like\n\nuint32_t signals;\n__mxio_wait_end(controller_-\u003eio_, packet.signal.observed, \u0026signals);\n\nthen test for (signals \u0026 MXIO_EVT_READABLE) etc\n\nthis is necessary since different implementations of the mxio_t* protocol may use different signal bits for readable/writable/etc",
      "revId": "122701bf91ab1f0d0271cf01974ab16a7e598b5b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1a41aa94_a6b7e860",
        "filename": "base/message_loop/message_pump_fuchsia.cc",
        "patchSetId": 6
      },
      "lineNbr": 125,
      "author": {
        "id": 1144260
      },
      "writtenOn": "2017-06-06T17:48:21Z",
      "side": 1,
      "message": "I see. Thanks, done.",
      "parentUuid": "12812821_6420c8d9",
      "revId": "122701bf91ab1f0d0271cf01974ab16a7e598b5b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dfd2cf86_281d85af",
        "filename": "base/message_loop/message_pump_fuchsia.cc",
        "patchSetId": 6
      },
      "lineNbr": 125,
      "author": {
        "id": 1144260
      },
      "writtenOn": "2017-06-06T21:06:38Z",
      "side": 1,
      "message": "Does it seem reasonable to use .trigger here instead of .observed?\n\nI was just debugging the (tersely named) MessageLoopForIOOnOtherThread/FileDescriptorWatcherTest.DeleteControllerAfterFileDescriptorReadable/0\n\nand what I\u0027m seeing is:\n\n- pass 1 \u003d\u003d MXIO_EVT_READABLE to __mxio_wait_begin()\n- it returns signals \u003d\u003d 5 \u003d\u003d __MX_OBJECT_READABLE | __MX_OBJECT_PEER_CLOSED (I think)\n- then calling mx_object_wait_async() with those signals\n- when mx_port_wait() returns, packet.signal.observed is \n\n\u003e\u003e\u003e hex(4194307)\n\u00270x400003\u0027\n\u003e\u003e\u003e bin(4194307)\n\u00270b10000000000000000000011\u0027\n\nwhich I think is READABLE | WRITABLE | LAST_HANDLE.\n\nWhen decoded back into events by __mxio_wait_end(), that causes OnFileCanWriteWithoutBlocking() to be unexpectedly called in tests.",
      "parentUuid": "1a41aa94_a6b7e860",
      "revId": "122701bf91ab1f0d0271cf01974ab16a7e598b5b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c20329dc_688df95f",
        "filename": "base/message_loop/message_pump_fuchsia.cc",
        "patchSetId": 6
      },
      "lineNbr": 125,
      "author": {
        "id": 1144260
      },
      "writtenOn": "2017-06-06T21:18:58Z",
      "side": 1,
      "message": "For a bit more context, the thing that\u0027s being watched is\n\nhttps://cs.chromium.org/chromium/src/base/files/file_descriptor_watcher_posix_unittest.cc?rcl\u003dbf671ef01f848c38d2259f98b4fdc24c9666f5db\u0026l\u003d279\n\nwhich I believe is \n\nhttps://cs.chromium.org/chromium/src/base/files/file_descriptor_watcher_posix_unittest.cc?rcl\u003dbf671ef01f848c38d2259f98b4fdc24c9666f5db\u0026l\u003d100\n\nwhich is the read end of a pipe https://cs.chromium.org/chromium/src/base/files/file_descriptor_watcher_posix_unittest.cc?rcl\u003dbf671ef01f848c38d2259f98b4fdc24c9666f5db\u0026l\u003d89\n\nSo maybe it actually shouldn\u0027t be observing WRITABLE?\n\n(I assume it\u0027s going through mx_pipe_wait_begin/_end() and that looks fine, so I\u0027m not actually sure where the 0x400003 is coming from now. Maybe that\u0027s just how pipe()\u0027s fds work.)",
      "parentUuid": "dfd2cf86_281d85af",
      "revId": "122701bf91ab1f0d0271cf01974ab16a7e598b5b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}