{
  "comments": [
    {
      "key": {
        "uuid": "b69c7278_8b54c451",
        "filename": "chrome/browser/chromeos/policy/device_off_hours_controller.cc",
        "patchSetId": 19
      },
      "lineNbr": 35,
      "author": {
        "id": 1126309
      },
      "writtenOn": "2017-09-07T15:36:10Z",
      "side": 1,
      "message": "nit: Now that the class lost all the nontrivial logic, I\u0027m feeling that it could be converted back to struct (besides the rest, it\u0027ll allow to drop those ugly getters).",
      "range": {
        "startLine": 35,
        "startChar": 0,
        "endLine": 35,
        "endChar": 5
      },
      "revId": "5b0eb96bfdd861c45f0cba088141ec049d5cfbaf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3446de8a_d37140f0",
        "filename": "chrome/browser/chromeos/policy/device_off_hours_controller.cc",
        "patchSetId": 19
      },
      "lineNbr": 39,
      "author": {
        "id": 1126309
      },
      "writtenOn": "2017-09-07T15:36:10Z",
      "side": 1,
      "message": "nit: DCHECK_GT (and its friends) are a little better, as they also include the bogus value into the message.",
      "range": {
        "startLine": 39,
        "startChar": 4,
        "endLine": 39,
        "endChar": 10
      },
      "revId": "5b0eb96bfdd861c45f0cba088141ec049d5cfbaf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cdcc3169_f8ef9627",
        "filename": "chrome/browser/chromeos/policy/device_off_hours_controller.cc",
        "patchSetId": 19
      },
      "lineNbr": 55,
      "author": {
        "id": 1126309
      },
      "writtenOn": "2017-09-07T15:36:10Z",
      "side": 1,
      "message": "nit: I\u0027m feeling uncomfortable about naming this function \"operator\u003c\u003d\". These |WeeklyTime| objects are conceptually wrapping across multiple weeks, and in this sense there\u0027s no particular order on these objects. (I understand that here you\u0027re considering times as non-wrapping, but this ambiguity isn\u0027t good.)",
      "range": {
        "startLine": 55,
        "startChar": 7,
        "endLine": 55,
        "endChar": 17
      },
      "revId": "5b0eb96bfdd861c45f0cba088141ec049d5cfbaf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3b9405e2_0061b519",
        "filename": "chrome/browser/chromeos/policy/device_off_hours_controller.cc",
        "patchSetId": 19
      },
      "lineNbr": 114,
      "author": {
        "id": 1126309
      },
      "writtenOn": "2017-09-07T15:36:10Z",
      "side": 1,
      "message": "Wrapping int in a unique_ptr seems a bit odd.\nErrors are more often signaled in our code base via returning a bool value (with the actual result being returned via a pointer).\nOr, alternatively, base::Optional can be used for these purposes.",
      "range": {
        "startLine": 114,
        "startChar": 0,
        "endLine": 114,
        "endChar": 20
      },
      "revId": "5b0eb96bfdd861c45f0cba088141ec049d5cfbaf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7ef060ea_6b7f6225",
        "filename": "chrome/browser/chromeos/policy/device_off_hours_controller.cc",
        "patchSetId": 19
      },
      "lineNbr": 116,
      "author": {
        "id": 1126309
      },
      "writtenOn": "2017-09-07T15:36:10Z",
      "side": 1,
      "message": "If |timezone| was parsed unsuccessfully, then icu::TimeZone::getUnknown() will be returned here.\nAre you fine with this, or is it maybe better to signal an error here?",
      "range": {
        "startLine": 116,
        "startChar": 21,
        "endLine": 116,
        "endChar": 35
      },
      "revId": "5b0eb96bfdd861c45f0cba088141ec049d5cfbaf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4ac88d96_0472ebb0",
        "filename": "chrome/browser/chromeos/policy/device_off_hours_controller.cc",
        "patchSetId": 19
      },
      "lineNbr": 123,
      "author": {
        "id": 1126309
      },
      "writtenOn": "2017-09-07T15:36:10Z",
      "side": 1,
      "message": "nit: The name is too cryptic.",
      "range": {
        "startLine": 123,
        "startChar": 42,
        "endLine": 123,
        "endChar": 44
      },
      "revId": "5b0eb96bfdd861c45f0cba088141ec049d5cfbaf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "22fd3dec_95d941af",
        "filename": "chrome/browser/chromeos/policy/device_off_hours_controller.cc",
        "patchSetId": 19
      },
      "lineNbr": 314,
      "author": {
        "id": 1126309
      },
      "writtenOn": "2017-09-07T15:36:10Z",
      "side": 1,
      "message": "nit: This piece of code is duplicated three times in this function, and overall the function is a bit hard to read.\nWhat about restructuring it into smaller pieces? I haven\u0027t gone deeply through the logic here, but the first step could be transforming this into something like \"bool GetCurrentOffHoursModeFromPolicy(input_policies)\"?",
      "range": {
        "startLine": 313,
        "startChar": 4,
        "endLine": 314,
        "endChar": 32
      },
      "revId": "5b0eb96bfdd861c45f0cba088141ec049d5cfbaf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "befacb7e_f4878cfa",
        "filename": "chrome/browser/chromeos/policy/device_off_hours_controller.h",
        "patchSetId": 19
      },
      "lineNbr": 43,
      "author": {
        "id": 1126309
      },
      "writtenOn": "2017-09-07T15:36:10Z",
      "side": 1,
      "message": "nit: If this turns out to be the only method in the observer, and if |DeviceSettingsService| will be its only subscriber - then maybe drop the |Observer| class completely, and use a callback instead?\nIt\u0027ll be a bit easier to read, IMHO.",
      "range": {
        "startLine": 43,
        "startChar": 17,
        "endLine": 43,
        "endChar": 43
      },
      "revId": "5b0eb96bfdd861c45f0cba088141ec049d5cfbaf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "466788aa_1019e8c3",
        "filename": "chrome/browser/chromeos/policy/device_off_hours_controller.h",
        "patchSetId": 19
      },
      "lineNbr": 47,
      "author": {
        "id": 1126309
      },
      "writtenOn": "2017-09-07T15:36:10Z",
      "side": 1,
      "message": "Now that |DeviceOffHoursController| is owned by |DeviceSettingsService|, can we get rid of this?\nI mean, the lifetime of |DeviceOffHoursController| is now clearly bound, so it\u0027s pretty clear when it\u0027s getting destroyed.",
      "range": {
        "startLine": 47,
        "startChar": 4,
        "endLine": 47,
        "endChar": 48
      },
      "revId": "5b0eb96bfdd861c45f0cba088141ec049d5cfbaf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f42cfe42_757685f0",
        "filename": "chrome/browser/chromeos/policy/device_off_hours_controller.h",
        "patchSetId": 19
      },
      "lineNbr": 69,
      "author": {
        "id": 1126309
      },
      "writtenOn": "2017-09-07T15:36:10Z",
      "side": 1,
      "message": "Is there a good reason for keeping this method being static? As the first thing it does is obtaining the pointer to |DeviceOffHoursController|. If anyone outside really needs to call this method without a pointer to an object, hey can do this now via |DeviceSettingsService|.",
      "range": {
        "startLine": 69,
        "startChar": 2,
        "endLine": 69,
        "endChar": 8
      },
      "revId": "5b0eb96bfdd861c45f0cba088141ec049d5cfbaf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8454bd3b_0c2cd894",
        "filename": "chrome/browser/chromeos/policy/device_off_hours_controller.h",
        "patchSetId": 19
      },
      "lineNbr": 75,
      "author": {
        "id": 1126309
      },
      "writtenOn": "2017-09-07T15:36:10Z",
      "side": 1,
      "message": "nit: This methods seems to be really standalone, and not much dependent on the |DeviceOffHoursController| at all. Can we move it outside, just like ConvertOffHoursProtoToValue()?",
      "range": {
        "startLine": 75,
        "startChar": 2,
        "endLine": 75,
        "endChar": 8
      },
      "revId": "5b0eb96bfdd861c45f0cba088141ec049d5cfbaf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f16078b6_d045baad",
        "filename": "chrome/browser/chromeos/policy/device_off_hours_controller.h",
        "patchSetId": 19
      },
      "lineNbr": 106,
      "author": {
        "id": 1126309
      },
      "writtenOn": "2017-09-07T15:36:10Z",
      "side": 1,
      "message": "nit: Typically it\u0027s preferred to have classes being noncopyable, unless there\u0027s a strong reason for otherwise.",
      "range": {
        "startLine": 106,
        "startChar": 2,
        "endLine": 106,
        "endChar": 6
      },
      "revId": "5b0eb96bfdd861c45f0cba088141ec049d5cfbaf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8a3d6d57_31137562",
        "filename": "chrome/browser/chromeos/settings/device_settings_service.cc",
        "patchSetId": 19
      },
      "lineNbr": 7,
      "author": {
        "id": 1126309
      },
      "writtenOn": "2017-09-07T15:36:10Z",
      "side": 1,
      "message": "nit: Not needed?",
      "range": {
        "startLine": 7,
        "startChar": 0,
        "endLine": 7,
        "endChar": 17
      },
      "revId": "5b0eb96bfdd861c45f0cba088141ec049d5cfbaf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}