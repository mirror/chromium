{
  "comments": [
    {
      "key": {
        "uuid": "7ff0641a_22971505",
        "filename": "chrome/browser/extensions/api/web_request/web_request_apitest.cc",
        "patchSetId": 2
      },
      "lineNbr": 879,
      "author": {
        "id": 1001766
      },
      "writtenOn": "2018-01-06T00:59:43Z",
      "side": 1,
      "message": "not sure that is the right spelling.\nI suggest \"wait until\"",
      "range": {
        "startLine": 879,
        "startChar": 5,
        "endLine": 879,
        "endChar": 15
      },
      "revId": "00c30b061584e0316b54553f4169dac011f597a6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5c437905_9620f69f",
        "filename": "chrome/browser/extensions/api/web_request/web_request_apitest.cc",
        "patchSetId": 2
      },
      "lineNbr": 879,
      "author": {
        "id": 1115968
      },
      "writtenOn": "2018-01-08T19:47:41Z",
      "side": 1,
      "message": "Done.  This was just copied from old code.",
      "parentUuid": "7ff0641a_22971505",
      "range": {
        "startLine": 879,
        "startChar": 5,
        "endLine": 879,
        "endChar": 15
      },
      "revId": "00c30b061584e0316b54553f4169dac011f597a6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c2370ee5_b6ddce58",
        "filename": "chrome/browser/extensions/api/web_request/web_request_apitest.cc",
        "patchSetId": 2
      },
      "lineNbr": 903,
      "author": {
        "id": 1001766
      },
      "writtenOn": "2018-01-06T00:59:43Z",
      "side": 1,
      "message": "How about making the extension count /title2.html as well?\n\nThat way the test can assert that /title2.html was seen, as a control that the setup was correct.",
      "revId": "00c30b061584e0316b54553f4169dac011f597a6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4424d198_7a4f4c02",
        "filename": "chrome/browser/extensions/api/web_request/web_request_apitest.cc",
        "patchSetId": 2
      },
      "lineNbr": 903,
      "author": {
        "id": 1115968
      },
      "writtenOn": "2018-01-08T19:47:41Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c2370ee5_b6ddce58",
      "revId": "00c30b061584e0316b54553f4169dac011f597a6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e213320b_9edbe1c6",
        "filename": "chrome/test/data/extensions/api_test/webrequest_pac_request/background.js",
        "patchSetId": 2
      },
      "lineNbr": 1,
      "author": {
        "id": 1001766
      },
      "writtenOn": "2018-01-06T00:59:43Z",
      "side": 1,
      "message": "optional: 2018",
      "range": {
        "startLine": 1,
        "startChar": 13,
        "endLine": 1,
        "endChar": 17
      },
      "revId": "00c30b061584e0316b54553f4169dac011f597a6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9396e67e_4ebb8a5a",
        "filename": "chrome/test/data/extensions/api_test/webrequest_pac_request/background.js",
        "patchSetId": 2
      },
      "lineNbr": 1,
      "author": {
        "id": 1115968
      },
      "writtenOn": "2018-01-08T19:47:41Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e213320b_9edbe1c6",
      "range": {
        "startLine": 1,
        "startChar": 13,
        "endLine": 1,
        "endChar": 17
      },
      "revId": "00c30b061584e0316b54553f4169dac011f597a6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f1d8d992_de4f36e0",
        "filename": "extensions/browser/api/web_request/web_request_api.cc",
        "patchSetId": 2
      },
      "lineNbr": 317,
      "author": {
        "id": 1001766
      },
      "writtenOn": "2018-01-06T00:59:43Z",
      "side": 1,
      "message": "side-comment:\n\nThis blacklist approach seems like it will be hard to keep up to date. While not new to this CL, it feels fragile to expect this to stay up to date in a manner necessary to assure  webrequest\u0027s privacy/security goals. I wonder if this couldn\u0027t be inverted to a blacklist.",
      "revId": "00c30b061584e0316b54553f4169dac011f597a6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1da45d0a_9232bfb5",
        "filename": "extensions/browser/api/web_request/web_request_api.cc",
        "patchSetId": 2
      },
      "lineNbr": 317,
      "author": {
        "id": 1115968
      },
      "writtenOn": "2018-01-08T19:47:41Z",
      "side": 1,
      "message": "Ack.  Not going to change this because it requires auditing hundreds of URLFetcher consumers, and with the network service stuff, it will all end up being completely rewritten, anyways.",
      "parentUuid": "f1d8d992_de4f36e0",
      "revId": "00c30b061584e0316b54553f4169dac011f597a6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a086eee9_9662be3a",
        "filename": "extensions/browser/api/web_request/web_request_api.cc",
        "patchSetId": 2
      },
      "lineNbr": 317,
      "author": {
        "id": 1115745
      },
      "writtenOn": "2018-01-08T20:57:51Z",
      "side": 1,
      "message": "Hmm... not sure I follow the suggestion here?  (Though agreed that anything here is likely orthogonal to this CL)",
      "parentUuid": "1da45d0a_9232bfb5",
      "revId": "00c30b061584e0316b54553f4169dac011f597a6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "364100c5_60e2c283",
        "filename": "extensions/browser/api/web_request/web_request_api.cc",
        "patchSetId": 2
      },
      "lineNbr": 317,
      "author": {
        "id": 1001766
      },
      "writtenOn": "2018-01-08T22:55:28Z",
      "side": 1,
      "message": "I didn\u0027t have a specific suggestion, was just commenting on this function in general given that my eyes were on it!\n\nMy concern was that this blacklist is maintained independently, and there is no compile-time or process that ensures it remains up to date. As there isn\u0027t much awareness of this dependency by authors adding new URLRequests/URLFetcher dependencies, it would be easy for a new sort of request to get introduced at another layer, that violates the expectation here.\n\nFor instance, we have other magic requests like for certificate revocation lists, certificate status checks, certificate intermediate fetches, network error reporting/logging etc, which may or may not interact poorly with this. Certainly when working on CertNetFetcher for certificate fetches I hadn\u0027t considered webrequest interception (goal was for them to go through the main URLRequest).\n\nPossible other approaches could be to try and invert from blacklist to whitelist, and/or explicitly label requests. Maybe there is room to use network traffic annotation which is already a mandatory parameter, and code the webrequest policy in terms of that. Or maybe add a more general property to \"is_pac_request\" that is say \"unsafe_to_intercept\", and rely on authors to tag new requests rather than update this list.\n\nJust thinking out loud here, I haven\u0027t thought this through in detail. But I have thought a bit about the possible failure modes of the current approach at least.",
      "parentUuid": "a086eee9_9662be3a",
      "revId": "00c30b061584e0316b54553f4169dac011f597a6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b69722db_20f6fdd0",
        "filename": "net/test/embedded_test_server/default_handlers.cc",
        "patchSetId": 2
      },
      "lineNbr": 680,
      "author": {
        "id": 1001766
      },
      "writtenOn": "2018-01-06T00:59:43Z",
      "side": 1,
      "message": "PROXY %s",
      "range": {
        "startLine": 680,
        "startChar": 15,
        "endLine": 680,
        "endChar": 17
      },
      "revId": "00c30b061584e0316b54553f4169dac011f597a6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2f331f4a_6a62bd2d",
        "filename": "net/test/embedded_test_server/default_handlers.cc",
        "patchSetId": 2
      },
      "lineNbr": 680,
      "author": {
        "id": 1115968
      },
      "writtenOn": "2018-01-08T19:47:41Z",
      "side": 1,
      "message": "Erm...Oops.  Done, thanks for catching that!",
      "parentUuid": "b69722db_20f6fdd0",
      "range": {
        "startLine": 680,
        "startChar": 15,
        "endLine": 680,
        "endChar": 17
      },
      "revId": "00c30b061584e0316b54553f4169dac011f597a6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5c012a8e_ef79d378",
        "filename": "net/test/embedded_test_server/default_handlers.cc",
        "patchSetId": 2
      },
      "lineNbr": 683,
      "author": {
        "id": 1001766
      },
      "writtenOn": "2018-01-06T00:59:43Z",
      "side": 1,
      "message": "nit: remove the std::move()\n(May need to change the return type to std::unique_ptr\u003cBasicHttpResponse\u003e)",
      "revId": "00c30b061584e0316b54553f4169dac011f597a6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1ad02e0f_ebe07930",
        "filename": "net/test/embedded_test_server/default_handlers.cc",
        "patchSetId": 2
      },
      "lineNbr": 683,
      "author": {
        "id": 1115968
      },
      "writtenOn": "2018-01-08T19:47:41Z",
      "side": 1,
      "message": "That doesn\u0027t work.  I can\u0027t change it to returning a BasicHttpResponse since this is bound and passed as a EmbeddedTestServer::HandleRequestCallback.  I can\u0027t just return the http_response because the types don\u0027t match.\n\nI believe either clang or presubmit checks whine about return \"std::move(...)\" in cases where it can just be removed.",
      "parentUuid": "5c012a8e_ef79d378",
      "revId": "00c30b061584e0316b54553f4169dac011f597a6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "05d22cb8_ac1d3d49",
        "filename": "net/test/embedded_test_server/default_handlers.cc",
        "patchSetId": 2
      },
      "lineNbr": 683,
      "author": {
        "id": 1001766
      },
      "writtenOn": "2018-01-08T22:55:28Z",
      "side": 1,
      "message": "Ah ok.",
      "parentUuid": "1ad02e0f_ebe07930",
      "revId": "00c30b061584e0316b54553f4169dac011f597a6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "970cd3f8_f7b0b85b",
        "filename": "net/url_request/url_request.h",
        "patchSetId": 2
      },
      "lineNbr": 666,
      "author": {
        "id": 1001766
      },
      "writtenOn": "2018-01-06T00:59:43Z",
      "side": 1,
      "message": "What about using SetUserData() ?\n\nIt is uglier to retrieve the value, but at least we won\u0027t pollute URLRequest\u0027s interface with this one-off attribute.",
      "revId": "00c30b061584e0316b54553f4169dac011f597a6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e5b531a0_caf6c16b",
        "filename": "net/url_request/url_request.h",
        "patchSetId": 2
      },
      "lineNbr": 666,
      "author": {
        "id": 1115968
      },
      "writtenOn": "2018-01-08T19:47:41Z",
      "side": 1,
      "message": "I considered that, but decided against it.  SetUserData() is a way for external consumers to associate data with a URLRequest.  In this case, the consumer is ProxyScriptFetcher, which is an internal consumer, and this makes it part of the official API.  I also prefer consumers depending a url_request.h rather than net/proxy/proxy_script_fetcher_impl.h (Or net/proxy/proxy_script_fetcher.h).  I also want to get away from SetUserData().  With the advent of the network service, I don\u0027t think we\u0027ll need to support than any more (Though, admittedly, at that point, we can probably get rid of this value, anyways - and having it here also means that my TODO is less likely to be overlooked.  By me, at least)",
      "parentUuid": "970cd3f8_f7b0b85b",
      "revId": "00c30b061584e0316b54553f4169dac011f597a6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "79c828e4_2f7dfdfd",
        "filename": "net/url_request/url_request.h",
        "patchSetId": 2
      },
      "lineNbr": 666,
      "author": {
        "id": 1001766
      },
      "writtenOn": "2018-01-08T22:55:28Z",
      "side": 1,
      "message": "This still feels like a very narrowly scoped property, exclusively used for the extension case.\n\nI would be interested in a more general solution like \"is_interceptable_request\" (not a good name, but demonstrates the concept) which could be used for all requests, or even piggy-backing off of network traffic annotations whose goal is also to describe intent.\n\nI am fine with this to fix the immediate problem, but this seems like an undesirable long-term solution.",
      "parentUuid": "e5b531a0_caf6c16b",
      "revId": "00c30b061584e0316b54553f4169dac011f597a6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c6c8870d_ab31b4b9",
        "filename": "net/url_request/url_request.h",
        "patchSetId": 2
      },
      "lineNbr": 666,
      "author": {
        "id": 1115968
      },
      "writtenOn": "2018-01-09T17:32:18Z",
      "side": 1,
      "message": "I agree, but consider SetUserData even less desirable.  I\u0027m hoping we can just get rid of it, once we have WebRequest extensions hooked up to the network service (As hopefully these requests will be invisible to the new hooks for that).",
      "parentUuid": "79c828e4_2f7dfdfd",
      "revId": "00c30b061584e0316b54553f4169dac011f597a6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8c66726a_e1d44740",
        "filename": "net/url_request/url_request.h",
        "patchSetId": 2
      },
      "lineNbr": 901,
      "author": {
        "id": 1001766
      },
      "writtenOn": "2018-01-06T00:59:43Z",
      "side": 1,
      "message": "Can this be more specific? (clarify what PAC is, and that this identifies the intent of the request, and not anything inferred from the response).\n\nHow about:\n\nTrue if this request was issued by the proxy service subsystem in order to probe/fetch a Proxy Auto Config script.",
      "range": {
        "startLine": 901,
        "startChar": 37,
        "endLine": 901,
        "endChar": 47
      },
      "revId": "00c30b061584e0316b54553f4169dac011f597a6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "69a886af_db832891",
        "filename": "net/url_request/url_request.h",
        "patchSetId": 2
      },
      "lineNbr": 901,
      "author": {
        "id": 1115968
      },
      "writtenOn": "2018-01-08T19:47:41Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8c66726a_e1d44740",
      "range": {
        "startLine": 901,
        "startChar": 37,
        "endLine": 901,
        "endChar": 47
      },
      "revId": "00c30b061584e0316b54553f4169dac011f597a6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}