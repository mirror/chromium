{
  "comments": [
    {
      "key": {
        "uuid": "0fc9cf28_49d55201",
        "filename": "content/browser/service_worker/service_worker_provider_host.cc",
        "patchSetId": 4
      },
      "lineNbr": 318,
      "author": {
        "id": 1000128
      },
      "writtenOn": "2017-07-26T02:24:13Z",
      "side": 1,
      "message": "Sorry.. didn\u0027t realize my reland reverting something...\n\nHowever, I\u0027m a bit confused now.\n\nFor script streaming, we only come here if the script wasn\u0027t in the renderer-side script streaming manager, right? That means they are loading a script that wasn\u0027t installed, or they are loading the same script twice (calling importScripts() twice for the same script or importScripts() on the main script).\n\nI think we want to basically do what ServiceWorkerContextRequestHandler does in this case: and read from the database if available, or else fall back to network (soon-to-be-deprecated spec violation).\n\nIs the idea just fallback to network for now, but later be able to do something like ServiceWorkerReadFromCacheJob?",
      "revId": "a7203df5028d28d3bfd99050a9505e422e51e07b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "71f3552e_2ac78f2f",
        "filename": "content/browser/service_worker/service_worker_provider_host.cc",
        "patchSetId": 4
      },
      "lineNbr": 318,
      "author": {
        "id": 1125915
      },
      "writtenOn": "2017-07-26T02:33:02Z",
      "side": 1,
      "message": "I think ReadFromCacheJob could be completely replaced by InstalledScriptsManager after we implement the second read case in WebSWInstalledScriptsManager.\n\nThere is a TODO here:\nhttps://cs.chromium.org/chromium/src/content/renderer/service_worker/web_service_worker_installed_scripts_manager_impl.cc?sq\u003dpackage:chromium\u0026l\u003d240",
      "parentUuid": "0fc9cf28_49d55201",
      "revId": "a7203df5028d28d3bfd99050a9505e422e51e07b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bd162e63_23ed6376",
        "filename": "content/browser/service_worker/service_worker_provider_host.cc",
        "patchSetId": 4
      },
      "lineNbr": 318,
      "author": {
        "id": 1001472
      },
      "writtenOn": "2017-07-26T02:36:49Z",
      "side": 1,
      "message": "Yes the idea is just to fallback to network for now. My hope is that we wouldn\u0027t need SWReadFromCacheJob like code though given that the former case should result in error and ScriptStreaming code will be able to take care of the latter case (maybe we could force enabling ScriptStreaming if servicification is enabled), and only need something like WriteToCacheJob.",
      "parentUuid": "0fc9cf28_49d55201",
      "revId": "a7203df5028d28d3bfd99050a9505e422e51e07b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ea718902_f94ce512",
        "filename": "content/browser/service_worker/service_worker_provider_host.cc",
        "patchSetId": 4
      },
      "lineNbr": 320,
      "author": {
        "id": 1000128
      },
      "writtenOn": "2017-07-26T03:32:39Z",
      "side": 1,
      "message": "OK how about a comment like this:\n\n// If script streaming is enabled, for installed service workers, typically all the scripts are served via script streaming, so we don\u0027t come here. However, we still come here when the service worker is A) importing a script that was never installed, or B) loading the same script twice. For now, return false here to fallback to network. Eventually, A) should be deprecated (https://crbug.com/719052), and B) should be handled by script streaming as well, see the TODO in WebServiceWorkerInstalledScriptsManagerImpl::GetRawScriptData().\n//\n// When script streaming is not enabled, we get here even for the main script. Therefore, ScriptURLLoader must handle the request (even though it currently just does a network fetch for now), because it sets the main script\u0027s HTTP Response Info (via ServiceWorkerVersion::SetMainScriptHttpResponseInfo()) which otherwise would never be set.",
      "revId": "a7203df5028d28d3bfd99050a9505e422e51e07b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d55c62c7_ea4c2abd",
        "filename": "content/browser/service_worker/service_worker_provider_host.cc",
        "patchSetId": 4
      },
      "lineNbr": 320,
      "author": {
        "id": 1001472
      },
      "writtenOn": "2017-07-26T05:37:03Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ea718902_f94ce512",
      "revId": "a7203df5028d28d3bfd99050a9505e422e51e07b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b7e1e995_1d1be25e",
        "filename": "content/common/service_worker/service_worker_provider.mojom",
        "patchSetId": 4
      },
      "lineNbr": 22,
      "author": {
        "id": 1000128
      },
      "writtenOn": "2017-07-26T03:32:39Z",
      "side": 1,
      "message": "// For servicified service worker only.\n// The loader to use for loading the worker\u0027s main script and importScripts().\n\n(feels like we need a codename for servicified service worker)",
      "revId": "a7203df5028d28d3bfd99050a9505e422e51e07b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}