{
  "comments": [
    {
      "key": {
        "uuid": "049fede9_fd785e47",
        "filename": "gpu/command_buffer/common/gles2_cmd_utils.h",
        "patchSetId": 2
      },
      "lineNbr": 260,
      "author": {
        "id": 1148065
      },
      "writtenOn": "2017-07-05T17:57:52Z",
      "side": 1,
      "message": "Could we keep using CheckedNumeric? Not only it ensures the code is (and stays) right, but it provides useful documentation that this is security-sensitive.",
      "revId": "11330ac0e4e0dbeb82565f5276f73714025885db",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4361737d_0cab6c07",
        "filename": "gpu/command_buffer/common/gles2_cmd_utils.h",
        "patchSetId": 2
      },
      "lineNbr": 260,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2017-07-05T20:47:07Z",
      "side": 1,
      "message": "The hotspot when profiling was in the CheckedNumeric multiply code which this avoids.  That said, I could still avoid one of the two the multiplies given that the multiplication of the type size and elements_per_unit is guaranteed to never overflow.  I could also add a DCHECK with CheckedNumerics that the result has not overflowed.\n\nI\u0027m fine without landing it too but it was the 2nd highest hotspot in chrome_child.dll with the passthrough command buffer so it could be worth optimizing.",
      "parentUuid": "049fede9_fd785e47",
      "revId": "11330ac0e4e0dbeb82565f5276f73714025885db",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "487ae358_2f52b324",
        "filename": "gpu/command_buffer/common/gles2_cmd_utils.h",
        "patchSetId": 2
      },
      "lineNbr": 260,
      "author": {
        "id": 1148065
      },
      "writtenOn": "2017-07-05T21:22:00Z",
      "side": 1,
      "message": "The previous code would expose that because it checks for validity twice (or even 4 times possibly).\nBut here if you first multiply the constant values (which should be inlined/folded by the compiler) and then do a checked multiply of count with that it should be equivalent to this code?\n\nIf there are still performance issues with that version, jschuh@ would like to know.",
      "parentUuid": "4361737d_0cab6c07",
      "revId": "11330ac0e4e0dbeb82565f5276f73714025885db",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4bf28574_64ee204a",
        "filename": "gpu/command_buffer/common/gles2_cmd_utils.h",
        "patchSetId": 2
      },
      "lineNbr": 260,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2017-07-06T15:16:16Z",
      "side": 1,
      "message": "I updated to use a single call to SafeMultiplyUint32 but I dug into the code for the CheckedNumeric\u003cuint32_t\u003e mulitplication a bit.  It does a lot of work, at least 20 boolean operations and a few add/xor/div instructions.",
      "parentUuid": "487ae358_2f52b324",
      "revId": "11330ac0e4e0dbeb82565f5276f73714025885db",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}