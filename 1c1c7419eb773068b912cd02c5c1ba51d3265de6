{
  "comments": [
    {
      "key": {
        "uuid": "f255408e_5c0fff13",
        "filename": "chrome/browser/web_applications/web_app.cc",
        "patchSetId": 5
      },
      "lineNbr": 533,
      "author": {
        "id": 1151758
      },
      "writtenOn": "2017-07-28T17:38:35Z",
      "side": 1,
      "message": "Where does app_name come from? Shouldn\u0027t it be already in UTF-8?",
      "range": {
        "startLine": 533,
        "startChar": 61,
        "endLine": 533,
        "endChar": 66
      },
      "revId": "1c1c7419eb773068b912cd02c5c1ba51d3265de6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2eae37a5_4b6064ea",
        "filename": "chrome/browser/web_applications/web_app.cc",
        "patchSetId": 5
      },
      "lineNbr": 533,
      "author": {
        "id": 1197289
      },
      "writtenOn": "2017-07-28T21:29:21Z",
      "side": 1,
      "message": "Done, it\u0027s concatenated either from extension id(ASCII chars) or from GURL.spec(), which is utf-8.\n\nFor extension id, in extensions/common/extension_id.h.\n// If valid, uniquely identifies an Extension using 32 characters from the\n// alphabet \u0027a\u0027-\u0027p\u0027.\n\nFor GURL.spec(), in url/gurl.h,\n// A parsed canonicalized URL will be guaranteed UTF-8.\n// The string representation of a URL is called the spec(). Getting the\n// spec will assert if the URL is invalid to help protect against malicious\n// URLs.\n\nSo it\u0027s probably already utf-8. Also fix the call site in shell_integration_linux.cc where it passes in GURL.",
      "parentUuid": "f255408e_5c0fff13",
      "range": {
        "startLine": 533,
        "startChar": 61,
        "endLine": 533,
        "endChar": 66
      },
      "revId": "1c1c7419eb773068b912cd02c5c1ba51d3265de6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "baf85799_54aeb412",
        "filename": "content/browser/download/save_package.cc",
        "patchSetId": 5
      },
      "lineNbr": 1286,
      "author": {
        "id": 1151758
      },
      "writtenOn": "2017-07-28T17:38:35Z",
      "side": 1,
      "message": "This should be UTF-8, too given what\u0027s done before getting here.",
      "range": {
        "startLine": 1286,
        "startChar": 62,
        "endLine": 1286,
        "endChar": 69
      },
      "revId": "1c1c7419eb773068b912cd02c5c1ba51d3265de6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "14983eed_1c07b800",
        "filename": "content/browser/download/save_package.cc",
        "patchSetId": 5
      },
      "lineNbr": 1286,
      "author": {
        "id": 1197289
      },
      "writtenOn": "2017-07-28T21:29:21Z",
      "side": 1,
      "message": "Done, sorry, I didn\u0027t notice FilePath::FromUTF16Unsafe is already saved the file path as utf-8.",
      "parentUuid": "baf85799_54aeb412",
      "range": {
        "startLine": 1286,
        "startChar": 62,
        "endLine": 1286,
        "endChar": 69
      },
      "revId": "1c1c7419eb773068b912cd02c5c1ba51d3265de6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}