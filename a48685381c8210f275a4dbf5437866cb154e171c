{
  "comments": [
    {
      "key": {
        "uuid": "faa31931_613fe642",
        "filename": "cc/trees/layer_tree_host_impl_unittest.cc",
        "patchSetId": 5
      },
      "lineNbr": 6605,
      "author": {
        "id": 1000887
      },
      "writtenOn": "2017-09-11T14:48:58Z",
      "side": 1,
      "message": "You mean\u0027t gfx here right?",
      "revId": "a48685381c8210f275a4dbf5437866cb154e171c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d77fdeb8_e31e4457",
        "filename": "cc/trees/layer_tree_host_impl_unittest.cc",
        "patchSetId": 5
      },
      "lineNbr": 6605,
      "author": {
        "id": 1000805
      },
      "writtenOn": "2017-09-12T02:38:46Z",
      "side": 1,
      "message": "Yes.  Failed to catch this one when I reworked the CL from base to gfx.",
      "parentUuid": "faa31931_613fe642",
      "revId": "a48685381c8210f275a4dbf5437866cb154e171c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fed558d4_3523fd0a",
        "filename": "cc/trees/layer_tree_host_impl_unittest.cc",
        "patchSetId": 5
      },
      "lineNbr": 6631,
      "author": {
        "id": 1000887
      },
      "writtenOn": "2017-09-11T14:48:58Z",
      "side": 1,
      "message": "and here",
      "revId": "a48685381c8210f275a4dbf5437866cb154e171c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ab65b7a8_7bc051dd",
        "filename": "cc/trees/layer_tree_host_impl_unittest.cc",
        "patchSetId": 5
      },
      "lineNbr": 6631,
      "author": {
        "id": 1000805
      },
      "writtenOn": "2017-09-12T02:38:46Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fed558d4_3523fd0a",
      "revId": "a48685381c8210f275a4dbf5437866cb154e171c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8aa9b27b_8724b0f3",
        "filename": "device/sensors/data_fetcher_shared_memory_mac.cc",
        "patchSetId": 5
      },
      "lineNbr": 69,
      "author": {
        "id": 1116054
      },
      "writtenOn": "2017-09-11T15:20:09Z",
      "side": 1,
      "message": "looks like the precision is somewhat different here because the \u0027float\u0027 version will be used (axis_value is a float)",
      "revId": "a48685381c8210f275a4dbf5437866cb154e171c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3fdb88b4_9eb8192b",
        "filename": "device/sensors/data_fetcher_shared_memory_mac.cc",
        "patchSetId": 5
      },
      "lineNbr": 69,
      "author": {
        "id": 1000805
      },
      "writtenOn": "2017-09-12T02:38:46Z",
      "side": 1,
      "message": "So, to be clear, the issue is that the old code took a single-precision result of atan2 and then did a double-precision multiply/divide on it, whereas the new version does a single-precision multiply/divide.\n\nDoes the difference matter?  If so, I can fix by explicitly casting to double, but we should probably only do that if we\u0027re sure it matters.  Is it possible to write a test to validate this?",
      "parentUuid": "8aa9b27b_8724b0f3",
      "revId": "a48685381c8210f275a4dbf5437866cb154e171c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "00a2794d_cfe4ab40",
        "filename": "device/sensors/data_fetcher_shared_memory_mac.cc",
        "patchSetId": 5
      },
      "lineNbr": 69,
      "author": {
        "id": 1116054
      },
      "writtenOn": "2017-09-15T12:00:37Z",
      "side": 1,
      "message": "It probably doesn\u0027t but not entirely sure straight away. Maybe add a cast for now and a TODO to check later, it might be safer to treat as separate issue not sure if we have actual tests that can be impacted..",
      "parentUuid": "3fdb88b4_9eb8192b",
      "revId": "a48685381c8210f275a4dbf5437866cb154e171c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f1eb5e57_06560c09",
        "filename": "device/sensors/sensor_manager_chromeos.cc",
        "patchSetId": 5
      },
      "lineNbr": 142,
      "author": {
        "id": 1116054
      },
      "writtenOn": "2017-09-11T15:20:09Z",
      "side": 1,
      "message": "same here",
      "revId": "a48685381c8210f275a4dbf5437866cb154e171c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c16736ab_bb32b13d",
        "filename": "ios/chrome/browser/ui/side_swipe/side_swipe_navigation_view.mm",
        "patchSetId": 5
      },
      "lineNbr": 187,
      "author": {
        "id": 1000119
      },
      "writtenOn": "2017-09-11T14:25:18Z",
      "side": 1,
      "message": "CGFloat is a float on 32bit systems and a double on 64bit systems.  It looks like we will now use the float version of the constant everywhere.  I doubt the loss of precision will cause issues, but I wanted to bring it up.",
      "revId": "a48685381c8210f275a4dbf5437866cb154e171c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "485adf00_05efa0b2",
        "filename": "ios/chrome/browser/ui/side_swipe/side_swipe_navigation_view.mm",
        "patchSetId": 5
      },
      "lineNbr": 187,
      "author": {
        "id": 1000119
      },
      "writtenOn": "2017-09-11T15:30:42Z",
      "side": 1,
      "message": "On second thought, can we switch to \"CGFloat(base::kPiDouble)\" everywhere in this file?  That will give us the higher precision on arm64 and downcast to float as needed on armv7.",
      "parentUuid": "c16736ab_bb32b13d",
      "revId": "a48685381c8210f275a4dbf5437866cb154e171c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "66d03b1a_579b7f6a",
        "filename": "ios/chrome/browser/ui/side_swipe/side_swipe_navigation_view.mm",
        "patchSetId": 5
      },
      "lineNbr": 187,
      "author": {
        "id": 1000805
      },
      "writtenOn": "2017-09-12T02:38:46Z",
      "side": 1,
      "message": "I tried to do what you ask.  Another route would be to add a CGFloat version of the constant (under an ifdef) to base/numerics/math_constants.h.  I didn\u0027t go that route because it seemed of questionable utility, but feedback welcome.",
      "parentUuid": "485adf00_05efa0b2",
      "revId": "a48685381c8210f275a4dbf5437866cb154e171c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}