{
  "comments": [
    {
      "key": {
        "uuid": "7c4fdd65_a09abaf2",
        "filename": "ui/gl/DEPS",
        "patchSetId": 11
      },
      "lineNbr": 7,
      "author": {
        "id": 1002151
      },
      "writtenOn": "2017-09-28T21:33:43Z",
      "side": 1,
      "message": "Question: Is adding this dependency okay?",
      "revId": "80c23428f7a89ef3176bd7647a5a18bd6b5949cb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "70e70c81_b1e23643",
        "filename": "ui/gl/DEPS",
        "patchSetId": 11
      },
      "lineNbr": 7,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2017-09-29T02:54:42Z",
      "side": 1,
      "message": "It seems OK. I can\u0027t imagine ui/latency depending on ui/gl.",
      "parentUuid": "7c4fdd65_a09abaf2",
      "revId": "80c23428f7a89ef3176bd7647a5a18bd6b5949cb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9b6171ec_d6431df5",
        "filename": "ui/gl/gl_surface.h",
        "patchSetId": 11
      },
      "lineNbr": 90,
      "author": {
        "id": 1002151
      },
      "writtenOn": "2017-09-28T21:33:43Z",
      "side": 1,
      "message": "Forcing all SwapBuffers implementations to update LatencyInfo is a bit invasive, but is straightforward and makes it obvious when LatencyInfos are discarded by implementations and when they aren\u0027t available at call sites.\n\nAlternatively, this patch could add a separate method to add LatencyInfo before a swap and a way to get completed LatencyInfo (either through a callback or check), but it becomes less explicit where LatencyInfo is discarded or not available.\n\nA followup patch will add latency_info support to other flavors of swap buffers as needed, including Async, WithBounds, SubBuffer, etc.",
      "revId": "80c23428f7a89ef3176bd7647a5a18bd6b5949cb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e72d8d69_42941268",
        "filename": "ui/gl/gl_surface.h",
        "patchSetId": 11
      },
      "lineNbr": 90,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2017-09-29T02:54:42Z",
      "side": 1,
      "message": "Agree that this touches a lot of code, and a lot of it seems duplicated and somewhat boilerplate.\n\nI agree that changing SwapBuffers\u0027 signature may be the best way to ensure this information is maintained correctly, but changing all of the GLSurface implementations is also fragile. How will regressions be avoided?\n\nIs it really better to change all of the SwapBuffers implementations than the (apparently relatively few) call sites of SwapBuffers to do a before/after call, and assert somewhere/somehow that these were called? (Same question for the other SwapBuffers variants.) Would this allow the implementation to be mostly shared, at least among the platforms that don\u0027t support the timestamps you have in mind to expose?",
      "parentUuid": "9b6171ec_d6431df5",
      "revId": "80c23428f7a89ef3176bd7647a5a18bd6b5949cb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f0b3c77f_9377e66c",
        "filename": "ui/gl/gl_surface.h",
        "patchSetId": 11
      },
      "lineNbr": 90,
      "author": {
        "id": 1002151
      },
      "writtenOn": "2017-09-29T22:54:46Z",
      "side": 1,
      "message": "Regarding asserts: That would be good and isn\u0027t something I had considered to ensure correctness.\n\nRegarding implementation sharing: This patch shares code with explicit delegation to LatencyInfo::AddTerminatedFrameSwapComponent. It could be shared with less boilerplate via implementation inheritance.\n\nIf the surface is always given ownership of the LatencyInfo, overriding implementations will inherit useless member variables if the default implementation is added to GLSurface. The useless member variables could be avoided with a separate SwapLatencyInfo abstract class and a SwapLatencyInfoDefault implementation most GLSurfaces could inherit from, but that adds boilerplate of its own. I don\u0027t think it adds diamond inheritance, at least.\n\nAlternatively, if the before/after calls could *optionally* take ownership of the LatencyInfos, the default GLSurface implementation could rely on the caller holding the state during the swap while others could hold the state themselves. That\u0027s a bit awkward, but might be the best option.",
      "parentUuid": "e72d8d69_42941268",
      "revId": "80c23428f7a89ef3176bd7647a5a18bd6b5949cb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "42e8af0c_b452be27",
        "filename": "ui/gl/gl_surface_egl.cc",
        "patchSetId": 11
      },
      "lineNbr": 959,
      "author": {
        "id": 1105344
      },
      "writtenOn": "2017-09-29T02:54:42Z",
      "side": 1,
      "message": "Does calling this helper in these three different places have a materially different effect than calling it once at the beginning of this method?",
      "revId": "80c23428f7a89ef3176bd7647a5a18bd6b5949cb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7d1491fe_aa03b0ef",
        "filename": "ui/gl/gl_surface_egl.cc",
        "patchSetId": 11
      },
      "lineNbr": 959,
      "author": {
        "id": 1002151
      },
      "writtenOn": "2017-09-29T22:54:46Z",
      "side": 1,
      "message": "This particular component is measured after swap returns (before and after this patch), with the intent that it includes any time that the actual call to eglSwapBuffers blocks. Only calling it at the beginning would cause a discontinuity in some UMA metrics.",
      "parentUuid": "42e8af0c_b452be27",
      "revId": "80c23428f7a89ef3176bd7647a5a18bd6b5949cb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8d1dbe9a_06acc30f",
        "filename": "ui/latency/latency_info.cc",
        "patchSetId": 11
      },
      "lineNbr": 167,
      "author": {
        "id": 1116050
      },
      "writtenOn": "2017-09-29T03:43:04Z",
      "side": 1,
      "message": "I\u0027d prefer we pass the time in here. Otherwise, the contract for calling this method is a bit hairy, and we\u0027d need to call out explicitly the timing requirements for calling it.",
      "range": {
        "startLine": 166,
        "startChar": 42,
        "endLine": 167,
        "endChar": 57
      },
      "revId": "80c23428f7a89ef3176bd7647a5a18bd6b5949cb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2cada467_74c7b99a",
        "filename": "ui/latency/latency_info.cc",
        "patchSetId": 11
      },
      "lineNbr": 167,
      "author": {
        "id": 1002151
      },
      "writtenOn": "2017-09-29T22:54:46Z",
      "side": 1,
      "message": "Ok, I\u0027ll change it to always pass Now().",
      "parentUuid": "8d1dbe9a_06acc30f",
      "range": {
        "startLine": 166,
        "startChar": 42,
        "endLine": 167,
        "endChar": 57
      },
      "revId": "80c23428f7a89ef3176bd7647a5a18bd6b5949cb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f427f8c8_49189c18",
        "filename": "ui/latency/latency_info.h",
        "patchSetId": 11
      },
      "lineNbr": 160,
      "author": {
        "id": 1002151
      },
      "writtenOn": "2017-09-28T21:33:43Z",
      "side": 1,
      "message": "@tdresser: Is this a good place to add a helper function like this, which is used by many implementations of SwapBuffers?",
      "revId": "80c23428f7a89ef3176bd7647a5a18bd6b5949cb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9ec7ea9d_a5a8b0a2",
        "filename": "ui/latency/latency_info.h",
        "patchSetId": 11
      },
      "lineNbr": 160,
      "author": {
        "id": 1116050
      },
      "writtenOn": "2017-09-29T03:43:04Z",
      "side": 1,
      "message": "Yeah, this seems reasonable.",
      "parentUuid": "f427f8c8_49189c18",
      "revId": "80c23428f7a89ef3176bd7647a5a18bd6b5949cb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}