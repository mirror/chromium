{
  "comments": [
    {
      "key": {
        "uuid": "36a6f286_8ed2c135",
        "filename": "content/browser/loader/resource_dispatcher_host_impl.cc",
        "patchSetId": 5
      },
      "lineNbr": 1651,
      "author": {
        "id": 1001809
      },
      "writtenOn": "2017-09-05T17:33:05Z",
      "side": 1,
      "message": "There are a lot of other places in RDHI where scheduler_ is accessed; I don\u0027t think the change can be this simple.  I\u0027m specifically concerned by \"scheduler_-\u003eReprioritizeRequest()\" (I don\u0027t think it\u0027s wise to assume the schedule will drop a reprioritize on the floor if it doesn\u0027t recognize the request) and the calls to schedule_-\u003eHasLoadingClients(), which may be based on the client construction/destruction or may be based on having requests in that space.",
      "range": {
        "startLine": 1651,
        "startChar": 34,
        "endLine": 1651,
        "endChar": 35
      },
      "revId": "7e4f553b406f0c23ba0430d9492569954b638414",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c414ce74_e0e3a01e",
        "filename": "content/browser/loader/resource_dispatcher_host_impl.cc",
        "patchSetId": 5
      },
      "lineNbr": 1651,
      "author": {
        "id": 1119250
      },
      "writtenOn": "2017-09-11T13:25:35Z",
      "side": 1,
      "message": "Thanks for the pointers, I turned ReprioritizeRequest into a NOP.  Do we need to do anything special Re HasLoadingClients?  The |is_loaded_| state gets mutated by: ResourceScheduler::OnLoadingStateChanged which seems only to be called (indirectly) via WebContentsImpl::LoadingStateChanged; and ResourceScheduler::OnNavigate() which is only called via ResourceSchedulerFilter::OnDidCommitProvisionalLoad.  It seems HasLoadingClients is unaffected by my changes.",
      "parentUuid": "36a6f286_8ed2c135",
      "range": {
        "startLine": 1651,
        "startChar": 34,
        "endLine": 1651,
        "endChar": 35
      },
      "revId": "7e4f553b406f0c23ba0430d9492569954b638414",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "198b7c21_fd0a6000",
        "filename": "content/browser/loader/resource_dispatcher_host_impl.h",
        "patchSetId": 5
      },
      "lineNbr": 118,
      "author": {
        "id": 1001809
      },
      "writtenOn": "2017-09-05T17:33:05Z",
      "side": 1,
      "message": "How about instead making this something that\u0027s set in construction, or something that\u0027s probed on the ResourceDispatcherHostDelegate?  The delegate pattern  is how historically embedders have controlled the action of content classes, but it has the negative of allowing scheduler usage to vary over the lifetime of the RDHI.  I think setting this type of configuration at construction is also where we\u0027re heading with servicification, though as noted in my previous comment, I don\u0027t think that\u0027s very important.  But you may not have the ability to tweak the constructor in the headless case--I\u0027m not familiar with how that embedder works.  \n\nAnother option that probably isn\u0027t worth it for you unless it\u0027s a good match for your use case is to let the embedder (either in construction or through the delegate) specify the whole ResourceScheduler class.  This would involve specifying an ABC that ResourceScheduler and whatever you wanted to build would inherit from, but it would allow you to do your own scheduling (which the CL description indicates is your goal).",
      "range": {
        "startLine": 118,
        "startChar": 39,
        "endLine": 118,
        "endChar": 64
      },
      "revId": "7e4f553b406f0c23ba0430d9492569954b638414",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8ba7ba8d_d43f68f1",
        "filename": "content/browser/loader/resource_dispatcher_host_impl.h",
        "patchSetId": 5
      },
      "lineNbr": 118,
      "author": {
        "id": 1119250
      },
      "writtenOn": "2017-09-11T13:25:35Z",
      "side": 1,
      "message": "I\u0027ve done it on construction of ResourceScheduler the based on the ResourceDispatcherHostDelegate.  I\u0027m not sure if that\u0027s the best wiring but it works for us.",
      "parentUuid": "198b7c21_fd0a6000",
      "range": {
        "startLine": 118,
        "startChar": 39,
        "endLine": 118,
        "endChar": 64
      },
      "revId": "7e4f553b406f0c23ba0430d9492569954b638414",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8827703d_9c2b0d76",
        "filename": "headless/lib/headless_web_contents_browsertest.cc",
        "patchSetId": 5
      },
      "lineNbr": 970,
      "author": {
        "id": 1116032
      },
      "writtenOn": "2017-09-04T15:22:01Z",
      "side": 1,
      "message": "Might want to do this in TearDown() to make sure it always happens.",
      "range": {
        "startLine": 970,
        "startChar": 15,
        "endLine": 970,
        "endChar": 41
      },
      "revId": "7e4f553b406f0c23ba0430d9492569954b638414",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "76d9d83c_2bf80127",
        "filename": "headless/lib/headless_web_contents_browsertest.cc",
        "patchSetId": 5
      },
      "lineNbr": 970,
      "author": {
        "id": 1119250
      },
      "writtenOn": "2017-09-05T11:36:19Z",
      "side": 1,
      "message": "I tried that but the browser() has gone away by then :(  I\u0027m not actually convinced this is strictly needed tbh.",
      "parentUuid": "8827703d_9c2b0d76",
      "range": {
        "startLine": 970,
        "startChar": 15,
        "endLine": 970,
        "endChar": 41
      },
      "revId": "7e4f553b406f0c23ba0430d9492569954b638414",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "173dd717_aabf847b",
        "filename": "headless/lib/headless_web_contents_browsertest.cc",
        "patchSetId": 5
      },
      "lineNbr": 1016,
      "author": {
        "id": 1116032
      },
      "writtenOn": "2017-09-04T15:22:01Z",
      "side": 1,
      "message": "This might become a change detector test and we don\u0027t particularly care what order things get loaded in when the scheduler is enabled. I\u0027d suggest either leaving this out or just comparing to a set instead of a vector.",
      "range": {
        "startLine": 1016,
        "startChar": 24,
        "endLine": 1016,
        "endChar": 29
      },
      "revId": "7e4f553b406f0c23ba0430d9492569954b638414",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "058e2115_c92ad5f5",
        "filename": "headless/lib/headless_web_contents_browsertest.cc",
        "patchSetId": 5
      },
      "lineNbr": 1016,
      "author": {
        "id": 1119250
      },
      "writtenOn": "2017-09-05T11:36:19Z",
      "side": 1,
      "message": "I agree the order here doesn\u0027t matter, still I think we should probably assert it\u0027s not to be the same as in DisableResourceSchedulerTest.",
      "parentUuid": "173dd717_aabf847b",
      "range": {
        "startLine": 1016,
        "startChar": 24,
        "endLine": 1016,
        "endChar": 29
      },
      "revId": "7e4f553b406f0c23ba0430d9492569954b638414",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6aa5b3a5_1725ef83",
        "filename": "headless/public/headless_browser.h",
        "patchSetId": 5
      },
      "lineNbr": 82,
      "author": {
        "id": 1116032
      },
      "writtenOn": "2017-09-04T15:22:01Z",
      "side": 1,
      "message": "uber-nit: \"Caution:\"",
      "range": {
        "startLine": 82,
        "startChar": 58,
        "endLine": 82,
        "endChar": 65
      },
      "revId": "7e4f553b406f0c23ba0430d9492569954b638414",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}