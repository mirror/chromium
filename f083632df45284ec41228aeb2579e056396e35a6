{
  "comments": [
    {
      "key": {
        "uuid": "46a22b2d_fa1282cc",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 9,
      "author": {
        "id": 1160859
      },
      "writtenOn": "2017-11-21T17:22:49Z",
      "side": 1,
      "message": "nit:tyop",
      "range": {
        "startLine": 9,
        "startChar": 29,
        "endLine": 9,
        "endChar": 36
      },
      "revId": "f083632df45284ec41228aeb2579e056396e35a6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8fb744e9_426037ac",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 9,
      "author": {
        "id": 1115968
      },
      "writtenOn": "2017-11-21T17:37:39Z",
      "side": 1,
      "message": "Done.",
      "parentUuid": "46a22b2d_fa1282cc",
      "range": {
        "startLine": 9,
        "startChar": 29,
        "endLine": 9,
        "endChar": 36
      },
      "revId": "f083632df45284ec41228aeb2579e056396e35a6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c1cc85a2_98ae2269",
        "filename": "content/browser/blob_storage/blob_dispatcher_host.cc",
        "patchSetId": 3
      },
      "lineNbr": 177,
      "author": {
        "id": 1110029
      },
      "writtenOn": "2017-11-17T19:32:03Z",
      "side": 1,
      "message": "hmm, not a problem with this CL, since you did in fact not add TYPE_RAW_FILE to the IPC deserialization code, but whoever added TYPE_DATA_PIPE did sort of mess up, since that case is supported in IPC deserialization, making the comment/NOTREACHED invalid for that case... \n\nAnyway, not really a problem since (as long as mojo blobs won\u0027t need to be reverted) this code can\u0027t be called anyway, but a nice example of how trying to use different subsets of the same type for different purposes is causing problems...",
      "revId": "f083632df45284ec41228aeb2579e056396e35a6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c626d361_61c1c8d8",
        "filename": "content/public/common/resource_request_body.h",
        "patchSetId": 3
      },
      "lineNbr": 55,
      "author": {
        "id": 1001472
      },
      "writtenOn": "2017-11-20T05:45:48Z",
      "side": 1,
      "message": "I think splitting this into two is probably the right call; there will be cases we don\u0027t need or can\u0027t attach base::File, we can pass null base::File in that case but it\u0027d make the code harder to use.",
      "revId": "f083632df45284ec41228aeb2579e056396e35a6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8c8c48ca_dabab791",
        "filename": "content/public/common/resource_request_body.h",
        "patchSetId": 3
      },
      "lineNbr": 55,
      "author": {
        "id": 1115968
      },
      "writtenOn": "2017-11-20T19:29:41Z",
      "side": 1,
      "message": "The network service won\u0027t be able to open the file if we keep this API.  Regardless, removed comment.",
      "parentUuid": "c626d361_61c1c8d8",
      "revId": "f083632df45284ec41228aeb2579e056396e35a6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e37be02a_19fe71a0",
        "filename": "content/public/common/resource_request_body.h",
        "patchSetId": 3
      },
      "lineNbr": 61,
      "author": {
        "id": 1001472
      },
      "writtenOn": "2017-11-20T05:45:48Z",
      "side": 1,
      "message": "Given that the file can be modified by anyone this could be invalid when it\u0027s being read, should we slightly loosen this, say, \u0027it is expected that the range is...\u0027 ?",
      "revId": "f083632df45284ec41228aeb2579e056396e35a6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3b2a8a50_52d0f9e8",
        "filename": "content/public/common/resource_request_body.h",
        "patchSetId": 3
      },
      "lineNbr": 61,
      "author": {
        "id": 1115968
      },
      "writtenOn": "2017-11-20T19:29:41Z",
      "side": 1,
      "message": "Updated to reflect actual behavior (Don\u0027t mention offset, but do mention length is truncated to be the end of the file)",
      "parentUuid": "e37be02a_19fe71a0",
      "revId": "f083632df45284ec41228aeb2579e056396e35a6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2740725d_2d648134",
        "filename": "storage/common/data_element.h",
        "patchSetId": 3
      },
      "lineNbr": 35,
      "author": {
        "id": 1110029
      },
      "writtenOn": "2017-11-16T19:14:14Z",
      "side": 1,
      "message": "as more and more types are added that are only valid for particular users of DataElement I find it harder and harder to figure out what types actually are valid in which context. I think ultimately we\u0027ll probably end up splitting DataElement in different classes for its different users, but for now could we at least try to annotate all the various types with which types are valid in which situations?\nI\u0027m aware of at least 4 different places a different subset of types are valid:\n- over IPC for the old Blob registration codepath\n- in memory/at rest for the Blob system\n- for loading stuff with network service\n- for loading stuff without network service\n\nAnd who knows, maybe there are others? But with every new type that gets added for only one of the users it feels like we\u0027re moving further and further away from having any benefit of sharing one class.\n\n(also specifically, replacing TYPE_FILE with TYPE_RAW_FILE might make sense in one of these use cases, but certainly doesn\u0027t make sense for the in-memory use case of the Blob system)",
      "revId": "f083632df45284ec41228aeb2579e056396e35a6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "92977831_4c4d2f65",
        "filename": "storage/common/data_element.h",
        "patchSetId": 3
      },
      "lineNbr": 35,
      "author": {
        "id": 1115968
      },
      "writtenOn": "2017-11-16T19:18:22Z",
      "side": 1,
      "message": "I think this makes sense, but I don\u0027t know this information, so am unable to do this myself.  I\u0027m just working on browser-side consumers (Though this will eventually need to replace TYPE_FILE for renderer-side consumers, too).",
      "parentUuid": "2740725d_2d648134",
      "revId": "f083632df45284ec41228aeb2579e056396e35a6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c7a8693b_088aeb87",
        "filename": "storage/common/data_element.h",
        "patchSetId": 3
      },
      "lineNbr": 35,
      "author": {
        "id": 1001472
      },
      "writtenOn": "2017-11-17T01:13:23Z",
      "side": 1,
      "message": "Hm, yeah this is getting a bit exploded. At least we should probably split this to Blob and loading related ones. And for uploading I\u0027m not too sure if base::File is the right abstraction we want to go with... so in the current code the renderer uses a file path (that is allowed to read by the browser process) if not a blob, and tend to convert it to a blob when we need to read it.  Should we start passing base::File (mojo.common.mojom.File) for blink::File, say, when a user grabs a file and drop it on a page?",
      "parentUuid": "92977831_4c4d2f65",
      "revId": "f083632df45284ec41228aeb2579e056396e35a6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "387ac17f_fab837fa",
        "filename": "storage/common/data_element.h",
        "patchSetId": 3
      },
      "lineNbr": 35,
      "author": {
        "id": 1001472
      },
      "writtenOn": "2017-11-17T06:45:06Z",
      "side": 1,
      "message": "Regarding the categorization we could probably start with something like this:\n\n// Only used for Upload with Network Service as of now:\nTYPE_RAW_FILE,\nTYPE_DATA_PIPE,\n\n// Only used for Blob:\nTYPE_BYTES_DESCRIPTION,\nTYPE_DISK_CACHE_ENTRY,  // Only used by CacheStorage\nTYPE_FILE_FILESYSTEM,\n\n// Commonly used for Blob, and also for Upload when Network Service is disabled:\nTYPE_BLOB,\nTYPE_FILE,\n\n// Commonly used in every case:\nTYPE_BYTES,",
      "parentUuid": "c7a8693b_088aeb87",
      "revId": "f083632df45284ec41228aeb2579e056396e35a6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bf6307f4_5525c8c7",
        "filename": "storage/common/data_element.h",
        "patchSetId": 3
      },
      "lineNbr": 35,
      "author": {
        "id": 1110029
      },
      "writtenOn": "2017-11-17T19:32:03Z",
      "side": 1,
      "message": "Mostly accurate from a blob point of view, although TYPE_BLOB is only used for blobs in the old IPC codepath. It\u0027s not used anymore for blobs in the mojo codepath.",
      "parentUuid": "387ac17f_fab837fa",
      "revId": "f083632df45284ec41228aeb2579e056396e35a6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "acbba6bc_0f410223",
        "filename": "storage/common/data_element.h",
        "patchSetId": 3
      },
      "lineNbr": 35,
      "author": {
        "id": 1115968
      },
      "writtenOn": "2017-11-20T19:29:41Z",
      "side": 1,
      "message": "I\u0027d attempted to update the list to include this information.",
      "parentUuid": "bf6307f4_5525c8c7",
      "revId": "f083632df45284ec41228aeb2579e056396e35a6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "037d23f8_cd19735a",
        "filename": "storage/common/data_element.h",
        "patchSetId": 3
      },
      "lineNbr": 187,
      "author": {
        "id": 1001472
      },
      "writtenOn": "2017-11-20T05:45:48Z",
      "side": 1,
      "message": "... and TYPE_RAW_FILE.",
      "revId": "f083632df45284ec41228aeb2579e056396e35a6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bd75ddb1_a62697cc",
        "filename": "storage/common/data_element.h",
        "patchSetId": 3
      },
      "lineNbr": 187,
      "author": {
        "id": 1115968
      },
      "writtenOn": "2017-11-20T19:29:41Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "037d23f8_cd19735a",
      "revId": "f083632df45284ec41228aeb2579e056396e35a6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}