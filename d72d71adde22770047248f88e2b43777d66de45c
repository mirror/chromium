{
  "comments": [
    {
      "key": {
        "uuid": "e05b60f3_23c18deb",
        "filename": "third_party/WebKit/LayoutTests/fast/spatial-navigation/snav-iframe-no-scrollable-content.html",
        "patchSetId": 2
      },
      "lineNbr": 87,
      "author": {
        "id": 1245462
      },
      "writtenOn": "2017-12-14T18:53:18Z",
      "side": 1,
      "message": "Instead of extending this test case, could you add the test case from the bug post? That one is simpler so it allows us to test this \"non-navigable iframe\"-bug independently.\n\nMaybe call it snav-backtrack-out-of-non-navigable-iframe.html, because that\u0027s what we want to do here, right?",
      "revId": "d72d71adde22770047248f88e2b43777d66de45c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "71d05380_98dd0a43",
        "filename": "third_party/WebKit/LayoutTests/fast/spatial-navigation/snav-iframe-no-scrollable-content.html",
        "patchSetId": 2
      },
      "lineNbr": 87,
      "author": {
        "id": 1243466
      },
      "writtenOn": "2017-12-15T13:24:08Z",
      "side": 1,
      "message": "Yes. Done. :)",
      "parentUuid": "e05b60f3_23c18deb",
      "revId": "d72d71adde22770047248f88e2b43777d66de45c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5bb5110e_e72b9676",
        "filename": "third_party/WebKit/Source/core/page/FocusController.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1385,
      "author": {
        "id": 1245462
      },
      "writtenOn": "2017-12-14T18:53:18Z",
      "side": 1,
      "message": "AdvanceFocusDirectionallyInNavigableSubContainer ?",
      "revId": "d72d71adde22770047248f88e2b43777d66de45c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "31a421dd_c3d787d1",
        "filename": "third_party/WebKit/Source/core/page/FocusController.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1425,
      "author": {
        "id": 1245462
      },
      "writtenOn": "2017-12-14T18:53:18Z",
      "side": 1,
      "message": "Here and at line 1409 we call into our caller, AdvanceFocusDirectionallyInContainer. These recursions are bit hidden. I think they are hard to follow.\n\nIdea to avoid recursions: Merge AdvanceFocusDirectionallyIn* with FindFocusCandidateInContainer and make it traverse the DOM tree *once* with ElementTraversal.",
      "revId": "d72d71adde22770047248f88e2b43777d66de45c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "23c9fa88_14a9d868",
        "filename": "third_party/WebKit/Source/core/page/FocusController.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1455,
      "author": {
        "id": 1245462
      },
      "writtenOn": "2017-12-14T18:53:18Z",
      "side": 1,
      "message": "S",
      "range": {
        "startLine": 1455,
        "startChar": 50,
        "endLine": 1455,
        "endChar": 51
      },
      "revId": "d72d71adde22770047248f88e2b43777d66de45c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "134f467d_c2d8b668",
        "filename": "third_party/WebKit/Source/core/page/FocusController.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1456,
      "author": {
        "id": 1245462
      },
      "writtenOn": "2017-12-14T18:53:18Z",
      "side": 1,
      "message": "AdvanceFocusDirectionally()",
      "range": {
        "startLine": 1456,
        "startChar": 17,
        "endLine": 1456,
        "endChar": 49
      },
      "revId": "d72d71adde22770047248f88e2b43777d66de45c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "278fd53c_85c422eb",
        "filename": "third_party/WebKit/Source/core/page/FocusController.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1461,
      "author": {
        "id": 1245462
      },
      "writtenOn": "2017-12-14T18:53:18Z",
      "side": 1,
      "message": "What is the scenario here? FindFocusCandidateInContainer finds an iframe but the iframe does not have any focusable elements so we need to _backtrack_ and ask FindFocusCandidateInContainer to find us another candidate? \n\nSay |container| has n non-navigable \u003ciframe\u003es followed by one \u003ca\u003e. Say all n \u003ciframe\u003es are closer, spatially, to the current focus. We would then do n calls into FindFocusCandidateInContainer to go find that \u003ca\u003e? The last call will walk through all n element \u003d\u003e total time to find the \u003ca\u003e is O(n²)?\n\nHmm. How to avoid O(n²) and visit the container\u0027s children only once?\n\nCould we have FindFocusCandidateInContainer not return any such \"bad\" (\u003dnon-navigable) containers? In FindFocusCandidateInContainer I imagine:\n\n  if (!NonNavigableContainer(element))\n    continue;\n\nAnd here:\n \n  // We know from the contract of FindFocusCandidateInContainer that\n  // a navigable container will have something that we can focus:\n  return AdvanceFocusDirectionallyInDiscoveredContainer(next_closest, type);\n\nBut I think we better avoid recursions to save us some stack space and get better readability.",
      "revId": "d72d71adde22770047248f88e2b43777d66de45c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "01898d7f_ac2c56ed",
        "filename": "third_party/WebKit/Source/core/page/FocusController.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1461,
      "author": {
        "id": 1243466
      },
      "writtenOn": "2017-12-15T13:24:08Z",
      "side": 1,
      "message": "\u003e What is the scenario here? FindFocusCandidateInContainer finds an iframe but the iframe does not have any focusable elements so we need to _backtrack_ and ask FindFocusCandidateInContainer to find us another candidate?\n\nCorrect.\n\n\u003e Say |container| has n non-navigable \u003ciframe\u003es followed by one \u003ca\u003e. Say all n \u003ciframe\u003es are  closer, spatially, to the current focus. We would then do n calls into FindFocusCandidateInContainer to go find that \u003ca\u003e? The last call will walk through all n element \u003d\u003e total time to find the \u003ca\u003e is O(n²)?\n\nYes. I think this is worst case. But O(N^2 * LogN) because searching time in skipped_list is O(LogN).\n\n\u003e Hmm. How to avoid O(n²) and visit the container\u0027s children only once?\n\nWe can reduce complexity as O(N * LogN) by using sorted candidate list. But this change requires additional O(N) space. I think we should improve correctness first and think about optimization later. This CL is fast and not consumes space too much in practice. Also I expect that this can cover hundreds of \"bad\" containers in reasonable time(few seconds).\n\n\u003e Could we have FindFocusCandidateInContainer not return any such \"bad\" (\u003dnon-navigable) containers? In FindFocusCandidateInContainer I imagine:\n\nWe should traverse all child of a container for decision whether the container is bad or not. But FindFocusCandidateInContainer never traverses a child element of a container. So your idea requires additional time for each FindFocusCandidateInContainer.",
      "parentUuid": "278fd53c_85c422eb",
      "revId": "d72d71adde22770047248f88e2b43777d66de45c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "47ae8aec_a3e83b53",
        "filename": "third_party/WebKit/Source/core/page/FocusController.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1461,
      "author": {
        "id": 1243466
      },
      "writtenOn": "2017-12-15T15:29:00Z",
      "side": 1,
      "message": "\u003e Yes. I think this is worst case. But O(N^2 * LogN) because searching time in skipped_list is O(LogN).\n\nCorrection: O(N^2 * alpha) where alpha is searching time in hashset.",
      "parentUuid": "01898d7f_ac2c56ed",
      "revId": "d72d71adde22770047248f88e2b43777d66de45c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e1836ff0_a6889d85",
        "filename": "third_party/WebKit/Source/core/page/FocusController.cpp",
        "patchSetId": 2
      },
      "lineNbr": 1461,
      "author": {
        "id": 1245462
      },
      "writtenOn": "2017-12-18T13:17:02Z",
      "side": 1,
      "message": "\u003e We should traverse all child of a container for decision whether the container is bad or not. But FindFocusCandidateInContainer never traverses a child element of a container. So your idea requires additional time for each FindFocusCandidateInContainer.\n\nRight, more time in FindFocusCandidate*() but less time in AdvanceNav*() because the former would have already pruned paths to dead ends (\u003d paths to sub trees without anything navigable). To not check those dead ends again, they could be added to the skip_list as well... That\u0027s also slightly complicated so....\n\n... to avoid that, couldn\u0027t we search the complete DOM for the best candidate?\n\n\u003e I think we should improve correctness first and think about optimization later.\n\nI do agree with that. But I also think that correctness will benefit, long-term, if we manage to simplify the algorithm :) A simpler algorithm should be easier to standardize. We have a fairly good test coverage already so now might be a good time to refactor.",
      "parentUuid": "47ae8aec_a3e83b53",
      "revId": "d72d71adde22770047248f88e2b43777d66de45c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}