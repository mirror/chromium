{
  "comments": [
    {
      "key": {
        "uuid": "0d6ed082_ad31e99a",
        "filename": "third_party/WebKit/Source/core/frame/RemoteFrameView.cpp",
        "patchSetId": 12
      },
      "lineNbr": 31,
      "author": {
        "id": 1115895
      },
      "writtenOn": "2018-01-03T21:24:23Z",
      "side": 1,
      "message": "This seems quite fragile.  Is there a more direct way to do this?",
      "revId": "acc7d99c43a0fa3e93a14099b3c91b2241be8ab3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1f77da55_b704e3ee",
        "filename": "third_party/WebKit/Source/core/frame/RemoteFrameView.cpp",
        "patchSetId": 12
      },
      "lineNbr": 176,
      "author": {
        "id": 1115895
      },
      "writtenOn": "2018-01-03T21:24:23Z",
      "side": 1,
      "message": "This is an awkward indirection through PaintRecord just to write an SkPicture into some backing printing context.\n\nI assume that this is all getting drawn into some top level SkiaPaintCanvas / SkCanvas? GraphicsContext itself already has some Printing() boolean.  As an alternate suggestion, could you just store this SkCanvas on the context (possibly as a part of setting Printing to true?) and then just draw your placeholder into it directly?",
      "revId": "acc7d99c43a0fa3e93a14099b3c91b2241be8ab3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bddc3e11_8804cefa",
        "filename": "third_party/WebKit/Source/core/frame/RemoteFrameView.cpp",
        "patchSetId": 12
      },
      "lineNbr": 176,
      "author": {
        "id": 1115895
      },
      "writtenOn": "2018-01-08T23:35:28Z",
      "side": 1,
      "message": "Sorry, I misunderstood how printing works.  It appears this is all recorded into a PaintOpBuffer and not going directly into an SkCanvas at the bottom of the recording stack.\n\nI think this is still too heavy-handed in PaintOpBuffer.  I think storing an SkPicture pointer on every PaintOpBuffer just for the case that the PaintOpBuffer represents a placeholder is very big.\n\nI\u0027m going to propose the following, which should be extensible for the next person who wants to do something similar:\n* add a new CustomData PaintOpType and a CustomDataOp PaintOp class that stores a size_t data\n* add a custom_data_callback function to PlaybackParams\n* when rasterizing, if a CustomDataOp is encountered, call the custom data callback with the data and the PaintCanvas (and maybe the playback params too)\n\nThat should give you enough to store the id directly and then stitch them back together later without requiring putting an SkPicture on every PaintOpBuffer.",
      "parentUuid": "1f77da55_b704e3ee",
      "revId": "acc7d99c43a0fa3e93a14099b3c91b2241be8ab3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "70fe5aef_bae15f65",
        "filename": "third_party/WebKit/Source/core/frame/RemoteFrameView.cpp",
        "patchSetId": 12
      },
      "lineNbr": 176,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2018-01-08T23:36:08Z",
      "side": 1,
      "message": "Ultimately, I think we need to know where to insert the content for the OOPIF. It sounds like the proposal is to avoid creating a placeholder SkPicture, and to just store some structured data in SkMetadata (i.e. a map of IDs to bounds). Do I understand this correctly?\n\nIf I understood it correctly, I actually like it a lot. I\u0027ve been thinking about how to do the cross-process re-assembly. Using SkPicture directly has the problem where picture IDs aren\u0027t unique between processes, and we have to jump through a lot of hoops to try to make this safe. If we don\u0027t use SkPicture at all, then we can use something like base::UnguessableToken and do much better. WDYT?",
      "parentUuid": "1f77da55_b704e3ee",
      "revId": "acc7d99c43a0fa3e93a14099b3c91b2241be8ab3",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}