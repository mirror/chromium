{
  "comments": [
    {
      "key": {
        "uuid": "d92e5229_0907a121",
        "filename": "ios/chrome/browser/ui/fullscreen/fullscreen_broadcast_forwarder.mm",
        "patchSetId": 3
      },
      "lineNbr": 15,
      "author": {
        "id": 1115958
      },
      "writtenOn": "2017-11-17T11:26:32Z",
      "side": 1,
      "message": "Is the only purpose of this object to prevent having to implement the ChromeBroadcastObserver methods on the receiver? \n\nIf it makes sense for the broadcaseter to support different use cases better by (for example) having property groups (so you can just broadcast/observe all four of these properties together), or expressing the ChromeBroadcastObserver protocol in terms of properties instead of setter methods, I\u0027d rather do that than creating intermediate management classes and protocols.",
      "range": {
        "startLine": 15,
        "startChar": 11,
        "endLine": 15,
        "endChar": 39
      },
      "revId": "28ef64c58c011d161214b09e4d6bcfbd20cbe22f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b273f6d6_873e0fe7",
        "filename": "ios/chrome/browser/ui/fullscreen/fullscreen_broadcast_forwarder.mm",
        "patchSetId": 3
      },
      "lineNbr": 15,
      "author": {
        "id": 1133065
      },
      "writtenOn": "2017-11-17T19:27:59Z",
      "side": 1,
      "message": "The main purpose of this class is to forward broadcasted ObjectiveC UI info to FullscreenModel, which is in C++.  The final implementation of FullscreenBroadcastReceiver will have a FullscreenModel pointer and will pass all received broadcast information to the model.\n\nEssentially, this is the inverse of the observer bridge pattern we use elsewhere.  I haven\u0027t seen any Objective-C \u003d\u003e C++ bridges yet though; do you want me to just create a generalized bridge for all broadcast functions?",
      "parentUuid": "d92e5229_0907a121",
      "range": {
        "startLine": 15,
        "startChar": 11,
        "endLine": 15,
        "endChar": 39
      },
      "revId": "28ef64c58c011d161214b09e4d6bcfbd20cbe22f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3733eea5_9bc77c07",
        "filename": "ios/chrome/browser/ui/fullscreen/fullscreen_broadcast_forwarder.mm",
        "patchSetId": 3
      },
      "lineNbr": 15,
      "author": {
        "id": 1133065
      },
      "writtenOn": "2017-11-17T22:35:47Z",
      "side": 1,
      "message": "I rebased this onto the FullscreenModel CL, so you have a better idea of how this class is used.  It might be worthwhile to just create a bridge class anyway, though.",
      "parentUuid": "b273f6d6_873e0fe7",
      "range": {
        "startLine": 15,
        "startChar": 11,
        "endLine": 15,
        "endChar": 39
      },
      "revId": "28ef64c58c011d161214b09e4d6bcfbd20cbe22f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5ac59981_ad42709d",
        "filename": "ios/chrome/browser/ui/fullscreen/fullscreen_broadcast_forwarder.mm",
        "patchSetId": 3
      },
      "lineNbr": 15,
      "author": {
        "id": 1115958
      },
      "writtenOn": "2017-11-20T13:33:26Z",
      "side": 1,
      "message": "I\u0027m not going to slow this CL down, but two ideas for you to consider: (1) Do the benefits (however you see them) of having the FullscreenModel be a C++ class justify the added complexity needed for it to catch ObjC methods? (2) Is it possible to build C++ observer support into the broadcaster so we don\u0027t need to complicate things elsewhere?",
      "parentUuid": "3733eea5_9bc77c07",
      "range": {
        "startLine": 15,
        "startChar": 11,
        "endLine": 15,
        "endChar": 39
      },
      "revId": "28ef64c58c011d161214b09e4d6bcfbd20cbe22f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "32b413cf_63c7536d",
        "filename": "ios/chrome/browser/ui/fullscreen/fullscreen_broadcast_forwarder.mm",
        "patchSetId": 3
      },
      "lineNbr": 15,
      "author": {
        "id": 1133065
      },
      "writtenOn": "2017-11-21T02:07:06Z",
      "side": 1,
      "message": "I\u0027ll leave this CL around since it needs to be landed after crrev.com/c/773443 anyway.  If I\u0027m not mistaken, we want to keep everything as C++ unless Objective-C is completely necessary (or at least that\u0027s the mindset we have in web//).  Since fullscreen will ultimately be model code owned by a BrowserUserData, it makes sense to me to continue using a C++ class.  Of course the actual logic can be completed using either language, but I think that we should support C++ broadcast observers regardless of our decision in this particular case.\n\nI\u0027ve created crrev.com/c/780810 to bridge the broadcaster with C++ objects.  I\u0027m not sure if we can use similar runtime hackery to automatically include new functions in the bridge class like we do for Objective-C, however.",
      "parentUuid": "5ac59981_ad42709d",
      "range": {
        "startLine": 15,
        "startChar": 11,
        "endLine": 15,
        "endChar": 39
      },
      "revId": "28ef64c58c011d161214b09e4d6bcfbd20cbe22f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}