{
  "comments": [
    {
      "key": {
        "uuid": "2e43c2cc_1e6d0e4b",
        "filename": "components/viz/service/display/direct_renderer.cc",
        "patchSetId": 3
      },
      "lineNbr": 620,
      "author": {
        "id": 1115895
      },
      "writtenOn": "2017-11-07T23:51:58Z",
      "side": 1,
      "message": "I think this fixes the bug, but I\u0027m not sure that this extra parameter makes the code more readable.\n\nCan this be split into \"bool CanSkipRenderPass() const\" and \"void UseRenderPass(const RenderPass* render_pass)\"?  UseRenderPass itself never returns false except when skipping, and so the only callers that care about the return value are the only ones asking if it can be skipped.",
      "revId": "ef778b0a98314c4778f8cf89f93c807b402514ff",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d3ce0698_fd0cdcb5",
        "filename": "components/viz/service/display/direct_renderer.cc",
        "patchSetId": 3
      },
      "lineNbr": 620,
      "author": {
        "id": 1000887
      },
      "writtenOn": "2017-11-08T16:14:50Z",
      "side": 1,
      "message": "I agree, that seems nice, but except that CanSkipRenderPass() would have side effects - it would be the one to allocate the render pass texture.\n\nSo if you called UseRenderPass() without CanSkipRenderPass() the first time, then it would not have a texture.. it\u0027s a bit odd?",
      "parentUuid": "2e43c2cc_1e6d0e4b",
      "revId": "ef778b0a98314c4778f8cf89f93c807b402514ff",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3e191fe3_63462943",
        "filename": "components/viz/service/display/direct_renderer.cc",
        "patchSetId": 3
      },
      "lineNbr": 620,
      "author": {
        "id": 1115895
      },
      "writtenOn": "2017-11-08T18:15:54Z",
      "side": 1,
      "message": "I was imagining CanSkipRenderPass would check texture-\u003eid() and if it didn\u0027t exist, then it would return false and then UseRenderPass would do the allocation?\n\nIs it not possible to make a CanSkipRenderPass() const function?",
      "parentUuid": "d3ce0698_fd0cdcb5",
      "revId": "ef778b0a98314c4778f8cf89f93c807b402514ff",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "388863e1_54f9909f",
        "filename": "components/viz/service/display/direct_renderer.cc",
        "patchSetId": 3
      },
      "lineNbr": 655,
      "author": {
        "id": 1228419
      },
      "writtenOn": "2017-11-08T00:13:04Z",
      "side": 1,
      "message": "Please verify this early return. jbauman@ suggested to add this in https://codereview.chromium.org/2930803003/",
      "revId": "ef778b0a98314c4778f8cf89f93c807b402514ff",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e03d0c38_6d9ecbe2",
        "filename": "components/viz/service/display/direct_renderer.cc",
        "patchSetId": 3
      },
      "lineNbr": 655,
      "author": {
        "id": 1000887
      },
      "writtenOn": "2017-11-08T16:18:25Z",
      "side": 1,
      "message": "Right, I think the early return makes sense for the call from DrawRenderPass(), just as the no-damage-and-cached one does. It means we don\u0027t need to change the render pass\u0027 texture.\n\nIn the other cases, we\u0027ve already decided that we will change the texture, and we\u0027re in the process, but the texture may not be bound as framebuffer anymore which is incorrect.\n\nI think for this early out its likely that it can\u0027t change while drawing the render pass, so it would never early out in the other calls if it didnt in the first. But that could change in the future easily as seemingly unrelated code changed.",
      "parentUuid": "388863e1_54f9909f",
      "revId": "ef778b0a98314c4778f8cf89f93c807b402514ff",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}