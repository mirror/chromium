{
  "comments": [
    {
      "key": {
        "uuid": "b782e817_c38374ab",
        "filename": "third_party/zlib/adler32_simd.c",
        "patchSetId": 41
      },
      "lineNbr": 47,
      "author": {
        "id": 1145695
      },
      "writtenOn": "2017-09-25T15:28:47Z",
      "side": 1,
      "message": "Nit: looks a bit weird to start the comment with \u0027#defines\u0027.\n\nMaybe just remove it and leave the description about the prime number?",
      "revId": "965a9a912a07913a27f8800623f107e053370c77",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c9ca1f1d_197ee3f4",
        "filename": "third_party/zlib/adler32_simd.c",
        "patchSetId": 41
      },
      "lineNbr": 47,
      "author": {
        "id": 1109754
      },
      "writtenOn": "2017-09-25T16:38:10Z",
      "side": 1,
      "message": "Wanted to indicate where they come from here. Changed it to\n/* Definitions from adler32.c: largest prime ...",
      "parentUuid": "b782e817_c38374ab",
      "revId": "965a9a912a07913a27f8800623f107e053370c77",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "192d15f8_9487a939",
        "filename": "third_party/zlib/adler32_simd.c",
        "patchSetId": 41
      },
      "lineNbr": 214,
      "author": {
        "id": 1145695
      },
      "writtenOn": "2017-09-25T15:28:47Z",
      "side": 1,
      "message": "This is interesting.\n\nDoes it make any performance difference on ARMv8?\n\nLoads using NEON follow a different rule than normal loads.",
      "revId": "965a9a912a07913a27f8800623f107e053370c77",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9fc2da8e_fb8dc9da",
        "filename": "third_party/zlib/adler32_simd.c",
        "patchSetId": 41
      },
      "lineNbr": 214,
      "author": {
        "id": 1109754
      },
      "writtenOn": "2017-09-25T16:38:10Z",
      "side": 1,
      "message": "Yes interesting: was reading ...\n\nhttps://medium.com/@iLevex/the-curious-case-of-unaligned-access-on-arm-5dd0ebe24965\n\n\u003e Loads using NEON follow a different rule than normal loads.\n\nWhat are these rules?  Unaligned loads schedule two memory fetches, whereas aligned reads schedule one?\n\nCould you ask your ARM colleagues and provide some advice here please?",
      "parentUuid": "192d15f8_9487a939",
      "revId": "965a9a912a07913a27f8800623f107e053370c77",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e1fe5f3c_7b045d11",
        "filename": "third_party/zlib/adler32_simd.c",
        "patchSetId": 41
      },
      "lineNbr": 214,
      "author": {
        "id": 1145695
      },
      "writtenOn": "2017-09-25T17:33:13Z",
      "side": 1,
      "message": "Just check DDI0406C, section A3.2.1 \u0027Unaligned data access\u0027.\n\nBasically unaligned access is ok if you are using VLD(1, 2, 3, 4), VST(1, 2, 3, 4).\n\nAFAICT, this block should not affect performance in ARMv8 (could you validate it similarly to the experiment in Intel for unaligned loads?).\n\nIt *may* have an effect for ARMv7 though (not completely sure).",
      "parentUuid": "9fc2da8e_fb8dc9da",
      "revId": "965a9a912a07913a27f8800623f107e053370c77",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fc6de5cc_16a4f4eb",
        "filename": "third_party/zlib/adler32_simd.c",
        "patchSetId": 41
      },
      "lineNbr": 214,
      "author": {
        "id": 1109754
      },
      "writtenOn": "2017-09-26T11:11:55Z",
      "side": 1,
      "message": "\u003e Just check DDI0406C, section A3.2.1 \u0027Unaligned data access\u0027.\n\u003e \n\u003e Basically unaligned access is ok if you are using VLD(1, 2, 3, 4), VST(1, 2, 3, 4).\n\nThe generated SIMD code uses VLD1, however, ...\n\n\u003e AFAICT, this block should not affect performance in ARMv8 (could you validate it similarly to the experiment in Intel for unaligned loads?).\n\n  - DDI0487B: ARMv8-A ARM Architecture Reference Manual\n  Section B2.4.3 Unaligned data access restrictions \n  Unaligned accesses typically takes a number of additional cycles to\n  complete compared to a naturally-aligned access.\n\n\u003e It *may* have an effect for ARMv7 though (not completely sure).\n\n  - DDI0406C: ARMV7-A ARMv7-R ARM Architecture Reference Manual\n  Section A3.2.3 Unaligned data access restrictions in ARMv7 and ARMv6\n  Unaligned accesses typically take a number of additional cycles to\n  complete compared to a naturally aligned transfer. The real-time\n  implications must be analyzed carefully and key data structures might\n  need to have their alignment adjusted for optimum performance.\n  Unaligned access operations must not be used for accessing memory-\n  mapped registers in a Device or Strongly-ordered memory region.\n\nSeems that unaligned access does affect perf on both ARM8/ARM7, per the manuals. A second issue is that the user of zlib on ARM may also set the SCTLR CPU register at application-level if needed to require aligned memory access (and that\u0027d fault any unaligned memory access as a result).\n\nAligning the data avoids both issues.",
      "parentUuid": "e1fe5f3c_7b045d11",
      "revId": "965a9a912a07913a27f8800623f107e053370c77",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b1830dbd_aa1fc7f8",
        "filename": "third_party/zlib/adler32_simd.c",
        "patchSetId": 41
      },
      "lineNbr": 244,
      "author": {
        "id": 1145695
      },
      "writtenOn": "2017-09-25T15:28:47Z",
      "side": 1,
      "message": "This probably will trigger a warning if compiling with -pedantic.",
      "revId": "965a9a912a07913a27f8800623f107e053370c77",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "15cac6eb_4de5a012",
        "filename": "third_party/zlib/adler32_simd.c",
        "patchSetId": 41
      },
      "lineNbr": 244,
      "author": {
        "id": 1109754
      },
      "writtenOn": "2017-09-25T16:38:10Z",
      "side": 1,
      "message": "SSE provides _mm_set_epi32(a,b,c,d) for this, is there something like that for NEON intrinsics?\n\nCompilers are smart enough to generate the correct code (I use -Wall to help with that).  The code generated is very good, it shaves an instruction off the while loop.",
      "parentUuid": "b1830dbd_aa1fc7f8",
      "revId": "965a9a912a07913a27f8800623f107e053370c77",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2206c169_ac3cd620",
        "filename": "third_party/zlib/adler32_simd.c",
        "patchSetId": 41
      },
      "lineNbr": 245,
      "author": {
        "id": 1145695
      },
      "writtenOn": "2017-09-25T15:28:47Z",
      "side": 1,
      "message": "This looks a bit weird, even though newer compilers can be smart enough to generate the correct code.\n\nI suggest to instead do a vdupq_n_u32(0);",
      "revId": "965a9a912a07913a27f8800623f107e053370c77",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "31aac904_70d5dd2e",
        "filename": "third_party/zlib/adler32_simd.c",
        "patchSetId": 41
      },
      "lineNbr": 272,
      "author": {
        "id": 1145695
      },
      "writtenOn": "2017-09-25T15:28:47Z",
      "side": 1,
      "message": "Why the spacing past the function name?",
      "revId": "965a9a912a07913a27f8800623f107e053370c77",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b44808b7_10efd9a2",
        "filename": "third_party/zlib/adler32_simd.c",
        "patchSetId": 41
      },
      "lineNbr": 272,
      "author": {
        "id": 1109754
      },
      "writtenOn": "2017-09-25T16:38:10Z",
      "side": 1,
      "message": "So this entire repetitive code block is easier to read.",
      "parentUuid": "31aac904_70d5dd2e",
      "revId": "965a9a912a07913a27f8800623f107e053370c77",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a57f18f_6b8e6605",
        "filename": "third_party/zlib/adler32_simd.c",
        "patchSetId": 41
      },
      "lineNbr": 274,
      "author": {
        "id": 1145695
      },
      "writtenOn": "2017-09-25T15:28:47Z",
      "side": 1,
      "message": "Ditto.",
      "revId": "965a9a912a07913a27f8800623f107e053370c77",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c94f0f8b_04537c39",
        "filename": "third_party/zlib/adler32_simd.c",
        "patchSetId": 41
      },
      "lineNbr": 274,
      "author": {
        "id": 1109754
      },
      "writtenOn": "2017-09-25T16:38:10Z",
      "side": 1,
      "message": "Ditto.",
      "parentUuid": "7a57f18f_6b8e6605",
      "revId": "965a9a912a07913a27f8800623f107e053370c77",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b7615d28_f8b3f34d",
        "filename": "third_party/zlib/adler32_simd.c",
        "patchSetId": 41
      },
      "lineNbr": 356,
      "author": {
        "id": 1145695
      },
      "writtenOn": "2017-09-25T15:28:47Z",
      "side": 1,
      "message": "Would be nice to add the comment:\n /* D \u003d A+ B * 65536, see: https://en.wikipedia.org/wiki/Adler-32. */",
      "revId": "965a9a912a07913a27f8800623f107e053370c77",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dde7ea51_81d9df2f",
        "filename": "third_party/zlib/adler32_simd.c",
        "patchSetId": 41
      },
      "lineNbr": 356,
      "author": {
        "id": 1109754
      },
      "writtenOn": "2017-09-25T16:38:10Z",
      "side": 1,
      "message": "File begins with a reference to that wiki entry and, hopefully, folks will read it and see all the relations.  I certainly want them to read that wiki.",
      "parentUuid": "b7615d28_f8b3f34d",
      "revId": "965a9a912a07913a27f8800623f107e053370c77",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "80514297_ea31ac0f",
        "filename": "third_party/zlib/adler32_simd.c",
        "patchSetId": 41
      },
      "lineNbr": 356,
      "author": {
        "id": 1145695
      },
      "writtenOn": "2017-09-25T17:41:46Z",
      "side": 1,
      "message": "So in this case just: /* D \u003d A + B * 65536. */",
      "parentUuid": "dde7ea51_81d9df2f",
      "revId": "965a9a912a07913a27f8800623f107e053370c77",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e4a74d3b_1421a4d0",
        "filename": "third_party/zlib/adler32_simd.c",
        "patchSetId": 41
      },
      "lineNbr": 356,
      "author": {
        "id": 1109754
      },
      "writtenOn": "2017-09-26T11:11:55Z",
      "side": 1,
      "message": "I do not think we need to explain that s2 \u003c\u003c 16 is the same as * 65536.  I re-used the comment from alder32.c instead.",
      "parentUuid": "80514297_ea31ac0f",
      "revId": "965a9a912a07913a27f8800623f107e053370c77",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b8f1364a_479d3425",
        "filename": "third_party/zlib/adler32_simd.h",
        "patchSetId": 41
      },
      "lineNbr": 11,
      "author": {
        "id": 1145695
      },
      "writtenOn": "2017-09-25T15:28:47Z",
      "side": 1,
      "message": "For z_size_t you should need only zconf.h.",
      "revId": "965a9a912a07913a27f8800623f107e053370c77",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bdf60376_72186f94",
        "filename": "third_party/zlib/adler32_simd.h",
        "patchSetId": 41
      },
      "lineNbr": 11,
      "author": {
        "id": 1109754
      },
      "writtenOn": "2017-09-25T16:38:10Z",
      "side": 1,
      "message": "True, but also need zutil.h for ZLIB_INTERNAL :)",
      "parentUuid": "b8f1364a_479d3425",
      "revId": "965a9a912a07913a27f8800623f107e053370c77",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fd0863d5_f9240ab7",
        "filename": "third_party/zlib/adler32_simd.h",
        "patchSetId": 41
      },
      "lineNbr": 11,
      "author": {
        "id": 1109754
      },
      "writtenOn": "2017-09-26T11:11:55Z",
      "side": 1,
      "message": "Marking resolved.",
      "parentUuid": "bdf60376_72186f94",
      "revId": "965a9a912a07913a27f8800623f107e053370c77",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b4201507_70cf3eb7",
        "filename": "third_party/zlib/inflate.c",
        "patchSetId": 41
      },
      "lineNbr": 205,
      "author": {
        "id": 1145695
      },
      "writtenOn": "2017-09-25T15:28:47Z",
      "side": 1,
      "message": "Said it earlier, better guard this behind a check for Intel.",
      "revId": "965a9a912a07913a27f8800623f107e053370c77",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5d9a2c2b_6f983482",
        "filename": "third_party/zlib/inflate.c",
        "patchSetId": 41
      },
      "lineNbr": 205,
      "author": {
        "id": 1109754
      },
      "writtenOn": "2017-09-25T16:38:10Z",
      "side": 1,
      "message": "Replied earlier: no guard is needed (the android bots would explode if that wasn\u0027t the case).  It\u0027s used in deflate.c unguarded, see\n\nhttps://cs.chromium.org/chromium/src/third_party/zlib/deflate.c?type\u003dcs\u0026q\u003dx86_check_features\u0026sq\u003dpackage:chromium\u0026l\u003d286\n\nThis came via the simd.patch, so just following that.",
      "parentUuid": "b4201507_70cf3eb7",
      "revId": "965a9a912a07913a27f8800623f107e053370c77",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cd8c19da_f0216f8c",
        "filename": "third_party/zlib/inflate.c",
        "patchSetId": 41
      },
      "lineNbr": 205,
      "author": {
        "id": 1145695
      },
      "writtenOn": "2017-09-25T17:47:01Z",
      "side": 1,
      "message": "The issue I see following what came from simd.patch is that it did a poor job of insulating platform specific code.\n\nPlus it brings an extra maintenance burden for us on ARM.",
      "parentUuid": "5d9a2c2b_6f983482",
      "revId": "965a9a912a07913a27f8800623f107e053370c77",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}