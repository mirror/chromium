{
  "comments": [
    {
      "key": {
        "uuid": "1b6c6df9_e577a7be",
        "filename": "components/viz/service/main/viz_main_impl.cc",
        "patchSetId": 5
      },
      "lineNbr": 116,
      "author": {
        "id": 1000111
      },
      "writtenOn": "2017-11-06T15:27:18Z",
      "side": 1,
      "message": "Check for null connector?",
      "revId": "ce799ce036a1963cbffc8f1b0a22575869e62ac6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "39022f69_16355814",
        "filename": "components/viz/service/main/viz_main_impl.cc",
        "patchSetId": 5
      },
      "lineNbr": 116,
      "author": {
        "id": 1115962
      },
      "writtenOn": "2017-11-06T16:51:01Z",
      "side": 1,
      "message": "Ack. Will do.",
      "parentUuid": "1b6c6df9_e577a7be",
      "revId": "ce799ce036a1963cbffc8f1b0a22575869e62ac6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "48a12475_7be70ed8",
        "filename": "components/viz/service/main/viz_main_impl.cc",
        "patchSetId": 5
      },
      "lineNbr": 116,
      "author": {
        "id": 1115962
      },
      "writtenOn": "2017-11-09T16:28:20Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "39022f69_16355814",
      "revId": "ce799ce036a1963cbffc8f1b0a22575869e62ac6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b035d996_8b22f336",
        "filename": "components/viz/service/main/viz_main_impl.cc",
        "patchSetId": 5
      },
      "lineNbr": 118,
      "author": {
        "id": 1000111
      },
      "writtenOn": "2017-11-06T15:27:18Z",
      "side": 1,
      "message": "Will this ever fail, after the call to MakeRequest() in the previous line?",
      "revId": "ce799ce036a1963cbffc8f1b0a22575869e62ac6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "712f1c89_3eb0f6d9",
        "filename": "components/viz/service/main/viz_main_impl.cc",
        "patchSetId": 5
      },
      "lineNbr": 118,
      "author": {
        "id": 1115962
      },
      "writtenOn": "2017-11-06T16:51:01Z",
      "side": 1,
      "message": "Maybe? I mean it really shouldn\u0027t when running chrome normally, but it\u0027s possible there is a valid configuration in which it will. I personally find it a little scary that Mojo configuration can break semi-silently now, and so I thought making these breakages a little more explicit is good. That said, this DCHECK will not even catch all the breakages, so I don\u0027t have a problem removing it if that\u0027s what you prefer.",
      "parentUuid": "b035d996_8b22f336",
      "revId": "ce799ce036a1963cbffc8f1b0a22575869e62ac6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ce1c5bdc_b90ba986",
        "filename": "components/viz/service/main/viz_main_impl.cc",
        "patchSetId": 5
      },
      "lineNbr": 118,
      "author": {
        "id": 1000111
      },
      "writtenOn": "2017-11-09T16:16:57Z",
      "side": 1,
      "message": "From my reading of the code, ukm_recorder_ptr will *always* be bound here, regardless of whether there is a real impl available or not (I am looking at code here [1]). If that is the case, then the DCHECK here isn\u0027t useful.\n\n[1] https://cs.chromium.org/chromium/src/mojo/public/cpp/bindings/interface_request.h?type\u003dcs\u0026sq\u003dpackage:chromium\u0026l\u003d137",
      "parentUuid": "712f1c89_3eb0f6d9",
      "revId": "ce799ce036a1963cbffc8f1b0a22575869e62ac6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "74ccb32b_fbd164eb",
        "filename": "components/viz/service/main/viz_main_impl.cc",
        "patchSetId": 5
      },
      "lineNbr": 118,
      "author": {
        "id": 1115962
      },
      "writtenOn": "2017-11-09T16:28:20Z",
      "side": 1,
      "message": "Ugh. Ok, removed, thanks!",
      "parentUuid": "ce1c5bdc_b90ba986",
      "revId": "ce799ce036a1963cbffc8f1b0a22575869e62ac6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "29bafd87_704eeb8c",
        "filename": "components/viz/service/main/viz_main_impl.cc",
        "patchSetId": 5
      },
      "lineNbr": 135,
      "author": {
        "id": 1000111
      },
      "writtenOn": "2017-11-06T15:27:18Z",
      "side": 1,
      "message": "This is a little bit weird. This code means that it is possible for the MojoUkmRecorder to have been destroyed earlier, without being removed from DelegatingUkmRecorder. This seems potentially problematic. Is it possible that MUR removes itself from DUR before destruction, or some other mechanism to remove it from DUR before MUR is destroyed?",
      "revId": "ce799ce036a1963cbffc8f1b0a22575869e62ac6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "198b04f3_bf81daa3",
        "filename": "components/viz/service/main/viz_main_impl.cc",
        "patchSetId": 5
      },
      "lineNbr": 135,
      "author": {
        "id": 1115962
      },
      "writtenOn": "2017-11-06T16:51:01Z",
      "side": 1,
      "message": "\u003e This is a little bit weird. This code means that it is possible for the MojoUkmRecorder to have been destroyed earlier, without being removed from DelegatingUkmRecorder. This seems potentially problematic. Is it possible that MUR removes itself from DUR before destruction, or some other mechanism to remove it from DUR before MUR is destroyed?\n\nIt may have not been initialized in the first place (e.g. if GPU is in-process).\nAlso see my comment in MUR",
      "parentUuid": "29bafd87_704eeb8c",
      "revId": "ce799ce036a1963cbffc8f1b0a22575869e62ac6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4d2584a1_6940c464",
        "filename": "services/metrics/public/cpp/mojo_ukm_recorder.h",
        "patchSetId": 5
      },
      "lineNbr": 47,
      "author": {
        "id": 1000111
      },
      "writtenOn": "2017-11-06T15:27:18Z",
      "side": 1,
      "message": "Not totally sure if this is a good thing to add. See comment in VizMainImpl.",
      "revId": "ce799ce036a1963cbffc8f1b0a22575869e62ac6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "404ef647_96c47e78",
        "filename": "services/metrics/public/cpp/mojo_ukm_recorder.h",
        "patchSetId": 5
      },
      "lineNbr": 47,
      "author": {
        "id": 1115962
      },
      "writtenOn": "2017-11-06T16:51:01Z",
      "side": 1,
      "message": "See my response in VizMainImpl.\n\nThat said, I agree this sort of complexity associated with DelegatingUkmRecorder seems a bit unfortunate. E.g. there\u0027s no way to tell if the global UkmRecorder has been initialized. IMHO it would be nice if UR or MUR or DUR exposed an interface which could be used as if UR was a global process singleton, and then tests had some sort of a backdoor to add an additional listener/delegate. Perhaps holte@ has some thoughts on this.\n\u003c/rant\u003e",
      "parentUuid": "4d2584a1_6940c464",
      "revId": "ce799ce036a1963cbffc8f1b0a22575869e62ac6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "05d65a17_48e48634",
        "filename": "services/metrics/public/cpp/mojo_ukm_recorder.h",
        "patchSetId": 5
      },
      "lineNbr": 47,
      "author": {
        "id": 1124674
      },
      "writtenOn": "2017-11-06T19:31:43Z",
      "side": 1,
      "message": "Generalizing the problem you have with in/out of process initialization a bit, I think it could be possible that ServiceManager would start two utility services in the same process and that could have overlapping lifetimes.  So I think just checking if it is already initialized is not sufficient, because then you would be relying on the other services delegate outliving you.\n\nMaybe the right interface for DUR is to distinguish 3 types of delegates, Primary (e.g UkmService), Secondary (e.g. MojoUkmRecorder), and Testing.  Calls would be forwarded to a single primary or a single secondary if none is set.  Each Testing delegate would also get a copy.  This way a Service could always manage it\u0027s own secondary, and when it uses UkmRecorder::Get, it can be assured that the call is delegated somewhere.\n\nThere is another thing that we need to be careful about, which is SourceId translation.  Currently, SourceIds created GetNewSourceId get translated when they go through a MojoService via ConvertSourceIdFromInstance.  (This doesn\u0027t happen for SourceIds translated from NavigationIds).  So currently if we change which MojoUkmRecorder is used we will also have seperate SourceIds.  This probably need to change make instance_id be tied to process instead of UkmRecorderInterfaces.",
      "parentUuid": "404ef647_96c47e78",
      "revId": "ce799ce036a1963cbffc8f1b0a22575869e62ac6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d451a3e0_11aa93b1",
        "filename": "services/metrics/public/cpp/mojo_ukm_recorder.h",
        "patchSetId": 5
      },
      "lineNbr": 47,
      "author": {
        "id": 1115962
      },
      "writtenOn": "2017-11-09T15:22:11Z",
      "side": 1,
      "message": "This is getting beyond the context of this review, but here is my 2c:\nDo you think we\u0027d actually need to destroy MURs and create new ones in any given process? If not, perhaps MUR can just be a global process singleton initialized via LAZY_INSTANCE_INITIALIZER? Also, perhaps we don\u0027t really need to distinguish between \"primary\" and \"secondary\" beyond initialization for the most part? So there would be different way to initialize MUR vs UR, but once they are initialized both could be accessed by the same method.",
      "parentUuid": "05d65a17_48e48634",
      "revId": "ce799ce036a1963cbffc8f1b0a22575869e62ac6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7f5c208d_a7ad4000",
        "filename": "services/metrics/public/cpp/mojo_ukm_recorder.h",
        "patchSetId": 5
      },
      "lineNbr": 47,
      "author": {
        "id": 1124674
      },
      "writtenOn": "2017-11-09T19:42:26Z",
      "side": 1,
      "message": "What I am not sure about with that approach is how mojo interface pointers behave when the Service/Connector that they were created for shutdown?  Do they remain viable?  If so, then yes, we can probably just initialize a singleton MUR.",
      "parentUuid": "d451a3e0_11aa93b1",
      "revId": "ce799ce036a1963cbffc8f1b0a22575869e62ac6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}