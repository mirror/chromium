{
  "comments": [
    {
      "key": {
        "uuid": "99c77b20_8138e605",
        "filename": "content/browser/loader/cross_site_document_resource_handler.cc",
        "patchSetId": 30
      },
      "lineNbr": 117,
      "author": {
        "id": 1002169
      },
      "writtenOn": "2017-12-04T23:32:11Z",
      "side": 1,
      "message": "We should probably avoid allocating an OnWillReadController if we\u0027ve already deemed this resource safe, right? So something like:\n\nif (should_block_based_on_headers_ \u0026\u0026 !allow_based_on_sniffing_) {\n  HoldController(std::move(controller));\n  controller \u003d std::make_unique\u003cOnWillReadController\u003e(this, buf, buf_size);\n}\nnext_handler_-\u003eOnWillRead(buf, buf_size, controller);",
      "revId": "d3be6e4d85c951da0e2e1323ea2233562c13cb3b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1b8ced04_35bea8e9",
        "filename": "content/browser/loader/cross_site_document_resource_handler.cc",
        "patchSetId": 30
      },
      "lineNbr": 117,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-12-05T01:53:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "99c77b20_8138e605",
      "revId": "d3be6e4d85c951da0e2e1323ea2233562c13cb3b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a9b6ee69_0aa62586",
        "filename": "content/browser/loader/cross_site_document_resource_handler.cc",
        "patchSetId": 30
      },
      "lineNbr": 120,
      "author": {
        "id": 1002169
      },
      "writtenOn": "2017-12-04T23:32:11Z",
      "side": 1,
      "message": "Is a Resume() guaranteed by the last handler\u0027s OnWillRead? It looks like async_resource_handler calls Resume() always, but the comment in ResourceController\u0027s header file suggests otherwise:\n\n  // Resumes the request. May only be called if the request was previously\n  // deferred. Guaranteed not to call back into the ResourceHandler, or destroy\n  // it, synchronously.\n  virtual void Resume() \u003d 0",
      "revId": "d3be6e4d85c951da0e2e1323ea2233562c13cb3b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5748eca7_ef3e5468",
        "filename": "content/browser/loader/cross_site_document_resource_handler.cc",
        "patchSetId": 30
      },
      "lineNbr": 120,
      "author": {
        "id": 1142059
      },
      "writtenOn": "2017-12-04T23:45:07Z",
      "side": 1,
      "message": "*sigh* this is really subtle.\n\nThe comment in OnWillRead clarifies this a bit:\n  // The request will not continue until one of |controller|\u0027s resume or\n  // cancellation methods is invoked.\n\nStepping back and taking a look at the code, the resource loader sets up the state to be DEFERRED_SYNC before calling into the handler chain:\nhttps://cs.chromium.org/chromium/src/content/browser/loader/resource_loader.cc?rcl\u003d8e7c5e4dc2fe0d5caa25c9815d7b0d2492d791fb\u0026l\u003d695\n\nDEFERRED_SYNC is... weird:\n    // Magic deferral \"stage\" which means that the code is currently in a\n    // recursive call from the ResourceLoader. When in this state, Resume() does\n    // nothing but update the deferral state, and when the stack is unwound back\n    // up to the ResourceLoader, the request will be continued. This is used to\n    // prevent the stack from getting too deep.\n\nSo I think this should be fine, but yeah it isn\u0027t very clear.",
      "parentUuid": "a9b6ee69_0aa62586",
      "revId": "d3be6e4d85c951da0e2e1323ea2233562c13cb3b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "110c5574_562abe73",
        "filename": "content/browser/loader/cross_site_document_resource_handler.cc",
        "patchSetId": 30
      },
      "lineNbr": 120,
      "author": {
        "id": 1001216
      },
      "writtenOn": "2017-12-05T01:53:13Z",
      "side": 1,
      "message": "Thanks.  Sounds like we should be ok with expecting Resume() (or cancel), and perhaps the ResourceController::Resume() comment is a bit confusing.",
      "parentUuid": "5748eca7_ef3e5468",
      "revId": "d3be6e4d85c951da0e2e1323ea2233562c13cb3b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}