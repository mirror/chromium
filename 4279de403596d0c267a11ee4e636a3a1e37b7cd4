{
  "comments": [
    {
      "key": {
        "uuid": "8bde4a80_fee02889",
        "filename": "/COMMIT_MSG",
        "patchSetId": 7
      },
      "lineNbr": 13,
      "author": {
        "id": 1130134
      },
      "writtenOn": "2017-10-03T15:21:20Z",
      "side": 1,
      "message": "The reverse check is in a follow-up CL @ https://chromium-review.googlesource.com/c/chromium/src/+/696270",
      "range": {
        "startLine": 13,
        "startChar": 5,
        "endLine": 13,
        "endChar": 70
      },
      "revId": "4279de403596d0c267a11ee4e636a3a1e37b7cd4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e9a52368_c5d2053c",
        "filename": "chrome/browser/chromeos/accessibility/accessibility_manager.cc",
        "patchSetId": 7
      },
      "lineNbr": 12,
      "author": {
        "id": 1130134
      },
      "writtenOn": "2017-10-03T15:21:20Z",
      "side": 1,
      "message": "These is just a fix for IWYU issues detected by |git cl lint|.",
      "range": {
        "startLine": 12,
        "startChar": 9,
        "endLine": 12,
        "endChar": 17
      },
      "revId": "4279de403596d0c267a11ee4e636a3a1e37b7cd4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "84273a7e_9b9a5e52",
        "filename": "chrome/browser/chromeos/accessibility/accessibility_manager.cc",
        "patchSetId": 7
      },
      "lineNbr": 1139,
      "author": {
        "id": 1130134
      },
      "writtenOn": "2017-10-03T15:21:20Z",
      "side": 1,
      "message": "\u003cmost of the notes below can probably wait for a review by dmazzoni@\u003e\n\n\nBefore this CL, the following sequence of calls could have taken place when running the AccessibilityManagerUserTypeTest.EnableOnLoginScreenAndLogin test (|guid| was temporarily added to PostLoadChromeVox to help with ad-hoc debugging - the |guid| ties PostLoadChromeVox with the UpdateSpokenFeedbackFromPref call creating the callback):\n\nAccessibilityManager::SetProfile; this \u003d 0x29641e0efb00; profile \u003d 0x29641e805340\nAccessibilityManager::UpdateSpokenFeedbackFromPref; this \u003d 0x29641e0efb00; profile_ \u003d 0x29641e805340; guid \u003d 4c2f686b-610c-4ac3-b79d-b7e6434daf80\nAccessibilityManager::UpdateSpokenFeedbackFromPref; this \u003d 0x29641e0efb00; profile_ \u003d ***0x29641e805340***; guid \u003d 1b7b73be-31a2-44bc-a074-62d99e9b8343\nAccessibilityManager::SetProfile; this \u003d 0x29641e0efb00; profile \u003d 0x29641e80c280\nAccessibilityManager::UpdateSpokenFeedbackFromPref; this \u003d 0x29641e0efb00; profile_ \u003d 0x29641e805340; guid \u003d 416343b8-e9ee-4e3d-8526-67acd6225fdc\nAccessibilityManager::UpdateSpokenFeedbackFromPref; this \u003d 0x29641e0efb00; profile_ \u003d 0x29641e80c280; guid \u003d 20c955b6-e5eb-4aab-a32e-cccf9d658555\nAccessibilityManager::PostLoadChromeVox; this \u003d 0x29641e0efb00; profile_ \u003d ***0x29641e80c280***; guid \u003d 1b7b73be-31a2-44bc-a074-62d99e9b8343\n\nNote that when PostLoadChromeVox is called, the |this-\u003eprofile_| is different (profile_ \u003d 0x29641e80c280; guid \u003d 1b7b73be-31a2-44bc-a074-62d99e9b8343) from the time when |chromevox_loader_-\u003eLoad(profile_,...)| was called (profile_ \u003d 0x29641e805340; guid \u003d 1b7b73be-31a2-44bc-a074-62d99e9b8343).  This is problematic.\n\nOne specific problem is that because of the profiles confusion, extensions::ChromeContentBrowserClientExtensionsPart::SiteInstanceGotProcess(...) can be called *before* ExtensionRegistry::AddEnabled is called in the profile (before \u003d when constructing ChromeVoxPanel).  After this CL such wrong order would lead to a renderer kill in response to !CanCommitURL check.\n\n\nSo:\n\n- Do you agree that the above behavior (committing an extension URL before the ExtensionRegistry for the profile knows about the extension) is wrong and needs to be fixed?\n\n- Does the fix in this CL look okay?  Or should we only cancel/invalidate AccessibilityManager::PostLoadChromeVox callback?  FWIW, most of the affected callbacks dereference |profile_| and therefore it seems okay to cancel/invalidate all of them (ReceiveBrailleDisplayState ends up calling UpdateBrailleImeState which dereferences |profile_|;  PostLoadChromeVox passes |profile_| to the constructor of ChromeVoxPanel;  PostSwitchChromeVoxProfile calls ReloadChromeVoxPanel which passes |profile_| to the constructor of ChromeVoxPanel; the only GetWeakPtr-bound callback that doesn\u0027t dereference |profile_| is PostUnloadChromeVox).\n\n- Any thoughts on the PanelTest.LinkMenu chromevox_tests failure on linux_chromium_chromeos_rel_ng?  This failure was only observed once [1] and I haven\u0027t been able to repro the failure locally or on 3 subsequent try runs.\n\n- Any suggestions for how to test the changes here?  Is is possible to test on a linux machine (e.g. after building with target_os \u003d \"chromeos\")?  Is there a manual test that I should try (or do you think the tryjobs coverage should be sufficient)?\n\n[1] https://build.chromium.org/p/tryserver.chromium.linux/builders/linux_chromium_chromeos_rel_ng/builds/520395/steps/chromevox_tests%20%28with%20patch%29",
      "range": {
        "startLine": 1139,
        "startChar": 2,
        "endLine": 1139,
        "endChar": 41
      },
      "revId": "4279de403596d0c267a11ee4e636a3a1e37b7cd4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "80c25748_e9a8c158",
        "filename": "chrome/browser/chromeos/accessibility/accessibility_manager.cc",
        "patchSetId": 7
      },
      "lineNbr": 1139,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-10-03T18:37:13Z",
      "side": 1,
      "message": "I\u0027m deferring this to dmazzoni@, but FWIW your analysis and fix makes sense to me.",
      "parentUuid": "84273a7e_9b9a5e52",
      "range": {
        "startLine": 1139,
        "startChar": 2,
        "endLine": 1139,
        "endChar": 41
      },
      "revId": "4279de403596d0c267a11ee4e636a3a1e37b7cd4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f0ddc142_44bc9a48",
        "filename": "chrome/browser/extensions/chrome_content_browser_client_extensions_part.cc",
        "patchSetId": 7
      },
      "lineNbr": 386,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-10-03T18:37:13Z",
      "side": 1,
      "message": "ChromeContentBrowserClientExtensionsPart::ShouldAllowOpenURL uses url::Origin(url) to properly handle blob: and filesystem: URLs.  Do we need to do the same here?",
      "revId": "4279de403596d0c267a11ee4e636a3a1e37b7cd4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2886ba06_0efca9d6",
        "filename": "chrome/browser/extensions/chrome_content_browser_client_extensions_part.cc",
        "patchSetId": 7
      },
      "lineNbr": 386,
      "author": {
        "id": 1130134
      },
      "writtenOn": "2017-10-06T22:54:38Z",
      "side": 1,
      "message": "Thanks for catching this.\n\nI think what you propose should also work for hosted apps (i.e. I think that it is okay to match web extents on the \"resolved\" origin/url).\n\nI am a bit worries that after the CL the special sauce is duplicated across CanCommitURL and ShouldAllosOpenURL.  I wonder if we could somehow consolidate handling of blob/filesystem URLs into a single place.  FWIW, RFHI::CanCommitOrigin already does this, but here maybe ExtensionRegistry::GetExtensionOrAppByURL should be doing this?\n\nWDYT?",
      "parentUuid": "f0ddc142_44bc9a48",
      "revId": "4279de403596d0c267a11ee4e636a3a1e37b7cd4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9ce07a9f_37f8a513",
        "filename": "chrome/browser/extensions/chrome_content_browser_client_extensions_part.cc",
        "patchSetId": 7
      },
      "lineNbr": 386,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-10-09T22:05:53Z",
      "side": 1,
      "message": "I agree that GetExtensionOrAppByURL should probably be doing this (as well as GetExtensionOrAppIDByURL, and maybe other similar ones?).  This would prevent someone from shooting themselves in the foot with these APIs in the future.  It\u0027d be good to explore this in a separate CL.  It won\u0027t help ShouldAllowOpenURL though, as that one uses a lower-level GetByID, right?  There might be other places that rely on url::Origin to handle blob/filesystem URLs, which could benefit from this.  I think ExtensionNavigationThrottle::WillStartOrRedirectRequest is one, and there may be others.",
      "parentUuid": "2886ba06_0efca9d6",
      "revId": "4279de403596d0c267a11ee4e636a3a1e37b7cd4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f6d6ed89_491ffc90",
        "filename": "chrome/browser/extensions/chrome_content_browser_client_extensions_part.cc",
        "patchSetId": 7
      },
      "lineNbr": 386,
      "author": {
        "id": 1130134
      },
      "writtenOn": "2017-10-10T15:14:57Z",
      "side": 1,
      "message": "I\u0027ve opened https://crbug.com/773296 to track the follow-up work.",
      "parentUuid": "9ce07a9f_37f8a513",
      "revId": "4279de403596d0c267a11ee4e636a3a1e37b7cd4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ebfc0973_72fd9014",
        "filename": "chrome/browser/extensions/chrome_content_browser_client_extensions_part.cc",
        "patchSetId": 7
      },
      "lineNbr": 388,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-10-03T18:37:13Z",
      "side": 1,
      "message": "Just to sanity check this, this allow committing URLs for non-existent or uninstalled/disabled extensions in any process.  Is that the behavior we want?  I suppose there\u0027s a case where we could start a load and then disable/uninstall the extension before this load commits, in which case we probably don\u0027t want to kill it.  I\u0027m not exactly sure how that\u0027ll work or if this case is even possible.  The other thing I\u0027m thinking about is if we have this committed (i.e., error page for non-existent extension URL), it shouldn\u0027t allow us to later enable the extension and reload this URL in the wrong process.  In any case, if we do decide to tighten this somehow, it\u0027s probably best to leave to a follow-up.",
      "revId": "4279de403596d0c267a11ee4e636a3a1e37b7cd4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a91e42eb_a5f6e321",
        "filename": "chrome/browser/extensions/chrome_content_browser_client_extensions_part.cc",
        "patchSetId": 7
      },
      "lineNbr": 388,
      "author": {
        "id": 1130134
      },
      "writtenOn": "2017-10-06T22:54:38Z",
      "side": 1,
      "message": "Yes - good point.  I am trying to flip this to |return false| in https://chromium-review.googlesource.com/c/chromium/src/+/696270.  It still needs more work / it is failing lots of test right now.",
      "parentUuid": "ebfc0973_72fd9014",
      "revId": "4279de403596d0c267a11ee4e636a3a1e37b7cd4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b2586413_0d89fcdc",
        "filename": "chrome/browser/extensions/chrome_content_browser_client_extensions_part.cc",
        "patchSetId": 7
      },
      "lineNbr": 388,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-10-09T22:05:53Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "a91e42eb_a5f6e321",
      "revId": "4279de403596d0c267a11ee4e636a3a1e37b7cd4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "aa443bf8_43911a97",
        "filename": "chrome/browser/extensions/chrome_content_browser_client_extensions_part.cc",
        "patchSetId": 7
      },
      "lineNbr": 399,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-10-03T18:37:13Z",
      "side": 1,
      "message": "Just curious, was this because of error pages or something else?",
      "revId": "4279de403596d0c267a11ee4e636a3a1e37b7cd4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "883b26e7_fd45c7c6",
        "filename": "chrome/browser/extensions/chrome_content_browser_client_extensions_part.cc",
        "patchSetId": 7
      },
      "lineNbr": 399,
      "author": {
        "id": 1130134
      },
      "writtenOn": "2017-10-06T22:54:38Z",
      "side": 1,
      "message": "I forgot, sorry :-(\n\nhttps://build.chromium.org/p/tryserver.chromium.linux/builders/linux_chromium_rel_ng/builds/554573 lists some failures (look for renderer_side_navigation* steps).  Unfortunately it is difficult to see which failures also repro *with* PlzNavigate (and were fixed in subsequent patchsets).",
      "parentUuid": "aa443bf8_43911a97",
      "revId": "4279de403596d0c267a11ee4e636a3a1e37b7cd4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ea67d4e9_a5957221",
        "filename": "content/browser/frame_host/navigation_request.cc",
        "patchSetId": 7
      },
      "lineNbr": 806,
      "author": {
        "id": 1130134
      },
      "writtenOn": "2017-10-03T15:21:20Z",
      "side": 1,
      "message": "Without this condition, this DCHECK would fail when running running ProcessManagementTest.NavigateToBlockedExtensionPageInNewTab test (after the CanCommitURL tightening done by this CL).",
      "range": {
        "startLine": 806,
        "startChar": 2,
        "endLine": 806,
        "endChar": 48
      },
      "revId": "4279de403596d0c267a11ee4e636a3a1e37b7cd4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bf59d913_f4bbb907",
        "filename": "content/browser/frame_host/navigation_request.cc",
        "patchSetId": 7
      },
      "lineNbr": 806,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-10-03T18:37:13Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "ea67d4e9_a5957221",
      "range": {
        "startLine": 806,
        "startChar": 2,
        "endLine": 806,
        "endChar": 48
      },
      "revId": "4279de403596d0c267a11ee4e636a3a1e37b7cd4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4a76c8bd_e5feaa71",
        "filename": "content/browser/frame_host/render_frame_host_impl.cc",
        "patchSetId": 7
      },
      "lineNbr": 1554,
      "author": {
        "id": 1130134
      },
      "writtenOn": "2017-10-03T15:21:20Z",
      "side": 1,
      "message": "Alex mentioned that blocked pages should end up using a unique origin - I am trying to add a corresponding kill in a follow-up CL @ https://chromium-review.googlesource.com/#/c/chromium/src/+/692917.",
      "range": {
        "startLine": 1554,
        "startChar": 7,
        "endLine": 1554,
        "endChar": 28
      },
      "revId": "4279de403596d0c267a11ee4e636a3a1e37b7cd4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "60c3e58f_fcdd5eef",
        "filename": "content/browser/frame_host/render_frame_host_impl.cc",
        "patchSetId": 7
      },
      "lineNbr": 1554,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-10-03T18:37:13Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "4a76c8bd_e5feaa71",
      "range": {
        "startLine": 1554,
        "startChar": 7,
        "endLine": 1554,
        "endChar": 28
      },
      "revId": "4279de403596d0c267a11ee4e636a3a1e37b7cd4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3c22e0be_17e9727a",
        "filename": "content/browser/frame_host/render_frame_host_impl.cc",
        "patchSetId": 7
      },
      "lineNbr": 1561,
      "author": {
        "id": 1130134
      },
      "writtenOn": "2017-10-03T15:21:20Z",
      "side": 1,
      "message": "Without this change, the ProcessManagementTest.NavigateToBlockedExtensionPageInNewTab test would fail (even after changing/fixing the DCHECK in NavigationRequest::OnRequestFailed).",
      "range": {
        "startLine": 1561,
        "startChar": 6,
        "endLine": 1561,
        "endChar": 32
      },
      "revId": "4279de403596d0c267a11ee4e636a3a1e37b7cd4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "af16f3f4_a826aeab",
        "filename": "content/browser/frame_host/render_frame_host_impl.cc",
        "patchSetId": 7
      },
      "lineNbr": 1561,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-10-03T18:37:13Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "3c22e0be_17e9727a",
      "range": {
        "startLine": 1561,
        "startChar": 6,
        "endLine": 1561,
        "endChar": 32
      },
      "revId": "4279de403596d0c267a11ee4e636a3a1e37b7cd4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "eb234ab4_6554bc62",
        "filename": "content/browser/frame_host/render_frame_host_impl.cc",
        "patchSetId": 7
      },
      "lineNbr": 1564,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-10-03T18:37:13Z",
      "side": 1,
      "message": "I\u0027m curious if it\u0027s worth collecting any UMAs for things that we block (extension URL in non-extension process, non-extension URL in extension process, etc).  I suppose we\u0027ll investigate any unexpected renderer kills anyway, but still curious if there might be value in knowing how often the blocking kicks in in practice.",
      "revId": "4279de403596d0c267a11ee4e636a3a1e37b7cd4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "10d6d464_c0dbba3a",
        "filename": "content/browser/frame_host/render_frame_host_impl.cc",
        "patchSetId": 7
      },
      "lineNbr": 1564,
      "author": {
        "id": 1130134
      },
      "writtenOn": "2017-10-06T22:54:38Z",
      "side": 1,
      "message": "I wondered whether CanCommitURL could not only return a true/false verdict, but might also be able to return a separate classification of the problem.  I didn\u0027t think about a separate UMA, but thought that maybe a bad message number/enum could be returned.  This seems difficult to achieve from layering perspective (the enum has to be unique across //content and //extensions).\n\nPlease let me know if you can think of a nice way to achieve this.",
      "parentUuid": "eb234ab4_6554bc62",
      "revId": "4279de403596d0c267a11ee4e636a3a1e37b7cd4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4c7902cd_1bb9e4b7",
        "filename": "content/browser/frame_host/render_frame_host_impl.cc",
        "patchSetId": 7
      },
      "lineNbr": 1564,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-10-09T22:05:53Z",
      "side": 1,
      "message": "Yeah, good point about layering being a pain for this.  Not sure either how to maintain such an enum for a finer-grained bad message reason.  I was thinking more about just logging an UMA in //extensions at the points where we return false from CCBCEP::CanCommitURL, and another UMA for any kill decisions made inside //content (such as blocked navigations violating the unique origin requirement), and keeping just one bad message reason.  Regardless, it\u0027s fine to think about it in a followup, when we add more ways to get to the kill.",
      "parentUuid": "10d6d464_c0dbba3a",
      "revId": "4279de403596d0c267a11ee4e636a3a1e37b7cd4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cfe074e4_2b654f5b",
        "filename": "content/browser/frame_host/render_frame_host_impl.cc",
        "patchSetId": 7
      },
      "lineNbr": 1564,
      "author": {
        "id": 1130134
      },
      "writtenOn": "2017-10-10T15:14:57Z",
      "side": 1,
      "message": "Okay.  Let me also try to flesh out some raw thoughts / notes while they are fresh on my mind:\n\nI think there are 2 concerns here: 1) desire to understand kills happening in the wild and 2) desire to avoid accidental kills (e.g. avoid a surprise on Stable after tweaking CanCommitURL checks somewhere deep [e.g. in chrome/extensions layer]).\n\nWe can solve #1 by either A) adding generic data to *all* the kills (not just to CommitURL) or B) adding UMA specific to CommitURL.  I think I prefer (A).\n\nI am not sure how we could solve #2.  UMA and/or DWOC specific to CommitURL?  Kill switch for all kills?",
      "parentUuid": "4c7902cd_1bb9e4b7",
      "revId": "4279de403596d0c267a11ee4e636a3a1e37b7cd4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fbe325f7_785fcb5e",
        "filename": "content/browser/frame_host/render_frame_host_impl.cc",
        "patchSetId": 7
      },
      "lineNbr": 1564,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-10-10T21:02:50Z",
      "side": 1,
      "message": "Ack. https://chromium-review.googlesource.com/c/chromium/src/+/707801 will get us started on #1, and perhaps if needed, we could also eventually set crash keys here that are specific to this renderer kill, mainly |validated_params-\u003eurl.GetOrigin()|?",
      "parentUuid": "cfe074e4_2b654f5b",
      "revId": "4279de403596d0c267a11ee4e636a3a1e37b7cd4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2f0879ba_f17d9177",
        "filename": "content/browser/frame_host/render_frame_host_impl.cc",
        "patchSetId": 7
      },
      "lineNbr": 3667,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-10-03T18:37:13Z",
      "side": 1,
      "message": "Of course this is something we want to change eventually; might be good to reference 614463 for this.",
      "revId": "4279de403596d0c267a11ee4e636a3a1e37b7cd4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9a3ef522_8a6ae3c9",
        "filename": "content/browser/frame_host/render_frame_host_impl.cc",
        "patchSetId": 7
      },
      "lineNbr": 3667,
      "author": {
        "id": 1130134
      },
      "writtenOn": "2017-10-06T22:54:38Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2f0879ba_f17d9177",
      "revId": "4279de403596d0c267a11ee4e636a3a1e37b7cd4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "90635948_37047133",
        "filename": "content/browser/frame_host/render_frame_host_impl.cc",
        "patchSetId": 7
      },
      "lineNbr": 3671,
      "author": {
        "id": 1130134
      },
      "writtenOn": "2017-10-03T15:21:20Z",
      "side": 1,
      "message": "Without this early return, a bunch of WebViewTest.*, WebViewPluginTest.* and WebViewGuestScrollTouchTest.* tests would fail.",
      "range": {
        "startLine": 3671,
        "startChar": 4,
        "endLine": 3671,
        "endChar": 16
      },
      "revId": "4279de403596d0c267a11ee4e636a3a1e37b7cd4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8765cc4c_ca83f4a7",
        "filename": "content/browser/frame_host/render_frame_host_impl.cc",
        "patchSetId": 7
      },
      "lineNbr": 3671,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-10-03T18:37:13Z",
      "side": 1,
      "message": "I wonder if we still want to somehow do the CWS check here though?  Seems like we previously didn\u0027t allow CWS to commit inside webview guests, but now we do.\n\nThere\u0027s a similar question about allowing blocked navigations to CWS commit anywhere.  We should be very careful that it doesn\u0027t let us later avoid a process swap to a real CWS page - I *think* it\u0027s ok because we\u0027ll catch it on next commit, but still wanted to mention it.",
      "parentUuid": "90635948_37047133",
      "range": {
        "startLine": 3671,
        "startChar": 4,
        "endLine": 3671,
        "endChar": 16
      },
      "revId": "4279de403596d0c267a11ee4e636a3a1e37b7cd4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "19227fbc_b38087f2",
        "filename": "content/browser/frame_host/render_frame_host_impl.cc",
        "patchSetId": 7
      },
      "lineNbr": 3671,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-10-09T22:05:53Z",
      "side": 1,
      "message": "ping on this question :)",
      "parentUuid": "8765cc4c_ca83f4a7",
      "range": {
        "startLine": 3671,
        "startChar": 4,
        "endLine": 3671,
        "endChar": 16
      },
      "revId": "4279de403596d0c267a11ee4e636a3a1e37b7cd4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6685754f_a3ed0c9b",
        "filename": "content/browser/frame_host/render_frame_host_impl.cc",
        "patchSetId": 7
      },
      "lineNbr": 3671,
      "author": {
        "id": 1130134
      },
      "writtenOn": "2017-10-10T15:14:57Z",
      "side": 1,
      "message": "Thanks for the ping.\n\n1. Blocked navigations seem okay (if we trust that a block navigation never commits the real content).\n\n2. webview guests are interesting.  I think things are okay after this CL, but I am not sure.  We can chat today with Charlie to make sure we\u0027re not missing anything.  I hope that other CWS-specific checks sufficiently help here (even in absence of CanCommitURL defense-in-depth): DoesSiteRequireDedicatedProcess, ShouldSwapBrowsingInstancesForNavigation.  And maybe we can always play the user-has-to-trust-the-webview-tag-embedding-app-anyway card here?",
      "parentUuid": "19227fbc_b38087f2",
      "range": {
        "startLine": 3671,
        "startChar": 4,
        "endLine": 3671,
        "endChar": 16
      },
      "revId": "4279de403596d0c267a11ee4e636a3a1e37b7cd4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "beb24b90_151f3f1c",
        "filename": "content/browser/frame_host/render_frame_host_impl.cc",
        "patchSetId": 7
      },
      "lineNbr": 3671,
      "author": {
        "id": 1130134
      },
      "writtenOn": "2017-10-10T18:35:58Z",
      "side": 1,
      "message": "I talked with Charlie today and a high-level bit of information is that guest view is associated with a separate storage partition - therefore a Chrome Web Store loaded inside the guest view would not be able to interact with the main profile / install things in the main profile.  Therefore relaxing the kills for guest view (and ignoring CWS in this case) seems okay.",
      "parentUuid": "6685754f_a3ed0c9b",
      "range": {
        "startLine": 3671,
        "startChar": 4,
        "endLine": 3671,
        "endChar": 16
      },
      "revId": "4279de403596d0c267a11ee4e636a3a1e37b7cd4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "32874124_e0e47d10",
        "filename": "content/browser/frame_host/render_frame_host_impl.cc",
        "patchSetId": 7
      },
      "lineNbr": 3671,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-10-10T21:02:50Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "beb24b90_151f3f1c",
      "range": {
        "startLine": 3671,
        "startChar": 4,
        "endLine": 3671,
        "endChar": 16
      },
      "revId": "4279de403596d0c267a11ee4e636a3a1e37b7cd4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}