{
  "comments": [
    {
      "key": {
        "uuid": "b78daad6_dac1cbba",
        "filename": "content/renderer/device_sensors/device_motion_event_pump.cc",
        "patchSetId": 14
      },
      "lineNbr": 94,
      "author": {
        "id": 1116054
      },
      "writtenOn": "2017-08-02T21:22:13Z",
      "side": 1,
      "message": "If I understand correctly it\u0027s possible to have sensors being not null while the\nbuffer is not yet initialized (which happens inside the OnSensorCreated\ncallback)?\n\nI guess it looks more complicated now because we keep the shared_buffers and\nsensors around after stopping. If the shared_buffers and sensors where cleared\n(mojo pipe closed) after each stop the DidStart could be invoked in\nOnSensorCreated.\n\nAnyway, maybe an idea to simplify some duplicate code is to put the CanStart()\ninside the DidStart() (with an early return) and rename DidStart to something\nlike DidStartIfPossible() or MaybeDidStart(). Also probably better to rename\nCanStart() to something more specific like SensorSharedBuffersReady(). And also\nseems like a good idea to add some comments (probably in DidStart) when this can\nhappen and why SensorSharedBufferReady needs to be checked..",
      "range": {
        "startLine": 94,
        "startChar": 19,
        "endLine": 94,
        "endChar": 0
      },
      "revId": "0b26bc25db4f1032376c91668581e162ea88cb0a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0b2d7417_e214bc75",
        "filename": "content/renderer/device_sensors/device_motion_event_pump.cc",
        "patchSetId": 14
      },
      "lineNbr": 94,
      "author": {
        "id": 1149144
      },
      "writtenOn": "2017-08-03T00:06:01Z",
      "side": 1,
      "message": "\u003eIf I understand correctly it\u0027s possible to have sensors being not null while the\n\u003ebuffer is not yet initialized (which happens inside the OnSensorCreated\n\u003ecallback)?\n\nYes.\n\n\u003eI guess it looks more complicated now because we keep the shared_buffers and\n\u003esensors around after stopping. If the shared_buffers and sensors where cleared\n\u003e(mojo pipe closed) after each stop the DidStart could be invoked in\n\u003eOnSensorCreated.\n\nAfter stopping, the \"state_ \u003d PumpState::STOPPED;\" is called, and inside the DidStartIfPossible(), it checks:\n\"if (state_ !\u003d PumpState::PENDING_START)\n    return;\"\nSo it will have an early return, and the DeviceMotionEventPump won\u0027t be started.\n\n\u003eAnyway, maybe an idea to simplify some duplicate code is to put the CanStart()\n\u003einside the DidStart() (with an early return) and rename DidStart to something\n\u003elike DidStartIfPossible() or MaybeDidStart(). Also probably better to rename\n\u003eCanStart() to something more specific like SensorSharedBuffersReady(). And also\n\u003eseems like a good idea to add some comments (probably in DidStart) when this can\n\u003ehappen and why SensorSharedBufferReady needs to be checked..\n\nI renamed: DidStart() -\u003e DidStartIfPossible()\n           CanStart() -\u003e SensorSharedBuffersReady()\n\nMoved the SensorSharedBuffersReady() call inside the DidStartIfPossible(), and added comments in DidStartIfPossible().",
      "parentUuid": "b78daad6_dac1cbba",
      "range": {
        "startLine": 94,
        "startChar": 19,
        "endLine": 94,
        "endChar": 0
      },
      "revId": "0b26bc25db4f1032376c91668581e162ea88cb0a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "87cfd34f_9eab57b8",
        "filename": "content/renderer/device_sensors/device_motion_event_pump.cc",
        "patchSetId": 14
      },
      "lineNbr": 94,
      "author": {
        "id": 1116054
      },
      "writtenOn": "2017-08-07T14:47:00Z",
      "side": 1,
      "message": "ok thanks.",
      "parentUuid": "0b2d7417_e214bc75",
      "range": {
        "startLine": 94,
        "startChar": 19,
        "endLine": 94,
        "endChar": 0
      },
      "revId": "0b26bc25db4f1032376c91668581e162ea88cb0a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "308408cd_8e2ab097",
        "filename": "content/renderer/device_sensors/device_motion_event_pump.cc",
        "patchSetId": 14
      },
      "lineNbr": 245,
      "author": {
        "id": 1116054
      },
      "writtenOn": "2017-08-02T21:22:13Z",
      "side": 1,
      "message": "Is it possible to fire \u0027partial\u0027 motion data here? in the current implementation there is specific code to check that all the possible sensors are active before activating the buffer:\nhttps://cs.chromium.org/chromium/src/device/sensors/sensor_manager_android.cc?l\u003d270",
      "revId": "0b26bc25db4f1032376c91668581e162ea88cb0a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7c6f1214_4d9cf6e5",
        "filename": "content/renderer/device_sensors/device_motion_event_pump.cc",
        "patchSetId": 14
      },
      "lineNbr": 245,
      "author": {
        "id": 1149144
      },
      "writtenOn": "2017-08-03T00:06:01Z",
      "side": 1,
      "message": "When only some sensors are active, partial motion data will be sent to the blink side. And if in the future, other sensors are active after the DeviceMotionEventPump::SensorEntry::OnSensorCreated() callback, more motion data will be sent. By doing that, we don\u0027t need to wait until three sensors are all checked, and the DeviceMotionEventPump can be started as soon as there is at least one sensor that can provide data.\n\nI think this behavior follows the DeviceOrientation Event spec, since it is a similar situation that some sensors are not available and device motion spec allows that:\nhttps://cs.chromium.org/chromium/src/device/sensors/android/java/src/org/chromium/device/sensors/DeviceSensors.java?l\u003d188",
      "parentUuid": "308408cd_8e2ab097",
      "revId": "0b26bc25db4f1032376c91668581e162ea88cb0a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "184b036e_2ee351dc",
        "filename": "content/renderer/device_sensors/device_motion_event_pump.cc",
        "patchSetId": 14
      },
      "lineNbr": 245,
      "author": {
        "id": 1116054
      },
      "writtenOn": "2017-08-07T14:47:00Z",
      "side": 1,
      "message": "I think we need to fire only when all possible data can be provided (i.e. wait for all available sensors). This is also how it is implemented now. Otherwise it\u0027s hard for the developer to know if the data can be provided at all or may (suddenly) become available in future events.\n\nThat said I think your implementation actually does the right thing due to \"SensorSharedBuffersready()\" and does not start the pump until *all* shared memory buffers have been initialized (or sensors have failed). I could be missing something though.. wdyt?",
      "parentUuid": "7c6f1214_4d9cf6e5",
      "revId": "0b26bc25db4f1032376c91668581e162ea88cb0a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "18d599f7_9587cbdd",
        "filename": "content/renderer/device_sensors/device_motion_event_pump.cc",
        "patchSetId": 14
      },
      "lineNbr": 245,
      "author": {
        "id": 1149144
      },
      "writtenOn": "2017-08-07T17:32:12Z",
      "side": 1,
      "message": "Thanks for the comment! Right, sorry for the confusion here. I analyzed the code again and FireEvent() will only be called when all possible data can be provided (i.e. wait for all available sensors), because SensorReadingCouldBeRead() will only return true if all sensors are either fully ready (its shared memory buffer is initialized) or failed. If any sensor is in the intermediate state, the SensorReadingCouldBeRead() will return false.",
      "parentUuid": "184b036e_2ee351dc",
      "revId": "0b26bc25db4f1032376c91668581e162ea88cb0a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}