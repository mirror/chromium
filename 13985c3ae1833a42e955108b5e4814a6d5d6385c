{
  "comments": [
    {
      "key": {
        "uuid": "8b270562_8a831ed3",
        "filename": "base/test/scoped_task_environment.cc",
        "patchSetId": 3
      },
      "lineNbr": 36,
      "author": {
        "id": 1002897
      },
      "writtenOn": "2017-08-29T06:13:38Z",
      "side": 1,
      "message": "?",
      "range": {
        "startLine": 35,
        "startChar": 2,
        "endLine": 36,
        "endChar": 42
      },
      "revId": "13985c3ae1833a42e955108b5e4814a6d5d6385c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c6c251e3_384bc026",
        "filename": "base/test/scoped_task_environment.cc",
        "patchSetId": 3
      },
      "lineNbr": 36,
      "author": {
        "id": 1001534
      },
      "writtenOn": "2017-09-13T15:15:24Z",
      "side": 1,
      "message": "Oops leftover from a previous idea",
      "parentUuid": "8b270562_8a831ed3",
      "range": {
        "startLine": 35,
        "startChar": 2,
        "endLine": 36,
        "endChar": 42
      },
      "revId": "13985c3ae1833a42e955108b5e4814a6d5d6385c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a24df037_4fd1c644",
        "filename": "base/test/scoped_task_environment.cc",
        "patchSetId": 3
      },
      "lineNbr": 47,
      "author": {
        "id": 1002897
      },
      "writtenOn": "2017-09-12T17:29:58Z",
      "side": 1,
      "message": "TaskObserver is no longer used.",
      "range": {
        "startLine": 23,
        "startChar": 0,
        "endLine": 47,
        "endChar": 0
      },
      "revId": "13985c3ae1833a42e955108b5e4814a6d5d6385c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7a59fefa_7a4f046c",
        "filename": "base/test/scoped_task_environment.cc",
        "patchSetId": 3
      },
      "lineNbr": 47,
      "author": {
        "id": 1001534
      },
      "writtenOn": "2017-09-13T15:15:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a24df037_4fd1c644",
      "range": {
        "startLine": 23,
        "startChar": 0,
        "endLine": 47,
        "endChar": 0
      },
      "revId": "13985c3ae1833a42e955108b5e4814a6d5d6385c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "18747f69_d2fe7174",
        "filename": "base/test/scoped_task_environment.cc",
        "patchSetId": 3
      },
      "lineNbr": 142,
      "author": {
        "id": 1002897
      },
      "writtenOn": "2017-08-29T06:13:38Z",
      "side": 1,
      "message": "no else, since the if returns?",
      "range": {
        "startLine": 142,
        "startChar": 4,
        "endLine": 142,
        "endChar": 10
      },
      "revId": "13985c3ae1833a42e955108b5e4814a6d5d6385c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ca0360ee_f53062e0",
        "filename": "base/test/scoped_task_environment.cc",
        "patchSetId": 3
      },
      "lineNbr": 142,
      "author": {
        "id": 1001534
      },
      "writtenOn": "2017-09-13T15:15:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "18747f69_d2fe7174",
      "range": {
        "startLine": 142,
        "startChar": 4,
        "endLine": 142,
        "endChar": 10
      },
      "revId": "13985c3ae1833a42e955108b5e4814a6d5d6385c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cf2aa333_53b55749",
        "filename": "base/test/scoped_task_environment.cc",
        "patchSetId": 3
      },
      "lineNbr": 159,
      "author": {
        "id": 1002897
      },
      "writtenOn": "2017-09-12T17:29:58Z",
      "side": 1,
      "message": "The previous implementation worked well in cases where a TaskScheduler task posted a task to the main thread and waited for it to run using a WaitableEvent (e.g. sync will probably do that once migrated to TaskScheduler https://cs.chromium.org/chromium/src/components/sync/engine/model_safe_worker.cc?l\u003d115). This case could deadlock with the new implementation.",
      "range": {
        "startLine": 158,
        "startChar": 4,
        "endLine": 159,
        "endChar": 52
      },
      "revId": "13985c3ae1833a42e955108b5e4814a6d5d6385c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "39e005f1_52577d32",
        "filename": "base/test/scoped_task_environment.cc",
        "patchSetId": 3
      },
      "lineNbr": 159,
      "author": {
        "id": 1001534
      },
      "writtenOn": "2017-09-13T15:15:24Z",
      "side": 1,
      "message": "Interesting, content::RunAllBlockingPoolTasksUntilIdle() has this issue as well FWIW. I think we will need a solution for both and as such I\u0027m not convinced it\u0027s needed in this CL (I\u0027m thinking of a parameter an optional AtomicFlag passed to TaskScheduler::FlushForTesting() which would tell it to return early and which would be set when something is posted to the main loop -- which can be done by having an overriding forwarding MessageLoop::SetTaskRunner()).",
      "parentUuid": "cf2aa333_53b55749",
      "range": {
        "startLine": 158,
        "startChar": 4,
        "endLine": 159,
        "endChar": 52
      },
      "revId": "13985c3ae1833a42e955108b5e4814a6d5d6385c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a758ed8f_a5ae3f74",
        "filename": "base/test/scoped_task_environment.cc",
        "patchSetId": 3
      },
      "lineNbr": 161,
      "author": {
        "id": 1002897
      },
      "writtenOn": "2017-08-29T06:13:38Z",
      "side": 1,
      "message": "s/tasks remaining tasks/remaining tasks/",
      "range": {
        "startLine": 161,
        "startChar": 17,
        "endLine": 161,
        "endChar": 38
      },
      "revId": "13985c3ae1833a42e955108b5e4814a6d5d6385c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fa735276_4cedda0c",
        "filename": "base/test/scoped_task_environment.cc",
        "patchSetId": 3
      },
      "lineNbr": 161,
      "author": {
        "id": 1001534
      },
      "writtenOn": "2017-09-13T15:15:24Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a758ed8f_a5ae3f74",
      "range": {
        "startLine": 161,
        "startChar": 17,
        "endLine": 161,
        "endChar": 38
      },
      "revId": "13985c3ae1833a42e955108b5e4814a6d5d6385c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ee9ebe5b_683d4965",
        "filename": "base/test/scoped_task_environment.h",
        "patchSetId": 3
      },
      "lineNbr": 68,
      "author": {
        "id": 1002897
      },
      "writtenOn": "2017-08-29T06:13:38Z",
      "side": 1,
      "message": "It\u0027s sad that MOCK_TIME isn\u0027t compatible with UI and IO. I think ScopedTaskEnvironment should register a custom TaskRunner that holds tasks until they are allowed to run. When they are allowed to run, it should send them to the backing MessageLoop(ForUI|ForIO) which should take care of running them.",
      "range": {
        "startLine": 63,
        "startChar": 4,
        "endLine": 68,
        "endChar": 14
      },
      "revId": "13985c3ae1833a42e955108b5e4814a6d5d6385c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f8f3c907_5b9d7170",
        "filename": "base/test/scoped_task_environment.h",
        "patchSetId": 3
      },
      "lineNbr": 68,
      "author": {
        "id": 1001534
      },
      "writtenOn": "2017-09-08T00:01:27Z",
      "side": 1,
      "message": "I\u0027ve been thinking about this comment a lot and going back and forth on my opinion.\n\nThe first thing that made me hesitate if that re-enter implementing support in ScopedTaskEnvironment is sad.\n\nBut then I thought it made sense and should be the main mode of mocking time (I don\u0027t think it works for *all* usages of TestMockTimeTaskRunner::kBoundToThread but don\u0027t want to diverge).\n\nBut then... I came back to this CL to implement it and realized one thing I\u0027d forgotten: \n  an important part of the TestMockTimeTaskRunner kBoundToThread API I think is that I decided (and implemented) that RunLoop::Run() should advance time when there are only delayed tasks left and QuitWhenIdle wasn\u0027t invoked). This is crucial I think to having mock time by default at scale as it will allow things that wait for short timeouts inside a RunLoop::Run(), e.g. animation tests could be much faster).\n\nThe only way to support this I think *and* UI/IO loops is to have TestMockTimeTaskRunner take an optional MessageLoop param (or probably better adding TestMockTimeTaskRunner::Types for UI/IO and having an ML member under the hood as an impl detail).\n\nBut then the registered RunLoop::Delegate/TTRH needs to be the TestMockTimeTaskRunner not the ML. So ML needs to be runnable without being BoundToThread.\nOh and TestMockTimeTaskRunner would need a way to Run() ML without using RunLoop.. (really don\u0027t think we want nested RunLoop::Delegates...)\n\nSo... In all this I think the most important is that RunLoop::Run() keeps advancing time when needed and I\u0027m not convinced support for mock+UI/IO is as critical. And even if we wanted to get there I think it requires multiple changes as labeled above so I\u0027m now falling back on this being the right change at this time.\n\nWDYT?!",
      "parentUuid": "ee9ebe5b_683d4965",
      "range": {
        "startLine": 63,
        "startChar": 4,
        "endLine": 68,
        "endChar": 14
      },
      "revId": "13985c3ae1833a42e955108b5e4814a6d5d6385c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "22f9a4df_48b2f01c",
        "filename": "base/test/scoped_task_environment.h",
        "patchSetId": 3
      },
      "lineNbr": 68,
      "author": {
        "id": 1003325
      },
      "writtenOn": "2017-09-08T01:20:03Z",
      "side": 1,
      "message": "This might be easier discussed in person.\n\nIs the issue that ML handles the Delayed tasks directly, going around the mock time behavior?\n\nIf so, we can set a custom task runner on the ML to intercept these delayed tasks and forward to the real ML task runner as necessary should the dev want mocked time behavior.",
      "parentUuid": "f8f3c907_5b9d7170",
      "range": {
        "startLine": 63,
        "startChar": 4,
        "endLine": 68,
        "endChar": 14
      },
      "revId": "13985c3ae1833a42e955108b5e4814a6d5d6385c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eac16bc8_e65ed4b3",
        "filename": "base/test/scoped_task_environment.h",
        "patchSetId": 3
      },
      "lineNbr": 68,
      "author": {
        "id": 1001534
      },
      "writtenOn": "2017-09-10T16:47:06Z",
      "side": 1,
      "message": "I think this is actually one of those things that\u0027s easier to discuss in writing because it requires so much thought at every step.\n\n\u003e Is the issue that ML handles the Delayed tasks directly, going around the mock time behavior?\n\nNot really, the issue is that RunLoop::Run() on MessageLoop doesn\u0027t advance time when it\u0027s out of undelayed tasks and that is the crucial bit IMO to having scalable mock-time-by-default in tests.\n\nHaving a custom task runner doesn\u0027t solve that as we\u0027d also need a custom RunLoop::Delegate. And it would need to support the FastForward*() APIs too -- essentially implementing TestMockTimeTaskRunner in MessageLoop (or solution outlined in OP). Or we could allow nesting TTRH and RL:Delegate for testing (we already have TTRH nesting for testing).\n\nAll solutions appear complex though and I don\u0027t think should block introducing MOCK_TIME mode for non UI/IO loops.",
      "parentUuid": "22f9a4df_48b2f01c",
      "range": {
        "startLine": 63,
        "startChar": 4,
        "endLine": 68,
        "endChar": 14
      },
      "revId": "13985c3ae1833a42e955108b5e4814a6d5d6385c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6e5943e2_b8a0e5a6",
        "filename": "base/test/scoped_task_environment.h",
        "patchSetId": 3
      },
      "lineNbr": 68,
      "author": {
        "id": 1002897
      },
      "writtenOn": "2017-09-11T14:19:05Z",
      "side": 1,
      "message": "Could this be a separate option so that it can be used at the same time as the MainThreadType option in the future?",
      "parentUuid": "eac16bc8_e65ed4b3",
      "range": {
        "startLine": 63,
        "startChar": 4,
        "endLine": 68,
        "endChar": 14
      },
      "revId": "13985c3ae1833a42e955108b5e4814a6d5d6385c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4dd6d222_cffb7ac2",
        "filename": "base/test/scoped_task_environment.h",
        "patchSetId": 3
      },
      "lineNbr": 68,
      "author": {
        "id": 1003325
      },
      "writtenOn": "2017-09-11T17:16:47Z",
      "side": 1,
      "message": "\u003e We\u0027d also need a custom RunLoop::Delegate.\n\nWhat makes the RunLoop::Delegate required here?\n\n\u003e I think this is actually one of those things that\u0027s easier to discuss in writing because it requires so much thought at every step.\n\nI don\u0027t get the sense that we\u0027re on the same page here with regards to the mechanics of the proposal, so I\u0027d like to get that before discussing further in writing. Once we\u0027re all on the same page, then discussing in writing makes sense.",
      "parentUuid": "6e5943e2_b8a0e5a6",
      "range": {
        "startLine": 63,
        "startChar": 4,
        "endLine": 68,
        "endChar": 14
      },
      "revId": "13985c3ae1833a42e955108b5e4814a6d5d6385c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "39b48e1d_106da458",
        "filename": "base/test/scoped_task_environment.h",
        "patchSetId": 3
      },
      "lineNbr": 68,
      "author": {
        "id": 1001534
      },
      "writtenOn": "2017-09-11T23:40:42Z",
      "side": 1,
      "message": "\u003e Could this be a separate option so that it can be used at the same time as the MainThreadType option in the future?\n\nGood idea, the one thing I\u0027m not a fan of is having to specify all params when you want to specify the last one with others as default... Would it be easy to have TaskTraits-like bag semantics here?\n\nFor now though since this is really a property of the main thread and isn\u0027t compatible with UI/IO it makes sense to keep it in MainThreadType? It\u0027d be an easy search-and-replace if we split it off MainThreadType eventually?\n\n\u003e \u003e We\u0027d also need a custom RunLoop::Delegate.\n\u003e \n\u003e What makes the RunLoop::Delegate required here?\n\nOtherwise we can\u0027t RunLoop::Run() in a mock time environment (or rather we can but it would run the underlying MessageLoop and wouldn\u0027t advance time when done with undelayed tasks which is very important IMO as mentioned above and the whole premise of this discussion).",
      "parentUuid": "4dd6d222_cffb7ac2",
      "range": {
        "startLine": 63,
        "startChar": 4,
        "endLine": 68,
        "endChar": 14
      },
      "revId": "13985c3ae1833a42e955108b5e4814a6d5d6385c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "91a08202_c78416de",
        "filename": "base/test/scoped_task_environment.h",
        "patchSetId": 3
      },
      "lineNbr": 68,
      "author": {
        "id": 1002897
      },
      "writtenOn": "2017-09-12T17:29:58Z",
      "side": 1,
      "message": "I think it\u0027s a good idea to introduce a bag of options in the future.\n\nI agree that since MOCK_TIME cannot be used with IO/UI main thread for now, it makes sense to have that option in the same enum for now.",
      "parentUuid": "39b48e1d_106da458",
      "range": {
        "startLine": 63,
        "startChar": 4,
        "endLine": 68,
        "endChar": 14
      },
      "revId": "13985c3ae1833a42e955108b5e4814a6d5d6385c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9b5106bc_f575be8d",
        "filename": "base/test/scoped_task_environment.h",
        "patchSetId": 3
      },
      "lineNbr": 68,
      "author": {
        "id": 1001534
      },
      "writtenOn": "2017-09-13T15:15:24Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "91a08202_c78416de",
      "range": {
        "startLine": 63,
        "startChar": 4,
        "endLine": 68,
        "endChar": 14
      },
      "revId": "13985c3ae1833a42e955108b5e4814a6d5d6385c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}