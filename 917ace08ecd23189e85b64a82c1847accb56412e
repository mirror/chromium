{
  "comments": [
    {
      "key": {
        "uuid": "f1e5996f_f987484e",
        "filename": "components/spellcheck/browser/spell_check_host_impl.cc",
        "patchSetId": 47
      },
      "lineNbr": 19,
      "author": {
        "id": 1002114
      },
      "writtenOn": "2018-01-30T17:23:18Z",
      "side": 1,
      "message": "If you make |session_bridge_| into a plain old member variable, then this constructor does not need any #ifdefs.\n\nSpellCheckHostImpl::SpellCheckHostImpl() {}",
      "range": {
        "startLine": 15,
        "startChar": 0,
        "endLine": 19,
        "endChar": 1
      },
      "revId": "917ace08ecd23189e85b64a82c1847accb56412e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0e7d6f20_49a81711",
        "filename": "components/spellcheck/browser/spell_check_host_impl.h",
        "patchSetId": 47
      },
      "lineNbr": 49,
      "author": {
        "id": 1002114
      },
      "writtenOn": "2018-01-30T17:23:18Z",
      "side": 1,
      "message": "|session_bridge_| is initialized in the constructor and never reset afterwards. Therefore, this can be a plain old member variable without the need for unique_ptr.\n\nSpellCheckerSessionBridge session_bridge_;",
      "range": {
        "startLine": 49,
        "startChar": 3,
        "endLine": 49,
        "endChar": 61
      },
      "revId": "917ace08ecd23189e85b64a82c1847accb56412e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5037baa7_707db0e8",
        "filename": "components/spellcheck/browser/spellchecker_session_bridge_android.h",
        "patchSetId": 47
      },
      "lineNbr": 56,
      "author": {
        "id": 1002114
      },
      "writtenOn": "2018-01-30T17:23:18Z",
      "side": 1,
      "message": "This needs to be private in order to prohibit copying and assigning. It\u0027s strange to see a private section in a struct, so let\u0027s make it into a class. Member variables in classes have trailing underscores (\"_\") in name, by the way.\n\n  class SpellingRequest {\n   public:\n    SpellingRequest(const base::string16\u0026 text,\n                    RequestTextCheckCallback\u0026\u0026 callback);\n    ~SpellingRequest();\n\n    base::string16 text_;\n    RequestTextCheckCallback callback_;\n\n   private:\n    DISALLOW_COPY_AND_ASSIGN(SpellingRequest);\n  }",
      "range": {
        "startLine": 56,
        "startChar": 4,
        "endLine": 56,
        "endChar": 46
      },
      "revId": "917ace08ecd23189e85b64a82c1847accb56412e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1e6fbb66_1de235e9",
        "filename": "components/spellcheck/common/spellcheck.mojom",
        "patchSetId": 47
      },
      "lineNbr": 64,
      "author": {
        "id": 1002114
      },
      "writtenOn": "2018-01-30T17:23:18Z",
      "side": 1,
      "message": "Did you mean to put your username here, or is this a TODO that\u0027s moved from somewhere else?",
      "range": {
        "startLine": 64,
        "startChar": 10,
        "endLine": 64,
        "endChar": 15
      },
      "revId": "917ace08ecd23189e85b64a82c1847accb56412e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a434b677_cd347092",
        "filename": "components/spellcheck/common/spellcheck.mojom",
        "patchSetId": 47
      },
      "lineNbr": 65,
      "author": {
        "id": 1002114
      },
      "writtenOn": "2018-01-30T17:23:18Z",
      "side": 1,
      "message": "Please explain why we\u0027re using synchronous IPC here.",
      "range": {
        "startLine": 65,
        "startChar": 2,
        "endLine": 65,
        "endChar": 9
      },
      "revId": "917ace08ecd23189e85b64a82c1847accb56412e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1f673540_6aa198f4",
        "filename": "components/spellcheck/renderer/platform_spelling_engine.cc",
        "patchSetId": 47
      },
      "lineNbr": 28,
      "author": {
        "id": 1002114
      },
      "writtenOn": "2018-01-30T17:23:18Z",
      "side": 1,
      "message": "DCHECK should be used for conditions that are never true, not even in unit tests.",
      "range": {
        "startLine": 27,
        "startChar": 0,
        "endLine": 28,
        "endChar": 29
      },
      "revId": "917ace08ecd23189e85b64a82c1847accb56412e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "65a977ea_74c5ec93",
        "filename": "components/spellcheck/renderer/platform_spelling_engine.h",
        "patchSetId": 47
      },
      "lineNbr": 15,
      "author": {
        "id": 1002114
      },
      "writtenOn": "2018-01-30T17:23:18Z",
      "side": 1,
      "message": "Please add a comment about ownership of |embedder_provider| and its expected lifetime. From what I can deduce, |embedder_provider| not owned by PlatformSpellingEngine and is expected to outlive PlatformSpellingEngine. Such comments are usually necessary when references to pointers are being saved beyond the scope of the function/method/constructor.",
      "range": {
        "startLine": 15,
        "startChar": 6,
        "endLine": 15,
        "endChar": 64
      },
      "revId": "917ace08ecd23189e85b64a82c1847accb56412e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "192bae55_7e95c75d",
        "filename": "components/spellcheck/renderer/platform_spelling_engine.h",
        "patchSetId": 47
      },
      "lineNbr": 27,
      "author": {
        "id": 1002114
      },
      "writtenOn": "2018-01-30T17:23:18Z",
      "side": 1,
      "message": "Returning non-constant references is fairly uncommon. I would prefer to see a raw pointer returned here. However, this is mojo, which uses many tricks to accomplish some complicated logic. So I would understand if this pattern is used in Mojo and you need to use it here as well.",
      "range": {
        "startLine": 27,
        "startChar": 35,
        "endLine": 27,
        "endChar": 36
      },
      "revId": "917ace08ecd23189e85b64a82c1847accb56412e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "740c591d_f11f4ed7",
        "filename": "components/spellcheck/renderer/platform_spelling_engine.h",
        "patchSetId": 47
      },
      "lineNbr": 27,
      "author": {
        "id": 1002114
      },
      "writtenOn": "2018-01-30T17:23:18Z",
      "side": 1,
      "message": "Returning non-constant references is fairly uncommon. I would prefer to see a raw pointer returned here. However, this is mojo, which uses many tricks to accomplish some complicated logic. So I would understand if this pattern is used in Mojo and you need to use it here as well.",
      "range": {
        "startLine": 27,
        "startChar": 35,
        "endLine": 27,
        "endChar": 36
      },
      "revId": "917ace08ecd23189e85b64a82c1847accb56412e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3395cf35_32f44e70",
        "filename": "components/spellcheck/renderer/platform_spelling_engine.h",
        "patchSetId": 47
      },
      "lineNbr": 27,
      "author": {
        "id": 1002114
      },
      "writtenOn": "2018-01-30T17:23:18Z",
      "side": 1,
      "message": "GetOrCreateSpellCheckHost()",
      "range": {
        "startLine": 27,
        "startChar": 37,
        "endLine": 27,
        "endChar": 54
      },
      "revId": "917ace08ecd23189e85b64a82c1847accb56412e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7c33732b_3a686b82",
        "filename": "components/spellcheck/renderer/spellcheck_provider.cc",
        "patchSetId": 47
      },
      "lineNbr": 99,
      "author": {
        "id": 1002114
      },
      "writtenOn": "2018-01-30T17:23:18Z",
      "side": 1,
      "message": "It would be preferable to use base::WeakPtr here, unless you know for sure that a SpellCheckProvider object always outlives all Mojo responses from SpellCheckHost.",
      "range": {
        "startLine": 99,
        "startChar": 27,
        "endLine": 99,
        "endChar": 49
      },
      "revId": "917ace08ecd23189e85b64a82c1847accb56412e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}