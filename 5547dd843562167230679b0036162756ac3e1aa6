{
  "comments": [
    {
      "key": {
        "uuid": "f756f75b_8c4e91a5",
        "filename": "components/omnibox/browser/base_search_provider_unittest.cc",
        "patchSetId": 12
      },
      "lineNbr": 86,
      "author": {
        "id": 1001310
      },
      "writtenOn": "2017-07-20T20:12:33Z",
      "side": 1,
      "message": "I\u0027m confused why this is necessary if we\u0027re using the default value (\"The main thread doesn\u0027t pump system messages.\").\n\nditto other five unittest files",
      "range": {
        "startLine": 86,
        "startChar": 61,
        "endLine": 86,
        "endChar": 0
      },
      "revId": "5547dd843562167230679b0036162756ac3e1aa6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6c7e77dc_57509e70",
        "filename": "components/omnibox/browser/base_search_provider_unittest.cc",
        "patchSetId": 12
      },
      "lineNbr": 86,
      "author": {
        "id": 1145964
      },
      "writtenOn": "2017-07-21T19:07:08Z",
      "side": 1,
      "message": "I am a Chrome newbie, but from what rogerta@ and mad@ told me, the call to base::ThreadTaskRunnerHandle::Get() needed for request_context_getter_ needs a message pool for posting and retrieving tasks. If I don\u0027t have one, the unit test dies at thread_task_runner_handle.cc:28 (DCHECK(current);).\n\nIs there a cleaner solution?",
      "parentUuid": "f756f75b_8c4e91a5",
      "range": {
        "startLine": 86,
        "startChar": 61,
        "endLine": 86,
        "endChar": 0
      },
      "revId": "5547dd843562167230679b0036162756ac3e1aa6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9873a630_2e6d1198",
        "filename": "components/omnibox/browser/contextual_suggestions_service.cc",
        "patchSetId": 12
      },
      "lineNbr": 47,
      "author": {
        "id": 1001310
      },
      "writtenOn": "2017-07-20T20:12:33Z",
      "side": 1,
      "message": "nit: order in .cc should match order in .h",
      "range": {
        "startLine": 47,
        "startChar": 35,
        "endLine": 47,
        "endChar": 72
      },
      "revId": "5547dd843562167230679b0036162756ac3e1aa6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "25188dd0_4610499c",
        "filename": "components/omnibox/browser/contextual_suggestions_service.cc",
        "patchSetId": 12
      },
      "lineNbr": 47,
      "author": {
        "id": 1145964
      },
      "writtenOn": "2017-07-21T19:07:08Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9873a630_2e6d1198",
      "range": {
        "startLine": 47,
        "startChar": 35,
        "endLine": 47,
        "endChar": 72
      },
      "revId": "5547dd843562167230679b0036162756ac3e1aa6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dbc54fe2_e5f05271",
        "filename": "components/omnibox/browser/contextual_suggestions_service.cc",
        "patchSetId": 12
      },
      "lineNbr": 120,
      "author": {
        "id": 1001310
      },
      "writtenOn": "2017-07-20T20:12:33Z",
      "side": 1,
      "message": "nit: before \"it\", add \"as in the else case here, \"\n\n(Otherwise the comment looks good.)",
      "range": {
        "startLine": 120,
        "startChar": 5,
        "endLine": 120,
        "endChar": 7
      },
      "revId": "5547dd843562167230679b0036162756ac3e1aa6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b7053d6a_4ea2e576",
        "filename": "components/omnibox/browser/contextual_suggestions_service.cc",
        "patchSetId": 12
      },
      "lineNbr": 120,
      "author": {
        "id": 1145964
      },
      "writtenOn": "2017-07-21T19:07:08Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "dbc54fe2_e5f05271",
      "range": {
        "startLine": 120,
        "startChar": 5,
        "endLine": 120,
        "endChar": 7
      },
      "revId": "5547dd843562167230679b0036162756ac3e1aa6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0e7bd305_dcb6ef49",
        "filename": "components/omnibox/browser/contextual_suggestions_service.cc",
        "patchSetId": 12
      },
      "lineNbr": 137,
      "author": {
        "id": 1001310
      },
      "writtenOn": "2017-07-20T20:12:33Z",
      "side": 1,
      "message": "This seems odd, as the base_suggest_url you\u0027re handed already comes from a template_url_service.  Why does the template URL service in zero suggest provider exist and the one here does not?\n\nAlso, lines 140-149 here duplicate the code in ZeroSuggestProvider::GetContextualSuggestionsUrl().  This seems like not the best approach.  This code should only live in one place.",
      "range": {
        "startLine": 137,
        "startChar": 2,
        "endLine": 137,
        "endChar": 39
      },
      "revId": "5547dd843562167230679b0036162756ac3e1aa6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b3d5b152_8bf9c0a0",
        "filename": "components/omnibox/browser/contextual_suggestions_service.cc",
        "patchSetId": 12
      },
      "lineNbr": 137,
      "author": {
        "id": 1145964
      },
      "writtenOn": "2017-07-21T19:07:08Z",
      "side": 1,
      "message": "It is odd, but it\u0027s because of the coupling we discussed yesterday. Basically ZeroSuggest::Run() doesn\u0027t exist anymore so other flows like Psuggest outlined in TestPsuggestZeroSuggestCachingFirstRun must now go through ContextualSuggestionsService::CreateContextualSuggestionsRequest(), and because they don\u0027t set the template URL service we get a crash in the unit test.\n\nFor the duplicate lines, please see my comment below just to keep it separate from this thing.",
      "parentUuid": "0e7bd305_dcb6ef49",
      "range": {
        "startLine": 137,
        "startChar": 2,
        "endLine": 137,
        "endChar": 39
      },
      "revId": "5547dd843562167230679b0036162756ac3e1aa6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f3ab1fe7_33ef81e2",
        "filename": "components/omnibox/browser/contextual_suggestions_service.cc",
        "patchSetId": 12
      },
      "lineNbr": 150,
      "author": {
        "id": 1145964
      },
      "writtenOn": "2017-07-21T19:07:08Z",
      "side": 1,
      "message": "I agree 100% with you that this should only live in one place. Before I change here, I\u0027d like to clarify a few things.\n\n1) Purity: In this particular case I personally would strongly prefer a pure function like:\n\n// Returns a URL to fetch contextual suggestions from.\n// Returns an invalid GURL if there are errors such as\n// - blah\n// - bleh\n// - ...\nGURL ContextualSuggestionsServiceUrl(\n    const TemplateURLService* template_url_service,\n    const std::string\u0026 current_url);\n\n(alternatively with \"const TemplateURLService\u0026\" or with string_view/StringPiece)\n\nThe current URL must be passed to accommodate the overriding of current_page_url. Maybe you could also stick a \"Get\" in front of the function name although I personally prefer without it.\n\nThis obviously prevents us from using member variables from the enclosing class (which I claim makes reading easier).\n\n1) Location: Where should this live?\n\na) Separate free function: From the little I browsed the Chromium code base, it doesn\u0027t seem like it\u0027s common to have free functions, it seems vastly more common to stick them as static methods of classes. Maybe due to the reduced usage of namespaces? This makes ZeroSuggestProvider and ContextualSuggestionsService a bit more independent of each other. One (small) problem is that functions like this often end up in some sort of *_utils.h library, which is non-optimal.\n\nb) \"(public:) static GURL ContextualSuggestionsService::ServiceUrl(...);\". It doesn\u0027t seem super bad in my opinion, but then the dependency between ZeroSuggestProvider and ContextualSuggestionsService becomes inseparable.\n\nc) \"(public:) static GURL ZeroSuggestProvider::ContextSuggestionsServiceUrl();\". This I think it\u0027s really strange because the ContextualSuggestionsService class would be calling ZeroSuggestProvider to know where to fetch suggestions from.\n\nd) Separate free function inside contextual_suggestions_service.{h, cc}: Similar to a) and b) but on its own. I don\u0027t see many benefits to this actually because ZeroSuggestProvider would still be importing ContextualSuggestionsService anyway and would still be depending on it.\n\nWhat do you prefer for 1) and 2)?",
      "range": {
        "startLine": 140,
        "startChar": 2,
        "endLine": 150,
        "endChar": 72
      },
      "revId": "5547dd843562167230679b0036162756ac3e1aa6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "433892a8_ddaf08d6",
        "filename": "components/omnibox/browser/contextual_suggestions_service.cc",
        "patchSetId": 12
      },
      "lineNbr": 163,
      "author": {
        "id": 1001310
      },
      "writtenOn": "2017-07-20T20:12:33Z",
      "side": 1,
      "message": "Please  refactor this to remove this weirdness.\n\nGheorghe took this function from zero_suggest_provider.cc (look at the base of that) and then added this current_url test to the top of it.  I don\u0027t think it conceptually fits within it.  Please do the test outside of UseExperimentalZeroSuggestSuggestions.  Or leave it there.  Regardless, where-ever it remains, it should be justified.\n\nRight now it\u0027s clearly weird because in some part of the code path, current_url empty causes use to override is_experimental but in other parts we blindly continue on thinking is_experimental is true.\n\nAlso, where-ever this test goes, you can justify it with a comment like this (feel free to rewrite):\n// Query the standard service if |current_url| is empty.  The experimental service will not provide contextual suggestions in this case.  The standard service will not either, but queries it causes the standard servers to load per-user models into the server\u0027s memory.  Having a per-user model in memory allows the standard server to respond more quickly with personalized suggestions as the user types.\n// TODO(mpearson): remove when warm-up psuggest launches fully.",
      "range": {
        "startLine": 162,
        "startChar": 2,
        "endLine": 163,
        "endChar": 28
      },
      "revId": "5547dd843562167230679b0036162756ac3e1aa6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "11b8e030_104f0706",
        "filename": "components/omnibox/browser/contextual_suggestions_service.cc",
        "patchSetId": 12
      },
      "lineNbr": 163,
      "author": {
        "id": 1145964
      },
      "writtenOn": "2017-07-21T19:07:08Z",
      "side": 1,
      "message": "I may be misunderstanding, but I think this override is useless. is_experimental is evaluated once by UseExperimentalZeroSuggestSuggestions() and the first condition is that the |current_url| is not empty. I believe overwriting it with false was not the intended behavior and is confusing. I tested my local build without this statement and it works fine for both cases (base vs exp). The unit tests also pass.\n\nAs for documenting it, I changed the comment of UseExperimentalZeroSuggestSuggestions() a little bit, can you take a look at that? I think it\u0027s reasonably clear now that if current_url is empty, that function will always return false. I don\u0027t know if putting all the info you suggested there makes sense because it has nothing to do with Psuggest. I can put it somewhere else if you want.",
      "parentUuid": "433892a8_ddaf08d6",
      "range": {
        "startLine": 162,
        "startChar": 2,
        "endLine": 163,
        "endChar": 28
      },
      "revId": "5547dd843562167230679b0036162756ac3e1aa6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1dd59b4c_4867b1b8",
        "filename": "components/omnibox/browser/contextual_suggestions_service.cc",
        "patchSetId": 12
      },
      "lineNbr": 260,
      "author": {
        "id": 1001310
      },
      "writtenOn": "2017-07-20T21:19:01Z",
      "side": 1,
      "message": "If we failed to get a token, we should still return a proper fetcher, just one without any oauth token (no personalization, but still fetch results).",
      "range": {
        "startLine": 260,
        "startChar": 4,
        "endLine": 260,
        "endChar": 37
      },
      "revId": "5547dd843562167230679b0036162756ac3e1aa6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e0c5dd70_f807b951",
        "filename": "components/omnibox/browser/contextual_suggestions_service.cc",
        "patchSetId": 12
      },
      "lineNbr": 260,
      "author": {
        "id": 1145964
      },
      "writtenOn": "2017-07-21T19:07:08Z",
      "side": 1,
      "message": "I agree. I inverted the logic of the comparison and added a small comment. I think it\u0027s more readable, but please take a look.",
      "parentUuid": "1dd59b4c_4867b1b8",
      "range": {
        "startLine": 260,
        "startChar": 4,
        "endLine": 260,
        "endChar": 37
      },
      "revId": "5547dd843562167230679b0036162756ac3e1aa6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "313291bf_a386ebee",
        "filename": "components/omnibox/browser/mock_autocomplete_provider_client.h",
        "patchSetId": 12
      },
      "lineNbr": 17,
      "author": {
        "id": 1001310
      },
      "writtenOn": "2017-07-20T20:12:33Z",
      "side": 1,
      "message": "What the presubmit DEPS complaint from this big chunk of includes?\n\nI would guess that to eliminate these includes, we\u0027d just need to make the Mock client go down the regular (non-experimental) flow whenever the signin-manager, oauth token service, etc. are unavailable.  That means removing the DCHECK(signin_manager_) on line 83 of contextual_suggestions_service.cc and make UseExperimentalZeroSuggestSuggestions() return false if those things are null.  That might be it.",
      "range": {
        "startLine": 17,
        "startChar": 67,
        "endLine": 17,
        "endChar": 0
      },
      "revId": "5547dd843562167230679b0036162756ac3e1aa6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "50981295_78d0a046",
        "filename": "components/omnibox/browser/mock_autocomplete_provider_client.h",
        "patchSetId": 12
      },
      "lineNbr": 17,
      "author": {
        "id": 1001310
      },
      "writtenOn": "2017-07-20T21:19:01Z",
      "side": 1,
      "message": "Actually, that\u0027s not quite right.  If the various services are unavailable, we should still use the experimental service if told to do so.  We should simply skip trying to fetch an oauth token.",
      "parentUuid": "313291bf_a386ebee",
      "range": {
        "startLine": 17,
        "startChar": 67,
        "endLine": 17,
        "endChar": 0
      },
      "revId": "5547dd843562167230679b0036162756ac3e1aa6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "50de9389_1f386158",
        "filename": "components/omnibox/browser/mock_autocomplete_provider_client.h",
        "patchSetId": 12
      },
      "lineNbr": 17,
      "author": {
        "id": 1145964
      },
      "writtenOn": "2017-07-21T19:07:08Z",
      "side": 1,
      "message": "I unfortunately didn\u0027t keep the output of git cl upload that triggered this warning.\n\nHowever, your suggestion was exactly what we needed. Thanks! I refactored ContextualSuggestionsService::CreateContextualSuggestionsRequest() to run request without an access token, and I can then pass nullptr to all these ctor arguments. I actually think that function is a lot more readable now, and this breaks the dependency on other components. PTAL.",
      "parentUuid": "50981295_78d0a046",
      "range": {
        "startLine": 17,
        "startChar": 67,
        "endLine": 17,
        "endChar": 0
      },
      "revId": "5547dd843562167230679b0036162756ac3e1aa6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}