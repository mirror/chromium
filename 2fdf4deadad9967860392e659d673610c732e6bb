{
  "comments": [
    {
      "key": {
        "uuid": "d56a65f4_8c73b576",
        "filename": "third_party/WebKit/LayoutTests/fast/peerconnection/RTCPeerConnection-ontrack.html",
        "patchSetId": 4
      },
      "lineNbr": 10,
      "author": {
        "id": 1136110
      },
      "writtenOn": "2017-07-19T22:37:47Z",
      "side": 1,
      "message": "Is it normal to have comments summarizing the main thing the test is trying to test? For example, in this case it\u0027s that the \"track\" event has the expected \"receiver\", \"track\" and \"streams\" members; things like \"assert_equals(pc.getRemoteStreams().length, 1);\" are secondary.\n\nIn our C++ tests, it\u0027s customary to use \"ASSERT\" macros for these secondary assertions, and \"EXPECT\" macros for the primary assertions. I don\u0027t know what the equivalent pattern is for layout tests.",
      "revId": "2fdf4deadad9967860392e659d673610c732e6bb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "09af512d_26612c51",
        "filename": "third_party/WebKit/LayoutTests/fast/peerconnection/RTCPeerConnection-ontrack.html",
        "patchSetId": 4
      },
      "lineNbr": 10,
      "author": {
        "id": 1126249
      },
      "writtenOn": "2017-07-27T16:40:59Z",
      "side": 1,
      "message": "Oh I see. In C++, I thought that ASSERT was essentially a CHECK in a testing context, to be used whenever the test can\u0027t continue (such as null deref) and that EXPECT was used whenever continuing wouldn\u0027t crash. But with secondary/primary point of view, you would also prefer to ASSERT anything that is a prerequisite for what the test wants to EXPECT, even if it could continue without that crashing.\n\nAnyway, as far as I can tell we only have \"assert\" in testharness.js tests.\n\nI\u0027ve changed the tests to be more behavioral driven based on your offline suggestion, only \"asserting\" what the test is about. With this change, the name/description of the test is enough to describe what it means to test without an additional comment.",
      "parentUuid": "d56a65f4_8c73b576",
      "revId": "2fdf4deadad9967860392e659d673610c732e6bb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "977ea2ab_bbfb8540",
        "filename": "third_party/WebKit/LayoutTests/fast/peerconnection/RTCPeerConnection-ontrack.html",
        "patchSetId": 4
      },
      "lineNbr": 10,
      "author": {
        "id": 1136110
      },
      "writtenOn": "2017-07-27T18:22:00Z",
      "side": 1,
      "message": "\u003e ASSERT was essentially a CHECK in a testing context\n\nIt is. But it\u0027s not exclusively for \"test can\u0027t continue\", it may also be \"shouldn\u0027t continue, because the test\u0027s assumptions are not met\". For example, suppose I\u0027m testing that if a remote description contains a bitrate limit, video frames are still capable of being encoded/decoded end-to-end. I may have an \"EXPECT\" for \"video frames received\", but an ASSERT that ensures that the bitrate limit is actually taking effect. Because if it isn\u0027t, then the test isn\u0027t testing what it was intended to be testing.\n\nOf course, there should be still be some other test that verifies that a bitrate limit in SDP is respected. But that should be an independent test, and it probably would have more granular \"EXPECT\"s than the \"ASSERT\"s in the other test.\n\nAt least, that\u0027s been my interpretation of the gtest guidelines, and what I\u0027ve noticed existing tests doing.",
      "parentUuid": "09af512d_26612c51",
      "revId": "2fdf4deadad9967860392e659d673610c732e6bb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9d0efe3f_29d1b714",
        "filename": "third_party/WebKit/LayoutTests/fast/peerconnection/RTCPeerConnection-ontrack.html",
        "patchSetId": 4
      },
      "lineNbr": 17,
      "author": {
        "id": 1136110
      },
      "writtenOn": "2017-07-19T22:37:47Z",
      "side": 1,
      "message": "Using \"Promise.all\" and then getting the tracks out of \"values[0]\" seems a little overcomplex. If the \"setRemoteDescription\" promise is guaranteed to be resolved after all \"track\" events have fired (there should be something testing this if there isn\u0027t), then you can just hook up \"ontrack\" in the test itself, and be assured that you\u0027ll have collected all the events by the time you enter the \"then\" block.",
      "range": {
        "startLine": 17,
        "startChar": 26,
        "endLine": 17,
        "endChar": 27
      },
      "revId": "2fdf4deadad9967860392e659d673610c732e6bb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5f1916bd_23566fb3",
        "filename": "third_party/WebKit/LayoutTests/fast/peerconnection/RTCPeerConnection-ontrack.html",
        "patchSetId": 4
      },
      "lineNbr": 17,
      "author": {
        "id": 1126249
      },
      "writtenOn": "2017-07-27T16:40:59Z",
      "side": 1,
      "message": "Done, I changed up the tests a lot based on your suggestion about behavioral testing and made use of wiring ontrack directly.",
      "parentUuid": "9d0efe3f_29d1b714",
      "range": {
        "startLine": 17,
        "startChar": 26,
        "endLine": 17,
        "endChar": 27
      },
      "revId": "2fdf4deadad9967860392e659d673610c732e6bb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "86e45a04_852d6ed7",
        "filename": "third_party/WebKit/LayoutTests/fast/peerconnection/RTCPeerConnection-ontrack.html",
        "patchSetId": 4
      },
      "lineNbr": 128,
      "author": {
        "id": 1136110
      },
      "writtenOn": "2017-07-19T22:37:47Z",
      "side": 1,
      "message": "It doesn\u0027t seem like these assertions should be necessary here; they\u0027re verifying the behavior of MockWebRTCPeerConnectionHandler, which ideally would be tested by something else independently. Doing that would allow this test to be simpler, and eliminate some duplication between it and RTCPeerConnection-getReceivers.html.",
      "revId": "2fdf4deadad9967860392e659d673610c732e6bb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b7a24724_ea801c62",
        "filename": "third_party/WebKit/LayoutTests/fast/peerconnection/RTCPeerConnection-ontrack.html",
        "patchSetId": 4
      },
      "lineNbr": 128,
      "author": {
        "id": 1126249
      },
      "writtenOn": "2017-07-27T16:40:59Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "86e45a04_852d6ed7",
      "revId": "2fdf4deadad9967860392e659d673610c732e6bb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3e63ab6e_6781e3fd",
        "filename": "third_party/WebKit/LayoutTests/fast/peerconnection/RTCPeerConnection-ontrack.html",
        "patchSetId": 4
      },
      "lineNbr": 133,
      "author": {
        "id": 1136110
      },
      "writtenOn": "2017-07-19T22:37:47Z",
      "side": 1,
      "message": "nit: Maybe call this \"receiveTrackEvents\", \"waitForTrackEvents\", or something like that, to make it clear that this returns a promise that resolves when N \"track\" events have fired.",
      "revId": "2fdf4deadad9967860392e659d673610c732e6bb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f5be4242_bd777ca0",
        "filename": "third_party/WebKit/LayoutTests/fast/peerconnection/RTCPeerConnection-ontrack.html",
        "patchSetId": 4
      },
      "lineNbr": 133,
      "author": {
        "id": 1126249
      },
      "writtenOn": "2017-07-27T16:40:59Z",
      "side": 1,
      "message": "This helper is no longer needed, removed.",
      "parentUuid": "3e63ab6e_6781e3fd",
      "revId": "2fdf4deadad9967860392e659d673610c732e6bb",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}