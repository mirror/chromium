{
  "comments": [
    {
      "key": {
        "uuid": "31627b64_31c02f00",
        "filename": "third_party/WebKit/Source/platform/fonts/FontGlobalContext.cpp",
        "patchSetId": 2
      },
      "lineNbr": 18,
      "author": {
        "id": 1128431
      },
      "writtenOn": "2017-06-28T11:38:35Z",
      "side": 1,
      "message": "Could you mind to point me a doc about this, or explain how Blink thread-static is allocated/deleted?\n\nI\u0027m asking because one of the API, hyphenation dictionary, is rather heavy, could be ~300kb/lang and involves one sync IPC to get it. I\u0027d like to understand how it is created for each thread and when they are deleted.\n\nSince it involves sync IPC, maybe we need to consider sharing across threads. I\u0027d like to understand how thread-static works in Blink to consider this.",
      "revId": "eba4fc2b74253eddce52d7574b8568503d618d2d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3495494f_97c34a24",
        "filename": "third_party/WebKit/Source/platform/fonts/FontGlobalContext.cpp",
        "patchSetId": 2
      },
      "lineNbr": 18,
      "author": {
        "id": 1134723
      },
      "writtenOn": "2017-06-28T14:16:53Z",
      "side": 1,
      "message": "oh. I don\u0027t know of any docs. There\u0027s nothing super special about DEFINE_THREAD_SAFE_STATIC_LOCAL. It\u0027s a regular static variable (similar to \"static MyType type\" except it\u0027s wrapped on a StaticSingleton. The \"THREAD_SAFE\" just skips the thread checks.\n\nThe ThreadSpecific part is a bit more complicated, because it does store values on TLS. That\u0027s one of the main needs for FontGlobalContext, so we only store one pointer on TLS and everything else is inside.\n\nIf you want, feel free to write a doc/email on your plans to me an jbroman@ and we can review it. Ideally, we try to avoid locks, but if we have a big data set, maybe it\u0027s worth sharing. And maybe we can come up with some smart way of not having to lock (if it\u0027s read-only).",
      "parentUuid": "31627b64_31c02f00",
      "revId": "eba4fc2b74253eddce52d7574b8568503d618d2d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "224930b2_c4a5ca11",
        "filename": "third_party/WebKit/Source/platform/fonts/FontGlobalContext.cpp",
        "patchSetId": 2
      },
      "lineNbr": 18,
      "author": {
        "id": 1128431
      },
      "writtenOn": "2017-06-28T17:45:02Z",
      "side": 1,
      "message": "Thanks for the info, I\u0027m actually not very familiar with TLS lifecycles. I\u0027ll learn a bit more.\n\nFor the moment, you don\u0027t plan to use hyphenation in threads, correct?",
      "parentUuid": "3495494f_97c34a24",
      "revId": "eba4fc2b74253eddce52d7574b8568503d618d2d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ca8cb419_c598b1ce",
        "filename": "third_party/WebKit/Source/platform/fonts/FontGlobalContext.cpp",
        "patchSetId": 2
      },
      "lineNbr": 31,
      "author": {
        "id": 1128431
      },
      "writtenOn": "2017-06-28T11:38:35Z",
      "side": 1,
      "message": "I wish FontGlobalContext to provide just a context or storage, and logic belongs to each class. This structure makes me harder to maintain LayoutLocale because logic are now separate in two files/classes.\n\nCould we move these impls to LayoutLocale, or create a small struct that FontGlobalContext owns, and keep the logic in LayoutLocale.cpp?",
      "revId": "eba4fc2b74253eddce52d7574b8568503d618d2d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d950c206_f7a40ff4",
        "filename": "third_party/WebKit/Source/platform/fonts/FontGlobalContext.cpp",
        "patchSetId": 2
      },
      "lineNbr": 31,
      "author": {
        "id": 1134723
      },
      "writtenOn": "2017-06-28T14:16:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ca8cb419_c598b1ce",
      "revId": "eba4fc2b74253eddce52d7574b8568503d618d2d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "972e8bd1_fe6cfb09",
        "filename": "third_party/WebKit/Source/platform/fonts/FontGlobalContext.cpp",
        "patchSetId": 2
      },
      "lineNbr": 55,
      "author": {
        "id": 1128431
      },
      "writtenOn": "2017-06-28T11:38:35Z",
      "side": 1,
      "message": "Why did you remove |default_for_han_computed_|? Is that risky for threads?\n\nThis function is rather hot, called on every character when font fallback occurs, and |AcceptLanguagesResolver::LocaleForHan()| isn\u0027t really cheap. Can we keep it?",
      "revId": "eba4fc2b74253eddce52d7574b8568503d618d2d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f5ef9d9b_1bf81f3e",
        "filename": "third_party/WebKit/Source/platform/fonts/FontGlobalContext.cpp",
        "patchSetId": 2
      },
      "lineNbr": 55,
      "author": {
        "id": 1134723
      },
      "writtenOn": "2017-06-28T14:16:53Z",
      "side": 1,
      "message": "is this good enough? Or is there a case where there\u0027s no default but you are still calling this every time?",
      "parentUuid": "972e8bd1_fe6cfb09",
      "revId": "eba4fc2b74253eddce52d7574b8568503d618d2d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dfcb76ed_fcdf9898",
        "filename": "third_party/WebKit/Source/platform/fonts/FontGlobalContext.cpp",
        "patchSetId": 2
      },
      "lineNbr": 55,
      "author": {
        "id": 1128431
      },
      "writtenOn": "2017-06-28T17:45:02Z",
      "side": 1,
      "message": "Yes, |default_locale_for_han_| is nullptr for non ideographic-script OS (see the last \"else\" below), but font fallback code calls this function to check that on every character.",
      "parentUuid": "f5ef9d9b_1bf81f3e",
      "revId": "eba4fc2b74253eddce52d7574b8568503d618d2d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a5d85ad_2cbec2fb",
        "filename": "third_party/WebKit/Source/platform/fonts/FontGlobalContext.cpp",
        "patchSetId": 2
      },
      "lineNbr": 66,
      "author": {
        "id": 1128431
      },
      "writtenOn": "2017-06-28T11:38:35Z",
      "side": 1,
      "message": "As the line above indicates, |default_locale_for_han_| can be nullptr. Can we avoid de-referrincing nullptr?",
      "revId": "eba4fc2b74253eddce52d7574b8568503d618d2d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9a3e75e6_068ec814",
        "filename": "third_party/WebKit/Source/platform/fonts/FontGlobalContext.cpp",
        "patchSetId": 2
      },
      "lineNbr": 66,
      "author": {
        "id": 1134723
      },
      "writtenOn": "2017-06-28T14:16:53Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7a5d85ad_2cbec2fb",
      "revId": "eba4fc2b74253eddce52d7574b8568503d618d2d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}