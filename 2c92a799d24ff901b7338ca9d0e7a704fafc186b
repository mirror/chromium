{
  "comments": [
    {
      "key": {
        "uuid": "2ef0b278_18b4d648",
        "filename": "third_party/WebKit/Source/platform/wtf/TerminatedArray.h",
        "patchSetId": 4
      },
      "lineNbr": 29,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2018-01-05T15:04:10Z",
      "side": 0,
      "message": "We can keep this assert, right? (unless I\u0027m missing the point of this CL.)",
      "revId": "2c92a799d24ff901b7338ca9d0e7a704fafc186b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1aadd028_e326af97",
        "filename": "third_party/WebKit/Source/platform/wtf/TerminatedArray.h",
        "patchSetId": 4
      },
      "lineNbr": 29,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2018-01-05T15:19:38Z",
      "side": 0,
      "message": "I\u0027d like to keep it but unfortunately we cannot.\n\nVectorTraits\u003cblink::RuleData\u003e::kCanCopyWithMemcpy \u003d\u003e std::is_trivially_copy_assignable\u003cblink::RuleData\u003e \u003d\u003e false\n\nis_trivially_copy_assignable doesn\u0027t know about our special handling.\n\nNeed to think about how we could preserve that ability to nicely assert it.",
      "parentUuid": "2ef0b278_18b4d648",
      "revId": "2c92a799d24ff901b7338ca9d0e7a704fafc186b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b0523f34_937ce646",
        "filename": "third_party/WebKit/Source/platform/wtf/TerminatedArray.h",
        "patchSetId": 4
      },
      "lineNbr": 29,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2018-01-05T15:21:45Z",
      "side": 0,
      "message": "Makes sense. I\u0027m okay with removing the assert.",
      "parentUuid": "1aadd028_e326af97",
      "revId": "2c92a799d24ff901b7338ca9d0e7a704fafc186b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1bcd517d_1ed1e2e1",
        "filename": "third_party/WebKit/Source/platform/wtf/TerminatedArray.h",
        "patchSetId": 4
      },
      "lineNbr": 29,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2018-01-05T15:37:59Z",
      "side": 0,
      "message": "The more I think about I see a broader problem.\n\nAnything that contains a Member will now answer this with false. I will think through whether this is a problem before landing the CL.",
      "parentUuid": "b0523f34_937ce646",
      "revId": "2c92a799d24ff901b7338ca9d0e7a704fafc186b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4ce3321d_15a0517c",
        "filename": "third_party/WebKit/Source/platform/wtf/TerminatedArray.h",
        "patchSetId": 4
      },
      "lineNbr": 29,
      "author": {
        "id": 1131764
      },
      "writtenOn": "2018-01-05T20:33:15Z",
      "side": 0,
      "message": "Didn\u0027t know about WTF_ALLOW_MOVE_AND_INIT_WITH_MEM_FUNCTIONS.\n\nI adjusted this one properly so we can leave the static_assert in place. I think this is currently the best compromise. Ideally, we would piggy-back on std::is_trivially_copy_assignable but that is not possible everywhere so we use that macro.",
      "parentUuid": "1bcd517d_1ed1e2e1",
      "revId": "2c92a799d24ff901b7338ca9d0e7a704fafc186b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}