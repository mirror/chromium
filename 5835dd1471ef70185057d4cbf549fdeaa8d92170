{
  "comments": [
    {
      "key": {
        "uuid": "81fb460f_46dde85d",
        "filename": "content/common/notifications/notification_struct_traits.cc",
        "patchSetId": 32
      },
      "lineNbr": 116,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2018-01-09T10:11:26Z",
      "side": 1,
      "message": "This can be read directly into |platform_notification_data-\u003edata|; same for vibration_pattern.",
      "range": {
        "startLine": 116,
        "startChar": 35,
        "endLine": 116,
        "endChar": 39
      },
      "revId": "5835dd1471ef70185057d4cbf549fdeaa8d92170",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f082269f_e6981bfd",
        "filename": "content/common/notifications/notification_struct_traits.cc",
        "patchSetId": 32
      },
      "lineNbr": 116,
      "author": {
        "id": 1187649
      },
      "writtenOn": "2018-01-12T18:28:41Z",
      "side": 1,
      "message": "Done for vibration_pattern, but if I do that for \u0027data\u0027 then it fails to compile because PlatformNotificationData.data is actually a vector of chars, not ints.\n\nHave added a TODO to read it directly once we\u0027ve changed PlatformNotificationData to store a vector of ints.",
      "parentUuid": "81fb460f_46dde85d",
      "range": {
        "startLine": 116,
        "startChar": 35,
        "endLine": 116,
        "endChar": 39
      },
      "revId": "5835dd1471ef70185057d4cbf549fdeaa8d92170",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "92f33a13_d609ef12",
        "filename": "content/common/notifications/notification_struct_traits.cc",
        "patchSetId": 32
      },
      "lineNbr": 121,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2018-01-09T10:11:26Z",
      "side": 1,
      "message": "Are there limits on how long each vibration in the vibration pattern can be, as well as a limit on the length of the vibration pattern? The spec seems to indicate that such a thing exists.",
      "revId": "5835dd1471ef70185057d4cbf549fdeaa8d92170",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1e6b36d1_bbb3d4e7",
        "filename": "content/common/notifications/notification_struct_traits.cc",
        "patchSetId": 32
      },
      "lineNbr": 121,
      "author": {
        "id": 1187649
      },
      "writtenOn": "2018-01-12T18:28:41Z",
      "side": 1,
      "message": "The spec says that the implementation should truncate the vibration array and clamp the max vibration duration: https://w3c.github.io/vibration/#dfn-validate-and-normalize \n\n@peter/dcheng: Should I be implementing this normalization here in the mojo code, or just verifying that it has already been done (and returning false if it hasn\u0027t) ?",
      "parentUuid": "92f33a13_d609ef12",
      "revId": "5835dd1471ef70185057d4cbf549fdeaa8d92170",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "66104378_d0c4ea1f",
        "filename": "content/common/notifications/notification_struct_traits.cc",
        "patchSetId": 32
      },
      "lineNbr": 121,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2018-01-13T08:09:02Z",
      "side": 1,
      "message": "Typically, the normalization happens in the sender side, and the receiver side code is just for validation (i.e. we just return false here). However, that does lead to duplication of logic... I\u0027m not super familiar with the notification API: would it be possible for JS to inspect these values after requesting a notification? If so, should it see the clamped values?",
      "parentUuid": "1e6b36d1_bbb3d4e7",
      "revId": "5835dd1471ef70185057d4cbf549fdeaa8d92170",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0e944b5e_9f0e78bc",
        "filename": "content/common/notifications/notification_struct_traits.cc",
        "patchSetId": 32
      },
      "lineNbr": 121,
      "author": {
        "id": 1187649
      },
      "writtenOn": "2018-01-15T18:02:34Z",
      "side": 1,
      "message": "Okay I\u0027ve added some verification in this Read function to match the guarantees the VibrationController should have already enforced in its Sanitize step here:\n\nhttps://cs.chromium.org/chromium/src/third_party/WebKit/Source/modules/vibration/VibrationController.cpp?l\u003d38\n\nHowever I notice that this means that the behaviour of my mojo service now deviates slightly from that of the corresponding legacy-ipc message filter, which would clamp the vibration durations to both a max *and a min* if they lie outside the expected values, whereas mine will now simply fail if any duration is \u003c1:\n\nhttps://cs.chromium.org/chromium/src/content/browser/notifications/notification_message_filter.cc?sq\u003dpackage:chromium\u0026l\u003d36\n\n@Peter is this okay? Or should I be clamping it before/after it gets to this point? (from Daniel\u0027s comment sounds like it would be nonstandard to normalize within the struct traits file here)\n\nI have also added a check that actions are \u003c MaxNumberOfActions, whereas the message filter would have truncated the actions to 2 and carried on merrily. So maybe I\u0027m now being too strict here? (But this gets truncated in CreateWebNotificationData(), so it should never be \u003e 2 by this point right?)",
      "parentUuid": "66104378_d0c4ea1f",
      "revId": "5835dd1471ef70185057d4cbf549fdeaa8d92170",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "28bebf69_7e466973",
        "filename": "content/common/notifications/notification_struct_traits.cc",
        "patchSetId": 32
      },
      "lineNbr": 121,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2018-01-16T09:49:45Z",
      "side": 1,
      "message": "To clarify, this is what I meant about this pattern leading to double checking: for many things, the renderer is responsible for normalizing the data before it sends it over IPC, and the receiver (usually the browser) is responsible for double-checking that the renderer sent valid data.\n\n/If/ it\u0027s not necessary to signal to JS when it violates implementation constraints, and we can silently clamp, then one alternative is to silently clamp in IPC serialization. I don\u0027t know enough about the notification interface to say what the right approach is here, so I\u0027ll leave it to you and peter@ to make that decision.",
      "parentUuid": "0e944b5e_9f0e78bc",
      "revId": "5835dd1471ef70185057d4cbf549fdeaa8d92170",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "70f031c3_7a62f14e",
        "filename": "content/common/notifications/notification_struct_traits.cc",
        "patchSetId": 32
      },
      "lineNbr": 121,
      "author": {
        "id": 1187649
      },
      "writtenOn": "2018-01-16T15:35:04Z",
      "side": 1,
      "message": "Spoke to Peter about this and agreed the following:\n\n- We should verify, but not sanitize, in these struct traits, to check that the sanitization has been correctly applied on the renderer side.\n\n- Where the legacy ipc route was applying further sanitization (eg clamping at 1 not 0), we should check why this was (eg maybe this is to meet platform constraints), and if it\u0027s required, move this sanitization step to closer where it\u0027s needed (eg in platform-specific code, if this is to meet platform-specific requirements).\n\nIn the case of vibration I\u0027ve followed the code through and I can\u0027t see any reason why we were clamping at 1 not 0. It\u0027s been like that since notification vibration was added, not added due to a bug. And while one might think \u0027allowing elements of length 0 will allow effectively continuous vibration to occur for 990s\u0027, actually, this is already effectively possible given we allow waits of 1ms, which is not perceivably different from \u0027waits\u0027 of 0ms (unless the platform treats these values wildly differently - and Android gives no indication that it does so in its documentation)",
      "parentUuid": "28bebf69_7e466973",
      "revId": "5835dd1471ef70185057d4cbf549fdeaa8d92170",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1cbff4d6_cf03cae0",
        "filename": "content/common/notifications/notification_struct_traits.cc",
        "patchSetId": 32
      },
      "lineNbr": 121,
      "author": {
        "id": 1002032
      },
      "writtenOn": "2018-01-16T18:08:13Z",
      "side": 1,
      "message": "\u003e\u003e and we can silently clamp\n\nIs that really a pattern we\u0027d want to consider, let alone encourage?\n\nConceptually I think of Mojo as an IPC system where the output should equal the input, unless it might\u0027ve been tampered with. StructTraits are part of the (de)serialize process, which I\u0027d expect to include validation, but not (implicit) sanitizationâ€”especially if we don\u0027t do it everywhere. Being explicit about sanitization before feeding data to Mojo seems much cleaner to me.",
      "parentUuid": "70f031c3_7a62f14e",
      "revId": "5835dd1471ef70185057d4cbf549fdeaa8d92170",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e337add9_e500b9b6",
        "filename": "content/common/notifications/notification_struct_traits.cc",
        "patchSetId": 32
      },
      "lineNbr": 121,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2018-01-16T23:37:58Z",
      "side": 1,
      "message": "I think there are downsides to both approaches. I think silently clamping is weird, but I think duplicating validation code is unfortunate. I personally lean towards the latter, but wanted to leave the door open for the former (since that\u0027s what the code was doing).",
      "parentUuid": "1cbff4d6_cf03cae0",
      "revId": "5835dd1471ef70185057d4cbf549fdeaa8d92170",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "47792af9_2d352c9c",
        "filename": "content/common/notifications/notification_struct_traits.cc",
        "patchSetId": 32
      },
      "lineNbr": 124,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2018-01-09T10:11:26Z",
      "side": 1,
      "message": "Similarly, I think there\u0027s a max length to how much data this can contain; can we do an explicit check for that here?",
      "revId": "5835dd1471ef70185057d4cbf549fdeaa8d92170",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a60770f5_6f74dbf4",
        "filename": "content/common/notifications/notification_struct_traits.cc",
        "patchSetId": 32
      },
      "lineNbr": 124,
      "author": {
        "id": 1187649
      },
      "writtenOn": "2018-01-15T18:02:34Z",
      "side": 1,
      "message": "Done - I\u0027m now validating the data, vibration and actions of the p_n_d at the end of the Read function. Is this fine, or should I ideally be validating each property *before* reading it into the \u0027out\u0027 parameter?",
      "parentUuid": "47792af9_2d352c9c",
      "revId": "5835dd1471ef70185057d4cbf549fdeaa8d92170",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "12e7d613_227319bd",
        "filename": "content/common/notifications/notification_struct_traits.cc",
        "patchSetId": 32
      },
      "lineNbr": 124,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2018-01-16T09:49:45Z",
      "side": 1,
      "message": "This is fine: if Read() returns false, |out| is discarded and never even used.",
      "parentUuid": "a60770f5_6f74dbf4",
      "revId": "5835dd1471ef70185057d4cbf549fdeaa8d92170",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "23889ed2_72ddd84d",
        "filename": "content/common/notifications/notification_struct_traits.cc",
        "patchSetId": 32
      },
      "lineNbr": 124,
      "author": {
        "id": 1187649
      },
      "writtenOn": "2018-01-16T15:35:04Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "12e7d613_227319bd",
      "revId": "5835dd1471ef70185057d4cbf549fdeaa8d92170",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4bb9122c_76841c48",
        "filename": "third_party/WebKit/Source/platform/mojo/NotificationStructTraits.cpp",
        "patchSetId": 32
      },
      "lineNbr": 198,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2018-01-09T10:11:26Z",
      "side": 1,
      "message": "This can return a base::span of the WebVector, I think. If it can\u0027t, let me know, and I\u0027ll fix WebVector.",
      "revId": "5835dd1471ef70185057d4cbf549fdeaa8d92170",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "180b2fe1_4b84e544",
        "filename": "third_party/WebKit/Source/platform/mojo/NotificationStructTraits.cpp",
        "patchSetId": 32
      },
      "lineNbr": 198,
      "author": {
        "id": 1187649
      },
      "writtenOn": "2018-01-12T18:28:41Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4bb9122c_76841c48",
      "revId": "5835dd1471ef70185057d4cbf549fdeaa8d92170",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "06f69f0a_5624a426",
        "filename": "third_party/WebKit/Source/platform/mojo/NotificationStructTraits.h",
        "patchSetId": 32
      },
      "lineNbr": 64,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2018-01-09T10:11:26Z",
      "side": 1,
      "message": "Nit: please return const refs for objects that aren\u0027t cheap to copy. Also, once it\u0027s returning a const ref, simple getters like this can just be inlined into the header.\n\n(https://chromium.googlesource.com/chromium/src/+/master/docs/security/mojo.md#StructTraits-getters-should-be-simple)",
      "revId": "5835dd1471ef70185057d4cbf549fdeaa8d92170",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "08247fff_8bf169de",
        "filename": "third_party/WebKit/Source/platform/mojo/NotificationStructTraits.h",
        "patchSetId": 32
      },
      "lineNbr": 64,
      "author": {
        "id": 1187649
      },
      "writtenOn": "2018-01-12T18:28:41Z",
      "side": 1,
      "message": "I have already returned const refs and inlined everything other than the WTF::Strings, the blink::KURLs, and the Vectors.\n\nFor these, I don\u0027t think I can return a const ref, because they are stored in WebNotificationData as Web* types, not WTF types. (When I try to return const refs I get errors, e.g. \n../../third_party/WebKit/Source/platform/mojo/NotificationStructTraits.cpp:92:10: error: returning reference to local temporary object [-Werror,-Wreturn-stack-address]\n..presumably because there\u0027s a local temporary object constructed under the hood for the conversion between WTF and Web types.",
      "parentUuid": "06f69f0a_5624a426",
      "revId": "5835dd1471ef70185057d4cbf549fdeaa8d92170",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0f01588a_a84a5b57",
        "filename": "third_party/WebKit/Source/platform/mojo/NotificationStructTraits.h",
        "patchSetId": 32
      },
      "lineNbr": 64,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2018-01-13T08:09:02Z",
      "side": 1,
      "message": "Ah... you\u0027re right. Sorry for missing that.",
      "parentUuid": "08247fff_8bf169de",
      "revId": "5835dd1471ef70185057d4cbf549fdeaa8d92170",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fef8cda2_6cd1efd7",
        "filename": "third_party/WebKit/Source/platform/mojo/NotificationStructTraits.h",
        "patchSetId": 32
      },
      "lineNbr": 64,
      "author": {
        "id": 1187649
      },
      "writtenOn": "2018-01-15T18:02:34Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "0f01588a_a84a5b57",
      "revId": "5835dd1471ef70185057d4cbf549fdeaa8d92170",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "eb2d11fb_477f3778",
        "filename": "third_party/WebKit/Source/platform/mojo/NotificationStructTraits.h",
        "patchSetId": 32
      },
      "lineNbr": 83,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2018-01-09T10:11:26Z",
      "side": 1,
      "message": "Returning base::span by value is fine though, since it\u0027s specifically designed to be cheap to copy like StringPiece.",
      "revId": "5835dd1471ef70185057d4cbf549fdeaa8d92170",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bf494fdb_4291840e",
        "filename": "third_party/WebKit/Source/platform/mojo/NotificationStructTraits.h",
        "patchSetId": 32
      },
      "lineNbr": 83,
      "author": {
        "id": 1187649
      },
      "writtenOn": "2018-01-12T18:28:41Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "eb2d11fb_477f3778",
      "revId": "5835dd1471ef70185057d4cbf549fdeaa8d92170",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2c087753_d669df9b",
        "filename": "third_party/WebKit/public/platform/modules/notifications/WebNotificationData.h",
        "patchSetId": 32
      },
      "lineNbr": 31,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2018-01-09T10:11:26Z",
      "side": 1,
      "message": "Nit: no need for this, as this will already be default constructed.",
      "revId": "5835dd1471ef70185057d4cbf549fdeaa8d92170",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b151f958_405fcaac",
        "filename": "third_party/WebKit/public/platform/modules/notifications/WebNotificationData.h",
        "patchSetId": 32
      },
      "lineNbr": 31,
      "author": {
        "id": 1187649
      },
      "writtenOn": "2018-01-12T18:28:41Z",
      "side": 1,
      "message": "huh, that\u0027s weird, I thought I required that to compile at one point, but it seems fine without now.\n\nFixed.",
      "parentUuid": "2c087753_d669df9b",
      "revId": "5835dd1471ef70185057d4cbf549fdeaa8d92170",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "10b71c86_2af7d49d",
        "filename": "third_party/WebKit/public/platform/modules/notifications/WebNotificationData.h",
        "patchSetId": 32
      },
      "lineNbr": 31,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2018-01-16T09:49:45Z",
      "side": 1,
      "message": "Ah, we changed WebVector to be default constructible. That\u0027s probably why.",
      "parentUuid": "b151f958_405fcaac",
      "revId": "5835dd1471ef70185057d4cbf549fdeaa8d92170",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9c2d634e_0a335f83",
        "filename": "third_party/WebKit/public/platform/modules/notifications/notification.mojom",
        "patchSetId": 32
      },
      "lineNbr": 70,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2018-01-09T10:11:26Z",
      "side": 1,
      "message": "Mention something about these being a list of milliseconds. Similar to the below request, maybe we can add a TODO to use base::TimeDelta here?\n\n(I know the spec says something different, but it\u0027s nicer to use structured types in mojoms where possible)",
      "revId": "5835dd1471ef70185057d4cbf549fdeaa8d92170",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "62712ef5_1d949b65",
        "filename": "third_party/WebKit/public/platform/modules/notifications/notification.mojom",
        "patchSetId": 32
      },
      "lineNbr": 70,
      "author": {
        "id": 1187649
      },
      "writtenOn": "2018-01-12T18:28:41Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "9c2d634e_0a335f83",
      "revId": "5835dd1471ef70185057d4cbf549fdeaa8d92170",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "eb7c10b7_9786d43e",
        "filename": "third_party/WebKit/public/platform/modules/notifications/notification.mojom",
        "patchSetId": 32
      },
      "lineNbr": 76,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2018-01-09T10:11:26Z",
      "side": 1,
      "message": "Do you mind adding a TODO to use base::TimeTicks here? I\u0027m working on some changes to remove WTF::TimeTicks and just use the base version everywhere. You can use https://crbug.com/763980 for tracking this TODO.",
      "revId": "5835dd1471ef70185057d4cbf549fdeaa8d92170",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2e4f98d2_ee0bdbe4",
        "filename": "third_party/WebKit/public/platform/modules/notifications/notification.mojom",
        "patchSetId": 32
      },
      "lineNbr": 76,
      "author": {
        "id": 1187649
      },
      "writtenOn": "2018-01-12T18:28:41Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "eb7c10b7_9786d43e",
      "revId": "5835dd1471ef70185057d4cbf549fdeaa8d92170",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}