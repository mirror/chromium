// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// Over-the-wire message definitions used for the Helium synchronization
// protocol.

syntax = "proto3";

option optimize_for = LITE_RUNTIME;

package blimp.proto;

// Vector clock that is used to get the partial order of changes.
// This class is the proto definition of
// //blimp/net/helium/version_vector.h
message VersionVectorMessage {
  uint64 local_revision = 1;
  uint64 remote_revision = 2;
}

// Sample proto for test purposes.
message TestChangesetMessage {
  int32 value1 = 1;
  int32 value2 = 2;
}

// A union of serializable Changeset types. There will be one for each Helium
// Object that requires serialization.
message ChangesetMessage {
  oneof payload {
    // Sample message for the test
    TestChangesetMessage test = 1;
  };
}

// Message that encapsulates a change for a helium object. It contains
// information required to restore the object from the time specified in |from|
// until |to|.
//
// This is the main object that will be sent in the Helium transport
message HeliumMessage {
  // Routing: Identifies the object to which this message applies.
  uint64 object_id = 1;

  // Synchronization: Specifies a |changeset|, the sender Revision upon which
  // the Changeset depends, and the sender Revision that is reached following
  // application of the Changeset. Note that |changeset| may embed further
  // Revision information, as necessary for the Syncable to resolve conflicts,
  // though future optimizations may expose Revision information from
  // HeliumMessage to the Syncable API directly, for greater efficiency, and
  // convenience.
  uint64 start_revision = 2;
  uint64 end_revision = 3;
  bytes changeset = 4;

  // Acknowledgement: Indicates the most recent recipient Revision of the object
  // that the sender is currently aware of.
  uint64 ack_revision = 5;
}
