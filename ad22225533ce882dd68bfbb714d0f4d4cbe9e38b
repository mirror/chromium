{
  "comments": [
    {
      "key": {
        "uuid": "e9af859b_0743e722",
        "filename": "content/public/browser/web_ui_data_source.h",
        "patchSetId": 11
      },
      "lineNbr": 76,
      "author": {
        "id": 1002532
      },
      "writtenOn": "2018-01-08T15:20:18Z",
      "side": 1,
      "message": "Since we pass in the resource ID above in AddResourcePath/SetDefaultResource, and grit knows which IDs are zipped, why do we need to explicitly pass this map to webui code? i.e. why can\u0027t it use the resource IDs as a key to a global map that\u0027s generated, the same way it can use the single ID to get the resource data?",
      "revId": "ad22225533ce882dd68bfbb714d0f4d4cbe9e38b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e532b86d_2fded185",
        "filename": "content/public/browser/web_ui_data_source.h",
        "patchSetId": 11
      },
      "lineNbr": 76,
      "author": {
        "id": 1002115
      },
      "writtenOn": "2018-01-08T20:51:23Z",
      "side": 1,
      "message": "if I\u0027m reading the code correctly, translating an IDR to bytes (i.e. ResourceBundle::GetRawDataResourceForScale()) works because it uses metadata about resources encoded into .pak files (i.e. ResourceBundle::data_packs_ and DataPack::resource_table_).\n\nhttps://cs.chromium.org/chromium/src/ui/base/resource/resource_bundle.cc?sq\u003dpackage:chromium\u0026dr\u003dCSs\u0026l\u003d561\nhttps://cs.chromium.org/chromium/src/ui/base/resource/data_pack.cc?sq\u003dpackage:chromium\u0026dr\u003dCSs\u0026l\u003d365\nhttps://cs.chromium.org/chromium/src/ui/base/resource/data_pack.cc?sq\u003dpackage:chromium\u0026dr\u003dCSs\u0026l\u003d282\n\nso it\u0027s likely whether a resource is gzipped would require similar info (i.e. add some bits to the .pak file format and reserve some space for this metadata).  this might be a good way to go, but it\u0027d probably result in more bits being read off disk and loaded into memory (and probably the need to skip over these bits if they\u0027re earlier in the byte order than the resource content).  is that a useful trade off?  i don\u0027t have a good understanding of whether it\u0027d affect global resource loading performance.",
      "parentUuid": "e9af859b_0743e722",
      "revId": "ad22225533ce882dd68bfbb714d0f4d4cbe9e38b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9dcf3f4e_958e6b48",
        "filename": "content/public/browser/web_ui_data_source.h",
        "patchSetId": 11
      },
      "lineNbr": 76,
      "author": {
        "id": 1002115
      },
      "writtenOn": "2018-01-08T21:00:19Z",
      "side": 1,
      "message": "by the way, something that wasn\u0027t immediately clear to me: because a WebUIDataSource has the notion of a \"default resource\", it can respond to arbitrary URLs/paths.\n\nex: somebody types chrome://settings/blah-blah-blah it should basically silently map to (and possibly redirect the URL to) chrome://settings/.  this is mildly important for old/broken URLs as well.\n\nwhen the WebUIDataSource\u0027s default resource is gzipped, it means that any unknown path will be set up with a net::SourceStream to gunzip the contents. \n\nfor pages like chrome://tracing that use a request filter, the page XHRs \"/json/some-url-that-responds-with-data\". having a global map of IDRs doesn\u0027t help here. if there\u0027s no resource registered to that path, it\u0027d be silently mapped to the default resource (i.e. IDR_TRACING_HTML_OR_WHATEVER), which can be gzipped.  this data call is effectively broken because the bytes responded with are uncompressed even though the path is set up as gzipped because of the default resource.\n\ni\u0027m saying this mainly as an FYI: a global map of IDRs isn\u0027t necessarily a total silver bullet.",
      "parentUuid": "e532b86d_2fded185",
      "revId": "ad22225533ce882dd68bfbb714d0f4d4cbe9e38b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2d0cdae9_d7a798f7",
        "filename": "content/public/browser/web_ui_data_source.h",
        "patchSetId": 11
      },
      "lineNbr": 76,
      "author": {
        "id": 1002532
      },
      "writtenOn": "2018-01-08T23:02:46Z",
      "side": 1,
      "message": "Regarding the extra bits off disk: this change is already writing extra maps to the grd file i.e. in the components_resources_map.h files?\n\nThis patch, as is, makes adding gzipped resources harder IMO from a normal developer pov.",
      "parentUuid": "9dcf3f4e_958e6b48",
      "revId": "ad22225533ce882dd68bfbb714d0f4d4cbe9e38b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "43ea551f_f72108e1",
        "filename": "content/public/browser/web_ui_data_source.h",
        "patchSetId": 11
      },
      "lineNbr": 117,
      "author": {
        "id": 1002532
      },
      "writtenOn": "2018-01-08T15:20:18Z",
      "side": 1,
      "message": "I don\u0027t understand the comment, since there\u0027s no return value?",
      "revId": "ad22225533ce882dd68bfbb714d0f4d4cbe9e38b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b96c3169_fdee0143",
        "filename": "content/public/browser/web_ui_data_source.h",
        "patchSetId": 11
      },
      "lineNbr": 117,
      "author": {
        "id": 1002115
      },
      "writtenOn": "2018-01-08T20:51:23Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "43ea551f_f72108e1",
      "revId": "ad22225533ce882dd68bfbb714d0f4d4cbe9e38b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}