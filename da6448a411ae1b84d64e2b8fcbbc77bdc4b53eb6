{
  "comments": [
    {
      "key": {
        "uuid": "af5085cb_1387e176",
        "filename": "content/browser/frame_host/render_frame_host_impl_browsertest.cc",
        "patchSetId": 35
      },
      "lineNbr": 902,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-12-05T08:49:06Z",
      "side": 1,
      "message": "Nit: this is just a test so it doesn\u0027t matter as much, but const GURL\u0026 here please.",
      "range": {
        "startLine": 902,
        "startChar": 2,
        "endLine": 902,
        "endChar": 6
      },
      "revId": "da6448a411ae1b84d64e2b8fcbbc77bdc4b53eb6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3f3291d2_ce9d7235",
        "filename": "content/browser/interface_provider_filtering.h",
        "patchSetId": 35
      },
      "lineNbr": 34,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-12-05T08:49:06Z",
      "side": 1,
      "message": "To be clear, isn\u0027t this only needed because the Connector isn\u0027t set up?\n\n(Honestly, I feel like we should just fix the unit tests to set up the connector object...)",
      "revId": "da6448a411ae1b84d64e2b8fcbbc77bdc4b53eb6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "afc5d933_4abdab09",
        "filename": "content/browser/security_exploit_browsertest.cc",
        "patchSetId": 35
      },
      "lineNbr": 643,
      "author": {
        "id": 1001500
      },
      "writtenOn": "2017-12-01T01:03:26Z",
      "side": 1,
      "message": "I\u0027d expect tests here to result in the renderer process being terminated because it violates a security property. This test seems to be a positive one and I\u0027m not sure it belongs in this file.",
      "revId": "da6448a411ae1b84d64e2b8fcbbc77bdc4b53eb6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "34bb6de3_b46fd7cc",
        "filename": "content/browser/security_exploit_browsertest.cc",
        "patchSetId": 35
      },
      "lineNbr": 679,
      "author": {
        "id": 1001500
      },
      "writtenOn": "2017-12-01T01:03:26Z",
      "side": 1,
      "message": "It isn\u0027t quite clear to follow how we test reuse of the initial empty document. \n\nAlso, the JS navigates as soon as we add the frame to the DOM, which makes it non-obvious whether there is initial empty document or not. Maybe add the frame to the DOM first, then assign its src?",
      "revId": "da6448a411ae1b84d64e2b8fcbbc77bdc4b53eb6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a7bc5eb1_793d2ce2",
        "filename": "content/browser/security_exploit_browsertest.cc",
        "patchSetId": 35
      },
      "lineNbr": 679,
      "author": {
        "id": 1003152
      },
      "writtenOn": "2017-12-01T17:56:16Z",
      "side": 1,
      "message": "TL;DR: If we assigned `src` to X after adding the iframe to the DOM, then the child frame would load the initial empty document first, then navigate to `about:blank` as the first real load, and navigate to X as the second real load.\n\nIn more detail, my understanding is that when an iframe element is added to the DOM, that will trigger:\n 1) initializing the content frame,\n 2) kicking off the first load in the content frame.\n\nDuring (1), regardless of everything, the child frame\u0027s state machine will always cycle through loading the initial empty document first. [1], [2].\n\nDuring (2), if there is no `src` attribute, the frame will default to committing `about:blank` as the first real load. [3]\n\nIn fact, I think that if we don\u0027t specify `src`, the new child frame will commit `about:blank` as its first real load while the document.append() call in the main frame is still on the stack. \n\n[1]: https://cs.chromium.org/chromium/src/third_party/WebKit/Source/core/html/HTMLFrameElementBase.cpp?rcl\u003d29de08401a3679af8a5156396e5237c24792ee3b\u0026l\u003d208\n\n[2]: https://cs.chromium.org/chromium/src/third_party/WebKit/Source/core/loader/FrameLoader.cpp?rcl\u003dd0f4900f397ba6238ae8c41438ac6452bd722062\u0026l\u003d274\n\n[3]: https://cs.chromium.org/chromium/src/third_party/WebKit/Source/core/html/HTMLFrameElementBase.cpp?rcl\u003dd0f4900f397ba6238ae8c41438ac6452bd722062\u0026l\u003d83",
      "parentUuid": "34bb6de3_b46fd7cc",
      "revId": "da6448a411ae1b84d64e2b8fcbbc77bdc4b53eb6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "44267b24_036fd6a7",
        "filename": "content/browser/security_exploit_browsertest.cc",
        "patchSetId": 35
      },
      "lineNbr": 679,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-12-05T08:49:06Z",
      "side": 1,
      "message": "Unfortunately, this is correct. jakearchibald@ pointed me at this bizarre behavior of iframes in Chrome awhile back. See https://github.com/whatwg/html/issues/3267 as well. I\u0027m working on fixing this behavior in Chrome at least...",
      "parentUuid": "a7bc5eb1_793d2ce2",
      "revId": "da6448a411ae1b84d64e2b8fcbbc77bdc4b53eb6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f5722d93_031144bf",
        "filename": "content/public/test/render_view_test.cc",
        "patchSetId": 35
      },
      "lineNbr": 87,
      "author": {
        "id": 1001500
      },
      "writtenOn": "2017-12-01T01:03:26Z",
      "side": 1,
      "message": "Why did we need these routing ids to change?",
      "revId": "da6448a411ae1b84d64e2b8fcbbc77bdc4b53eb6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "793eb6a0_da1fd40d",
        "filename": "content/public/test/render_view_test.cc",
        "patchSetId": 35
      },
      "lineNbr": 87,
      "author": {
        "id": 1003152
      },
      "writtenOn": "2017-12-01T17:56:16Z",
      "side": 1,
      "message": "I needed to spruce up RenderViewTest, MockRenderThread, and friends to allow tests to create additional RenderViews, such as in response to window.open(), in RenderViewTests -- and this required being able to generate routing IDs.\n\nActually, I realized I can extract these changes into another CL to make this smaller.",
      "parentUuid": "f5722d93_031144bf",
      "revId": "da6448a411ae1b84d64e2b8fcbbc77bdc4b53eb6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d1a5e147_b3313f8c",
        "filename": "content/renderer/render_frame_impl.cc",
        "patchSetId": 35
      },
      "lineNbr": 4060,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-12-05T08:49:06Z",
      "side": 1,
      "message": "Please also add a note as to why this is requires. Maybe something about audio IPCs have their own interface factory (presumably?) and eagerly bind it, so we need to reset it to have the same guarantees about interface requests coming from the current Document.",
      "revId": "da6448a411ae1b84d64e2b8fcbbc77bdc4b53eb6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3a10c32d_6e765b3c",
        "filename": "content/renderer/render_frame_impl_browsertest.cc",
        "patchSetId": 35
      },
      "lineNbr": 644,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-12-05T08:49:06Z",
      "side": 1,
      "message": "Nit: const ref here.",
      "range": {
        "startLine": 644,
        "startChar": 40,
        "endLine": 644,
        "endChar": 51
      },
      "revId": "da6448a411ae1b84d64e2b8fcbbc77bdc4b53eb6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b53ae35f_3e60c8d9",
        "filename": "content/renderer/render_frame_impl_browsertest.cc",
        "patchSetId": 35
      },
      "lineNbr": 673,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-12-05T08:49:06Z",
      "side": 1,
      "message": "Nit: personally I would prefer just using an actual struct; it\u0027s not that much heavier-weight in tests, and is significantly more readable than get\u003c0\u003e, get\u003c1\u003e, et cetera",
      "revId": "da6448a411ae1b84d64e2b8fcbbc77bdc4b53eb6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "968624ce_a4dd1f9e",
        "filename": "content/renderer/render_frame_impl_browsertest.cc",
        "patchSetId": 35
      },
      "lineNbr": 751,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-12-05T08:49:06Z",
      "side": 1,
      "message": "Nit: \u0027next\u0027 seems like it\u0027d be a slightly better description given the class logic.",
      "range": {
        "startLine": 751,
        "startChar": 56,
        "endLine": 751,
        "endChar": 61
      },
      "revId": "da6448a411ae1b84d64e2b8fcbbc77bdc4b53eb6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4add09d8_a1b5dae2",
        "filename": "content/renderer/render_frame_impl_browsertest.cc",
        "patchSetId": 35
      },
      "lineNbr": 814,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-12-05T08:49:06Z",
      "side": 1,
      "message": "Nit: const ref\n\n(I would personally probably just use an empty and invalid GURL to represent this, but that\u0027s just me)",
      "range": {
        "startLine": 814,
        "startChar": 6,
        "endLine": 814,
        "endChar": 26
      },
      "revId": "da6448a411ae1b84d64e2b8fcbbc77bdc4b53eb6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "304bc062_860794be",
        "filename": "content/renderer/render_frame_impl_browsertest.cc",
        "patchSetId": 35
      },
      "lineNbr": 908,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-12-05T08:49:06Z",
      "side": 1,
      "message": "We now have BindLambdaForTesting, so you could just capture [\u0026] here now if you want.",
      "range": {
        "startLine": 908,
        "startChar": 10,
        "endLine": 908,
        "endChar": 36
      },
      "revId": "da6448a411ae1b84d64e2b8fcbbc77bdc4b53eb6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "75019d92_19bf6fdd",
        "filename": "content/renderer/render_frame_impl_browsertest.cc",
        "patchSetId": 35
      },
      "lineNbr": 1034,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-12-05T08:49:06Z",
      "side": 1,
      "message": "I\u0027m a bit nervous about how many (internal) details of frame/document creation this encodes. Is it necessary to record all these events? We do have long-standing plans to change how this works, and having this specified so exactly in the tests makes things trickier down the road.",
      "range": {
        "startLine": 1024,
        "startChar": 0,
        "endLine": 1034,
        "endChar": 37
      },
      "revId": "da6448a411ae1b84d64e2b8fcbbc77bdc4b53eb6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "10a1f663_e462b2f3",
        "filename": "content/test/test_render_frame.cc",
        "patchSetId": 35
      },
      "lineNbr": 165,
      "author": {
        "id": 1001500
      },
      "writtenOn": "2017-12-01T01:03:26Z",
      "side": 1,
      "message": "Why do we need this?",
      "revId": "da6448a411ae1b84d64e2b8fcbbc77bdc4b53eb6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "195d9367_231a96af",
        "filename": "content/test/test_render_frame.cc",
        "patchSetId": 35
      },
      "lineNbr": 165,
      "author": {
        "id": 1003152
      },
      "writtenOn": "2017-12-01T17:56:16Z",
      "side": 1,
      "message": "This forces the navigation to be carried out by the renderer, instead of just triggering FrameHostMsg_BeginNavigation. Hence allows using URL override IsURLHandledByNetworkStack\u003dtrue URLs.\n\nI think we can replace this check with just checking if next_request_url_override_.has_value(), however.",
      "parentUuid": "10a1f663_e462b2f3",
      "revId": "da6448a411ae1b84d64e2b8fcbbc77bdc4b53eb6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cf00925d_78085ab1",
        "filename": "third_party/WebKit/Source/core/loader/DocumentLoader.cpp",
        "patchSetId": 35
      },
      "lineNbr": 1169,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-12-05T08:49:06Z",
      "side": 1,
      "message": "Is it correct to unconditionally pass kCreateNew here? (Sorry if this was explained in another comment and I missed it.)\n\nIt seems like it might be possible to hit this if the first URL navigated to is a javascript: URL, especially once we fix the about:blank inheritance bugs in Chrome.",
      "range": {
        "startLine": 1169,
        "startChar": 27,
        "endLine": 1169,
        "endChar": 65
      },
      "revId": "da6448a411ae1b84d64e2b8fcbbc77bdc4b53eb6",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}