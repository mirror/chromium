{
  "comments": [
    {
      "key": {
        "uuid": "9855504f_e60af652",
        "filename": "third_party/WebKit/Source/core/timing/PerformanceBase.cpp",
        "patchSetId": 6
      },
      "lineNbr": 148,
      "author": {
        "id": 1116050
      },
      "writtenOn": "2017-08-31T16:52:02Z",
      "side": 1,
      "message": "Although it\u0027s a bit longer, we might want to whitelist instead of blacklist.\n\nif (type !\u003d PerformanceEntry::kResource \u0026\u0026\n    type !\u003d ... \u0026\u0026 \n    ...) {\n  return entries;\n}\n\nOver time, we expect new entry types not to support getEntriesByType, so this approach should make this error prone moving forward.",
      "range": {
        "startLine": 144,
        "startChar": 2,
        "endLine": 148,
        "endChar": 3
      },
      "revId": "a3c889d4abf33ac713cf396a13a8288d1861e259",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ddbe8a7b_00427298",
        "filename": "third_party/WebKit/Source/core/timing/PerformanceBase.cpp",
        "patchSetId": 6
      },
      "lineNbr": 148,
      "author": {
        "id": 1215729
      },
      "writtenOn": "2017-08-31T17:53:36Z",
      "side": 1,
      "message": "I agree. Sometimes we need to make a trade-off between the logic\u0027s readability and code depth\u0027s readability. I was often blamed for making code deep. Now I find my support:)",
      "parentUuid": "9855504f_e60af652",
      "range": {
        "startLine": 144,
        "startChar": 2,
        "endLine": 148,
        "endChar": 3
      },
      "revId": "a3c889d4abf33ac713cf396a13a8288d1861e259",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c9018a70_371dbbf8",
        "filename": "third_party/WebKit/Source/core/timing/PerformanceObserver.cpp",
        "patchSetId": 6
      },
      "lineNbr": 121,
      "author": {
        "id": 1116050
      },
      "writtenOn": "2017-08-31T16:52:02Z",
      "side": 1,
      "message": "This approach could easily get out of sync, if AllValidEntryTypes isn\u0027t updated.\n\nInstead, to EntryType a MaxEntryType entry, and just loop through the valid values.\n\nSomething roughly like:\nfor (int i \u003d 1; i \u003c\u003d static_cast\u003cint\u003e(EntryType::MaxEntryType); i \u003d i \u003c\u003c 1) ...",
      "range": {
        "startLine": 121,
        "startChar": 9,
        "endLine": 121,
        "endChar": 66
      },
      "revId": "a3c889d4abf33ac713cf396a13a8288d1861e259",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9b24b96c_6db3c062",
        "filename": "third_party/WebKit/Source/core/timing/PerformanceObserver.cpp",
        "patchSetId": 6
      },
      "lineNbr": 121,
      "author": {
        "id": 1215729
      },
      "writtenOn": "2017-08-31T17:53:36Z",
      "side": 1,
      "message": "I have the same concern. But this may have the out-of-sync issue too. The way it\u0027s iterating depends on the fact that the enums is defined as the bits in an integer, but this may change in the future. \n\nBut yes, this way is better than my current way. Defining the way of iteration in PerformanceEntry.AllValidEntryTypes() will further reduce the pain. And we can initialize a static val all_valid_entry_types with your for-loop only once, but this will make PerformanceEntry file complicated.\n\nOr, the other easy approach to solve out-of-sync based on my current approach is to write a test checking whether my AllValidEntryTypes() return what your for-loop returns. \n\nThe test idea can keep the PerformanceEntry file clean. How\u0027s that sounds like?",
      "parentUuid": "c9018a70_371dbbf8",
      "range": {
        "startLine": 121,
        "startChar": 9,
        "endLine": 121,
        "endChar": 66
      },
      "revId": "a3c889d4abf33ac713cf396a13a8288d1861e259",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a9d7bcd9_0f387c5f",
        "filename": "third_party/WebKit/Source/core/timing/PerformanceObserver.h",
        "patchSetId": 6
      },
      "lineNbr": 60,
      "author": {
        "id": 1116050
      },
      "writtenOn": "2017-08-31T16:52:02Z",
      "side": 1,
      "message": "Maybe IsObserving?",
      "range": {
        "startLine": 60,
        "startChar": 7,
        "endLine": 60,
        "endChar": 16
      },
      "revId": "a3c889d4abf33ac713cf396a13a8288d1861e259",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}