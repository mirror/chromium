{
  "comments": [
    {
      "key": {
        "uuid": "29d71e73_be63234f",
        "filename": "ash/wm/window_state.cc",
        "patchSetId": 5
      },
      "lineNbr": 500,
      "author": {
        "id": 1000539
      },
      "writtenOn": "2017-09-01T09:51:14Z",
      "side": 1,
      "message": "is this something that exo code should be doing? either way, looks like a fix that should separate from the rest of this CL",
      "revId": "3efdb3442d096af69d6be14dfb8fb979e8d228d0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a6e58c4a_800cdb06",
        "filename": "ash/wm/window_state.cc",
        "patchSetId": 5
      },
      "lineNbr": 500,
      "author": {
        "id": 1002249
      },
      "writtenOn": "2017-09-01T10:46:26Z",
      "side": 1,
      "message": "I don\u0027t think it should be done by exo. It\u0027s not only exo which uses frame sinks. I\u0027m extracting to a separate CL right now.",
      "parentUuid": "29d71e73_be63234f",
      "revId": "3efdb3442d096af69d6be14dfb8fb979e8d228d0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "90a2a65e_be392f7d",
        "filename": "ash/wm/window_state.cc",
        "patchSetId": 5
      },
      "lineNbr": 500,
      "author": {
        "id": 1002249
      },
      "writtenOn": "2017-09-01T11:04:46Z",
      "side": 1,
      "message": "Extracted to:\nhttps://chromium-review.googlesource.com/c/chromium/src/+/647347",
      "parentUuid": "a6e58c4a_800cdb06",
      "revId": "3efdb3442d096af69d6be14dfb8fb979e8d228d0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "df8f0ff3_68708616",
        "filename": "ash/wm/window_state.cc",
        "patchSetId": 5
      },
      "lineNbr": 500,
      "author": {
        "id": 1000539
      },
      "writtenOn": "2017-09-01T11:28:17Z",
      "side": 1,
      "message": "I don\u0027t mean for exo specifically but in general. Shouldn\u0027t the new surface ids be allocated by the client as a result of the bounds changing instead of here?",
      "parentUuid": "90a2a65e_be392f7d",
      "revId": "3efdb3442d096af69d6be14dfb8fb979e8d228d0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8eed308c_46ff58ca",
        "filename": "ash/wm/window_state.cc",
        "patchSetId": 5
      },
      "lineNbr": 500,
      "author": {
        "id": 1002249
      },
      "writtenOn": "2017-09-04T03:31:03Z",
      "side": 1,
      "message": "Window state may change without bounds changing, though it\u0027s a rare edge case. Window manager (here ash) may want to arbitrarily create copies of layers for animations in any moment. We could add a callback to ask the client to call aura::Window::AllocateLocalSurfaceId, but on the other hand I\u0027m not very sure if it\u0027s necessary for the client to know that we\u0027re doing a layer copy and involve it in the process. It\u0027s an implementation detail of the window manager, and wm can take care of reallocating the surface on it\u0027s own.\n\nAnyways, the new version of https://chromium-review.googlesource.com/c/chromium/src/+/647347 simplifies this logic slightly by asking the layer owner (here aura::window) to allocate a new surface id. Let\u0027s continue the discussion there if you have further questions on this part of the CL.",
      "parentUuid": "df8f0ff3_68708616",
      "revId": "3efdb3442d096af69d6be14dfb8fb979e8d228d0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0e94125e_21f85519",
        "filename": "components/exo/shell_surface.cc",
        "patchSetId": 5
      },
      "lineNbr": 765,
      "author": {
        "id": 1001380
      },
      "writtenOn": "2017-09-01T15:59:31Z",
      "side": 1,
      "message": "Shouldn\u0027t we fix this first? Then, we can simply use the pending frame \u0026 current frame for cross fade, which doesn\u0027t require these logic?",
      "revId": "3efdb3442d096af69d6be14dfb8fb979e8d228d0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9dc93864_6e76e0b2",
        "filename": "components/exo/shell_surface.cc",
        "patchSetId": 5
      },
      "lineNbr": 765,
      "author": {
        "id": 1002249
      },
      "writtenOn": "2017-09-04T03:31:03Z",
      "side": 1,
      "message": "Well, I don\u0027t think the order of CLs matters that much. It\u0027s easier to verify fixing b/65271032 if this landed first. And the workaround for broken synchronization is just one line.",
      "parentUuid": "0e94125e_21f85519",
      "revId": "3efdb3442d096af69d6be14dfb8fb979e8d228d0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0393b0df_6a2610c7",
        "filename": "components/exo/shell_surface.cc",
        "patchSetId": 5
      },
      "lineNbr": 765,
      "author": {
        "id": 1001380
      },
      "writtenOn": "2017-09-04T08:25:13Z",
      "side": 1,
      "message": "I believe if they\u0027re synchronized, we can simply crossfade between current and pending.",
      "parentUuid": "9dc93864_6e76e0b2",
      "revId": "3efdb3442d096af69d6be14dfb8fb979e8d228d0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "924d5da9_c7b91674",
        "filename": "components/exo/shell_surface.cc",
        "patchSetId": 5
      },
      "lineNbr": 765,
      "author": {
        "id": 1002249
      },
      "writtenOn": "2017-09-04T08:35:35Z",
      "side": 1,
      "message": "That\u0027s correct. Yet we still want to disable crossfading if invoked from aura (alt+). That\u0027s why we need the next_Frame_is_good_for_crossfade_. I\u0027ll remove this if though as we just landed the ARC fix for the synchronization.",
      "parentUuid": "0393b0df_6a2610c7",
      "revId": "3efdb3442d096af69d6be14dfb8fb979e8d228d0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d7a51803_fd767960",
        "filename": "components/exo/shell_surface.cc",
        "patchSetId": 5
      },
      "lineNbr": 765,
      "author": {
        "id": 1002249
      },
      "writtenOn": "2017-09-04T10:03:49Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "924d5da9_c7b91674",
      "revId": "3efdb3442d096af69d6be14dfb8fb979e8d228d0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "710da49f_d5aed81d",
        "filename": "components/exo/shell_surface.cc",
        "patchSetId": 5
      },
      "lineNbr": 778,
      "author": {
        "id": 1001380
      },
      "writtenOn": "2017-09-04T08:25:13Z",
      "side": 1,
      "message": "we need to handle normal \u003c-\u003e fullscreen",
      "revId": "3efdb3442d096af69d6be14dfb8fb979e8d228d0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ed624a89_6d511b42",
        "filename": "components/exo/shell_surface.cc",
        "patchSetId": 5
      },
      "lineNbr": 778,
      "author": {
        "id": 1002249
      },
      "writtenOn": "2017-09-04T08:35:35Z",
      "side": 1,
      "message": "We only animate fullscreen -\u003e normal in ash, but not normal -\u003e fullscreen. Not sure if it\u0027s on purpose. So I left fullscreen animation for a separate CL.",
      "parentUuid": "710da49f_d5aed81d",
      "revId": "3efdb3442d096af69d6be14dfb8fb979e8d228d0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1362aa18_679b5821",
        "filename": "components/exo/shell_surface.h",
        "patchSetId": 5
      },
      "lineNbr": 134,
      "author": {
        "id": 1000539
      },
      "writtenOn": "2017-09-01T09:51:14Z",
      "side": 1,
      "message": "hm, can we make this work using standard configure event flow instead (using a synchronous round-trip if needed)? I really like us to cut down on arc specific logic that we have to maintain in exo/chrome and move towards a model where more code is shared with regular clients and upstream interfaces clearly define expected behavior.",
      "revId": "3efdb3442d096af69d6be14dfb8fb979e8d228d0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "aa36cedd_6033b331",
        "filename": "components/exo/shell_surface.h",
        "patchSetId": 5
      },
      "lineNbr": 134,
      "author": {
        "id": 1002249
      },
      "writtenOn": "2017-09-01T10:46:26Z",
      "side": 1,
      "message": "Are we going to abandon the zcr_remote_surface_v1_interface protocol? It gives as a guarantee that window state changes are part of commits, which is very helpful and imho neat.\n\nAs for using configure, I\u0027m not sure if it\u0027s that helpful here. Per documentation \"client must make an ack_configure request *sometime before* the commit request\". So, when we have a surface commit we can either be committing a surface for the new or old window state. And we want to fire the animation just before we get the new frame. What I want to say is I\u0027m skeptical if the standard Wayland protocol gives as any mechanism to do a reliable crossfade animation without heuristics.",
      "parentUuid": "1362aa18_679b5821",
      "revId": "3efdb3442d096af69d6be14dfb8fb979e8d228d0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7085ced5_7e26d7b7",
        "filename": "components/exo/shell_surface.h",
        "patchSetId": 5
      },
      "lineNbr": 134,
      "author": {
        "id": 1002249
      },
      "writtenOn": "2017-09-01T11:23:28Z",
      "side": 1,
      "message": "All right, I read the documentation again, and the configure from xdg-shell is actually synchronized. So yeah, it should work.\n\nHowever, we don\u0027t have it implemented on Android side yet. And it may be a lot of work. So the question is whether we want this CL first, and move to the standard protocol later, or we don\u0027t want it at all?",
      "parentUuid": "aa36cedd_6033b331",
      "revId": "3efdb3442d096af69d6be14dfb8fb979e8d228d0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ba4c667e_1698fd9d",
        "filename": "components/exo/shell_surface.h",
        "patchSetId": 5
      },
      "lineNbr": 134,
      "author": {
        "id": 1000539
      },
      "writtenOn": "2017-09-01T11:28:17Z",
      "side": 1,
      "message": "the standard wayland protocol has excellent support for this in the form of acks. it will also handle compositor driven state changes correctly. e.g. what if you press Alt-+ to maximize the window.\n\nI\u0027d like to abandon remote-shell eventually. It\u0027s not going to happen in a day but the more we rely on it the harder it will be.",
      "parentUuid": "aa36cedd_6033b331",
      "revId": "3efdb3442d096af69d6be14dfb8fb979e8d228d0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "27582e6e_24ca7afd",
        "filename": "components/exo/shell_surface.h",
        "patchSetId": 5
      },
      "lineNbr": 134,
      "author": {
        "id": 1000539
      },
      "writtenOn": "2017-09-01T11:37:10Z",
      "side": 1,
      "message": "Let\u0027s do it right from the start. I think it would be relatively easy to implement on the Android side by using a round-trip (wl_display_roundtrip). That\u0027s of course not ideal performance wise but it would be a good start. Example from client side:\n\nMaximizeWindow() {\n  shell_set_maximized();\n  wl_display_round_trip(); // will result in a configure event with maximize state and a serial\n  configure_ack(serial_from_above);\n  commit();\n}",
      "parentUuid": "ba4c667e_1698fd9d",
      "revId": "3efdb3442d096af69d6be14dfb8fb979e8d228d0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6d653119_0de6a236",
        "filename": "components/exo/shell_surface.h",
        "patchSetId": 5
      },
      "lineNbr": 134,
      "author": {
        "id": 1001380
      },
      "writtenOn": "2017-09-01T15:59:31Z",
      "side": 1,
      "message": "Note that alt-+ may not result in state change in Android, and Android still have the final decision that should happen. (we can reduce such chance by sending more info to server, but we can\u0027t eliminate 100%).\n\nAlso, if you\u0027re planning to remove remote shell, please coordinate with skuhne@ and also android team. Our current (future) upstream plan is to rely on Android to implement window state change, and I want to make sure it won\u0027t cause a problem in the future.",
      "parentUuid": "27582e6e_24ca7afd",
      "revId": "3efdb3442d096af69d6be14dfb8fb979e8d228d0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "33099d14_f32a89f0",
        "filename": "components/exo/shell_surface.h",
        "patchSetId": 5
      },
      "lineNbr": 134,
      "author": {
        "id": 1002249
      },
      "writtenOn": "2017-09-04T03:31:03Z",
      "side": 1,
      "message": "David, do you suggest to use zcr configure event with zcr maximize/restore? We use zcr protocol for ARC surfaces at this moment.\n\nThe zcr protocol is client driven for window state changes and zcr maximize/restore events are called *after* the client changes the window state. The zcr configure event is not used for window states.\n\nWe could make zcr work with configure events for window state changes, but it\u0027s a large effort including major refactoring on Android side. It\u0027s tracked here crbug.com/699746.\n\nIf we can go with this CL, we can deliver animations to users right now easily and quickly. If your concern is about supporting other clients, then I can add support for animations to other protocols which use configuration for window states. Also, when crbug.com/699746 is fixed, we\u0027d use zcr configure for animations too. And in the long term ideally migrate to xdg entirely.",
      "parentUuid": "6d653119_0de6a236",
      "revId": "3efdb3442d096af69d6be14dfb8fb979e8d228d0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c8082a55_8d4d7430",
        "filename": "components/exo/shell_surface.h",
        "patchSetId": 5
      },
      "lineNbr": 134,
      "author": {
        "id": 1000539
      },
      "writtenOn": "2017-09-06T11:47:23Z",
      "side": 1,
      "message": "Not sure exactly what \"Android to implement window state change\" means but a good process is to just submit updates to the new aura-shell protocol that provide what\u0027s needed and unless they are large they can be discussed and evaluated as part of the review process.\n\n@tomasz, remote-shell configure events is what you\u0027d need to use today but in the future when we move to xdg-shell we can instead use the configure event that is part of that interface.",
      "parentUuid": "33099d14_f32a89f0",
      "revId": "3efdb3442d096af69d6be14dfb8fb979e8d228d0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}