{
  "comments": [
    {
      "key": {
        "uuid": "695c1b21_8bd28591",
        "filename": "third_party/WebKit/Source/core/dom/TreeScope.cpp",
        "patchSetId": 1
      },
      "lineNbr": 260,
      "author": {
        "id": 1000098
      },
      "writtenOn": "2017-12-06T02:09:10Z",
      "side": 1,
      "message": "In Google\u0027s style, avoid short names such as |a| or |s|\nand use some meaningful one.  (x, y, and i are exceptions)",
      "revId": "2c6870cef4a6a0d849b8f5545f44f14eece37494",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5f517f7f_fd76188d",
        "filename": "third_party/WebKit/Source/core/dom/TreeScope.cpp",
        "patchSetId": 1
      },
      "lineNbr": 260,
      "author": {
        "id": 1247388
      },
      "writtenOn": "2017-12-06T05:11:04Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "695c1b21_8bd28591",
      "revId": "2c6870cef4a6a0d849b8f5545f44f14eece37494",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "20fccde2_2151810a",
        "filename": "third_party/WebKit/Source/core/dom/TreeScope.cpp",
        "patchSetId": 1
      },
      "lineNbr": 261,
      "author": {
        "id": 1000098
      },
      "writtenOn": "2017-12-06T02:09:10Z",
      "side": 1,
      "message": "If this is trying to implement retarget algorithm, could you use\nTreeScope::Retarget()?",
      "revId": "2c6870cef4a6a0d849b8f5545f44f14eece37494",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "46bb5390_b2f59078",
        "filename": "third_party/WebKit/Source/core/dom/TreeScope.cpp",
        "patchSetId": 1
      },
      "lineNbr": 261,
      "author": {
        "id": 1247388
      },
      "writtenOn": "2017-12-06T05:11:04Z",
      "side": 1,
      "message": "So I tried using TreeScope::Retarget before, but it only accepts Elements. I tried replacing all of these newly added lines with\n\nif (node \u0026\u0026 node-\u003eIsElementNode()) {\n    node \u003d Retarget(*ToElement(node));\n}\nif (node \u0026\u0026 node-\u003eIsShadowRoot()) {\n    node \u003d node-\u003eOwnerShadowHost();\n}\n\nbut for some of the testcases, it fails (in all of the failing tests it returns null). Since TreeScope::Retarget is also used by other functions, I\u0027m also hesitant in changing it. What should I do?",
      "parentUuid": "20fccde2_2151810a",
      "revId": "2c6870cef4a6a0d849b8f5545f44f14eece37494",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f3466039_a2c8f71d",
        "filename": "third_party/WebKit/Source/core/dom/TreeScope.cpp",
        "patchSetId": 1
      },
      "lineNbr": 261,
      "author": {
        "id": 1000098
      },
      "writtenOn": "2017-12-11T06:53:58Z",
      "side": 1,
      "message": "As HitTestPoint() returns an Element, did you try \nreturn Retarget(HitTestPoint(x, y, ...));\nas ElementFromPoint()?",
      "parentUuid": "46bb5390_b2f59078",
      "revId": "2c6870cef4a6a0d849b8f5545f44f14eece37494",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1665b815_f84eff13",
        "filename": "third_party/WebKit/Source/core/dom/TreeScope.cpp",
        "patchSetId": 1
      },
      "lineNbr": 261,
      "author": {
        "id": 1247388
      },
      "writtenOn": "2017-12-12T05:50:37Z",
      "side": 1,
      "message": "Using the version that I previously mentioned\n if (node \u0026\u0026 node-\u003eIsElementNode()) {\n   node \u003d Retarget(*ToElement(node));\n }\n if (!node || !node-\u003eIsElementNode()) {\n    return nullptr;\n }\nit fails 3 tests in DocumentOrShadowRoot-prototype-elementFromPoint.html (x 3 display options \u003d 9 failures), wher it returns null in all of them.\n\nThe failing tests: (the last 4 tests in the file, except the second-to-last test)\n\ndisplayValues.forEach(function (displayValue) {\n  test(function () {\n    container.innerHTML \u003d \u0027\u0027;\n    let host \u003d document.createElement(\u0027test-element\u0027);\n    host.style.display \u003d displayValue;\n    let shadow \u003d host.attachShadow({mode: \u0027closed\u0027});\n    shadow.innerHTML \u003d \u0027\u003cslot\u003e\u003c/slot\u003e\u0027;\n    host.innerHTML \u003d \u0027\u003cspan\u003ehello\u003c/span\u003e\u0027;\n    container.appendChild(host);\n    assert_equals(shadow.elementFromPoint(...pointInElement(host)), host.querySelector(\u0027span\u0027));\n  }, \u0027shadowRoot.elementFromPoint must return the shadow host when hit-tested text node under an element is assigned to a slot in the shadow tree and its host has display: \u0027 + displayValue);\n});\n\ndisplayValues.forEach(function (displayValue) {\n  test(function () {\n    container.innerHTML \u003d \u0027\u0027;\n    let host \u003d document.createElement(\u0027test-element\u0027);\n    host.style.display \u003d displayValue;\n    let shadow \u003d host.attachShadow({mode: \u0027closed\u0027});\n    shadow.innerHTML \u003d \u0027\u003cslot\u003e\u003c/slot\u003e\u0027;\n    host.innerHTML \u003d \u0027\u003cinner-host\u003ehello\u003c/inner-host\u003e\u0027;\n    container.appendChild(host);\n\n    let innerHost \u003d host.querySelector(\u0027inner-host\u0027);\n    let innerShadow \u003d innerHost.attachShadow({mode: \u0027closed\u0027});\n    innerShadow.innerHTML \u003d \u0027\u003cslot\u003e\u003c/slot\u003e\u0027;\n\n    assert_equals(shadow.elementFromPoint(...pointInElement(host)), innerHost);\n  }, \u0027shadowRoot.elementFromPoint must return a child element assigned to a slot\u0027\n      + \u0027 when the hit-tested text node is assigned to a slot in the shadow tree of the child element and the outer shadow host has display: \u0027 + displayValue);\n});\n\ndisplayValues.forEach(function (displayValue) {\n  test(function () {\n    container.innerHTML \u003d \u0027\u0027;\n    let host \u003d document.createElement(\u0027test-element\u0027);\n    host.style.display \u003d displayValue;\n    let shadow \u003d host.attachShadow({mode: \u0027closed\u0027});\n    shadow.innerHTML \u003d \u0027\u003cslot\u003e\u003c/slot\u003e\u0027;\n    host.innerHTML \u003d \u0027\u003cinner-host\u003e\u003c/inner-host\u003e\u0027;\n    container.appendChild(host);\n\n    let innerHost \u003d host.querySelector(\u0027inner-host\u0027);\n    let innerShadow \u003d innerHost.attachShadow({mode: \u0027closed\u0027});\n    innerShadow.innerHTML \u003d \u0027\u003cspan\u003ehello\u003c/span\u003e\u0027;\n\n    assert_equals(shadow.elementFromPoint(...pointInElement(host)), innerHost);\n  }, \u0027shadowRoot.elementFromPoint must return a child element with its own shadow tree assigned to a slot\u0027\n      + \u0027 when the hit-tested text node is a child of another element and the outer shadow host has display: \u0027 + displayValue);\n});\n\nusing the version that you mentioned:\nreturn Retarget(HitTestPoint(x, y, ...)); in ElementFromPoint\n\nit fails the last 6 tests in DocumentOrShadowRoot-prototype-elementFromPoint.html (x 3 display options \u003d 18 failures), where it returns null in all of them\n\n\nTreeScope::Retarget looks slightly different than the spec in http://w3c.github.io/webcomponents/spec/shadow/#retarget, and it also only takes Elements. In the fourth-to-last testcase for example, it returns null because the current tree scope (the one referenced by \"this\" keyword), is a shadow root, and the ancestor variable is initially set to the shadow root\u0027s host, so it never fulfills (this \u003d\u003d ancestor-\u003eGetTreeScope()) https://cs.chromium.org/chromium/src/third_party/WebKit/Source/core/dom/TreeScope.cpp?sq\u003dpackage:chromium\u0026l\u003d372 and it returns null. Whereas if you apply the retarget algorithm from the spec manually, it should\u0027ve returned on the first iteration, returning the shadow host. (It fulfills \"If Aâ€™s root is not a shadow root\" clause in the spec). \n\nShould I fix TreeScope::Retarget? It is used by TreeScope::AdjustedFocusedElement() though.",
      "parentUuid": "f3466039_a2c8f71d",
      "revId": "2c6870cef4a6a0d849b8f5545f44f14eece37494",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}