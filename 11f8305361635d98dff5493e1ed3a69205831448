{
  "comments": [
    {
      "key": {
        "uuid": "d4cfb2cf_9990f633",
        "filename": "content/browser/site_per_process_browsertest.cc",
        "patchSetId": 19
      },
      "lineNbr": 12399,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-11-22T18:59:16Z",
      "side": 1,
      "message": "nit: update this comment to mention that this is about removing the sandbox attribute? (Currently it\u0027s a copy form the test above.)",
      "range": {
        "startLine": 12399,
        "startChar": 0,
        "endLine": 12399,
        "endChar": 77
      },
      "revId": "11f8305361635d98dff5493e1ed3a69205831448",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c9ff91c6_99024c53",
        "filename": "content/browser/site_per_process_browsertest.cc",
        "patchSetId": 19
      },
      "lineNbr": 12399,
      "author": {
        "id": 1137849
      },
      "writtenOn": "2017-11-22T19:28:13Z",
      "side": 1,
      "message": "Whoops - thanks for catching that; my doc changes got stashed with all my logging before I committed :(",
      "parentUuid": "d4cfb2cf_9990f633",
      "range": {
        "startLine": 12399,
        "startChar": 0,
        "endLine": 12399,
        "endChar": 77
      },
      "revId": "11f8305361635d98dff5493e1ed3a69205831448",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "41507fcf_cda8eacc",
        "filename": "content/browser/site_per_process_browsertest.cc",
        "patchSetId": 19
      },
      "lineNbr": 12464,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-11-22T18:59:16Z",
      "side": 1,
      "message": "nit: maybe also check that both sets of flags on root-\u003echild_at(1) are also kNone now?",
      "range": {
        "startLine": 12464,
        "startChar": 0,
        "endLine": 12464,
        "endChar": 51
      },
      "revId": "11f8305361635d98dff5493e1ed3a69205831448",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dbb94c92_419c5215",
        "filename": "content/browser/site_per_process_browsertest.cc",
        "patchSetId": 19
      },
      "lineNbr": 12464,
      "author": {
        "id": 1137849
      },
      "writtenOn": "2017-11-22T19:28:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "41507fcf_cda8eacc",
      "range": {
        "startLine": 12464,
        "startChar": 0,
        "endLine": 12464,
        "endChar": 51
      },
      "revId": "11f8305361635d98dff5493e1ed3a69205831448",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7325fc51_d61b6088",
        "filename": "content/browser/site_per_process_browsertest.cc",
        "patchSetId": 19
      },
      "lineNbr": 12472,
      "author": {
        "id": 1118209
      },
      "writtenOn": "2017-11-22T18:59:16Z",
      "side": 1,
      "message": "nit: grandchild\u0027s? (I know it\u0027s the same renderer process, just might be a bit clearer since the script is executed on the grandchild frame. :) )",
      "range": {
        "startLine": 12472,
        "startChar": 36,
        "endLine": 12472,
        "endChar": 48
      },
      "revId": "11f8305361635d98dff5493e1ed3a69205831448",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dde087b2_a5ac5328",
        "filename": "content/browser/site_per_process_browsertest.cc",
        "patchSetId": 19
      },
      "lineNbr": 12472,
      "author": {
        "id": 1137849
      },
      "writtenOn": "2017-11-22T19:28:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7325fc51_d61b6088",
      "range": {
        "startLine": 12472,
        "startChar": 36,
        "endLine": 12472,
        "endChar": 48
      },
      "revId": "11f8305361635d98dff5493e1ed3a69205831448",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e27953d4_dc220a16",
        "filename": "third_party/WebKit/Source/core/dom/SecurityContext.h",
        "patchSetId": 19
      },
      "lineNbr": 111,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-11-22T19:42:42Z",
      "side": 1,
      "message": "Hmm...\n\nWould it make sense to just create a new RemoteSecurityContext instead? Or does that cause a lot of things to break? I feel slightly nervous about exposing this.",
      "revId": "11f8305361635d98dff5493e1ed3a69205831448",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "98f37b82_fbdb93e9",
        "filename": "third_party/WebKit/Source/core/dom/SecurityContext.h",
        "patchSetId": 19
      },
      "lineNbr": 111,
      "author": {
        "id": 1137849
      },
      "writtenOn": "2017-11-22T21:19:31Z",
      "side": 1,
      "message": "Alex? Any thoughts on that? I haven\u0027t tried it, and I don\u0027t know if reusing the RSC was just an optimization or if replacing it, like we do with the SecurityContext on the local frame, would cause any problems.\n\nI was a little hesitant, but this seems like the best way to allow it to be reset *only* from a RemoteSecurityContext instance. (I considered adding IsLocal/IsRemote, and implementing  ResetSandboxFlags on this class instead -- failing/crashing unless IsRemote -- but that doesn\u0027t actually seem any safer)",
      "parentUuid": "e27953d4_dc220a16",
      "revId": "11f8305361635d98dff5493e1ed3a69205831448",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a037e9b4_85a06b88",
        "filename": "third_party/WebKit/Source/core/dom/SecurityContext.h",
        "patchSetId": 19
      },
      "lineNbr": 111,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-11-22T22:08:08Z",
      "side": 1,
      "message": "I don\u0027t think we need to do anything in this CL; let\u0027s poke at it in a followup. I think it might be nice in some ways, but might also require other changes.",
      "parentUuid": "98f37b82_fbdb93e9",
      "revId": "11f8305361635d98dff5493e1ed3a69205831448",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "78b281d8_363e5fa2",
        "filename": "third_party/WebKit/public/web/WebFrameClient.h",
        "patchSetId": 19
      },
      "lineNbr": 271,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-11-22T19:42:42Z",
      "side": 1,
      "message": "I\u0027m probably missing something, but how is this called when CSP headers are encountered?",
      "revId": "11f8305361635d98dff5493e1ed3a69205831448",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1b55fcaf_4098dd32",
        "filename": "third_party/WebKit/public/web/WebFrameClient.h",
        "patchSetId": 19
      },
      "lineNbr": 271,
      "author": {
        "id": 1137849
      },
      "writtenOn": "2017-11-22T21:19:31Z",
      "side": 1,
      "message": "It\u0027s a bit indirect, but if the CSP header sets sandbox flags on the document, then they will be seen by ContentSecurityPolicy::ApplyPolicySideEffectsToExecutionContext() and enforced by  Document::EnforceSandboxFlags. Then Document::SetFeaturePolicy (an unfortunate place, I know) will see that SecurityContext::GetSandboxFlags returns non-default flags, and triggers the sending of this message.\n\nIt is sent if *either* feature-policy or CSP sandbox flags are non-default, hence the rename.",
      "parentUuid": "78b281d8_363e5fa2",
      "revId": "11f8305361635d98dff5493e1ed3a69205831448",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5fd62f2c_9509f147",
        "filename": "third_party/WebKit/public/web/WebFrameClient.h",
        "patchSetId": 19
      },
      "lineNbr": 271,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-11-22T22:08:08Z",
      "side": 1,
      "message": "I see--it\u0027s a bit unintuitive that this is dispatched from SetFeaturePolicy, since it relies on this being called after CSP is set.\n\nWould it make sense to move this call up into the Document ctor, after calling InitSecurityContext(), to avoid the subtlety?",
      "parentUuid": "1b55fcaf_4098dd32",
      "revId": "11f8305361635d98dff5493e1ed3a69205831448",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1f985555_070fc1e8",
        "filename": "third_party/WebKit/public/web/WebFrameClient.h",
        "patchSetId": 19
      },
      "lineNbr": 271,
      "author": {
        "id": 1137849
      },
      "writtenOn": "2017-11-23T16:44:43Z",
      "side": 1,
      "message": "It actually turns out that SetFeaturePolicy is called twice -- once from InitSecurityContext with a blank policy, and again from DocumentLoader::InstallNewDocument. (DocumentLoader is the only path by which a header set a declared policy, but we want to have a default for the code paths which don\u0027t go through the loader)\n\nI split SetFeaturePolicy into two methods: DeclareFeaturePolicy, which calls this, and ApplyFeaturePolicy, which doesn\u0027t. Hopefully this is clearer and more deliberate.",
      "parentUuid": "5fd62f2c_9509f147",
      "revId": "11f8305361635d98dff5493e1ed3a69205831448",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}