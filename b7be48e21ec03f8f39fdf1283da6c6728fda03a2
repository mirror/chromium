{
  "comments": [
    {
      "key": {
        "uuid": "0ec0deeb_5f7d118a",
        "filename": "chrome/browser/vr/databinding/binding.h",
        "patchSetId": 1
      },
      "lineNbr": 10,
      "author": {
        "id": 1213279
      },
      "writtenOn": "2017-08-24T16:58:25Z",
      "side": 1,
      "message": "Nit: As per group discussion some time ago, we should have comments for all classes.",
      "revId": "b7be48e21ec03f8f39fdf1283da6c6728fda03a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f95cb77c_918b36ca",
        "filename": "chrome/browser/vr/databinding/one_way_binding.h",
        "patchSetId": 1
      },
      "lineNbr": 16,
      "author": {
        "id": 1213279
      },
      "writtenOn": "2017-08-24T16:58:25Z",
      "side": 1,
      "message": "Nit: Here too, as per group discussion some time ago, we should have comments for all classes.",
      "revId": "b7be48e21ec03f8f39fdf1283da6c6728fda03a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6fd1d4c4_586e780c",
        "filename": "chrome/browser/vr/databinding/one_way_binding.h",
        "patchSetId": 1
      },
      "lineNbr": 16,
      "author": {
        "id": 1000537
      },
      "writtenOn": "2017-08-24T22:02:40Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f95cb77c_918b36ca",
      "revId": "b7be48e21ec03f8f39fdf1283da6c6728fda03a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "17e66b68_c0d9ed60",
        "filename": "chrome/browser/vr/databinding/one_way_binding.h",
        "patchSetId": 1
      },
      "lineNbr": 18,
      "author": {
        "id": 1117479
      },
      "writtenOn": "2017-08-24T17:13:28Z",
      "side": 1,
      "message": "What\u0027s the alternative to OneWay?  When would we have a TwoWayBinding?",
      "revId": "b7be48e21ec03f8f39fdf1283da6c6728fda03a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e7d3d036_9e547ec1",
        "filename": "chrome/browser/vr/databinding/one_way_binding.h",
        "patchSetId": 1
      },
      "lineNbr": 18,
      "author": {
        "id": 1000537
      },
      "writtenOn": "2017-08-24T22:02:40Z",
      "side": 1,
      "message": "You might have this for input elements, say. Not sure we\u0027ll ever add this functionality, though. We might rename Binding -\u003e BindingBase, and OneWayBinding -\u003e Binding (or something else). I\u0027ve updated the class level comment for this class and that may better motivate its current name, but I\u0027m definitely not attached to it. If you\u0027d prefer another name, I\u0027m happy to switch it up.",
      "parentUuid": "17e66b68_c0d9ed60",
      "revId": "b7be48e21ec03f8f39fdf1283da6c6728fda03a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4cfcdf67_f1c73d8d",
        "filename": "chrome/browser/vr/databinding/one_way_binding.h",
        "patchSetId": 1
      },
      "lineNbr": 28,
      "author": {
        "id": 1117479
      },
      "writtenOn": "2017-08-24T17:13:28Z",
      "side": 1,
      "message": "Sanity check.  Keeping a copy of the data here means the types have to be copyable.  Is that part of the reason for the (future) vector specialization?  What if, instead, we relied on the target object to offer both a setter and getter?  The binding could ask both sides for their values and compare them, calling the setter if needed.\n\nThen, vectors wouldn\u0027t be a special case.  We could typedef a vector of some type, define a comparison operator, and have the custom setter propagate changes as it sees fit.\n\nI am likely missing something though.",
      "revId": "b7be48e21ec03f8f39fdf1283da6c6728fda03a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8fcf2f4b_7e3a68e9",
        "filename": "chrome/browser/vr/databinding/one_way_binding.h",
        "patchSetId": 1
      },
      "lineNbr": 28,
      "author": {
        "id": 1000537
      },
      "writtenOn": "2017-08-24T22:02:40Z",
      "side": 1,
      "message": "It does mean that, yeah. I should note here what we\u0027d discussed offline about the vector binding. The reason I\u0027d made the vector binding in my demo CL was for a different reason. I wanted to trigger the instantiation and destruction of per-element views when elements were added to the vector.",
      "parentUuid": "4cfcdf67_f1c73d8d",
      "revId": "b7be48e21ec03f8f39fdf1283da6c6728fda03a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "307d633a_431a3557",
        "filename": "chrome/browser/vr/databinding/one_way_binding.h",
        "patchSetId": 1
      },
      "lineNbr": 42,
      "author": {
        "id": 1213279
      },
      "writtenOn": "2017-08-24T16:58:25Z",
      "side": 1,
      "message": "Nit: Comment for this as well? Maybe with example?",
      "revId": "b7be48e21ec03f8f39fdf1283da6c6728fda03a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b7e0a73a_d39e0a71",
        "filename": "chrome/browser/vr/databinding/one_way_binding.h",
        "patchSetId": 1
      },
      "lineNbr": 42,
      "author": {
        "id": 1117479
      },
      "writtenOn": "2017-08-24T17:13:28Z",
      "side": 1,
      "message": "What you\u0027re doing with Set here is, ummm, scary(?).   Shouldn\u0027t you pass in a lambda/callback that sets one T to equal another?  Also, that means it doesn\u0027t have to be a macro anymore.  More like:\n\nstd::unique_ptr\u003cOneWayBinding\u003cT\u003e\u003e VrBind(...args...) {\n    auto a \u003d std::MakeUnique\u003c \u003e(bind bind bind bind);\n    return std::move(a); \n}",
      "revId": "b7be48e21ec03f8f39fdf1283da6c6728fda03a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a8f1aaa6_a237da49",
        "filename": "chrome/browser/vr/databinding/one_way_binding.h",
        "patchSetId": 1
      },
      "lineNbr": 42,
      "author": {
        "id": 1117479
      },
      "writtenOn": "2017-08-24T18:27:33Z",
      "side": 1,
      "message": "I\u0027m retracting my comment.  I should have looked at how the code looks without the macro, and now it\u0027s much more clear why this is a good idea.",
      "parentUuid": "b7e0a73a_d39e0a71",
      "revId": "b7be48e21ec03f8f39fdf1283da6c6728fda03a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "271c24f1_c4b49257",
        "filename": "chrome/browser/vr/databinding/one_way_binding.h",
        "patchSetId": 1
      },
      "lineNbr": 42,
      "author": {
        "id": 1000537
      },
      "writtenOn": "2017-08-24T22:02:40Z",
      "side": 1,
      "message": "I\u0027ve added a comment with some examples. The \"Get\" and \"Set\" macro parameters here are certainly odd, but they were the simplest way I could think of to quickly set up these simple lambda/closures.\n\nI\u0027ve added two other macros for binding to a field or a function that are, at least, a bit easier to read.",
      "parentUuid": "a8f1aaa6_a237da49",
      "revId": "b7be48e21ec03f8f39fdf1283da6c6728fda03a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6015fda8_0c514919",
        "filename": "chrome/browser/vr/databinding/one_way_binding.h",
        "patchSetId": 1
      },
      "lineNbr": 45,
      "author": {
        "id": 1117479
      },
      "writtenOn": "2017-08-24T17:13:28Z",
      "side": 1,
      "message": "Even if it stays a macro, it should probably be intended propertly for readability.",
      "revId": "b7be48e21ec03f8f39fdf1283da6c6728fda03a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a925f93d_e6d26c68",
        "filename": "chrome/browser/vr/databinding/one_way_binding.h",
        "patchSetId": 1
      },
      "lineNbr": 45,
      "author": {
        "id": 1117479
      },
      "writtenOn": "2017-08-24T18:27:33Z",
      "side": 1,
      "message": "...and I\u0027m wrong here, and blind.  This is right.",
      "parentUuid": "6015fda8_0c514919",
      "revId": "b7be48e21ec03f8f39fdf1283da6c6728fda03a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a520732b_66a6f800",
        "filename": "chrome/browser/vr/databinding/one_way_binding_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 30,
      "author": {
        "id": 1117479
      },
      "writtenOn": "2017-08-24T17:13:28Z",
      "side": 1,
      "message": "Should set \u0027a\u0027 to true explicitly like b.value  - one extra line of code, and safer if you ever change TestModel.",
      "revId": "b7be48e21ec03f8f39fdf1283da6c6728fda03a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d21f5aba_ac5aace9",
        "filename": "chrome/browser/vr/databinding/one_way_binding_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 30,
      "author": {
        "id": 1000537
      },
      "writtenOn": "2017-08-24T22:02:40Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a520732b_66a6f800",
      "revId": "b7be48e21ec03f8f39fdf1283da6c6728fda03a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "555a6274_85a57b78",
        "filename": "chrome/browser/vr/databinding/one_way_binding_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 34,
      "author": {
        "id": 1117479
      },
      "writtenOn": "2017-08-24T17:13:28Z",
      "side": 1,
      "message": "I think you\u0027d need a special license for this. :)",
      "range": {
        "startLine": 34,
        "startChar": 58,
        "endLine": 34,
        "endChar": 71
      },
      "revId": "b7be48e21ec03f8f39fdf1283da6c6728fda03a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fb9f21d3_d188ab12",
        "filename": "chrome/browser/vr/databinding/one_way_binding_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 34,
      "author": {
        "id": 1000537
      },
      "writtenOn": "2017-08-24T22:02:40Z",
      "side": 1,
      "message": "Yeah, this is pretty weird looking. I\u0027ve switched this to VR_BIND_FIELD in the latest patch.",
      "parentUuid": "555a6274_85a57b78",
      "range": {
        "startLine": 34,
        "startChar": 58,
        "endLine": 34,
        "endChar": 71
      },
      "revId": "b7be48e21ec03f8f39fdf1283da6c6728fda03a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f0b5657b_c3290957",
        "filename": "chrome/browser/vr/databinding/one_way_binding_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 37,
      "author": {
        "id": 1117479
      },
      "writtenOn": "2017-08-24T17:13:28Z",
      "side": 1,
      "message": "Is this just verifying your own code above, or ensuring that the binding didn\u0027t fire upon creation?",
      "revId": "b7be48e21ec03f8f39fdf1283da6c6728fda03a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "118242de_928a4691",
        "filename": "chrome/browser/vr/databinding/one_way_binding_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 37,
      "author": {
        "id": 1000537
      },
      "writtenOn": "2017-08-24T22:02:40Z",
      "side": 1,
      "message": "Yep, just making sure that binding construction doesn\u0027t get up to any funny business.",
      "parentUuid": "f0b5657b_c3290957",
      "revId": "b7be48e21ec03f8f39fdf1283da6c6728fda03a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dc1943bb_3832549f",
        "filename": "chrome/browser/vr/databinding/one_way_binding_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 51,
      "author": {
        "id": 1117479
      },
      "writtenOn": "2017-08-24T17:13:28Z",
      "side": 1,
      "message": "Now I see that you explicitly don\u0027t want to rely on the View to tell you its current value.  But why not?  When should a view be allowed to change the value it\u0027s tied to a binding?",
      "revId": "b7be48e21ec03f8f39fdf1283da6c6728fda03a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7f004df7_48718c57",
        "filename": "chrome/browser/vr/databinding/one_way_binding_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 51,
      "author": {
        "id": 1000537
      },
      "writtenOn": "2017-08-24T22:02:40Z",
      "side": 1,
      "message": "In that case, I\u0027d need another callback on the binding to pull the current value from the view. Since I\u0027d expected the types to be simple (like SkColors), I thought this would be simplest. I have a mild preference for this approach, but if you\u0027d prefer it the other way, I\u0027d can certainly change it.",
      "parentUuid": "dc1943bb_3832549f",
      "revId": "b7be48e21ec03f8f39fdf1283da6c6728fda03a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4aac5f1f_09b93803",
        "filename": "chrome/browser/vr/databinding/one_way_binding_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 55,
      "author": {
        "id": 1117479
      },
      "writtenOn": "2017-08-24T17:13:28Z",
      "side": 1,
      "message": "This should also test that b is true, as per your comment, no?",
      "revId": "b7be48e21ec03f8f39fdf1283da6c6728fda03a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d5c7af46_a7cc56b6",
        "filename": "chrome/browser/vr/databinding/one_way_binding_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 55,
      "author": {
        "id": 1000537
      },
      "writtenOn": "2017-08-24T22:02:40Z",
      "side": 1,
      "message": "Yeah, I should test that for sure. Fixed. (I think I was just checking that my one way binding wasn\u0027t accidentally two way).",
      "parentUuid": "4aac5f1f_09b93803",
      "revId": "b7be48e21ec03f8f39fdf1283da6c6728fda03a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c12b4483_1fbdae5a",
        "filename": "chrome/browser/vr/databinding/one_way_binding_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 58,
      "author": {
        "id": 1117479
      },
      "writtenOn": "2017-08-24T17:13:28Z",
      "side": 1,
      "message": "Comment here to say you\u0027re testing the weak pointer?  Or better, why not make this little check a separate test, so it\u0027s obvious and you don\u0027t have to scope the rest of the test body above?",
      "range": {
        "startLine": 58,
        "startChar": 2,
        "endLine": 58,
        "endChar": 14
      },
      "revId": "b7be48e21ec03f8f39fdf1283da6c6728fda03a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8a4d40e3_05f4fb11",
        "filename": "chrome/browser/vr/databinding/one_way_binding_unittest.cc",
        "patchSetId": 1
      },
      "lineNbr": 58,
      "author": {
        "id": 1000537
      },
      "writtenOn": "2017-08-24T22:02:40Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c12b4483_1fbdae5a",
      "range": {
        "startLine": 58,
        "startChar": 2,
        "endLine": 58,
        "endChar": 14
      },
      "revId": "b7be48e21ec03f8f39fdf1283da6c6728fda03a2",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}