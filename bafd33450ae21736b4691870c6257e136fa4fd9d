{
  "comments": [
    {
      "key": {
        "uuid": "18828a2b_271e987e",
        "filename": "net/disk_cache/memory/mem_entry_impl.cc",
        "patchSetId": 2
      },
      "lineNbr": 551,
      "author": {
        "id": 1115968
      },
      "writtenOn": "2018-02-05T20:53:28Z",
      "side": 1,
      "message": "nit:  Braces",
      "range": {
        "startLine": 551,
        "startChar": 14,
        "endLine": 551,
        "endChar": 0
      },
      "revId": "bafd33450ae21736b4691870c6257e136fa4fd9d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1186b48b_9307cf1d",
        "filename": "net/disk_cache/memory/mem_entry_impl.cc",
        "patchSetId": 2
      },
      "lineNbr": 551,
      "author": {
        "id": 1226494
      },
      "writtenOn": "2018-02-05T21:39:38Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "18828a2b_271e987e",
      "range": {
        "startLine": 551,
        "startChar": 14,
        "endLine": 551,
        "endChar": 0
      },
      "revId": "bafd33450ae21736b4691870c6257e136fa4fd9d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7dd7144d_a37f4e22",
        "filename": "net/disk_cache/memory/mem_entry_impl.cc",
        "patchSetId": 2
      },
      "lineNbr": 597,
      "author": {
        "id": 1115968
      },
      "writtenOn": "2018-02-05T20:53:28Z",
      "side": 1,
      "message": "Just out of curiousity...Could you OOM the disk cache by using range requests for the bytes: \n kMaxSparseEntrySize-1, 2*kMaxSparseEntrySize-1, 3*kMaxSparseEntrySize-1, etc, resulting in consuming kMaxSparseEntrySize * \u003cwhatever the max in-memory cache size\u003e bytes of RAM for a larger file?  Not sure how well we\u0027d handle a comparable on-disk cached file, either, for that matter.",
      "range": {
        "startLine": 597,
        "startChar": 34,
        "endLine": 597,
        "endChar": 43
      },
      "revId": "bafd33450ae21736b4691870c6257e136fa4fd9d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b48ceed1_3445373d",
        "filename": "net/disk_cache/memory/mem_entry_impl.cc",
        "patchSetId": 2
      },
      "lineNbr": 597,
      "author": {
        "id": 1226494
      },
      "writtenOn": "2018-02-05T21:39:38Z",
      "side": 1,
      "message": "It should be fine since each child entry would count as full 4K for its accounting.\n\nFor on-disk ones... I am not sure of blockfile, it may indeed under-count disk usage \nfor sparse entries somewhat. Simple\u0027s representation is very different so it\u0027s going to be pretty much byte-perfect for sparse files (though it has other limitations, like total \nlack of flexibility on what subranges it can drop), but may underestimate external fragmentation for cache entries in general.",
      "parentUuid": "7dd7144d_a37f4e22",
      "range": {
        "startLine": 597,
        "startChar": 34,
        "endLine": 597,
        "endChar": 43
      },
      "revId": "bafd33450ae21736b4691870c6257e136fa4fd9d",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}