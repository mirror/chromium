{
  "comments": [
    {
      "key": {
        "uuid": "006f1235_1252e16c",
        "filename": "content/browser/webauth/cbor/cbor_reader.cc",
        "patchSetId": 19
      },
      "lineNbr": 45,
      "author": {
        "id": 1003152
      },
      "writtenOn": "2017-12-20T21:07:58Z",
      "side": 1,
      "message": "nit: This seems off.",
      "range": {
        "startLine": 45,
        "startChar": 55,
        "endLine": 45,
        "endChar": 65
      },
      "revId": "3d579dfb80a61f1d97d28a782f55c95a899642c4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "afa9c366_627e87ad",
        "filename": "content/browser/webauth/cbor/cbor_reader.cc",
        "patchSetId": 19
      },
      "lineNbr": 45,
      "author": {
        "id": 1247602
      },
      "writtenOn": "2017-12-21T02:53:17Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "006f1235_1252e16c",
      "range": {
        "startLine": 45,
        "startChar": 55,
        "endLine": 45,
        "endChar": 65
      },
      "revId": "3d579dfb80a61f1d97d28a782f55c95a899642c4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "df3830f9_59cc9e76",
        "filename": "content/browser/webauth/cbor/cbor_reader.cc",
        "patchSetId": 19
      },
      "lineNbr": 85,
      "author": {
        "id": 1003152
      },
      "writtenOn": "2017-12-20T21:07:58Z",
      "side": 1,
      "message": "Note that this will prevent us from ever reading doubles (i.e. 64-bit floating point) as well. I wonder if we should stick to uint64_t here?",
      "revId": "3d579dfb80a61f1d97d28a782f55c95a899642c4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cd42b689_001c1b35",
        "filename": "content/browser/webauth/cbor/cbor_reader.cc",
        "patchSetId": 19
      },
      "lineNbr": 85,
      "author": {
        "id": 1001949
      },
      "writtenOn": "2017-12-20T21:55:20Z",
      "side": 1,
      "message": "I also mildly prefer using a uint64_t for the \"length\" and returning OUT_OF_RANGE_INTEGER_VALUE in the UNSIGNED and NEGATIVE cases for values \u003e\u003d2^63. I wrote in https://canary-chromium-review.googlesource.com/c/chromium/src/+/777807/14/content/browser/webauth/cbor/cbor_reader.cc#84 that I didn\u0027t mind waiting until we actually need floats to fix that, but Balazs stumbling over it makes me think that maybe it\u0027ll be more of an impediment to reading the code than it\u0027s worth.",
      "parentUuid": "df3830f9_59cc9e76",
      "revId": "3d579dfb80a61f1d97d28a782f55c95a899642c4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "235b715f_22c68fa2",
        "filename": "content/browser/webauth/cbor/cbor_reader.cc",
        "patchSetId": 19
      },
      "lineNbr": 85,
      "author": {
        "id": 1247602
      },
      "writtenOn": "2017-12-21T02:53:17Z",
      "side": 1,
      "message": "Changed |value| to uint64_t and changed ReadVariadicLengthInteger() to invoke CheckInInt64Range() for only integer types.",
      "parentUuid": "cd42b689_001c1b35",
      "revId": "3d579dfb80a61f1d97d28a782f55c95a899642c4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "eab4fa9a_de7727db",
        "filename": "content/browser/webauth/cbor/cbor_reader.cc",
        "patchSetId": 19
      },
      "lineNbr": 93,
      "author": {
        "id": 1003152
      },
      "writtenOn": "2017-12-20T21:07:58Z",
      "side": 1,
      "message": "nit: Why do we have CHECK here but not above?",
      "revId": "3d579dfb80a61f1d97d28a782f55c95a899642c4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b8b2f49b_c8f9da54",
        "filename": "content/browser/webauth/cbor/cbor_reader.cc",
        "patchSetId": 19
      },
      "lineNbr": 93,
      "author": {
        "id": 1247602
      },
      "writtenOn": "2017-12-21T02:53:17Z",
      "side": 1,
      "message": "Deleted the CHECK since |value| is not uint64_t.",
      "parentUuid": "eab4fa9a_de7727db",
      "revId": "3d579dfb80a61f1d97d28a782f55c95a899642c4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "61c9965a_8b4fa5f2",
        "filename": "content/browser/webauth/cbor/cbor_reader.cc",
        "patchSetId": 19
      },
      "lineNbr": 94,
      "author": {
        "id": 1003152
      },
      "writtenOn": "2017-12-20T21:07:58Z",
      "side": 1,
      "message": "While I understand that the standard requires two\u0027s complement representation for signed integers, which makes this safe, but could we instead rely on safe_math.h to do this for us?",
      "revId": "3d579dfb80a61f1d97d28a782f55c95a899642c4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "45096329_39b32eee",
        "filename": "content/browser/webauth/cbor/cbor_reader.cc",
        "patchSetId": 19
      },
      "lineNbr": 94,
      "author": {
        "id": 1001949
      },
      "writtenOn": "2017-12-20T21:55:20Z",
      "side": 1,
      "message": "The standard only has a 2\u0027s-complement requirement for the intN_t types, although I believe Chrome insists on 2\u0027s-complement for all ints.\n\nI have no objections to spelling this `(-base::CheckedNumeric\u003cint64_t\u003e(length) - 1).ValueOrDie()`.",
      "parentUuid": "61c9965a_8b4fa5f2",
      "revId": "3d579dfb80a61f1d97d28a782f55c95a899642c4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "64ef85aa_c2b82fb3",
        "filename": "content/browser/webauth/cbor/cbor_reader.cc",
        "patchSetId": 19
      },
      "lineNbr": 94,
      "author": {
        "id": 1247602
      },
      "writtenOn": "2017-12-21T02:53:17Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "45096329_39b32eee",
      "revId": "3d579dfb80a61f1d97d28a782f55c95a899642c4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "412b6156_0fd63d64",
        "filename": "content/browser/webauth/cbor/cbor_reader.h",
        "patchSetId": 19
      },
      "lineNbr": 86,
      "author": {
        "id": 1003152
      },
      "writtenOn": "2017-12-20T21:07:58Z",
      "side": 1,
      "message": "nit: This reads a bit funny because of int64_t now. How about naming this:\n\nReadVariadicLengthInteger(..., int64_t* value), or\nReadLength(..., int64_t* length);\n\nWhichever you choose, please make sure to be consistent with formal parameter and actual argument names (i.e. value/length consistently).",
      "revId": "3d579dfb80a61f1d97d28a782f55c95a899642c4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5b695bde_8dd9f055",
        "filename": "content/browser/webauth/cbor/cbor_reader.h",
        "patchSetId": 19
      },
      "lineNbr": 86,
      "author": {
        "id": 1247602
      },
      "writtenOn": "2017-12-21T02:53:17Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "412b6156_0fd63d64",
      "revId": "3d579dfb80a61f1d97d28a782f55c95a899642c4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b4b361c5_0f098dc6",
        "filename": "content/browser/webauth/cbor/cbor_reader_unittest.cc",
        "patchSetId": 19
      },
      "lineNbr": 29,
      "author": {
        "id": 1003152
      },
      "writtenOn": "2017-12-20T21:07:58Z",
      "side": 1,
      "message": "We should have a test for the maximum possible value here as well.",
      "revId": "3d579dfb80a61f1d97d28a782f55c95a899642c4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7080b601_5223f6a4",
        "filename": "content/browser/webauth/cbor/cbor_reader_unittest.cc",
        "patchSetId": 19
      },
      "lineNbr": 29,
      "author": {
        "id": 1247602
      },
      "writtenOn": "2017-12-21T02:53:17Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b4b361c5_0f098dc6",
      "revId": "3d579dfb80a61f1d97d28a782f55c95a899642c4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d9944b0b_52f4ee13",
        "filename": "content/browser/webauth/cbor/cbor_reader_unittest.cc",
        "patchSetId": 19
      },
      "lineNbr": 33,
      "author": {
        "id": 1003152
      },
      "writtenOn": "2017-12-20T21:07:58Z",
      "side": 1,
      "message": "super nit: space after colon",
      "range": {
        "startLine": 33,
        "startChar": 53,
        "endLine": 33,
        "endChar": 54
      },
      "revId": "3d579dfb80a61f1d97d28a782f55c95a899642c4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9dd7ea09_ccdac4ee",
        "filename": "content/browser/webauth/cbor/cbor_reader_unittest.cc",
        "patchSetId": 19
      },
      "lineNbr": 33,
      "author": {
        "id": 1247602
      },
      "writtenOn": "2017-12-21T02:53:17Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d9944b0b_52f4ee13",
      "range": {
        "startLine": 33,
        "startChar": 53,
        "endLine": 33,
        "endChar": 54
      },
      "revId": "3d579dfb80a61f1d97d28a782f55c95a899642c4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b9e37ca9_c11e604d",
        "filename": "content/browser/webauth/cbor/cbor_reader_unittest.cc",
        "patchSetId": 19
      },
      "lineNbr": 107,
      "author": {
        "id": 1003152
      },
      "writtenOn": "2017-12-20T21:07:58Z",
      "side": 1,
      "message": "nit: Why not 1 less here? That should still be representable on 4 bytes.",
      "revId": "3d579dfb80a61f1d97d28a782f55c95a899642c4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3e9336c4_0c6ee20c",
        "filename": "content/browser/webauth/cbor/cbor_reader_unittest.cc",
        "patchSetId": 19
      },
      "lineNbr": 107,
      "author": {
        "id": 1247602
      },
      "writtenOn": "2017-12-21T02:53:17Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b9e37ca9_c11e604d",
      "revId": "3d579dfb80a61f1d97d28a782f55c95a899642c4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a17c28db_be703489",
        "filename": "content/browser/webauth/cbor/cbor_reader_unittest.cc",
        "patchSetId": 19
      },
      "lineNbr": 108,
      "author": {
        "id": 1003152
      },
      "writtenOn": "2017-12-20T21:07:58Z",
      "side": 1,
      "message": "Please add test cases for 64 bit integers too, at least the two extremes of the (supported) range that is represented on 64 bit.\n\nAlso, consider using numeric_limits to avoid typos in these numbers, i.e., so that a reader of the code can be immediately sure that we are using the extreme values here.",
      "revId": "3d579dfb80a61f1d97d28a782f55c95a899642c4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "76e9aece_28dd81fc",
        "filename": "content/browser/webauth/cbor/cbor_reader_unittest.cc",
        "patchSetId": 19
      },
      "lineNbr": 108,
      "author": {
        "id": 1247602
      },
      "writtenOn": "2017-12-21T02:53:17Z",
      "side": 1,
      "message": "Used numeric_limits in all tests for unsigned values. Since boundary values of CBOR negative integers does not match with INTX_MIN, I only used std::numeric_limits to test INT64_MIN.",
      "parentUuid": "a17c28db_be703489",
      "revId": "3d579dfb80a61f1d97d28a782f55c95a899642c4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "be311f93_0c3368a8",
        "filename": "content/browser/webauth/cbor/cbor_reader_unittest.cc",
        "patchSetId": 19
      },
      "lineNbr": 108,
      "author": {
        "id": 1003152
      },
      "writtenOn": "2017-12-21T09:59:14Z",
      "side": 1,
      "message": "Yep, sounds good.",
      "parentUuid": "76e9aece_28dd81fc",
      "revId": "3d579dfb80a61f1d97d28a782f55c95a899642c4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "47649780_a0a2e256",
        "filename": "content/browser/webauth/cbor/cbor_reader_unittest.cc",
        "patchSetId": 19
      },
      "lineNbr": 714,
      "author": {
        "id": 1001949
      },
      "writtenOn": "2017-12-20T21:55:20Z",
      "side": 1,
      "message": "Leave the const auto\u0026 everywhere.",
      "range": {
        "startLine": 714,
        "startChar": 7,
        "endLine": 714,
        "endChar": 11
      },
      "revId": "3d579dfb80a61f1d97d28a782f55c95a899642c4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bc78802f_f36d89f9",
        "filename": "content/browser/webauth/cbor/cbor_reader_unittest.cc",
        "patchSetId": 19
      },
      "lineNbr": 714,
      "author": {
        "id": 1247602
      },
      "writtenOn": "2017-12-21T02:53:17Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "47649780_a0a2e256",
      "range": {
        "startLine": 714,
        "startChar": 7,
        "endLine": 714,
        "endChar": 11
      },
      "revId": "3d579dfb80a61f1d97d28a782f55c95a899642c4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "23f86e92_67572f82",
        "filename": "content/browser/webauth/cbor/cbor_values.h",
        "patchSetId": 19
      },
      "lineNbr": 121,
      "author": {
        "id": 1003152
      },
      "writtenOn": "2017-12-20T21:07:58Z",
      "side": 1,
      "message": "nit: If there is only one getter anyway, does the user of CBORValue really care if it\u0027s signed or unsigned? Alternatively, can we add is_integer()?",
      "revId": "3d579dfb80a61f1d97d28a782f55c95a899642c4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "322f273b_30a05633",
        "filename": "content/browser/webauth/cbor/cbor_values.h",
        "patchSetId": 19
      },
      "lineNbr": 121,
      "author": {
        "id": 1001949
      },
      "writtenOn": "2017-12-20T21:55:20Z",
      "side": 1,
      "message": "is_integer() seems fine to me. Callers probably don\u0027t care about the major type, and if they do, they can check the range of the value returned from GetInteger().",
      "parentUuid": "23f86e92_67572f82",
      "revId": "3d579dfb80a61f1d97d28a782f55c95a899642c4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ab179d26_54102be7",
        "filename": "content/browser/webauth/cbor/cbor_values.h",
        "patchSetId": 19
      },
      "lineNbr": 121,
      "author": {
        "id": 1247602
      },
      "writtenOn": "2017-12-21T02:53:17Z",
      "side": 1,
      "message": "As current primary caller of CBORReader, I vouch for including in_unsigned()/is_negative(). :) In protocols that use CBOR encoding format (CTAP , for example), some parameters/response encoded in CBOR are Unsigned integers, and I think it would cleaner to check the type of CBOR value using is_unsigned()/is_negative() than to check the range of returned cbor values.",
      "parentUuid": "322f273b_30a05633",
      "revId": "3d579dfb80a61f1d97d28a782f55c95a899642c4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2fbd8318_14a962c0",
        "filename": "content/browser/webauth/cbor/cbor_values.h",
        "patchSetId": 19
      },
      "lineNbr": 121,
      "author": {
        "id": 1003152
      },
      "writtenOn": "2017-12-21T09:59:14Z",
      "side": 1,
      "message": "SGTM!\n\nIn that case, I think it\u0027d make sense to have is_XYZs with matching GetXYZs, so let\u0027s have GetInteger, GetUnsigned, GetNegative, and is_integer, is_unsigned, is_negative.\n\nMy feeling is that the cleanest would be to make GetUnsigned CHECK that value is \u003e\u003d0, make GetNegative CHECK that value is \u003c0, and make GetInteger don\u0027t care?\n\nOnce we have these specialized getter, maybe we don\u0027t need the CHECK anymore in CBORWriter?\n\nWhat do you guys think?",
      "parentUuid": "ab179d26_54102be7",
      "revId": "3d579dfb80a61f1d97d28a782f55c95a899642c4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e4876823_ba67d060",
        "filename": "content/browser/webauth/cbor/cbor_values_unittest.cc",
        "patchSetId": 19
      },
      "lineNbr": 40,
      "author": {
        "id": 1003152
      },
      "writtenOn": "2017-12-20T21:07:58Z",
      "side": 1,
      "message": "nit: Use -1 at least in one test to test boundary condition.",
      "range": {
        "startLine": 40,
        "startChar": 19,
        "endLine": 40,
        "endChar": 22
      },
      "revId": "3d579dfb80a61f1d97d28a782f55c95a899642c4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ff9d5f3b_1c5fd5b3",
        "filename": "content/browser/webauth/cbor/cbor_values_unittest.cc",
        "patchSetId": 19
      },
      "lineNbr": 40,
      "author": {
        "id": 1247602
      },
      "writtenOn": "2017-12-21T02:53:17Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e4876823_ba67d060",
      "range": {
        "startLine": 40,
        "startChar": 19,
        "endLine": 40,
        "endChar": 22
      },
      "revId": "3d579dfb80a61f1d97d28a782f55c95a899642c4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c965a47c_ac90e67b",
        "filename": "content/browser/webauth/cbor/cbor_writer.cc",
        "patchSetId": 19
      },
      "lineNbr": 50,
      "author": {
        "id": 1003152
      },
      "writtenOn": "2017-12-20T21:07:58Z",
      "side": 1,
      "message": "I\u0027d argue that this CHECK should be in CBORValue::GetInteger() itself, so that all users of CBORValue can benefit.\n\nWe should also add a comment in cbor_values.h indicating this invariant. Same for unsigned value.",
      "revId": "3d579dfb80a61f1d97d28a782f55c95a899642c4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5d5b857d_b8f04f39",
        "filename": "content/browser/webauth/cbor/cbor_writer.cc",
        "patchSetId": 19
      },
      "lineNbr": 50,
      "author": {
        "id": 1247602
      },
      "writtenOn": "2017-12-21T02:53:17Z",
      "side": 1,
      "message": "Just to confirm that I understand correctly, by invariant do you mean \nCBOREncoder will fatally crash when it encounters Unsigned Type CBORValue with negative value and vice versa? \nPlease let me know if I\u0027m misunderstanding you comment!",
      "parentUuid": "c965a47c_ac90e67b",
      "revId": "3d579dfb80a61f1d97d28a782f55c95a899642c4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c43f8fbf_f4f4f48d",
        "filename": "content/browser/webauth/cbor/cbor_writer.cc",
        "patchSetId": 19
      },
      "lineNbr": 50,
      "author": {
        "id": 1003152
      },
      "writtenOn": "2017-12-21T09:59:14Z",
      "side": 1,
      "message": "Please see my comment above.",
      "parentUuid": "5d5b857d_b8f04f39",
      "revId": "3d579dfb80a61f1d97d28a782f55c95a899642c4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ccce4b54_2c058ea7",
        "filename": "content/browser/webauth/cbor/cbor_writer.cc",
        "patchSetId": 19
      },
      "lineNbr": 52,
      "author": {
        "id": 1003152
      },
      "writtenOn": "2017-12-20T21:07:58Z",
      "side": 1,
      "message": "nit: With the CHECK above, the value can never be out of range. I\u0027m not sure if we really want to keep this?",
      "revId": "3d579dfb80a61f1d97d28a782f55c95a899642c4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b38c2263_b56811b6",
        "filename": "content/browser/webauth/cbor/cbor_writer.cc",
        "patchSetId": 19
      },
      "lineNbr": 52,
      "author": {
        "id": 1001949
      },
      "writtenOn": "2017-12-20T21:55:20Z",
      "side": 1,
      "message": "It doesn\u0027t seem to hurt to have extra checked_cast\u003c\u003es, especially if the CHECK moves from the previous line to another file.",
      "parentUuid": "ccce4b54_2c058ea7",
      "revId": "3d579dfb80a61f1d97d28a782f55c95a899642c4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b42708e6_ec790e6b",
        "filename": "content/browser/webauth/cbor/cbor_writer.cc",
        "patchSetId": 19
      },
      "lineNbr": 52,
      "author": {
        "id": 1003152
      },
      "writtenOn": "2017-12-21T09:59:14Z",
      "side": 1,
      "message": "And how about calling not GetInteger, but a GetNegative here? Would you be more comfortable omitting the checked_cast here in that case?",
      "parentUuid": "b38c2263_b56811b6",
      "revId": "3d579dfb80a61f1d97d28a782f55c95a899642c4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "30001034_2ac83d6d",
        "filename": "content/browser/webauth/cbor/cbor_writer_unittest.cc",
        "patchSetId": 19
      },
      "lineNbr": 35,
      "author": {
        "id": 1003152
      },
      "writtenOn": "2017-12-20T21:07:58Z",
      "side": 1,
      "message": "Please add test this number +1, and for numeric_limits\u003cint64_t\u003e::max().",
      "revId": "3d579dfb80a61f1d97d28a782f55c95a899642c4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4ae34965_f0d7202d",
        "filename": "content/browser/webauth/cbor/cbor_writer_unittest.cc",
        "patchSetId": 19
      },
      "lineNbr": 35,
      "author": {
        "id": 1247602
      },
      "writtenOn": "2017-12-21T02:53:17Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "30001034_2ac83d6d",
      "revId": "3d579dfb80a61f1d97d28a782f55c95a899642c4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e2e9df69_9bad95a9",
        "filename": "content/browser/webauth/cbor/cbor_writer_unittest.cc",
        "patchSetId": 19
      },
      "lineNbr": 51,
      "author": {
        "id": 1003152
      },
      "writtenOn": "2017-12-20T21:07:58Z",
      "side": 1,
      "message": "nit: No need to name struct.",
      "range": {
        "startLine": 51,
        "startChar": 15,
        "endLine": 51,
        "endChar": 34
      },
      "revId": "3d579dfb80a61f1d97d28a782f55c95a899642c4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "15037bcd_2d6f3f09",
        "filename": "content/browser/webauth/cbor/cbor_writer_unittest.cc",
        "patchSetId": 19
      },
      "lineNbr": 51,
      "author": {
        "id": 1247602
      },
      "writtenOn": "2017-12-21T02:53:17Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e2e9df69_9bad95a9",
      "range": {
        "startLine": 51,
        "startChar": 15,
        "endLine": 51,
        "endChar": 34
      },
      "revId": "3d579dfb80a61f1d97d28a782f55c95a899642c4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "95e6f0e9_340241fb",
        "filename": "content/browser/webauth/cbor/cbor_writer_unittest.cc",
        "patchSetId": 19
      },
      "lineNbr": 210,
      "author": {
        "id": 1003152
      },
      "writtenOn": "2017-12-20T21:07:58Z",
      "side": 1,
      "message": "nit: Please add 63 bit keys too, they are cool! :)",
      "revId": "3d579dfb80a61f1d97d28a782f55c95a899642c4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "323ddb8b_f9fce508",
        "filename": "content/browser/webauth/cbor/cbor_writer_unittest.cc",
        "patchSetId": 19
      },
      "lineNbr": 210,
      "author": {
        "id": 1247602
      },
      "writtenOn": "2017-12-21T02:53:17Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "95e6f0e9_340241fb",
      "revId": "3d579dfb80a61f1d97d28a782f55c95a899642c4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f2cc9d91_f5b0eaaf",
        "filename": "content/browser/webauth/cbor/cbor_writer_unittest.cc",
        "patchSetId": 19
      },
      "lineNbr": 210,
      "author": {
        "id": 1003152
      },
      "writtenOn": "2017-12-21T09:59:14Z",
      "side": 1,
      "message": "Really cool, thank you! :-)",
      "parentUuid": "323ddb8b_f9fce508",
      "revId": "3d579dfb80a61f1d97d28a782f55c95a899642c4",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}