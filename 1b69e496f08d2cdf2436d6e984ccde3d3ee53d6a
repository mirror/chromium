{
  "comments": [
    {
      "key": {
        "uuid": "f3ba9137_d79b4200",
        "filename": "third_party/WebKit/LayoutTests/external/wpt/encrypted-media/encrypted-media-default-feature-policy.https.sub.html",
        "patchSetId": 6
      },
      "lineNbr": 1,
      "author": {
        "id": 1003189
      },
      "writtenOn": "2017-08-08T00:05:50Z",
      "side": 1,
      "message": "Just to note that the tests in the encrypted-media/ directory are not currently being run, as they require https. I had a pull request to rename them, but it\u0027s old. It\u0027s on my TODO list to redo the pull request, and then re-enable these tests in Chromium (http://crbug.com/664193).",
      "range": {
        "startLine": 1,
        "startChar": 0,
        "endLine": 1,
        "endChar": 15
      },
      "revId": "1b69e496f08d2cdf2436d6e984ccde3d3ee53d6a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0c0da5e7_ace06b9b",
        "filename": "third_party/WebKit/LayoutTests/external/wpt/encrypted-media/encrypted-media-default-feature-policy.https.sub.html",
        "patchSetId": 6
      },
      "lineNbr": 1,
      "author": {
        "id": 1000602
      },
      "writtenOn": "2017-09-04T07:20:15Z",
      "side": 1,
      "message": "Ah thanks for pointing this out! I adjusted NeverFixTests so that this one test does get run (because I would really like the test coverage :)",
      "parentUuid": "f3ba9137_d79b4200",
      "range": {
        "startLine": 1,
        "startChar": 0,
        "endLine": 1,
        "endChar": 15
      },
      "revId": "1b69e496f08d2cdf2436d6e984ccde3d3ee53d6a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c68fd7c1_4d3f7126",
        "filename": "third_party/WebKit/LayoutTests/external/wpt/encrypted-media/encrypted-media-default-feature-policy.https.sub.html",
        "patchSetId": 6
      },
      "lineNbr": 16,
      "author": {
        "id": 1003189
      },
      "writtenOn": "2017-08-08T00:05:50Z",
      "side": 1,
      "message": "webm is only supported by Chrome. Better choice is to use getPossibleAudioCapabilities() found in encrypted-media/util/utils.js (if possible).",
      "range": {
        "startLine": 16,
        "startChar": 47,
        "endLine": 16,
        "endChar": 72
      },
      "revId": "1b69e496f08d2cdf2436d6e984ccde3d3ee53d6a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "03fd7d70_b254c87a",
        "filename": "third_party/WebKit/LayoutTests/external/wpt/encrypted-media/encrypted-media-default-feature-policy.https.sub.html",
        "patchSetId": 6
      },
      "lineNbr": 16,
      "author": {
        "id": 1000602
      },
      "writtenOn": "2017-09-04T07:20:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c68fd7c1_4d3f7126",
      "range": {
        "startLine": 16,
        "startChar": 47,
        "endLine": 16,
        "endChar": 72
      },
      "revId": "1b69e496f08d2cdf2436d6e984ccde3d3ee53d6a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a68ec170_07de76ce",
        "filename": "third_party/WebKit/LayoutTests/external/wpt/feature-policy/resources/featurepolicy.js",
        "patchSetId": 6
      },
      "lineNbr": 68,
      "author": {
        "id": 1221384
      },
      "writtenOn": "2017-08-03T15:39:16Z",
      "side": 1,
      "message": "This is even better! I wonder if we should replace all current usage of test_feature_availability by this even.\n\nThanks for writing this up :)",
      "range": {
        "startLine": 68,
        "startChar": 0,
        "endLine": 68,
        "endChar": 60
      },
      "revId": "1b69e496f08d2cdf2436d6e984ccde3d3ee53d6a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f450743f_30777daf",
        "filename": "third_party/WebKit/LayoutTests/external/wpt/feature-policy/resources/featurepolicy.js",
        "patchSetId": 6
      },
      "lineNbr": 68,
      "author": {
        "id": 1000602
      },
      "writtenOn": "2017-09-04T07:20:15Z",
      "side": 1,
      "message": "Great :)",
      "parentUuid": "a68ec170_07de76ce",
      "range": {
        "startLine": 68,
        "startChar": 0,
        "endLine": 68,
        "endChar": 60
      },
      "revId": "1b69e496f08d2cdf2436d6e984ccde3d3ee53d6a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "887d93c7_b8afd81c",
        "filename": "third_party/WebKit/LayoutTests/external/wpt/feature-policy/resources/featurepolicy.js",
        "patchSetId": 6
      },
      "lineNbr": 70,
      "author": {
        "id": 1137849
      },
      "writtenOn": "2017-08-15T02:34:17Z",
      "side": 1,
      "message": "Curious -- is there a reason for the nested function statement here, rather than a function assignment or an arrow-function?",
      "range": {
        "startLine": 70,
        "startChar": 2,
        "endLine": 70,
        "endChar": 10
      },
      "revId": "1b69e496f08d2cdf2436d6e984ccde3d3ee53d6a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1f3bc41a_0e96e62a",
        "filename": "third_party/WebKit/LayoutTests/external/wpt/feature-policy/resources/featurepolicy.js",
        "patchSetId": 6
      },
      "lineNbr": 70,
      "author": {
        "id": 1000602
      },
      "writtenOn": "2017-09-04T07:20:15Z",
      "side": 1,
      "message": "No reason, I changed it (my JS knowledge isn\u0027t great - I\u0027m actually not sure what is more appropriate :P)",
      "parentUuid": "887d93c7_b8afd81c",
      "range": {
        "startLine": 70,
        "startChar": 2,
        "endLine": 70,
        "endChar": 10
      },
      "revId": "1b69e496f08d2cdf2436d6e984ccde3d3ee53d6a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "608fa867_cfa7d4e5",
        "filename": "third_party/WebKit/Source/modules/encryptedmedia/NavigatorRequestMediaKeySystemAccess.cpp",
        "patchSetId": 6
      },
      "lineNbr": 283,
      "author": {
        "id": 1003189
      },
      "writtenOn": "2017-08-08T00:05:50Z",
      "side": 1,
      "message": "The EME spec (http://w3c.github.io/encrypted-media/#exceptions) doesn\u0027t list SecurityError as a possible error, so I would suggest kNotSupportedError. However, it\u0027s possible policy checking requires SecurityError, in which case the EME spec needs to be updated.",
      "range": {
        "startLine": 283,
        "startChar": 14,
        "endLine": 283,
        "endChar": 28
      },
      "revId": "1b69e496f08d2cdf2436d6e984ccde3d3ee53d6a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e097dc56_84bf8bba",
        "filename": "third_party/WebKit/Source/modules/encryptedmedia/NavigatorRequestMediaKeySystemAccess.cpp",
        "patchSetId": 6
      },
      "lineNbr": 283,
      "author": {
        "id": 1000158
      },
      "writtenOn": "2017-08-08T22:55:05Z",
      "side": 1,
      "message": "Please use whatever value is \"correct\" per the Feature Policy spec and consistent with other APIs it controls.\n\nIf this one is correct, we should updated the list in the spec pull request.",
      "parentUuid": "608fa867_cfa7d4e5",
      "range": {
        "startLine": 283,
        "startChar": 14,
        "endLine": 283,
        "endChar": 28
      },
      "revId": "1b69e496f08d2cdf2436d6e984ccde3d3ee53d6a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fdf09a62_44f75525",
        "filename": "third_party/WebKit/Source/modules/encryptedmedia/NavigatorRequestMediaKeySystemAccess.cpp",
        "patchSetId": 6
      },
      "lineNbr": 283,
      "author": {
        "id": 1000602
      },
      "writtenOn": "2017-09-04T07:20:15Z",
      "side": 1,
      "message": "Unfortunately all the specs are inconsistent in what they return. SecurityError seems to be the most sensible/consistent value based on specs I have seen but if you folks think NotSupportedError is better from a spec standpoint, happy to change it to that.",
      "parentUuid": "e097dc56_84bf8bba",
      "range": {
        "startLine": 283,
        "startChar": 14,
        "endLine": 283,
        "endChar": 28
      },
      "revId": "1b69e496f08d2cdf2436d6e984ccde3d3ee53d6a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "810b7318_3563a56c",
        "filename": "third_party/WebKit/Source/modules/encryptedmedia/NavigatorRequestMediaKeySystemAccess.cpp",
        "patchSetId": 6
      },
      "lineNbr": 283,
      "author": {
        "id": 1137849
      },
      "writtenOn": "2017-09-05T04:22:25Z",
      "side": 1,
      "message": "I don\u0027t think that Feature Policy should try to prescribe the failure modes for other APIs, but I\u0027d offer guidance that finding an existing failure pattern that developers are already guarding against is likely the right thing to do.\n\nIdeally, I think, we\u0027d have a response that corresponds to \"the browser is capable, but the user (or in this case the embedder) said \u0027no\u0027\" -- perhaps mimicking a user-permission-rejected response. If that\u0027s not available in the EME spec, then perhaps a NotSupportedError is best.",
      "parentUuid": "fdf09a62_44f75525",
      "range": {
        "startLine": 283,
        "startChar": 14,
        "endLine": 283,
        "endChar": 28
      },
      "revId": "1b69e496f08d2cdf2436d6e984ccde3d3ee53d6a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c7be5a6e_7260650e",
        "filename": "third_party/WebKit/Source/modules/encryptedmedia/NavigatorRequestMediaKeySystemAccess.cpp",
        "patchSetId": 6
      },
      "lineNbr": 283,
      "author": {
        "id": 1000602
      },
      "writtenOn": "2017-09-05T05:30:37Z",
      "side": 1,
      "message": "I\u0027ve changed it to NotSupportedError as suggested.",
      "parentUuid": "810b7318_3563a56c",
      "range": {
        "startLine": 283,
        "startChar": 14,
        "endLine": 283,
        "endChar": 28
      },
      "revId": "1b69e496f08d2cdf2436d6e984ccde3d3ee53d6a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "50a93d1d_1706b2ff",
        "filename": "third_party/WebKit/Source/platform/RuntimeEnabledFeatures.json5",
        "patchSetId": 6
      },
      "lineNbr": 437,
      "author": {
        "id": 1221384
      },
      "writtenOn": "2017-08-30T20:10:27Z",
      "side": 1,
      "message": "Please forgive my naive question, but why do we need this flag?\n\nCan we use FeaturePolicyExperimentalFeatures and FeaturePolicy (stable)?",
      "revId": "1b69e496f08d2cdf2436d6e984ccde3d3ee53d6a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9632c70e_fa98265c",
        "filename": "third_party/WebKit/Source/platform/RuntimeEnabledFeatures.json5",
        "patchSetId": 6
      },
      "lineNbr": 437,
      "author": {
        "id": 1000602
      },
      "writtenOn": "2017-09-04T07:20:15Z",
      "side": 1,
      "message": "lunalu: Good question. I think I was thinking that it would be useful to have a separate flag for when we want to enable the feature (separately from all the other experimental features)? Though I\u0027m actually not as familiar with flipping feature flags in blink and any better suggestions are welcome :)",
      "parentUuid": "50a93d1d_1706b2ff",
      "revId": "1b69e496f08d2cdf2436d6e984ccde3d3ee53d6a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a00095b3_45f66ef5",
        "filename": "third_party/WebKit/Source/platform/RuntimeEnabledFeatures.json5",
        "patchSetId": 6
      },
      "lineNbr": 437,
      "author": {
        "id": 1137849
      },
      "writtenOn": "2017-09-05T04:22:25Z",
      "side": 1,
      "message": "The pattern that we\u0027ve been trying to use is that FeaturePolicyExperimentalFeatures is for all of the features which we pretty sure that we want to put under policy control, but aren\u0027t ready yet -- either the implementation isn\u0027t complete, or there\u0027s no consensus on what disabling actually does. Then, when it\u0027s ready to ship, it can just be part of the \u0027FeaturePolicy\u0027 flag.\n\nIf you think there\u0027s a good reason for turning this one on via the command line, without enabling any other experiments, then this would make sense (although it should probably depend on \u0027FeaturePolicy\u0027) -- otherwise, putting it under control of the ExperimentalFeatures flag should be sufficient.",
      "parentUuid": "9632c70e_fa98265c",
      "revId": "1b69e496f08d2cdf2436d6e984ccde3d3ee53d6a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4d148eca_aab787fb",
        "filename": "third_party/WebKit/Source/platform/RuntimeEnabledFeatures.json5",
        "patchSetId": 6
      },
      "lineNbr": 437,
      "author": {
        "id": 1000602
      },
      "writtenOn": "2017-09-05T05:30:37Z",
      "side": 1,
      "message": "That\u0027s fine with me. I\u0027ve changed FeaturePolicyExperimentalFeatures to \"experimental\" status so that we don\u0027t need to add virtual test suites. Is that ok?",
      "parentUuid": "a00095b3_45f66ef5",
      "revId": "1b69e496f08d2cdf2436d6e984ccde3d3ee53d6a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}