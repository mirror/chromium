{
  "comments": [
    {
      "key": {
        "uuid": "04a6e238_b52d098a",
        "filename": "ash/cursor/cursor_view.cc",
        "patchSetId": 5
      },
      "lineNbr": 80,
      "author": {
        "id": 1000246
      },
      "writtenOn": "2018-01-09T20:23:50Z",
      "side": 1,
      "message": "Do you need to add a new thread?",
      "revId": "49adb4c0874dc39609b4f5fbbfd37f7ba2047706",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dda2f039_e9d5523a",
        "filename": "ash/cursor/cursor_view.cc",
        "patchSetId": 5
      },
      "lineNbr": 80,
      "author": {
        "id": 1000539
      },
      "writtenOn": "2018-01-09T23:43:55Z",
      "side": 1,
      "message": "Nope, using base::CreateSingleThreadTaskRunnerWithTraits in latest patch instead.",
      "parentUuid": "04a6e238_b52d098a",
      "revId": "49adb4c0874dc39609b4f5fbbfd37f7ba2047706",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "06f21412_a19c25ee",
        "filename": "ash/cursor/cursor_view.cc",
        "patchSetId": 5
      },
      "lineNbr": 107,
      "author": {
        "id": 1000246
      },
      "writtenOn": "2018-01-09T20:23:50Z",
      "side": 1,
      "message": "You are post-tasking from EV_DEV -\u003e UI -\u003e paint thread yes? Or I am misunderstanding the code. The UI thread is busy. Won\u0027t this have jank?",
      "revId": "49adb4c0874dc39609b4f5fbbfd37f7ba2047706",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "31ea5f04_41cd0e6c",
        "filename": "ash/cursor/cursor_view.cc",
        "patchSetId": 5
      },
      "lineNbr": 107,
      "author": {
        "id": 1000539
      },
      "writtenOn": "2018-01-09T23:43:55Z",
      "side": 1,
      "message": "This was only used on X11. I removed this function from latest patch and instead implemented ui::CursorController::CursorObserver support on X11.\n\nOn Ozone-DRM we get EVDEV -\u003e paint thread. On X11, we of course process input on UI thread but that\u0027s not a case we care about except for development and debugging purposes.",
      "parentUuid": "06f21412_a19c25ee",
      "revId": "49adb4c0874dc39609b4f5fbbfd37f7ba2047706",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e92f829c_e561cb9c",
        "filename": "ash/cursor/cursor_view.h",
        "patchSetId": 5
      },
      "lineNbr": 22,
      "author": {
        "id": 1000246
      },
      "writtenOn": "2018-01-09T20:23:50Z",
      "side": 1,
      "message": "Why is this code in Ash? This seems working against the goal of Mustash team to separate Ash from the WS/Viz. The functionality here belongs in the WS/Viz?",
      "revId": "49adb4c0874dc39609b4f5fbbfd37f7ba2047706",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dfa88b65_f48c4f40",
        "filename": "ash/cursor/cursor_view.h",
        "patchSetId": 5
      },
      "lineNbr": 22,
      "author": {
        "id": 1000539
      },
      "writtenOn": "2018-01-09T23:43:55Z",
      "side": 1,
      "message": "This is built on the ash FastInk code that is used by the highlighter and laser pointer. I\u0027m not sure what the plan is for those UI elements and Mustash but I was under the impression that this code already worked fine with MUS.\n\nFyi, unlike a traditional HW cursor, this cursor implementation is closely tied to WM and UI code and can as a result easily support all kinds of accessibility features that we rely on a SW cursor for today. It\u0027s faster than the current SW cursor as it uses the fast ink rendering mechanism we developed for zero-latency stylus.",
      "parentUuid": "e92f829c_e561cb9c",
      "revId": "49adb4c0874dc39609b4f5fbbfd37f7ba2047706",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f8b1206c_50fda513",
        "filename": "ash/cursor/cursor_view.h",
        "patchSetId": 5
      },
      "lineNbr": 22,
      "author": {
        "id": 1000246
      },
      "writtenOn": "2018-01-11T20:55:53Z",
      "side": 1,
      "message": "My point was that the cursor implementation shouldn\u0027t be tied to the WM right?\n\nMy understanding is that the servicification has the goal of separating the Ash UI, systray from WS/Viz code. In particular: WS/Viz should be enough to support Exo and Ash should be replaceable in a similar fashion as an X11 window manager.\n\nGiven this, it seems to me that both this code and FastInkView are not in the right place? \n\nAlso: why does FastInkView need to use the ui::Compositor? Why can\u0027t it use the display compositor directly?",
      "parentUuid": "dfa88b65_f48c4f40",
      "revId": "49adb4c0874dc39609b4f5fbbfd37f7ba2047706",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "78b0acc1_0a5c0533",
        "filename": "ash/cursor/cursor_view.h",
        "patchSetId": 5
      },
      "lineNbr": 22,
      "author": {
        "id": 1000539
      },
      "writtenOn": "2018-01-11T21:42:15Z",
      "side": 1,
      "message": "It\u0027s possible that having the cursor tied to the WM will make it possible to implement features that we otherwise couldn\u0027t do. However, I don\u0027t think that\u0027s the case today. We just need to be able to magnify it, invert its colors and a few other things today.\n\nThe shell part of Exo (XDG-shell, aura-shell, etc.) should probably be tied to Ash or the alternative. The rest of Exo should ideally work without dependencies on Ash.\n\nBest way to think of FastInk code is as small client apps. They happen to be fullscreen today but that\u0027s not a requirement. Avoiding unnecessary dependencies on the shell makes sense though.\n\nFastInk submits frames directly to the display compositor, just like Exo. View/Widget framework is used to control how/where within Ash the output should be displayed. The code here is using ui::Compositor for vsync parameters but frames are still submitted directly to the display compositor. And in the case of HW overlays, we even bypass the display compositor, which is how we get extremely smooth output with minimal latency.",
      "parentUuid": "f8b1206c_50fda513",
      "revId": "49adb4c0874dc39609b4f5fbbfd37f7ba2047706",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}