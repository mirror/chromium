{
  "comments": [
    {
      "key": {
        "uuid": "0d4119e1_590b0788",
        "filename": "gpu/command_buffer/service/gles2_cmd_decoder_passthrough.cc",
        "patchSetId": 12
      },
      "lineNbr": 252,
      "author": {
        "id": 1148065
      },
      "writtenOn": "2017-09-12T18:30:27Z",
      "side": 1,
      "message": "Why the check for IsWebGLContext()? It\u0027s odd because it relates to the type of context exposed to the client, not the underlying GL context (i.e. which feature is available, such as GL_DEPTH_STENCIL_ATTACHMENT).",
      "revId": "0cc4941b7184325f01ddcb017f3d9e08a0dc33cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3be81ede_67ab65e5",
        "filename": "gpu/command_buffer/service/gles2_cmd_decoder_passthrough.cc",
        "patchSetId": 12
      },
      "lineNbr": 252,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2017-09-12T19:54:15Z",
      "side": 1,
      "message": "I changed this to feature_info-\u003efeature_flags().angle_webgl_compatibility which is a more direct check.  ANGLE implements the WebGL framebuffer attachment semantics which unfortunately results in an incomplete framebuffer when the same attachment is bound to both depth and stencil for WebGL1.",
      "parentUuid": "0d4119e1_590b0788",
      "revId": "0cc4941b7184325f01ddcb017f3d9e08a0dc33cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8cab03b5_1d1e841a",
        "filename": "gpu/command_buffer/service/gles2_cmd_decoder_passthrough.cc",
        "patchSetId": 12
      },
      "lineNbr": 252,
      "author": {
        "id": 1148065
      },
      "writtenOn": "2017-09-12T21:10:12Z",
      "side": 1,
      "message": "Thanks!\n\nOut of curiosity, why is ANGLE implementing the WebGL semantics for this? It\u0027s currently handled on the client side in the WebGL implementation, so all the command buffer should see for WebGL1 is GL_DEPTH_ATTACHMENT/GL_STENCIL_ATTACHMENT (see https://chromium.googlesource.com/chromium/src/+/761e2ddaa6d3aea34848809174a250291b2615a5 ).",
      "parentUuid": "3be81ede_67ab65e5",
      "revId": "0cc4941b7184325f01ddcb017f3d9e08a0dc33cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9739ff02_9551a058",
        "filename": "gpu/command_buffer/service/gles2_cmd_decoder_passthrough.cc",
        "patchSetId": 12
      },
      "lineNbr": 826,
      "author": {
        "id": 1148065
      },
      "writtenOn": "2017-09-12T18:30:27Z",
      "side": 1,
      "message": "What makes this DCHECK valid? I think we may want some code in Initialize to force using a texture if we\u0027re in single-buffer mode.",
      "revId": "0cc4941b7184325f01ddcb017f3d9e08a0dc33cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b06248ba_012e3bab",
        "filename": "gpu/command_buffer/service/gles2_cmd_decoder_passthrough.cc",
        "patchSetId": 12
      },
      "lineNbr": 826,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2017-09-12T19:54:15Z",
      "side": 1,
      "message": "True, forced the sample count to 0 for single buffered offscreen contexts.",
      "parentUuid": "9739ff02_9551a058",
      "revId": "0cc4941b7184325f01ddcb017f3d9e08a0dc33cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "98022d72_bc953d3d",
        "filename": "gpu/command_buffer/service/gles2_cmd_decoder_passthrough.h",
        "patchSetId": 12
      },
      "lineNbr": 483,
      "author": {
        "id": 1148065
      },
      "writtenOn": "2017-09-12T18:30:27Z",
      "side": 1,
      "message": "nit: explicit",
      "revId": "0cc4941b7184325f01ddcb017f3d9e08a0dc33cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "47ce2e97_90d397a2",
        "filename": "gpu/command_buffer/service/gles2_cmd_decoder_passthrough.h",
        "patchSetId": 12
      },
      "lineNbr": 483,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2017-09-12T19:54:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "98022d72_bc953d3d",
      "revId": "0cc4941b7184325f01ddcb017f3d9e08a0dc33cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "602b5a49_cdfda0e5",
        "filename": "gpu/command_buffer/service/gles2_cmd_decoder_passthrough_doers.cc",
        "patchSetId": 12
      },
      "lineNbr": 3065,
      "author": {
        "id": 1148065
      },
      "writtenOn": "2017-09-12T18:30:27Z",
      "side": 1,
      "message": "I\u0027m not 100% sure assigning and moving emulated_front_buffer_ in the same statement is not undefined behavior. Maybe worth going through an intermediate variable.",
      "revId": "0cc4941b7184325f01ddcb017f3d9e08a0dc33cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8411f48d_d0295883",
        "filename": "gpu/command_buffer/service/gles2_cmd_decoder_passthrough_doers.cc",
        "patchSetId": 12
      },
      "lineNbr": 3065,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2017-09-12T19:54:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "602b5a49_cdfda0e5",
      "revId": "0cc4941b7184325f01ddcb017f3d9e08a0dc33cc",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}