{
  "comments": [
    {
      "key": {
        "uuid": "b8740b3f_7eb2d1c0",
        "filename": "chrome/browser/media/router/discovery/dial/dial_app_discovery_service.cc",
        "patchSetId": 10
      },
      "lineNbr": 39,
      "author": {
        "id": 1133789
      },
      "writtenOn": "2017-12-22T01:03:52Z",
      "side": 1,
      "message": "Does partial_app_url.has_path() also work? Or, maybe consider using GURL::ReplaceComponents: https://cs.chromium.org/chromium/src/url/url_canon.h",
      "revId": "3c1800dd58481250dc01a7426e3ae962e5581dbf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3be394e9_e365437f",
        "filename": "chrome/browser/media/router/discovery/dial/dial_app_discovery_service.cc",
        "patchSetId": 10
      },
      "lineNbr": 39,
      "author": {
        "id": 1212411
      },
      "writtenOn": "2017-12-22T20:25:28Z",
      "side": 1,
      "message": "http://127.0.0.1/apps -\u003e has_path() returns /apps\nhttp://127.0.0.1/apps/ -\u003e has_path() returns /apps/\n\nStill need to extract file name and string op to append \"/\" and app name...",
      "parentUuid": "b8740b3f_7eb2d1c0",
      "revId": "3c1800dd58481250dc01a7426e3ae962e5581dbf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4ecd5038_98bdc12f",
        "filename": "chrome/browser/media/router/discovery/dial/dial_app_discovery_service.cc",
        "patchSetId": 10
      },
      "lineNbr": 53,
      "author": {
        "id": 1133789
      },
      "writtenOn": "2017-12-22T01:03:52Z",
      "side": 1,
      "message": "std::make_unique",
      "revId": "3c1800dd58481250dc01a7426e3ae962e5581dbf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e695187f_253e9c7b",
        "filename": "chrome/browser/media/router/discovery/dial/dial_app_discovery_service.cc",
        "patchSetId": 10
      },
      "lineNbr": 53,
      "author": {
        "id": 1212411
      },
      "writtenOn": "2017-12-22T20:25:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4ecd5038_98bdc12f",
      "revId": "3c1800dd58481250dc01a7426e3ae962e5581dbf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fada3312_c445e2e2",
        "filename": "chrome/browser/media/router/discovery/dial/dial_app_discovery_service.cc",
        "patchSetId": 10
      },
      "lineNbr": 71,
      "author": {
        "id": 1133789
      },
      "writtenOn": "2017-12-22T01:03:52Z",
      "side": 1,
      "message": "It seems unlikely for the URL to have changed. Maybe we should just always return early if there is a pending fetcher for simplicity?",
      "revId": "3c1800dd58481250dc01a7426e3ae962e5581dbf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "118cbfce_0034749e",
        "filename": "chrome/browser/media/router/discovery/dial/dial_app_discovery_service.cc",
        "patchSetId": 10
      },
      "lineNbr": 71,
      "author": {
        "id": 1212411
      },
      "writtenOn": "2017-12-22T20:25:28Z",
      "side": 1,
      "message": "The code is here to handle sink IP address change. If request for old ip is pending, and we always return early, request for new ip wont be attempted. Request for old ip is likely to fail due to ip address change...\n\nWe can remove this if IP address change is unlikely and we are fine with having caller dealing with it (e.g. always force fetch in OnUserGesture()).",
      "parentUuid": "fada3312_c445e2e2",
      "revId": "3c1800dd58481250dc01a7426e3ae962e5581dbf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "73f8b86e_de58cd1e",
        "filename": "chrome/browser/media/router/discovery/dial/dial_app_discovery_service.cc",
        "patchSetId": 10
      },
      "lineNbr": 71,
      "author": {
        "id": 1133789
      },
      "writtenOn": "2017-12-23T02:09:09Z",
      "side": 1,
      "message": "True, the IP of the sink can change. However, since we don\u0027t erase from pending_fetcher_map_ until after the parsing is complete in the \"fetch success\" case, I can think of a race condition where replacing the entry on IP change could result in internal inconsistencies:\n\n- OnDialAppInfoFetchComplete called under old IP address; post task to parse app info.\n- FetchDialAppInfo called with new IP address; this creates a new DialAppInfoFetcher which replaces existing entry in map\n- OnDialAppInfo called under old IP address. This erases the entry containing new DialAppInfoFetcher, and presumably stops the fetch under new IP address.\n\nSo my thinking is either we add a app_url check in OnDialAppInfo to prevent this from happening, or just don\u0027t do this at all. Since this is a corner case, I prefer the latter to keep it simple. (And also because this is recoverable by forcing on user gesture)",
      "parentUuid": "118cbfce_0034749e",
      "revId": "3c1800dd58481250dc01a7426e3ae962e5581dbf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b010c4f1_4ec64db6",
        "filename": "chrome/browser/media/router/discovery/dial/dial_app_discovery_service.cc",
        "patchSetId": 10
      },
      "lineNbr": 79,
      "author": {
        "id": 1133789
      },
      "writtenOn": "2017-12-22T01:03:52Z",
      "side": 1,
      "message": "Can std::make_unique be used here?",
      "revId": "3c1800dd58481250dc01a7426e3ae962e5581dbf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "11a0a025_592d84c1",
        "filename": "chrome/browser/media/router/discovery/dial/dial_app_discovery_service.cc",
        "patchSetId": 10
      },
      "lineNbr": 79,
      "author": {
        "id": 1212411
      },
      "writtenOn": "2017-12-22T20:25:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b010c4f1_4ec64db6",
      "revId": "3c1800dd58481250dc01a7426e3ae962e5581dbf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6aecdee0_9cb5e240",
        "filename": "chrome/browser/media/router/discovery/dial/dial_app_discovery_service.cc",
        "patchSetId": 10
      },
      "lineNbr": 106,
      "author": {
        "id": 1133789
      },
      "writtenOn": "2017-12-22T01:03:52Z",
      "side": 1,
      "message": "We need to erase pending_fetcher_map_ here too?",
      "revId": "3c1800dd58481250dc01a7426e3ae962e5581dbf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "216780a5_5fc9b47b",
        "filename": "chrome/browser/media/router/discovery/dial/dial_app_discovery_service.cc",
        "patchSetId": 10
      },
      "lineNbr": 106,
      "author": {
        "id": 1212411
      },
      "writtenOn": "2017-12-22T20:25:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6aecdee0_9cb5e240",
      "revId": "3c1800dd58481250dc01a7426e3ae962e5581dbf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "16489055_800949d1",
        "filename": "chrome/browser/media/router/discovery/dial/dial_app_discovery_service.cc",
        "patchSetId": 10
      },
      "lineNbr": 142,
      "author": {
        "id": 1133789
      },
      "writtenOn": "2017-12-22T01:03:52Z",
      "side": 1,
      "message": "NOT_FOUND should be treated as having a status of kUnavailable. Besides this case, how will error_cb_ and success_cb_ with kUnknown be treated differently upstream? (i.e., is it ok to just always run the latter callback to return kUnknown?)",
      "revId": "3c1800dd58481250dc01a7426e3ae962e5581dbf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "833b8a34_120d04e8",
        "filename": "chrome/browser/media/router/discovery/dial/dial_app_discovery_service.cc",
        "patchSetId": 10
      },
      "lineNbr": 142,
      "author": {
        "id": 1212411
      },
      "writtenOn": "2017-12-22T20:25:28Z",
      "side": 1,
      "message": "|success_cb_| returns:\nkAvailable  // parsing succeeds, app available\nkUnavailable // parsing succeeds, app unavailable\nkUnknown // Transient HTTP error\n\n|error_cb_| does not return kUnknown. Invoked when other HTTP error and parsing error.\n\nIn patch 3, caller treats |error_cb_| as kUnavailable and removes the sink from available sink list; Caller ignores kUnknown and do nothing; It seems better to report error instead of kUnavailable to caller, so that caller has more info...",
      "parentUuid": "16489055_800949d1",
      "revId": "3c1800dd58481250dc01a7426e3ae962e5581dbf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8d8c8d0e_56325834",
        "filename": "chrome/browser/media/router/discovery/dial/dial_app_discovery_service.cc",
        "patchSetId": 10
      },
      "lineNbr": 142,
      "author": {
        "id": 1133789
      },
      "writtenOn": "2017-12-23T02:09:09Z",
      "side": 1,
      "message": "That makes sense, though in the 3rd patch, DMSSImpl doesn\u0027t do anything with |error_message|. Since |error_message| is internal, it would be sufficient to just log it here as you\u0027ve already done above. Then we could simplify this to only take a single callback as opposed to two.",
      "parentUuid": "833b8a34_120d04e8",
      "revId": "3c1800dd58481250dc01a7426e3ae962e5581dbf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ae2355a7_01ba146b",
        "filename": "chrome/browser/media/router/discovery/dial/dial_app_discovery_service.h",
        "patchSetId": 10
      },
      "lineNbr": 102,
      "author": {
        "id": 1133789
      },
      "writtenOn": "2017-12-22T01:03:52Z",
      "side": 1,
      "message": "Do you need access to the MediaSinkInternal object, or is it sufficient to pass around MediaSink::Id internally / to the callbacks? Just so we have less expensive copying going on.",
      "revId": "3c1800dd58481250dc01a7426e3ae962e5581dbf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "da9b8c8e_dd517273",
        "filename": "chrome/browser/media/router/discovery/dial/dial_app_discovery_service.h",
        "patchSetId": 10
      },
      "lineNbr": 102,
      "author": {
        "id": 1212411
      },
      "writtenOn": "2017-12-22T20:25:28Z",
      "side": 1,
      "message": "Pass |sink| around so that caller can check if original sink issuing the request still exists (e.g. IP address or other fields may change) and update sink app status accordingly.",
      "parentUuid": "ae2355a7_01ba146b",
      "revId": "3c1800dd58481250dc01a7426e3ae962e5581dbf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "aa7b57ec_2cb84a0d",
        "filename": "chrome/browser/media/router/discovery/dial/dial_app_discovery_service.h",
        "patchSetId": 10
      },
      "lineNbr": 102,
      "author": {
        "id": 1133789
      },
      "writtenOn": "2017-12-23T02:09:09Z",
      "side": 1,
      "message": "Ok but DialMediaSinkServiceImpl::OnAppInfoUpdated in patch 3 only uses the sink ID? Also, I thought IP address change shouldn\u0027t affect the result.",
      "parentUuid": "da9b8c8e_dd517273",
      "revId": "3c1800dd58481250dc01a7426e3ae962e5581dbf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "da8ec5e4_73de1453",
        "filename": "chrome/browser/media/router/discovery/dial/dial_app_discovery_service_unittest.cc",
        "patchSetId": 10
      },
      "lineNbr": 114,
      "author": {
        "id": 1133789
      },
      "writtenOn": "2017-12-22T01:03:52Z",
      "side": 1,
      "message": "Is there a way to assert on the URL passed to the fetcher? (e.g., to test the URL generation logic)",
      "revId": "3c1800dd58481250dc01a7426e3ae962e5581dbf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0069d8f7_fe093de4",
        "filename": "chrome/browser/media/router/discovery/dial/dial_app_discovery_service_unittest.cc",
        "patchSetId": 10
      },
      "lineNbr": 114,
      "author": {
        "id": 1212411
      },
      "writtenOn": "2017-12-22T20:25:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "da8ec5e4_73de1453",
      "revId": "3c1800dd58481250dc01a7426e3ae962e5581dbf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c37044cf_20146148",
        "filename": "chrome/browser/media/router/discovery/mdns/cast_media_sink_service_impl_unittest.cc",
        "patchSetId": 10
      },
      "lineNbr": 38,
      "author": {
        "id": 1133789
      },
      "writtenOn": "2017-12-22T01:03:52Z",
      "side": 1,
      "message": "You can just nest the anonymous namespace inside the media_router namespace.",
      "revId": "3c1800dd58481250dc01a7426e3ae962e5581dbf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "31878fb5_8a39a4c3",
        "filename": "chrome/browser/media/router/discovery/mdns/cast_media_sink_service_impl_unittest.cc",
        "patchSetId": 10
      },
      "lineNbr": 38,
      "author": {
        "id": 1212411
      },
      "writtenOn": "2017-12-22T20:25:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c37044cf_20146148",
      "revId": "3c1800dd58481250dc01a7426e3ae962e5581dbf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "41b8edfc_7fa4b2a7",
        "filename": "chrome/browser/media/router/test_helper.h",
        "patchSetId": 10
      },
      "lineNbr": 108,
      "author": {
        "id": 1133789
      },
      "writtenOn": "2017-12-22T01:03:52Z",
      "side": 1,
      "message": "Could you add some documentation?",
      "revId": "3c1800dd58481250dc01a7426e3ae962e5581dbf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8468bbc1_f68043c2",
        "filename": "chrome/browser/media/router/test_helper.h",
        "patchSetId": 10
      },
      "lineNbr": 108,
      "author": {
        "id": 1212411
      },
      "writtenOn": "2017-12-22T20:25:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "41b8edfc_7fa4b2a7",
      "revId": "3c1800dd58481250dc01a7426e3ae962e5581dbf",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}