{
  "comments": [
    {
      "key": {
        "uuid": "433663c5_e1b9b753",
        "filename": "content/common/page_state.mojom",
        "patchSetId": 9
      },
      "lineNbr": 56,
      "author": {
        "id": 1130134
      },
      "writtenOn": "2017-09-13T19:32:41Z",
      "side": 1,
      "message": "Can this reuse gfx::mojom::Point from //ui/gfx/geometry/mojo/geometry.mojom?",
      "range": {
        "startLine": 56,
        "startChar": 7,
        "endLine": 56,
        "endChar": 12
      },
      "revId": "731690d54f88cd12712ab97294bc1b7a05dec1f9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3a54a5f9_1b746091",
        "filename": "content/common/page_state.mojom",
        "patchSetId": 9
      },
      "lineNbr": 56,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-09-13T19:36:06Z",
      "side": 1,
      "message": "One thing we need to be careful of is how stable other structs we depend on are. AFAIK, there\u0027s no good way of expressing this in Mojo--and if the struct definitions were to ever change, serialization would just suddenly stop working (since the other structs aren\u0027t versioned)",
      "parentUuid": "433663c5_e1b9b753",
      "range": {
        "startLine": 56,
        "startChar": 7,
        "endLine": 56,
        "endChar": 12
      },
      "revId": "731690d54f88cd12712ab97294bc1b7a05dec1f9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "52425a24_eeb3de5c",
        "filename": "content/common/page_state.mojom",
        "patchSetId": 9
      },
      "lineNbr": 56,
      "author": {
        "id": 1130134
      },
      "writtenOn": "2017-09-13T19:38:16Z",
      "side": 1,
      "message": "Good point - can we prevent this with a regression test that verifies that the serialization result doesn\u0027t change (and so indirectly verifies that the structs we depend on didn\u0027t change)?",
      "parentUuid": "3a54a5f9_1b746091",
      "range": {
        "startLine": 56,
        "startChar": 7,
        "endLine": 56,
        "endChar": 12
      },
      "revId": "731690d54f88cd12712ab97294bc1b7a05dec1f9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "13e1e464_ef08640a",
        "filename": "content/common/page_state.mojom",
        "patchSetId": 9
      },
      "lineNbr": 56,
      "author": {
        "id": 1189064
      },
      "writtenOn": "2017-09-13T20:09:35Z",
      "side": 1,
      "message": "We already do similar checks for the legacy format in page_state_serialization_unittest, so I can add this relatively easily.",
      "parentUuid": "52425a24_eeb3de5c",
      "range": {
        "startLine": 56,
        "startChar": 7,
        "endLine": 56,
        "endChar": 12
      },
      "revId": "731690d54f88cd12712ab97294bc1b7a05dec1f9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0aa23a53_b8071e4a",
        "filename": "content/common/page_state.mojom",
        "patchSetId": 9
      },
      "lineNbr": 56,
      "author": {
        "id": 1189064
      },
      "writtenOn": "2017-09-26T19:42:13Z",
      "side": 1,
      "message": "Actually, I\u0027m not sure if that type of test is desirable. There are two possibilities when a dependent definition changes:\n1) The change is incompatible; it removes a field or changes its type.\n2) The change is compatible. It adds a field or expands the possible range of enum values.\n\n2) is fine as far as I can tell, and being able to make changes of this type easily is one of the advantages of this CL. But verifying that the serialization result is identical would fail these changes, which I don\u0027t think is desirable. \n\nWe can\u0027t really allow 1) to happen, since as Daniel points out, deserialization of a previously serialized PageState would start failing. Fortunately 1) should cause a compile failure, since we read/write to the field that\u0027s being changed/removed. I think this compile failure is a stronger signal than a unit test failing, but it might not communicate what the correct resolution is? Do you think we still need a test for this eventuality? I\u0027m hesitant to do this because it entails going back to the old pattern of \"dump a .dat file for every schema change and add a BackwardsCompatTestVXX.\"",
      "parentUuid": "13e1e464_ef08640a",
      "range": {
        "startLine": 56,
        "startChar": 7,
        "endLine": 56,
        "endChar": 12
      },
      "revId": "731690d54f88cd12712ab97294bc1b7a05dec1f9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "265dae57_dd468850",
        "filename": "content/common/page_state.mojom",
        "patchSetId": 9
      },
      "lineNbr": 56,
      "author": {
        "id": 1130134
      },
      "writtenOn": "2017-09-26T21:07:18Z",
      "side": 1,
      "message": "A natural response to a compile failure might be to fix the failure (e.g. by renaming field names in the broken code), but this is exactly what we want to prevent (because such compile fix would still break reading of old serialized data).\n\nAlso - in some cases the underlying data format might change without a corresponding compile failure (e.g. if the underlying mojo serialization starts emitting and requiring a \"mojo\" marker at the start of every struct [yes - this is a silly example :-P]).\n\nAlso - how confident we are hat it is not possible that a dependency will change in a way that 1) doesn\u0027t cause a compile failure. but 2) causes a deserialization failure when an old data is read.  What about changing a type from signed to unsigned - this would probably still compile because of implicit conversions, but I don\u0027t know what would be the impact of such type change on the ability to deserialize old data.",
      "parentUuid": "0aa23a53_b8071e4a",
      "range": {
        "startLine": 56,
        "startChar": 7,
        "endLine": 56,
        "endChar": 12
      },
      "revId": "731690d54f88cd12712ab97294bc1b7a05dec1f9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7f2b123e_39a7028b",
        "filename": "content/common/page_state.mojom",
        "patchSetId": 9
      },
      "lineNbr": 56,
      "author": {
        "id": 1189064
      },
      "writtenOn": "2017-09-26T22:36:06Z",
      "side": 1,
      "message": "Fair enough, it sounds like we need a test of some sort. Could we just check that deserializing the saved dat file still works in  the same way that TestBackwardsCompat does already? \n\nThis would require bumps to the version number and a new serialized_vxx.dat file for each addition to the schema. But it avoids failing benign changes and lets us test compatibility from every past schema version to the present.",
      "parentUuid": "265dae57_dd468850",
      "range": {
        "startLine": 56,
        "startChar": 7,
        "endLine": 56,
        "endChar": 12
      },
      "revId": "731690d54f88cd12712ab97294bc1b7a05dec1f9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4b660b2f_ed1747e6",
        "filename": "content/common/page_state.mojom",
        "patchSetId": 9
      },
      "lineNbr": 56,
      "author": {
        "id": 1130134
      },
      "writtenOn": "2017-09-27T19:25:22Z",
      "side": 1,
      "message": "Thanks - I think this can be marked as \"resolved\".",
      "parentUuid": "7f2b123e_39a7028b",
      "range": {
        "startLine": 56,
        "startChar": 7,
        "endLine": 56,
        "endChar": 12
      },
      "revId": "731690d54f88cd12712ab97294bc1b7a05dec1f9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f2522ff5_c71d5440",
        "filename": "content/common/page_state.mojom",
        "patchSetId": 9
      },
      "lineNbr": 61,
      "author": {
        "id": 1130134
      },
      "writtenOn": "2017-09-13T19:32:41Z",
      "side": 1,
      "message": "Can this reuse gfx::mojom::PointF from //ui/gfx/geometry/mojo/geometry.mojom? (the other one uses float instead of double - hopefully this doesn\u0027t matter)",
      "range": {
        "startLine": 61,
        "startChar": 7,
        "endLine": 61,
        "endChar": 13
      },
      "revId": "731690d54f88cd12712ab97294bc1b7a05dec1f9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e486125a_fa9360f0",
        "filename": "content/common/page_state.mojom",
        "patchSetId": 9
      },
      "lineNbr": 61,
      "author": {
        "id": 1189064
      },
      "writtenOn": "2017-09-26T19:42:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f2522ff5_c71d5440",
      "range": {
        "startLine": 61,
        "startChar": 7,
        "endLine": 61,
        "endChar": 13
      },
      "revId": "731690d54f88cd12712ab97294bc1b7a05dec1f9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "214bb47e_59b6d4ad",
        "filename": "content/common/page_state.mojom",
        "patchSetId": 9
      },
      "lineNbr": 66,
      "author": {
        "id": 1130134
      },
      "writtenOn": "2017-09-13T19:32:41Z",
      "side": 1,
      "message": "Do the values need to match blink::WebHistoryScrollRestorationType?  Do we want a comment explaining this and/or static_asserts verifying this?",
      "range": {
        "startLine": 66,
        "startChar": 5,
        "endLine": 66,
        "endChar": 26
      },
      "revId": "731690d54f88cd12712ab97294bc1b7a05dec1f9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1c7355cb_db67c1bc",
        "filename": "content/common/page_state.mojom",
        "patchSetId": 9
      },
      "lineNbr": 66,
      "author": {
        "id": 1189064
      },
      "writtenOn": "2017-09-26T19:42:13Z",
      "side": 1,
      "message": "Both done.",
      "parentUuid": "214bb47e_59b6d4ad",
      "range": {
        "startLine": 66,
        "startChar": 5,
        "endLine": 66,
        "endChar": 26
      },
      "revId": "731690d54f88cd12712ab97294bc1b7a05dec1f9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}