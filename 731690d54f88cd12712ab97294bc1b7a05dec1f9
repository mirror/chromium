{
  "comments": [
    {
      "key": {
        "uuid": "433663c5_e1b9b753",
        "filename": "content/common/page_state.mojom",
        "patchSetId": 9
      },
      "lineNbr": 56,
      "author": {
        "id": 1130134
      },
      "writtenOn": "2017-09-13T19:32:41Z",
      "side": 1,
      "message": "Can this reuse gfx::mojom::Point from //ui/gfx/geometry/mojo/geometry.mojom?",
      "range": {
        "startLine": 56,
        "startChar": 7,
        "endLine": 56,
        "endChar": 12
      },
      "revId": "731690d54f88cd12712ab97294bc1b7a05dec1f9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3a54a5f9_1b746091",
        "filename": "content/common/page_state.mojom",
        "patchSetId": 9
      },
      "lineNbr": 56,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-09-13T19:36:06Z",
      "side": 1,
      "message": "One thing we need to be careful of is how stable other structs we depend on are. AFAIK, there\u0027s no good way of expressing this in Mojo--and if the struct definitions were to ever change, serialization would just suddenly stop working (since the other structs aren\u0027t versioned)",
      "parentUuid": "433663c5_e1b9b753",
      "range": {
        "startLine": 56,
        "startChar": 7,
        "endLine": 56,
        "endChar": 12
      },
      "revId": "731690d54f88cd12712ab97294bc1b7a05dec1f9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "52425a24_eeb3de5c",
        "filename": "content/common/page_state.mojom",
        "patchSetId": 9
      },
      "lineNbr": 56,
      "author": {
        "id": 1130134
      },
      "writtenOn": "2017-09-13T19:38:16Z",
      "side": 1,
      "message": "Good point - can we prevent this with a regression test that verifies that the serialization result doesn\u0027t change (and so indirectly verifies that the structs we depend on didn\u0027t change)?",
      "parentUuid": "3a54a5f9_1b746091",
      "range": {
        "startLine": 56,
        "startChar": 7,
        "endLine": 56,
        "endChar": 12
      },
      "revId": "731690d54f88cd12712ab97294bc1b7a05dec1f9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "13e1e464_ef08640a",
        "filename": "content/common/page_state.mojom",
        "patchSetId": 9
      },
      "lineNbr": 56,
      "author": {
        "id": 1189064
      },
      "writtenOn": "2017-09-13T20:09:35Z",
      "side": 1,
      "message": "We already do similar checks for the legacy format in page_state_serialization_unittest, so I can add this relatively easily.",
      "parentUuid": "52425a24_eeb3de5c",
      "range": {
        "startLine": 56,
        "startChar": 7,
        "endLine": 56,
        "endChar": 12
      },
      "revId": "731690d54f88cd12712ab97294bc1b7a05dec1f9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f2522ff5_c71d5440",
        "filename": "content/common/page_state.mojom",
        "patchSetId": 9
      },
      "lineNbr": 61,
      "author": {
        "id": 1130134
      },
      "writtenOn": "2017-09-13T19:32:41Z",
      "side": 1,
      "message": "Can this reuse gfx::mojom::PointF from //ui/gfx/geometry/mojo/geometry.mojom? (the other one uses float instead of double - hopefully this doesn\u0027t matter)",
      "range": {
        "startLine": 61,
        "startChar": 7,
        "endLine": 61,
        "endChar": 13
      },
      "revId": "731690d54f88cd12712ab97294bc1b7a05dec1f9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "214bb47e_59b6d4ad",
        "filename": "content/common/page_state.mojom",
        "patchSetId": 9
      },
      "lineNbr": 66,
      "author": {
        "id": 1130134
      },
      "writtenOn": "2017-09-13T19:32:41Z",
      "side": 1,
      "message": "Do the values need to match blink::WebHistoryScrollRestorationType?  Do we want a comment explaining this and/or static_asserts verifying this?",
      "range": {
        "startLine": 66,
        "startChar": 5,
        "endLine": 66,
        "endChar": 26
      },
      "revId": "731690d54f88cd12712ab97294bc1b7a05dec1f9",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}