{
  "comments": [
    {
      "key": {
        "uuid": "9190cbcc_aced264d",
        "filename": "chrome/browser/ui/browser_ui_prefs.cc",
        "patchSetId": 9
      },
      "lineNbr": 43,
      "author": {
        "id": 1000805
      },
      "writtenOn": "2018-02-07T01:36:55Z",
      "side": 1,
      "message": "It looks like this is a time period.  It would be nice to register it as a TimeDelta directly, so you could set and read it as a TimeDelta and avoid any potential for misconversion.\n\nWe have RegisterTimePref(), but that\u0027s not quite what you want.  Internally, however, that converts to a TimeDelta (since the epoch) and writes as an Int64 pref.  You could add a RegisterTimeDeltaPref() that does just the latter, and layer the former on top of it.  You\u0027d also need to add PrefService::Get/SetTimeDelta() (and probably change the existing Get/SetTime() functions to call them).",
      "revId": "837783543599bc233c7dc721e8fcd8c2e9432766",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "980cac37_8c44d182",
        "filename": "components/policy/resources/policy_templates.json",
        "patchSetId": 9
      },
      "lineNbr": 11185,
      "author": {
        "id": 1000640
      },
      "writtenOn": "2018-02-07T11:06:40Z",
      "side": 1,
      "message": "A long long time ago we agreed that all time period policies will use milliseconds regardless how ridiculous that might be for some of them. I would rather stick to that for this policy too. Alternatively some policies have decided to go with an enum of some \"sane\" values e.g. 8h, 1day 7days etc but I personally prefer the more flexible option of specifying themselves one. Just make sure the minimum and maximum values are updated accordingly.",
      "range": {
        "startLine": 11185,
        "startChar": 53,
        "endLine": 11185,
        "endChar": 68
      },
      "revId": "837783543599bc233c7dc721e8fcd8c2e9432766",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}