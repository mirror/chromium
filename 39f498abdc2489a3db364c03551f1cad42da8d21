{
  "comments": [
    {
      "key": {
        "uuid": "ec145402_522528fc",
        "filename": "/COMMIT_MSG",
        "patchSetId": 10
      },
      "lineNbr": 10,
      "author": {
        "id": 1116053
      },
      "writtenOn": "2017-11-22T18:29:55Z",
      "side": 1,
      "message": "nit: this sentence is kinda misleading, as we discussed.  Maybe explain instead how the xml properties of a node get mapped to dictionary values, as well as what other representational trick is used to provide the children array/firstChild/nextSibling etc.",
      "range": {
        "startLine": 10,
        "startChar": 24,
        "endLine": 10,
        "endChar": 62
      },
      "revId": "39f498abdc2489a3db364c03551f1cad42da8d21",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3f1479a1_fbc2471e",
        "filename": "services/data_decoder/public/cpp/safe_xml_parser.h",
        "patchSetId": 10
      },
      "lineNbr": 26,
      "author": {
        "id": 1144624
      },
      "writtenOn": "2017-11-22T19:12:31Z",
      "side": 1,
      "message": "I\u0027m not sure I like referring this to as \"JSONified\" since there\u0027s really no JSON involved -- it\u0027s really base::Value, which we typically represent as JSON.",
      "range": {
        "startLine": 26,
        "startChar": 24,
        "endLine": 26,
        "endChar": 33
      },
      "revId": "39f498abdc2489a3db364c03551f1cad42da8d21",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e5c16e20_0ca4c224",
        "filename": "services/data_decoder/public/cpp/safe_xml_parser.h",
        "patchSetId": 10
      },
      "lineNbr": 26,
      "author": {
        "id": 1002246
      },
      "writtenOn": "2017-11-27T21:09:51Z",
      "side": 1,
      "message": "Clarified.",
      "parentUuid": "3f1479a1_fbc2471e",
      "range": {
        "startLine": 26,
        "startChar": 24,
        "endLine": 26,
        "endChar": 33
      },
      "revId": "39f498abdc2489a3db364c03551f1cad42da8d21",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c2a16c36_4659de3c",
        "filename": "services/data_decoder/public/cpp/safe_xml_parser.h",
        "patchSetId": 10
      },
      "lineNbr": 34,
      "author": {
        "id": 1144624
      },
      "writtenOn": "2017-11-22T19:12:31Z",
      "side": 1,
      "message": "Here for example, we could say \"The XML document is transformed into a base::Value dictionary structure, with special keys holding the tag name, attributes, and child nodes.\"",
      "revId": "39f498abdc2489a3db364c03551f1cad42da8d21",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "45d46ca2_e9b4c647",
        "filename": "services/data_decoder/public/cpp/safe_xml_parser.h",
        "patchSetId": 10
      },
      "lineNbr": 34,
      "author": {
        "id": 1002246
      },
      "writtenOn": "2017-11-27T21:09:51Z",
      "side": 1,
      "message": "Good suggestion, done.",
      "parentUuid": "c2a16c36_4659de3c",
      "revId": "39f498abdc2489a3db364c03551f1cad42da8d21",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8eb289af_bf62992a",
        "filename": "services/data_decoder/public/interfaces/xml_parser.mojom",
        "patchSetId": 10
      },
      "lineNbr": 9,
      "author": {
        "id": 1144624
      },
      "writtenOn": "2017-11-22T19:12:31Z",
      "side": 1,
      "message": "Can we make guarantees about the encoding and validity of string content?",
      "range": {
        "startLine": 9,
        "startChar": 8,
        "endLine": 9,
        "endChar": 14
      },
      "revId": "39f498abdc2489a3db364c03551f1cad42da8d21",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dcd25d46_ecee7bc9",
        "filename": "services/data_decoder/public/interfaces/xml_parser.mojom",
        "patchSetId": 10
      },
      "lineNbr": 9,
      "author": {
        "id": 1002246
      },
      "writtenOn": "2017-11-27T21:09:51Z",
      "side": 1,
      "message": "libxml2 processes input text into valid UTF8 strings (regardless of the XML document\u0027s encoding):\nhttp://xmlsoft.org/encoding.html\nUpdated this comment.",
      "parentUuid": "8eb289af_bf62992a",
      "range": {
        "startLine": 9,
        "startChar": 8,
        "endLine": 9,
        "endChar": 14
      },
      "revId": "39f498abdc2489a3db364c03551f1cad42da8d21",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "43dd5307_18f241e8",
        "filename": "services/data_decoder/public/interfaces/xml_parser.mojom",
        "patchSetId": 10
      },
      "lineNbr": 26,
      "author": {
        "id": 1116053
      },
      "writtenOn": "2017-11-22T18:29:55Z",
      "side": 1,
      "message": "nit: I didn\u0027t see where id\u003dk123 occurred in your output.  Also maybe show multiple attributes for a node, \u003cbook id\u003d\"123\" price\u003d\"40.95\"\u003e",
      "range": {
        "startLine": 26,
        "startChar": 13,
        "endLine": 26,
        "endChar": 22
      },
      "revId": "39f498abdc2489a3db364c03551f1cad42da8d21",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ccabd868_d7cea1ee",
        "filename": "services/data_decoder/public/interfaces/xml_parser.mojom",
        "patchSetId": 10
      },
      "lineNbr": 26,
      "author": {
        "id": 1002246
      },
      "writtenOn": "2017-11-22T19:34:08Z",
      "side": 1,
      "message": "As mentioned in the header, this version does not have support for attributes, so they are ignored.\nThe good news is that I added support for them (and namespaces) in a follow up CL:\nhttps://chromium-review.googlesource.com/c/chromium/src/+/773460",
      "parentUuid": "43dd5307_18f241e8",
      "range": {
        "startLine": 26,
        "startChar": 13,
        "endLine": 26,
        "endChar": 22
      },
      "revId": "39f498abdc2489a3db364c03551f1cad42da8d21",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cd289b4c_a2379b45",
        "filename": "services/data_decoder/public/interfaces/xml_parser.mojom",
        "patchSetId": 10
      },
      "lineNbr": 40,
      "author": {
        "id": 1116053
      },
      "writtenOn": "2017-11-22T18:29:55Z",
      "side": 1,
      "message": "Are we sure we\u0027re happy with this representation?  Are all nodes tags?  I guess I was expecting to have something like a type attribute to distinguish text nodes, CDATA, etc from other XML types.\n\nIn particular, if this were someday the sole mechanism to parse XML in the browser for all uses of XML in the browser, what other mechanisms would we need to provide?",
      "range": {
        "startLine": 40,
        "startChar": 2,
        "endLine": 40,
        "endChar": 23
      },
      "revId": "39f498abdc2489a3db364c03551f1cad42da8d21",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "96a4bb74_3efd98a6",
        "filename": "services/data_decoder/public/interfaces/xml_parser.mojom",
        "patchSetId": 10
      },
      "lineNbr": 40,
      "author": {
        "id": 1144624
      },
      "writtenOn": "2017-11-22T19:12:31Z",
      "side": 1,
      "message": "I somewhat agree we should try and be forward-looking here: we do want to ultimately replace all unsafe XML handling with this service, and I\u0027m a bit concerned that unless we can encode the fully possibilities of XML within the representation, changing clients later down the line will be a headache.",
      "parentUuid": "cd289b4c_a2379b45",
      "range": {
        "startLine": 40,
        "startChar": 2,
        "endLine": 40,
        "endChar": 23
      },
      "revId": "39f498abdc2489a3db364c03551f1cad42da8d21",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "860c63f0_d7650b0c",
        "filename": "services/data_decoder/public/interfaces/xml_parser.mojom",
        "patchSetId": 10
      },
      "lineNbr": 40,
      "author": {
        "id": 1002808
      },
      "writtenOn": "2017-11-22T19:16:44Z",
      "side": 1,
      "message": "Fully agree that we want to be forward-looking. My suggestion to use \"tag\" as a fixed key here comes from a place of XML ignorance. Do you think it is sufficiently extensible if we add a \"type\": \"tag\" property to all of the parsed tag nodes?",
      "parentUuid": "96a4bb74_3efd98a6",
      "range": {
        "startLine": 40,
        "startChar": 2,
        "endLine": 40,
        "endChar": 23
      },
      "revId": "39f498abdc2489a3db364c03551f1cad42da8d21",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9310d0a1_539ed3ca",
        "filename": "services/data_decoder/public/interfaces/xml_parser.mojom",
        "patchSetId": 10
      },
      "lineNbr": 40,
      "author": {
        "id": 1144624
      },
      "writtenOn": "2017-11-22T19:19:48Z",
      "side": 1,
      "message": "Yes, that should be sufficient. I\u0027d probably call the type \"element\". A \"type\" key would then, as Tom notes, allow us to specifically call out text nodes, CDATA, and even comments in the future. \"tag\" still SGTM for the element tag\u0027s name.",
      "parentUuid": "860c63f0_d7650b0c",
      "range": {
        "startLine": 40,
        "startChar": 2,
        "endLine": 40,
        "endChar": 23
      },
      "revId": "39f498abdc2489a3db364c03551f1cad42da8d21",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2d981520_a8437834",
        "filename": "services/data_decoder/public/interfaces/xml_parser.mojom",
        "patchSetId": 10
      },
      "lineNbr": 40,
      "author": {
        "id": 1002808
      },
      "writtenOn": "2017-11-22T19:24:28Z",
      "side": 1,
      "message": "Follow-up then. Does it make sense to have a \"text\" property at all, or would inner text be more correctly modeled as a child \"text\"-type node?",
      "parentUuid": "9310d0a1_539ed3ca",
      "range": {
        "startLine": 40,
        "startChar": 2,
        "endLine": 40,
        "endChar": 23
      },
      "revId": "39f498abdc2489a3db364c03551f1cad42da8d21",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9430d671_3ad900de",
        "filename": "services/data_decoder/public/interfaces/xml_parser.mojom",
        "patchSetId": 10
      },
      "lineNbr": 40,
      "author": {
        "id": 1002246
      },
      "writtenOn": "2017-11-22T19:34:08Z",
      "side": 1,
      "message": "My original thought was that we should not expose text, CDATA, whitespace nodes directly in this API, but process them into the text of the node instead (I personally have not seen cases of practical XML parsing where that specificity was needed).\nBut maybe I am wrong and some use cases will require that specificity?",
      "parentUuid": "860c63f0_d7650b0c",
      "range": {
        "startLine": 40,
        "startChar": 2,
        "endLine": 40,
        "endChar": 23
      },
      "revId": "39f498abdc2489a3db364c03551f1cad42da8d21",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c297f759_1771f7fd",
        "filename": "services/data_decoder/public/interfaces/xml_parser.mojom",
        "patchSetId": 10
      },
      "lineNbr": 40,
      "author": {
        "id": 1002246
      },
      "writtenOn": "2017-11-22T22:44:32Z",
      "side": 1,
      "message": "Actually I am wrong, text property won\u0027t work. For ex:\n\u003cp\u003eThis is \u003cb\u003esome\u003c/b\u003e text.\u003c/p\u003e\nSo we need text nodes. The question I am still wondering is whether it makes senses to differentiate between text and CData nodes. It seems CData exist to allow \u003c\u003es in a node content without the use of \u0026 codes. So from a client perspective all that matters is that it\u0027s text.\nI am no XML expert though.\n\nSo we could do with a type if we want to differentiate text and CData:\n\u003cp\u003eThis is \u003cb\u003esome\u003c/b\u003e text.\u003c![CDATA[ this \u003ci\u003eformatting\u003c/i\u003e is ignored ]]\u003e\u003c/p\u003e\nbecomes:\n{\"type\": \"element\", \"tag\": \"p\", \"children\": [\n   {\"type\": \"#text\", \"text\": \"This is \"},\n   {\"type\": \"element\", \"tag\": \"b\", \"children\": [    \n     {\"type\": \"#text\", \"text\": \"some\"},\n   ]},\n   {\"type\": \"#text\", \"text\": \" text.\"},\n   {\"type\": \"#cdata\", \"text\": \"this \u003ci\u003eformatting\u003c/i\u003e is ignored\"},\n ]\n}\n\nor if we think text and cdata nodes can be treated the same, then we don\u0027t need types: a node is either an element (with a tag) or a text node. We can also consolidate adjacent text and cdata nodes:\n{\"tag\": \"p\", \"children\": [\n   \"This is \",\n   {\"tag\": \"b\", \"children\": [ \"some\" ]},\n   \" text. this \u003ci\u003eformatting\u003c/i\u003e is ignored\",\n ]\n}\n\nI like the 2nd approach for its simplicity, but it makes supporting comments a bit more awkward. if we wanted to support them in the future.",
      "parentUuid": "9430d671_3ad900de",
      "range": {
        "startLine": 40,
        "startChar": 2,
        "endLine": 40,
        "endChar": 23
      },
      "revId": "39f498abdc2489a3db364c03551f1cad42da8d21",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "22d504ba_083f07d9",
        "filename": "services/data_decoder/public/interfaces/xml_parser.mojom",
        "patchSetId": 10
      },
      "lineNbr": 58,
      "author": {
        "id": 1116053
      },
      "writtenOn": "2017-11-22T18:29:55Z",
      "side": 1,
      "message": "nit: I didn\u0027t see where this came from in the input.",
      "range": {
        "startLine": 57,
        "startChar": 13,
        "endLine": 58,
        "endChar": 56
      },
      "revId": "39f498abdc2489a3db364c03551f1cad42da8d21",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eaa49ef2_9de4d234",
        "filename": "services/data_decoder/public/interfaces/xml_parser.mojom",
        "patchSetId": 10
      },
      "lineNbr": 58,
      "author": {
        "id": 1002246
      },
      "writtenOn": "2017-11-27T21:09:51Z",
      "side": 1,
      "message": "Revisited that example, should be OK now.",
      "parentUuid": "22d504ba_083f07d9",
      "range": {
        "startLine": 57,
        "startChar": 13,
        "endLine": 58,
        "endChar": 56
      },
      "revId": "39f498abdc2489a3db364c03551f1cad42da8d21",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a3fa4319_d204248e",
        "filename": "services/data_decoder/xml_parser_fuzzer.cc",
        "patchSetId": 10
      },
      "lineNbr": 1,
      "author": {
        "id": 1149974
      },
      "writtenOn": "2017-11-22T19:31:03Z",
      "side": 1,
      "message": "nit: 2017",
      "range": {
        "startLine": 1,
        "startChar": 13,
        "endLine": 1,
        "endChar": 17
      },
      "revId": "39f498abdc2489a3db364c03551f1cad42da8d21",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "85ffa3e0_a91ecc62",
        "filename": "services/data_decoder/xml_parser_fuzzer.cc",
        "patchSetId": 10
      },
      "lineNbr": 1,
      "author": {
        "id": 1002246
      },
      "writtenOn": "2017-11-27T21:09:51Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a3fa4319_d204248e",
      "range": {
        "startLine": 1,
        "startChar": 13,
        "endLine": 1,
        "endChar": 17
      },
      "revId": "39f498abdc2489a3db364c03551f1cad42da8d21",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}