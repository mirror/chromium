{
  "comments": [
    {
      "key": {
        "uuid": "4a3adb5c_41578fe1",
        "filename": "media/gpu/android/fake_codec_allocator.cc",
        "patchSetId": 3
      },
      "lineNbr": 78,
      "author": {
        "id": 1119171
      },
      "writtenOn": "2017-05-23T19:49:19Z",
      "side": 1,
      "message": "By default this is a noisy mock: unexpected calls are not errors but they\u0027re logged as warnings.",
      "range": {
        "startLine": 78,
        "startChar": 23,
        "endLine": 78,
        "endChar": 31
      },
      "revId": "ca9973e8c7944567d64f23e98814a0617d930d7e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "00f8e979_147cedf7",
        "filename": "media/gpu/android/media_codec_video_decoder.cc",
        "patchSetId": 3
      },
      "lineNbr": 246,
      "author": {
        "id": 1130490
      },
      "writtenOn": "2017-05-23T20:13:38Z",
      "side": 1,
      "message": "you might want to split these up for clarity, since one has lots of caveats / needs to be fixed, while the other one is WAI.  in the WaitingForCodec case, we need to clear the bundle pointer and transition to the kSurfaceDestroyed state (along with most of the comment above about failed playback, since this is the \u0027lots of caveats\u0027 case).",
      "revId": "ca9973e8c7944567d64f23e98814a0617d930d7e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0fe30bb6_586f0c18",
        "filename": "media/gpu/android/media_codec_video_decoder.cc",
        "patchSetId": 3
      },
      "lineNbr": 246,
      "author": {
        "id": 1119171
      },
      "writtenOn": "2017-05-23T20:45:15Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "00f8e979_147cedf7",
      "revId": "ca9973e8c7944567d64f23e98814a0617d930d7e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "08332c05_3cc70b36",
        "filename": "media/gpu/android/media_codec_video_decoder.cc",
        "patchSetId": 3
      },
      "lineNbr": 257,
      "author": {
        "id": 1130490
      },
      "writtenOn": "2017-05-23T20:13:38Z",
      "side": 1,
      "message": "can this create multiple surface bundles for the same SurfaceTexture?  at least, i don\u0027t see where |surface_texture_| is ever replaced after init.\n\nit might be okay if we can guarantee that the previous surface bundle has already been destroyed.  however, if we ever post that surface bundle with codec release, and get a new codec, then i think that it\u0027s impossible to guarantee that.  it might be sitting on a codec allocator thread.",
      "revId": "ca9973e8c7944567d64f23e98814a0617d930d7e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "31f3b344_b96ccf4f",
        "filename": "media/gpu/android/media_codec_video_decoder.cc",
        "patchSetId": 3
      },
      "lineNbr": 257,
      "author": {
        "id": 1119171
      },
      "writtenOn": "2017-05-23T20:45:15Z",
      "side": 1,
      "message": "Yes, MCVD will need a permanent surface_texture so it can always fall back from overlays synchronously.  (ST creation is necessarily async in MCVD).\n\n\nI feel like we already have this same reusing ST problem in AVDA right? But yes, I\u0027d like to fix it at some point. It\u0027s not really possible right now.",
      "parentUuid": "08332c05_3cc70b36",
      "revId": "ca9973e8c7944567d64f23e98814a0617d930d7e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "97b76323_7c6a1afa",
        "filename": "media/gpu/android/media_codec_video_decoder.cc",
        "patchSetId": 3
      },
      "lineNbr": 257,
      "author": {
        "id": 1130490
      },
      "writtenOn": "2017-05-23T21:32:13Z",
      "side": 1,
      "message": "i don\u0027t think that AVDA has that problem (wow, those are not words i use often!).  InitializePictureBufferManager creates a new ST every time it needs one.\n\nre-using it means that we\u0027ll potentially wrap it up as a Surface twice, and hand each one to a different MC instance.  i have no idea what will happen in that case.\n\na solution would be to wrap up the same surface texture as new overlay(!) every time.  use CVV-style semantics such that it will only call OnSurfaceCreated when the previous overlay wrapper is deleted.  so, you\u0027d wrap the same ST, and it would call you back to let you know when it\u0027s safe to re-use it.\n\nthat\u0027s not something to do in this CL, but i think that we do need to have a plan to address it before going to far.",
      "parentUuid": "31f3b344_b96ccf4f",
      "revId": "ca9973e8c7944567d64f23e98814a0617d930d7e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "685559ef_cd407f12",
        "filename": "media/gpu/android/media_codec_video_decoder.cc",
        "patchSetId": 3
      },
      "lineNbr": 257,
      "author": {
        "id": 1119171
      },
      "writtenOn": "2017-05-23T21:57:08Z",
      "side": 1,
      "message": "Ah ok.\n\nYeah your suggestion sounds pretty good and similar to what I\u0027d imagined.",
      "parentUuid": "97b76323_7c6a1afa",
      "revId": "ca9973e8c7944567d64f23e98814a0617d930d7e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0b3a3624_494cc4c5",
        "filename": "media/gpu/android/media_codec_video_decoder.cc",
        "patchSetId": 3
      },
      "lineNbr": 258,
      "author": {
        "id": 1130490
      },
      "writtenOn": "2017-05-23T20:13:38Z",
      "side": 1,
      "message": "maybe if(!TransitionTo...) DCHECK(!media_codec_), to be sure that we released it.  or maybe the surface bundle, not sure which.",
      "revId": "ca9973e8c7944567d64f23e98814a0617d930d7e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "74bf7516_9c22f190",
        "filename": "media/gpu/android/media_codec_video_decoder.cc",
        "patchSetId": 3
      },
      "lineNbr": 258,
      "author": {
        "id": 1119171
      },
      "writtenOn": "2017-05-23T20:45:15Z",
      "side": 1,
      "message": "DCHECKing the result of calling one of our member functions is weird to me. Feels like code duplication/documentation duplication.",
      "parentUuid": "0b3a3624_494cc4c5",
      "revId": "ca9973e8c7944567d64f23e98814a0617d930d7e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9a490cc4_a0e93bfb",
        "filename": "media/gpu/android/media_codec_video_decoder.cc",
        "patchSetId": 3
      },
      "lineNbr": 258,
      "author": {
        "id": 1130490
      },
      "writtenOn": "2017-05-23T21:32:13Z",
      "side": 1,
      "message": "mostly, i don\u0027t like ignoring the return value in one of the two places that it\u0027s called.  seems like something\u0027s not right about the way Transition... is defined if we\u0027re ignoring it half the time.\n\nmaybe it shouldn\u0027t return anything, then, and DecodeOutput could return true immediately, unconditionally, after calling it, regardless of the outcome.  or, it could check |state_ \u003d\u003d kOk| or something and return otherwise.",
      "parentUuid": "74bf7516_9c22f190",
      "revId": "ca9973e8c7944567d64f23e98814a0617d930d7e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5d23be27_5448068c",
        "filename": "media/gpu/android/media_codec_video_decoder.cc",
        "patchSetId": 3
      },
      "lineNbr": 258,
      "author": {
        "id": 1119171
      },
      "writtenOn": "2017-05-23T21:57:08Z",
      "side": 1,
      "message": "Sounds good",
      "parentUuid": "9a490cc4_a0e93bfb",
      "revId": "ca9973e8c7944567d64f23e98814a0617d930d7e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f3024e3d_a00a5b76",
        "filename": "media/gpu/android_video_decode_accelerator_unittest.cc",
        "patchSetId": 3
      },
      "lineNbr": 150,
      "author": {
        "id": 1119171
      },
      "writtenOn": "2017-05-23T19:49:19Z",
      "side": 1,
      "message": "This is now a pointer so we can control the destruction sequence",
      "range": {
        "startLine": 150,
        "startChar": 4,
        "endLine": 150,
        "endChar": 20
      },
      "revId": "ca9973e8c7944567d64f23e98814a0617d930d7e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}