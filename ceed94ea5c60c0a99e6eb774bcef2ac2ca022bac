{
  "comments": [
    {
      "key": {
        "uuid": "d637eca2_1f71f38a",
        "filename": "ui/gl/gl_image_ahardwarebuffer.h",
        "patchSetId": 6
      },
      "lineNbr": 19,
      "author": {
        "id": 1000539
      },
      "writtenOn": "2017-12-19T00:04:18Z",
      "side": 1,
      "message": "do you need this? it\u0027s always false afaict",
      "range": {
        "startLine": 19,
        "startChar": 43,
        "endLine": 19,
        "endChar": 57
      },
      "revId": "ceed94ea5c60c0a99e6eb774bcef2ac2ca022bac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "409b4456_6859ef79",
        "filename": "ui/gl/gl_image_ahardwarebuffer.h",
        "patchSetId": 6
      },
      "lineNbr": 19,
      "author": {
        "id": 1230115
      },
      "writtenOn": "2017-12-19T09:53:06Z",
      "side": 1,
      "message": "|preserved| is true in the unit test. Indeed the image is created after the android buffer has been filled:\nhttps://chromium-review.googlesource.com/c/chromium/src/+/817563/6/ui/gl/gl_image_ahardwarebuffer_unittest.cc",
      "parentUuid": "d637eca2_1f71f38a",
      "range": {
        "startLine": 19,
        "startChar": 43,
        "endLine": 19,
        "endChar": 57
      },
      "revId": "ceed94ea5c60c0a99e6eb774bcef2ac2ca022bac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0dfe28d3_4442fc8a",
        "filename": "ui/gl/gl_image_ahardwarebuffer.h",
        "patchSetId": 6
      },
      "lineNbr": 19,
      "author": {
        "id": 1000539
      },
      "writtenOn": "2017-12-19T13:52:24Z",
      "side": 1,
      "message": "klausw@, what\u0027s the reason we\u0027re setting this differently for tests? it would be preferred to use the same code for tests and real usage.",
      "parentUuid": "409b4456_6859ef79",
      "range": {
        "startLine": 19,
        "startChar": 43,
        "endLine": 19,
        "endChar": 57
      },
      "revId": "ceed94ea5c60c0a99e6eb774bcef2ac2ca022bac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1b64a381_1ac57d03",
        "filename": "ui/gl/gl_image_ahardwarebuffer.h",
        "patchSetId": 6
      },
      "lineNbr": 19,
      "author": {
        "id": 1187745
      },
      "writtenOn": "2017-12-19T17:53:15Z",
      "side": 1,
      "message": "I think the \"preserved\" parameter is needed to support two different use cases:\n\n- write an image and pass it to an external consumer: preserved\u003dfalse, since the content will be overwritten anyway\n\n- read an image from an external producer: preserved\u003dtrue is required to access the existing image content\n\nCurrently, the unittest simulates the second use case. In the interest of having this layer be a fairly generic wrapper that exposes the underlying EGL functionality, I think it\u0027s helpful to keep the option.\n\nThe code that uses AHardwareBuffer-backed images for WebVR isn\u0027t ready yet, but if it helps it should be possible to have the unittest cover both scenarios.",
      "parentUuid": "0dfe28d3_4442fc8a",
      "range": {
        "startLine": 19,
        "startChar": 43,
        "endLine": 19,
        "endChar": 57
      },
      "revId": "ceed94ea5c60c0a99e6eb774bcef2ac2ca022bac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f6eb6b5b_bcbc2b09",
        "filename": "ui/gl/gl_image_ahardwarebuffer.h",
        "patchSetId": 6
      },
      "lineNbr": 19,
      "author": {
        "id": 1187745
      },
      "writtenOn": "2017-12-20T01:22:14Z",
      "side": 1,
      "message": "Just to be clear, the WebVR path I\u0027m currently working on does use the preserved\u003dtrue path. WebVR renders into an FBO backed by an AHardwareBuffer, and on the consumer side I need to rebind the AHardwareBuffer to a readable image for retrieving the rendered content, and the content needs to be preserved for that to work.",
      "parentUuid": "1b64a381_1ac57d03",
      "range": {
        "startLine": 19,
        "startChar": 43,
        "endLine": 19,
        "endChar": 57
      },
      "revId": "ceed94ea5c60c0a99e6eb774bcef2ac2ca022bac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cd6ea4a9_628dd47a",
        "filename": "ui/gl/gl_image_ahardwarebuffer.h",
        "patchSetId": 6
      },
      "lineNbr": 19,
      "author": {
        "id": 1000539
      },
      "writtenOn": "2017-12-20T03:26:40Z",
      "side": 1,
      "message": "Can we always use preserved\u003dtrue for now? or is the preserved\u003dfalse case something that is critical to support for performance?",
      "parentUuid": "f6eb6b5b_bcbc2b09",
      "range": {
        "startLine": 19,
        "startChar": 43,
        "endLine": 19,
        "endChar": 57
      },
      "revId": "ceed94ea5c60c0a99e6eb774bcef2ac2ca022bac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6455f9d7_1b762157",
        "filename": "ui/gl/gl_image_ahardwarebuffer.h",
        "patchSetId": 6
      },
      "lineNbr": 19,
      "author": {
        "id": 1187745
      },
      "writtenOn": "2017-12-20T03:41:09Z",
      "side": 1,
      "message": "Properly handling the preserved attribute is important for performance AFAIK, since preserving content for a new write buffer may involve a redundant expensive copy between main memory and tile memory. Can we please make the intended usage explicit instead of hoping the GPU can optimize despite giving it misleading hints?",
      "parentUuid": "cd6ea4a9_628dd47a",
      "range": {
        "startLine": 19,
        "startChar": 43,
        "endLine": 19,
        "endChar": 57
      },
      "revId": "ceed94ea5c60c0a99e6eb774bcef2ac2ca022bac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b10efd85_d7f087ad",
        "filename": "ui/gl/gl_image_ahardwarebuffer.h",
        "patchSetId": 6
      },
      "lineNbr": 19,
      "author": {
        "id": 1000539
      },
      "writtenOn": "2017-12-20T04:00:01Z",
      "side": 1,
      "message": "sure, just wanted to make sure this was actually needed and not an accident.",
      "parentUuid": "6455f9d7_1b762157",
      "range": {
        "startLine": 19,
        "startChar": 43,
        "endLine": 19,
        "endChar": 57
      },
      "revId": "ceed94ea5c60c0a99e6eb774bcef2ac2ca022bac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "89c3beac_cbc9bfdc",
        "filename": "ui/gl/gl_image_ahardwarebuffer.h",
        "patchSetId": 6
      },
      "lineNbr": 19,
      "author": {
        "id": 1187745
      },
      "writtenOn": "2017-12-20T04:05:40Z",
      "side": 1,
      "message": "Thank you! I was just getting worried about a potential performance regression before even getting a chance to land the code that uses this ;-)",
      "parentUuid": "b10efd85_d7f087ad",
      "range": {
        "startLine": 19,
        "startChar": 43,
        "endLine": 19,
        "endChar": 57
      },
      "revId": "ceed94ea5c60c0a99e6eb774bcef2ac2ca022bac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "56d0c131_204188d2",
        "filename": "ui/gl/gl_image_native_pixmap.h",
        "patchSetId": 6
      },
      "lineNbr": 25,
      "author": {
        "id": 1000539
      },
      "writtenOn": "2017-12-19T00:04:18Z",
      "side": 1,
      "message": "why is this added as part of this CL? seems like that belongs in a different patch. surprising to see as CL description suggest that this is refactor only change.",
      "revId": "ceed94ea5c60c0a99e6eb774bcef2ac2ca022bac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "01289177_11d6172f",
        "filename": "ui/gl/gl_image_native_pixmap.h",
        "patchSetId": 6
      },
      "lineNbr": 25,
      "author": {
        "id": 1230115
      },
      "writtenOn": "2017-12-19T09:53:06Z",
      "side": 1,
      "message": "It is a consequence of GLImageEGL::Initialize being moved from public to protected. It is similar as as GLImageAHardwareBuffer::Initialize https://chromium-review.googlesource.com/c/chromium/src/+/817563/6/ui/gl/gl_image_ahardwarebuffer.h, the code would not compile otherwise, see https://chromium-review.googlesource.com/c/chromium/src/+/817563/6/ui/gl/gl_image_native_pixmap_unittest.cc",
      "parentUuid": "56d0c131_204188d2",
      "revId": "ceed94ea5c60c0a99e6eb774bcef2ac2ca022bac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "940691bf_eb519da3",
        "filename": "ui/gl/gl_image_native_pixmap.h",
        "patchSetId": 6
      },
      "lineNbr": 25,
      "author": {
        "id": 1000539
      },
      "writtenOn": "2017-12-19T13:52:24Z",
      "side": 1,
      "message": "ok, missed that we started using EGL_GL_TEXTURE_2D_KHR. maybe change the name of the function to InitializeFromTexture , otherwise good.",
      "parentUuid": "01289177_11d6172f",
      "revId": "ceed94ea5c60c0a99e6eb774bcef2ac2ca022bac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7ec773c5_053aaace",
        "filename": "ui/gl/gl_image_native_pixmap.h",
        "patchSetId": 6
      },
      "lineNbr": 25,
      "author": {
        "id": 1230115
      },
      "writtenOn": "2017-12-19T16:57:36Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "940691bf_eb519da3",
      "revId": "ceed94ea5c60c0a99e6eb774bcef2ac2ca022bac",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}