{
  "comments": [
    {
      "key": {
        "uuid": "b0be8707_f4d8edde",
        "filename": "ui/wm/core/window_animations.cc",
        "patchSetId": 1
      },
      "lineNbr": 148,
      "author": {
        "id": 1000763
      },
      "writtenOn": "2017-08-18T21:20:13Z",
      "side": 1,
      "message": "This seems like a common thing to do want to do and it seems worth making it easier. Could client code (like used here) be something like:\n\nhiding_settings.layer_animation_settings()-\u003eSetAnimationMetricsReporter(\n  AnimationMetricsReporter::GetReporter(\"Ash.Window.AnimationSmoothness.Hide\"))?\n\nI\u0027m not implying the code needs to be exactly this, just that having to subclass and maintain a lazy instance is heavy. Can\u0027t it be easier?",
      "range": {
        "startLine": 148,
        "startChar": 0,
        "endLine": 148,
        "endChar": 73
      },
      "revId": "2b7429fdf796b6856ee313a4c05b33babca9b26e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fbe7c438_a641b68f",
        "filename": "ui/wm/core/window_animations.cc",
        "patchSetId": 1
      },
      "lineNbr": 148,
      "author": {
        "id": 1228419
      },
      "writtenOn": "2017-08-18T22:22:11Z",
      "side": 1,
      "message": "Thanks. Your suggestion would simplify the client a lot.\n\nTalked with varkha@ offline.\nI think the only concern when varkha@ introduced the reporter [1] is that because some animation is called so often, we try not interrupt with the animation and \"simplicity would win (and avoid some non-trivial instantiation and reconstitution costs for the histogram objects)\".\n\nActually we need to instance the reporter for every animation, and might need to create the histogram object for every animation. UMA_HISTOGRAM_PERCENTAGE will call base::LinearHistogram::FactoryGet. We do not know if the histogram object could be cached or not.\n\nBut on the other hand, we can simplify the override function to take Report(string uma_name, int value), so that we can only have one global AnimationMetricsReporter in ChromeOS? Not one lazy instance for each kind of reporter?\n\nWDYT? varkha@ could you please add more if I am missing something.\n\n[1] https://codereview.chromium.org/2631333002#msg62",
      "parentUuid": "b0be8707_f4d8edde",
      "range": {
        "startLine": 148,
        "startChar": 0,
        "endLine": 148,
        "endChar": 73
      },
      "revId": "2b7429fdf796b6856ee313a4c05b33babca9b26e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "071a0add_a33352db",
        "filename": "ui/wm/core/window_animations.cc",
        "patchSetId": 1
      },
      "lineNbr": 148,
      "author": {
        "id": 1228419
      },
      "writtenOn": "2017-08-18T22:33:01Z",
      "side": 1,
      "message": "Hi sky@, if we plan to do some big refactor to change the reporter, would that be ok I do it in another cl?\n\nWe plan to merge this cl to M61, so that we can use the UMA to evaluate how much performance improvement we can achieve by caching render surface in hiding window animation, another cl you are reviewing (https://chromium-review.googlesource.com/c/620132)",
      "parentUuid": "fbe7c438_a641b68f",
      "range": {
        "startLine": 148,
        "startChar": 0,
        "endLine": 148,
        "endChar": 73
      },
      "revId": "2b7429fdf796b6856ee313a4c05b33babca9b26e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4f6fd642_ef6fce17",
        "filename": "ui/wm/core/window_animations.cc",
        "patchSetId": 1
      },
      "lineNbr": 148,
      "author": {
        "id": 1000763
      },
      "writtenOn": "2017-08-19T21:03:28Z",
      "side": 1,
      "message": "Is there a compelling reason not to do the refactor first?",
      "parentUuid": "071a0add_a33352db",
      "range": {
        "startLine": 148,
        "startChar": 0,
        "endLine": 148,
        "endChar": 73
      },
      "revId": "2b7429fdf796b6856ee313a4c05b33babca9b26e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "194e83be_2bd2d437",
        "filename": "ui/wm/core/window_animations.cc",
        "patchSetId": 1
      },
      "lineNbr": 148,
      "author": {
        "id": 1002647
      },
      "writtenOn": "2017-08-21T16:07:18Z",
      "side": 1,
      "message": "Using base::LinearHistogram::FactoryGet (e.g. [1]) for the window hiding animation should be fine. I would be more worried though to use it when we have potentially many windows going through a sequence of animations and invoking FactoryGet dozens or more times for each user action (which is the case with overview mode). There I\u0027d rather stick to a lazy instance that ensures we only keep one histogram object around and don\u0027t recreate it multiple times.\nFor this CL - using FactoryGet() should not be any more complicated so the change could still make it and be mergeable in M-61. The only trick is to find a good object with the right lifetime (extending till the end of the animation) to tuck the reporter in it.\n\n[1] -  https://cs.chromium.org/chromium/src/chrome/browser/previews/previews_infobar_delegate.cc?type\u003dcs\u0026l\u003d48",
      "parentUuid": "4f6fd642_ef6fce17",
      "range": {
        "startLine": 148,
        "startChar": 0,
        "endLine": 148,
        "endChar": 73
      },
      "revId": "2b7429fdf796b6856ee313a4c05b33babca9b26e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "374b1013_d541cf89",
        "filename": "ui/wm/core/window_animations.cc",
        "patchSetId": 1
      },
      "lineNbr": 148,
      "author": {
        "id": 1002647
      },
      "writtenOn": "2017-08-21T16:07:18Z",
      "side": 1,
      "message": "A single lazy instance wouldn\u0027t work, the way histograms work you either need to create a real histogram object on the fly with base::LinearHistogram::FactoryGet() (every time) or instantiate a separate histogram object for each UMA path (and then the path needs to be compile time constant). This is intentional in the histogram design. See a comment at https://cs.chromium.org/chromium/src/base/metrics/histogram_macros.h?type\u003dcs\u0026l\u003d23",
      "parentUuid": "071a0add_a33352db",
      "range": {
        "startLine": 148,
        "startChar": 0,
        "endLine": 148,
        "endChar": 73
      },
      "revId": "2b7429fdf796b6856ee313a4c05b33babca9b26e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}