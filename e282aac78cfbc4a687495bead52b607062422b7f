{
  "comments": [
    {
      "key": {
        "uuid": "f8b4ad8e_d717bb94",
        "filename": "base/allocator/partition_allocator/partition_alloc.cc",
        "patchSetId": 8
      },
      "lineNbr": 1212,
      "author": {
        "id": 1128439
      },
      "writtenOn": "2017-11-14T19:40:11Z",
      "side": 1,
      "message": "This is the biggest change I had to make. Note that unprovision_bytes can only be set by the code inside of \"if (truncated_slots)\". Therefore it is more logical (and also allows us to reduce the scope of three variables) to move \"if (unprovisioned_bytes \u0026\u0026 discard) {\" into the same block. This then avoids variable shadowing on begin_ptr and end_ptr.",
      "revId": "e282aac78cfbc4a687495bead52b607062422b7f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c241662a_e298c416",
        "filename": "base/files/memory_mapped_file_win.cc",
        "patchSetId": 8
      },
      "lineNbr": 77,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-11-14T23:38:00Z",
      "side": 1,
      "message": "Huh, I wonder why we static cast here...",
      "revId": "e282aac78cfbc4a687495bead52b607062422b7f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "17e47b4a_07d0b09a",
        "filename": "base/files/memory_mapped_file_win.cc",
        "patchSetId": 8
      },
      "lineNbr": 77,
      "author": {
        "id": 1160859
      },
      "writtenOn": "2017-11-14T23:45:55Z",
      "side": 1,
      "message": "up-cast to make sure signed-ness is right for the IsValueInRangeForNumericType... is this not needed? I think perhaps a warning is generated if signed/unsigned conversion otherwise.\n\nFWIW I think this check is completely optimized out on 64-bit platforms (I haven\u0027t checked the asm though).",
      "parentUuid": "c241662a_e298c416",
      "revId": "e282aac78cfbc4a687495bead52b607062422b7f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "129b1b60_d11dd9c6",
        "filename": "base/files/memory_mapped_file_win.cc",
        "patchSetId": 8
      },
      "lineNbr": 77,
      "author": {
        "id": 1128439
      },
      "writtenOn": "2017-11-15T00:20:21Z",
      "side": 1,
      "message": "I also assume that the checks go away in 64-bit builds. If not we can blame Justin (if we care). \n\nBut presumably if we passed in a signed type then IsValueInRangeForNumericType would be handle that, including doing its own check for values \u003c 0 (which are obviously out of range for SIZE_T). I\u0027m not sure that is an important change, and it feels separate anyway.",
      "parentUuid": "17e47b4a_07d0b09a",
      "revId": "e282aac78cfbc4a687495bead52b607062422b7f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "88461370_30389252",
        "filename": "base/files/memory_mapped_file_win.cc",
        "patchSetId": 8
      },
      "lineNbr": 77,
      "author": {
        "id": 1160859
      },
      "writtenOn": "2017-11-15T00:21:32Z",
      "side": 1,
      "message": "I\u0027m happy to fix this in a follow-up CL since I touched this last.",
      "parentUuid": "129b1b60_d11dd9c6",
      "revId": "e282aac78cfbc4a687495bead52b607062422b7f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7839778f_bfe282b4",
        "filename": "base/process/process_iterator_mac.cc",
        "patchSetId": 8
      },
      "lineNbr": 60,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-11-14T23:38:00Z",
      "side": 1,
      "message": "Nit: maybe we don\u0027t need to set this? Otherwise, it looks like we actually care about this value later (which presumably we don\u0027t due to the shadowing)",
      "revId": "e282aac78cfbc4a687495bead52b607062422b7f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c6356e3b_62c0589e",
        "filename": "base/process/process_iterator_mac.cc",
        "patchSetId": 8
      },
      "lineNbr": 60,
      "author": {
        "id": 1128439
      },
      "writtenOn": "2017-11-15T00:20:21Z",
      "side": 1,
      "message": "It\u0027s used on the next line to size the vector to exactly the right size. The variable then falls out of scope.\n\nI decided that reuse was appropriate here because the semantics/usage are identical - they really *are* the same variable.",
      "parentUuid": "7839778f_bfe282b4",
      "revId": "e282aac78cfbc4a687495bead52b607062422b7f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b3eae583_981fbd67",
        "filename": "base/threading/sequenced_worker_pool.cc",
        "patchSetId": 8
      },
      "lineNbr": 751,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2017-11-14T23:38:00Z",
      "side": 1,
      "message": "Similarly, I\u0027m wondering if this should just check the member field directly here.",
      "revId": "e282aac78cfbc4a687495bead52b607062422b7f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "915eaebb_32ebceb8",
        "filename": "base/threading/sequenced_worker_pool.cc",
        "patchSetId": 8
      },
      "lineNbr": 751,
      "author": {
        "id": 1128439
      },
      "writtenOn": "2017-11-15T00:20:21Z",
      "side": 1,
      "message": "We can\u0027t because we\u0027ve just moved from sequenced so it is in an indeterminate state.\n\nMy calculation was that the two shutdown_behavior locals were really the same variable and were just accidentally created as different objects, which is why I reused.",
      "parentUuid": "b3eae583_981fbd67",
      "revId": "e282aac78cfbc4a687495bead52b607062422b7f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}