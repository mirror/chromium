{
  "comments": [
    {
      "key": {
        "uuid": "38e38bbe_a0e7095e",
        "filename": "services/audio/public/cpp/audio_device_description_struct_traits.h",
        "patchSetId": 17
      },
      "lineNbr": 28,
      "author": {
        "id": 1002808
      },
      "writtenOn": "2017-12-13T22:09:29Z",
      "side": 1,
      "message": "nit: please define out-of-line - you can list the cc file in the sources variable within the typemap",
      "revId": "e4539833286b4f75212c3691f0bc690fe820954a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "649a3ba6_8321585a",
        "filename": "services/audio/public/cpp/audio_device_description_struct_traits.h",
        "patchSetId": 17
      },
      "lineNbr": 28,
      "author": {
        "id": 1153409
      },
      "writtenOn": "2018-01-10T22:50:18Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "38e38bbe_a0e7095e",
      "revId": "e4539833286b4f75212c3691f0bc690fe820954a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4700b407_0dc2cb3e",
        "filename": "services/audio/public/cpp/audio_system_to_mojo_adapter.h",
        "patchSetId": 17
      },
      "lineNbr": 20,
      "author": {
        "id": 1002808
      },
      "writtenOn": "2017-12-13T22:09:29Z",
      "side": 1,
      "message": "Since this is public client library API surface, could you elaborate on this a bit? When, why, how does one use this class?",
      "revId": "e4539833286b4f75212c3691f0bc690fe820954a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dfad727c_8bb40083",
        "filename": "services/audio/public/cpp/audio_system_to_mojo_adapter.h",
        "patchSetId": 17
      },
      "lineNbr": 20,
      "author": {
        "id": 1153409
      },
      "writtenOn": "2018-01-10T22:50:18Z",
      "side": 1,
      "message": "It\u0027s media::AudioSystem implementation and it should be used according to media::AudioSystem contract. I added a note on what happens if service connection is lost. To me it looks sufficient. WDYT?",
      "parentUuid": "4700b407_0dc2cb3e",
      "revId": "e4539833286b4f75212c3691f0bc690fe820954a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "369c7351_2b1405fd",
        "filename": "services/audio/public/cpp/audio_system_to_mojo_adapter.h",
        "patchSetId": 17
      },
      "lineNbr": 21,
      "author": {
        "id": 1002808
      },
      "writtenOn": "2017-12-13T22:09:29Z",
      "side": 1,
      "message": "nit: Can we call it AudioSystemToServiceAdapter? We try to avoid introducing new \"WhateverMojo\" names unless there\u0027s a serious problem with ambiguity.",
      "revId": "e4539833286b4f75212c3691f0bc690fe820954a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3137ad31_81c44426",
        "filename": "services/audio/public/cpp/audio_system_to_mojo_adapter.h",
        "patchSetId": 17
      },
      "lineNbr": 21,
      "author": {
        "id": 1153409
      },
      "writtenOn": "2018-01-10T22:50:18Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "369c7351_2b1405fd",
      "revId": "e4539833286b4f75212c3691f0bc690fe820954a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cde96e22_6ce991e3",
        "filename": "services/audio/public/cpp/audio_system_to_mojo_adapter.h",
        "patchSetId": 17
      },
      "lineNbr": 23,
      "author": {
        "id": 1002808
      },
      "writtenOn": "2017-12-13T22:09:29Z",
      "side": 1,
      "message": "personal style nit: of course you\u0027ll have your own owners in services/audio and can do whatever you want, but I am generally not a fan of the use of \"cb\" as an abbreviation for \"callback\" and I\u0027d prefer we just write out BindSystemInfoCallback.\n\nI see this kind of abbreviation pretty much exclusively within src/media and nowhere else in the repository; I would prefer not to start introducing it in src/services.\n\n(edit: this comment is no longer relevant given the comment below, but I decided to leave it for posterity) :)",
      "revId": "e4539833286b4f75212c3691f0bc690fe820954a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "757b334c_04dcbc93",
        "filename": "services/audio/public/cpp/audio_system_to_mojo_adapter.h",
        "patchSetId": 17
      },
      "lineNbr": 23,
      "author": {
        "id": 1153409
      },
      "writtenOn": "2017-12-14T23:41:54Z",
      "side": 1,
      "message": "Makes sense, we\u0027ll go for FooCallback in the service.",
      "parentUuid": "cde96e22_6ce991e3",
      "revId": "e4539833286b4f75212c3691f0bc690fe820954a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "669e528e_641f1a85",
        "filename": "services/audio/public/cpp/audio_system_to_mojo_adapter.h",
        "patchSetId": 17
      },
      "lineNbr": 23,
      "author": {
        "id": 1153409
      },
      "writtenOn": "2018-01-10T22:50:18Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "757b334c_04dcbc93",
      "revId": "e4539833286b4f75212c3691f0bc690fe820954a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6e906f60_35ca36a1",
        "filename": "services/audio/public/cpp/audio_system_to_mojo_adapter.h",
        "patchSetId": 17
      },
      "lineNbr": 29,
      "author": {
        "id": 1002808
      },
      "writtenOn": "2017-12-13T22:09:29Z",
      "side": 1,
      "message": "Please construct this over a service_manager::Connector* (or actually, probably a unique_ptr\u003cConnector\u003e so there are no lifetime/ownership concerns) instead of a callback that binds a single interface. It\u0027s then much clearer what the point of the argument is since this is idiomatic design for a service client library.\n\nNote that you can still test the class fairly easily as we provide ways to override connector behavior. The most reasonable option given your current tests would probably be to use the Connector testing API in your test fixture setup:\n\n\n  service_manager::ConnectorRequest ignored_request;\n  auto connector \u003d service_manager::Connector::Create(\u0026ignored_request);\n  service_manager::Connector::TestApi connector_test_api(\n      connector.get());\n  connector_test_api.OverrideBinderForTesting(\n      audio::mojom::kServiceName,\n      audio::mojom::SystemInfo::Name_,\n      base::Bind(.../* the callback you want to use to handle it*/));\n  ...make_unique\u003cAudioSystemToServiceAdaptor\u003e(std::move(connector))...;\n\n\nNow you have an idiomatic client library API and a test fixture which sufficiently hooks into the system.",
      "revId": "e4539833286b4f75212c3691f0bc690fe820954a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a56aabf0_adcd145e",
        "filename": "services/audio/public/cpp/audio_system_to_mojo_adapter.h",
        "patchSetId": 17
      },
      "lineNbr": 29,
      "author": {
        "id": 1153409
      },
      "writtenOn": "2017-12-14T23:41:54Z",
      "side": 1,
      "message": "Agree that unique_ptr\u003cConnector\u003e should be used to construct it.\nI\u0027m having a problem with \"OverrideBinderForTesting\" though: as soon as I close the binding at services/audio/test/audio_system_to_mojo_adapter_test.cc:243, the connector becomes unusable. Is there a way here to simulate a situation when the client code looses connection to the service and then re-connects?",
      "parentUuid": "6e906f60_35ca36a1",
      "revId": "e4539833286b4f75212c3691f0bc690fe820954a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "73d9e485_3a598a33",
        "filename": "services/audio/public/cpp/audio_system_to_mojo_adapter.h",
        "patchSetId": 17
      },
      "lineNbr": 29,
      "author": {
        "id": 1002808
      },
      "writtenOn": "2017-12-19T17:55:15Z",
      "side": 1,
      "message": "Sorry, I don\u0027t follow. What do you mean when you say the connector becomes unusable at that point? There is no link whatsoever between the Connector and the SystemInfo binding.\n\nSurely you can still call BindInterface on it, and surely the registered binder override must still be invoked? What does the callback do?\n\nIf you Clone the connector at any point, you do have to re-register your override on the clone, but I didn\u0027t see that happening.",
      "parentUuid": "a56aabf0_adcd145e",
      "revId": "e4539833286b4f75212c3691f0bc690fe820954a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7bcd5e0b_1eb7840f",
        "filename": "services/audio/public/cpp/audio_system_to_mojo_adapter.h",
        "patchSetId": 17
      },
      "lineNbr": 29,
      "author": {
        "id": 1153409
      },
      "writtenOn": "2017-12-19T18:53:56Z",
      "side": 1,
      "message": "Sorry I was unclear.\n\nSo what I do in audio_system_to_mojo_adapter_test.cc to simulate \"service shutdown\" even is I call (probably incorrectly?)\nsystem_info_binding_-\u003eClose();\n\nIf I use OverrideBinderForTesting instead of using a binding callback:\nAfter binding closed the pipe and the client code attempts to bind again, Connector::BindConnectorIfNecessary() does not perform binding any more: it does an early return at [1] instead because (!unbound_state_.is_valid()) resolves to true.\n\nThe comment there says:\n      // It\u0027s possible to get here when the link to the service manager has been\n      // severed (and so the connector pipe has been closed) but the app has\n      // chosen not to quit.\n\nSo after binding is closed the connector becomes unusable.\nAm I doing something wrong?\n\n[1] https://cs.chromium.org/chromium/src/services/service_manager/public/cpp/connector.cc?type\u003dcs\u0026sq\u003dpackage:chromium\u0026l\u003d175",
      "parentUuid": "73d9e485_3a598a33",
      "revId": "e4539833286b4f75212c3691f0bc690fe820954a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "93c5f982_eb64555c",
        "filename": "services/audio/public/cpp/audio_system_to_mojo_adapter.h",
        "patchSetId": 17
      },
      "lineNbr": 29,
      "author": {
        "id": 1002808
      },
      "writtenOn": "2017-12-19T18:56:28Z",
      "side": 1,
      "message": "Ohhh. That is a bug in Connector. I think the overrides should clearly be consulted before (and if there\u0027s a hit, in exclusion to) the BindConnectorIfNecessary test. I would happily LGTM that if you made that change here. :)",
      "parentUuid": "7bcd5e0b_1eb7840f",
      "revId": "e4539833286b4f75212c3691f0bc690fe820954a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "674e990a_cde1cdbc",
        "filename": "services/audio/public/cpp/audio_system_to_mojo_adapter.h",
        "patchSetId": 17
      },
      "lineNbr": 29,
      "author": {
        "id": 1153409
      },
      "writtenOn": "2017-12-19T19:04:17Z",
      "side": 1,
      "message": "Aha I see! Will do, thanks!",
      "parentUuid": "93c5f982_eb64555c",
      "revId": "e4539833286b4f75212c3691f0bc690fe820954a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e4c0e5ca_d197851a",
        "filename": "services/audio/public/cpp/audio_system_to_mojo_adapter.h",
        "patchSetId": 17
      },
      "lineNbr": 29,
      "author": {
        "id": 1153409
      },
      "writtenOn": "2018-01-10T22:50:18Z",
      "side": 1,
      "message": "Done - is the fix correct?",
      "parentUuid": "674e990a_cde1cdbc",
      "revId": "e4539833286b4f75212c3691f0bc690fe820954a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7718df27_4571d357",
        "filename": "services/audio/public/interfaces/system_info.mojom",
        "patchSetId": 17
      },
      "lineNbr": 14,
      "author": {
        "id": 1002808
      },
      "writtenOn": "2017-12-13T22:09:29Z",
      "side": 1,
      "message": "Where does a device id string come from?  Is this the unique_id field in an AudioDeviceDescription returned by GetDeviceDescriptions? Could we make the names congruent?\n\nAlso, is AudioParameters potentially a very large amount of data? Any reason GetDeviceDescriptions AudioDeviceDescription couldn\u0027t just always include any available input/output stream params for a device?",
      "revId": "e4539833286b4f75212c3691f0bc690fe820954a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e0f8e0a8_6769be5a",
        "filename": "services/audio/public/interfaces/system_info.mojom",
        "patchSetId": 17
      },
      "lineNbr": 14,
      "author": {
        "id": 1153409
      },
      "writtenOn": "2017-12-14T23:41:54Z",
      "side": 1,
      "message": "device_id and unique_id are different. Unique id of the device is the id assigned to it by the platform, and device id can be either a unique id or a special id like \"default\"/\"loopback\". These are media/audio concepts, so I should probably clarify them here.\n\n\nSystemInfo interface is far from ideal and there is quite a bit of redundancy in it.\nThere are several considerations here:\n\n(1) To obtain each piece of information - such as device id, audio parameters, device association - AudioManager (which is wrapped by AudioService) requires a call/multiple calls into platform audio layer (which may end up as system calls as well). We really don\u0027t want to retrieve information which the caller is not interested in.\n\n(2) On the other hand, we don\u0027t want to make atomic requests such as combining device description out of 3 calls to the service: we\u0027ll end up with enormous amount of IPC calls to just enumerate audio devices, which is caused by (3):\n\n(3) Current media::AudioSystem usage in the browser process is complicated, a large refactoring is needed to optimize it. There is some ongoing work there, but we don\u0027t want to be blocked by it. We have far more work to do with the service and no extra resources.\n\nStrategically, the reason why WebRTC team allocated resources for audio servicification work is to enable running platform audio out of process - for fault isolation, fault tolerance and enabling the move of audio processing code closer to hardware. So we have to balance perfection of the design (which I would love to have!) with reaching our goals in a reasonable amount of time.",
      "parentUuid": "7718df27_4571d357",
      "revId": "e4539833286b4f75212c3691f0bc690fe820954a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d328ee84_49bb790a",
        "filename": "services/audio/public/interfaces/system_info.mojom",
        "patchSetId": 17
      },
      "lineNbr": 14,
      "author": {
        "id": 1002808
      },
      "writtenOn": "2017-12-19T17:55:15Z",
      "side": 1,
      "message": "That\u0027s fair. I don\u0027t think we need to chase perfection right out of the gate, but I want to make sure we can actually rationalize our interface decisions when possible. SGTM",
      "parentUuid": "e0f8e0a8_6769be5a",
      "revId": "e4539833286b4f75212c3691f0bc690fe820954a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c3457698_6dc2f63d",
        "filename": "services/audio/public/interfaces/system_info.mojom",
        "patchSetId": 17
      },
      "lineNbr": 23,
      "author": {
        "id": 1002808
      },
      "writtenOn": "2017-12-13T22:09:29Z",
      "side": 1,
      "message": "In the spirit of minimizing API surface, couldn\u0027t a user just call GetDeviceDescriptions() and look at the response for empty vs non-empty? Or do these Has*Devices methods need to be called at such high frequency that we would be worried about message overhead from too much GetDeviceDescriptions response data?\n\nOr better yet, will anyone realistically ever call Has*Devices without also immediately calling GetDeviceDescriptions if/when the former responds with true?",
      "revId": "e4539833286b4f75212c3691f0bc690fe820954a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8cdd5c15_2e49806e",
        "filename": "services/audio/public/interfaces/system_info.mojom",
        "patchSetId": 17
      },
      "lineNbr": 23,
      "author": {
        "id": 1153409
      },
      "writtenOn": "2017-12-14T23:41:54Z",
      "side": 1,
      "message": "Same as above: the cost to retrieve the data and the cost of refactoring the client code.\n\nHas*Devices is called in a couple of places, and device descriptions are never retrieved by that code :-/.\n\nWe have plans/ideas for improving media::AudioSystem/audio::mojom::SystemInfo, but cannot afford that now. At this point, we just move media::AudioSystem implementation to Mojo: SystemInfo mimics media::AudioSystem.",
      "parentUuid": "c3457698_6dc2f63d",
      "revId": "e4539833286b4f75212c3691f0bc690fe820954a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "194137ef_ea28411b",
        "filename": "services/audio/public/interfaces/system_info.mojom",
        "patchSetId": 17
      },
      "lineNbr": 23,
      "author": {
        "id": 1002808
      },
      "writtenOn": "2017-12-19T17:55:15Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "8cdd5c15_2e49806e",
      "revId": "e4539833286b4f75212c3691f0bc690fe820954a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dca0c904_6a661d68",
        "filename": "services/audio/public/interfaces/system_info.mojom",
        "patchSetId": 17
      },
      "lineNbr": 36,
      "author": {
        "id": 1002808
      },
      "writtenOn": "2017-12-13T22:09:29Z",
      "side": 1,
      "message": "Is the ID really useful on its own or could this just return the AudioDeviceDescription? Also either way, the response value should probably be nullable so \"none\" be null instead of empty.",
      "revId": "e4539833286b4f75212c3691f0bc690fe820954a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "58a991a7_7da98021",
        "filename": "services/audio/public/interfaces/system_info.mojom",
        "patchSetId": 17
      },
      "lineNbr": 36,
      "author": {
        "id": 1153409
      },
      "writtenOn": "2017-12-14T23:41:54Z",
      "side": 1,
      "message": "Re:AudioDeviceDescription - see above.\nWe can make it nullable, however for the client code an empty string in this case makes a perfect sense now, and AudioManager returns us an empty string in this case. So we\u0027ll be converting a empty string to nullopt and the client code will map it back to an empty string.\nSo it will give us a conceptual correctness but no real value.\n\nHow strongly do you feel about it?\nI would prefer to avoid spending time on this now (taking into account how non-beautiful this interface already is)",
      "parentUuid": "dca0c904_6a661d68",
      "revId": "e4539833286b4f75212c3691f0bc690fe820954a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "76707c4c_e7823a87",
        "filename": "services/audio/public/interfaces/system_info.mojom",
        "patchSetId": 17
      },
      "lineNbr": 36,
      "author": {
        "id": 1153409
      },
      "writtenOn": "2017-12-19T13:50:32Z",
      "side": 1,
      "message": "Actually, my comment here is no longer valid - magically, the client code has just been refactored to use optional :) So I\u0027m waiting for the last CL there [1] to land and will rebase and update the interface.\n\n[1] https://chromium-review.googlesource.com/c/chromium/src/+/833828",
      "parentUuid": "58a991a7_7da98021",
      "revId": "e4539833286b4f75212c3691f0bc690fe820954a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2f00208b_1720028b",
        "filename": "services/audio/public/interfaces/system_info.mojom",
        "patchSetId": 17
      },
      "lineNbr": 36,
      "author": {
        "id": 1002808
      },
      "writtenOn": "2017-12-19T17:55:15Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "76707c4c_e7823a87",
      "revId": "e4539833286b4f75212c3691f0bc690fe820954a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4e2c8988_b322945b",
        "filename": "services/audio/public/interfaces/system_info.mojom",
        "patchSetId": 17
      },
      "lineNbr": 36,
      "author": {
        "id": 1153409
      },
      "writtenOn": "2018-01-10T22:50:18Z",
      "side": 1,
      "message": "So now Optionals are used for replies everywhere.\nThe only redundancy left is GetInputDeviceInfo() which is a combination of GetInputStremParameters() and GetAssociatedOutputDeviceID().\nIt\u0027s quite easy to get rid of it code-wise - it\u0027s called in 1 place in the client code. But it will cost us an extra IPC between the browser and the service. It\u0027s not a very frequent call, but I would prefer to leave this tradeoff decision (and dependency on it) outside of this CL. So if you don\u0027t mind we could keep is like this for now and file a follow-up bug to potentially get rid of GetInputDeviceInfo().",
      "parentUuid": "2f00208b_1720028b",
      "revId": "e4539833286b4f75212c3691f0bc690fe820954a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d88ed162_d6f12ea3",
        "filename": "services/audio/public/interfaces/system_info.mojom",
        "patchSetId": 17
      },
      "lineNbr": 36,
      "author": {
        "id": 1002808
      },
      "writtenOn": "2018-01-10T23:01:03Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "4e2c8988_b322945b",
      "revId": "e4539833286b4f75212c3691f0bc690fe820954a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7532de81_d744391c",
        "filename": "services/audio/service.cc",
        "patchSetId": 17
      },
      "lineNbr": 16,
      "author": {
        "id": 1002808
      },
      "writtenOn": "2017-12-13T22:09:29Z",
      "side": 1,
      "message": "As this Service is currently implemented, it will never quit once started. That\u0027s potentially just fine and I wouldn\u0027t consider it a blocking issue for this CL, but I want to make sure it\u0027s clear in case that was not the intent.",
      "revId": "e4539833286b4f75212c3691f0bc690fe820954a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e6f482e3_f6283316",
        "filename": "services/audio/service.cc",
        "patchSetId": 17
      },
      "lineNbr": 16,
      "author": {
        "id": 1153409
      },
      "writtenOn": "2017-12-14T23:41:54Z",
      "side": 1,
      "message": "Yes, it\u0027s a conscious choice for this CL.\nSince it\u0027s in-process now and a pass-through to AudioManager, it\u0027s not a big deal to keep it always running.\nI have tear down logic code in the pipeline, but since it requires another couple of hundreds lines of tests I\u0027ll make a follow-up CL to keep this one smaller. (I have this in a list of TODO items in the CL description)",
      "parentUuid": "7532de81_d744391c",
      "revId": "e4539833286b4f75212c3691f0bc690fe820954a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cfb465e2_a2a8cbcb",
        "filename": "services/audio/service.cc",
        "patchSetId": 17
      },
      "lineNbr": 16,
      "author": {
        "id": 1002808
      },
      "writtenOn": "2017-12-19T17:55:15Z",
      "side": 1,
      "message": "Makes sense!",
      "parentUuid": "e6f482e3_f6283316",
      "revId": "e4539833286b4f75212c3691f0bc690fe820954a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b498e2aa_50c3ab6a",
        "filename": "services/audio/service.cc",
        "patchSetId": 17
      },
      "lineNbr": 46,
      "author": {
        "id": 1002808
      },
      "writtenOn": "2017-12-13T22:09:29Z",
      "side": 1,
      "message": "optional nit: The thread checking in general is redundant IMHO. The correct behavior is guaranteed by the service manager APIs. Unless you plan on introducing your own explicit direct calls into these methods I might just leave it all out.",
      "revId": "e4539833286b4f75212c3691f0bc690fe820954a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dcd13429_b981a350",
        "filename": "services/audio/service.cc",
        "patchSetId": 17
      },
      "lineNbr": 46,
      "author": {
        "id": 1153409
      },
      "writtenOn": "2017-12-14T23:41:54Z",
      "side": 1,
      "message": "Thread checker is actually a part of that service tear-down logic :)\nI prefer to keep DCHECKS here - it helps reading the code and it helps to make sure I write tests correctly.\nAlso, I would argue that DCHECK is meant to verify a guarantee, so if something is guaranteed it does not immediately make a DCHECK excessive :)\n\nBTW, service_manager::Service interface threading guarantee is not documented in the header [https://cs.chromium.org/chromium/src/services/service_manager/public/cpp/service.h?q\u003dservice_manager::Service\u0026sq\u003dpackage:chromium\u0026l\u003d21] - which would be a natural place to look up for someone reading this code. Should we fix this?",
      "parentUuid": "b498e2aa_50c3ab6a",
      "revId": "e4539833286b4f75212c3691f0bc690fe820954a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "36d1c91d_c4666d64",
        "filename": "services/audio/service.cc",
        "patchSetId": 17
      },
      "lineNbr": 46,
      "author": {
        "id": 1002808
      },
      "writtenOn": "2017-12-19T17:55:15Z",
      "side": 1,
      "message": "It\u0027s not explicitly documented in Service, but there are many classes for which it\u0027s not documented. As a general rule unless there is a reason to assume otherwise (e.g. shared ownership or explicit documentation to the contrary), all objects are implicitly sequence-bound. I guess this isn\u0027t a written rule anywhere but it seems to be a clear convention across most of the code base, and it makes a lot of sense as a means of encouraging safe code.\n\nThe use of thread or sequence checkers is not really harmful either way, so sure, leave it if you like; but I generally reserve it for cases where the class in question actually does any kind of thread or sequence hopping.\n\nI do worry slightly about other service implementors needlessly copying this pattern.",
      "parentUuid": "dcd13429_b981a350",
      "revId": "e4539833286b4f75212c3691f0bc690fe820954a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "11cedfd6_bfa36e12",
        "filename": "services/audio/service.cc",
        "patchSetId": 17
      },
      "lineNbr": 46,
      "author": {
        "id": 1153409
      },
      "writtenOn": "2018-01-10T22:50:18Z",
      "side": 1,
      "message": "I see your point. In audio there are [way too] many threads involved: client/control thread, audio device thread, file thread + usually 1 thread per each audio stream. And even when a class is single-threaded initially, sometimes it ends up being accessed from multiple threads after some unfortunate CL. So we developed a habit to thread/sequence-check almost everything here - and it also helps us to navigate the code.\n\nNow I realize why this checking is often skipped in the rest of the codebase. But I\u0027ll still keep them here. :)",
      "parentUuid": "36d1c91d_c4666d64",
      "revId": "e4539833286b4f75212c3691f0bc690fe820954a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}