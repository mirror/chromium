{
  "comments": [
    {
      "key": {
        "uuid": "93f3d479_721a7dfc",
        "filename": "/COMMIT_MSG",
        "patchSetId": 12
      },
      "lineNbr": 21,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2018-01-31T18:43:25Z",
      "side": 1,
      "message": "Nit: clarify which renderer",
      "range": {
        "startLine": 21,
        "startChar": 24,
        "endLine": 21,
        "endChar": 32
      },
      "revId": "7dc4d44a880b4f66e842dfe524d2a749eb149cf0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "98218ff1_7288ebdf",
        "filename": "content/browser/frame_host/render_frame_host_impl.h",
        "patchSetId": 12
      },
      "lineNbr": 1286,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2018-01-31T18:43:25Z",
      "side": 1,
      "message": "I know you mentioned that Optional doesn\u0027t pack as nicely, but strongly consider using it here please. It keeps the two bits of state logically associated. The Optional packing issue is something we\u0027re going to eventually need to figure out anywayâ€¦\n\nThen the getter can just return an const base::Optional\u003cgfx::Rect\u003e\u0026.",
      "revId": "7dc4d44a880b4f66e842dfe524d2a749eb149cf0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0dfbb2e4_b71052dc",
        "filename": "content/browser/frame_host/render_frame_host_impl.h",
        "patchSetId": 12
      },
      "lineNbr": 1286,
      "author": {
        "id": 1211699
      },
      "writtenOn": "2018-02-01T22:45:51Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "98218ff1_7288ebdf",
      "revId": "7dc4d44a880b4f66e842dfe524d2a749eb149cf0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bb1af577_52349f68",
        "filename": "content/browser/frame_host/render_frame_host_manager.cc",
        "patchSetId": 12
      },
      "lineNbr": 2093,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2018-01-31T18:43:25Z",
      "side": 1,
      "message": "Nit: const gfx::Rect\u0026 to avoid copying until necessary.",
      "revId": "7dc4d44a880b4f66e842dfe524d2a749eb149cf0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0a0ec858_86c3220e",
        "filename": "content/browser/frame_host/render_frame_host_manager.cc",
        "patchSetId": 12
      },
      "lineNbr": 2093,
      "author": {
        "id": 1211699
      },
      "writtenOn": "2018-02-01T22:45:51Z",
      "side": 1,
      "message": "This was done on purpose, because we are moving the old_render_frame_host in the call below, so I don\u0027t think it\u0027s a good idea to assume that pointers to its members are safe to keep.",
      "parentUuid": "bb1af577_52349f68",
      "revId": "7dc4d44a880b4f66e842dfe524d2a749eb149cf0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "df72bbe8_82e9928b",
        "filename": "content/browser/frame_host/render_frame_host_manager.cc",
        "patchSetId": 12
      },
      "lineNbr": 2093,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2018-02-02T23:58:47Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "0a0ec858_86c3220e",
      "revId": "7dc4d44a880b4f66e842dfe524d2a749eb149cf0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "294b1d5a_e359bcc6",
        "filename": "content/browser/frame_host/render_frame_proxy_host.h",
        "patchSetId": 12
      },
      "lineNbr": 97,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2018-01-31T18:43:25Z",
      "side": 1,
      "message": "Nit: add some comments here to distinguish between the two overloads.",
      "revId": "7dc4d44a880b4f66e842dfe524d2a749eb149cf0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0dcbd147_45fb1188",
        "filename": "content/browser/frame_host/render_frame_proxy_host.h",
        "patchSetId": 12
      },
      "lineNbr": 97,
      "author": {
        "id": 1211699
      },
      "writtenOn": "2018-02-01T22:45:51Z",
      "side": 1,
      "message": "Done. I added the comment, but ended up removing the overload when refactoring to use base::Optional.",
      "parentUuid": "294b1d5a_e359bcc6",
      "revId": "7dc4d44a880b4f66e842dfe524d2a749eb149cf0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "13a45325_c037527e",
        "filename": "content/browser/frame_host/render_frame_proxy_host.h",
        "patchSetId": 12
      },
      "lineNbr": 97,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2018-02-02T23:58:47Z",
      "side": 1,
      "message": "Note that the recommendations for Optional specifically discourage this: https://chromium.googlesource.com/chromium/src/+/master/docs/optional.md#When-not-to-use\n\n(Instead pass by pointer and use nullptr to represent the empty optional)",
      "parentUuid": "0dcbd147_45fb1188",
      "revId": "7dc4d44a880b4f66e842dfe524d2a749eb149cf0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dffb1e4e_0db078d0",
        "filename": "content/browser/frame_host/render_frame_proxy_host.h",
        "patchSetId": 12
      },
      "lineNbr": 97,
      "author": {
        "id": 1211699
      },
      "writtenOn": "2018-02-06T18:24:29Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "13a45325_c037527e",
      "revId": "7dc4d44a880b4f66e842dfe524d2a749eb149cf0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ad027110_f08720df",
        "filename": "content/browser/frame_host/render_widget_host_view_guest.cc",
        "patchSetId": 12
      },
      "lineNbr": 473,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2018-01-31T18:43:25Z",
      "side": 1,
      "message": "Nit: add a comment that describes why this is always true",
      "revId": "7dc4d44a880b4f66e842dfe524d2a749eb149cf0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "beef6ef5_182a3351",
        "filename": "content/browser/frame_host/render_widget_host_view_guest.cc",
        "patchSetId": 12
      },
      "lineNbr": 473,
      "author": {
        "id": 1211699
      },
      "writtenOn": "2018-02-01T22:45:51Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ad027110_f08720df",
      "revId": "7dc4d44a880b4f66e842dfe524d2a749eb149cf0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "039f3352_acc03d2c",
        "filename": "content/browser/renderer_host/render_widget_host_impl.cc",
        "patchSetId": 12
      },
      "lineNbr": 831,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2018-01-31T18:43:25Z",
      "side": 1,
      "message": "Nit: consider updating this comment and splitting some of the unrelated parts out. For example, auto_resize_enabled_ doesn\u0027t really look related to this comment either (or perhaps renderer_initialized_)",
      "revId": "7dc4d44a880b4f66e842dfe524d2a749eb149cf0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "53aaf186_122953d0",
        "filename": "content/common/frame.mojom",
        "patchSetId": 12
      },
      "lineNbr": 288,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2018-01-31T18:43:25Z",
      "side": 1,
      "message": "Please be a bit more specific about what this means, since this comment mostly replicates the method name atm. In addition, it\u0027s only sent for subframes, right?\n\n(Similar comment applies to WebFrameClient)",
      "revId": "7dc4d44a880b4f66e842dfe524d2a749eb149cf0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "426df62f_f25854d2",
        "filename": "content/common/frame.mojom",
        "patchSetId": 12
      },
      "lineNbr": 288,
      "author": {
        "id": 1211699
      },
      "writtenOn": "2018-02-01T22:45:51Z",
      "side": 1,
      "message": "Do you have any suggestions?\n\nThe way it\u0027s currently implemented, this is being sent for all local frames, including the main frame, whenever the frame rect changes. In practice, the browser process isn\u0027t using the size of the main frame, but I didn\u0027t special case it.",
      "parentUuid": "53aaf186_122953d0",
      "revId": "7dc4d44a880b4f66e842dfe524d2a749eb149cf0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e3999bec_02f620af",
        "filename": "content/common/frame.mojom",
        "patchSetId": 12
      },
      "lineNbr": 288,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2018-02-02T23:58:47Z",
      "side": 1,
      "message": "I guess the comment should clarify what a frame rect is. For example, is it merely the size of the containing iframe element? What does this value mean for the main frame? et cetera",
      "parentUuid": "426df62f_f25854d2",
      "revId": "7dc4d44a880b4f66e842dfe524d2a749eb149cf0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a1dca08a_dbc6c4c5",
        "filename": "content/common/frame.mojom",
        "patchSetId": 12
      },
      "lineNbr": 288,
      "author": {
        "id": 1211699
      },
      "writtenOn": "2018-02-06T18:24:29Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e3999bec_02f620af",
      "revId": "7dc4d44a880b4f66e842dfe524d2a749eb149cf0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4a47e5d8_96ec92f8",
        "filename": "content/renderer/render_frame_impl.cc",
        "patchSetId": 12
      },
      "lineNbr": 4355,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2018-01-31T18:43:25Z",
      "side": 1,
      "message": "Part of me feels like this almost makes more sense on WebFrameWidget: it doesn\u0027t really make sense to block the parser except for the local root frame. Of course, we wouldn\u0027t want to call it that: we\u0027d just call it suspend layout or something. WDYT?",
      "revId": "7dc4d44a880b4f66e842dfe524d2a749eb149cf0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9c455f62_c37695fc",
        "filename": "content/renderer/render_frame_impl.cc",
        "patchSetId": 12
      },
      "lineNbr": 4355,
      "author": {
        "id": 1211699
      },
      "writtenOn": "2018-02-01T22:45:51Z",
      "side": 1,
      "message": "That makes sense. I\u0027ve re-implemented the blocking code to block on the WebFrameWidgetImpl. In this case, it made more sense to use the WebFrameWidget\u0027s own size, and resume the parser when calling WebWidget::Resize() for the first time. That also avoids the plumbing into content.",
      "parentUuid": "4a47e5d8_96ec92f8",
      "revId": "7dc4d44a880b4f66e842dfe524d2a749eb149cf0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b8363f8b_377da356",
        "filename": "content/renderer/render_widget.cc",
        "patchSetId": 12
      },
      "lineNbr": 1432,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2018-01-31T18:43:25Z",
      "side": 1,
      "message": "Shouldn\u0027t this only need to notify the local root?",
      "revId": "7dc4d44a880b4f66e842dfe524d2a749eb149cf0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "97061c64_e8ea1730",
        "filename": "content/renderer/render_widget.cc",
        "patchSetId": 12
      },
      "lineNbr": 1432,
      "author": {
        "id": 1211699
      },
      "writtenOn": "2018-02-01T22:45:51Z",
      "side": 1,
      "message": "In practice, it is what it does. Since we block the start of parsing, this RenderWidget can\u0027t have more than a single RenderFrame, which has to be the local root. With the refactor moving things to webwidget, this should be more clear.",
      "parentUuid": "b8363f8b_377da356",
      "revId": "7dc4d44a880b4f66e842dfe524d2a749eb149cf0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a67de9cd_7e81f5d5",
        "filename": "third_party/WebKit/Source/core/loader/DocumentLoader.cpp",
        "patchSetId": 12
      },
      "lineNbr": 127,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2018-01-31T18:43:25Z",
      "side": 1,
      "message": "Let\u0027s only create this on demand. We can hide that with a getter, right?",
      "revId": "7dc4d44a880b4f66e842dfe524d2a749eb149cf0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5338b25f_8db7678b",
        "filename": "third_party/WebKit/Source/core/loader/DocumentLoader.cpp",
        "patchSetId": 12
      },
      "lineNbr": 127,
      "author": {
        "id": 1211699
      },
      "writtenOn": "2018-02-01T22:45:51Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a67de9cd_7e81f5d5",
      "revId": "7dc4d44a880b4f66e842dfe524d2a749eb149cf0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "86273abb_37001cf7",
        "filename": "third_party/WebKit/Source/core/loader/DocumentLoader.cpp",
        "patchSetId": 12
      },
      "lineNbr": 1177,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2018-01-31T18:43:25Z",
      "side": 1,
      "message": "Isn\u0027t the size information transmitted over IPC? I wouldn\u0027t expect us to be processing those particular IPCs while in a nested message loop.\n\nI guess the other thing I\u0027m wondering: is it possible to avoid having two different buffers here?",
      "revId": "7dc4d44a880b4f66e842dfe524d2a749eb149cf0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "68c26c0b_6cc81532",
        "filename": "third_party/WebKit/Source/core/loader/DocumentLoader.cpp",
        "patchSetId": 12
      },
      "lineNbr": 1177,
      "author": {
        "id": 1211699
      },
      "writtenOn": "2018-02-01T22:45:51Z",
      "side": 1,
      "message": "This is a bit complicated.\n\nProcessDataBuffer injects data into the parser (it calls parser-\u003eAppendBytes). When the parser is parsing the input, if it encounters a \u003cscript\u003e tag it\u0027ll execute the script before continuing parsing. Inside this script, we may have something like a sync XHR or a modal dialog, which causes a nested message loop. If we get a DataReceived() IPC inside this nested message loop, we need to protect the parser so we don\u0027t append data in the wrong order. That\u0027s why we also need to call ProcessDataBuffer at the end of this block.\n\nI haven\u0027t verified that the scenario above can happen (we also use a background parser most of the time), but that\u0027s what the comment inside DocumentLoader::DataReceived suggests.\n\nAs for unifying the buffers, I couldn\u0027t come up with a clever solution to make this possible while preserving the state/API surface between the DocumentLoader and the parser. I did consider blocking the parser on the HTMLDocumentParser side, but it turned out to be complicated to synchronize the state between the parser/html construction on the main thread and the background parser.",
      "parentUuid": "86273abb_37001cf7",
      "revId": "7dc4d44a880b4f66e842dfe524d2a749eb149cf0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d237f756_3f25816d",
        "filename": "third_party/WebKit/Source/core/loader/DocumentLoader.cpp",
        "patchSetId": 12
      },
      "lineNbr": 1177,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2018-02-02T23:58:47Z",
      "side": 1,
      "message": "I guess I\u0027m wondering: why can\u0027t we just reuse the existing buffering mechanism for this? If in_data_received_ was a counter instead of a bool, could we just increment it by 1 to avoid further bytes from being fed into the parser? Then, no matter who resumes, it Just Works (since resume only takes affect once the block counter reaches 0).\n\nWe\u0027d have to move the resume logic into an explicit function to be invoked still (by the top-level DataReceived call), but it seems like it should work.",
      "parentUuid": "68c26c0b_6cc81532",
      "revId": "7dc4d44a880b4f66e842dfe524d2a749eb149cf0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "35ae4c25_9271c351",
        "filename": "third_party/WebKit/Source/core/loader/DocumentLoader.cpp",
        "patchSetId": 12
      },
      "lineNbr": 1177,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2018-02-07T07:47:45Z",
      "side": 1,
      "message": "The rest of this CL seems fine, but this comment looks like it got overlooked (sorry I forgot to unmark resolved)",
      "parentUuid": "d237f756_3f25816d",
      "revId": "7dc4d44a880b4f66e842dfe524d2a749eb149cf0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "38622d74_3c5d7065",
        "filename": "third_party/WebKit/Source/core/loader/DocumentLoader.cpp",
        "patchSetId": 12
      },
      "lineNbr": 1177,
      "author": {
        "id": 1211699
      },
      "writtenOn": "2018-02-07T20:58:28Z",
      "side": 1,
      "message": "I\u0027ve just looked into this, this is hard to do. When data is received, but the parser is blocked, we still want to process the data all the way up to the point that data is appended to the parser. This is important, because ProcessData() is what causes CommitNavigation(), which is what sends DidCommitProvisionalLoad back to the browser. We also notify the ApplicationCacheHost, as well handle differently some mime types and media documents.\n\nThe tldr is that this is just not possible without change/breaking some of the API promises that DocumentLoader makes (which may be OK, but I\u0027m trying to avoid even more complex changes in this CL, since this is already complex enough).",
      "parentUuid": "35ae4c25_9271c351",
      "revId": "7dc4d44a880b4f66e842dfe524d2a749eb149cf0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "84128633_a6f0ff5a",
        "filename": "third_party/WebKit/Source/core/loader/DocumentLoader.h",
        "patchSetId": 12
      },
      "lineNbr": 325,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2018-01-31T18:43:25Z",
      "side": 1,
      "message": "What nested message loop is this referring to?",
      "range": {
        "startLine": 325,
        "startChar": 24,
        "endLine": 325,
        "endChar": 44
      },
      "revId": "7dc4d44a880b4f66e842dfe524d2a749eb149cf0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "45170401_bc6c6032",
        "filename": "third_party/WebKit/Source/core/loader/DocumentLoader.h",
        "patchSetId": 12
      },
      "lineNbr": 325,
      "author": {
        "id": 1211699
      },
      "writtenOn": "2018-02-01T22:45:51Z",
      "side": 1,
      "message": "See the other comment.",
      "parentUuid": "84128633_a6f0ff5a",
      "range": {
        "startLine": 325,
        "startChar": 24,
        "endLine": 325,
        "endChar": 44
      },
      "revId": "7dc4d44a880b4f66e842dfe524d2a749eb149cf0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9313a0f3_f131fc28",
        "filename": "third_party/WebKit/public/web/WebFrameClient.h",
        "patchSetId": 12
      },
      "lineNbr": 603,
      "author": {
        "id": 1001168
      },
      "writtenOn": "2018-01-31T18:43:25Z",
      "side": 1,
      "message": "Just to be clear: this is the optimization that allows us to avoid waiting, right? Because if we proactively notify, we may already have the size info when we swap.",
      "revId": "7dc4d44a880b4f66e842dfe524d2a749eb149cf0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "381ceff4_1d9da1b7",
        "filename": "third_party/WebKit/public/web/WebFrameClient.h",
        "patchSetId": 12
      },
      "lineNbr": 603,
      "author": {
        "id": 1211699
      },
      "writtenOn": "2018-02-01T22:45:51Z",
      "side": 1,
      "message": "That is correct.",
      "parentUuid": "9313a0f3_f131fc28",
      "revId": "7dc4d44a880b4f66e842dfe524d2a749eb149cf0",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}