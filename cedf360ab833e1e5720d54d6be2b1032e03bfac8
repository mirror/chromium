{
  "comments": [
    {
      "key": {
        "uuid": "b3180903_c8298a19",
        "filename": "chrome/browser/ui/app_list/app_list_view_delegate.cc",
        "patchSetId": 5
      },
      "lineNbr": 190,
      "author": {
        "id": 1000045
      },
      "writtenOn": "2017-06-27T23:25:31Z",
      "side": 1,
      "message": "I don\u0027t think you need the wallpaper_controller_ptr_ member variable. It\u0027s cheap to get an interface pointer if there\u0027s already a mojo connection between processes, and there will be one for browser \u003c-\u003e ash. Then you don\u0027t have to worry about it already being bound or not.",
      "revId": "cedf360ab833e1e5720d54d6be2b1032e03bfac8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "80e898f9_11248a70",
        "filename": "chrome/browser/ui/app_list/app_list_view_delegate.cc",
        "patchSetId": 5
      },
      "lineNbr": 190,
      "author": {
        "id": 1000101
      },
      "writtenOn": "2017-06-28T14:28:55Z",
      "side": 1,
      "message": "This seems need a comment.\n\nThe main purpose of this check is to avoid AddObsever twice. The code here is in AppListViewDelegate::SetProfile which is called on user switch. AppListViewDelegate is like a singleton and shared among all users.",
      "parentUuid": "b3180903_c8298a19",
      "revId": "cedf360ab833e1e5720d54d6be2b1032e03bfac8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e350fe42_b2ac6584",
        "filename": "chrome/browser/ui/app_list/app_list_view_delegate.cc",
        "patchSetId": 5
      },
      "lineNbr": 190,
      "author": {
        "id": 1147616
      },
      "writtenOn": "2017-06-29T17:07:46Z",
      "side": 1,
      "message": "The new patch updated still needs wallpaper_controller_ptr_.",
      "parentUuid": "80e898f9_11248a70",
      "revId": "cedf360ab833e1e5720d54d6be2b1032e03bfac8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8e64bde0_5d8149ce",
        "filename": "chrome/browser/ui/app_list/app_list_view_delegate.cc",
        "patchSetId": 5
      },
      "lineNbr": 196,
      "author": {
        "id": 1000101
      },
      "writtenOn": "2017-06-27T22:12:26Z",
      "side": 1,
      "message": "Since AddObserver could be skipped, how can we be sure the SearchBoxModel has correct color? We might need an explicit mojo call to get the color and set to SearchBoxModel when profile switching happens.",
      "revId": "cedf360ab833e1e5720d54d6be2b1032e03bfac8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ea01f4be_99f08c91",
        "filename": "chrome/browser/ui/app_list/app_list_view_delegate.cc",
        "patchSetId": 5
      },
      "lineNbr": 196,
      "author": {
        "id": 1147616
      },
      "writtenOn": "2017-06-29T17:07:46Z",
      "side": 1,
      "message": "done by moving addobserver to ctor and explicitly trigger notifying observers here.\nIs this OK?\nbtw, what is the mojo call to get colors from ash? Most mojo call examples are set, not get.",
      "parentUuid": "8e64bde0_5d8149ce",
      "revId": "cedf360ab833e1e5720d54d6be2b1032e03bfac8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "420257c7_b19c0b74",
        "filename": "chrome/browser/ui/app_list/app_list_view_delegate.cc",
        "patchSetId": 5
      },
      "lineNbr": 196,
      "author": {
        "id": 1000101
      },
      "writtenOn": "2017-06-29T17:36:54Z",
      "side": 1,
      "message": "You need a mojo method that returns something. Mojo calls are async and returned value are passed back via a callback.\n\ne.g.\nin wallpaper.mojom, declare like\n  GetWallpaperColors() \u003d\u003e (array\u003cuint32\u003e colors);\n\nThis should generate something like \n  void GetWallpaperColors(base::Callback\u003cvoid(std::vector\u003cuint32_t\u003e)\u003e callback);\n\nWhen the mojo call returns, the callback will be invoked to pass the returned value.\n\nI would prefer to have an explicit getter call in api then triggering a notification.",
      "parentUuid": "ea01f4be_99f08c91",
      "revId": "cedf360ab833e1e5720d54d6be2b1032e03bfac8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f0e50614_ee1f9be2",
        "filename": "chrome/browser/ui/app_list/app_list_view_delegate.cc",
        "patchSetId": 5
      },
      "lineNbr": 196,
      "author": {
        "id": 1147616
      },
      "writtenOn": "2017-06-29T20:53:05Z",
      "side": 1,
      "message": "done. I checked the generated mojom.h file, it should be\nvoid GetWallpaperColors(base::OnceCallback\u003cvoid(std::vector\u003cuint32_t\u003e\u0026\u003e)\u003e callback);",
      "parentUuid": "420257c7_b19c0b74",
      "revId": "cedf360ab833e1e5720d54d6be2b1032e03bfac8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "be90bc3c_12949cd5",
        "filename": "ui/app_list/views/search_box_view.cc",
        "patchSetId": 5
      },
      "lineNbr": 529,
      "author": {
        "id": 1147616
      },
      "writtenOn": "2017-06-27T21:27:38Z",
      "side": 1,
      "message": "I am not sure of (#LV 100% + #FFF 70%) color mixing at 100% opacity.\nWhat I do is 50% of (#LV 100%) and 50% of (#FFF 70%).\n0xB3 indicates 70%, 0x80 indicates 50%.",
      "revId": "cedf360ab833e1e5720d54d6be2b1032e03bfac8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "69355536_965b9417",
        "filename": "ui/app_list/views/search_box_view.cc",
        "patchSetId": 5
      },
      "lineNbr": 529,
      "author": {
        "id": 1147616
      },
      "writtenOn": "2017-06-29T17:07:46Z",
      "side": 1,
      "message": "I asked estade@ about this. He said that is Alpablend(foreground, background which is #lv, 70%).",
      "parentUuid": "be90bc3c_12949cd5",
      "revId": "cedf360ab833e1e5720d54d6be2b1032e03bfac8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ae25c918_4654c45d",
        "filename": "ui/app_list/views/search_box_view.cc",
        "patchSetId": 5
      },
      "lineNbr": 535,
      "author": {
        "id": 1147616
      },
      "writtenOn": "2017-06-27T21:27:38Z",
      "side": 1,
      "message": "I remembered it was not recommended to set SK_ColorTRANSPARENT background color. But since light_vibrant_mixed has some transparency. If we still set light_vibrant_mixed to search_box_, the textfield background color is different than container\u0027s background.",
      "revId": "cedf360ab833e1e5720d54d6be2b1032e03bfac8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cd755a00_1424279a",
        "filename": "ui/app_list/views/search_box_view.cc",
        "patchSetId": 5
      },
      "lineNbr": 535,
      "author": {
        "id": 1147616
      },
      "writtenOn": "2017-06-29T17:07:46Z",
      "side": 1,
      "message": "still using light_vibrant_mixed per the change above.",
      "parentUuid": "ae25c918_4654c45d",
      "revId": "cedf360ab833e1e5720d54d6be2b1032e03bfac8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}