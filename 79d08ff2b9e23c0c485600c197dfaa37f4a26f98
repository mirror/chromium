{
  "comments": [
    {
      "key": {
        "uuid": "4a66f69f_3fa26239",
        "filename": "components/previews/content/previews_optimization_guide_impl.cc",
        "patchSetId": 6
      },
      "lineNbr": 24,
      "author": {
        "id": 1166490
      },
      "writtenOn": "2017-11-10T23:59:20Z",
      "side": 1,
      "message": "std::make_unique instead of raw new.",
      "revId": "79d08ff2b9e23c0c485600c197dfaa37f4a26f98",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cf052019_3ccb2af8",
        "filename": "components/previews/content/previews_optimization_guide_impl.cc",
        "patchSetId": 6
      },
      "lineNbr": 24,
      "author": {
        "id": 1133190
      },
      "writtenOn": "2017-11-13T18:04:27Z",
      "side": 1,
      "message": "cannot do that because the constructor is intentionally private. i can do a couple things if you feel strongly:\n1) make the constructor public and comment that it should not be used in favor of this CreateFromConfig method\n2) make the constructor public and have the constructor call this method privately\n\neither of those things seem a bit less clean to me but let me know what you think",
      "parentUuid": "4a66f69f_3fa26239",
      "revId": "79d08ff2b9e23c0c485600c197dfaa37f4a26f98",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1035a8fa_ca35fefa",
        "filename": "components/previews/content/previews_optimization_guide_impl.cc",
        "patchSetId": 6
      },
      "lineNbr": 29,
      "author": {
        "id": 1166490
      },
      "writtenOn": "2017-11-10T23:59:20Z",
      "side": 1,
      "message": "would unordered_set work as well. I think it would be more scalable since it is hash tree vs r-b tree. (there is definitely a high threshold for when the trade-off kicks in though in C++, so if this is going to be under 100, either is probably fine)",
      "revId": "79d08ff2b9e23c0c485600c197dfaa37f4a26f98",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c1798a8f_52dc17c9",
        "filename": "components/previews/content/previews_optimization_guide_impl.cc",
        "patchSetId": 6
      },
      "lineNbr": 29,
      "author": {
        "id": 1133190
      },
      "writtenOn": "2017-11-13T18:04:27Z",
      "side": 1,
      "message": "The current intent is that the component will contain at most 100 hints, so probably not an issue.",
      "parentUuid": "1035a8fa_ca35fefa",
      "revId": "79d08ff2b9e23c0c485600c197dfaa37f4a26f98",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "07a045c9_44c23908",
        "filename": "components/previews/content/previews_optimization_guide_impl.cc",
        "patchSetId": 6
      },
      "lineNbr": 30,
      "author": {
        "id": 1166490
      },
      "writtenOn": "2017-11-10T23:59:20Z",
      "side": 1,
      "message": "Can you add a comment for this for loop? A lot happens in it. You might even want to move it to a helper method.",
      "revId": "79d08ff2b9e23c0c485600c197dfaa37f4a26f98",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "46c6a014_10ef98f2",
        "filename": "components/previews/content/previews_optimization_guide_impl.cc",
        "patchSetId": 6
      },
      "lineNbr": 30,
      "author": {
        "id": 1133190
      },
      "writtenOn": "2017-11-13T18:04:27Z",
      "side": 1,
      "message": "added some comments instead. there\u0027s not really a good way to break things out (i.e. lots of param passing and things are tied to the hints object or the url matcher object) :/",
      "parentUuid": "07a045c9_44c23908",
      "revId": "79d08ff2b9e23c0c485600c197dfaa37f4a26f98",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f6eebe5e_dc5537bd",
        "filename": "components/previews/content/previews_optimization_guide_impl.cc",
        "patchSetId": 6
      },
      "lineNbr": 54,
      "author": {
        "id": 1166490
      },
      "writtenOn": "2017-11-10T23:59:20Z",
      "side": 1,
      "message": "Not sure this break; is necessary. Do we expect to send more than we support?",
      "revId": "79d08ff2b9e23c0c485600c197dfaa37f4a26f98",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "af1503b5_9386bbd9",
        "filename": "components/previews/content/previews_optimization_guide_impl.cc",
        "patchSetId": 6
      },
      "lineNbr": 54,
      "author": {
        "id": 1133190
      },
      "writtenOn": "2017-11-13T18:04:27Z",
      "side": 1,
      "message": "at some point, it is possible that we send multiple optimizations (i.e. client lofi blacklist + noscript whitelist) but this code only supports noscript so we don\u0027t need to keep looping through the rest.",
      "parentUuid": "f6eebe5e_dc5537bd",
      "revId": "79d08ff2b9e23c0c485600c197dfaa37f4a26f98",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "28526a2c_198ba568",
        "filename": "components/previews/content/previews_optimization_guide_impl.cc",
        "patchSetId": 6
      },
      "lineNbr": 64,
      "author": {
        "id": 1166490
      },
      "writtenOn": "2017-11-10T23:59:20Z",
      "side": 1,
      "message": "So if this is a set (as opposed to unordered_set), do these IDs come in a specific order such that rules go from more specific to less specific? If so, I don\u0027t think you need that TODO below. It might be a cheap way to handle it by enforcing the server gives rules in specific -\u003e aspecific ordering.",
      "revId": "79d08ff2b9e23c0c485600c197dfaa37f4a26f98",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eca603bd_3861c8cc",
        "filename": "components/previews/content/previews_optimization_guide_impl.cc",
        "patchSetId": 6
      },
      "lineNbr": 64,
      "author": {
        "id": 1147716
      },
      "writtenOn": "2017-11-13T17:18:35Z",
      "side": 1,
      "message": "It is a good point. We haven\u0027t defined the format yet to have prioritized ordering (instead, we define more specific match to have priority). But maybe using order in the format is easiest way to manage policy (if we do the work on the server to do that ordering).",
      "parentUuid": "28526a2c_198ba568",
      "revId": "79d08ff2b9e23c0c485600c197dfaa37f4a26f98",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0e0349da_adeee4b6",
        "filename": "components/previews/content/previews_optimization_guide_impl.cc",
        "patchSetId": 6
      },
      "lineNbr": 64,
      "author": {
        "id": 1133190
      },
      "writtenOn": "2017-11-13T18:04:27Z",
      "side": 1,
      "message": "like doug said, we haven\u0027t defined the format to have prioritized ordering. it certainly is easy to do on the server but i\u0027ll leave the todo in here until we actually honor that contract.",
      "parentUuid": "eca603bd_3861c8cc",
      "revId": "79d08ff2b9e23c0c485600c197dfaa37f4a26f98",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "070e0c32_c7030725",
        "filename": "components/previews/content/previews_optimization_guide_impl.cc",
        "patchSetId": 6
      },
      "lineNbr": 88,
      "author": {
        "id": 1166490
      },
      "writtenOn": "2017-11-10T23:59:20Z",
      "side": 1,
      "message": "You should either use sequence_checker_ on every method call or DCHECK(io_task_runner_-\u003eBelongsToCurrentThread()) like you have it. \n\nSequenceChecker is really just a thread checker.",
      "revId": "79d08ff2b9e23c0c485600c197dfaa37f4a26f98",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "df5785bc_13cadfbe",
        "filename": "components/previews/content/previews_optimization_guide_impl.cc",
        "patchSetId": 6
      },
      "lineNbr": 88,
      "author": {
        "id": 1133190
      },
      "writtenOn": "2017-11-13T18:04:27Z",
      "side": 1,
      "message": "im just going to remove the sequencechecker since the only thing that would be checking it is the static method for creating the hints.",
      "parentUuid": "070e0c32_c7030725",
      "revId": "79d08ff2b9e23c0c485600c197dfaa37f4a26f98",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f8bb52f1_3fe335cd",
        "filename": "components/previews/content/previews_optimization_guide_impl.h",
        "patchSetId": 6
      },
      "lineNbr": 39,
      "author": {
        "id": 1166490
      },
      "writtenOn": "2017-11-10T23:59:20Z",
      "side": 1,
      "message": "Is there any reason in particular that you went with a interface + impl split for this? It seems like it shouldn\u0027t be necessary.",
      "revId": "79d08ff2b9e23c0c485600c197dfaa37f4a26f98",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "11f2f40a_54f3ad4d",
        "filename": "components/previews/content/previews_optimization_guide_impl.h",
        "patchSetId": 6
      },
      "lineNbr": 39,
      "author": {
        "id": 1147716
      },
      "writtenOn": "2017-11-13T17:18:35Z",
      "side": 1,
      "message": "Fyi, I had landed the interface already with a test impl.",
      "parentUuid": "f8bb52f1_3fe335cd",
      "revId": "79d08ff2b9e23c0c485600c197dfaa37f4a26f98",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "83269cba_57334715",
        "filename": "components/previews/content/previews_optimization_guide_impl.h",
        "patchSetId": 6
      },
      "lineNbr": 39,
      "author": {
        "id": 1133190
      },
      "writtenOn": "2017-11-13T18:04:27Z",
      "side": 1,
      "message": "Consolidated - i think it\u0027s probably fine to just consolidate since we probably won\u0027t have another previews optimization guide implementation for awhile.",
      "parentUuid": "11f2f40a_54f3ad4d",
      "revId": "79d08ff2b9e23c0c485600c197dfaa37f4a26f98",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a441958_023478bb",
        "filename": "components/previews/content/previews_optimization_guide_impl.h",
        "patchSetId": 6
      },
      "lineNbr": 44,
      "author": {
        "id": 1166490
      },
      "writtenOn": "2017-11-10T23:59:20Z",
      "side": 1,
      "message": "Add a comment like: \"The embedder guarantees |optimization_guide_service| outlives |this|.\"",
      "revId": "79d08ff2b9e23c0c485600c197dfaa37f4a26f98",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e3bf7677_02e31e12",
        "filename": "components/previews/content/previews_optimization_guide_impl.h",
        "patchSetId": 6
      },
      "lineNbr": 44,
      "author": {
        "id": 1133190
      },
      "writtenOn": "2017-11-13T18:04:27Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5a441958_023478bb",
      "revId": "79d08ff2b9e23c0c485600c197dfaa37f4a26f98",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "035be707_60cdca90",
        "filename": "components/previews/content/previews_optimization_guide_impl.h",
        "patchSetId": 6
      },
      "lineNbr": 60,
      "author": {
        "id": 1166490
      },
      "writtenOn": "2017-11-10T23:59:20Z",
      "side": 1,
      "message": "nit: Maybe just forward declare Hints here and have the class fulyl declared/defined in the cc file",
      "revId": "79d08ff2b9e23c0c485600c197dfaa37f4a26f98",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "efffa416_43a803d6",
        "filename": "components/previews/content/previews_optimization_guide_impl.h",
        "patchSetId": 6
      },
      "lineNbr": 60,
      "author": {
        "id": 1133190
      },
      "writtenOn": "2017-11-13T18:04:27Z",
      "side": 1,
      "message": "the issue here is that UpdateHints takes a unique ptr of Hints as a parameter so it needs the full declaration here.",
      "parentUuid": "035be707_60cdca90",
      "revId": "79d08ff2b9e23c0c485600c197dfaa37f4a26f98",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "21a55278_7c3aeb76",
        "filename": "components/previews/content/previews_ui_service.cc",
        "patchSetId": 6
      },
      "lineNbr": 26,
      "author": {
        "id": 1166490
      },
      "writtenOn": "2017-11-10T23:59:20Z",
      "side": 1,
      "message": "If possible, would it be better to create the PreviewsOptOutGuide in the IO thread and pass the OptimizationGuide through instead?",
      "revId": "79d08ff2b9e23c0c485600c197dfaa37f4a26f98",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "63627bfa_86a14d52",
        "filename": "components/previews/content/previews_ui_service.cc",
        "patchSetId": 6
      },
      "lineNbr": 26,
      "author": {
        "id": 1133190
      },
      "writtenOn": "2017-11-13T18:04:27Z",
      "side": 1,
      "message": "It is possible to do, but I\u0027m not sure if it\u0027s significantly better and I don\u0027t really feel strongly one way or the other. \n\nThe one aspect where it is better though is probably the removal of the IO thread post task that would need to be done (OGService does a post task on the IO thread if the AddObserver call is not coming from the IO thread). This plumbing allows for slightly cleaner tests in other Previews code (i.e. PreviewsIOData).",
      "parentUuid": "21a55278_7c3aeb76",
      "revId": "79d08ff2b9e23c0c485600c197dfaa37f4a26f98",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}