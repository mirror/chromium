{
  "comments": [
    {
      "key": {
        "uuid": "454a46a5_3226ea69",
        "filename": "content/browser/background_fetch/background_fetch_data_manager_unittest.cc",
        "patchSetId": 3
      },
      "lineNbr": 300,
      "author": {
        "id": 1002032
      },
      "writtenOn": "2017-11-11T14:25:29Z",
      "side": 1,
      "message": "id1 -\u003e id",
      "revId": "3d26bf61d3cde96dc7d829cb920755d143266a19",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "81b6309c_4e6f9504",
        "filename": "content/browser/background_fetch/background_fetch_data_manager_unittest.cc",
        "patchSetId": 3
      },
      "lineNbr": 300,
      "author": {
        "id": 1204345
      },
      "writtenOn": "2017-11-13T13:28:17Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "454a46a5_3226ea69",
      "revId": "3d26bf61d3cde96dc7d829cb920755d143266a19",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6b11dd68_6fd2b7bb",
        "filename": "content/browser/background_fetch/storage/get_developer_ids_task.cc",
        "patchSetId": 3
      },
      "lineNbr": 46,
      "author": {
        "id": 1002032
      },
      "writtenOn": "2017-11-11T14:25:29Z",
      "side": 1,
      "message": "const auto\u0026, you\u0027re making a copy",
      "revId": "3d26bf61d3cde96dc7d829cb920755d143266a19",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f58f2cde_d0c1da50",
        "filename": "content/browser/background_fetch/storage/get_developer_ids_task.cc",
        "patchSetId": 3
      },
      "lineNbr": 46,
      "author": {
        "id": 1204345
      },
      "writtenOn": "2017-11-13T13:28:17Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6b11dd68_6fd2b7bb",
      "revId": "3d26bf61d3cde96dc7d829cb920755d143266a19",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5a6bce5c_d6c994cb",
        "filename": "content/browser/background_fetch/storage/get_developer_ids_task.cc",
        "patchSetId": 3
      },
      "lineNbr": 47,
      "author": {
        "id": 1002032
      },
      "writtenOn": "2017-11-11T14:25:29Z",
      "side": 1,
      "message": "ids.push_back(pair.first.substr(kActiveRegistrationUniqueIdKeyPrefix));",
      "revId": "3d26bf61d3cde96dc7d829cb920755d143266a19",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c30f7cfc_89c24efc",
        "filename": "content/browser/background_fetch/storage/get_developer_ids_task.cc",
        "patchSetId": 3
      },
      "lineNbr": 47,
      "author": {
        "id": 1204345
      },
      "writtenOn": "2017-11-13T13:28:17Z",
      "side": 1,
      "message": "I\u0027ve updated the API to not need this.\n\n(Is there a strlen missing from your comment or did you mean a different function?)",
      "parentUuid": "5a6bce5c_d6c994cb",
      "revId": "3d26bf61d3cde96dc7d829cb920755d143266a19",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e7d10359_535275ed",
        "filename": "content/browser/background_fetch/storage/get_developer_ids_task.h",
        "patchSetId": 3
      },
      "lineNbr": 22,
      "author": {
        "id": 1002032
      },
      "writtenOn": "2017-11-11T14:25:29Z",
      "side": 1,
      "message": "Is \"active\" the right word here? What about pending ones?",
      "revId": "3d26bf61d3cde96dc7d829cb920755d143266a19",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "73fa65c4_dd23cd47",
        "filename": "content/browser/background_fetch/storage/get_developer_ids_task.h",
        "patchSetId": 3
      },
      "lineNbr": 22,
      "author": {
        "id": 1204345
      },
      "writtenOn": "2017-11-13T13:28:17Z",
      "side": 1,
      "message": "Active here means not completed. A registration with only pending fetches (because it hasn\u0027t yet launched one or because the DownloadService told it to back off) is still active to my mind, but I\u0027ll clarify.",
      "parentUuid": "e7d10359_535275ed",
      "revId": "3d26bf61d3cde96dc7d829cb920755d143266a19",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bb6a5e30_324de49e",
        "filename": "content/browser/service_worker/service_worker_database.cc",
        "patchSetId": 3
      },
      "lineNbr": 968,
      "author": {
        "id": 1204345
      },
      "writtenOn": "2017-11-13T09:51:58Z",
      "side": 1,
      "message": "+nhiroki, I\u0027ve changed this to strip off the entire prefix rather than just the USER_DATA prefix. In my case, I know what the prefix is and need to strip it anyway so it would save on copying unnecessary data and I suspect that will be the same for anyone else who wants to use this API.\n\nI will update the comments to reflect this as well assuming you agree.",
      "range": {
        "startLine": 968,
        "startChar": 6,
        "endLine": 968,
        "endChar": 53
      },
      "revId": "3d26bf61d3cde96dc7d829cb920755d143266a19",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b0972fea_2e5ea4bb",
        "filename": "content/browser/service_worker/service_worker_database.h",
        "patchSetId": 3
      },
      "lineNbr": 209,
      "author": {
        "id": 1002032
      },
      "writtenOn": "2017-11-11T14:25:29Z",
      "side": 1,
      "message": "++docs",
      "revId": "3d26bf61d3cde96dc7d829cb920755d143266a19",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4a84cc44_4d803eed",
        "filename": "content/browser/service_worker/service_worker_database.h",
        "patchSetId": 3
      },
      "lineNbr": 209,
      "author": {
        "id": 1204345
      },
      "writtenOn": "2017-11-13T13:28:17Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b0972fea_2e5ea4bb",
      "revId": "3d26bf61d3cde96dc7d829cb920755d143266a19",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "27038fd6_a5d1e08b",
        "filename": "content/browser/service_worker/service_worker_storage.cc",
        "patchSetId": 3
      },
      "lineNbr": 711,
      "author": {
        "id": 1115976
      },
      "writtenOn": "2017-11-13T08:54:47Z",
      "side": 1,
      "message": "base::BindOnce here and elsewhere in this function?",
      "range": {
        "startLine": 711,
        "startChar": 22,
        "endLine": 711,
        "endChar": 32
      },
      "revId": "3d26bf61d3cde96dc7d829cb920755d143266a19",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ddd7d527_2ad09bb6",
        "filename": "content/browser/service_worker/service_worker_storage.cc",
        "patchSetId": 3
      },
      "lineNbr": 711,
      "author": {
        "id": 1204345
      },
      "writtenOn": "2017-11-13T09:51:58Z",
      "side": 1,
      "message": "Done. What about all the other uses in this file? I just copy+pasted this from the above function. I can do a clean up in a follow-up CL to avoid bloating this one.",
      "parentUuid": "27038fd6_a5d1e08b",
      "range": {
        "startLine": 711,
        "startChar": 22,
        "endLine": 711,
        "endChar": 32
      },
      "revId": "3d26bf61d3cde96dc7d829cb920755d143266a19",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e48feaeb_243faad7",
        "filename": "content/browser/service_worker/service_worker_storage.cc",
        "patchSetId": 3
      },
      "lineNbr": 731,
      "author": {
        "id": 1115976
      },
      "writtenOn": "2017-11-13T08:54:47Z",
      "side": 1,
      "message": "How about merging this into line 724?",
      "revId": "3d26bf61d3cde96dc7d829cb920755d143266a19",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6d4cc57f_05864d19",
        "filename": "content/browser/service_worker/service_worker_storage.cc",
        "patchSetId": 3
      },
      "lineNbr": 731,
      "author": {
        "id": 1204345
      },
      "writtenOn": "2017-11-13T09:51:58Z",
      "side": 1,
      "message": "Done. (Note this was also a copy+paste from the above function).",
      "parentUuid": "e48feaeb_243faad7",
      "revId": "3d26bf61d3cde96dc7d829cb920755d143266a19",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "08e8edd9_f4b986ac",
        "filename": "content/browser/service_worker/service_worker_storage.h",
        "patchSetId": 3
      },
      "lineNbr": 76,
      "author": {
        "id": 1002032
      },
      "writtenOn": "2017-11-11T14:25:29Z",
      "side": 1,
      "message": "I wonder if a std::map\u003c\u003e could work? You want to maintain insertion order, but since LevelDB stores entries in alphabetical order that should be matched by std::map\u003c\u003es sorting method.",
      "revId": "3d26bf61d3cde96dc7d829cb920755d143266a19",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c4f41ff6_945ce2f7",
        "filename": "content/browser/service_worker/service_worker_storage.h",
        "patchSetId": 3
      },
      "lineNbr": 76,
      "author": {
        "id": 1204345
      },
      "writtenOn": "2017-11-13T13:28:17Z",
      "side": 1,
      "message": "I\u0027ve changed it to base::flat_map which should be even better. Using insert with a hint should always insert at the end, so it should be as efficient as vector for end-insertion and there will never be any insertion anywhere else as we pass it as const.\n\nSadly we can\u0027t use its reserve() since we can\u0027t find how many keys there are ahead of time, but we\u0027ll have far fewer allocations than std::map.",
      "parentUuid": "08e8edd9_f4b986ac",
      "revId": "3d26bf61d3cde96dc7d829cb920755d143266a19",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}