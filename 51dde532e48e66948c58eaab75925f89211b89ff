{
  "comments": [
    {
      "key": {
        "uuid": "927dedfb_f57024e2",
        "filename": "chrome/browser/io_thread.cc",
        "patchSetId": 12
      },
      "lineNbr": 693,
      "author": {
        "id": 1115968
      },
      "writtenOn": "2017-12-15T17:37:56Z",
      "side": 1,
      "message": "This is a regression:  Currently, when QUIC is disabled in production, it disables QUIC globally (The system request context and all ProfileIOData RequestContexts).  This changes that behavior - not only do we no longer disable QUIC on the system request context (This needs to be applied to the SystemURLRequestContext\u0027s HttpNetworkSession), but we also don\u0027t do it on the other URLRequestContexts, either.",
      "range": {
        "startLine": 693,
        "startChar": 27,
        "endLine": 693,
        "endChar": 28
      },
      "revId": "51dde532e48e66948c58eaab75925f89211b89ff",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c235e681_ac818d15",
        "filename": "chrome/browser/io_thread.cc",
        "patchSetId": 12
      },
      "lineNbr": 693,
      "author": {
        "id": 1002532
      },
      "writtenOn": "2017-12-15T21:21:43Z",
      "side": 1,
      "message": "I don\u0027t think so. (note also all the QuicAllowedPolicyDynamicTest tests pass)\n\nThe placement of where NetworkService::DisableQuic changed. This method is called by DisableQuicOnIOThread. That function itself called content::GetNetworkServiceImpl()-\u003eDisableQuic() (when NS is disabled). That function was called by SystemNetworkContextManager::DisableQuic which calls content::GetNetworkService()-\u003eDisableQuic() if NS is enabled. The NS::DisableQuic calls would disable quic on all the registered NetworkContexts",
      "parentUuid": "927dedfb_f57024e2",
      "range": {
        "startLine": 693,
        "startChar": 27,
        "endLine": 693,
        "endChar": 28
      },
      "revId": "51dde532e48e66948c58eaab75925f89211b89ff",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4fb67e39_9ba1671d",
        "filename": "chrome/browser/io_thread.h",
        "patchSetId": 12
      },
      "lineNbr": 33,
      "author": {
        "id": 1115968
      },
      "writtenOn": "2017-12-15T17:37:56Z",
      "side": 1,
      "message": "Not needed?",
      "range": {
        "startLine": 33,
        "startChar": 32,
        "endLine": 33,
        "endChar": 33
      },
      "revId": "51dde532e48e66948c58eaab75925f89211b89ff",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4255f4d8_4934b1e4",
        "filename": "chrome/browser/io_thread.h",
        "patchSetId": 12
      },
      "lineNbr": 33,
      "author": {
        "id": 1002532
      },
      "writtenOn": "2017-12-15T21:21:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4fb67e39_9ba1671d",
      "range": {
        "startLine": 33,
        "startChar": 32,
        "endLine": 33,
        "endChar": 33
      },
      "revId": "51dde532e48e66948c58eaab75925f89211b89ff",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2d7f11db_2b94421d",
        "filename": "chrome/browser/io_thread.h",
        "patchSetId": 12
      },
      "lineNbr": 34,
      "author": {
        "id": 1115968
      },
      "writtenOn": "2017-12-15T17:37:56Z",
      "side": 1,
      "message": "Can be forward declared.",
      "range": {
        "startLine": 34,
        "startChar": 32,
        "endLine": 34,
        "endChar": 33
      },
      "revId": "51dde532e48e66948c58eaab75925f89211b89ff",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1426a01a_4cbcbd02",
        "filename": "chrome/browser/io_thread.h",
        "patchSetId": 12
      },
      "lineNbr": 34,
      "author": {
        "id": 1002532
      },
      "writtenOn": "2017-12-15T21:21:43Z",
      "side": 1,
      "message": "I don\u0027t think so, since it\u0027s a member",
      "parentUuid": "2d7f11db_2b94421d",
      "range": {
        "startLine": 34,
        "startChar": 32,
        "endLine": 34,
        "endChar": 33
      },
      "revId": "51dde532e48e66948c58eaab75925f89211b89ff",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5a3e6d4f_c48ee0b0",
        "filename": "chrome/browser/io_thread.h",
        "patchSetId": 12
      },
      "lineNbr": 134,
      "author": {
        "id": 1115968
      },
      "writtenOn": "2017-12-15T17:37:56Z",
      "side": 1,
      "message": "nit:  Please call this the system_request_context_owner.\n\nThe previous pattern of calling URLRequestContextGetters foo_request_context has proven over time to be needlessly confusing, so think it\u0027s best not to repeat that pattern.",
      "range": {
        "startLine": 134,
        "startChar": 13,
        "endLine": 134,
        "endChar": 35
      },
      "revId": "51dde532e48e66948c58eaab75925f89211b89ff",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "086fcc10_fb7aea78",
        "filename": "chrome/browser/io_thread.h",
        "patchSetId": 12
      },
      "lineNbr": 134,
      "author": {
        "id": 1002532
      },
      "writtenOn": "2017-12-15T21:21:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "5a3e6d4f_c48ee0b0",
      "range": {
        "startLine": 134,
        "startChar": 13,
        "endLine": 134,
        "endChar": 35
      },
      "revId": "51dde532e48e66948c58eaab75925f89211b89ff",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cd931323_3dbb771f",
        "filename": "chrome/browser/io_thread.h",
        "patchSetId": 12
      },
      "lineNbr": 139,
      "author": {
        "id": 1115968
      },
      "writtenOn": "2017-12-15T17:37:56Z",
      "side": 1,
      "message": "I don\u0027t think this is ever used?",
      "range": {
        "startLine": 139,
        "startChar": 36,
        "endLine": 139,
        "endChar": 50
      },
      "revId": "51dde532e48e66948c58eaab75925f89211b89ff",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4be8f384_472ea8b3",
        "filename": "chrome/browser/io_thread.h",
        "patchSetId": 12
      },
      "lineNbr": 139,
      "author": {
        "id": 1002532
      },
      "writtenOn": "2017-12-15T21:21:43Z",
      "side": 1,
      "message": "hmm I guess the comment isn\u0027t above isn\u0027t clear?\n\nIt\u0027s needed because SystemNetworkContextManager::GetContext returns a NetworkContext interface pointer, which needs to be bound. That\u0027s done by creating a NetworkContext C++ class, which is what this pointer stores.",
      "parentUuid": "cd931323_3dbb771f",
      "range": {
        "startLine": 139,
        "startChar": 36,
        "endLine": 139,
        "endChar": 50
      },
      "revId": "51dde532e48e66948c58eaab75925f89211b89ff",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9d7047b9_5201965b",
        "filename": "chrome/browser/io_thread.h",
        "patchSetId": 12
      },
      "lineNbr": 139,
      "author": {
        "id": 1115968
      },
      "writtenOn": "2017-12-18T21:22:56Z",
      "side": 1,
      "message": "Sorry, I was confused by the fact it\u0027s not used in io_thread.cc (Which is where I think it should be initialized, per other comment)",
      "parentUuid": "4be8f384_472ea8b3",
      "range": {
        "startLine": 139,
        "startChar": 36,
        "endLine": 139,
        "endChar": 50
      },
      "revId": "51dde532e48e66948c58eaab75925f89211b89ff",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "413716c7_b53d8a2e",
        "filename": "chrome/browser/net/system_network_context_manager.cc",
        "patchSetId": 12
      },
      "lineNbr": 131,
      "author": {
        "id": 1115968
      },
      "writtenOn": "2017-12-15T17:37:56Z",
      "side": 1,
      "message": "I think to fix the quic disable stuff, you need to:\n\n1) Remove this check, and unconditionally call into the NetworkService.\n2) Have the network service disable quic on NetworkContext registration, to avoid any races.",
      "range": {
        "startLine": 131,
        "startChar": 34,
        "endLine": 131,
        "endChar": 35
      },
      "revId": "51dde532e48e66948c58eaab75925f89211b89ff",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "39292f9f_5cc7a18e",
        "filename": "chrome/browser/net/system_network_context_manager.cc",
        "patchSetId": 12
      },
      "lineNbr": 131,
      "author": {
        "id": 1002532
      },
      "writtenOn": "2017-12-15T21:21:43Z",
      "side": 1,
      "message": "Done (For 1, I don\u0027t think there wasn\u0027t a bug before, per the comment there, but I did it since it simplifies this file)",
      "parentUuid": "413716c7_b53d8a2e",
      "range": {
        "startLine": 131,
        "startChar": 34,
        "endLine": 131,
        "endChar": 35
      },
      "revId": "51dde532e48e66948c58eaab75925f89211b89ff",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bf4cbb70_046e0763",
        "filename": "chrome/browser/net/system_network_context_manager.cc",
        "patchSetId": 12
      },
      "lineNbr": 131,
      "author": {
        "id": 1115968
      },
      "writtenOn": "2017-12-18T21:22:56Z",
      "side": 1,
      "message": "I\u0027m still not seeing how we ended up disabling QUIC in the NetworkService disabled route without this - it just doesn\u0027t seem like there\u0027s any code to disable QUIC in existing URLRequestContexts.  IOThread::DisableQuic() only does it on new URLRequestContexts, so where were we doing it in already created ones?",
      "parentUuid": "39292f9f_5cc7a18e",
      "range": {
        "startLine": 131,
        "startChar": 34,
        "endLine": 131,
        "endChar": 35
      },
      "revId": "51dde532e48e66948c58eaab75925f89211b89ff",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "11d58f0d_30068e59",
        "filename": "chrome/browser/net/system_network_context_manager.cc",
        "patchSetId": 12
      },
      "lineNbr": 131,
      "author": {
        "id": 1002532
      },
      "writtenOn": "2017-12-18T21:57:48Z",
      "side": 1,
      "message": "\u003e I\u0027m still not seeing how we ended up disabling QUIC in the NetworkService disabled route without this - \n\nline 41 above which called\ncontent::GetNetworkServiceImpl()-\u003eDisableQuic();\n\n\u003e it just doesn\u0027t seem like there\u0027s any code to disable QUIC in existing URLRequestContexts.  IOThread::DisableQuic() only does it on new URLRequestContexts, so where were we doing it in already created ones?",
      "parentUuid": "bf4cbb70_046e0763",
      "range": {
        "startLine": 131,
        "startChar": 34,
        "endLine": 131,
        "endChar": 35
      },
      "revId": "51dde532e48e66948c58eaab75925f89211b89ff",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "18b7bf36_258857bd",
        "filename": "content/browser/network_service_instance.cc",
        "patchSetId": 12
      },
      "lineNbr": 38,
      "author": {
        "id": 1115968
      },
      "writtenOn": "2017-12-15T17:37:56Z",
      "side": 1,
      "message": "Think this should be up with the others, so it\u0027s easy to see what the globals are. Or better, any reason not to just make this a strong binding?",
      "range": {
        "startLine": 38,
        "startChar": 9,
        "endLine": 38,
        "endChar": 29
      },
      "revId": "51dde532e48e66948c58eaab75925f89211b89ff",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3e025d97_63d8c10a",
        "filename": "content/browser/network_service_instance.cc",
        "patchSetId": 12
      },
      "lineNbr": 38,
      "author": {
        "id": 1002532
      },
      "writtenOn": "2017-12-15T21:21:43Z",
      "side": 1,
      "message": "In general I prefer to keep things local if other methods in that file don\u0027t need it. I didn\u0027t see any reason to slow shutdown so that\u0027s why I leak it.",
      "parentUuid": "18b7bf36_258857bd",
      "range": {
        "startLine": 38,
        "startChar": 9,
        "endLine": 38,
        "endChar": 29
      },
      "revId": "51dde532e48e66948c58eaab75925f89211b89ff",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6281e798_919941ac",
        "filename": "content/browser/network_service_instance.cc",
        "patchSetId": 12
      },
      "lineNbr": 44,
      "author": {
        "id": 1115968
      },
      "writtenOn": "2017-12-15T17:37:56Z",
      "side": 1,
      "message": "DCHECK(!g_network_service_ptr-\u003eis_bound()), for documentation purposes?  The encountered_error case shouldn\u0027t happen, in this case.",
      "range": {
        "startLine": 44,
        "startChar": 12,
        "endLine": 44,
        "endChar": 0
      },
      "revId": "51dde532e48e66948c58eaab75925f89211b89ff",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4c5193dc_312c2511",
        "filename": "content/browser/network_service_instance.cc",
        "patchSetId": 12
      },
      "lineNbr": 44,
      "author": {
        "id": 1002532
      },
      "writtenOn": "2017-12-15T21:21:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6281e798_919941ac",
      "range": {
        "startLine": 44,
        "startChar": 12,
        "endLine": 44,
        "endChar": 0
      },
      "revId": "51dde532e48e66948c58eaab75925f89211b89ff",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b0780a84_cd56c742",
        "filename": "content/browser/network_service_instance.cc",
        "patchSetId": 12
      },
      "lineNbr": 55,
      "author": {
        "id": 1115968
      },
      "writtenOn": "2017-12-15T17:37:56Z",
      "side": 1,
      "message": "optional:  Suggest (*g_network_service_ptr)-\u003e as being a little cleaner.",
      "range": {
        "startLine": 55,
        "startChar": 33,
        "endLine": 55,
        "endChar": 34
      },
      "revId": "51dde532e48e66948c58eaab75925f89211b89ff",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e3db39ab_8a88a29b",
        "filename": "content/browser/network_service_instance.cc",
        "patchSetId": 12
      },
      "lineNbr": 55,
      "author": {
        "id": 1002532
      },
      "writtenOn": "2017-12-15T21:21:43Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b0780a84_cd56c742",
      "range": {
        "startLine": 55,
        "startChar": 33,
        "endLine": 55,
        "endChar": 34
      },
      "revId": "51dde532e48e66948c58eaab75925f89211b89ff",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c670a742_0ce6b135",
        "filename": "content/browser/network_service_instance.cc",
        "patchSetId": 12
      },
      "lineNbr": 60,
      "author": {
        "id": 1115968
      },
      "writtenOn": "2017-12-15T17:37:56Z",
      "side": 1,
      "message": "Can just make this return a NEtworkServiceImpl instead (Since it\u0027s a private method, and you say you\u0027re merging the classes, anyways, to have just a private NetworkService class.  That also gets rid of the cast in StoragePartitionImpl)",
      "range": {
        "startLine": 60,
        "startChar": 16,
        "endLine": 60,
        "endChar": 37
      },
      "revId": "51dde532e48e66948c58eaab75925f89211b89ff",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5836ec87_8667ba17",
        "filename": "content/browser/network_service_instance.cc",
        "patchSetId": 12
      },
      "lineNbr": 60,
      "author": {
        "id": 1002532
      },
      "writtenOn": "2017-12-15T21:21:43Z",
      "side": 1,
      "message": "That was an old code review comment, excuse the confusion as I changed the code to fix tests.\n\nRight now this is exposed outside content, hence why it returns the interface.",
      "parentUuid": "c670a742_0ce6b135",
      "range": {
        "startLine": 60,
        "startChar": 16,
        "endLine": 60,
        "endChar": 37
      },
      "revId": "51dde532e48e66948c58eaab75925f89211b89ff",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a4c7fb0f_c3065c44",
        "filename": "content/browser/storage_partition_impl.cc",
        "patchSetId": 12
      },
      "lineNbr": 269,
      "author": {
        "id": 1115968
      },
      "writtenOn": "2017-12-15T17:37:56Z",
      "side": 1,
      "message": "I guess we still need NetworkContextOwner (Instead of having the NetworkService own these NetworkContext) to ensure the NetworkContext is torn down before the URLRequestContext?  :(",
      "range": {
        "startLine": 269,
        "startChar": 8,
        "endLine": 269,
        "endChar": 23
      },
      "revId": "51dde532e48e66948c58eaab75925f89211b89ff",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2754f670_9e5fe1dd",
        "filename": "content/browser/storage_partition_impl.cc",
        "patchSetId": 12
      },
      "lineNbr": 269,
      "author": {
        "id": 1002532
      },
      "writtenOn": "2017-12-15T21:21:43Z",
      "side": 1,
      "message": "This class, like the system context comment you left, is also used to setup a binding for the NetworkContext interface when network service isn\u0027t being used.",
      "parentUuid": "a4c7fb0f_c3065c44",
      "range": {
        "startLine": 269,
        "startChar": 8,
        "endLine": 269,
        "endChar": 23
      },
      "revId": "51dde532e48e66948c58eaab75925f89211b89ff",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5809bc61_481c888d",
        "filename": "content/browser/storage_partition_impl.cc",
        "patchSetId": 12
      },
      "lineNbr": 269,
      "author": {
        "id": 1115968
      },
      "writtenOn": "2017-12-18T21:22:56Z",
      "side": 1,
      "message": "Right...But that doesn\u0027t explain why the NetworkContext doesn\u0027t just own the URLRequestContext in both cases.  I\u0027m not understanding the need for the new ownership model, or what we get from it.  I get that you want to make it so we can not have a NetworkService in-process when the NetworkService is disabled (Though I think the code would be simpler if we still did that, and just had the IOThread own it in that case), but that doesn\u0027t mean the NetworkContext can\u0027t still own the URLREquestContext, since we always create a NetworkContext.",
      "parentUuid": "2754f670_9e5fe1dd",
      "range": {
        "startLine": 269,
        "startChar": 8,
        "endLine": 269,
        "endChar": 23
      },
      "revId": "51dde532e48e66948c58eaab75925f89211b89ff",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "49da5a5a_dc13a0fc",
        "filename": "content/browser/storage_partition_impl.cc",
        "patchSetId": 12
      },
      "lineNbr": 269,
      "author": {
        "id": 1002532
      },
      "writtenOn": "2017-12-18T21:57:48Z",
      "side": 1,
      "message": "\u003e Right...But that doesn\u0027t explain why the NetworkContext doesn\u0027t just own the URLRequestContext in both cases.\n\nI was trying to get away from creating NetworkContext in-process when the network service is used. In that  case, there would be no NetworkContext class to own the URLRequestContext that\u0027s still being created in-process.\n\n\u003e  I\u0027m not understanding the need for the new ownership model, or what we get from it.  I get that you want to make it so we can not have a NetworkService in-process when the NetworkService is disabled (Though I think the code would be simpler if we still did that, and just had the IOThread own it in that case),\n\nI think it\u0027s confusing to have 2 NetworkService implementations if network service is enabled in 2 processes.\n\n\u003e but that doesn\u0027t mean the NetworkContext can\u0027t still own the URLREquestContext, since we always create a NetworkContext.",
      "parentUuid": "5809bc61_481c888d",
      "range": {
        "startLine": 269,
        "startChar": 8,
        "endLine": 269,
        "endChar": 23
      },
      "revId": "51dde532e48e66948c58eaab75925f89211b89ff",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a23ee1f2_db1fd622",
        "filename": "content/network/url_request_context_builder_mojo.cc",
        "patchSetId": 12
      },
      "lineNbr": 37,
      "author": {
        "id": 1115968
      },
      "writtenOn": "2017-12-15T17:37:56Z",
      "side": 1,
      "message": "Disconnecting NetworkContext initialization from the in-process NetworkService seems like it may cause some problems down the line - namely, we can\u0027t get rid of Chrome\u0027s in-process NetLog or HostResolver (Or make quic disabling go through the NetworkServicePtr) in the network service disabled case.  I guess we can (in the future) make this some sort of callback using NetworkServiceInstance, which will hook those up in the in-process case, and bypass that logic otherwise?",
      "range": {
        "startLine": 37,
        "startChar": 53,
        "endLine": 37,
        "endChar": 66
      },
      "revId": "51dde532e48e66948c58eaab75925f89211b89ff",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "50b00cd7_291a2319",
        "filename": "content/network/url_request_context_builder_mojo.cc",
        "patchSetId": 12
      },
      "lineNbr": 37,
      "author": {
        "id": 1002532
      },
      "writtenOn": "2017-12-15T21:21:43Z",
      "side": 1,
      "message": "\u003e Disconnecting NetworkContext initialization from the in-process NetworkService seems like it may cause some problems down the line - namely, we can\u0027t get rid of Chrome\u0027s in-process NetLog or HostResolver (Or make quic disabling go through the NetworkServicePtr) in the network service disabled case.  I guess we can (in the future) make this some sort of callback using NetworkServiceInstance, which will hook those up in the in-process case, and bypass that logic otherwise?\n\n\nI\u0027m not sure I follow. Currently, in the network service disabled case we still use NetworkService to disable quic (per my other comment). The main purpose here is to avoid creating NetworkContext C++ class in the browser process when the network service is enabled. If the network service is disabled, we do create NetworkContext in the browser process per URLLRequestContext, which should satisfy the goals you listed above?",
      "parentUuid": "a23ee1f2_db1fd622",
      "range": {
        "startLine": 37,
        "startChar": 53,
        "endLine": 37,
        "endChar": 66
      },
      "revId": "51dde532e48e66948c58eaab75925f89211b89ff",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eaffa086_e01f1281",
        "filename": "content/network/url_request_context_builder_mojo.cc",
        "patchSetId": 12
      },
      "lineNbr": 37,
      "author": {
        "id": 1115968
      },
      "writtenOn": "2017-12-18T21:22:56Z",
      "side": 1,
      "message": "Suppose NetworkServiceImpl has a NetLog and HostResolver, and we want to use that to populate the URLRequestContext builder parameter, so we can remove Chrome\u0027s ChromeNetLog and HostResolver.  I\u0027m not seeing how to do it if we use this path, instead of having the NetworkService create the NetworkContext.",
      "parentUuid": "50b00cd7_291a2319",
      "range": {
        "startLine": 37,
        "startChar": 53,
        "endLine": 37,
        "endChar": 66
      },
      "revId": "51dde532e48e66948c58eaab75925f89211b89ff",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e0ea0300_29cdf0c2",
        "filename": "content/network/url_request_context_builder_mojo.cc",
        "patchSetId": 12
      },
      "lineNbr": 37,
      "author": {
        "id": 1002532
      },
      "writtenOn": "2017-12-18T21:57:48Z",
      "side": 1,
      "message": "I primarily added this method for when we don\u0027t have NetworkServiceImpl in the browser process because network service is enabled.\n\nI\u0027m still using it in IOThread::ConstructSystemRequestContext in both cases. In the case you describe, we\u0027d want to readd a method to NetworkService* that creates a NetworkContext. Is your comment that you\u0027d rather we keep that method now, and then call it for the network-service-disabled case?",
      "parentUuid": "eaffa086_e01f1281",
      "range": {
        "startLine": 37,
        "startChar": 53,
        "endLine": 37,
        "endChar": 66
      },
      "revId": "51dde532e48e66948c58eaab75925f89211b89ff",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9f4efdd0_c04d5976",
        "filename": "content/network/url_request_context_builder_mojo.cc",
        "patchSetId": 12
      },
      "lineNbr": 37,
      "author": {
        "id": 1115968
      },
      "writtenOn": "2017-12-18T22:26:11Z",
      "side": 1,
      "message": "I have two concerns:\n\n1)  Not having an in-process NetworkService means we have to keep around Chrome initialization of objects owned by the NetworkService, for the NetworkService-disabled path (NetLog, HostResolver, quic_enabled_ - we may be able to get rid of the quic_enabled_ and NetLog, because they have so few consumers, but HostResolver we\u0027ll certainly need as long as we have legacy in-process consumers.  Not sure if there are other things in the same boat).\n\n2)  If we want to use the NetworkService\u0027s objects in the in-process route, we\u0027ll need to hook stuff up from the NetworkService here.  NetworkContext::ApplyContextParamsToBuilder(network_service (possibly null?), this, params, quic_disabled, net_log /* Possibly null when network_service isn\u0027t null? */);",
      "parentUuid": "e0ea0300_29cdf0c2",
      "range": {
        "startLine": 37,
        "startChar": 53,
        "endLine": 37,
        "endChar": 66
      },
      "revId": "51dde532e48e66948c58eaab75925f89211b89ff",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "59f0ade1_a5856bf6",
        "filename": "content/network/url_request_context_builder_mojo.cc",
        "patchSetId": 12
      },
      "lineNbr": 37,
      "author": {
        "id": 1115968
      },
      "writtenOn": "2017-12-18T22:30:49Z",
      "side": 1,
      "message": "Also, if we use a shared PrefService for settings for multiple objects, that would normally be owned by the NetworkContext itself.  We\u0027d need the pref service for ApplyContextParamsToBuilder for the in-process route, but we don\u0027t have a NetworkContext yet.  I am pretty sure we will want to use the PrefService for other stuff as well.",
      "parentUuid": "9f4efdd0_c04d5976",
      "range": {
        "startLine": 37,
        "startChar": 53,
        "endLine": 37,
        "endChar": 66
      },
      "revId": "51dde532e48e66948c58eaab75925f89211b89ff",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eb9b31d9_4b1d1056",
        "filename": "content/network/url_request_context_builder_mojo.cc",
        "patchSetId": 12
      },
      "lineNbr": 37,
      "author": {
        "id": 1002532
      },
      "writtenOn": "2017-12-18T22:32:35Z",
      "side": 1,
      "message": "\u003e I have two concerns:\n\u003e \n\u003e 1)  Not having an in-process NetworkService means we have to keep around Chrome initialization of objects owned by the NetworkService, for the NetworkService-disabled path\n\nIn NetworkService-disabled path, there will be an in-process NetworkService instance.\n\nI just meant that when network service is enabled, there\u0027s no in-process NetworkService instance. That will be running in the network process.\n\n\u003e (NetLog, HostResolver, quic_enabled_ - we may be able to get rid of the quic_enabled_ and NetLog, because they have so few consumers, but HostResolver we\u0027ll certainly need as long as we have legacy in-process consumers.  Not sure if there are other things in the same boat).\n\u003e \n\u003e 2)  If we want to use the NetworkService\u0027s objects in the in-process route, we\u0027ll need to hook stuff up from the NetworkService here.  NetworkContext::ApplyContextParamsToBuilder(network_service (possibly null?), this, params, quic_disabled, net_log /* Possibly null when network_service isn\u0027t null? */);\n\nOr we can make the calling code not call this method in that case, and just call it on NetworkService*. Then things like quic_disabled, NetLog etc automatically get propagated.",
      "parentUuid": "9f4efdd0_c04d5976",
      "range": {
        "startLine": 37,
        "startChar": 53,
        "endLine": 37,
        "endChar": 66
      },
      "revId": "51dde532e48e66948c58eaab75925f89211b89ff",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "682e6b74_ef0b3487",
        "filename": "content/network/url_request_context_builder_mojo.cc",
        "patchSetId": 12
      },
      "lineNbr": 37,
      "author": {
        "id": 1115968
      },
      "writtenOn": "2017-12-18T22:38:47Z",
      "side": 1,
      "message": "Sorry, I meant in the NetworkService-enabled route, we\u0027d need them to be created and owned by the IOThread.  I\u0027d really like to be able to reduce IOThread to nothing other than initialization of the in-process NetworkService (In both the enabled and disabled cases).\n\nBut then there\u0027s the case where there is no in-process NetworkService.",
      "parentUuid": "eb9b31d9_4b1d1056",
      "range": {
        "startLine": 37,
        "startChar": 53,
        "endLine": 37,
        "endChar": 66
      },
      "tag": "mailMessageId\u003d\u003cCAEK7mvoxXZKVYf9LP4eu5bUDVp3eXHu42RsP6BMcAdTa+P7oxg@mail.gmail.com\u003e",
      "revId": "51dde532e48e66948c58eaab75925f89211b89ff",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}