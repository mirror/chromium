{
  "comments": [
    {
      "key": {
        "uuid": "eacb683b_a3e41a42",
        "filename": "net/disk_cache/simple/simple_entry_format.h",
        "patchSetId": 14
      },
      "lineNbr": 47,
      "author": {
        "id": 1116284
      },
      "writtenOn": "2017-09-21T13:04:45Z",
      "side": 1,
      "message": "ooh, ooh, bike shedding! Perhaps kSimpleEntryMaxFileCount, kSimpleEntrySparseFileCount?",
      "range": {
        "startLine": 47,
        "startChar": 17,
        "endLine": 47,
        "endChar": 41
      },
      "revId": "24eb7c7d1ca33fd3139e1911592b01f721c77fa8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "de9a0fbc_ae2a749b",
        "filename": "net/disk_cache/simple/simple_entry_format.h",
        "patchSetId": 14
      },
      "lineNbr": 47,
      "author": {
        "id": 1226494
      },
      "writtenOn": "2017-09-21T14:01:49Z",
      "side": 1,
      "message": "Well, kSimpleEntrySparseFileCount is clearly not it, since there is no constant for just that.\nBasically, we have one constant for _0 and _1, and one for _0, _1, and _s --- mostly because SimpleSynchronousEntry has loops for _0 and _1, and totally separate paths for _s (what with it having a different format!), while at file tracker level all 3 possibly files are identical.",
      "parentUuid": "eacb683b_a3e41a42",
      "range": {
        "startLine": 47,
        "startChar": 17,
        "endLine": 47,
        "endChar": 41
      },
      "revId": "24eb7c7d1ca33fd3139e1911592b01f721c77fa8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bb84b1d0_7ec0efe7",
        "filename": "net/disk_cache/simple/simple_file_tracker.h",
        "patchSetId": 14
      },
      "lineNbr": 25,
      "author": {
        "id": 1116284
      },
      "writtenOn": "2017-09-21T13:04:45Z",
      "side": 1,
      "message": "s/backends/backend instances/",
      "range": {
        "startLine": 25,
        "startChar": 3,
        "endLine": 25,
        "endChar": 11
      },
      "revId": "24eb7c7d1ca33fd3139e1911592b01f721c77fa8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c99ea27b_c69752a3",
        "filename": "net/disk_cache/simple/simple_file_tracker.h",
        "patchSetId": 14
      },
      "lineNbr": 25,
      "author": {
        "id": 1116284
      },
      "writtenOn": "2017-09-21T13:04:45Z",
      "side": 1,
      "message": "Perhaps change the \"it will eventually ...\" comment into a TODO.",
      "revId": "24eb7c7d1ca33fd3139e1911592b01f721c77fa8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d6d13854_daa25950",
        "filename": "net/disk_cache/simple/simple_file_tracker.h",
        "patchSetId": 14
      },
      "lineNbr": 25,
      "author": {
        "id": 1226494
      },
      "writtenOn": "2017-09-21T18:25:40Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "c99ea27b_c69752a3",
      "revId": "24eb7c7d1ca33fd3139e1911592b01f721c77fa8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "499f5af0_2f835398",
        "filename": "net/disk_cache/simple/simple_file_tracker.h",
        "patchSetId": 14
      },
      "lineNbr": 25,
      "author": {
        "id": 1226494
      },
      "writtenOn": "2017-09-21T18:25:40Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "bb84b1d0_7ec0efe7",
      "range": {
        "startLine": 25,
        "startChar": 3,
        "endLine": 25,
        "endChar": 11
      },
      "revId": "24eb7c7d1ca33fd3139e1911592b01f721c77fa8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "436d4cde_3c0cf277",
        "filename": "net/disk_cache/simple/simple_file_tracker.h",
        "patchSetId": 14
      },
      "lineNbr": 26,
      "author": {
        "id": 1116284
      },
      "writtenOn": "2017-09-21T13:04:45Z",
      "side": 1,
      "message": "This comment needs thread safety information about this class.",
      "range": {
        "startLine": 26,
        "startChar": 75,
        "endLine": 26,
        "endChar": 0
      },
      "revId": "24eb7c7d1ca33fd3139e1911592b01f721c77fa8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "be1a5fe7_2b63391d",
        "filename": "net/disk_cache/simple/simple_file_tracker.h",
        "patchSetId": 14
      },
      "lineNbr": 26,
      "author": {
        "id": 1226494
      },
      "writtenOn": "2017-09-21T18:25:40Z",
      "side": 1,
      "message": "Done... maybe.",
      "parentUuid": "436d4cde_3c0cf277",
      "range": {
        "startLine": 26,
        "startChar": 75,
        "endLine": 26,
        "endChar": 0
      },
      "revId": "24eb7c7d1ca33fd3139e1911592b01f721c77fa8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9c0f3739_e08765a2",
        "filename": "net/disk_cache/simple/simple_file_tracker.h",
        "patchSetId": 14
      },
      "lineNbr": 54,
      "author": {
        "id": 1116284
      },
      "writtenOn": "2017-09-21T13:04:45Z",
      "side": 1,
      "message": "Why have Register? Why not let Acquire create the File? It\u0027ll have to do that if the file has been closed due to FD pressure anyway.",
      "range": {
        "startLine": 54,
        "startChar": 7,
        "endLine": 54,
        "endChar": 15
      },
      "revId": "24eb7c7d1ca33fd3139e1911592b01f721c77fa8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "606ee4ca_423167b2",
        "filename": "net/disk_cache/simple/simple_file_tracker.h",
        "patchSetId": 14
      },
      "lineNbr": 54,
      "author": {
        "id": 1226494
      },
      "writtenOn": "2017-09-21T14:01:49Z",
      "side": 1,
      "message": "Hmm, the actual answer is: I didn\u0027t want to have SimpleFileTracker know about opening files at this change, and wanted to minimize the changes to existing codebase, so this didn\u0027t occur to me.\n\nIt\u0027s an elegant idea, but I don\u0027t know if it can fit in warts like this:\n\nhttps://cs.chromium.org/chromium/src/net/disk_cache/simple/simple_synchronous_entry.cc?rcl\u003d6bfe7378138d00ec380f2d1eafa8c7525d9a8660\u0026l\u003d877",
      "parentUuid": "9c0f3739_e08765a2",
      "range": {
        "startLine": 54,
        "startChar": 7,
        "endLine": 54,
        "endChar": 15
      },
      "revId": "24eb7c7d1ca33fd3139e1911592b01f721c77fa8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3e992e0e_f3ce3e8d",
        "filename": "net/disk_cache/simple/simple_file_tracker.h",
        "patchSetId": 14
      },
      "lineNbr": 54,
      "author": {
        "id": 1116284
      },
      "writtenOn": "2017-09-21T15:43:28Z",
      "side": 1,
      "message": "But we\u0027re presumably going to have to deal with those warts when opening back up a file we closed due to FD pressure?",
      "parentUuid": "606ee4ca_423167b2",
      "range": {
        "startLine": 54,
        "startChar": 7,
        "endLine": 54,
        "endChar": 15
      },
      "revId": "24eb7c7d1ca33fd3139e1911592b01f721c77fa8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d7b48495_429a8d02",
        "filename": "net/disk_cache/simple/simple_file_tracker.h",
        "patchSetId": 14
      },
      "lineNbr": 54,
      "author": {
        "id": 1226494
      },
      "writtenOn": "2017-09-21T17:54:26Z",
      "side": 1,
      "message": "Well, this particular thing only matters for creation, so no.\n\nIt does actually raises an interesting point: if someone clears the cache via android UI while cache ops are going on and we are low on FDs, the cache ops will fail. That seems unavoidable, and probably OK?",
      "parentUuid": "3e992e0e_f3ce3e8d",
      "range": {
        "startLine": 54,
        "startChar": 7,
        "endLine": 54,
        "endChar": 15
      },
      "revId": "24eb7c7d1ca33fd3139e1911592b01f721c77fa8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3d15d5ef_fe68c66f",
        "filename": "net/disk_cache/simple/simple_file_tracker.h",
        "patchSetId": 14
      },
      "lineNbr": 54,
      "author": {
        "id": 1116284
      },
      "writtenOn": "2017-09-22T20:55:33Z",
      "side": 1,
      "message": "Interesting point. It seems unavoidable and okay to me.\n\nIn terms of Register, I\u0027d prefer the simpler interface, but can see wanting to postpone that. How about a TODO?",
      "parentUuid": "d7b48495_429a8d02",
      "range": {
        "startLine": 54,
        "startChar": 7,
        "endLine": 54,
        "endChar": 15
      },
      "revId": "24eb7c7d1ca33fd3139e1911592b01f721c77fa8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c93b58f6_32ba50c9",
        "filename": "net/disk_cache/simple/simple_file_tracker.h",
        "patchSetId": 14
      },
      "lineNbr": 62,
      "author": {
        "id": 1116284
      },
      "writtenOn": "2017-09-21T13:04:45Z",
      "side": 1,
      "message": "Why not return a scoped_refptr\u003cFileHandle\u003e where FileHandle is RefCounted? That way you can make Release a private function and you wouldn\u0027t need the manual ref counting that\u0027s going on in simple_synchronous_entry. We try to avoid manual ref counting if possible.",
      "range": {
        "startLine": 62,
        "startChar": 2,
        "endLine": 62,
        "endChar": 13
      },
      "revId": "24eb7c7d1ca33fd3139e1911592b01f721c77fa8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e4f5a781_3106afad",
        "filename": "net/disk_cache/simple/simple_file_tracker.h",
        "patchSetId": 14
      },
      "lineNbr": 62,
      "author": {
        "id": 1226494
      },
      "writtenOn": "2017-09-21T14:01:49Z",
      "side": 1,
      "message": "I think I am missing how it would help.... the current design has two motivations:\n1) I don\u0027t have to pass through the file into helper methods, to reduce the changes to the code, and they don\u0027t have to worry about if they\u0027re the first ones opening or not. Maybe I should reconsider that. If I do that, I don\u0027t even need the refcount in the first place; and I don\u0027t see how a scoped_refptr would be involved if I don\u0027t pass it around?\n2) There is no need to grab the lock inside SimpleFileTracker inside the helpers re-grabbing the file, it can all be done locally.",
      "parentUuid": "c93b58f6_32ba50c9",
      "range": {
        "startLine": 62,
        "startChar": 2,
        "endLine": 62,
        "endChar": 13
      },
      "revId": "24eb7c7d1ca33fd3139e1911592b01f721c77fa8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "96566af4_926f01d3",
        "filename": "net/disk_cache/simple/simple_file_tracker.h",
        "patchSetId": 14
      },
      "lineNbr": 62,
      "author": {
        "id": 1116284
      },
      "writtenOn": "2017-09-21T15:43:28Z",
      "side": 1,
      "message": "The first option works for me. Though it would make sense to wrap the File* in a std::unique_ptr with a custom deleter that calls Close so you don\u0027t have to remember to do that.",
      "parentUuid": "e4f5a781_3106afad",
      "range": {
        "startLine": 62,
        "startChar": 2,
        "endLine": 62,
        "endChar": 13
      },
      "revId": "24eb7c7d1ca33fd3139e1911592b01f721c77fa8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "468e819a_b3d364d6",
        "filename": "net/disk_cache/simple/simple_file_tracker.h",
        "patchSetId": 14
      },
      "lineNbr": 62,
      "author": {
        "id": 1226494
      },
      "writtenOn": "2017-09-21T17:54:26Z",
      "side": 1,
      "message": "Hmm, might still want a separate FileHandle type simply because of combining the null and IsValid checks.",
      "parentUuid": "96566af4_926f01d3",
      "range": {
        "startLine": 62,
        "startChar": 2,
        "endLine": 62,
        "endChar": 13
      },
      "revId": "24eb7c7d1ca33fd3139e1911592b01f721c77fa8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c2ace4b4_b0aa7248",
        "filename": "net/disk_cache/simple/simple_file_tracker.h",
        "patchSetId": 14
      },
      "lineNbr": 62,
      "author": {
        "id": 1226494
      },
      "writtenOn": "2017-09-21T19:37:44Z",
      "side": 1,
      "message": "Doneish.... It does remove some code, though feels a bit more brittle.\nMakes me think that I should have the refcount in tracker, just in case...",
      "parentUuid": "468e819a_b3d364d6",
      "range": {
        "startLine": 62,
        "startChar": 2,
        "endLine": 62,
        "endChar": 13
      },
      "revId": "24eb7c7d1ca33fd3139e1911592b01f721c77fa8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c177b987_30dcbafa",
        "filename": "net/disk_cache/simple/simple_file_tracker.h",
        "patchSetId": 14
      },
      "lineNbr": 62,
      "author": {
        "id": 1116284
      },
      "writtenOn": "2017-09-22T20:55:33Z",
      "side": 1,
      "message": "So here is my suggestion with the latest code:\n\nstd::unique_ptr\u003cFileHandle\u003e Acquire(...);\n\nThat way, any consumer gets a safe object and they can pass it around as they like, instead of the unsafe raw File*s that are floating around in simple_synchronous_entry.",
      "parentUuid": "c2ace4b4_b0aa7248",
      "range": {
        "startLine": 62,
        "startChar": 2,
        "endLine": 62,
        "endChar": 13
      },
      "revId": "24eb7c7d1ca33fd3139e1911592b01f721c77fa8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7f61c822_881970f8",
        "filename": "net/disk_cache/simple/simple_file_tracker.h",
        "patchSetId": 14
      },
      "lineNbr": 62,
      "author": {
        "id": 1226494
      },
      "writtenOn": "2017-09-22T21:25:53Z",
      "side": 1,
      "message": "I don\u0027t see how that helps with most of the raw File*, since temporarily lending out a std::unique_ptr\u003cFile\u003e to a helper method is supposed to be via a File* anyway?\n\nWith respect to the handle --- I was going to object that having FileHandle in SFT will cause problems for eventual Doom, since that will need to rename things by changing the generation counter --- which is simpler to deal with in the current world since one can just update the field in SimpleSynchronousEntry and get the FileHandle indirecting via it at the same time --- but I guess we don\u0027t actually need the doom generation for the key, since the owner + hash are unique. Still, I am not seeing much of a benefit, as per the first paragraph.\n\n(ref. https://chromium.googlesource.com/chromium/src/+/master/styleguide/c++/c++.md#object-ownership-and-calling-conventions)",
      "parentUuid": "c177b987_30dcbafa",
      "range": {
        "startLine": 62,
        "startChar": 2,
        "endLine": 62,
        "endChar": 13
      },
      "revId": "24eb7c7d1ca33fd3139e1911592b01f721c77fa8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "aba27cb7_6e873d21",
        "filename": "net/disk_cache/simple/simple_file_tracker.h",
        "patchSetId": 14
      },
      "lineNbr": 62,
      "author": {
        "id": 1116284
      },
      "writtenOn": "2017-09-25T13:00:52Z",
      "side": 1,
      "message": "Acquire is effectively passing ownership of something (Release must be called). Let\u0027s make that ownership explicit and leverage RAII to help us out. Release can then become a private method that only FileHandle can access. I have no issue with the raw File*s going to the helper functions, as ownership is not conveyed there.\n\nIn terms of eventual doom, I can\u0027t really comment on that as I haven\u0027t seen it and am not sure what you have in mind. I\u0027m not quite sure what the generation counter is yet either.",
      "parentUuid": "7f61c822_881970f8",
      "range": {
        "startLine": 62,
        "startChar": 2,
        "endLine": 62,
        "endChar": 13
      },
      "revId": "24eb7c7d1ca33fd3139e1911592b01f721c77fa8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3813bc88_78241f6d",
        "filename": "net/disk_cache/simple/simple_file_tracker.h",
        "patchSetId": 14
      },
      "lineNbr": 62,
      "author": {
        "id": 1226494
      },
      "writtenOn": "2017-09-25T14:55:41Z",
      "side": 1,
      "message": "Aha! Understood. That definitely is an improvement safety-wise, and FileHandle being in SSE did feel a bit crowded. I think I\u0027ll just make FileHandle movable, though.\n\nAnd the doom thing is less issue than I thought anyway, since FileHandle has the SimpleSynchronousEntry* pointer, and having that have a const getter for the key... doesn\u0027t seem like a problem at all.\n\n(Done)",
      "parentUuid": "aba27cb7_6e873d21",
      "range": {
        "startLine": 62,
        "startChar": 2,
        "endLine": 62,
        "endChar": 13
      },
      "revId": "24eb7c7d1ca33fd3139e1911592b01f721c77fa8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "22ce44ea_e0412f0f",
        "filename": "net/disk_cache/simple/simple_file_tracker.h",
        "patchSetId": 14
      },
      "lineNbr": 62,
      "author": {
        "id": 1116284
      },
      "writtenOn": "2017-09-25T15:07:57Z",
      "side": 1,
      "message": "Why movable? IMHO it\u0027s clear to the consumer that it has to be moved when it\u0027s in a unique_ptr. Otherwise it seems like a normal copyable object.",
      "parentUuid": "3813bc88_78241f6d",
      "range": {
        "startLine": 62,
        "startChar": 2,
        "endLine": 62,
        "endChar": 13
      },
      "revId": "24eb7c7d1ca33fd3139e1911592b01f721c77fa8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4e2c93d0_da93fc68",
        "filename": "net/disk_cache/simple/simple_file_tracker.h",
        "patchSetId": 14
      },
      "lineNbr": 62,
      "author": {
        "id": 1226494
      },
      "writtenOn": "2017-09-25T15:09:56Z",
      "side": 1,
      "message": "To avoid pointless allocations?",
      "parentUuid": "22ce44ea_e0412f0f",
      "range": {
        "startLine": 62,
        "startChar": 2,
        "endLine": 62,
        "endChar": 13
      },
      "revId": "24eb7c7d1ca33fd3139e1911592b01f721c77fa8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "267db00e_42367149",
        "filename": "net/disk_cache/simple/simple_file_tracker.h",
        "patchSetId": 14
      },
      "lineNbr": 62,
      "author": {
        "id": 1116284
      },
      "writtenOn": "2017-09-25T15:18:34Z",
      "side": 1,
      "message": "Fair enough.",
      "parentUuid": "4e2c93d0_da93fc68",
      "range": {
        "startLine": 62,
        "startChar": 2,
        "endLine": 62,
        "endChar": 13
      },
      "revId": "24eb7c7d1ca33fd3139e1911592b01f721c77fa8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "162d6148_bacaf69b",
        "filename": "net/disk_cache/simple/simple_file_tracker.h",
        "patchSetId": 14
      },
      "lineNbr": 84,
      "author": {
        "id": 1116284
      },
      "writtenOn": "2017-09-21T13:04:45Z",
      "side": 1,
      "message": "This comment is confusing. Do consumers really need to know about doom_generation? And file name changing? Let\u0027s remove this function from this CL as it\u0027s not actually doing anything yet anyway.",
      "range": {
        "startLine": 76,
        "startChar": 0,
        "endLine": 84,
        "endChar": 55
      },
      "revId": "24eb7c7d1ca33fd3139e1911592b01f721c77fa8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f9b91ba6_c22b1b5b",
        "filename": "net/disk_cache/simple/simple_file_tracker.h",
        "patchSetId": 14
      },
      "lineNbr": 84,
      "author": {
        "id": 1226494
      },
      "writtenOn": "2017-09-21T14:01:49Z",
      "side": 1,
      "message": "So my thought was that this would compute the new doom_generation, and the client would do the renaming.  I am honestly not sure why I chose that, though it does have an advantage of being a lot easier to unit test like that (the new ID choice is surprisingly annoying in the hopefully-never-happening cases of wraparound)",
      "parentUuid": "162d6148_bacaf69b",
      "range": {
        "startLine": 76,
        "startChar": 0,
        "endLine": 84,
        "endChar": 55
      },
      "revId": "24eb7c7d1ca33fd3139e1911592b01f721c77fa8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9ce6e4c0_6a27fc6c",
        "filename": "net/disk_cache/simple/simple_file_tracker.h",
        "patchSetId": 14
      },
      "lineNbr": 84,
      "author": {
        "id": 1116284
      },
      "writtenOn": "2017-09-21T15:43:28Z",
      "side": 1,
      "message": "Let\u0027s add Doom() in the CL where something actually calls it?",
      "parentUuid": "f9b91ba6_c22b1b5b",
      "range": {
        "startLine": 76,
        "startChar": 0,
        "endLine": 84,
        "endChar": 55
      },
      "revId": "24eb7c7d1ca33fd3139e1911592b01f721c77fa8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2f011570_fdd1cc24",
        "filename": "net/disk_cache/simple/simple_file_tracker.h",
        "patchSetId": 14
      },
      "lineNbr": 84,
      "author": {
        "id": 1226494
      },
      "writtenOn": "2017-09-21T18:25:40Z",
      "side": 1,
      "message": "Removed. I suppose that CL would be a better place to decide where the boundary is, anyway.",
      "parentUuid": "9ce6e4c0_6a27fc6c",
      "range": {
        "startLine": 76,
        "startChar": 0,
        "endLine": 84,
        "endChar": 55
      },
      "revId": "24eb7c7d1ca33fd3139e1911592b01f721c77fa8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2b9a7334_3da7b4f1",
        "filename": "net/disk_cache/simple/simple_synchronous_entry.h",
        "patchSetId": 14
      },
      "lineNbr": 432,
      "author": {
        "id": 1116284
      },
      "writtenOn": "2017-09-21T13:04:45Z",
      "side": 1,
      "message": "It\u0027s not obvious what you\u0027re referring to by recursion level.\n\nPerhaps:\n\nHelpers for grabbing File objects from SimpleFileTracker. ReleaseFile must be called once for each AcquireFile call. It\u0027s safe to call AcquireFile multiple times before the subsequent ReleaseFiles.\n\nThough in the end I think we should just use file_tracker_-\u003eAcquire and it should return a scoped_refptr\u003cFileHandle\u003e (with a slightly different FileHandle, see comment in simple_file_tracker.h)",
      "range": {
        "startLine": 432,
        "startChar": 14,
        "endLine": 432,
        "endChar": 29
      },
      "revId": "24eb7c7d1ca33fd3139e1911592b01f721c77fa8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4fd21f2c_8b4e94f9",
        "filename": "net/disk_cache/simple/simple_synchronous_entry.h",
        "patchSetId": 14
      },
      "lineNbr": 432,
      "author": {
        "id": 1226494
      },
      "writtenOn": "2017-09-21T18:25:40Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2b9a7334_3da7b4f1",
      "range": {
        "startLine": 432,
        "startChar": 14,
        "endLine": 432,
        "endChar": 29
      },
      "revId": "24eb7c7d1ca33fd3139e1911592b01f721c77fa8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "151187e9_21a0337d",
        "filename": "net/disk_cache/simple/simple_synchronous_entry.h",
        "patchSetId": 14
      },
      "lineNbr": 472,
      "author": {
        "id": 1116284
      },
      "writtenOn": "2017-09-21T13:04:45Z",
      "side": 1,
      "message": "shouldn\u0027t this be using the constant that you added?",
      "range": {
        "startLine": 472,
        "startChar": 36,
        "endLine": 472,
        "endChar": 37
      },
      "revId": "24eb7c7d1ca33fd3139e1911592b01f721c77fa8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "83e14eed_22b37d6c",
        "filename": "net/disk_cache/simple/simple_synchronous_entry.h",
        "patchSetId": 14
      },
      "lineNbr": 472,
      "author": {
        "id": 1226494
      },
      "writtenOn": "2017-09-21T18:25:40Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "151187e9_21a0337d",
      "range": {
        "startLine": 472,
        "startChar": 36,
        "endLine": 472,
        "endChar": 37
      },
      "revId": "24eb7c7d1ca33fd3139e1911592b01f721c77fa8",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}