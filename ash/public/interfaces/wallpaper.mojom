// Copyright 2016 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module ash.mojom;

import "ash/public/interfaces/user_info.mojom";
import "components/signin/public/interfaces/account_id.mojom";
import "mojo/common/file_path.mojom";
import "mojo/common/time.mojom";
import "skia/public/interfaces/bitmap.mojom";
import "url/mojo/url.mojom";

// These values match wallpaper::WallpaperLayout.
enum WallpaperLayout {
  CENTER,
  CENTER_CROPPED,
  STRETCH,
  TILE,
};

// These values match wallpaper::WallpaperType.
enum WallpaperType {
  DAILY,
  CUSTOMIZED,
  DEFAULT,
  ONLINE,
  POLICY,
  THIRDPARTY,
  DEVICE,
};

// TODO(crbug.com/776464): Remove this after WallpaperManager is removed.
// WallpaperInfo will be an internal concept within WallpaperController.
//
// This corresponds to wallpaper::WallpaperInfo.
struct WallpaperInfo {
  string location;
  WallpaperLayout layout;
  WallpaperType type;
  mojo.common.mojom.Time date;
};

// User info needed to set wallpapers.
struct WallpaperUserInfo {
  // The user's account id.
  signin.mojom.AccountId account_id;

  // Matches user_manager::UserType.
  UserType type;

  // True if the user's non-cryptohome data (wallpaper, avatar etc.) is
  // ephemeral. See |UserManager::IsCurrentUserNonCryptohomeDataEphemeral| for
  // more details.
  bool is_ephemeral;

  // True if the user has gaia account.
  bool has_gaia_account;
};

// Used by Chrome to set the wallpaper displayed by ash.
interface WallpaperController {
  // Sets the client interface.
  SetClient(WallpaperControllerClient client);

  // Sets wallpaper from policy or from a local file. Saves the custom wallpaper
  // to file, posts task to generate thumbnail and updates local state. If
  // |show_wallpaper| is false, don't show the new wallpaper now but only update
  // cache.
  SetCustomWallpaper(WallpaperUserInfo user_info,
                     string wallpaper_files_id,
                     string file,
                     WallpaperLayout layout,
                     WallpaperType type,
                     skia.mojom.Bitmap? image,
                     bool show_wallpaper);

  // Sets wallpaper from the wallpaper picker selection. If |show_wallpaper|
  // is false, don't show the new wallpaper now but only update cache.
  SetOnlineWallpaper(WallpaperUserInfo user_info,
                     skia.mojom.Bitmap? image,
                     string url,
                     WallpaperLayout layout,
                     bool show_wallpaper);

  // Sets |account_id|'s wallpaper to be the default wallpaper. Note: different
  // user types may have different default wallpapers. If |show_wallpaper| is
  // false, don't show the default wallpaper now.
  SetDefaultWallpaper(WallpaperUserInfo user_info, bool show_wallpaper);

  // Called from CustomizationDocument. |resized_directory| is the directory
  // where resized versions are stored and it must be writable.
  SetCustomizedDefaultWallpaper(url.mojom.Url wallpaper_url,
                                mojo.common.mojom.FilePath downloaded_file,
                                mojo.common.mojom.FilePath resized_directory);

  // Shows |account_id|'s wallpaper, which is determined in the following order:
  // 1) Use device policy wallpaper if it exists AND we are at the login screen.
  // 2) Use user policy wallpaper if it exists.
  // 3) Use the wallpaper set by the user (either by |SetOnlineWallpaper| or
  //    |SetCustomWallpaper|), if any.
  // 4) Use the default wallpaper of this user.
  ShowUserWallpaper(WallpaperUserInfo user_info);

  // Used by the gaia-signin UI. Signin wallpaper is considered either as the
  // device policy wallpaper or the default wallpaper.
  ShowSigninWallpaper();

  // Removes all of |account_id|'s saved wallpapers and related info.
  RemoveUserWallpaper(WallpaperUserInfo user_info);

  // TODO(crbug.com/776464): This is only used by WallpaperManager. Remove this
  // after WallpaperManager is removed.
  //
  // Set the wallpaper bitmap and info used for the ash desktop background.
  // A null or empty |wallpaper| bitmap is treated as a no-op.
  // TODO(crbug.com/655875): Optimize ash wallpaper transport; avoid sending
  // large bitmaps over Mojo; use shared memory like BitmapUploader, etc.
  SetWallpaper(skia.mojom.Bitmap? wallpaper, WallpaperInfo info);

  // Calling this method triggers an initial notification of the wallpaper
  // state. Observers are automatically removed as their connections are closed.
  AddObserver(associated WallpaperObserver observer);

  // Runs to get wallpaper prominent colors.
  GetWallpaperColors() => (array<uint32> prominent_colors);
};

// Used by ash to control a Chrome client.
interface WallpaperControllerClient {
  // Opens the wallpaper picker window.
  OpenWallpaperPicker();
};

// Used to listen for wallpaper state changed.
interface WallpaperObserver {
  // Called when the colors extracted from the current wallpaper change. May
  // be called as a side effect of changing the wallpaper on the
  // WallpaperController, e.g. WallpaperController::SetWallpaperImage().
  // Colors are ordered and are referenced in wallpaper::ColorProfileType.
  OnWallpaperColorsChanged(array<uint32> prominent_colors);
};
