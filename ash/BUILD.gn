# Copyright 2014 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/config/features.gni")
import("//build/config/ui.gni")
import("//testing/test.gni")
import("//ui/base/ui_features.gni")

assert(use_aura)
assert(enable_hidpi)

gypi_values = exec_script("//build/gypi_to_gn.py",
                          [ rebase_path("ash.gyp") ],
                          "scope",
                          [ "ash.gyp" ])

component("ash") {
  sources = gypi_values.ash_sources

  configs += [ "//build/config:precompiled_headers" ]
  defines = [ "ASH_IMPLEMENTATION" ]

  public_deps = [
    "//ash/common/strings",
    "//ash/resources",
    "//ash/resources/vector_icons",
  ]
  deps = [
    "//ash/autoclick/common:autoclick",
    "//ash/touch_hud",
    "//base",
    "//base:i18n",
    "//base/third_party/dynamic_annotations",
    "//cc",
    "//components/device_event_log",
    "//components/onc",
    "//components/signin/core/account_id",
    "//components/user_manager",
    "//components/wallpaper",
    "//media",
    "//net",
    "//skia",
    "//third_party/icu",
    "//ui/accessibility",
    "//ui/app_list/presenter",
    "//ui/aura",
    "//ui/base",
    "//ui/base:ui_data_pack",
    "//ui/base/ime",
    "//ui/compositor",
    "//ui/display",
    "//ui/display/types",
    "//ui/events",
    "//ui/events:events_base",
    "//ui/events:gesture_detection",
    "//ui/events/devices",
    "//ui/gfx",
    "//ui/gfx/geometry",
    "//ui/keyboard",
    "//ui/message_center",
    "//ui/native_theme",
    "//ui/platform_window",
    "//ui/platform_window/stub",
    "//ui/resources",
    "//ui/strings",
    "//ui/views",
    "//ui/wm",
    "//url",
  ]

  if (is_win) {
    sources -= [
      "sticky_keys/sticky_keys_controller.cc",
      "sticky_keys/sticky_keys_controller.h",
    ]

    # TODO(jschuh): crbug.com/167187 fix size_t to int truncations.
    configs += [ "//build/config/compiler:no_size_t_to_int_warning" ]
  }

  if (use_x11) {
    configs += [
      "//build/config/linux:x11",
      "//build/config/linux:xfixes",
    ]
    deps += [
      "//ui/events/devices/x11",
      "//ui/events/platform",
      "//ui/gfx/x",
    ]
  } else {
    sources -= [
      "host/ash_window_tree_host_x11.cc",
      "host/ash_window_tree_host_x11.h",
      "wm/maximize_mode/scoped_disable_internal_mouse_and_keyboard_x11.cc",
      "wm/maximize_mode/scoped_disable_internal_mouse_and_keyboard_x11.h",
    ]
  }

  if (use_ozone) {
    deps += [
      "//ui/events:dom_keycode_converter",
      "//ui/events/ozone:events_ozone",
      "//ui/ozone",
    ]
  }

  if (is_chromeos) {
    deps += [
      "//chromeos",
      "//chromeos:power_manager_proto",
      "//components/quirks",
      "//device/bluetooth",

      # TODO(msw): Remove this; only ash_with_content should depend on webkit.
      "//third_party/WebKit/public:blink_headers",
      "//third_party/qcms",
      "//ui/chromeos",
      "//ui/chromeos/resources",
      "//ui/chromeos/strings",
      "//ui/display/util",
    ]

    data = [
      "display/test_data/",
    ]
  } else {
    sources -= [
      "accelerators/key_hold_detector.cc",
      "accelerators/key_hold_detector.h",
      "accelerators/magnifier_key_scroller.cc",
      "accelerators/magnifier_key_scroller.h",
      "accelerators/spoken_feedback_toggler.cc",
      "accelerators/spoken_feedback_toggler.h",
      "display/resolution_notification_controller.cc",
      "display/resolution_notification_controller.h",
      "touch/touch_transformer_controller.cc",
      "touch/touch_transformer_controller.h",
      "touch/touchscreen_util.cc",
      "touch/touchscreen_util.h",
      "virtual_keyboard_controller.cc",
      "virtual_keyboard_controller.h",
      "wm/stylus_metrics_recorder.cc",
      "wm/stylus_metrics_recorder.h",
    ]
  }

  if (!use_ozone) {
    sources -= [
      "wm/maximize_mode/scoped_disable_internal_mouse_and_keyboard_ozone.cc",
      "wm/maximize_mode/scoped_disable_internal_mouse_and_keyboard_ozone.h",
    ]
  }
}

component("ash_with_content") {
  sources = gypi_values.ash_with_content_sources

  defines = [ "ASH_WITH_CONTENT_IMPLEMENTATION" ]

  public_deps = [
    ":ash",
  ]
  deps = [
    "//base",
    "//base/third_party/dynamic_annotations",
    "//content/public/browser",
    "//gpu/config",
    "//ipc",
    "//skia",
    "//ui/aura",
    "//ui/base",
    "//ui/compositor",
    "//ui/events",
    "//ui/gfx",
    "//ui/gfx/geometry",
    "//ui/keyboard:keyboard_with_content",
    "//ui/resources",
    "//ui/strings",
    "//ui/views",
    "//ui/views/controls/webview",
    "//ui/web_dialogs",
    "//url",
  ]
}

# Internal target consumed by |test_support_with_content| and
# |test_support_without_content|. This target contains all the test support
# files, with the exception of an implementation of AshTestEnvironment.
# Consumers of ash should use one of |test_support_with_content| or
# |test_support_without_content|.
static_library("test_support_common") {
  testonly = true
  visibility = [ ":*" ]
  sources = gypi_values.ash_test_support_sources
  configs += [ "//build/config:precompiled_headers" ]

  public_deps = [
    ":ash",
  ]
  deps = [
    "//ash/resources",
    "//base:i18n",
    "//base/test:test_support",
    "//components/signin/core/account_id",
    "//components/user_manager:user_manager",
    "//device/bluetooth",
    "//skia",
    "//testing/gtest",
    "//ui/accessibility",
    "//ui/app_list:test_support",
    "//ui/app_list/presenter",
    "//ui/aura",
    "//ui/aura:test_support",
    "//ui/base:test_support",
    "//ui/compositor:test_support",
    "//ui/display/types",
    "//ui/events:events_base",
    "//ui/events:test_support",
    "//ui/events/devices",
    "//ui/gl",
    "//ui/gl:test_support",
    "//ui/keyboard",
    "//ui/message_center",
    "//ui/views",
    "//ui/views:test_support",
    "//ui/wm",
  ]

  if (is_win) {
    deps += [ "//ui/platform_window/win" ]
  }

  if (use_x11) {
    deps += [ "//ui/gfx/x" ]
  }

  if (is_chromeos) {
    deps += [
      "//chromeos",
      "//ui/display",
    ]
  }
}

static_library("test_support_without_content") {
  testonly = true
  sources = [
    "test/ash_test_environment_default.cc",
  ]

  public_deps = [
    ":test_support_common",
  ]

  deps = [
    "//base",
    "//base/test:test_support",
    "//skia",
  ]
}

static_library("test_support_with_content") {
  testonly = true
  sources = gypi_values.ash_test_support_with_content_sources
  sources += [
    "test/ash_test_environment_content.cc",
    "test/ash_test_environment_content.h",
  ]
  configs += [ "//build/config:precompiled_headers" ]

  public_deps = [
    ":ash_with_content",
    ":test_support_common",
    "//content/public/browser",
    "//content/test:test_support",
    "//skia",
  ]
}

static_library("interactive_ui_test_support") {
  testonly = true
  configs += [ "//build/config:precompiled_headers" ]
  public_deps = [
    ":ash",
    ":test_support_without_content",
  ]
  sources = [
    "test/ash_interactive_ui_test_base.cc",
    "test/ash_interactive_ui_test_base.h",
  ]
  deps = [
    ":ash",
    ":test_support_with_content",
    "//base",
    "//skia",
    "//testing/gtest",
    "//ui/aura",
    "//ui/base",
    "//ui/gl:test_support",
  ]
}

static_library("ash_shell_lib") {
  testonly = true
  sources = gypi_values.ash_shell_lib_sources

  deps = [
    ":ash",
    ":ash_with_content",
    ":test_support_without_content",
    "//ash/common/strings",
    "//ash/resources",
    "//base",
    "//base:i18n",
    "//components/user_manager",
    "//net",
    "//skia",
    "//third_party/icu",
    "//ui/app_list/presenter",
    "//ui/aura",
    "//ui/base",
    "//ui/base/ime",
    "//ui/compositor",
    "//ui/events",
    "//ui/events:events_base",
    "//ui/gfx",
    "//ui/gfx/geometry",
    "//ui/keyboard",
    "//ui/keyboard:keyboard_with_content",
    "//ui/message_center",
    "//ui/resources",
    "//ui/views",
    "//ui/views:test_support",
    "//ui/views/examples:views_examples_lib",
    "//ui/views/examples:views_examples_with_content_lib",
    "//ui/wm",
  ]
}

static_library("ash_shell_lib_with_content") {
  testonly = true
  sources = gypi_values.ash_shell_with_content_lib_sources

  deps = [
    ":ash_shell_lib",
    ":ash_with_content",
    "//base:i18n",
    "//chrome:packed_resources",
    "//content",
    "//content/shell:content_shell_lib",
    "//device/bluetooth",
    "//net",
    "//skia",
    "//ui/aura",
    "//ui/base",
    "//ui/compositor",
    "//ui/display",
    "//ui/events/devices",
    "//ui/message_center",
    "//ui/views:test_support",
    "//ui/wm",
  ]

  if (is_chromeos) {
    deps += [ "//chromeos" ]
  }
}

# This target is intended for tests that use content. In general very few tests
# need or use content and should be placed in |ash_unittests| instead.
test("ash_content_unittests") {
  sources = [
    "content/display/screen_orientation_controller_chromeos_unittest.cc",
    "content/keyboard_overlay/keyboard_overlay_delegate_unittest.cc",
    "content/keyboard_overlay/keyboard_overlay_view_unittest.cc",
    "test/ash_unittests.cc",
  ]
  configs += [
    "//build/config:precompiled_headers",
    "//build/config/compiler:no_size_t_to_int_warning",
  ]

  deps = [
    ":ash",
    ":ash_with_content",
    ":test_support_with_content",
    "//base",
    "//base/test:test_support",
    "//components/signin/core/account_id",
    "//components/user_manager",
    "//content/public/browser",
    "//content/test:test_support",
    "//mojo/edk/system",
    "//skia",
    "//testing/gtest",
    "//ui/aura",
    "//ui/aura:test_support",
    "//ui/message_center",
    "//ui/message_center:test_support",
    "//ui/views",
    "//ui/views:test_support",
    "//ui/views/controls/webview:test_support",
    "//ui/web_dialogs:test_support",
  ]

  data_deps = [
    "//ash/common/strings:ash_test_strings",
    "//ash/resources:ash_test_resources_100_percent",
    "//ash/resources:ash_test_resources_200_percent",
  ]

  if (is_chromeos) {
    deps += [
      "//chromeos",
      "//chromeos:power_manager_proto",
      "//chromeos:test_support_without_gmock",
      "//components/quirks",
      "//device/bluetooth",
      "//net:net",
      "//ui/chromeos",
      "//ui/display",
      "//ui/display:test_support",
      "//ui/display:test_util",
    ]
  }
}

test("ash_unittests") {
  sources = gypi_values.ash_unittests_sources
  sources += [ "test/ash_test_environment_default.cc" ]
  configs += [
    "//build/config:precompiled_headers",
    "//build/config/compiler:no_size_t_to_int_warning",
  ]

  deps = [
    ":ash",
    ":test_support_without_content",
    "//ash/autoclick/common:autoclick",
    "//ash/common/strings",
    "//ash/resources",
    "//ash/touch_hud",
    "//base",
    "//base/test:test_support",
    "//components/signin/core/account_id",
    "//components/user_manager",
    "//mojo/edk/system",
    "//skia",
    "//testing/gmock",
    "//testing/gtest",
    "//third_party/icu",
    "//ui/accessibility",
    "//ui/app_list/presenter",
    "//ui/aura",
    "//ui/aura:test_support",
    "//ui/base",
    "//ui/base:test_support",
    "//ui/base/ime",
    "//ui/compositor",
    "//ui/compositor:test_support",
    "//ui/display/types",
    "//ui/events",
    "//ui/events:gesture_detection",
    "//ui/events:test_support",
    "//ui/events/devices",
    "//ui/gfx",
    "//ui/gfx/geometry",
    "//ui/keyboard",
    "//ui/message_center",
    "//ui/message_center:test_support",
    "//ui/resources",
    "//ui/strings",
    "//ui/views",
    "//ui/views:test_support",
    "//ui/wm",
    "//ui/wm:test_support",
    "//url",
  ]

  data_deps = [
    "//ash/common/strings:ash_test_strings",
    "//ash/resources:ash_test_resources_100_percent",
    "//ash/resources:ash_test_resources_200_percent",
  ]

  if (!use_x11) {
    sources -= [ "host/ash_window_tree_host_x11_unittest.cc" ]
  }

  if (is_chromeos) {
    sources += [ "first_run/first_run_helper_unittest.cc" ]
    deps += [
      "//chromeos",
      "//chromeos:power_manager_proto",
      "//chromeos:test_support_without_gmock",
      "//components/quirks",
      "//device/bluetooth",
      "//net:net",
      "//ui/chromeos",
      "//ui/display",
      "//ui/display:test_support",
      "//ui/display:test_util",
    ]
  } else {
    sources -= [
      "accelerators/magnifier_key_scroller_unittest.cc",
      "accelerators/spoken_feedback_toggler_unittest.cc",

      # Can't resize on Windows Ash. http://crbug.com/165962
      "autoclick/autoclick_unittest.cc",
      "display/resolution_notification_controller_unittest.cc",

      # TODO(zork): fix this test to build on Windows. See: crosbug.com/26906
      "focus_cycler_unittest.cc",
      "magnifier/magnification_controller_unittest.cc",
      "magnifier/partial_magnification_controller_unittest.cc",
      "sticky_keys/sticky_keys_overlay_unittest.cc",
      "sticky_keys/sticky_keys_unittest.cc",
      "touch/touchscreen_util_unittest.cc",
      "virtual_keyboard_controller_unittest.cc",

      # All tests for multiple displays: not supported on Windows Ash.
      "wm/drag_window_resizer_unittest.cc",

      # Talks to ChromeOS system services.
      "wm/lock_state_controller_unittest.cc",

      # Maximize mode is only available on Chrome OS.
      "wm/maximize_mode/maximize_mode_controller_unittest.cc",
      "wm/maximize_mode/maximize_mode_window_manager_unittest.cc",
      "wm/workspace/workspace_window_resizer_unittest.cc",
    ]
  }

  if (!use_x11 || !is_chromeos) {
    sources -= [ "touch/touch_transformer_controller_unittest.cc" ]
  }
}

executable("ash_shell_with_content") {
  testonly = true
  sources = [
    "shell/content/shell_with_content_main.cc",
  ]

  deps = [
    ":ash_shell_lib_with_content",
    "//base",
    "//build/config/sanitizers:deps",
    "//build/win:default_exe_manifest",
    "//components/user_manager",
    "//content",
    "//content/public/app:both",
  ]

  data_deps = [
    "//ash/common/strings:ash_test_strings",
    "//ash/resources:ash_test_resources_100_percent",
    "//ash/resources:ash_test_resources_200_percent",
  ]

  if (is_win) {
    configs -= [ "//build/config/win:console" ]
    configs += [ "//build/config/win:windowed" ]
    deps += [ "//sandbox" ]
  }

  if (is_chromeos) {
    deps += [ "//device/bluetooth" ]
  }
}
# When adding support for isolates, please have a look at run-time dependencies
# in the ash_unittests_run target in ash.gyp.
