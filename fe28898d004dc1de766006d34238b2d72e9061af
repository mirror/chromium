{
  "comments": [
    {
      "key": {
        "uuid": "e7ac7002_4eab7f9c",
        "filename": "third_party/WebKit/LayoutTests/TestExpectations",
        "patchSetId": 2
      },
      "lineNbr": 576,
      "author": {
        "id": 1111894
      },
      "writtenOn": "2017-06-01T11:47:31Z",
      "side": 1,
      "message": "What\u0027s the difference between \"Crash Failure\" and \"Failure Crash\"?",
      "revId": "fe28898d004dc1de766006d34238b2d72e9061af",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "88dac94c_fe122512",
        "filename": "third_party/WebKit/LayoutTests/TestExpectations",
        "patchSetId": 2
      },
      "lineNbr": 576,
      "author": {
        "id": 1161294
      },
      "writtenOn": "2017-06-01T17:24:21Z",
      "side": 1,
      "message": "I\u0027ve commented on this in one of the messages:\n\u003e\u003e\u003e\u003e\u003e\u003e\nSome TestExpectations lines have cosmetic changes:\n[ Failure Crash ] becomes [ Crash Failure ] \nI\u0027ve done this because TestExpectations are generated automatically, and I did not want to hand edit.\n\u003c\u003c\u003c\u003c\u003c\u003c\u003c",
      "parentUuid": "e7ac7002_4eab7f9c",
      "revId": "fe28898d004dc1de766006d34238b2d72e9061af",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "598e0fd4_a66aae29",
        "filename": "third_party/WebKit/LayoutTests/TestExpectations",
        "patchSetId": 2
      },
      "lineNbr": 576,
      "author": {
        "id": 1111894
      },
      "writtenOn": "2017-06-01T20:12:31Z",
      "side": 1,
      "message": "Aha, that text probably belongs in the commit message. Or is it just me living under a rock?",
      "parentUuid": "88dac94c_fe122512",
      "revId": "fe28898d004dc1de766006d34238b2d72e9061af",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dc4afde6_9d6f6bdc",
        "filename": "third_party/WebKit/LayoutTests/TestExpectations",
        "patchSetId": 2
      },
      "lineNbr": 576,
      "author": {
        "id": 1161294
      },
      "writtenOn": "2017-06-01T21:33:28Z",
      "side": 1,
      "message": "It is just me trying to learn proper Gerrit usage.",
      "parentUuid": "598e0fd4_a66aae29",
      "revId": "fe28898d004dc1de766006d34238b2d72e9061af",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "77c6cbed_fef5d478",
        "filename": "third_party/WebKit/LayoutTests/TestExpectations",
        "patchSetId": 2
      },
      "lineNbr": 576,
      "author": {
        "id": 1161294
      },
      "writtenOn": "2017-06-02T02:05:01Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "dc4afde6_9d6f6bdc",
      "revId": "fe28898d004dc1de766006d34238b2d72e9061af",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e94b6c7d_503fdadf",
        "filename": "third_party/WebKit/Source/core/layout/LayoutBlock.cpp",
        "patchSetId": 2
      },
      "lineNbr": 517,
      "author": {
        "id": 1002487
      },
      "writtenOn": "2017-06-01T21:35:32Z",
      "side": 1,
      "message": "If I understand this correctly, this is essentially a helper function for calling ComputeOverflow from NG code. Can you add a comment about this in the header, including when it is supposed to be called?\n\nI assume the reason you need it is that you can\u0027t access overflow_ from outside this class? But why can\u0027t you use fragment-\u003eOverflowSize().Height(), pass that to ComputeOverflow, and get rid of this function? I am not at all convinced that using the previous layout\u0027s size is correct.\n\nI am not super happy with the name. Maybe ComputeOverflowFromNGLayout?\n\nWhy does this not support abspos? Shouldn\u0027t it, since the implementation is the same as legacy layout?",
      "revId": "fe28898d004dc1de766006d34238b2d72e9061af",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "46c27161_2dc24437",
        "filename": "third_party/WebKit/Source/core/layout/LayoutBlock.cpp",
        "patchSetId": 2
      },
      "lineNbr": 517,
      "author": {
        "id": 1161294
      },
      "writtenOn": "2017-06-02T01:50:51Z",
      "side": 1,
      "message": "Renamed to ComputeOverflowFromNGLayout and added comment.\n\n\u003e  But why can\u0027t you use fragment-\u003eOverflowSize().Height()\n\nThe legacy ComputeOverflow uses old_client_after_edge, which is stored in overflow_. I am unsure what old_client_after_edge_ does, but I am sure I can\u0027t compute it correctly. I am being conservative here.\n\n\u003e Why does this not support abspos? \n\nBecause NG computes abspos position independently of Legacy. Abspos descendants are not placed inside Legacy containers. When Legacy tries to compute abspos, it has no access to NG abspos boxes.",
      "parentUuid": "e94b6c7d_503fdadf",
      "revId": "fe28898d004dc1de766006d34238b2d72e9061af",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f9178192_ee89ea38",
        "filename": "third_party/WebKit/Source/core/layout/LayoutBlock.cpp",
        "patchSetId": 2
      },
      "lineNbr": 517,
      "author": {
        "id": 1002487
      },
      "writtenOn": "2017-06-02T20:40:03Z",
      "side": 1,
      "message": "\u003e The legacy ComputeOverflow uses old_client_after_edge, which is stored in overflow_.\n\nWhere does it do that? See here:\nhttps://cs.chromium.org/chromium/src/third_party/WebKit/Source/core/layout/LayoutBlockFlow.cpp?type\u003dcs\u0026q\u003dComputeOverflow+package:%5Echromium$\u0026l\u003d485\n\nThat uses unconstrained_client_after_edge, which is ClientLogicalBottom() before it is adjusted by height/min-height/max-height.\n\n\u003e Abspos descendants are not placed inside Legacy containers. \n\nOh, you mean the positioned descendants set. Makes sense.",
      "parentUuid": "46c27161_2dc24437",
      "revId": "fe28898d004dc1de766006d34238b2d72e9061af",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6072ecf9_11f0edd4",
        "filename": "third_party/WebKit/Source/core/layout/LayoutBlock.cpp",
        "patchSetId": 2
      },
      "lineNbr": 517,
      "author": {
        "id": 1161294
      },
      "writtenOn": "2017-06-02T20:54:27Z",
      "side": 1,
      "message": "\u003e Where does it do that?\n\nFor example: LayoutBlock::SimplifiedLayout https://cs.chromium.org/chromium/src/third_party/WebKit/Source/core/layout/LayoutBlock.cpp?type\u003dcs\u0026l\u003d614\n\nI am not convinced that passing fragment-\u003eOverflowSize().Height() will be correct either. My main problem is that I do not understand what old_client_after_edge argument is doing. It looks like it is there to prevent shrinking of height during certain overflow computations?\n\nI was hoping to get rid of overflow on the fragment in future checkins, becasue that overflow is incorrect wrt tranforms, position:relative, etc. \n\nI am happy to go with fragment-\u003eOverflowSize().Height() for an lgtm for now, and can revisit if tests start failing.",
      "parentUuid": "f9178192_ee89ea38",
      "revId": "fe28898d004dc1de766006d34238b2d72e9061af",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0c27e9dc_0af9091e",
        "filename": "third_party/WebKit/Source/core/layout/LayoutBlock.cpp",
        "patchSetId": 2
      },
      "lineNbr": 517,
      "author": {
        "id": 1002487
      },
      "writtenOn": "2017-06-02T21:21:21Z",
      "side": 1,
      "message": "SimplifiedLayout is a bit of a special case. Since it doesn\u0027t do real layout, it needs to use the old height (interestingly, I think it could probably use intrinsic_content_logical_height_ now). Better look at regular layout.\n\nWhy do you think OverflowSize().Height() (well, the logical version) is wrong? How is it different from the code I linked to?\n\nHere\u0027s the code that uses it:\nhttps://cs.chromium.org/chromium/src/third_party/WebKit/Source/core/layout/LayoutBlock.cpp?l\u003d486\nSo it just makes sure that we include the content size in the overflow. Basically, the padding-box logical height (so I guess our overflow height is not *quite* correct but that can easily be adjusted)\n\nIf you remove the overflow size what will you replace it with? How will you set LayoutBox::intrinsic_content_logical_height_, etc.?",
      "parentUuid": "6072ecf9_11f0edd4",
      "revId": "fe28898d004dc1de766006d34238b2d72e9061af",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "43cd16b6_8840c5bf",
        "filename": "third_party/WebKit/Source/core/layout/LayoutBlock.h",
        "patchSetId": 2
      },
      "lineNbr": 434,
      "author": {
        "id": 1111894
      },
      "writtenOn": "2017-06-01T11:47:31Z",
      "side": 1,
      "message": "Doesn\u0027t need to be virtual.",
      "range": {
        "startLine": 434,
        "startChar": 2,
        "endLine": 434,
        "endChar": 3
      },
      "revId": "fe28898d004dc1de766006d34238b2d72e9061af",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9c5a4847_9b00403f",
        "filename": "third_party/WebKit/Source/core/layout/LayoutBlock.h",
        "patchSetId": 2
      },
      "lineNbr": 434,
      "author": {
        "id": 1161294
      },
      "writtenOn": "2017-06-01T17:24:21Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "43cd16b6_8840c5bf",
      "range": {
        "startLine": 434,
        "startChar": 2,
        "endLine": 434,
        "endChar": 3
      },
      "revId": "fe28898d004dc1de766006d34238b2d72e9061af",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8f3319b9_460211d6",
        "filename": "third_party/WebKit/Source/core/layout/ng/ng_block_node.cc",
        "patchSetId": 2
      },
      "lineNbr": 305,
      "author": {
        "id": 1111894
      },
      "writtenOn": "2017-06-01T11:47:31Z",
      "side": 1,
      "message": "Same check as two lines up. Could you merge this?",
      "revId": "fe28898d004dc1de766006d34238b2d72e9061af",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "64593011_3b3aeefc",
        "filename": "third_party/WebKit/Source/core/layout/ng/ng_block_node.cc",
        "patchSetId": 2
      },
      "lineNbr": 305,
      "author": {
        "id": 1161294
      },
      "writtenOn": "2017-06-01T17:24:21Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8f3319b9_460211d6",
      "revId": "fe28898d004dc1de766006d34238b2d72e9061af",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}