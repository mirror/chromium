{
  "comments": [
    {
      "key": {
        "uuid": "f03278fd_c2b829fa",
        "filename": "components/sync/model_impl/processor_entity_tracker.cc",
        "patchSetId": 2
      },
      "lineNbr": 190,
      "author": {
        "id": 1153420
      },
      "writtenOn": "2017-11-03T18:46:26Z",
      "side": 1,
      "message": "might",
      "range": {
        "startLine": 190,
        "startChar": 27,
        "endLine": 190,
        "endChar": 32
      },
      "revId": "2e8cb853d2b7b8510774f396a169163f644ef50e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "549469d3_2ea5b898",
        "filename": "components/sync/model_impl/processor_entity_tracker.cc",
        "patchSetId": 2
      },
      "lineNbr": 190,
      "author": {
        "id": 1115991
      },
      "writtenOn": "2017-11-07T18:58:10Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f03278fd_c2b829fa",
      "range": {
        "startLine": 190,
        "startChar": 27,
        "endLine": 190,
        "endChar": 32
      },
      "revId": "2e8cb853d2b7b8510774f396a169163f644ef50e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c24a08a6_f27ae6c8",
        "filename": "components/sync/model_impl/processor_entity_tracker.cc",
        "patchSetId": 2
      },
      "lineNbr": 192,
      "author": {
        "id": 1153420
      },
      "writtenOn": "2017-11-03T18:46:26Z",
      "side": 1,
      "message": "This isn\u0027t actually correct though... Isn\u0027t commit_requested_sequence_number_ transient? We could make an item, commit it, crash during that commit request, restart, the user deletes the item. The deletion is going to no-op here because these values are going to be equal, but the server knows about it. We\u0027d ignore the invalidation because it was a reflection, and we would go on our merry way until the next GU. That could be another 8 hours, when sudden this piece of data re-appears.\n\nI guess this is all predicated on a Chrome crash, which should almost never happen. But shutdown should be able to trigger this just as easily. The model type could get disconnected from the syncer during mid commit, right. And then we\u0027d never persist that the commit completed.",
      "revId": "2e8cb853d2b7b8510774f396a169163f644ef50e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "66a54ca8_9798c093",
        "filename": "components/sync/model_impl/processor_entity_tracker.cc",
        "patchSetId": 2
      },
      "lineNbr": 192,
      "author": {
        "id": 1115991
      },
      "writtenOn": "2017-11-07T18:58:10Z",
      "side": 1,
      "message": "You are correct, this is an issue. \n\nI\u0027m against persisting commit_request_sequence_number_. I think the right behavior is to always commit tombstone to server. I experimented with Chrome and found out that directory based implementation has the same problem, it discards tombstone for item that doesn\u0027t have server id. Because I don\u0027t know how server will react to committing tombstone I\u0027ve decided to write a big TODO with explanation and investigate server behavior separately.\n\nPS: I found unused function while experimenting with it.",
      "parentUuid": "c24a08a6_f27ae6c8",
      "revId": "2e8cb853d2b7b8510774f396a169163f644ef50e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "24717f1b_c48299d9",
        "filename": "components/sync/model_impl/processor_entity_tracker.cc",
        "patchSetId": 2
      },
      "lineNbr": 192,
      "author": {
        "id": 1153420
      },
      "writtenOn": "2017-11-08T18:50:59Z",
      "side": 1,
      "message": "Hmm, that\u0027s fair, I guess I don\u0027t know if you can commit a tombstone without a server id. My guess is that this is rare enough that the bandwidth usage would be so small, we might as well just commit it to be safe. \n\nIf we got into this situation, we could try to trigger a GU and see if it made it to the server, but that read is potentially inconsistent and the client side architecture doesn\u0027t not at all lend itself to allow us to ask for a GU right here.\n\nIt seems like, theoretically, you also have a third option. Keep the tombstone locally, but don\u0027t commit it. And clean it up later, after at least a poll duration or a GU or something. Maybe record the current progress marker in the metadata, and if that changes, then we know we don\u0027t need it. But this would be a whole lot more logic, for a rare edge case.\n\nGiven that the directory already had this problem, I\u0027m okay with the TODO. Though I suppose this could be part of the reason we saw bookmarks duplication, we don\u0027t really know how impactful it is being.",
      "parentUuid": "66a54ca8_9798c093",
      "revId": "2e8cb853d2b7b8510774f396a169163f644ef50e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b4828fad_1696f192",
        "filename": "components/sync/model_impl/shared_model_type_processor.cc",
        "patchSetId": 2
      },
      "lineNbr": 288,
      "author": {
        "id": 1153420
      },
      "writtenOn": "2017-11-03T18:46:26Z",
      "side": 1,
      "message": "While you\u0027re in here, I\u0027d remove this newline :)",
      "revId": "2e8cb853d2b7b8510774f396a169163f644ef50e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e4afde88_6873217d",
        "filename": "components/sync/model_impl/shared_model_type_processor.cc",
        "patchSetId": 2
      },
      "lineNbr": 288,
      "author": {
        "id": 1115991
      },
      "writtenOn": "2017-11-07T18:58:10Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b4828fad_1696f192",
      "revId": "2e8cb853d2b7b8510774f396a169163f644ef50e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "550137cf_2907a428",
        "filename": "components/sync/model_impl/shared_model_type_processor.cc",
        "patchSetId": 2
      },
      "lineNbr": 290,
      "author": {
        "id": 1153420
      },
      "writtenOn": "2017-11-03T18:46:26Z",
      "side": 1,
      "message": "This one seems pretty useless as well!",
      "revId": "2e8cb853d2b7b8510774f396a169163f644ef50e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "559cab33_4fc7e4fc",
        "filename": "components/sync/model_impl/shared_model_type_processor.cc",
        "patchSetId": 2
      },
      "lineNbr": 290,
      "author": {
        "id": 1115991
      },
      "writtenOn": "2017-11-07T18:58:10Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "550137cf_2907a428",
      "revId": "2e8cb853d2b7b8510774f396a169163f644ef50e",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}