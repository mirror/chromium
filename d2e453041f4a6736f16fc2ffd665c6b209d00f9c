{
  "comments": [
    {
      "key": {
        "uuid": "078eae32_101c88b0",
        "filename": "cc/trees/layer_tree_impl.cc",
        "patchSetId": 3
      },
      "lineNbr": 1218,
      "author": {
        "id": 1115878
      },
      "writtenOn": "2017-08-22T23:34:55Z",
      "side": 1,
      "message": "Discussed some with Enne and Khushal...\n\nThe maps here are used only in the method LayerTreeImpl::UpdatePropertyTreeAnimationFromMainThread.\n\nThey are used to apply current element animation\nstate on top of the *pending* property tree copied from\nthe main thread, and is called by\nLayerTreeHost::FinishCommitOnImplThread.\n\nHowever, the *active* property tree nodes will always have the\nsame transform, opacity or filter value as their corresponding\n*pending* tree nodes, because an activation has always occurred\nbefore this commit. (*)\n\nTherefore, I think the element_id_to_transform_animations_ etc\nmaps cam be removed, and UpdatePropertyTreeAnimationFromMainThread\ncan be moved to LayerTreeHostImpl and written like this:\n\nfor (pending_it in pending_property_tree().element_id_to_transform_node_index)\n  if (pending_it.second-\u003eis_currently_animating) {\n    if (active_node \u003d active_property_tree().element_id_to_transform_node_index[pending_it.first]) {\n      pending_it-\u003esecond.transform \u003d active_node.transform;\n    }\n  }\n}\n\netc.\n\nI did something similar in this CL: https://codereview.chromium.org/2877033002.\nSee method LayerTreeHostImpl::PushScrollbarOpacitiesFromActiveToPending.\n\n(*) Credit to Khushal and Enne for long discussion about whether this statement\nis correct.",
      "revId": "d2e453041f4a6736f16fc2ffd665c6b209d00f9c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f8ce5a92_eb468b21",
        "filename": "cc/trees/layer_tree_impl.cc",
        "patchSetId": 3
      },
      "lineNbr": 1218,
      "author": {
        "id": 1128438
      },
      "writtenOn": "2017-08-24T20:00:46Z",
      "side": 1,
      "message": "I pursued the proposal with tenacity and verisimilitude (spoken mellifluously). khushalsagar@ and I looked at this in person. There are two issues that came up in failing unit tests:\n\n1. In single thread mode, ToT logic map use essentially keeps a cache of the values to apply. Without those maps, and with only a single LayerTreeImpl as we commit directly to the active tree in for example the ui compositor, we lose the new animated value that we need to apply.\n\n2. Currently the value to override is updated only when the animation system informs us that it had mutated that value. But if we use the new logic, if the main thread implies the animation is currently animating, we will always override.\n\nWe could explore the other option discussed w/ enne@ of removing maps and asking AnimationHost to re-apply animation values to the property tree nodes after they\u0027ve been clobbered, but from review, it actually looks like the way we\u0027re using maps fits with the design of the animation system, since AnimationPlayer::TickAnimation and the various NotifyXxx calls are what drive the population of the maps and otherwise the animation\u0027s precise current value is not clearly stored and would perhaps need to be recomputed.\n\nCould explore in subsequent patch if we think priority warrants?",
      "parentUuid": "078eae32_101c88b0",
      "revId": "d2e453041f4a6736f16fc2ffd665c6b209d00f9c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "362fc26c_88532a5c",
        "filename": "cc/trees/layer_tree_impl.cc",
        "patchSetId": 3
      },
      "lineNbr": 1218,
      "author": {
        "id": 1115878
      },
      "writtenOn": "2017-08-24T21:05:23Z",
      "side": 1,
      "message": "I see. Makes sense.\n\nHowever, on further thought, since element ids are not recycled,\nI think we can still delete the code here. Right?",
      "parentUuid": "f8ce5a92_eb468b21",
      "revId": "d2e453041f4a6736f16fc2ffd665c6b209d00f9c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "89d51873_12f5331d",
        "filename": "cc/trees/layer_tree_impl.cc",
        "patchSetId": 3
      },
      "lineNbr": 1218,
      "author": {
        "id": 1115878
      },
      "writtenOn": "2017-08-24T21:05:23Z",
      "side": 1,
      "message": "Also, we don\u0027t have to worry about the situation in which a layer is deleted and a new\none is created with the same element id, because element ids should be unique to the renderer\nprocess. (We should comment to that effect, as I think it\u0027s a useful invariant for these\nkind of reasons.)",
      "parentUuid": "078eae32_101c88b0",
      "revId": "d2e453041f4a6736f16fc2ffd665c6b209d00f9c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3a1e657e_c9736a3c",
        "filename": "cc/trees/layer_tree_impl.cc",
        "patchSetId": 3
      },
      "lineNbr": 1218,
      "author": {
        "id": 1128438
      },
      "writtenOn": "2017-08-24T21:26:36Z",
      "side": 1,
      "message": "On \"I think we can still delete the code here. Right?\":\n\n1. Blink animation/transition layout tests still pass.\n\n2. compositor unit tests, which include some layer animator tests, still pass.\n\n3. cc unit tests that fail:\n\n    LayerTreeHostAnimationTestAnimationFinishesDuringCommit.RunMultiThread_DelegatingRenderer (../../cc/trees/layer_tree_host_unittest_animation.cc:1653)\n    LayerTreeHostAnimationTestChangeAnimationPlayer.RunMultiThread_DelegatingRenderer (../../cc/trees/layer_tree_host_unittest_animation.cc:1845)\n    LayerTreeHostAnimationTestChangeAnimationPlayer.RunSingleThread_DelegatingRenderer (../../cc/trees/layer_tree_host_unittest_animation.cc:1845)\n    LayerTreeHostAnimationTestImplSideInvalidation.RunMultiThread_DelegatingRenderer (../../cc/trees/layer_tree_host_unittest_animation.cc:1731)\n    LayerTreeHostTestEffectTreeSync.RunMultiThread_DelegatingRenderer (../../cc/trees/layer_tree_host_unittest.cc:1508)\n    LayerTreeHostTestEffectTreeSync.RunSingleThread_DelegatingRenderer (../../cc/trees/layer_tree_host_unittest.cc:1508)\n    LayerTreeHostTestTransformTreeSync.RunMultiThread_DelegatingRenderer (../../cc/trees/layer_tree_host_unittest.cc:1586)\n    LayerTreeHostTestTransformTreeSync.RunSingleThread_DelegatingRenderer (../../cc/trees/layer_tree_host_unittest.cc:1586)\n\n  LayerTreeHostTestEffectTreeSync and LayerTreeHostTestTransformTreeSync seem like\n  tests that are just explicitly testing the logic we\u0027re proposing to remove,\n  but some of the others are less clear and would require deeper investigation\n  and perhaps rewrite if they\u0027re depending on this sync behavior we\u0027d be removing.\n  Worth pursuing now?",
      "parentUuid": "89d51873_12f5331d",
      "revId": "d2e453041f4a6736f16fc2ffd665c6b209d00f9c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "105ad704_8fe054a0",
        "filename": "cc/trees/layer_tree_impl.cc",
        "patchSetId": 3
      },
      "lineNbr": 1218,
      "author": {
        "id": 1128438
      },
      "writtenOn": "2017-08-24T21:54:29Z",
      "side": 1,
      "message": "For each test noted, comments:\n\n1.\n   LayerTreeHostAnimationTestAnimationFinishesDuringCommit.RunMultiThread_DelegatingRenderer (../../cc/trees/layer_tree_host_unittest_animation.cc:1653)\n\n  Same as (3) below.\n\n2.\n   LayerTreeHostAnimationTestChangeAnimationPlayer.RunMultiThread_DelegatingRenderer (../../cc/trees/layer_tree_host_unittest_animation.cc:1845)\n    LayerTreeHostAnimationTestChangeAnimationPlayer.RunSingleThread_DelegatingRenderer (../../cc/trees/layer_tree_host_unittest_animation.cc:1845)\n\nThis one has a comment explaining its goals as:\n\n// Check that transform sync happens correctly at commit when we remove and add\n// a different animation player to an element.\n\nI\u0027m not sure whether we care about this. Do we ever actually do this? If no tests\nare failing other than this one, maybe we can just delete the test as obsolete and\ncovering a use case we don\u0027t need to support.\n\n3.\n    LayerTreeHostAnimationTestImplSideInvalidation.RunMultiThread_DelegatingRenderer (../../cc/trees/layer_tree_host_unittest_animation.cc:1731)\n\nAppears to be checking transform being copied to impl side as an extra checkpoint. Unless you think there\u0027s value to that, perhaps we can just remove that expect.\n\nThe other involved comments (can see inline in the test, added revision to patch) are:\n\n      // Block until the animation finishes on the compositor thread. Since\n      // animations have already been ticked on the main thread, when the commit\n      // happens the state on the main thread will be consistent with having a\n      // running animation but the state on the compositor thread will be\n      // consistent with having only a finished animation.\n\n      // The animation on the active tree has finished, now request an impl-side\n      // invalidation and make sure it finishes before the main thread is\n      // released.\n\n4.\n    LayerTreeHostTestEffectTreeSync.RunMultiThread_DelegatingRenderer (../../cc/trees/layer_tree_host_unittest.cc:1508)\n    LayerTreeHostTestEffectTreeSync.RunSingleThread_DelegatingRenderer (../../cc/trees/layer_tree_host_unittest.cc:1508)\n    LayerTreeHostTestTransformTreeSync.RunMultiThread_DelegatingRenderer (../../cc/trees/layer_tree_host_unittest.cc:1586)\n    LayerTreeHostTestTransformTreeSync.RunSingleThread_DelegatingRenderer (../../cc/trees/layer_tree_host_unittest.cc:1586)\n\nDeleted these four as obsolete.",
      "parentUuid": "3a1e657e_c9736a3c",
      "revId": "d2e453041f4a6736f16fc2ffd665c6b209d00f9c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "53eee80b_e37c2ec1",
        "filename": "cc/trees/layer_tree_impl.cc",
        "patchSetId": 3
      },
      "lineNbr": 1218,
      "author": {
        "id": 1115878
      },
      "writtenOn": "2017-08-24T22:09:04Z",
      "side": 1,
      "message": "\u003e For each test noted, comments:\n\u003e \n\u003e 1.\n\u003e    LayerTreeHostAnimationTestAnimationFinishesDuringCommit.RunMultiThread_DelegatingRenderer (../../cc/trees/layer_tree_host_unittest_animation.cc:1653)\n\u003e \n\u003e   Same as (3) below.\n\u003e \n\u003e 2.\n\u003e    LayerTreeHostAnimationTestChangeAnimationPlayer.RunMultiThread_DelegatingRenderer (../../cc/trees/layer_tree_host_unittest_animation.cc:1845)\n\u003e     LayerTreeHostAnimationTestChangeAnimationPlayer.RunSingleThread_DelegatingRenderer (../../cc/trees/layer_tree_host_unittest_animation.cc:1845)\n\u003e \n\u003e This one has a comment explaining its goals as:\n\u003e \n\u003e // Check that transform sync happens correctly at commit when we remove and add\n\u003e // a different animation player to an element.\n\u003e \n\u003e I\u0027m not sure whether we care about this. Do we ever actually do this? If no tests\n\u003e are failing other than this one, maybe we can just delete the test as obsolete and\n\u003e covering a use case we don\u0027t need to support.\n\nHow does it fail? The transform is not translate(5, 5)? Is that because of an old entry?\n\nDetaching and re-adding a player shouldn\u0027t result in a layer being deleted. I guess\nit\u0027s a callsite in Layer::SetLayerTreeHost. Instead of that, the player it seems should\nremove the animation value in the hash map when being deleted...\n\nShould we just move element_id_to_transform_animations_ etc to the AnimationHost for it to\nmanage?\n\n\u003e \n\u003e 3.\n\u003e     LayerTreeHostAnimationTestImplSideInvalidation.RunMultiThread_DelegatingRenderer (../../cc/trees/layer_tree_host_unittest_animation.cc:1731)\n\u003e \n\u003e Appears to be checking transform being copied to impl side as an extra checkpoint. Unless you think there\u0027s value to that, perhaps we can just remove that expect.\n\u003e \n\u003e The other involved comments (can see inline in the test, added revision to patch) are:\n\u003e \n\u003e       // Block until the animation finishes on the compositor thread. Since\n\u003e       // animations have already been ticked on the main thread, when the commit\n\u003e       // happens the state on the main thread will be consistent with having a\n\u003e       // running animation but the state on the compositor thread will be\n\u003e       // consistent with having only a finished animation.\n\u003e \n\u003e       // The animation on the active tree has finished, now request an impl-side\n\u003e       // invalidation and make sure it finishes before the main thread is\n\u003e       // released.\n\u003e \n\u003e 4.\n\u003e     LayerTreeHostTestEffectTreeSync.RunMultiThread_DelegatingRenderer (../../cc/trees/layer_tree_host_unittest.cc:1508)\n\u003e     LayerTreeHostTestEffectTreeSync.RunSingleThread_DelegatingRenderer (../../cc/trees/layer_tree_host_unittest.cc:1508)\n\u003e     LayerTreeHostTestTransformTreeSync.RunMultiThread_DelegatingRenderer (../../cc/trees/layer_tree_host_unittest.cc:1586)\n\u003e     LayerTreeHostTestTransformTreeSync.RunSingleThread_DelegatingRenderer (../../cc/trees/layer_tree_host_unittest.cc:1586)\n\u003e \n\u003e Deleted these four as obsolete.",
      "parentUuid": "105ad704_8fe054a0",
      "revId": "d2e453041f4a6736f16fc2ffd665c6b209d00f9c",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}