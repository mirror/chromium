{
  "comments": [
    {
      "key": {
        "uuid": "2e66f955_69415c86",
        "filename": "chrome/browser/extensions/api/language_settings_private/language_settings_private_api.cc",
        "patchSetId": 7
      },
      "lineNbr": 364,
      "author": {
        "id": 1003321
      },
      "writtenOn": "2017-10-31T01:58:14Z",
      "side": 1,
      "message": "nit here \u0026 elsewhere: use \u003d default in new code",
      "range": {
        "startLine": 364,
        "startChar": 51,
        "endLine": 364,
        "endChar": 53
      },
      "revId": "10084f67142be8590dd2a5c5cf6866c9413fdf6a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c3be3b84_59a0e4ca",
        "filename": "chrome/browser/extensions/api/language_settings_private/language_settings_private_api.cc",
        "patchSetId": 7
      },
      "lineNbr": 368,
      "author": {
        "id": 1003321
      },
      "writtenOn": "2017-10-31T01:58:14Z",
      "side": 1,
      "message": "here and similar param declarations: replace type with auto",
      "range": {
        "startLine": 368,
        "startChar": 8,
        "endLine": 368,
        "endChar": 72
      },
      "revId": "10084f67142be8590dd2a5c5cf6866c9413fdf6a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fa7aa3c8_4618f1c4",
        "filename": "chrome/browser/resources/settings/languages_page/languages.js",
        "patchSetId": 7
      },
      "lineNbr": 615,
      "author": {
        "id": 1003321
      },
      "writtenOn": "2017-10-31T01:58:14Z",
      "side": 1,
      "message": "i get that this corresponds to the UI, but the pref itself doesn\u0027t have an \"up/down\" just a front/back. maybe \"...either up (toward the front of the list) or down (toward the back)\"?",
      "range": {
        "startLine": 615,
        "startChar": 57,
        "endLine": 615,
        "endChar": 74
      },
      "revId": "10084f67142be8590dd2a5c5cf6866c9413fdf6a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "40a1dd3b_d274eccf",
        "filename": "chrome/browser/resources/settings/languages_page/languages.js",
        "patchSetId": 7
      },
      "lineNbr": 624,
      "author": {
        "id": 1003321
      },
      "writtenOn": "2017-10-31T01:58:14Z",
      "side": 1,
      "message": "If we end up keeping listStr in the moveLanguage* functions: Note that enabledLanguageSet_ is a Set. Elements will be iterated through in insertion order. That might happen to correspond to the pref\u0027s ordering, but we shouldn\u0027t rely on that. Generally we shouldn\u0027t be creating an array from it; if we need to pass a set of strings, we should pass it as an (unordered) Set.",
      "range": {
        "startLine": 624,
        "startChar": 20,
        "endLine": 624,
        "endChar": 57
      },
      "revId": "10084f67142be8590dd2a5c5cf6866c9413fdf6a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8fb17f29_d5fa1429",
        "filename": "chrome/browser/resources/settings/languages_page/languages.js",
        "patchSetId": 7
      },
      "lineNbr": 629,
      "author": {
        "id": 1003321
      },
      "writtenOn": "2017-10-31T01:58:14Z",
      "side": 1,
      "message": "optional nit: use ternary operator: upDirection ? MoveType.UP : MoveType.DOWN",
      "range": {
        "startLine": 629,
        "startChar": 33,
        "endLine": 629,
        "endChar": 44
      },
      "revId": "10084f67142be8590dd2a5c5cf6866c9413fdf6a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "32550fff_b6f0d55c",
        "filename": "chrome/browser/resources/settings/languages_page/languages_page.js",
        "patchSetId": 7
      },
      "lineNbr": 347,
      "author": {
        "id": 1003321
      },
      "writtenOn": "2017-10-31T01:58:14Z",
      "side": 1,
      "message": "optional: perhaps use an enum like in the C++?",
      "range": {
        "startLine": 346,
        "startChar": 44,
        "endLine": 347,
        "endChar": 4
      },
      "revId": "10084f67142be8590dd2a5c5cf6866c9413fdf6a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ef593fb3_67c2de62",
        "filename": "chrome/browser/resources/settings/languages_page/languages_page.js",
        "patchSetId": 7
      },
      "lineNbr": 356,
      "author": {
        "id": 1136204
      },
      "writtenOn": "2017-10-31T00:54:52Z",
      "side": 1,
      "message": "Sorry to be picky, this one would also be /* upDirection */. It\u0027s the name of the parameter rather than a comment about it. (I think the C++ style is clearer because /*upDirection\u003d*/false is unambiguous).\n\nHere\u0027s the style guide mention of \"\u0027parameter name\u0027 comments\"\nhttps://google.github.io/styleguide/jsguide.html#formatting-block-comment-style",
      "revId": "10084f67142be8590dd2a5c5cf6866c9413fdf6a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "34e30080_56db7754",
        "filename": "chrome/browser/resources/settings/languages_page/languages_page.js",
        "patchSetId": 7
      },
      "lineNbr": 356,
      "author": {
        "id": 1003321
      },
      "writtenOn": "2017-10-31T01:58:14Z",
      "side": 1,
      "message": "yep, this implies downDirection \u003d false",
      "parentUuid": "ef593fb3_67c2de62",
      "revId": "10084f67142be8590dd2a5c5cf6866c9413fdf6a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7477a315_d0af9259",
        "filename": "chrome/common/extensions/api/language_settings_private.idl",
        "patchSetId": 7
      },
      "lineNbr": 102,
      "author": {
        "id": 1003321
      },
      "writtenOn": "2017-10-31T01:58:14Z",
      "side": 1,
      "message": "break before the type name, and indent 4 spaces (actually, break before the 1st parameter)",
      "range": {
        "startLine": 101,
        "startChar": 53,
        "endLine": 102,
        "endChar": 16
      },
      "revId": "10084f67142be8590dd2a5c5cf6866c9413fdf6a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e2708a13_4112e98e",
        "filename": "chrome/test/data/webui/settings/fake_language_settings_private.js",
        "patchSetId": 7
      },
      "lineNbr": 212,
      "author": {
        "id": 1003321
      },
      "writtenOn": "2017-10-31T01:58:14Z",
      "side": 1,
      "message": "nit: just say (ignored) in the @param declaration where the param is documented",
      "range": {
        "startLine": 212,
        "startChar": 7,
        "endLine": 212,
        "endChar": 57
      },
      "revId": "10084f67142be8590dd2a5c5cf6866c9413fdf6a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ce7d7500_30f97939",
        "filename": "chrome/test/data/webui/settings/fake_language_settings_private.js",
        "patchSetId": 7
      },
      "lineNbr": 218,
      "author": {
        "id": 1003321
      },
      "writtenOn": "2017-10-31T01:58:14Z",
      "side": 1,
      "message": "nit: if you\u0027re gonna use const, also use let for consistency (since const works more like let than var) unless you specifically need var",
      "range": {
        "startLine": 218,
        "startChar": 6,
        "endLine": 218,
        "endChar": 9
      },
      "revId": "10084f67142be8590dd2a5c5cf6866c9413fdf6a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a6eda3d3_4217b8ba",
        "filename": "chrome/test/data/webui/settings/languages_tests.js",
        "patchSetId": 7
      },
      "lineNbr": 87,
      "author": {
        "id": 1136204
      },
      "writtenOn": "2017-10-31T00:54:52Z",
      "side": 1,
      "message": "true /* upDirection */",
      "revId": "10084f67142be8590dd2a5c5cf6866c9413fdf6a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "701e6eff_688d5254",
        "filename": "chrome/test/data/webui/settings/languages_tests.js",
        "patchSetId": 7
      },
      "lineNbr": 87,
      "author": {
        "id": 1003321
      },
      "writtenOn": "2017-10-31T01:58:14Z",
      "side": 1,
      "message": "or make these enums :-)",
      "parentUuid": "a6eda3d3_4217b8ba",
      "revId": "10084f67142be8590dd2a5c5cf6866c9413fdf6a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c8c9daa5_a68487bc",
        "filename": "components/translate/core/browser/translate_prefs.cc",
        "patchSetId": 7
      },
      "lineNbr": 336,
      "author": {
        "id": 1136204
      },
      "writtenOn": "2017-10-31T00:54:52Z",
      "side": 1,
      "message": "Style nit (optional):\n\nIf this can be reached by a caller passing an unexpected |where| value*, then:\n\nConsider making this a CHECK or otherwise crash out on an unexpected value OR remove the NOTREACHED (because unexpected values are handled by the return).\n\nThere are some guidelines on when to use NOTREACHED here\nhttps://chromium.googlesource.com/chromium/src/+/master/styleguide/c++/c++.md#check_dcheck_and-notreached",
      "revId": "10084f67142be8590dd2a5c5cf6866c9413fdf6a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "066c23e5_11b2450a",
        "filename": "components/translate/core/browser/translate_prefs.cc",
        "patchSetId": 7
      },
      "lineNbr": 337,
      "author": {
        "id": 1003321
      },
      "writtenOn": "2017-10-31T01:58:14Z",
      "side": 1,
      "message": "don\u0027t break after return",
      "range": {
        "startLine": 337,
        "startChar": 6,
        "endLine": 337,
        "endChar": 11
      },
      "revId": "10084f67142be8590dd2a5c5cf6866c9413fdf6a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1479ef52_1bd40316",
        "filename": "components/translate/core/browser/translate_prefs.h",
        "patchSetId": 7
      },
      "lineNbr": 146,
      "author": {
        "id": 1003321
      },
      "writtenOn": "2017-10-31T01:58:14Z",
      "side": 1,
      "message": "I see. Still, the browser should already know which ones are enabled. Worst case, we could pass the code of the language we want to insert the target language before/after instead of passing an entire list.",
      "range": {
        "startLine": 144,
        "startChar": 36,
        "endLine": 146,
        "endChar": 68
      },
      "revId": "10084f67142be8590dd2a5c5cf6866c9413fdf6a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "08341155_15fcdca8",
        "filename": "components/translate/core/browser/translate_prefs.h",
        "patchSetId": 7
      },
      "lineNbr": 214,
      "author": {
        "id": 1003321
      },
      "writtenOn": "2017-10-31T01:58:14Z",
      "side": 1,
      "message": "can this be (const std::vector\u003cconst std::string\u003e*)? callers shouldn\u0027t think they can modify settings by updating this generated list",
      "range": {
        "startLine": 214,
        "startChar": 23,
        "endLine": 214,
        "endChar": 58
      },
      "revId": "10084f67142be8590dd2a5c5cf6866c9413fdf6a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "63ec0b6b_05cdc48c",
        "filename": "components/translate/core/browser/translate_prefs.h",
        "patchSetId": 7
      },
      "lineNbr": 217,
      "author": {
        "id": 1003321
      },
      "writtenOn": "2017-10-31T01:58:14Z",
      "side": 1,
      "message": "can we make this private, to enforce that the list should be modified through this class\u0027s more specialized functions? looks like the only other file that uses it is the test",
      "range": {
        "startLine": 217,
        "startChar": 7,
        "endLine": 217,
        "endChar": 25
      },
      "revId": "10084f67142be8590dd2a5c5cf6866c9413fdf6a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}