{
  "comments": [
    {
      "key": {
        "uuid": "cd260ea0_88a79a09",
        "filename": "gpu/command_buffer/service/gles2_cmd_decoder.h",
        "patchSetId": 4
      },
      "lineNbr": 334,
      "author": {
        "id": 1120879
      },
      "writtenOn": "2017-08-18T18:55:38Z",
      "side": 1,
      "message": "Aside: in GLES2DecoderHelperImpl, we operate on TextureRefs and have no client texture IDs. However, to get a TexureRef in the first place we use TextureRef::Create(), which takes a texture manager. Later we make calls through the texture manager interface to manipulate private Texture state.\n\nIs this a path towards supporting that differently, or are you only concerned with the current GpuVideoDecoder implementation?",
      "range": {
        "startLine": 334,
        "startChar": 34,
        "endLine": 334,
        "endChar": 51
      },
      "revId": "a5b7beadd2886f7535f4ed72ae69ce898252fc85",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a82cbb06_8f523389",
        "filename": "gpu/command_buffer/service/gles2_cmd_decoder.h",
        "patchSetId": 4
      },
      "lineNbr": 334,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2017-08-22T17:10:56Z",
      "side": 1,
      "message": "Thanks for pointing that out, looks like we\u0027ll need an alternate path for the GLES2DecoderHelperImpl methods eventually.  Do you know when/where the GLES2DecoderHelperImpl will be used?  Its methods don\u0027t show up as being used anywhere in code search.",
      "parentUuid": "cd260ea0_88a79a09",
      "range": {
        "startLine": 334,
        "startChar": 34,
        "endLine": 334,
        "endChar": 51
      },
      "revId": "a5b7beadd2886f7535f4ed72ae69ce898252fc85",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "25d9e304_7e61ac50",
        "filename": "gpu/command_buffer/service/gles2_cmd_decoder.h",
        "patchSetId": 4
      },
      "lineNbr": 334,
      "author": {
        "id": 1120879
      },
      "writtenOn": "2017-08-22T17:33:43Z",
      "side": 1,
      "message": "GLES2DecoderHelper is to be used by video decoders that run in the GPU process, for example it is used by MediaCodecVideoDecoder (https://cs.chromium.org/chromium/src/media/gpu/android/video_frame_factory_impl.cc?sq\u003dpackage:chromium\u0026dr\u003dC\u0026l\u003d84), and it will be used to implement VdaVideoDecoder, which will be replacing GpuVideoDecoder.",
      "parentUuid": "a82cbb06_8f523389",
      "range": {
        "startLine": 334,
        "startChar": 34,
        "endLine": 334,
        "endChar": 51
      },
      "revId": "a5b7beadd2886f7535f4ed72ae69ce898252fc85",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fa540540_62579af7",
        "filename": "gpu/command_buffer/service/gles2_cmd_decoder_passthrough.cc",
        "patchSetId": 4
      },
      "lineNbr": 743,
      "author": {
        "id": 1148065
      },
      "writtenOn": "2017-08-18T16:53:19Z",
      "side": 1,
      "message": "Is the DCHECK valid? Say the client creates a texture with one target, kicks off the decode (passes the target check - mmh, actually, does it check when using passthrough? See comments I left in gpu_video_decode_accelerator.cc), reallocates the texture with a different target, then decode finishes and tries to bind the image with the original target.",
      "revId": "a5b7beadd2886f7535f4ed72ae69ce898252fc85",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "31f1c57b_2616d7d5",
        "filename": "gpu/command_buffer/service/gles2_cmd_decoder_passthrough.cc",
        "patchSetId": 4
      },
      "lineNbr": 743,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2017-08-22T17:10:56Z",
      "side": 1,
      "message": "This same assertion is done in Texture::SetLevelImageInternal.  Do we want to validate that the target is valid for each Bind call?",
      "parentUuid": "fa540540_62579af7",
      "revId": "a5b7beadd2886f7535f4ed72ae69ce898252fc85",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f3b275a0_358e2a25",
        "filename": "gpu/command_buffer/service/gles2_cmd_decoder_passthrough.cc",
        "patchSetId": 4
      },
      "lineNbr": 743,
      "author": {
        "id": 1148065
      },
      "writtenOn": "2017-08-22T18:29:44Z",
      "side": 1,
      "message": "Yeah, I think we either need that, or keep a reference to the TextureRef/TexturePasstroughs in the decoder and operate on that (though the latter seems a lot more work).",
      "parentUuid": "31f1c57b_2616d7d5",
      "revId": "a5b7beadd2886f7535f4ed72ae69ce898252fc85",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "af489046_7c158eb9",
        "filename": "gpu/command_buffer/service/gles2_cmd_decoder_passthrough.cc",
        "patchSetId": 4
      },
      "lineNbr": 743,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2017-08-23T17:09:20Z",
      "side": 1,
      "message": "Done, added checks in BindImage.",
      "parentUuid": "f3b275a0_358e2a25",
      "revId": "a5b7beadd2886f7535f4ed72ae69ce898252fc85",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "45beaa1a_7d46a2b2",
        "filename": "gpu/command_buffer/service/gles2_cmd_decoder_passthrough.cc",
        "patchSetId": 4
      },
      "lineNbr": 763,
      "author": {
        "id": 1148065
      },
      "writtenOn": "2017-08-18T16:53:19Z",
      "side": 1,
      "message": "Could the texture be still referenced by the bind point but gone (e.g. deleted on another context in the share group)?",
      "revId": "a5b7beadd2886f7535f4ed72ae69ce898252fc85",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "74eaa162_360e8cd3",
        "filename": "gpu/command_buffer/service/gles2_cmd_decoder_passthrough.cc",
        "patchSetId": 4
      },
      "lineNbr": 763,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2017-08-22T17:10:56Z",
      "side": 1,
      "message": "I\u0027ve updated the current texture binding tracking in the passthrough command decoder to store the client ID and a reference to the texture object.  This way we\u0027ll be safe from it being deleted behind our backs.",
      "parentUuid": "45beaa1a_7d46a2b2",
      "revId": "a5b7beadd2886f7535f4ed72ae69ce898252fc85",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bff975c8_5e3062d9",
        "filename": "media/gpu/ipc/service/gpu_video_decode_accelerator.cc",
        "patchSetId": 4
      },
      "lineNbr": 441,
      "author": {
        "id": 1148065
      },
      "writtenOn": "2017-08-18T16:53:19Z",
      "side": 1,
      "message": "Do we have an equivalent check for the passthrough case?",
      "revId": "a5b7beadd2886f7535f4ed72ae69ce898252fc85",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0fdd1e3f_9cffc76a",
        "filename": "media/gpu/ipc/service/gpu_video_decode_accelerator.cc",
        "patchSetId": 4
      },
      "lineNbr": 441,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2017-08-22T17:10:56Z",
      "side": 1,
      "message": "Added this check.",
      "parentUuid": "bff975c8_5e3062d9",
      "revId": "a5b7beadd2886f7535f4ed72ae69ce898252fc85",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9bb8627a_1c5bf8ee",
        "filename": "media/gpu/ipc/service/gpu_video_decode_accelerator.cc",
        "patchSetId": 4
      },
      "lineNbr": 461,
      "author": {
        "id": 1148065
      },
      "writtenOn": "2017-08-18T16:53:19Z",
      "side": 1,
      "message": "Ditto, do we need this check for passthrough?",
      "revId": "a5b7beadd2886f7535f4ed72ae69ce898252fc85",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dbe24100_29ebcca8",
        "filename": "media/gpu/ipc/service/gpu_video_decode_accelerator.cc",
        "patchSetId": 4
      },
      "lineNbr": 461,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2017-08-22T17:10:56Z",
      "side": 1,
      "message": "This isn\u0027t feasible to validate right now, size information isn\u0027t tracked in the passthrough textures.  As is, the binding/uploading of video data to the texture will set the size.",
      "parentUuid": "9bb8627a_1c5bf8ee",
      "revId": "a5b7beadd2886f7535f4ed72ae69ce898252fc85",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "89c8e3be_d3afd9a6",
        "filename": "media/gpu/ipc/service/gpu_video_decode_accelerator.cc",
        "patchSetId": 4
      },
      "lineNbr": 461,
      "author": {
        "id": 1148065
      },
      "writtenOn": "2017-08-22T18:29:44Z",
      "side": 1,
      "message": "If this is equivalent to the path above (l.452), then it\u0027s good enough, I think.",
      "parentUuid": "dbe24100_29ebcca8",
      "revId": "a5b7beadd2886f7535f4ed72ae69ce898252fc85",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a5d0bac6_1cbc9e43",
        "filename": "media/gpu/ipc/service/gpu_video_decode_accelerator.cc",
        "patchSetId": 4
      },
      "lineNbr": 461,
      "author": {
        "id": 1105284
      },
      "writtenOn": "2017-08-23T17:09:20Z",
      "side": 1,
      "message": "It\u0027s a different error path but still safe.",
      "parentUuid": "89c8e3be_d3afd9a6",
      "revId": "a5b7beadd2886f7535f4ed72ae69ce898252fc85",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}