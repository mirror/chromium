{
  "comments": [
    {
      "key": {
        "uuid": "64bec967_06e11849",
        "filename": "third_party/zlib/contrib/optimizations/chunkcopy.h",
        "patchSetId": 20
      },
      "lineNbr": 36,
      "author": {
        "id": 1189229
      },
      "writtenOn": "2017-12-04T20:57:59Z",
      "side": 1,
      "message": "I want to call attention to this just to make sure we don\u0027t accidentally venture into undefined behavior.\n\nThis is done for type punning, which is legal in C. But in C++, it is undefined behavior (assigning one union member and then reading another).\n\nThis header is only included from .c files. There are no special flags in the BUILD.gn to force using a C standard but perhaps the default treatment of .c files is to compile as C and not C++. If so, this is fine -- it is just something we should be aware of.\n\nAnother bit of interest is the alternate union member is only ever read via a memcpy right now. memcpy has special semantics for aliasing, but I don\u0027t think it has special semantics for this UB.",
      "range": {
        "startLine": 31,
        "startChar": 0,
        "endLine": 36,
        "endChar": 14
      },
      "revId": "b6b95700c9aa5ad93999e3ddb552483de97f2146",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "01624f72_80a93518",
        "filename": "third_party/zlib/contrib/optimizations/chunkcopy.h",
        "patchSetId": 20
      },
      "lineNbr": 36,
      "author": {
        "id": 1193769
      },
      "writtenOn": "2017-12-04T21:13:04Z",
      "side": 1,
      "message": "I believe the designated initializers we use below to initialize this union would also make all the C++ compilers sound the klaxons if we accidentally tried to treat this as C++.\n\nBut if we\u0027re feeling anxious, I bet it wouldn\u0027t hurt the codegen to just fill a local array with the splatted values and then memcpy them into a non-union 16-byte chunk, e.g.\n\nstatic inline Chunk splat4(const void* src) {\n    int32_t v;\n    memcpy(\u0026v, src, sizeof(v));\n\n    int32_t vs[] \u003d { v,v,v,v };\n    Chunk c;\n    memcpy(\u0026c, vs, sizeof(vs));\n\n    return c;\n}\n\n(Lots of compilers _do_ violate the standard to make this union punning explicitly safe even in C++.  I believe that list includes GCC and MSVC, but I can\u0027t remember about Clang.)",
      "parentUuid": "64bec967_06e11849",
      "range": {
        "startLine": 31,
        "startChar": 0,
        "endLine": 36,
        "endChar": 14
      },
      "revId": "b6b95700c9aa5ad93999e3ddb552483de97f2146",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1d5c7fe9_eb5d2ce2",
        "filename": "third_party/zlib/contrib/optimizations/chunkcopy.h",
        "patchSetId": 20
      },
      "lineNbr": 36,
      "author": {
        "id": 1189229
      },
      "writtenOn": "2017-12-04T21:28:23Z",
      "side": 1,
      "message": "Agreed. Although the standard doesn\u0027t define anything (nor call out that the implementation can define it), I\u0027m pretty sure VC, Intel, GCC, and Clang all do what we expect.\n\nI\u0027m not too worried about it. I just wanted to make sure we are all aware of it just in case.",
      "parentUuid": "01624f72_80a93518",
      "range": {
        "startLine": 31,
        "startChar": 0,
        "endLine": 36,
        "endChar": 14
      },
      "revId": "b6b95700c9aa5ad93999e3ddb552483de97f2146",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "65521bfa_f3dd1706",
        "filename": "third_party/zlib/contrib/optimizations/chunkcopy.h",
        "patchSetId": 20
      },
      "lineNbr": 36,
      "author": {
        "id": 1109754
      },
      "writtenOn": "2017-12-06T14:13:43Z",
      "side": 1,
      "message": "\u003e I want to call attention to this just to make sure we don\u0027t accidentally venture into undefined behavior.\n\nThanks for noticing and I believe we did venture into the unknown here.  This was patch set #20, all bots green _except_ android_n5x_swarming_rel which had persistent failure in one test.\n\nFailing test: CaptureScreenshotTest.CaptureScreenshot which complained about an image mismatch.  Investigated, the image it tests was decoded from a PNG.\n\nPatch #21-#23 resolved: I had to recover the the NEON intrinsic code to make that bot green again.  I think the \"punning\" union type approach should not be used therefore, I worked to remove it ...",
      "parentUuid": "1d5c7fe9_eb5d2ce2",
      "range": {
        "startLine": 31,
        "startChar": 0,
        "endLine": 36,
        "endChar": 14
      },
      "revId": "b6b95700c9aa5ad93999e3ddb552483de97f2146",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "02440736_71b97042",
        "filename": "third_party/zlib/contrib/optimizations/chunkcopy.h",
        "patchSetId": 20
      },
      "lineNbr": 38,
      "author": {
        "id": 1193769
      },
      "writtenOn": "2017-12-04T16:21:51Z",
      "side": 1,
      "message": "I don\u0027t think I\u0027m really following why we have both chunkcopy_chunk_t and z_vec128i_t, especially if they\u0027re next constrained to be the same.  Can\u0027t we just use z_vec128i_t all the way through?",
      "revId": "b6b95700c9aa5ad93999e3ddb552483de97f2146",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "955b445f_861fec87",
        "filename": "third_party/zlib/contrib/optimizations/chunkcopy.h",
        "patchSetId": 20
      },
      "lineNbr": 45,
      "author": {
        "id": 1193769
      },
      "writtenOn": "2017-12-04T16:21:51Z",
      "side": 1,
      "message": "I think the names on these two might be reversed?  Seems like the sizeof(int8_t)*16 is the 128-bit check?",
      "revId": "b6b95700c9aa5ad93999e3ddb552483de97f2146",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d32e7541_67547e7e",
        "filename": "third_party/zlib/contrib/optimizations/chunkcopy.h",
        "patchSetId": 20
      },
      "lineNbr": 50,
      "author": {
        "id": 1193769
      },
      "writtenOn": "2017-12-04T16:21:51Z",
      "side": 1,
      "message": "Are we still TODO: fuse storechunk(..., loadchunk(...)) ?\n\nI only ask because now that we\u0027re not working with vector types explicitly, it probably reads more weirdly to split these two up than to fuse them.",
      "revId": "b6b95700c9aa5ad93999e3ddb552483de97f2146",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b010a62c_94934d6a",
        "filename": "third_party/zlib/contrib/optimizations/chunkcopy.h",
        "patchSetId": 20
      },
      "lineNbr": 216,
      "author": {
        "id": 1193769
      },
      "writtenOn": "2017-12-04T16:21:51Z",
      "side": 1,
      "message": "This file appears to mostly follow memcpy-like dst-then-src order for arguments.  Might want to swap these?",
      "range": {
        "startLine": 216,
        "startChar": 40,
        "endLine": 216,
        "endChar": 72
      },
      "revId": "b6b95700c9aa5ad93999e3ddb552483de97f2146",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4062cd7e_7bc8fd03",
        "filename": "third_party/zlib/contrib/optimizations/inflate.c",
        "patchSetId": 20
      },
      "lineNbr": 206,
      "author": {
        "id": 1193769
      },
      "writtenOn": "2017-12-04T16:21:51Z",
      "side": 1,
      "message": "Moot now?",
      "revId": "b6b95700c9aa5ad93999e3ddb552483de97f2146",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a1544ec6_d3910188",
        "filename": "third_party/zlib/contrib/optimizations/inflate.c",
        "patchSetId": 20
      },
      "lineNbr": 206,
      "author": {
        "id": 1109754
      },
      "writtenOn": "2017-12-06T14:16:42Z",
      "side": 1,
      "message": "Nope, we always need this mind, since the adler32_simd patch needs it.  I had a note about it in the change description.",
      "parentUuid": "4062cd7e_7bc8fd03",
      "revId": "b6b95700c9aa5ad93999e3ddb552483de97f2146",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}