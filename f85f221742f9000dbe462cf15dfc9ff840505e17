{
  "comments": [
    {
      "key": {
        "uuid": "4cdc283c_bddc8fae",
        "filename": "content/browser/gpu/gpu_data_manager_impl_private.cc",
        "patchSetId": 8
      },
      "lineNbr": 711,
      "author": {
        "id": 1000887
      },
      "writtenOn": "2017-10-27T15:37:27Z",
      "side": 0,
      "message": "If you agree about the stickiness, then this should be checking that variable and setting the command line based on it to prevent making a gpu channel/process when the renderer starts and we\u0027re not using gpu compositing. This is the change in https://chromium-review.googlesource.com/c/chromium/src/+/714365/19/content/browser/renderer_host/render_process_host_impl.cc\n\nAnd then RenderThreadImpl should also be sticky which is the is_gpu_compositing_disabled_ there. This is starting to feel like most of my patch..\n\nso I guess the options are:\n- pull out the sticky parts in my cl\n- wait for my cl\n- be ok with the gpu process launching when gpu is disabled until my cl lands - i\u0027m not sure if that would be a regression on bots? probably we don\u0027t look at gpu disabled rly..?",
      "revId": "f85f221742f9000dbe462cf15dfc9ff840505e17",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c06f4a8f_bd0430d9",
        "filename": "content/browser/gpu/gpu_data_manager_impl_private.cc",
        "patchSetId": 8
      },
      "lineNbr": 711,
      "author": {
        "id": 1003154
      },
      "writtenOn": "2017-10-27T20:33:52Z",
      "side": 0,
      "message": "Blacklisting moves to the GPU side, and swiftshader decision will be soon. So the only valid logic in CanUseGpuBrowserCompositor is commandline switch kDisableGpuCompositing. That will automatically be passed to renderer process if user passes it in.\n\nIf you have other logic and will append kDisableGpuCompositing, then you need to do it explicitly.",
      "parentUuid": "4cdc283c_bddc8fae",
      "revId": "f85f221742f9000dbe462cf15dfc9ff840505e17",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5991a8c7_089f0000",
        "filename": "content/browser/gpu/gpu_data_manager_impl_private.cc",
        "patchSetId": 8
      },
      "lineNbr": 711,
      "author": {
        "id": 1000887
      },
      "writtenOn": "2017-10-27T22:30:41Z",
      "side": 0,
      "message": "Yeah, i was suggesting that other logic should be if the compositing mode is known to be software (dynamically not just command line), but my patch will resolve it.",
      "parentUuid": "c06f4a8f_bd0430d9",
      "revId": "f85f221742f9000dbe462cf15dfc9ff840505e17",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fb537747_eedb83e2",
        "filename": "content/browser/gpu/gpu_data_manager_impl_private.cc",
        "patchSetId": 8
      },
      "lineNbr": 808,
      "author": {
        "id": 1000887
      },
      "writtenOn": "2017-10-27T15:37:27Z",
      "side": 0,
      "message": "Oh, this is a good hint at other things that should be reading RenderThreadImpl for this state instead of |prefs|.\n\nMaybe we should be removing these prefs fields entirely? Maybe that could be its own CL to remove these, prefs and query RenderThreadImpl instead, which can check the command line flag (and is_gpu_compositing_disabled_ once stickiness is implemented)?",
      "revId": "f85f221742f9000dbe462cf15dfc9ff840505e17",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "999fab4c_4be64160",
        "filename": "content/browser/gpu/gpu_data_manager_impl_private.cc",
        "patchSetId": 8
      },
      "lineNbr": 808,
      "author": {
        "id": 1003154
      },
      "writtenOn": "2017-10-27T20:33:52Z",
      "side": 0,
      "message": "This has to be part of this CL because I removed blacklisting from CanUseGpuBrowserCompositor so I have to address this accordingly. Will think about a good solution.",
      "parentUuid": "fb537747_eedb83e2",
      "revId": "f85f221742f9000dbe462cf15dfc9ff840505e17",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "88820c12_62b938b2",
        "filename": "content/browser/gpu/gpu_data_manager_impl_private.cc",
        "patchSetId": 8
      },
      "lineNbr": 808,
      "author": {
        "id": 1000887
      },
      "writtenOn": "2017-10-27T22:30:41Z",
      "side": 0,
      "message": "This needs to be here if we remove blacklisting, I was wondering if ud like to split the prefs change into a pre-CL, the pepper one looks easy. It seems the canvas one still needs to be a pref, but GpuDataManager doesn\u0027t need to set it. Instead in the renderer, it would need to check the pref and RenderThreadImpl::IsGpuCompositingDisabled() both, instead of just the pref (it needs to anyways, so essentially setting it false here is redundant already once my patch has landed, as we communicate gpu/software compositing thru the watcher interface too). It could help shrink this CL if you like.",
      "parentUuid": "999fab4c_4be64160",
      "revId": "f85f221742f9000dbe462cf15dfc9ff840505e17",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cc34c5e9_38d9acaa",
        "filename": "content/browser/gpu/gpu_data_manager_impl_private.cc",
        "patchSetId": 8
      },
      "lineNbr": 810,
      "author": {
        "id": 1000887
      },
      "writtenOn": "2017-10-27T22:30:41Z",
      "side": 0,
      "message": "For pepper 3d it looks like the only other setter is to check !command_line.HasSwitch(switches::kDisablePepper3d); We could just forward that flag to the renderer and have it check it, that removes it from all of the (imo complicated) WebPrefs plumbing, if you like.\n\nhttps://cs.chromium.org/search/?q\u003dpepper_3d_enabled\u0026sq\u003dpackage:chromium\u0026type\u003dcs",
      "revId": "f85f221742f9000dbe462cf15dfc9ff840505e17",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8606520e_bd254043",
        "filename": "content/browser/renderer_host/render_widget_host_view_browsertest.cc",
        "patchSetId": 8
      },
      "lineNbr": 680,
      "author": {
        "id": 1000887
      },
      "writtenOn": "2017-10-27T15:37:27Z",
      "side": 0,
      "message": "This could check ImageTransportFactory to see if gpu is disabled if we had the sticky bit there also.",
      "revId": "f85f221742f9000dbe462cf15dfc9ff840505e17",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5f9885e3_c64a4a4a",
        "filename": "content/browser/renderer_host/render_widget_host_view_browsertest.cc",
        "patchSetId": 8
      },
      "lineNbr": 680,
      "author": {
        "id": 1003154
      },
      "writtenOn": "2017-10-27T20:33:52Z",
      "side": 0,
      "message": "Here is the situation: ImageTransportFactory won\u0027t have blacklisting decision once I move the decision to GPU process.",
      "parentUuid": "8606520e_bd254043",
      "revId": "f85f221742f9000dbe462cf15dfc9ff840505e17",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "34c528d0_9d34d25e",
        "filename": "content/browser/renderer_host/render_widget_host_view_browsertest.cc",
        "patchSetId": 8
      },
      "lineNbr": 680,
      "author": {
        "id": 1000887
      },
      "writtenOn": "2017-10-27T22:30:41Z",
      "side": 0,
      "message": "True, but ImageTransportFactory knows if we\u0027re using gpu compositing or not, of which blacklisting is part of the state but not all (it uses the gpu process info to help make that decision). See ImageTransportFactory::IsGpuCompositingDisabled().",
      "parentUuid": "5f9885e3_c64a4a4a",
      "revId": "f85f221742f9000dbe462cf15dfc9ff840505e17",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}