{
  "comments": [
    {
      "key": {
        "uuid": "2c40b427_c662bebd",
        "filename": "content/browser/payments/payment_app_info_fetcher.cc",
        "patchSetId": 4
      },
      "lineNbr": 122,
      "author": {
        "id": 1129572
      },
      "writtenOn": "2017-12-12T21:42:08Z",
      "side": 1,
      "message": "is it possible that this will reset a different fetcher? since FetcherImpl is doing many asynchronous tasks.",
      "range": {
        "startLine": 122,
        "startChar": 2,
        "endLine": 122,
        "endChar": 56
      },
      "revId": "554431fc71e1b4380c46edb062b7a8a1116f0a8b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9fa5dd5f_f2e0da1d",
        "filename": "content/browser/payments/payment_app_info_fetcher.cc",
        "patchSetId": 4
      },
      "lineNbr": 122,
      "author": {
        "id": 1114659
      },
      "writtenOn": "2017-12-15T17:38:05Z",
      "side": 1,
      "message": "You\u0027re right, but the problem exists in previous code and this patch is just fixing TSAN flaky test. I didn\u0027t want to change existing logic in this CL. If you don\u0027t mind, I left a FIXME comment and then I\u0027ll write a follow-up CL to fix the problem.\nBut if you think the problem has to be fixed in this patch, I\u0027ll try it in this CL.",
      "parentUuid": "2c40b427_c662bebd",
      "range": {
        "startLine": 122,
        "startChar": 2,
        "endLine": 122,
        "endChar": 56
      },
      "revId": "554431fc71e1b4380c46edb062b7a8a1116f0a8b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d4bfe879_06122e01",
        "filename": "content/browser/payments/payment_app_info_fetcher.cc",
        "patchSetId": 4
      },
      "lineNbr": 122,
      "author": {
        "id": 1129572
      },
      "writtenOn": "2017-12-18T16:03:48Z",
      "side": 1,
      "message": "Singleton looks worsen this situation, previously, PaymentAppInfoFetcher is per PaymentAppDatabase/PaymentAppContextImpl/StoragePartition. Why do we use the singleton?",
      "parentUuid": "9fa5dd5f_f2e0da1d",
      "range": {
        "startLine": 122,
        "startChar": 2,
        "endLine": 122,
        "endChar": 56
      },
      "revId": "554431fc71e1b4380c46edb062b7a8a1116f0a8b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8800d330_c6bcbe17",
        "filename": "content/browser/payments/payment_app_info_fetcher.cc",
        "patchSetId": 4
      },
      "lineNbr": 122,
      "author": {
        "id": 1114659
      },
      "writtenOn": "2017-12-18T17:34:22Z",
      "side": 1,
      "message": "Thank you for reply. This CL is focusing on just fixing TSAN error. In other words, no changes existing behavior.\n\nYou said that PaymentAppInfoFetcher is per PaymentAppDatabase/PaymentAppContextImpl/StoragePartition.\nThe PaymentAppDatabase/PaymentAppContextImpl/StoragePartition is only one in the browser process. The storage parition can be multiple but PaymentHandler is only allowed default storage partition now(in the future as well).\nIt means that there is only one app info fetcher for the PaymentHandler in the browser process.\nTherefore, the same problem will occur when a request from b.com comes in when a.com\u0027s request is not over.",
      "parentUuid": "d4bfe879_06122e01",
      "range": {
        "startLine": 122,
        "startChar": 2,
        "endLine": 122,
        "endChar": 56
      },
      "revId": "554431fc71e1b4380c46edb062b7a8a1116f0a8b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "16f560bb_294fb04c",
        "filename": "content/browser/payments/payment_app_info_fetcher.cc",
        "patchSetId": 4
      },
      "lineNbr": 122,
      "author": {
        "id": 1114659
      },
      "writtenOn": "2017-12-18T17:49:11Z",
      "side": 1,
      "message": "FYI, I thought that creating/destroying object is a purpose of reducing memory usage in previous code. So, I used singleton instead of static.  In follow-up CL or this CL, my plan is making this class available queueing the fetch requests. (Using task queue like https://chromium-review.googlesource.com/c/chromium/src/+/658201)",
      "parentUuid": "8800d330_c6bcbe17",
      "range": {
        "startLine": 122,
        "startChar": 2,
        "endLine": 122,
        "endChar": 56
      },
      "revId": "554431fc71e1b4380c46edb062b7a8a1116f0a8b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5a69bfcd_f3261f98",
        "filename": "content/browser/payments/payment_app_info_fetcher.cc",
        "patchSetId": 4
      },
      "lineNbr": 122,
      "author": {
        "id": 1129572
      },
      "writtenOn": "2017-12-18T18:30:19Z",
      "side": 1,
      "message": "Thanks for the FYI, sounds good to me,\n\nThen can we keep this CL as simple as possible to be well scoped, and do the refactor in a separate CL? The singleton change sounds part of the refactor but not for the TSAN error.",
      "parentUuid": "16f560bb_294fb04c",
      "range": {
        "startLine": 122,
        "startChar": 2,
        "endLine": 122,
        "endChar": 56
      },
      "revId": "554431fc71e1b4380c46edb062b7a8a1116f0a8b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dcc45aeb_d380e4ad",
        "filename": "content/browser/payments/payment_app_info_fetcher.cc",
        "patchSetId": 4
      },
      "lineNbr": 122,
      "author": {
        "id": 1129572
      },
      "writtenOn": "2017-12-18T18:52:29Z",
      "side": 1,
      "message": "FYI, in previous implementation, PaymentAppInfoFetcher is thread safe reference count class, reset of payment_app_info_fetcher_ in PaymentAppDatabase is not necessary cause this object to be released.",
      "parentUuid": "5a69bfcd_f3261f98",
      "range": {
        "startLine": 122,
        "startChar": 2,
        "endLine": 122,
        "endChar": 56
      },
      "revId": "554431fc71e1b4380c46edb062b7a8a1116f0a8b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6102199a_2718873e",
        "filename": "content/browser/payments/payment_app_info_fetcher.cc",
        "patchSetId": 4
      },
      "lineNbr": 122,
      "author": {
        "id": 1114659
      },
      "writtenOn": "2017-12-18T19:32:56Z",
      "side": 1,
      "message": "Thank you for reply!\n\nThis CL is a patch that prevents TSAN errors, especially race conditions.\nIMHO, to minimize race conditions, we should minimize the sharing of variables between threads.\nThis patch is aiming at isolating the crossing variables between threads(IO thread \u003c--\u003e UI thread).\n\nBefore this patch, for example, fetched_payment_app_info_ member is intialized as empty object on IO thread and then set(newly created) the fetched data to it on UI thread and then it destroyed on IO thread again.\n\nBut after this patch, the fetched data is initialized/created on UI thread and then destroyed on UI thread.\n\nIn the previous implementation, there were multiple crossing variables. They might cause another race conditions and TSAN errors. But now, there is no crossing variable.",
      "parentUuid": "dcc45aeb_d380e4ad",
      "range": {
        "startLine": 122,
        "startChar": 2,
        "endLine": 122,
        "endChar": 56
      },
      "revId": "554431fc71e1b4380c46edb062b7a8a1116f0a8b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1b5a3219_0313f679",
        "filename": "content/browser/payments/payment_app_info_fetcher.h",
        "patchSetId": 4
      },
      "lineNbr": 46,
      "author": {
        "id": 1002114
      },
      "writtenOn": "2017-12-12T20:08:51Z",
      "side": 1,
      "message": "No one overrides PaymentAppInfoFetcher, so no need for the destructor to be virtual.",
      "range": {
        "startLine": 46,
        "startChar": 2,
        "endLine": 46,
        "endChar": 9
      },
      "revId": "554431fc71e1b4380c46edb062b7a8a1116f0a8b",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}