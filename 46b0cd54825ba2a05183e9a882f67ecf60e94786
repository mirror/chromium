{
  "comments": [
    {
      "key": {
        "uuid": "b19ee885_5772dd35",
        "filename": "/COMMIT_MSG",
        "patchSetId": 18
      },
      "lineNbr": 22,
      "author": {
        "id": 1109754
      },
      "writtenOn": "2017-11-30T02:06:11Z",
      "side": 1,
      "message": "Have you measured the perf for the PNG 140 corpus?",
      "revId": "46b0cd54825ba2a05183e9a882f67ecf60e94786",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a790a94b_d3eca31e",
        "filename": "third_party/zlib/BUILD.gn",
        "patchSetId": 18
      },
      "lineNbr": 47,
      "author": {
        "id": 1189229
      },
      "writtenOn": "2017-11-30T00:35:20Z",
      "side": 1,
      "message": "I understand we are gating Windows for now.\nThat is completely fine.\nMost of my comments here are about that and can be ignored. It is just food for thought.\n\nI believe Windows is now available on ARM. So it is possible for us to support this, presumably. But I don\u0027t think we build Chrome for Windows/ARM. So it\u0027s pretty safe to ignore for now.",
      "range": {
        "startLine": 47,
        "startChar": 2,
        "endLine": 47,
        "endChar": 3
      },
      "revId": "46b0cd54825ba2a05183e9a882f67ecf60e94786",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ed56e40e_2a5108ea",
        "filename": "third_party/zlib/BUILD.gn",
        "patchSetId": 18
      },
      "lineNbr": 47,
      "author": {
        "id": 1145695
      },
      "writtenOn": "2017-11-30T01:20:58Z",
      "side": 1,
      "message": "I thought about the subject and decided to gate it as Chrome@Windows@ARM is not an officially supported platform.\n\nBut we may have to revisit this in near future.\n:-)",
      "parentUuid": "a790a94b_d3eca31e",
      "range": {
        "startLine": 47,
        "startChar": 2,
        "endLine": 47,
        "endChar": 3
      },
      "revId": "46b0cd54825ba2a05183e9a882f67ecf60e94786",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f94803e4_d4ac8483",
        "filename": "third_party/zlib/BUILD.gn",
        "patchSetId": 18
      },
      "lineNbr": 127,
      "author": {
        "id": 1189229
      },
      "writtenOn": "2017-11-30T00:35:20Z",
      "side": 1,
      "message": "We don\u0027t add this flag if compiling with GCC?\nI seem to recall our typical builds are with Clang but the official, release builds are with GCC.\nThat might have changed since I saw that a long time ago.",
      "range": {
        "startLine": 127,
        "startChar": 19,
        "endLine": 127,
        "endChar": 27
      },
      "revId": "46b0cd54825ba2a05183e9a882f67ecf60e94786",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cd2b5865_326229b2",
        "filename": "third_party/zlib/BUILD.gn",
        "patchSetId": 18
      },
      "lineNbr": 127,
      "author": {
        "id": 1145695
      },
      "writtenOn": "2017-11-30T01:20:58Z",
      "side": 1,
      "message": "Basically because I only checked the ASM generated by a build using clang.\n\nIf the official Chrome builds still use gcc, I will have to update the patch to enable the flag for gcc (which should work fine).\n\nI wonder who would known for sure how the apks are generated?",
      "parentUuid": "f94803e4_d4ac8483",
      "range": {
        "startLine": 127,
        "startChar": 19,
        "endLine": 127,
        "endChar": 27
      },
      "revId": "46b0cd54825ba2a05183e9a882f67ecf60e94786",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "308f5113_e2995e81",
        "filename": "third_party/zlib/contrib/optimizations/arm/arm_features.c",
        "patchSetId": 18
      },
      "lineNbr": 16,
      "author": {
        "id": 1189229
      },
      "writtenOn": "2017-11-30T00:35:20Z",
      "side": 1,
      "message": "I think this works in GCC and Clang. But IIRC it doesn\u0027t work in VC. I am unsure about other compilers like ICC.\n\nAnyway, maybe something like:\n#if defined __clang__ || (defined __GNUC__ \u0026\u0026 __GNUC__ \u003e\u003d 4)\n#define ZLIB_INTERNAL __attribute__((visibility (\"hidden\")))\n#else\n#define ZLIB_INTERNAL\n#endif\n\nThis would be a sort of opt-in system, that way.\n(I think VC\u0027s default visibility is hidden anyway)\n\n\nActually, in retrospect, let\u0027s just worry about Windows later. I think Windows/ARM usage is low.",
      "revId": "46b0cd54825ba2a05183e9a882f67ecf60e94786",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9cdb157c_ed666471",
        "filename": "third_party/zlib/contrib/optimizations/arm/arm_features.c",
        "patchSetId": 18
      },
      "lineNbr": 16,
      "author": {
        "id": 1109754
      },
      "writtenOn": "2017-11-30T02:06:11Z",
      "side": 1,
      "message": "I was about to say we could include the zlib .h file that defines ZLIB_INTERNAL here ...",
      "parentUuid": "308f5113_e2995e81",
      "revId": "46b0cd54825ba2a05183e9a882f67ecf60e94786",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9ce74a6e_1ea823c2",
        "filename": "third_party/zlib/contrib/optimizations/arm/arm_features.c",
        "patchSetId": 18
      },
      "lineNbr": 20,
      "author": {
        "id": 1109754
      },
      "writtenOn": "2017-11-30T02:06:11Z",
      "side": 1,
      "message": "... but as these are static, the ZLIB_INTERNAL in these definition are not needed.",
      "revId": "46b0cd54825ba2a05183e9a882f67ecf60e94786",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3cc24720_72026550",
        "filename": "third_party/zlib/contrib/optimizations/arm/arm_features.h",
        "patchSetId": 18
      },
      "lineNbr": 10,
      "author": {
        "id": 1109754
      },
      "writtenOn": "2017-11-30T02:06:11Z",
      "side": 1,
      "message": "would a\n\ntypedef unsigned char z_bool;\n\nor similar work here.",
      "revId": "46b0cd54825ba2a05183e9a882f67ecf60e94786",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d13ee4b7_20735302",
        "filename": "third_party/zlib/contrib/optimizations/arm/armv8_crc32.h",
        "patchSetId": 18
      },
      "lineNbr": 13,
      "author": {
        "id": 1109754
      },
      "writtenOn": "2017-11-30T02:06:11Z",
      "side": 1,
      "message": "zlib provides us with z_size_t, right?",
      "revId": "46b0cd54825ba2a05183e9a882f67ecf60e94786",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ac26c6b7_91781f99",
        "filename": "third_party/zlib/deflate.c",
        "patchSetId": 18
      },
      "lineNbr": 289,
      "author": {
        "id": 1109754
      },
      "writtenOn": "2017-11-30T02:06:11Z",
      "side": 1,
      "message": "x86_check_features is used by the Intel deflate patch, so it doesn\u0027t really depend on the ADLER32_SIMD_SSE3.  If we turned off ADLER32_SIMD_SSE3 say, then unrelated deflate patch would stop working also.\n\nWe have a bug elsewhere to deal with re-organizing the deflate patch and that\u0027d be the bug to work out what todo about it\u0027s #ifdef (the deflate patch currently has none, sadly). For now, we could just write\n \n#if defined(USE_ARMV8_CRC32)\n    arm_check_features();\n#else\n    x86_check_features();\n#endif\n\nfor no change in behavior.",
      "revId": "46b0cd54825ba2a05183e9a882f67ecf60e94786",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "65ce7f7f_6a424826",
        "filename": "third_party/zlib/deflate.c",
        "patchSetId": 18
      },
      "lineNbr": 289,
      "author": {
        "id": 1189229
      },
      "writtenOn": "2017-11-30T04:25:05Z",
      "side": 1,
      "message": "Noel is right.\nFor this reason we might want to revert real fast or make this change before the cut tomorrow.\n\nAs-is, it is ALMOST not a change in behavior.\nx86_check_features() only turns on flags when:\n-SSSE3 is supported (so SSE3 would also be supported)\n-SSE2, SSE4.2, and PCLMULGDQ are all supported (again, so SSE3 would also be)\n\nHowever, ADLER32_SIMD_SSE3 is set on all x86/x64 builds EXCEPT iOS.\n\nSo this patch which landed will only slow down iOS. It now puts iOS behind the flag.\n\n(Why is BUILD.gn excluding iOS there?)",
      "parentUuid": "ac26c6b7_91781f99",
      "revId": "46b0cd54825ba2a05183e9a882f67ecf60e94786",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "09054ef9_4b9cd56a",
        "filename": "third_party/zlib/deflate.c",
        "patchSetId": 18
      },
      "lineNbr": 289,
      "author": {
        "id": 1145695
      },
      "writtenOn": "2017-11-30T05:34:31Z",
      "side": 1,
      "message": "Chris\n\nWhat I think Noel pointed is that if (for whatever reason) the adler32 optimization was disabled, that would make the original Intel patches to be also disabled because it relies on x86_check_features() initializing some state variables.\n\nSo unless I\u0027m mistaken, the code as it is now is ok (i.e. won\u0027t disable anything) *but* it is a change on the dependencies chain.\n\nSo to preserve the original behavior the suggested change.",
      "parentUuid": "65ce7f7f_6a424826",
      "revId": "46b0cd54825ba2a05183e9a882f67ecf60e94786",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3abfd974_5d286fa1",
        "filename": "third_party/zlib/deflate.c",
        "patchSetId": 18
      },
      "lineNbr": 289,
      "author": {
        "id": 1189229
      },
      "writtenOn": "2017-11-30T09:53:15Z",
      "side": 1,
      "message": "No no, iOS x86 no longer gets the x86 optimizations.",
      "parentUuid": "09054ef9_4b9cd56a",
      "revId": "46b0cd54825ba2a05183e9a882f67ecf60e94786",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1821df04_f7f23fe3",
        "filename": "third_party/zlib/inflate.c",
        "patchSetId": 18
      },
      "lineNbr": 207,
      "author": {
        "id": 1109754
      },
      "writtenOn": "2017-11-30T02:06:11Z",
      "side": 1,
      "message": "nit: space before this line.",
      "revId": "46b0cd54825ba2a05183e9a882f67ecf60e94786",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}