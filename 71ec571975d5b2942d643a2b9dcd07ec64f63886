{
  "comments": [
    {
      "key": {
        "uuid": "137fb9cc_76669558",
        "filename": "base/trace_event/heap_profiler_allocation_register_posix.cc",
        "patchSetId": 3
      },
      "lineNbr": 50,
      "author": {
        "id": 1001629
      },
      "writtenOn": "2017-06-22T21:34:09Z",
      "side": 1,
      "message": "why SPECIFIC?",
      "range": {
        "startLine": 50,
        "startChar": 45,
        "endLine": 50,
        "endChar": 56
      },
      "revId": "71ec571975d5b2942d643a2b9dcd07ec64f63886",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c8d69f3b_f56757fe",
        "filename": "base/trace_event/heap_profiler_allocation_register_posix.cc",
        "patchSetId": 3
      },
      "lineNbr": 50,
      "author": {
        "id": 1144260
      },
      "writtenOn": "2017-06-22T21:52:37Z",
      "side": 1,
      "message": "Oh, copied from some sample code. But since the offset is 0 it\u0027s unnecessary. Removed.",
      "parentUuid": "137fb9cc_76669558",
      "range": {
        "startLine": 50,
        "startChar": 45,
        "endLine": 50,
        "endChar": 56
      },
      "revId": "71ec571975d5b2942d643a2b9dcd07ec64f63886",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "665f7a64_915c5f4c",
        "filename": "base/trace_event/heap_profiler_allocation_register_posix.cc",
        "patchSetId": 3
      },
      "lineNbr": 80,
      "author": {
        "id": 1001629
      },
      "writtenOn": "2017-06-22T21:34:09Z",
      "side": 1,
      "message": "Do you need to vmar_destroy() too after this?\n\nOh, no, you mx_handle_close() vmar above, nvm.",
      "range": {
        "startLine": 80,
        "startChar": 10,
        "endLine": 80,
        "endChar": 19
      },
      "revId": "71ec571975d5b2942d643a2b9dcd07ec64f63886",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "77181df4_3cade273",
        "filename": "base/trace_event/heap_profiler_allocation_register_posix.cc",
        "patchSetId": 3
      },
      "lineNbr": 80,
      "author": {
        "id": 1144260
      },
      "writtenOn": "2017-06-22T21:52:37Z",
      "side": 1,
      "message": "Yeah, I was a little unclear on that too. Based on https://fuchsia.googlesource.com/magenta/+/master/docs/syscalls/vmar_unmap.md I think the things are getting destroy\u0027d that should be getting destroyed.",
      "parentUuid": "665f7a64_915c5f4c",
      "range": {
        "startLine": 80,
        "startChar": 10,
        "endLine": 80,
        "endChar": 19
      },
      "revId": "71ec571975d5b2942d643a2b9dcd07ec64f63886",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "035c0059_e6f115e9",
        "filename": "base/trace_event/heap_profiler_allocation_register_posix.cc",
        "patchSetId": 3
      },
      "lineNbr": 80,
      "author": {
        "id": 1156379
      },
      "writtenOn": "2017-06-22T22:50:09Z",
      "side": 1,
      "message": "mx_handle_close() and mx_vmar_destroy() have different functions here.  Any live VMAR has a reference held by the address space, so closing all handles will not get rid of it.  mx_vmar_destroy() is a request to transition the VMAR to its dead state (i.e. stop impacting the address space mappings).  As you responded, vmar_unmap as used will handle the destroy for you",
      "parentUuid": "77181df4_3cade273",
      "range": {
        "startLine": 80,
        "startChar": 10,
        "endLine": 80,
        "endChar": 19
      },
      "revId": "71ec571975d5b2942d643a2b9dcd07ec64f63886",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}