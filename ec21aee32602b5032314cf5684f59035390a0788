{
  "comments": [
    {
      "key": {
        "uuid": "cf992374_f3d561db",
        "filename": "build/config/c++/c++.gni",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 1003232
      },
      "writtenOn": "2017-07-28T18:28:19Z",
      "side": 1,
      "message": "This phrasing is awkward and isn\u0027t even really accurate, since we have main waterfall builds for CrOS and Cast where this is false, right?\n\nI would probably change this to something like \"not using a custom libc++ is only supported if your configuration is built on the main waterfall.\"",
      "revId": "ec21aee32602b5032314cf5684f59035390a0788",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f8253e93_50fbfc69",
        "filename": "build/config/c++/c++.gni",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 1001629
      },
      "writtenOn": "2017-07-28T18:33:46Z",
      "side": 1,
      "message": "This isn\u0027t false for cast as far as I know. (See discussion on https://chromium-review.googlesource.com/#/c/587305/ -- this comment is meant to discourage changes like that one and like https://chromium-review.googlesource.com/c/583635/ -- the discussion for the latter was off gerrit, but it\u0027s since been reverted too). It\u0027s true simplechrome, but that does use its own custom c++ stdlib: It doesn\u0027t use the system libstdc++, which means it can be updated independent of all the bots, and it also currently uses something newer than 4.8.\n\nI think we can remove the `(!is_chromecast || is_cast_desktop_build)` bit eventually, and the simplechrome bots can explicitly set this to false when they do all their toolchain overrides, and then we can remove the !is_chromeos branch too.\n\nSo I\u0027d like to keep the contents of the comment. Happy to reword it to improve the phrasing, though :-)",
      "parentUuid": "cf992374_f3d561db",
      "revId": "ec21aee32602b5032314cf5684f59035390a0788",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "390264cf_eebf296e",
        "filename": "build/config/c++/c++.gni",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 1003232
      },
      "writtenOn": "2017-07-28T18:47:55Z",
      "side": 1,
      "message": "I think you lost me here. If (is_linux \u0026\u0026 is_chromecast) then, as written below, use_custom_libcxx will be false, right? Do you mean that it won\u0027t be false when we change this to remove the bit you want to remove? Also, what about Android (where this is also false, right)?\n\nSeparately, if the point is more that we want to be moving to libc++ where we can, maybe this is better phrased as \"TODO(crbug.com/XYZ): Move all non-Mac/iOS bots to libc++ and make stdlibc++ self-supported\" or something like that? Presumably win clang will also be libc++?",
      "parentUuid": "f8253e93_50fbfc69",
      "revId": "ec21aee32602b5032314cf5684f59035390a0788",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6766df81_c9d9060d",
        "filename": "build/config/c++/c++.gni",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 1001629
      },
      "writtenOn": "2017-07-28T19:01:18Z",
      "side": 1,
      "message": "It\u0027s `(!is_chromecast || is_cast_desktop_build)` and I think is_cast_desktop_build is true on all our bots.\n\nIt\u0027s true that this is set to false in android builds, but for android we use the libc++ from the NDK, not the system libstdc++. (And https://crbug.com/747675 tracks using use_custom_libcxx on Android too.) Now that I wrote this, I\u0027m not sure how things work out for the host part of an android build -- but I think is_linux is true in the host part.\n\nwin/clang will use the MSVC stdlib for the time being. We could evaluate libc++, but we haven\u0027t looked at that at all yet. And the MSVC stdlib is pretty good actually, and, crucially, it\u0027s also hermetic and we can update without having to update bots.\n\nWhat I want to say here is \"if you\u0027re on posix (but not mac or ios), and you set this to false, you\u0027re on your own\". But you\u0027re right, this does contradict the Android setup, at least for now.\n\nMaybe: \"For main waterfall bots, this may only be set to false for configurations that by other means link against a hermetic C++ standard library either statically, or can update the whole system\u0027s C++ standard library (chromeos)\" That\u0027s a bit more precise (but only-mostly matches mac and ios) but it\u0027s also harder to understand.\n\n\"Don\u0027t check in changes that set this to false for more platforms; doing so is not supported.\" might work?",
      "parentUuid": "390264cf_eebf296e",
      "revId": "ec21aee32602b5032314cf5684f59035390a0788",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4d196ae8_cc6859fe",
        "filename": "build/config/c++/c++.gni",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 1003232
      },
      "writtenOn": "2017-07-28T19:06:11Z",
      "side": 1,
      "message": "Oh, you\u0027re right, I was misreading it as `(!is_chromecast || !is_cast_desktop_build)`. And, yeah, good point about win-clang, I can imagine that as long as we\u0027re linking to other libs in the Win SDK we probably have to use the MSVC stdlib as well.\n\nI like the sentence in the your last paragraph; that sounds fine.",
      "parentUuid": "6766df81_c9d9060d",
      "revId": "ec21aee32602b5032314cf5684f59035390a0788",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b52d9a9a_7d46fcde",
        "filename": "build/config/c++/c++.gni",
        "patchSetId": 1
      },
      "lineNbr": 13,
      "author": {
        "id": 1001629
      },
      "writtenOn": "2017-07-28T19:12:49Z",
      "side": 1,
      "message": "Ok, done.\n\n\u003e  I can imagine that as long as we\u0027re linking to other libs in the Win SDK we probably have to use the MSVC stdlib as well.\n\nI believe that\u0027s not true: The Win APIs generally and wisely don\u0027t pass C++ objects (std::string, std::vector) across library boundaries. Also, the MSVC stdlib expects you to statically link the c++ stdlib, so the c++ stdlib is different for different apps (usually just different versions of the MSVC c++ stdlib, but different though), so system libraries can\u0027t make assumptions about the c++ stdlib apps link with. (But this discussion is a bit out of scope for this CL anyhow :-) )",
      "parentUuid": "4d196ae8_cc6859fe",
      "revId": "ec21aee32602b5032314cf5684f59035390a0788",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}