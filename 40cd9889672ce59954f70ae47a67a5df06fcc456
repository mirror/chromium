{
  "comments": [
    {
      "key": {
        "uuid": "6a322cb6_422eb0a0",
        "filename": "content/browser/loader/cross_site_document_resource_handler.cc",
        "patchSetId": 4
      },
      "lineNbr": 239,
      "author": {
        "id": 1130134
      },
      "writtenOn": "2017-12-20T17:59:10Z",
      "side": 1,
      "message": "nit:s/this/this is/",
      "range": {
        "startLine": 239,
        "startChar": 50,
        "endLine": 239,
        "endChar": 55
      },
      "revId": "40cd9889672ce59954f70ae47a67a5df06fcc456",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "db140362_3ce215cb",
        "filename": "content/browser/loader/cross_site_document_resource_handler.cc",
        "patchSetId": 4
      },
      "lineNbr": 239,
      "author": {
        "id": 1002169
      },
      "writtenOn": "2017-12-20T21:36:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6a322cb6_422eb0a0",
      "range": {
        "startLine": 239,
        "startChar": 50,
        "endLine": 239,
        "endChar": 55
      },
      "revId": "40cd9889672ce59954f70ae47a67a5df06fcc456",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7d0447da_fea1fe19",
        "filename": "content/browser/loader/cross_site_document_resource_handler.cc",
        "patchSetId": 4
      },
      "lineNbr": 241,
      "author": {
        "id": 1130134
      },
      "writtenOn": "2017-12-20T17:59:10Z",
      "side": 1,
      "message": "Feel free to ignore this comment.\n\nTook me a while to understand this, but I think I see that this is still true, because of the changes you made below, when setting |needs_sniffing_| at the end of CrossSiteDocumentResourceHandler::ShouldBlockBasedOnHeaders.",
      "range": {
        "startLine": 240,
        "startChar": 54,
        "endLine": 241,
        "endChar": 28
      },
      "revId": "40cd9889672ce59954f70ae47a67a5df06fcc456",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fca1a562_ced9ec68",
        "filename": "content/browser/loader/cross_site_document_resource_handler.cc",
        "patchSetId": 4
      },
      "lineNbr": 274,
      "author": {
        "id": 1130134
      },
      "writtenOn": "2017-12-20T17:59:10Z",
      "side": 1,
      "message": "This is subtle - it took me a while to understand the interaction of the 2 topmost if statements/conditions.  Can we have a comment above line 274 saying something like: If CROSS_SITE_DOCUMENT_MIME_TYPE_OTHERS response didn\u0027t include a parser breaker, then do not block.",
      "range": {
        "startLine": 274,
        "startChar": 8,
        "endLine": 274,
        "endChar": 63
      },
      "revId": "40cd9889672ce59954f70ae47a67a5df06fcc456",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1b4fc98b_9cac886e",
        "filename": "content/browser/loader/cross_site_document_resource_handler.cc",
        "patchSetId": 4
      },
      "lineNbr": 274,
      "author": {
        "id": 1002169
      },
      "writtenOn": "2017-12-20T21:36:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fca1a562_ced9ec68",
      "range": {
        "startLine": 274,
        "startChar": 8,
        "endLine": 274,
        "endChar": 63
      },
      "revId": "40cd9889672ce59954f70ae47a67a5df06fcc456",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d52c427d_472af1a6",
        "filename": "content/browser/loader/cross_site_document_resource_handler.cc",
        "patchSetId": 4
      },
      "lineNbr": 352,
      "author": {
        "id": 1130134
      },
      "writtenOn": "2017-12-20T17:59:10Z",
      "side": 1,
      "message": "nit: I wonder if it might be desirable to change this to CROSS_SITE_DOCUMENT_MIME_TYPE_MAX.  This way (if there is no \"default\" case) the compiler will warn if a new enum value is added, without adding a corresponding case here.  Not sure about it - feel free to do what you feel is best here.",
      "range": {
        "startLine": 352,
        "startChar": 8,
        "endLine": 352,
        "endChar": 15
      },
      "revId": "40cd9889672ce59954f70ae47a67a5df06fcc456",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b8657f38_135ef904",
        "filename": "content/browser/loader/cross_site_document_resource_handler.cc",
        "patchSetId": 4
      },
      "lineNbr": 352,
      "author": {
        "id": 1002169
      },
      "writtenOn": "2017-12-20T21:36:28Z",
      "side": 1,
      "message": "I\u0027m leaving it as-is.",
      "parentUuid": "d52c427d_472af1a6",
      "range": {
        "startLine": 352,
        "startChar": 8,
        "endLine": 352,
        "endChar": 15
      },
      "revId": "40cd9889672ce59954f70ae47a67a5df06fcc456",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "37cda35d_2d9b3d2a",
        "filename": "content/browser/loader/cross_site_document_resource_handler_unittest.cc",
        "patchSetId": 4
      },
      "lineNbr": 362,
      "author": {
        "id": 1130134
      },
      "writtenOn": "2017-12-20T18:19:25Z",
      "side": 1,
      "message": "Would it make sense to add another test, for CROSS_SITE_DOCUMENT_MIME_TYPE_OTHERS + has-parser-breaker-all-json + CORS \u003d not blocked?  AFAICT there is no such test currently.",
      "range": {
        "startLine": 362,
        "startChar": 8,
        "endLine": 362,
        "endChar": 27
      },
      "revId": "40cd9889672ce59954f70ae47a67a5df06fcc456",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1ffa5834_db66c5ee",
        "filename": "content/browser/loader/cross_site_document_resource_handler_unittest.cc",
        "patchSetId": 4
      },
      "lineNbr": 362,
      "author": {
        "id": 1002169
      },
      "writtenOn": "2017-12-20T21:36:28Z",
      "side": 1,
      "message": "Great idea. Done.",
      "parentUuid": "37cda35d_2d9b3d2a",
      "range": {
        "startLine": 362,
        "startChar": 8,
        "endLine": 362,
        "endChar": 27
      },
      "revId": "40cd9889672ce59954f70ae47a67a5df06fcc456",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8dc3de51_2e714efa",
        "filename": "content/browser/loader/cross_site_document_resource_handler_unittest.cc",
        "patchSetId": 4
      },
      "lineNbr": 368,
      "author": {
        "id": 1130134
      },
      "writtenOn": "2017-12-20T18:19:25Z",
      "side": 1,
      "message": "Great!  I wondered for a few seconds why this changed (as there is no explicit parser breaker here), before realizing that start of JSON also acts as a parser breaker.",
      "range": {
        "startLine": 368,
        "startChar": 8,
        "endLine": 368,
        "endChar": 24
      },
      "revId": "40cd9889672ce59954f70ae47a67a5df06fcc456",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d4738249_68672ccf",
        "filename": "content/browser/loader/cross_site_document_resource_handler_unittest.cc",
        "patchSetId": 4
      },
      "lineNbr": 368,
      "author": {
        "id": 1002169
      },
      "writtenOn": "2017-12-20T21:36:28Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "8dc3de51_2e714efa",
      "range": {
        "startLine": 368,
        "startChar": 8,
        "endLine": 368,
        "endChar": 24
      },
      "revId": "40cd9889672ce59954f70ae47a67a5df06fcc456",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0129e724_e6c2df2f",
        "filename": "content/browser/loader/cross_site_document_resource_handler_unittest.cc",
        "patchSetId": 4
      },
      "lineNbr": 802,
      "author": {
        "id": 1130134
      },
      "writtenOn": "2017-12-20T18:19:25Z",
      "side": 1,
      "message": "Nice test - covers stuff that wouldn\u0027t sniff as JSON",
      "range": {
        "startLine": 802,
        "startChar": 20,
        "endLine": 802,
        "endChar": 21
      },
      "revId": "40cd9889672ce59954f70ae47a67a5df06fcc456",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "21507e3a_3f0966d8",
        "filename": "content/browser/loader/cross_site_document_resource_handler_unittest.cc",
        "patchSetId": 4
      },
      "lineNbr": 802,
      "author": {
        "id": 1002169
      },
      "writtenOn": "2017-12-20T21:36:28Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "0129e724_e6c2df2f",
      "range": {
        "startLine": 802,
        "startChar": 20,
        "endLine": 802,
        "endChar": 21
      },
      "revId": "40cd9889672ce59954f70ae47a67a5df06fcc456",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1b3d9643_867c76d6",
        "filename": "content/common/cross_site_document_classifier.cc",
        "patchSetId": 4
      },
      "lineNbr": 238,
      "author": {
        "id": 1130134
      },
      "writtenOn": "2017-12-20T17:59:10Z",
      "side": 1,
      "message": "Is this part of the TODO obsolete after your CL?",
      "range": {
        "startLine": 238,
        "startChar": 5,
        "endLine": 238,
        "endChar": 63
      },
      "revId": "40cd9889672ce59954f70ae47a67a5df06fcc456",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7e81f0dd_d28fbfbe",
        "filename": "content/common/cross_site_document_classifier.cc",
        "patchSetId": 4
      },
      "lineNbr": 238,
      "author": {
        "id": 1002169
      },
      "writtenOn": "2017-12-20T21:36:28Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1b3d9643_867c76d6",
      "range": {
        "startLine": 238,
        "startChar": 5,
        "endLine": 238,
        "endChar": 63
      },
      "revId": "40cd9889672ce59954f70ae47a67a5df06fcc456",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "037580ee_f5b519f9",
        "filename": "content/common/cross_site_document_classifier.cc",
        "patchSetId": 4
      },
      "lineNbr": 295,
      "author": {
        "id": 1130134
      },
      "writtenOn": "2017-12-20T17:59:10Z",
      "side": 1,
      "message": "Were there other prefixes we\u0027ve considered and rejected?  If yes, we could document them in a comment here maybe?\n\nExample 1: I see [1] that ColdFusion by default prefixes with \"//\", but I am not sure if we would want to include this prefix (it is not-specific and can result in blocking binary data that happens by chance to include \"//\" as the first 2 bytes of the response;  I am not sure if this defense is robust [e.g. if part of the json response can still be intercepted by some javascript tricks - see https://bugs.dojotoolkit.org/ticket/6380]).\n\nExample 2: I see [2] that Spring Java framework (or its fork?) use \"{} \u0026\u0026 \".  OTOH, some docs [3] for the Spring Java framework indicate that one of prefixes already on the list above is used: \")]}\u0027,\" (note lack of \"\\n\").\n\nExample 3: I see [4] that Apache Struts uses \"{}\u0026\u0026\" (almost the same as previous example but without the whitespace).\n\n[1] https://www.petefreitag.com/item/720.cfm\n[2] https://github.com/stormpath/spring-mvc-rest-exhandler/blob/master/example/src/main/java/com/stormpath/blog/spring/http/converter/json/DefaultJacksonHttpMessageConverter.java#L105\n[3] https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/http/converter/json/MappingJackson2HttpMessageConverter.html\n[4] http://struts.apache.org/plugins/json/#wrapping and http://struts.apache.org/plugins/json/#prefix",
      "range": {
        "startLine": 295,
        "startChar": 27,
        "endLine": 295,
        "endChar": 50
      },
      "revId": "40cd9889672ce59954f70ae47a67a5df06fcc456",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "edbc5519_ee2f002c",
        "filename": "content/common/cross_site_document_classifier.cc",
        "patchSetId": 4
      },
      "lineNbr": 295,
      "author": {
        "id": 1002169
      },
      "writtenOn": "2017-12-20T21:36:28Z",
      "side": 1,
      "message": "Thanks for the \"{}\u0026\u0026\" link. I\u0027ve included those too.\n\nJS comment syntax is not really a viable approach, since comments can be terminated. These prefixes need to provide a stronger guarantee: their presence must render the rest of the file moot when interpreted as a script.\n\nThe list as currently populated is all the patterns I\u0027ve found manually. I\u0027d love to include more patterns, assuming they meet the guarantee above.\n\nI\u0027ve added a comment to this effect.",
      "parentUuid": "037580ee_f5b519f9",
      "range": {
        "startLine": 295,
        "startChar": 27,
        "endLine": 295,
        "endChar": 50
      },
      "revId": "40cd9889672ce59954f70ae47a67a5df06fcc456",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c7c8f531_49e0416e",
        "filename": "content/common/cross_site_document_classifier.cc",
        "patchSetId": 4
      },
      "lineNbr": 300,
      "author": {
        "id": 1130134
      },
      "writtenOn": "2017-12-20T17:59:10Z",
      "side": 1,
      "message": "How important is the \"\\n\" character at the end?  Do we want to include it to minimize the chance of this particular prefix occurring by chance in a binary data that is not really JSON?  If yes, would it make sense to document this in a comment (e.g. saying that we try to make the prefixes as long as practically possible to minimize the chance of finding the prefix in random, non-JSON, binary data).\n\nI note that docs for some frameworks [1] mention the pattern from line 297, but *without* the \u0027\\n\u0027 character.  I also note that we don\u0027t have \u0027\\n\u0027 character in the patterns below.\n\n[1] https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/http/converter/json/MappingJackson2HttpMessageConverter.html",
      "range": {
        "startLine": 300,
        "startChar": 23,
        "endLine": 300,
        "endChar": 25
      },
      "revId": "40cd9889672ce59954f70ae47a67a5df06fcc456",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b4b048a6_57b438a7",
        "filename": "content/common/cross_site_document_classifier.cc",
        "patchSetId": 4
      },
      "lineNbr": 300,
      "author": {
        "id": 1002169
      },
      "writtenOn": "2017-12-20T21:36:28Z",
      "side": 1,
      "message": "Regarding including the newline or not: I think the newline character is what provides parser-breaking value to the single-quote character: the idea is that the lexer ought to barf on a newline character inside a string literal?\n\nHowever, I\u0027m comfortable sniffing for just the four-character sequence, since it seems distinctive enough, and it seems like there\u0027s evidence that the \\n has gotten dropped in at least one implementation (the fact that Google\u0027s internal JSON best-practices doc explicitly calls out \"don\u0027t forget the newline\", suggests that forgetting the newline is something that happens).\n\nAs a result, the \"angular\" and \"google\" cases merge (since they share a common prefix). I\u0027ve also linked to the Spring framework\u0027s use of this pattern.",
      "parentUuid": "c7c8f531_49e0416e",
      "range": {
        "startLine": 300,
        "startChar": 23,
        "endLine": 300,
        "endChar": 25
      },
      "revId": "40cd9889672ce59954f70ae47a67a5df06fcc456",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}