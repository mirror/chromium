{
  "comments": [
    {
      "key": {
        "uuid": "f09d6c5f_c19f2d7f",
        "filename": "PRESUBMIT.py",
        "patchSetId": 4
      },
      "lineNbr": 1588,
      "author": {
        "id": 1002854
      },
      "writtenOn": "2017-05-31T19:31:27Z",
      "side": 1,
      "message": "How is this different from exclude_paths, immediately below, which also matches using fnmatch? It seems like it only requires adding */ to the beginning of these patterns.",
      "revId": "0235032ea9d9b7a0a3b12f38b4bb60a1e8b7fcba",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a21aaba9_b1db8239",
        "filename": "PRESUBMIT.py",
        "patchSetId": 4
      },
      "lineNbr": 1588,
      "author": {
        "id": 1002808
      },
      "writtenOn": "2017-06-02T00:00:23Z",
      "side": 1,
      "message": "Ah, it\u0027s not. In fact the */ prefix isn\u0027t even needed, I just hadn\u0027t bothered to try using exclude_file_patterns first because I assumed it was incorrect. Fixed.",
      "parentUuid": "f09d6c5f_c19f2d7f",
      "revId": "0235032ea9d9b7a0a3b12f38b4bb60a1e8b7fcba",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2ea3817d_623216bb",
        "filename": "content/test/data/OWNERS",
        "patchSetId": 4
      },
      "lineNbr": 1,
      "author": {
        "id": 1002854
      },
      "writtenOn": "2017-05-31T19:31:27Z",
      "side": 1,
      "message": "What\u0027s changing here?",
      "revId": "0235032ea9d9b7a0a3b12f38b4bb60a1e8b7fcba",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "791072b2_43004592",
        "filename": "content/test/data/OWNERS",
        "patchSetId": 4
      },
      "lineNbr": 1,
      "author": {
        "id": 1002808
      },
      "writtenOn": "2017-06-02T00:00:23Z",
      "side": 1,
      "message": "Hmm nothing. Reverted. I was going to add some other rules but I fixed the presbumit instead.",
      "parentUuid": "2ea3817d_623216bb",
      "revId": "0235032ea9d9b7a0a3b12f38b4bb60a1e8b7fcba",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3a4e9781_744a3331",
        "filename": "third_party/WebKit/LayoutTests/mojo/bind-interface.html",
        "patchSetId": 4
      },
      "lineNbr": 26,
      "author": {
        "id": 1002854
      },
      "writtenOn": "2017-05-31T19:31:27Z",
      "side": 1,
      "message": "This catch will catch the assert_unreached exception. If you keep in promise \"then\" style, you probably want to use the two-argument then:\n\nreturn helper.reverse(\"doesn\u0027t matter\").then(\n    reply \u003d\u003e assert_unreached(\"request should not succeed\"),\n    e \u003d\u003e {});",
      "revId": "0235032ea9d9b7a0a3b12f38b4bb60a1e8b7fcba",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c5f8256c_dac8c54a",
        "filename": "third_party/WebKit/LayoutTests/mojo/bind-interface.html",
        "patchSetId": 4
      },
      "lineNbr": 26,
      "author": {
        "id": 1002808
      },
      "writtenOn": "2017-06-02T00:00:23Z",
      "side": 1,
      "message": "Thanks, makes sense. Done",
      "parentUuid": "3a4e9781_744a3331",
      "revId": "0235032ea9d9b7a0a3b12f38b4bb60a1e8b7fcba",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "99442c86_c5bd8c0c",
        "filename": "third_party/WebKit/LayoutTests/mojo/bind-interface.html",
        "patchSetId": 4
      },
      "lineNbr": 105,
      "author": {
        "id": 1002854
      },
      "writtenOn": "2017-05-31T19:31:27Z",
      "side": 1,
      "message": "This isn\u0027t required; promise_test will pass the result to Promise.resolve already, so if there\u0027s nothing asynchronous you can just use the default return. (Relatedly, this test could be a plain old \"test\" rather than a \"promise_test\", not that it matters.)",
      "revId": "0235032ea9d9b7a0a3b12f38b4bb60a1e8b7fcba",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "40f3a0e4_99775b90",
        "filename": "third_party/WebKit/LayoutTests/mojo/bind-interface.html",
        "patchSetId": 4
      },
      "lineNbr": 105,
      "author": {
        "id": 1002808
      },
      "writtenOn": "2017-06-02T00:00:23Z",
      "side": 1,
      "message": "Done (made a simple \"test\")",
      "parentUuid": "99442c86_c5bd8c0c",
      "revId": "0235032ea9d9b7a0a3b12f38b4bb60a1e8b7fcba",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "310ffe7a_e88a6727",
        "filename": "third_party/WebKit/Source/core/frame/LocalFrame.h",
        "patchSetId": 4
      },
      "lineNbr": 226,
      "author": {
        "id": 1002854
      },
      "writtenOn": "2017-05-31T19:31:27Z",
      "side": 1,
      "message": "Is LocalFrameClient::GetFrameInterfaceProvider better? If so, why?",
      "revId": "0235032ea9d9b7a0a3b12f38b4bb60a1e8b7fcba",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "98c6e72d_7957d993",
        "filename": "third_party/WebKit/Source/core/frame/LocalFrame.h",
        "patchSetId": 4
      },
      "lineNbr": 226,
      "author": {
        "id": 1002808
      },
      "writtenOn": "2017-06-02T00:00:23Z",
      "side": 1,
      "message": "Well, the API isn\u0027t necessarily better, but it seems more direct to have the InterfaceProvider* be exposed directly by the client impl if the client impl already owns it anyway.\n\nThis avoids having to stick a separate owned object on LocalFrame which forwards to the client\u0027s, or (once blink::InterfaceProvider is gone) having an extra method on WebFrame which just forwards to a method on the client.\n\nUnless you just meant that the documentation should include an explanation of why one is preferred over the other, but I didn\u0027t think that was worth including. \"Just do this instead of that, because that is deprecated\" seemed sufficient. WDYT?",
      "parentUuid": "310ffe7a_e88a6727",
      "revId": "0235032ea9d9b7a0a3b12f38b4bb60a1e8b7fcba",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "14ca7ea2_3d69cae7",
        "filename": "third_party/WebKit/Source/core/frame/LocalFrame.h",
        "patchSetId": 4
      },
      "lineNbr": 226,
      "author": {
        "id": 1002854
      },
      "writtenOn": "2017-06-02T15:36:27Z",
      "side": 1,
      "message": "OK, it just wasn\u0027t clear to me why this one was being deprecated, but that sounds okay (though we might still want to expose it here later on to avoid having to write \"frame-\u003eClient()-\u003eGetInterfaceProvider()\" each time).\n\nIIUC it\u0027s not a drop-in replacement, because content::BlinkInterfaceProviderImpl::GetInterface manages jumping to the right thread, which service_manager::InterfaceProvider does not, but that\u0027s manageable.",
      "parentUuid": "98c6e72d_7957d993",
      "revId": "0235032ea9d9b7a0a3b12f38b4bb60a1e8b7fcba",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "79ee656f_4e1fbb35",
        "filename": "third_party/WebKit/Source/core/mojo/DEPS",
        "patchSetId": 4
      },
      "lineNbr": 3,
      "author": {
        "id": 1002854
      },
      "writtenOn": "2017-05-31T19:31:27Z",
      "side": 1,
      "message": "I\u0027d like to see us allow this here, but we\u0027ve so far been reticent to do so, so if you do want this it should probably be run by Kentaro (who\u0027s been doing much of the Onion Soup 2.0 planning).",
      "revId": "0235032ea9d9b7a0a3b12f38b4bb60a1e8b7fcba",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5cf374cd_8db1341d",
        "filename": "third_party/WebKit/Source/core/mojo/DEPS",
        "patchSetId": 4
      },
      "lineNbr": 3,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2017-06-01T02:29:04Z",
      "side": 1,
      "message": "I\u0027m fine with allowing this. We have already allowed services/service_manager/public/cpp/connector.h in Source/DEPS.\n\nJust help me understand: services/service_manager/public/cpp/interface_provider.h was not allowed in Blink before this patch. What were other features doing when they want to bind themselves with the interface provided by the service manager? I\u0027m just curious why we want to start using the file *now*.",
      "parentUuid": "79ee656f_4e1fbb35",
      "revId": "0235032ea9d9b7a0a3b12f38b4bb60a1e8b7fcba",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "51a9df5d_0c84e27d",
        "filename": "third_party/WebKit/Source/core/mojo/DEPS",
        "patchSetId": 4
      },
      "lineNbr": 3,
      "author": {
        "id": 1002808
      },
      "writtenOn": "2017-06-01T02:34:40Z",
      "side": 1,
      "message": "Thanks for the feedback! Previously we introduced a Blink-only InterfaceProvider type and had content implement this by forwarding requests to the real one. This was done due to blanket restrictions against such outside dependencies at the time.",
      "parentUuid": "5cf374cd_8db1341d",
      "tag": "mailMessageId\u003d\u003cCA+apAgHZKe-ZsjzfMiSPoedc9+SUBrdC52M2nZrk2WpGeLWkuw@mail.gmail.com\u003e",
      "revId": "0235032ea9d9b7a0a3b12f38b4bb60a1e8b7fcba",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2090bc39_0367ed92",
        "filename": "third_party/WebKit/Source/core/mojo/DEPS",
        "patchSetId": 4
      },
      "lineNbr": 3,
      "author": {
        "id": 1115916
      },
      "writtenOn": "2017-06-01T02:41:54Z",
      "side": 1,
      "message": "Makes sense.\n\nThe current Blink is heavily using blink::InterfaceProvider via Platform::Current()-\u003eGetInterfaceProvider() etc. Are you planning to replace them with the real InterfaceProvider and deprecate blink::InterfaceProvider? (That totally sounds reasonable to me.)",
      "parentUuid": "51a9df5d_0c84e27d",
      "revId": "0235032ea9d9b7a0a3b12f38b4bb60a1e8b7fcba",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b4402204_39c5f4e1",
        "filename": "third_party/WebKit/Source/core/mojo/DEPS",
        "patchSetId": 4
      },
      "lineNbr": 3,
      "author": {
        "id": 1002808
      },
      "writtenOn": "2017-06-02T00:00:23Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "2090bc39_0367ed92",
      "revId": "0235032ea9d9b7a0a3b12f38b4bb60a1e8b7fcba",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ff48e4ce_e502db87",
        "filename": "third_party/WebKit/Source/core/mojo/MojoHandle.cpp",
        "patchSetId": 4
      },
      "lineNbr": 36,
      "author": {
        "id": 1002854
      },
      "writtenOn": "2017-05-31T19:31:27Z",
      "side": 1,
      "message": "Does mojo::ScopedHandle guarantee that moving from it clears the handle? The comments allude to it by making reference to std::unique_ptr (which does guarantee that), but this isn\u0027t a general guarantee of move-construction.\n\nIf ScopedHandle doesn\u0027t have that as part of its contract, explicitly reset handle_ after moving from it.",
      "revId": "0235032ea9d9b7a0a3b12f38b4bb60a1e8b7fcba",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2016118e_a65e10c8",
        "filename": "third_party/WebKit/Source/core/mojo/MojoHandle.cpp",
        "patchSetId": 4
      },
      "lineNbr": 36,
      "author": {
        "id": 1002808
      },
      "writtenOn": "2017-06-02T00:00:23Z",
      "side": 1,
      "message": "Docs have been updated in a separate CL to clarify that ScopedHandle does ensure a moved-from handle is reset and no longer valid.",
      "parentUuid": "ff48e4ce_e502db87",
      "revId": "0235032ea9d9b7a0a3b12f38b4bb60a1e8b7fcba",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "489d3158_508b86c7",
        "filename": "third_party/WebKit/Source/core/mojo/MojoInterfaceInterceptor.h",
        "patchSetId": 4
      },
      "lineNbr": 22,
      "author": {
        "id": 1002854
      },
      "writtenOn": "2017-05-31T19:31:27Z",
      "side": 1,
      "message": "This and the other new class could use class comments that explain what they do and what they are for. It might also be worth segregating the test-only ones into a core/mojo/testing/ or similar.",
      "revId": "0235032ea9d9b7a0a3b12f38b4bb60a1e8b7fcba",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "29fc6802_171864e1",
        "filename": "third_party/WebKit/Source/core/mojo/MojoInterfaceInterceptor.h",
        "patchSetId": 4
      },
      "lineNbr": 22,
      "author": {
        "id": 1002808
      },
      "writtenOn": "2017-06-02T00:00:23Z",
      "side": 1,
      "message": "Done. Class comments added and IDL+sources moved to mojo/testing.",
      "parentUuid": "489d3158_508b86c7",
      "revId": "0235032ea9d9b7a0a3b12f38b4bb60a1e8b7fcba",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6513d688_6b93b211",
        "filename": "third_party/WebKit/Source/core/mojo/MojoInterfaceInterceptor.idl",
        "patchSetId": 4
      },
      "lineNbr": 1,
      "author": {
        "id": 1002854
      },
      "writtenOn": "2017-05-31T19:31:27Z",
      "side": 1,
      "message": "Eh, this is an idiomatic approach. If you want something slightly shorter but slightly less idiomatic, this would work:\n\ncallback MojoInterfaceInterceptCallback \u003d void(MojoHandle handle);\n[ActiveScriptWrappable, Constructor(DOMString interfaceName, MojoInterfaceInterceptCallback callback), ...] interface MojoInterfaceInterceptor {\n  [RaisesException] void start();\n  void stop();\n};\n\nor maybe:\n\ncallback MojoInterfaceInterceptCallback \u003d void(MojoHandle handle);\ninterface Internals {\n  [RaisesException] void setInterceptInterface(DOMString interfaceName, MojoInterfaceInterceptCallback callback);\n  void clearInterceptInterface(DOMString interfaceName);\n};\n\nWhich avoids a little of the event target boilerplate, but not much (and gives you a little bit of different boilerplate instead).",
      "revId": "0235032ea9d9b7a0a3b12f38b4bb60a1e8b7fcba",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2b3936b1_92855410",
        "filename": "third_party/WebKit/Source/core/mojo/MojoInterfaceInterceptor.idl",
        "patchSetId": 4
      },
      "lineNbr": 1,
      "author": {
        "id": 1002808
      },
      "writtenOn": "2017-06-02T00:00:23Z",
      "side": 1,
      "message": "OK. I\u0027m not too worried about it. In fact I originally started with exactly the latter approach modulo naming, and ended up with an EventTarget because it felt more correct. I\u0027ll stick with the current approach.",
      "parentUuid": "6513d688_6b93b211",
      "revId": "0235032ea9d9b7a0a3b12f38b4bb60a1e8b7fcba",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1d62ec10_8e449b24",
        "filename": "third_party/WebKit/Source/core/mojo/MojoInterfaceInterceptor.idl",
        "patchSetId": 4
      },
      "lineNbr": 1,
      "author": {
        "id": 1002854
      },
      "writtenOn": "2017-06-02T15:36:27Z",
      "side": 1,
      "message": "Yup, current approach seems fine to me.",
      "parentUuid": "2b3936b1_92855410",
      "revId": "0235032ea9d9b7a0a3b12f38b4bb60a1e8b7fcba",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4e62b39f_e0dbd8a0",
        "filename": "third_party/WebKit/Source/core/mojo/MojoInterfaceRequestEvent.idl",
        "patchSetId": 4
      },
      "lineNbr": 7,
      "author": {
        "id": 1002854
      },
      "writtenOn": "2017-05-31T19:31:27Z",
      "side": 1,
      "message": "Look at how Internals.{cpp,h,idl} work: we don\u0027t even compile them into chrome (but do into content_shell). Still protecting it this way seems reasonable (analogous to how we require --expose-internals-for-testing or --run-layout-test to expose Internals).",
      "revId": "0235032ea9d9b7a0a3b12f38b4bb60a1e8b7fcba",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "675b9041_e41b4e1d",
        "filename": "third_party/WebKit/Source/core/mojo/MojoInterfaceRequestEvent.idl",
        "patchSetId": 4
      },
      "lineNbr": 7,
      "author": {
        "id": 1002808
      },
      "writtenOn": "2017-06-02T00:00:23Z",
      "side": 1,
      "message": "I\u0027m kind of confused by this. It looks like we don\u0027t generated Internals.cpp/h from the IDL at build time but rather they\u0027re committed sources in the repo?",
      "parentUuid": "4e62b39f_e0dbd8a0",
      "revId": "0235032ea9d9b7a0a3b12f38b4bb60a1e8b7fcba",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "002a43d6_3875506a",
        "filename": "third_party/WebKit/Source/core/mojo/MojoInterfaceRequestEvent.idl",
        "patchSetId": 4
      },
      "lineNbr": 7,
      "author": {
        "id": 1002854
      },
      "writtenOn": "2017-06-02T15:36:27Z",
      "side": 1,
      "message": "I\u0027m not quite sure what you mean. Internals.cpp/h are ordinary C++ implementation classes, and V8Internals.cpp/h are auto-generated.\n\nThey\u0027re mostly special in that we only link them into test binaries (content_shell) but not Chrome. It seems like it should be reasonably straightforward to take the same approach here, so that this test-only code doesn\u0027t have to ship to users.",
      "parentUuid": "675b9041_e41b4e1d",
      "revId": "0235032ea9d9b7a0a3b12f38b4bb60a1e8b7fcba",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ed7cc903_be708574",
        "filename": "third_party/WebKit/public/web/WebFrameClient.h",
        "patchSetId": 4
      },
      "lineNbr": 186,
      "author": {
        "id": 1002854
      },
      "writtenOn": "2017-05-31T19:31:27Z",
      "side": 1,
      "message": "We do already have a blink::InterfaceProvider, which suffices for the production case, at least. It\u0027d probably be less controversial to expose TestApi via that rather than expose the underlying object (though I see we _do_ do that for Connector).\n\nIf you want to use service_manager::, we should probably loop in haraken@ to see if he\u0027s happy to let us do this. (Personally, I would like to move in this direction and only write wrappers when there\u0027s enough call sites for it to be worthwhile, but opinions vary.)",
      "revId": "0235032ea9d9b7a0a3b12f38b4bb60a1e8b7fcba",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ddee5e41_3a67d970",
        "filename": "third_party/WebKit/public/web/WebFrameClient.h",
        "patchSetId": 4
      },
      "lineNbr": 186,
      "author": {
        "id": 1002808
      },
      "writtenOn": "2017-06-02T00:00:23Z",
      "side": 1,
      "message": "As discussed with haraken@ already, it is preferable to expose the public service_manager API directly rather than implementing a nominal Blink-only wrapper around it. The goal is to (soon) remove blink::InterfaceProvider.",
      "parentUuid": "ed7cc903_be708574",
      "revId": "0235032ea9d9b7a0a3b12f38b4bb60a1e8b7fcba",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "30268510_aa71a1ef",
        "filename": "third_party/WebKit/public/web/WebFrameClient.h",
        "patchSetId": 4
      },
      "lineNbr": 186,
      "author": {
        "id": 1002854
      },
      "writtenOn": "2017-06-02T15:36:27Z",
      "side": 1,
      "message": "sgtm",
      "parentUuid": "ddee5e41_3a67d970",
      "revId": "0235032ea9d9b7a0a3b12f38b4bb60a1e8b7fcba",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}