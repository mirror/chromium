{
  "comments": [
    {
      "key": {
        "uuid": "05bd42fc_da53c2d7",
        "filename": "chrome/browser/resource_coordinator/tab_manager_grc_tab_signal_observer.cc",
        "patchSetId": 9
      },
      "lineNbr": 61,
      "author": {
        "id": 1112850
      },
      "writtenOn": "2017-07-27T20:07:02Z",
      "side": 1,
      "message": "You can use ContainsKey from base/stl_util.h.",
      "revId": "689ac90785e8fe9d612e464a7a6f2b2144266e63",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a6498415_2c2f2a1a",
        "filename": "chrome/browser/resource_coordinator/tab_manager_grc_tab_signal_observer.cc",
        "patchSetId": 9
      },
      "lineNbr": 61,
      "author": {
        "id": 1211219
      },
      "writtenOn": "2017-07-28T20:15:54Z",
      "side": 1,
      "message": "using find that returns an iterator is just one time get from map, but if we use ContainsKey then it will be a find operation from map in ContainsKey, and then another [] operation below in order to get the value.",
      "parentUuid": "05bd42fc_da53c2d7",
      "revId": "689ac90785e8fe9d612e464a7a6f2b2144266e63",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3506ce6e_72808776",
        "filename": "chrome/browser/resource_coordinator/tab_manager_grc_tab_signal_observer.cc",
        "patchSetId": 9
      },
      "lineNbr": 61,
      "author": {
        "id": 1112850
      },
      "writtenOn": "2017-07-28T20:20:57Z",
      "side": 1,
      "message": "From the reviews I got for my own CLs, I think people prefer using ContainsKey for readability and don\u0027t care too much on the overhead of one more [] operator. I am not strongly preferring either way myself. Just a suggestion.",
      "parentUuid": "a6498415_2c2f2a1a",
      "revId": "689ac90785e8fe9d612e464a7a6f2b2144266e63",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3b9e3289_cbf76831",
        "filename": "services/resource_coordinator/coordination_unit/coordination_unit_impl.h",
        "patchSetId": 9
      },
      "lineNbr": 61,
      "author": {
        "id": 1112850
      },
      "writtenOn": "2017-07-27T20:07:02Z",
      "side": 1,
      "message": "We do not need to pass in any value. Whoever gets called can always find the value needed by traversing the graph.",
      "range": {
        "startLine": 61,
        "startChar": 6,
        "endLine": 61,
        "endChar": 55
      },
      "revId": "689ac90785e8fe9d612e464a7a6f2b2144266e63",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "093c8a7c_5846c68b",
        "filename": "services/resource_coordinator/coordination_unit/coordination_unit_impl.h",
        "patchSetId": 9
      },
      "lineNbr": 61,
      "author": {
        "id": 1211219
      },
      "writtenOn": "2017-07-27T21:24:50Z",
      "side": 1,
      "message": "If we don\u0027t need to look up information from other CUs, then we can avoid such traversal overhead by passing a value, right?",
      "parentUuid": "3b9e3289_cbf76831",
      "range": {
        "startLine": 61,
        "startChar": 6,
        "endLine": 61,
        "endChar": 55
      },
      "revId": "689ac90785e8fe9d612e464a7a6f2b2144266e63",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d72de860_2b6d264b",
        "filename": "services/resource_coordinator/coordination_unit/coordination_unit_impl.h",
        "patchSetId": 9
      },
      "lineNbr": 61,
      "author": {
        "id": 1112850
      },
      "writtenOn": "2017-07-28T20:23:53Z",
      "side": 1,
      "message": "Just saw this. Yes, we will have some traversal overhead. But I don\u0027t think that\u0027s a lot. I am mostly thinking about consistency on how to recalculate properties. It is just easier to follow when all properties are recalculated using the same way, instead of some using passed-in value and some other using traversal and ignore the default null value.",
      "parentUuid": "093c8a7c_5846c68b",
      "range": {
        "startLine": 61,
        "startChar": 6,
        "endLine": 61,
        "endChar": 55
      },
      "revId": "689ac90785e8fe9d612e464a7a6f2b2144266e63",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "48f0f1ef_a528c7d9",
        "filename": "services/resource_coordinator/coordination_unit/coordination_unit_impl.h",
        "patchSetId": 9
      },
      "lineNbr": 61,
      "author": {
        "id": 1112850
      },
      "writtenOn": "2017-07-28T21:14:00Z",
      "side": 1,
      "message": "\u003e I share your concern on consistency. Although, IMHO in general we should try to avoid runtime overhead when possible since, well, it\u0027s resource coordination :)\n\u003e \n\u003e My bikeshed suggestion would be, if we indeed need to combine information from multiple CUs, then let\u0027s have a method like CalculateEQT or something like that; if we will always use same value the process cu has, then just add an argument.\n\u003e \n\u003e I will leave it to you to decide.\n\nThe reason I don\u0027t care much about the perf overhead here is that GRC input/output path are mojo IPCs, which is much longer than doing a traversal.\n\nI thought more about this. I think I will insist on removing the passed-in value and have a CalculateEQT function. Think about the following case:\n- a tab has two frames, one main frame and one child frame\n- main frame belongs to process 1\n- child frame belongs to process 2\n\nNow both processes want to set EQT. Which process\u0027s EQT should be used? Maybe the max of the two? I don\u0027t have the answer here. But the question shows that it is not as simple as just using the same value. Forcing the TabCU to traverse the CU graph can also help people think about the relationship deeper.",
      "parentUuid": "d72de860_2b6d264b",
      "range": {
        "startLine": 61,
        "startChar": 6,
        "endLine": 61,
        "endChar": 55
      },
      "revId": "689ac90785e8fe9d612e464a7a6f2b2144266e63",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}