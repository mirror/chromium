{
  "comments": [
    {
      "key": {
        "uuid": "f55a7adf_0249db9e",
        "filename": "chrome/browser/prefs/browser_prefs.cc",
        "patchSetId": 6
      },
      "lineNbr": 467,
      "author": {
        "id": 1116027
      },
      "writtenOn": "2017-11-06T13:37:48Z",
      "side": 1,
      "message": "The Profile prefs should be registered in the factory:\n\n  void ConsentAuditorFactory::RegisterProfilePrefs(\n      user_prefs::PrefRegistrySyncable* registry) {\n    consent_auditor::ConsentAuditor::RegisterPrefs(registry);\n  }",
      "revId": "1e7526c0c9e491546b8bf81d37d6eb98fd009f9a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3e3924a8_0786ed6e",
        "filename": "chrome/browser/prefs/browser_prefs.cc",
        "patchSetId": 6
      },
      "lineNbr": 467,
      "author": {
        "id": 1118331
      },
      "writtenOn": "2017-11-08T12:55:47Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f55a7adf_0249db9e",
      "revId": "1e7526c0c9e491546b8bf81d37d6eb98fd009f9a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "35637cfc_ad3b873d",
        "filename": "components/consent_auditor/README.md",
        "patchSetId": 6
      },
      "lineNbr": 3,
      "author": {
        "id": 1183839
      },
      "writtenOn": "2017-11-06T16:15:17Z",
      "side": 1,
      "message": "They don\u0027t seem to be static anymore",
      "range": {
        "startLine": 3,
        "startChar": 46,
        "endLine": 3,
        "endChar": 62
      },
      "revId": "1e7526c0c9e491546b8bf81d37d6eb98fd009f9a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f0d5dddb_eba44f4e",
        "filename": "components/consent_auditor/README.md",
        "patchSetId": 6
      },
      "lineNbr": 3,
      "author": {
        "id": 1118331
      },
      "writtenOn": "2017-11-08T12:55:47Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "35637cfc_ad3b873d",
      "range": {
        "startLine": 3,
        "startChar": 46,
        "endLine": 3,
        "endChar": 62
      },
      "revId": "1e7526c0c9e491546b8bf81d37d6eb98fd009f9a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f95ce2a6_db7c7c50",
        "filename": "components/consent_auditor/README.md",
        "patchSetId": 6
      },
      "lineNbr": 9,
      "author": {
        "id": 1183839
      },
      "writtenOn": "2017-11-06T16:15:17Z",
      "side": 1,
      "message": "How would we access the consents a user has given? Do we need something like about:consents?",
      "revId": "1e7526c0c9e491546b8bf81d37d6eb98fd009f9a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "77068526_5b7a875d",
        "filename": "components/consent_auditor/README.md",
        "patchSetId": 6
      },
      "lineNbr": 9,
      "author": {
        "id": 1118331
      },
      "writtenOn": "2017-11-08T12:55:47Z",
      "side": 1,
      "message": "That\u0027s a great idea! But leaving that part as TBD :)",
      "parentUuid": "f95ce2a6_db7c7c50",
      "revId": "1e7526c0c9e491546b8bf81d37d6eb98fd009f9a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0679e04b_8fd740be",
        "filename": "components/consent_auditor/README.md",
        "patchSetId": 6
      },
      "lineNbr": 17,
      "author": {
        "id": 1183839
      },
      "writtenOn": "2017-11-06T16:15:17Z",
      "side": 1,
      "message": "Do we have consents for local features that are stored in syncable preferences?",
      "revId": "1e7526c0c9e491546b8bf81d37d6eb98fd009f9a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1e957db4_8d35c3db",
        "filename": "components/consent_auditor/README.md",
        "patchSetId": 6
      },
      "lineNbr": 17,
      "author": {
        "id": 1118331
      },
      "writtenOn": "2017-11-08T12:55:47Z",
      "side": 1,
      "message": "Good point! The ones that I\u0027m mostly interested in are UMA and SBER, and their preferences are not syncable, so we don\u0027t need it right now.\n\nIf we do need it eventually, that\u0027s going to be a bit messy. I\u0027ll clarify with ctanaka@.",
      "parentUuid": "0679e04b_8fd740be",
      "revId": "1e7526c0c9e491546b8bf81d37d6eb98fd009f9a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9305abe7_2daa66d0",
        "filename": "components/consent_auditor/consent_auditor.cc",
        "patchSetId": 6
      },
      "lineNbr": 28,
      "author": {
        "id": 1116027
      },
      "writtenOn": "2017-11-06T13:37:48Z",
      "side": 1,
      "message": "This appears to be unused. Remove?",
      "range": {
        "startLine": 28,
        "startChar": 35,
        "endLine": 28,
        "endChar": 54
      },
      "revId": "1e7526c0c9e491546b8bf81d37d6eb98fd009f9a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "31dfe56c_8510a60b",
        "filename": "components/consent_auditor/consent_auditor.cc",
        "patchSetId": 6
      },
      "lineNbr": 28,
      "author": {
        "id": 1118331
      },
      "writtenOn": "2017-11-08T12:55:47Z",
      "side": 1,
      "message": "Let me take a step back and clarify the intentions behind this CL :)\n\nMy primary goal is to use UserEventService to record GAIA-keyed consents. But that\u0027s going to be a larger CL, so I wanted to at least decouple the infrastructure parts. The point of this CL is to see if an architecture where we have a KeyedService in //components that is dependent on UserEventService makes sense. But I also didn\u0027t want to land a completely empty component, so I added a prototype of the local consent recording, which is the secondary goal.\n\nFor that reason, I\u0027d like to keep it. And it\u0027s going to be used in the next CL.\n\nBut I do understand the principle of not landing unused code, so if you insist, I can remove it too.",
      "parentUuid": "9305abe7_2daa66d0",
      "range": {
        "startLine": 28,
        "startChar": 35,
        "endLine": 28,
        "endChar": 54
      },
      "revId": "1e7526c0c9e491546b8bf81d37d6eb98fd009f9a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "19fa5d81_3647618e",
        "filename": "components/consent_auditor/consent_auditor.cc",
        "patchSetId": 6
      },
      "lineNbr": 28,
      "author": {
        "id": 1116027
      },
      "writtenOn": "2017-11-08T14:05:37Z",
      "side": 1,
      "message": "No need to remove. Thank you for the explanation. Was pointing it out in case it was a mistake.",
      "parentUuid": "31dfe56c_8510a60b",
      "range": {
        "startLine": 28,
        "startChar": 35,
        "endLine": 28,
        "endChar": 54
      },
      "revId": "1e7526c0c9e491546b8bf81d37d6eb98fd009f9a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f8dadc3e_f5976897",
        "filename": "components/consent_auditor/consent_auditor.cc",
        "patchSetId": 6
      },
      "lineNbr": 35,
      "author": {
        "id": 1116027
      },
      "writtenOn": "2017-11-06T13:37:48Z",
      "side": 1,
      "message": "Code should drop any pointer it holds to other KeyedService in Shutdown, so user_event_service_ should probably be set to null here.",
      "revId": "1e7526c0c9e491546b8bf81d37d6eb98fd009f9a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ab3acd8e_f97a5546",
        "filename": "components/consent_auditor/consent_auditor.cc",
        "patchSetId": 6
      },
      "lineNbr": 35,
      "author": {
        "id": 1118331
      },
      "writtenOn": "2017-11-08T12:55:47Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f8dadc3e_f5976897",
      "revId": "1e7526c0c9e491546b8bf81d37d6eb98fd009f9a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "651b62e9_e199fe61",
        "filename": "components/consent_auditor/consent_auditor.cc",
        "patchSetId": 6
      },
      "lineNbr": 42,
      "author": {
        "id": 1183839
      },
      "writtenOn": "2017-11-06T16:15:17Z",
      "side": 1,
      "message": "Why does this need a return value if it always returns true?",
      "revId": "1e7526c0c9e491546b8bf81d37d6eb98fd009f9a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a141a928_e01de49d",
        "filename": "components/consent_auditor/consent_auditor.cc",
        "patchSetId": 6
      },
      "lineNbr": 42,
      "author": {
        "id": 1118331
      },
      "writtenOn": "2017-11-08T12:55:47Z",
      "side": 1,
      "message": "Changed to void.\n\nRecording GAIA-keyed consents serverside could possibly fail, so those methods will have boolean return values. I wanted to treat these ones the same for consistency. But now I realized that I\u0027m already handling failures in this methods by actually DCHECK()ing them, so it really doesn\u0027t make sense.",
      "parentUuid": "651b62e9_e199fe61",
      "revId": "1e7526c0c9e491546b8bf81d37d6eb98fd009f9a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3bb279ce_4fd3917b",
        "filename": "components/consent_auditor/consent_auditor.cc",
        "patchSetId": 6
      },
      "lineNbr": 45,
      "author": {
        "id": 1116027
      },
      "writtenOn": "2017-11-06T13:37:48Z",
      "side": 1,
      "message": "RegisterDictionaryPref already creates the value, so this condition should never happen, except maybe in unit tests. For unit tests, it is the responsibility of the test to invoke ConsentAudito::RegisterPrefs.",
      "revId": "1e7526c0c9e491546b8bf81d37d6eb98fd009f9a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6118964c_d09c5a8f",
        "filename": "components/consent_auditor/consent_auditor.cc",
        "patchSetId": 6
      },
      "lineNbr": 45,
      "author": {
        "id": 1118331
      },
      "writtenOn": "2017-11-08T12:55:47Z",
      "side": 1,
      "message": "This condition actually does happen :)\n\nAfter registering a pref we only write the default value to the DefaultPrefStore, and until an actual value is explicitly set, HasPrefPath() is still false.\n\nBut FindPref() and the Get() below already work (by returning the default value), so you\u0027re right that the condition is not needed and can be removed.",
      "parentUuid": "3bb279ce_4fd3917b",
      "revId": "1e7526c0c9e491546b8bf81d37d6eb98fd009f9a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7f3a4e8a_8c2f6b1c",
        "filename": "components/consent_auditor/consent_auditor.cc",
        "patchSetId": 6
      },
      "lineNbr": 50,
      "author": {
        "id": 1116027
      },
      "writtenOn": "2017-11-06T13:37:48Z",
      "side": 1,
      "message": "Can you add a comment to explain why a block is required here? Because, I don\u0027t see why it is needed. AFAICT, the DictionaryPrefUpdate will happens before the method return anyway, and it does not look like any code between the end of the block and the return statement depends on DictionaryPrefUpdate destructor being executed.",
      "revId": "1e7526c0c9e491546b8bf81d37d6eb98fd009f9a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0e904f03_4d1f91c0",
        "filename": "components/consent_auditor/consent_auditor.cc",
        "patchSetId": 6
      },
      "lineNbr": 50,
      "author": {
        "id": 1118331
      },
      "writtenOn": "2017-11-08T12:55:47Z",
      "side": 1,
      "message": "Removed the block.\n\nYou\u0027re right that it\u0027s not needed. I just find it better readable to be explicit about destroying objects that have this kind of side effects in the destructor. The block is a nice visual way of denoting that. But I don\u0027t insist on keeping it.",
      "parentUuid": "7f3a4e8a_8c2f6b1c",
      "revId": "1e7526c0c9e491546b8bf81d37d6eb98fd009f9a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ce90a6ce_68c30df7",
        "filename": "components/consent_auditor/consent_auditor.cc",
        "patchSetId": 6
      },
      "lineNbr": 56,
      "author": {
        "id": 1183839
      },
      "writtenOn": "2017-11-06T16:15:17Z",
      "side": 1,
      "message": "Should we also record a timestamp or Chrome version to make it easier to understand how entries could have been created?",
      "revId": "1e7526c0c9e491546b8bf81d37d6eb98fd009f9a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a6a126b6_b70a65e2",
        "filename": "components/consent_auditor/consent_auditor.cc",
        "patchSetId": 6
      },
      "lineNbr": 56,
      "author": {
        "id": 1183839
      },
      "writtenOn": "2017-11-07T09:42:04Z",
      "side": 1,
      "message": "I think if we want to use this to decide whether to reconsent a user, we need either string+language or chrome version, probably both to identify incorrect strings? Otherwise it will be difficult to identify users that changed their device language after consent.",
      "parentUuid": "ce90a6ce_68c30df7",
      "revId": "1e7526c0c9e491546b8bf81d37d6eb98fd009f9a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "75ff186c_1beb471d",
        "filename": "components/consent_auditor/consent_auditor.cc",
        "patchSetId": 6
      },
      "lineNbr": 56,
      "author": {
        "id": 1118331
      },
      "writtenOn": "2017-11-08T12:55:47Z",
      "side": 1,
      "message": "Yes!\n\nWe\u0027ll definitely want to record version. Added that.\n\nPlumbing in the UI language is going to be a bit more difficult, so if you don\u0027t mind, I left a TODO.\n\nWe\u0027ll definitely need that for GAIA-keyed consents anyways. It\u0027s going to be practical to have it for local consents too, but there I\u0027d argue that it\u0027s not strictly necessary - if you know that you\u0027re looking for a version of the string in a particular language, then you also know which particular string you\u0027re looking for.",
      "parentUuid": "a6a126b6_b70a65e2",
      "revId": "1e7526c0c9e491546b8bf81d37d6eb98fd009f9a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1d2a345c_f53b8d0e",
        "filename": "components/consent_auditor/consent_auditor.cc",
        "patchSetId": 6
      },
      "lineNbr": 56,
      "author": {
        "id": 1183839
      },
      "writtenOn": "2017-11-08T13:51:24Z",
      "side": 1,
      "message": "Ok, great. If we know that the German UMA string in Chrome 99 was incorrect, I think it would be easier to check if a user consented to a German string in this version than to actually ship this string with future Chrome versions? \nMaybe we should add a static recordConsent() helper function in chrome/browser that is responsible to supply all the parameters that are not available in content/?",
      "parentUuid": "75ff186c_1beb471d",
      "revId": "1e7526c0c9e491546b8bf81d37d6eb98fd009f9a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ffc2ac80_568e8f15",
        "filename": "components/consent_auditor/consent_auditor.cc",
        "patchSetId": 6
      },
      "lineNbr": 56,
      "author": {
        "id": 1118331
      },
      "writtenOn": "2017-11-09T15:31:20Z",
      "side": 1,
      "message": "\u003e Ok, great. If we know that the German UMA string in Chrome 99 was incorrect, I think it would be easier to check if a user consented to a German string in this version than to actually ship this string with future Chrome versions? \n\nExactly. This is what I meant by \"practical\" :)\n\n\u003e Maybe we should add a static recordConsent() helper function in chrome/browser that is responsible to supply all the parameters that are not available in content/?\n\nWell, that\u0027s basically what the factory is for, no? It takes a Profile and extracts all possible information from it. The UI language will be one of them. The only thing you need to supply after that is the actual string you want to record.",
      "parentUuid": "1d2a345c_f53b8d0e",
      "revId": "1e7526c0c9e491546b8bf81d37d6eb98fd009f9a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "68de539f_d86bfec4",
        "filename": "components/consent_auditor/consent_auditor.h",
        "patchSetId": 6
      },
      "lineNbr": 32,
      "author": {
        "id": 1116027
      },
      "writtenOn": "2017-11-06T13:37:48Z",
      "side": 1,
      "message": "Since those are profile specific settings, the convention is to call this method RegisterProfilePrefs (yes, even for components that would be used on other platforms like iOS that do not have a Profile).\n\nThis is to allow for non-profile specific settings registration method.",
      "range": {
        "startLine": 32,
        "startChar": 14,
        "endLine": 32,
        "endChar": 27
      },
      "revId": "1e7526c0c9e491546b8bf81d37d6eb98fd009f9a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f5ce100d_cbef6ab0",
        "filename": "components/consent_auditor/consent_auditor.h",
        "patchSetId": 6
      },
      "lineNbr": 32,
      "author": {
        "id": 1118331
      },
      "writtenOn": "2017-11-08T12:55:47Z",
      "side": 1,
      "message": "Done. Indeed, I was trying to avoid referencing Profile.",
      "parentUuid": "68de539f_d86bfec4",
      "range": {
        "startLine": 32,
        "startChar": 14,
        "endLine": 32,
        "endChar": 27
      },
      "revId": "1e7526c0c9e491546b8bf81d37d6eb98fd009f9a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "16b44c53_ab98c7b7",
        "filename": "components/consent_auditor/consent_auditor.h",
        "patchSetId": 6
      },
      "lineNbr": 38,
      "author": {
        "id": 1183839
      },
      "writtenOn": "2017-11-06T16:15:17Z",
      "side": 1,
      "message": "Should we record consent revocation as well? If yes, should there be an explicit flag whether this is a consent or a revocation?",
      "revId": "1e7526c0c9e491546b8bf81d37d6eb98fd009f9a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4a185db2_305d62e2",
        "filename": "components/consent_auditor/consent_auditor.h",
        "patchSetId": 6
      },
      "lineNbr": 38,
      "author": {
        "id": 1153420
      },
      "writtenOn": "2017-11-06T17:03:55Z",
      "side": 1,
      "message": "I don\u0027t exactly understand what \"Local\" means, and if this is a GAIA keyed consent or not.\n\nThe more I think about this, I\u0027m a bit more confused is gaia-keyed and non-gaia keyed are really the only two buckets. Is it potentially possible you want to have a non-gaia keyed consent that\u0027s profile specific, and a non-gaia keyed consent that\u0027s chrome wide?\n\nI think it\u0027s a bit odd to have a keyed service for chrome wide consent, but maybe it doesn\u0027t really matter.",
      "range": {
        "startLine": 38,
        "startChar": 7,
        "endLine": 38,
        "endChar": 25
      },
      "revId": "1e7526c0c9e491546b8bf81d37d6eb98fd009f9a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8c3031ed_7f98aae7",
        "filename": "components/consent_auditor/consent_auditor.h",
        "patchSetId": 6
      },
      "lineNbr": 38,
      "author": {
        "id": 1118331
      },
      "writtenOn": "2017-11-08T12:55:47Z",
      "side": 1,
      "message": "I\u0027ll still have to clarify this part with ctanaka@, but I think we don\u0027t.\n\nIf you enable a feature, we\u0027re trying to make sure that we have more information than just the one boolean that it\u0027s enabled. But if you disable a feature, the fact that the corresponding boolean is false is probably everything we need to know.",
      "parentUuid": "16b44c53_ab98c7b7",
      "revId": "1e7526c0c9e491546b8bf81d37d6eb98fd009f9a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e1dbea76_f80abd13",
        "filename": "components/consent_auditor/consent_auditor.h",
        "patchSetId": 6
      },
      "lineNbr": 38,
      "author": {
        "id": 1118331
      },
      "writtenOn": "2017-11-08T12:55:47Z",
      "side": 1,
      "message": "The sign-in + sync consent will likely need to be able to distinguish profiles as well. But that\u0027s for a later CL.\n\nRegarding Chrome-wide non-GAIA-keyed consents, there is at least one case - UMA. We could have another version of this method that uses local state instead of profile prefs. But I think it actually makes sense to record enabling UMA in the profile of the user that did it, and the code is also simpler that way.",
      "parentUuid": "4a185db2_305d62e2",
      "range": {
        "startLine": 38,
        "startChar": 7,
        "endLine": 38,
        "endChar": 25
      },
      "revId": "1e7526c0c9e491546b8bf81d37d6eb98fd009f9a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c95f44b1_dc1dc27d",
        "filename": "components/consent_auditor/consent_auditor.h",
        "patchSetId": 6
      },
      "lineNbr": 40,
      "author": {
        "id": 1183839
      },
      "writtenOn": "2017-11-06T16:15:17Z",
      "side": 1,
      "message": "Should we define some default strings for cases where no button text is available but it would still be interesting to know how the consent happens? e.g. \"toggle-on\" and \"toggle-off\", \"checkbox-on\", \"checkbox-off\"?",
      "revId": "1e7526c0c9e491546b8bf81d37d6eb98fd009f9a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9a498d1f_b93f4a49",
        "filename": "components/consent_auditor/consent_auditor.h",
        "patchSetId": 6
      },
      "lineNbr": 40,
      "author": {
        "id": 1118331
      },
      "writtenOn": "2017-11-08T12:55:47Z",
      "side": 1,
      "message": "Yes, that\u0027s a good idea. But I haven\u0027t yet done an audit of the local consents that will be recorded here, so I\u0027d prefer not inventing the options on the spot now.",
      "parentUuid": "c95f44b1_dc1dc27d",
      "revId": "1e7526c0c9e491546b8bf81d37d6eb98fd009f9a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7079794b_be0da805",
        "filename": "components/consent_auditor/consent_auditor_unittest.cc",
        "patchSetId": 6
      },
      "lineNbr": 37,
      "author": {
        "id": 1116027
      },
      "writtenOn": "2017-11-06T13:37:48Z",
      "side": 1,
      "message": "This method seems to be unused. Remove?",
      "range": {
        "startLine": 37,
        "startChar": 28,
        "endLine": 37,
        "endChar": 48
      },
      "revId": "1e7526c0c9e491546b8bf81d37d6eb98fd009f9a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c31df48f_27d42da8",
        "filename": "components/consent_auditor/consent_auditor_unittest.cc",
        "patchSetId": 6
      },
      "lineNbr": 37,
      "author": {
        "id": 1118331
      },
      "writtenOn": "2017-11-08T12:55:47Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7079794b_be0da805",
      "range": {
        "startLine": 37,
        "startChar": 28,
        "endLine": 37,
        "endChar": 48
      },
      "revId": "1e7526c0c9e491546b8bf81d37d6eb98fd009f9a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0c4aa6ac_fa2b6e78",
        "filename": "components/consent_auditor/consent_auditor_unittest.cc",
        "patchSetId": 6
      },
      "lineNbr": 61,
      "author": {
        "id": 1183839
      },
      "writtenOn": "2017-11-06T16:15:17Z",
      "side": 1,
      "message": "It shouldn\u0027t be necessary to cast to DictionaryValue because all methods are defined on Value now",
      "revId": "1e7526c0c9e491546b8bf81d37d6eb98fd009f9a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c6d19e55_760aa29b",
        "filename": "components/consent_auditor/consent_auditor_unittest.cc",
        "patchSetId": 6
      },
      "lineNbr": 61,
      "author": {
        "id": 1118331
      },
      "writtenOn": "2017-11-08T12:55:47Z",
      "side": 1,
      "message": "Not all of them! I\u0027m keeping |consents| as DictionaryValue, because I need size() which is actually defined only in the subclass.\n\nBut this one can be changed to base::Value.",
      "parentUuid": "0c4aa6ac_fa2b6e78",
      "revId": "1e7526c0c9e491546b8bf81d37d6eb98fd009f9a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5c7a3855_177d21cf",
        "filename": "components/consent_auditor/consent_auditor_unittest.cc",
        "patchSetId": 6
      },
      "lineNbr": 67,
      "author": {
        "id": 1183839
      },
      "writtenOn": "2017-11-06T16:15:17Z",
      "side": 1,
      "message": "I think the is_string asserts are redundant as GetString() has a CHECK(is_string()) anyway",
      "revId": "1e7526c0c9e491546b8bf81d37d6eb98fd009f9a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6477858e_cc57afea",
        "filename": "components/consent_auditor/consent_auditor_unittest.cc",
        "patchSetId": 6
      },
      "lineNbr": 67,
      "author": {
        "id": 1118331
      },
      "writtenOn": "2017-11-08T12:55:47Z",
      "side": 1,
      "message": "Done. I would argue that ASSERTing it explicitly results in cleaner test failures, but sure, let\u0027s simplify.",
      "parentUuid": "5c7a3855_177d21cf",
      "revId": "1e7526c0c9e491546b8bf81d37d6eb98fd009f9a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a49d65b2_96e491ec",
        "filename": "components/consent_auditor/consent_auditor_unittest.cc",
        "patchSetId": 6
      },
      "lineNbr": 67,
      "author": {
        "id": 1183839
      },
      "writtenOn": "2017-11-08T13:51:24Z",
      "side": 1,
      "message": "I think it is more clean because with \"confirmation \u0026\u0026 confirmation-\u003eis_string()\", you don\u0027t know which case failed. By only asserting not-null, you know what exactly happened.",
      "parentUuid": "6477858e_cc57afea",
      "revId": "1e7526c0c9e491546b8bf81d37d6eb98fd009f9a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c4a62012_0d325e7f",
        "filename": "components/consent_auditor/consent_auditor_unittest.cc",
        "patchSetId": 6
      },
      "lineNbr": 67,
      "author": {
        "id": 1118331
      },
      "writtenOn": "2017-11-09T15:31:20Z",
      "side": 1,
      "message": "Ok, yeah, that\u0027s true.",
      "parentUuid": "a49d65b2_96e491ec",
      "revId": "1e7526c0c9e491546b8bf81d37d6eb98fd009f9a",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}