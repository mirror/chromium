{
  "comments": [
    {
      "key": {
        "uuid": "90e27487_076e9eea",
        "filename": "extensions/renderer/gin_port.cc",
        "patchSetId": 3
      },
      "lineNbr": 149,
      "author": {
        "id": 1002854
      },
      "writtenOn": "2017-09-12T02:06:15Z",
      "side": 1,
      "message": "nit: since we\u0027re already going to copy the string contents below to pass to the delegate, no need to do it twice. WDYT about converting to std::string and doing the comparison on that:\n\nstd::string message;\nif (success) {\n  message \u003d gin::V8ToString(stringified);\n  success \u003d message !\u003d \"undefined\";\n}\n\nif (!success) {\n  ThrowError(isolate, \"Illegal argument to Port.postMessage\");\n  return;\n}\n\ndelegate-\u003ePostMessageToPort(\n    port_id, std::make_unique\u003cMessage\u003e(\n                 message,\n                 blink::WebUserGestureIndicator::IsProcessingUserGesture()));\n\nDon\u0027t feel strongly (so you can leave as-is if you prefer), but it seems slightly more efficient, and avoids having to manually get a UTF-8 string pointer and then strcmp it.",
      "revId": "17ce5211efdbc0c9afb792f148808e9436994c69",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "04ad308e_13746356",
        "filename": "extensions/renderer/gin_port.cc",
        "patchSetId": 3
      },
      "lineNbr": 149,
      "author": {
        "id": 1115745
      },
      "writtenOn": "2017-09-12T19:01:54Z",
      "side": 1,
      "message": "oh, interesting - that was my first instinct, but I thought that v8::String::Utf8Value avoided copies (which is why I opted for that).  Is there no way to get at the underlying contents of the v8::String without copying the buffer?\n\n(For now, went with your suggested approach.)",
      "parentUuid": "90e27487_076e9eea",
      "revId": "17ce5211efdbc0c9afb792f148808e9436994c69",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bff8f656_d46ae915",
        "filename": "extensions/renderer/gin_port.cc",
        "patchSetId": 3
      },
      "lineNbr": 149,
      "author": {
        "id": 1002854
      },
      "writtenOn": "2017-09-13T01:38:30Z",
      "side": 1,
      "message": "Regrettably Utf8Value does copy into a heap-allocated buffer. In some narrow cases it could possibly do better, but let me give you a few reasons why it\u0027s complicated:\n\n1. String is not ASCII, or not 8-bit.\n\nV8, like Blink, stores strings as either 8-bit or 16-bit character sequences. A conversion to UTF-8 requires a copy if the string is outside ASCII (because then multi-byte UTF-8 sequences are required, but not present in the source), or if the representation is 16-bit.\n\n2. String is not contiguous.\n\nV8 has a number of representations of strings, and not all of them mean the string exists in memory as a contiguous buffer. For instance, V8 has \"cons strings\", which simply represent the concatenation of two other strings. This makes string concatenation cheap, but it means that unless the string is explicitly flattened (this notion is not surfaced through the public API), it may not exist as a contiguous buffer in memory (so what could we return without copying?).\n\n3. Garbage collection.\n\n\"Normal\" V8 strings have the string data allocated in the V8 heap, and so it is eligible to be relocated when garbage collection runs. If v8::String::Utf8Value pointed directly into the string buffer (modulo the above points), the Utf8Value pointer might become invalid if an allocation on the V8 heap causes a GC. This isn\u0027t totally unworkable, but it requires extra care on the part of the V8 API user. V8 has generally preferred to provide safer APIs that don\u0027t expose this sort of concern (similarly, V8 does use raw pointers to heap objects internally, but only exposes APIs that use handles, which can tolerate object relocation due to GC).\n\n\nIn this particular case, whenever the message is going to be valid JSON (presumably almost all the time), you\u0027re going to make an std::string anyway, so it\u0027s not really harmful to just pull the V8ToString earlier.",
      "parentUuid": "04ad308e_13746356",
      "revId": "17ce5211efdbc0c9afb792f148808e9436994c69",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7652ee07_ef3ea95c",
        "filename": "extensions/renderer/gin_port_unittest.cc",
        "patchSetId": 3
      },
      "lineNbr": 105,
      "author": {
        "id": 1002854
      },
      "writtenOn": "2017-09-12T02:06:15Z",
      "side": 1,
      "message": "nit: why not just say:\n\nEXPECT_EQ(\"\\\"port name\\\"\", GetStringPropertyFromObject(...));\n\nElsewhere such expectations are hardcoded, and it seems easier to read to me.",
      "revId": "17ce5211efdbc0c9afb792f148808e9436994c69",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7ce4c684_cfd8f5a0",
        "filename": "extensions/renderer/gin_port_unittest.cc",
        "patchSetId": 3
      },
      "lineNbr": 105,
      "author": {
        "id": 1115745
      },
      "writtenOn": "2017-09-12T19:01:54Z",
      "side": 1,
      "message": "Done.  I like to try and use constants when it\u0027s easy, but agreed it\u0027s awkward to read.",
      "parentUuid": "7652ee07_ef3ea95c",
      "revId": "17ce5211efdbc0c9afb792f148808e9436994c69",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "857992e3_705d6606",
        "filename": "extensions/renderer/gin_port_unittest.cc",
        "patchSetId": 3
      },
      "lineNbr": 290,
      "author": {
        "id": 1002854
      },
      "writtenOn": "2017-09-12T02:06:15Z",
      "side": 1,
      "message": "nit: why the block scope?",
      "revId": "17ce5211efdbc0c9afb792f148808e9436994c69",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "22a415d2_37e7df7f",
        "filename": "extensions/renderer/gin_port_unittest.cc",
        "patchSetId": 3
      },
      "lineNbr": 290,
      "author": {
        "id": 1115745
      },
      "writtenOn": "2017-09-12T19:01:54Z",
      "side": 1,
      "message": "Whoops!  I think this test used to have more.  Removed.",
      "parentUuid": "857992e3_705d6606",
      "revId": "17ce5211efdbc0c9afb792f148808e9436994c69",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}