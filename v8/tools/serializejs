#!/usr/bin/perl -w

# Copyright 2007-2008 Google Inc.
# All Rights Reserved.

use strict;

# Downloads a web page, inlining all .js files as it goes.
# We don't interpret the js so if the js is loaded by executing js we don't
# inline it.
#
# Example:
#   serializejs -f -o nba_video.html http://www.nba.com/video/
#
# If you get errors on starting the script and you are running something
# Debian-based then the following command lines may help:
#   sudo apt-get install libhtml-parser-perl
#   sudo apt-get install libwww-perl
use HTML::Parser;
use Getopt::Std;
use HTTP::Cookies::Netscape;
use HTTP::Response;
use LWP::UserAgent;
use URI;

sub HELP_MESSAGE();
sub get($);
sub handle_tag($$$);
sub handle_end_tag($$);
sub base($);
sub emulate_firefox();

my $user_agent;
my $uri_base;
my $BOOLEAN_ATTRIBUTE = {};

# Prints usage and exits.
sub HELP_MESSAGE() {
  print STDERR "Usage:\n";
  print STDERR "  serializejs <options> <url>\n";
  print STDERR "Options:\n";
  print STDERR "  -f               emulate firefox (cookies and USER_AGENT)\n";
  print STDERR "  -c <filename>    read cookies from file (Netscape format " .
                                                             "cookies.txt)\n";
  print STDERR "  -u <useragent>   set USER_AGENT field in HTTP request\n";
  print STDERR "  -o <filename>    output to file (default index.html)\n";
  exit 1;
}

# Gets the URL, inlining .js files.
sub get($) {
  my ($url) = @_;
  my $parser = HTML::Parser->new(
    default_h => [sub {print OUTPUTFILE (shift)}, 'text' ],
    start_h => [sub { handle_tag(shift, shift, shift)}, 'tagname,attr,text' ],
    end_h => [sub { handle_end_tag(shift, shift)}, 'tagname,text' ]);

  $parser->boolean_attribute_value($BOOLEAN_ATTRIBUTE);

  my $response = $user_agent->get(shift || HELP_MESSAGE());
  if (!$response->is_success) {
    print STDERR $response->content;
    print STDERR "failed\n";
    exit(1);
  }

  my $page = $response->content();
  $uri_base = $response->base();

  $parser->parse($page) || die $!;
}

# Handles HTML tag opens, eg. <script...
# Default behaviour is to just copy the tag to the output file.
sub handle_tag($$$) {
  my($tag_name, $attrs, $text) = @_;
  if ($tag_name eq "script") {
    if (defined($attrs->{src})) {
      my $src = URI->new_abs($attrs->{src}, $uri_base);
      print STDERR "Getting $src\n";
      my $js_result = $user_agent->get($src);
      if (!$js_result->is_success) {
        print STDERR "Failed to get js file: $src\n";
        exit(1);
      }
      print OUTPUTFILE "<script autoinlined>\n";
      print OUTPUTFILE $js_result->content();
    } else {
      print OUTPUTFILE $text;
    }
  } elsif ($tag_name eq "head") {
    print OUTPUTFILE $text;
    print OUTPUTFILE "<base href=\"" . base($uri_base) . "\" />";
  } elsif ($tag_name eq "base") {
    $attrs->{href} = base($uri_base);
    print OUTPUTFILE "<base ";
    foreach my $key (sort keys %$attrs) {
      if ($attrs->{$key} == $BOOLEAN_ATTRIBUTE) {
        print OUTPUTFILE "$key ";
      } else {
        print OUTPUTFILE "$key=\"$attrs->{$key}\" ";
      }
      print OUTPUTFILE ">";
    }
  } else {
    print OUTPUTFILE $text;
  }
}

# At the moment we don't do anything special when tags close.
sub handle_end_tag($$) {
  my($tag_name, $text) = @_;
  print OUTPUTFILE $text;
}

# Constructs an href suitable for use in a <base href="..."> HTML directive,
# given an URI object.
sub base($) {
  my ($uri) = @_;
  return $uri->scheme() . "://" . $uri->host_port() . "/";
}

# Loads the cookies from the default location for firefox and sets the
# USER_AGENT to one that indicates Firefox.
sub emulate_firefox() {
  my $fn = "$ENV{HOME}/.mozilla/firefox";
  opendir(FIREFOXDIR, $fn) ||
    die '$HOME/.mozilla/firefox/ directory not readable' . $!;
  $user_agent->agent("Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.8.0.12) " .
                     "Gecko/20070731 Ubuntu/dapper-security Firefox/1.5.0.12");
  while(defined(my $subdir = readdir(FIREFOXDIR))) {
    next if $subdir !~ /\.default$/;
    print STDERR "Using cookies from $fn/$subdir/cookies.txt\n";
    $user_agent->cookie_jar(HTTP::Cookies::Netscape->new(file =>
      "$fn/$subdir/cookies.txt"));
    return;
  }
  die "Couldn't find firefox cookies in " .
      "$ENV{HOME}/.mozilla/firefox/*.default/cookies.txt";
}


my $options = {};
$options->{o} = "index.html"; # default output file name.

$Getopt::Std::STANDARD_HELP_VERSION =1;
getopts("o:fu:c:", $options);   # modifies hash referenced by options.

my $url = shift || HELP_MESSAGE();
open(OUTPUTFILE, ">$options->{o}") ||
  die "Couldn't open $options->{o} for writing: " . $!;

$user_agent = LWP::UserAgent->new;
emulate_firefox() if defined($options->{f});
$user_agent->agent($options->{u}) if defined $options->{u};
if (defined $options->{c}) {
  $user_agent->cookie_jar(HTTP::Cookies::Netscape->new(file => $options->{c}));
}

get($url);
close(OUTPUTFILE) || die "Error closing $options->{o}: " . $!;

print STDERR "Success, output written to $options->{o}\n";
exit(0);
