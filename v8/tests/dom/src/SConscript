import os
from os.path import join

env = Environment(
  CPPPATH=['..', join('..', '..', '..', 'public')]
)

env['BUILDERS']['GenerateCpp'] = Builder(action = 'python ' + join('tools', 'cpp-generator.py') + ' -o $TARGETS $SOURCES')
env['BUILDERS']['GenerateBindings'] = Builder(action = 'python ' + join('tools', 'binding-generator.py') + ' -o $TARGETS -d $SOURCES')

spec_files = map(lambda name: join('..', 'spec', name), os.listdir(join('..', 'spec')))
idl_files = filter(lambda name: name.endswith('.idl'), spec_files)

dom_cpp = env.GenerateCpp(['dom.h', 'dom.cpp'], idl_files)
env.Depends(dom_cpp, [
  'SConscript',
  join('..', 'tools', 'cpp-generator.py'),
  join('..', 'tools', 'idlparser.py')
])

bindings_cpp = env.GenerateBindings(['bindings.h', 'bindings.cpp'], ['dom.h'] + idl_files)
env.Depends(bindings_cpp, [
  join('..', 'tools', 'binding-generator.py'),
  join('..', 'tools', 'idlparser.py')
])

obj = env.Object(['dom.cpp', 'bindings.cpp'])

env.Default(obj)
