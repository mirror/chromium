# --------------------------------------------------------------------
# If you add a test case to this file, please try to provide
# an explanation of why the test fails; this may ease future
# debugging.
# --------------------------------------------------------------------


##################### SKIPPED TESTS #####################

# This test checks that we behave properly in an out-of-memory
# situation.  The test fails in V8 with an exception and takes a long
# time to do so.
js1_5/Regress/regress-271716-n.js = SKIP


##################### SLOW TESTS #####################

# This takes a long time to run (~100 seconds). It should only be run
# by the really patient.
js1_5/GC/regress-324278.js = SLOW

# This takes a long time to run because our indexOf operation is
# pretty slow - it causes a lot of GCs; see buganizer issue
# #926379. We could consider marking this SKIP because it takes a
# while to run to completion.
js1_5/GC/regress-338653.js = SLOW

# This test is designed to run until it runs out of memory. This takes
# a very long time because it builds strings character by character
# and compiles a lot of regular expressions. We could consider marking
# this SKIP because it takes a while to run to completion.
js1_5/GC/regress-346794.js = SLOW

# Runs out of memory while trying to build huge string of 'x'
# characters. This takes a long time to run (~32 seconds).
js1_5/GC/regress-348532.js = SLOW


##################### FLAKY TESTS #####################

# These tests time out in debug mode but pass in product mode
js1_5/Regress/regress-280769-3.js = PASS || ($DEBUG && FAIL)
js1_5/Regress/regress-203278-1.js = PASS || ($DEBUG && FAIL)
js1_5/GC/regress-203278-2.js = PASS || ($DEBUG && FAIL)
js1_5/Regress/regress-244470.js = PASS || ($DEBUG && FAIL)
ecma_3/RegExp/regress-209067.js = PASS || ($DEBUG && FAIL)
js1_5/GC/regress-278725.js = PASS || ($DEBUG && FAIL)
js1_5/Regress/regress-360969-03.js = PASS || ($DEBUG && FAIL)
js1_5/Regress/regress-360969-04.js = PASS || ($DEBUG && FAIL)
js1_5/Regress/regress-360969-05.js = PASS || ($DEBUG && FAIL)
js1_5/Regress/regress-360969-06.js = PASS || ($DEBUG && FAIL)
js1_5/extensions/regress-365527.js = PASS || ($DEBUG && FAIL)
# http://b/issue?id=1206983
js1_5/Regress/regress-367561-03.js = PASS || ($DEBUG && FAIL)

# These tests create two Date objects just after each other and
# expects them to match.  Sometimes this happens on the border
# between one second and the next.
ecma/Date/15.9.2.1.js = PASS || FAIL
ecma/Date/15.9.2.2-1.js = PASS || FAIL
ecma/Date/15.9.2.2-2.js = PASS || FAIL
ecma/Date/15.9.2.2-3.js = PASS || FAIL
ecma/Date/15.9.2.2-4.js = PASS || FAIL
ecma/Date/15.9.2.2-5.js = PASS || FAIL
ecma/Date/15.9.2.2-6.js = PASS || FAIL

# 1026139: These date tests fail on arm
ecma/Date/15.9.5.29-1.js = PASS || ($ARM && FAIL)
ecma/Date/15.9.5.34-1.js = PASS || ($ARM && FAIL)
ecma/Date/15.9.5.28-1.js = PASS || ($ARM && FAIL)

# 1050186: Arm vm is broken; probably unrelated to dates
ecma/Array/15.4.4.5-3.js = PASS || ($ARM && FAIL)
ecma/Date/15.9.5.22-2.js = PASS || ($ARM && FAIL)

# Severely brain-damaged test. Access to local variables must not
# be more than 2.5 times faster than access to global variables? WTF?
js1_5/Regress/regress-169559.js = PASS || FAIL


# Test that rely on specific timezone (not working in Denmark).
js1_5/Regress/regress-58116.js = PASS || FAIL


# Flaky random() test. Tests the distribution of calls to Math.random().
js1_5/Regress/regress-211590.js = PASS || FAIL


# Flaky tests; expect BigO-order computations to yield 1, but the code
# cannot handle outliers. See bug #925864.
ecma_3/RegExp/regress-311414.js = PASS || FAIL
ecma_3/RegExp/regress-289669.js = PASS || FAIL
js1_5/String/regress-314890.js = PASS || FAIL
js1_5/String/regress-56940-01.js = PASS || FAIL
js1_5/String/regress-56940-02.js = PASS || FAIL
js1_5/String/regress-157334-01.js = PASS || FAIL
js1_5/String/regress-322772.js = PASS || FAIL
js1_5/Array/regress-99120-01.js = PASS || FAIL
js1_5/Array/regress-99120-02.js = PASS || FAIL
js1_5/Regress/regress-347306-01.js = PASS || FAIL
js1_5/Regress/regress-416628.js = PASS || FAIL


# The following two tests assume that daylight savings time starts first Sunday
# in April. This is not true when executing the tests outside California!
# In Denmark the adjustment starts one week earlier!.
# Tests based on shell.js that use dates in this gap are flaky.
ecma/Date/15.9.5.10-1.js = PASS || FAIL
ecma/Date/15.9.5.12-1.js = PASS || FAIL
ecma/Date/15.9.5.14.js = PASS || FAIL
ecma/Date/15.9.5.34-1.js = PASS || FAIL


# These tests sometimes pass (in particular on Windows). They build up
# a lot of stuff on the stack, which normally causes a stack overflow,
# but sometimes it makes it through?
js1_5/Regress/regress-290575.js = PASS || FAIL
js1_5/Regress/regress-98901.js = PASS || FAIL


# Tests that sorting arrays of ints is less than 3 times as fast
# as sorting arrays of strings.
js1_5/extensions/regress-371636.js = PASS || FAIL


# Test depends on GC timings. Inherently flaky.
js1_5/GC/regress-383269-01.js = PASS || FAIL


##################### INCOMPATIBLE TESTS #####################

# This section is for tests that fail in both V8 and KJS.  Thus they
# have been determined to be incompatible between Mozilla and V8/KJS.

# Fail because of toLowerCase and toUpperCase conversion.
ecma/String/15.5.4.11-2.js = FAIL_OK
ecma/String/15.5.4.11-5.js = FAIL_OK
ecma/String/15.5.4.12-1.js = FAIL_OK
ecma/String/15.5.4.12-4.js = FAIL_OK

# This test uses an older version of the unicode standard that fails
# us because we correctly convert the armenian small ligature ech-yiwn
# to the two upper-case characters ECH and YIWN, whereas the older
# unicode version converts it to itself.
ecma/String/15.5.4.12-5.js = FAIL_OK

# Creates a linked list of arrays until we run out of memory.
js1_5/Regress/regress-312588.js = FAIL_OK


# Runs out of memory because it compiles huge functions.
js1_5/Function/regress-338001.js = FAIL_OK
js1_5/Function/regress-338121-01.js = FAIL_OK
js1_5/Function/regress-338121-02.js = FAIL_OK
js1_5/Function/regress-338121-03.js = FAIL_OK


# Length of objects whose prototype chain includes a function
ecma_3/Function/regress-313570.js = FAIL_OK


# ==== RegExp ==== 
# To be compatible with KJS we silently ignore flags that do not make
# sense.  This test expects us to throw exceptions.  
ecma_3/RegExp/regress-57631.js = FAIL_OK

# PCRE doesn't allow subpattern nesting deeper than 200, this tests
# depth 500.  KJS detects the case, and return null from the match,
# and passes this test (the test doesn't check for a correct return
# value).
ecma_3/RegExp/regress-119909.js = FAIL_OK


# Difference in the way capturing subpatterns work.  In JS, when the
# 'minimum repeat count' is reached, the empty string must not match.
# In this case, we are similar but not identical to KJS.  Hard to
# support the JS behavior with PCRE, so maybe emulate KJS?
#
# Note: We do not support toSource currently so we cannot run this
# test. We should make an isolated test case for the regexp issue.
ecma_3/RegExp/regress-209919.js = FAIL_OK


# PCRE's match limit is reached.  SpiderMonkey hangs on the first one,
# KJS returns true somehow.  Maybe they up the match limit?  There is
# an open V8 bug 676063 about this.
ecma_3/RegExp/regress-330684.js = FAIL_OK


# We do not detect overflow in bounds for back references and {}
# quantifiers.  Might fix by parsing numbers differently?
js1_5/Regress/regress-230216-2.js = FAIL_OK


# According to ECMA-262, \b is a 'word' boundary, where words are only
# ASCII characters.  PCRE supports non-ASCII word characters.
js1_5/Regress/regress-247179.js = FAIL_OK


# Regexp too long for PCRE.
js1_5/Regress/regress-280769.js = FAIL_OK
js1_5/Regress/regress-280769-1.js = FAIL_OK
js1_5/Regress/regress-280769-2.js = FAIL_OK
js1_5/Regress/regress-280769-4.js = FAIL_OK
js1_5/Regress/regress-280769-5.js = FAIL_OK


# We do not support static RegExp.multiline - should we?.
js1_2/regexp/RegExp_multiline.js = FAIL_OK
js1_2/regexp/RegExp_multiline_as_array.js = FAIL_OK
js1_2/regexp/beginLine.js = FAIL_OK
js1_2/regexp/endLine.js = FAIL_OK


# Date trouble?
js1_5/Date/regress-301738-02.js = FAIL_OK


# This test fails for all browsers on in the CET timezone.
ecma/Date/15.9.5.35-1.js = PASS || FAIL_OK


# Spidermonkey allows stuff in parenthesis directly after the minutes
# in a date.  KJS does not, so we don't either.
js1_5/Date/regress-309925-02.js = FAIL_OK


# Print string after deleting array element?
js1_5/Expressions/regress-96526-delelem.js = FAIL_OK


# Stack overflows should be InternalError: too much recursion?
js1_5/Regress/regress-234389.js = FAIL_OK


# This may very well be a bogus test. I'm not sure yet.
js1_5/Regress/regress-320119.js = FAIL_OK


# We do not support explicit global evals through <global>.eval(...).
js1_5/Regress/regress-68498-003.js = FAIL_OK


# No support for toSource().
js1_5/Regress/regress-248444.js = FAIL_OK
js1_5/Regress/regress-313967-01.js = FAIL_OK
js1_5/Regress/regress-313967-02.js = FAIL_OK

# This fails because we don't have stack space for Function.prototype.apply
# with very large numbers of arguments.  The test uses 2^24 arguments.
js1_5/Array/regress-350256-03.js = FAIL_OK


# Extra arguments not handled properly in String.prototype.match
js1_5/Regress/regress-179524.js = FAIL_OK


# Uncategorized failures. Please help categorize (or fix) these failures.
js1_5/Regress/regress-172699.js = FAIL_OK


# Calls regexp objects with function call syntax; non-ECMA behavior.
js1_2/Objects/toString-001.js = FAIL_OK


# Assumes that the prototype of a function is enumerable. Non-ECMA,
# see section 15.3.3.1, page 86.
ecma/GlobalObject/15.1.2.2-1.js = FAIL_OK
ecma/GlobalObject/15.1.2.3-1.js = FAIL_OK
ecma/GlobalObject/15.1.2.4.js = FAIL_OK
ecma/GlobalObject/15.1.2.5-1.js = FAIL_OK
ecma/GlobalObject/15.1.2.6.js = FAIL_OK
ecma/GlobalObject/15.1.2.7.js = FAIL_OK


# Tests that rely on specific details of function decompilation or
# print strings for errors. Non-ECMA behavior.
js1_2/function/tostring-2.js = FAIL_OK
js1_5/Exceptions/regress-332472.js = FAIL_OK
js1_5/Regress/regress-173067.js = FAIL_OK
js1_5/Regress/regress-355556.js = FAIL_OK
js1_5/Regress/regress-328664.js = FAIL_OK
js1_5/Regress/regress-252892.js = FAIL_OK
js1_5/Regress/regress-352208.js = FAIL_OK
ecma_3/Array/15.4.5.1-01.js = FAIL_OK
ecma_3/Array/regress-387501.js = FAIL_OK
ecma_3/LexicalConventions/7.9.1.js = FAIL_OK
ecma_3/RegExp/regress-375711.js = FAIL_OK
ecma_3/Unicode/regress-352044-01.js = FAIL_OK
ecma_3/extensions/regress-274152.js = FAIL_OK
js1_5/Regress/regress-372364.js = FAIL_OK
js1_5/Regress/regress-420919.js = FAIL_OK
js1_5/Regress/regress-422348.js = FAIL_OK
ecma_3/RegExp/regress-375715-04.js = FAIL_OK


# Uses Mozilla-specific QName, XML, XMLList and Iterator.
js1_5/Regress/regress-407323.js = FAIL_OK
js1_5/Regress/regress-407957.js = FAIL_OK


# Relies on JavaScript 1.2 / 1.3 deprecated features.
js1_2/function/String.js = FAIL_OK
js1_2/function/function-001-n.js = FAIL_OK
js1_2/operator/equality.js = FAIL_OK
js1_2/version120/boolean-001.js = FAIL_OK
js1_3/Script/function-001-n.js = FAIL_OK
js1_3/regress/function-001-n.js = FAIL_OK
js1_2/String/concat.js = FAIL_OK
js1_2/function/Function_object.js = FAIL_OK
js1_2/function/tostring-1.js = FAIL_OK
js1_2/version120/regress-99663.js = FAIL_OK
js1_2/regexp/RegExp_lastIndex.js = FAIL_OK
js1_2/regexp/string_split.js = FAIL_OK


# We do not check for bad surrogate pairs when quoting strings.
js1_5/Regress/regress-315974.js = FAIL_OK


# Use unsupported "watch".
js1_5/Regress/regress-213482.js = FAIL_OK
js1_5/Regress/regress-240577.js = FAIL_OK
js1_5/Regress/regress-355344.js = FAIL_OK
js1_5/Object/regress-362872-01.js = FAIL_OK
js1_5/Object/regress-362872-02.js = FAIL_OK
js1_5/Regress/regress-361467.js = FAIL_OK
js1_5/Regress/regress-385393-06.js = FAIL_OK


# Use special Mozilla getter/setter syntax
js1_5/Regress/regress-354924.js = FAIL_OK
js1_5/Regress/regress-355341.js = FAIL_OK
js1_5/GC/regress-316885-01.js = FAIL_OK
js1_5/GetSet/getset-002.js = FAIL_OK
js1_5/GetSet/regress-353264.js = FAIL_OK
js1_5/Regress/regress-361617.js = FAIL_OK
js1_5/Regress/regress-362583.js = FAIL_OK


# 'native' *is* a keyword in V8.
js1_5/Regress/regress-240317.js = FAIL_OK


# Requires Mozilla-specific strict mode or options() function.
ecma_3/Object/8.6.1-01.js = FAIL_OK
js1_5/Exceptions/regress-315147.js = FAIL_OK
js1_5/Regress/regress-106244.js = FAIL_OK
js1_5/Regress/regress-317533.js = FAIL_OK
js1_5/Regress/regress-323314-1.js = FAIL_OK
js1_5/Regress/regress-352197.js = FAIL_OK
js1_5/Regress/regress-115436.js = FAIL_OK
js1_5/Regress/regress-214761.js = FAIL_OK
js1_5/Regress/regress-253150.js = FAIL_OK
js1_5/Regress/regress-306727.js = FAIL_OK
js1_5/Regress/regress-308566.js = FAIL_OK
js1_5/Regress/regress-312260.js = FAIL_OK
js1_5/Regress/regress-322430.js = FAIL_OK
js1_5/Regress/regress-383674.js = FAIL_OK


# Equivalent to assert(false).
ecma_2/RegExp/exec-001.js = FAIL_OK
ecma_2/String/replace-001.js = FAIL_OK


# We do not strip unicode format control characters. This is really
# required for working with non-latin character sets.
ecma_3/Unicode/uc-001.js = FAIL_OK


# A non-breaking space doesn't match \s in a regular expression.  This behaviour
# matches KJS.  All the VMs have different behaviours in which characters match
# \s so we do the same as KJS until they change.
ecma_3/Unicode/uc-002.js = FAIL_OK


# String.prototype.split on empty strings always returns an array
# with one element (as specified in ECMA-262).
js1_2/Array/array_split_1.js = FAIL_OK


# The concat() method is defined in Array.prototype; not Array.
js1_5/Array/regress-313153.js = FAIL_OK


# Properties stack, fileName, and lineNumber of Error instances are
# not supported. Mozilla specific extension.
js1_5/Exceptions/errstack-001.js = FAIL_OK
js1_5/Exceptions/regress-257751.js = FAIL_OK
js1_5/Regress/regress-119719.js = FAIL_OK
js1_5/Regress/regress-139316.js = FAIL_OK
js1_5/Regress/regress-167328.js = FAIL_OK
js1_5/Regress/regress-243869.js = FAIL_OK


# Unsupported import/export and <xml> literals. Mozilla extensions.
js1_5/Regress/regress-249211.js = FAIL_OK
js1_5/Regress/regress-309242.js = FAIL_OK
js1_5/Regress/regress-350692.js = FAIL_OK


# The length of Error functions is 1 not 3.
js1_5/Exceptions/regress-123002.js = FAIL_OK


# Reserved keywords as function names, etc is not supported.
js1_5/LexicalConventions/regress-343675.js = FAIL_OK


# Unsupported list comprehensions: [ ... for ... ] and for each.
js1_5/Regress/regress-352009.js = FAIL_OK
js1_5/Regress/regress-349648.js = FAIL_OK


# Expects top level arguments (passed on command line?) to be
# the empty string?
js1_5/Regress/regress-336100.js = FAIL_OK


# Regular expression test failures due to PCRE. We match KJS (ie, perl)
# behavior and not the ECMA spec.
ecma_3/RegExp/15.10.2-1.js = FAIL_OK
ecma_3/RegExp/perlstress-001.js = FAIL_OK
ecma_3/RegExp/regress-334158.js = FAIL_OK


# This test requires a failure if we try to compile a function with more
# than 65536 arguments.  This seems to be a Mozilla restriction.
js1_5/Regress/regress-290575.js = FAIL_OK


# Fails because of the way function declarations are
# handled in V8/KJS. V8 follows IE behavior and introduce
# all nested function declarations when entering the
# surrounding function, whereas Spidermonkey declares
# them dynamically when the statement is executed.
ecma_3/Function/scope-001.js = FAIL_OK
ecma_3/FunExpr/fe-001.js = FAIL_OK
js1_5/Scope/regress-184107.js = FAIL_OK


# Function is deletable in V8 and KJS.
js1_5/Regress/regress-352604.js = FAIL_OK


# Cannot call strings as functions. Expects not to crash.
js1_5/Regress/regress-417893.js = FAIL_OK



##################### FAILING TESTS #####################

# This section is for tests that fail in V8 and pass in KJS.
# Tests that fail in both V8 and KJS belong in the FAIL_OK
# category.

# This fails because we don't handle Function.prototype.apply with very large
# numbers of arguments (depending on max stack size).  350256-02 needs more than
# 4Mbytes of stack space.
js1_5/Array/regress-350256-02.js = FAIL


# This fails because 'delete arguments[i]' does not disconnect the
# argument from the arguments array.  See buganizer issue #900066.
ecma_3/Function/regress-137181.js = FAIL


# Calls regexp objects with function call syntax; non-ECMA behavior.
ecma_2/RegExp/regress-001.js = FAIL
js1_2/regexp/regress-6359.js = FAIL
js1_2/regexp/regress-9141.js = FAIL
js1_5/Regress/regress-224956.js = FAIL
js1_5/Regress/regress-325925.js = FAIL
js1_2/regexp/simple_form.js = FAIL


# Assumes that the prototype of a function is enumerable. Non-ECMA,
# see section 15.3.3.1, page 86.
js1_5/Function/10.1.6-01.js = FAIL


# Tests that rely on specific details of function decompilation or
# print strings for errors. Non-ECMA behavior.
js1_4/Regress/function-003.js = FAIL


# Relies on JavaScript 1.2 / 1.3 deprecated features.
js1_2/function/regexparg-1.js = FAIL


# 'export' and 'import' are not keywords in V8.
ecma/LexicalConventions/7.4.3-3-n.js = FAIL
ecma_2/Exceptions/lexical-010.js = FAIL
ecma_2/Exceptions/lexical-022.js = FAIL


# Requires Mozilla-specific strict mode.
ecma_2/Exceptions/lexical-011.js = FAIL
ecma_2/Exceptions/lexical-014.js = FAIL
ecma_2/Exceptions/lexical-016.js = FAIL
ecma_2/Exceptions/lexical-021.js = FAIL
ecma_2/LexicalConventions/keywords-001.js = FAIL
js1_5/Regress/regress-306633.js = FAIL


# This test seems designed to fail (it produces a 700Mbyte string).
# We fail on out of memory.  The important thing is not to crash.
js1_5/Regress/regress-303213.js = FAIL


# Bug 1193440: Ignore Unicode BOM characters when scanning.
ecma_3/extensions/regress-368516.js = FAIL

# Bug 1202592:New ecma_3/String/15.5.4.11.js is failing.
ecma_3/String/15.5.4.11.js = FAIL

# Bug 1202597: New js1_5/Expressions/regress-394673.js is failing.
# Marked as: Will not fix. V8 throws an acceptable RangeError.
js1_5/Expressions/regress-394673.js = FAIL

# Bug 1202598: New mozilla test js1_5/Regress/regress-383682.js fails.
js1_5/Regress/regress-383682.js = FAIL


##################### MOZILLA EXTENSION TESTS #####################

ecma/extensions/15.1.2.1-1.js = FAIL_OK
ecma_3/extensions/regress-385393-03.js = FAIL_OK
ecma_3/extensions/7.9.1.js = FAIL_OK
js1_5/extensions/catchguard-001.js = FAIL_OK
js1_5/extensions/catchguard-002.js = FAIL_OK
js1_5/extensions/catchguard-003.js = FAIL_OK
js1_5/extensions/getset-001.js = FAIL_OK
js1_5/extensions/getset-003.js = FAIL_OK
js1_5/extensions/no-such-method.js = FAIL_OK
js1_5/extensions/regress-104077.js = FAIL_OK
js1_5/extensions/regress-226078.js = FAIL_OK
js1_5/extensions/regress-303277.js = FAIL_OK
js1_5/extensions/regress-304897.js = FAIL_OK
js1_5/extensions/regress-306738.js = FAIL_OK
js1_5/extensions/regress-311161.js = FAIL_OK
js1_5/extensions/regress-311583.js = FAIL_OK
js1_5/extensions/regress-311792-01.js = FAIL_OK
js1_5/extensions/regress-312278.js = FAIL_OK
js1_5/extensions/regress-313630.js = FAIL_OK
js1_5/extensions/regress-313763.js = FAIL_OK
js1_5/extensions/regress-313803.js = FAIL_OK
js1_5/extensions/regress-314874.js = FAIL_OK
js1_5/extensions/regress-322957.js = FAIL_OK
js1_5/extensions/regress-328556.js = FAIL_OK
js1_5/extensions/regress-330569.js = FAIL_OK
js1_5/extensions/regress-333541.js = FAIL_OK
js1_5/extensions/regress-335700.js = FAIL_OK
js1_5/extensions/regress-336409-1.js = FAIL_OK
js1_5/extensions/regress-336409-2.js = FAIL_OK
js1_5/extensions/regress-336410-1.js = FAIL_OK
js1_5/extensions/regress-336410-2.js = FAIL_OK
js1_5/extensions/regress-341956-01.js = FAIL_OK
js1_5/extensions/regress-341956-02.js = FAIL_OK
js1_5/extensions/regress-341956-03.js = FAIL_OK
js1_5/extensions/regress-342960.js = FAIL_OK
js1_5/extensions/regress-345967.js = FAIL_OK
js1_5/extensions/regress-346494-01.js = FAIL_OK
js1_5/extensions/regress-346494.js = FAIL_OK
js1_5/extensions/regress-347306-02.js = FAIL_OK
js1_5/extensions/regress-348986.js = FAIL_OK
js1_5/extensions/regress-349616.js = FAIL_OK
js1_5/extensions/regress-350312-02.js = FAIL_OK
js1_5/extensions/regress-350312-03.js = FAIL_OK
js1_5/extensions/regress-350531.js = FAIL_OK
js1_5/extensions/regress-351102-01.js = FAIL_OK
js1_5/extensions/regress-351102-02.js = FAIL_OK
js1_5/extensions/regress-351102-06.js = FAIL_OK
js1_5/extensions/regress-351448.js = FAIL_OK
js1_5/extensions/regress-351973.js = FAIL_OK
js1_5/extensions/regress-352060.js = FAIL_OK
js1_5/extensions/regress-352094.js = FAIL_OK
js1_5/extensions/regress-352261.js = FAIL_OK
js1_5/extensions/regress-352281.js = FAIL_OK
js1_5/extensions/regress-352372.js = FAIL_OK
js1_5/extensions/regress-352455.js = FAIL_OK
js1_5/extensions/regress-352604.js = FAIL_OK
js1_5/extensions/regress-353214.js = FAIL_OK
js1_5/extensions/regress-355339.js = FAIL_OK
js1_5/extensions/regress-355497.js = FAIL_OK
js1_5/extensions/regress-355622.js = FAIL_OK
js1_5/extensions/regress-355736.js = FAIL_OK
js1_5/extensions/regress-356085.js = FAIL_OK
js1_5/extensions/regress-356106.js = FAIL_OK
js1_5/extensions/regress-358594-01.js = FAIL_OK
js1_5/extensions/regress-358594-02.js = FAIL_OK
js1_5/extensions/regress-358594-03.js = FAIL_OK
js1_5/extensions/regress-358594-04.js = FAIL_OK
js1_5/extensions/regress-358594-05.js = FAIL_OK
js1_5/extensions/regress-358594-06.js = FAIL_OK
js1_5/extensions/regress-361346.js = FAIL_OK
js1_5/extensions/regress-361360.js = FAIL_OK
js1_5/extensions/regress-361558.js = FAIL_OK
js1_5/extensions/regress-361571.js = FAIL_OK
js1_5/extensions/regress-361856.js = FAIL_OK
js1_5/extensions/regress-361964.js = FAIL_OK
js1_5/extensions/regress-363988.js = FAIL_OK
js1_5/extensions/regress-365869.js = FAIL_OK
js1_5/extensions/regress-367630.js = FAIL_OK
js1_5/extensions/regress-367923.js = FAIL_OK
js1_5/extensions/regress-368859.js = FAIL_OK
js1_5/extensions/regress-374589.js = FAIL_OK
js1_5/extensions/regress-375801.js = FAIL_OK
js1_5/extensions/regress-376052.js = FAIL_OK
js1_5/extensions/regress-379523.js = FAIL_OK
js1_5/extensions/regress-380581.js = FAIL_OK
js1_5/extensions/regress-380831.js = FAIL_OK
js1_5/extensions/regress-381205.js = FAIL_OK
js1_5/extensions/regress-381211.js = FAIL_OK
js1_5/extensions/regress-381304.js = FAIL_OK
js1_5/extensions/regress-382509.js = FAIL_OK
js1_5/extensions/regress-383965.js = FAIL_OK
js1_5/extensions/regress-384680.js = FAIL_OK
js1_5/extensions/regress-385393-09.js = FAIL_OK
js1_5/extensions/regress-407501.js = FAIL_OK
js1_5/extensions/regress-418730.js = FAIL_OK
js1_5/extensions/regress-420612.js = FAIL_OK
js1_5/extensions/regress-420869-01.js = FAIL_OK
js1_5/extensions/regress-424257.js = FAIL_OK
js1_5/extensions/regress-424683-01.js = FAIL_OK
js1_5/extensions/regress-44009.js = FAIL_OK
js1_5/extensions/regress-50447-1.js = FAIL_OK
js1_5/extensions/regress-50447.js = FAIL_OK
js1_5/extensions/regress-90596-001.js = FAIL_OK
js1_5/extensions/regress-90596-002.js = FAIL_OK
js1_5/extensions/regress-96284-001.js = FAIL_OK
js1_5/extensions/regress-96284-002.js = FAIL_OK
js1_5/extensions/scope-001.js = FAIL_OK
js1_5/extensions/toLocaleFormat-01.js = FAIL_OK
js1_5/extensions/toLocaleFormat-02.js = FAIL_OK


##################### DECOMPILATION TESTS #####################

# We don't really about the outcome of running the
# decompilation tests as long as they don't crash or
# timeout.

js1_5/decompilation/regress-344120.js = PASS || FAIL
js1_5/decompilation/regress-346892.js = PASS || FAIL
js1_5/decompilation/regress-346902.js = PASS || FAIL
js1_5/decompilation/regress-346904.js = PASS || FAIL
js1_5/decompilation/regress-346915.js = PASS || FAIL
js1_5/decompilation/regress-349484.js = PASS || FAIL
js1_5/decompilation/regress-349489.js = PASS || FAIL
js1_5/decompilation/regress-349491.js = PASS || FAIL
js1_5/decompilation/regress-349596.js = PASS || FAIL
js1_5/decompilation/regress-349650.js = PASS || FAIL
js1_5/decompilation/regress-349663.js = PASS || FAIL
js1_5/decompilation/regress-350242.js = PASS || FAIL
js1_5/decompilation/regress-350263.js = PASS || FAIL
js1_5/decompilation/regress-350271.js = PASS || FAIL
js1_5/decompilation/regress-350666.js = PASS || FAIL
js1_5/decompilation/regress-350670.js = PASS || FAIL
js1_5/decompilation/regress-351104.js = PASS || FAIL
js1_5/decompilation/regress-351219.js = PASS || FAIL
js1_5/decompilation/regress-351336.js = PASS || FAIL
js1_5/decompilation/regress-351597.js = PASS || FAIL
js1_5/decompilation/regress-351625.js = PASS || FAIL
js1_5/decompilation/regress-351626.js = PASS || FAIL
js1_5/decompilation/regress-351693.js = PASS || FAIL
js1_5/decompilation/regress-351705.js = PASS || FAIL
js1_5/decompilation/regress-351793.js = PASS || FAIL
js1_5/decompilation/regress-352013.js = PASS || FAIL
js1_5/decompilation/regress-352022.js = PASS || FAIL
js1_5/decompilation/regress-352073.js = PASS || FAIL
js1_5/decompilation/regress-352202.js = PASS || FAIL
js1_5/decompilation/regress-352312.js = PASS || FAIL
js1_5/decompilation/regress-352360.js = PASS || FAIL
js1_5/decompilation/regress-352375.js = PASS || FAIL
js1_5/decompilation/regress-352453.js = PASS || FAIL
js1_5/decompilation/regress-352649.js = PASS || FAIL
js1_5/decompilation/regress-352873-01.js = PASS || FAIL
js1_5/decompilation/regress-352873-02.js = PASS || FAIL
js1_5/decompilation/regress-353000.js = PASS || FAIL
js1_5/decompilation/regress-353120.js = PASS || FAIL
js1_5/decompilation/regress-353146.js = PASS || FAIL
js1_5/decompilation/regress-354878.js = PASS || FAIL
js1_5/decompilation/regress-354910.js = PASS || FAIL
js1_5/decompilation/regress-355992.js = PASS || FAIL
js1_5/decompilation/regress-356083.js = PASS || FAIL
js1_5/decompilation/regress-356248.js = PASS || FAIL
js1_5/decompilation/regress-371692.js = PASS || FAIL
js1_5/decompilation/regress-373678.js = PASS || FAIL
js1_5/decompilation/regress-375639.js = PASS || FAIL
js1_5/decompilation/regress-375882.js = PASS || FAIL
js1_5/decompilation/regress-376564.js = PASS || FAIL
js1_5/decompilation/regress-383721.js = PASS || FAIL
js1_5/decompilation/regress-406555.js = PASS || FAIL


[ $FAST ]

# These tests take an unreasonable amount of time so we skip them
# in fast mode.

js1_5/Regress/regress-312588.js = SKIP
js1_5/Regress/regress-271716-n.js = SKIP

[ $FAST && $ARM ]

# In fast mode on arm we try to skip all tests that would time out,
# since running the tests takes so long in the first place.

js1_5/Regress/regress-280769-2.js = SKIP
js1_5/Regress/regress-280769-3.js = SKIP
js1_5/Regress/regress-244470.js = SKIP
js1_5/Regress/regress-203278-1.js = SKIP
js1_5/Regress/regress-290575.js = SKIP
js1_5/Regress/regress-159334.js = SKIP
js1_5/Regress/regress-321971.js = SKIP
js1_5/Regress/regress-347306-01.js = SKIP
js1_5/Regress/regress-280769-1.js = SKIP
js1_5/Regress/regress-280769-5.js = SKIP
js1_5/GC/regress-306788.js = SKIP
js1_5/GC/regress-203278-2.js = SKIP
js1_5/GC/regress-278725.js = SKIP
js1_5/GC/regress-203278-3.js = SKIP
js1_5/GC/regress-311497.js = SKIP
js1_5/Array/regress-99120-02.js = SKIP
ecma/Date/15.9.5.22-1.js = SKIP
ecma/Date/15.9.5.20.js = SKIP
ecma/Date/15.9.5.12-2.js = SKIP
ecma/Date/15.9.5.8.js = SKIP
ecma/Date/15.9.5.9.js = SKIP
ecma/Date/15.9.5.10-2.js = SKIP
ecma/Date/15.9.5.11-2.js = SKIP
ecma/Expressions/11.7.2.js = SKIP
ecma/Expressions/11.10-2.js = SKIP
ecma/Expressions/11.7.3.js = SKIP
ecma/Expressions/11.10-3.js = SKIP
ecma/Expressions/11.7.1.js = SKIP
ecma_3/RegExp/regress-209067.js = SKIP
