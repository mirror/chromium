Marked check boxes [x] indicate items that have been done.

compiler.cc:
[ ] Consider returning Handle<Code> from Compiler::compile and finding a different way of reporting errors
[ ] Add comment explaining the significance of the values of the Reference::Type enum values.
[ ] Add comment explaining why the type of a Reference is not set in the constructor but using set_type.
[ ] Add comment on how CodeGenStates are passed around when generating code for expressions
[ ] Explain what the CodeGenState accessors (is_load, etc.) signify
[x] Consider expanding CodeGenState::{f,t}target into {false,true}_target.
[ ] Change CodeGenerator so that buffer_ is not allocated as part of the struct
[ ] Comment on how CodeGenerator::state_ and function_return_ are allocated and handled.
[ ] Consider returning Handle<Object> from CodeGenerator::CompileFunction
[ ] Rename CompileNested to CompileNestedFunction
[ ] Review whether we need both Compile and CompileNested
[ ] Comment for VariableOperand, consider renaming
[x] Don't friend class Reference
[ ] Add comments on how LoadReference, AccessReference, etc. are used
[ ] Possibly replace the load argument on AccessReference with an enum.
[ ] Possibly replace the force_cc argument on LoadCondition with an enum.
[ ] Add comment for ToBoolean
[ ] Add comments for stack manipulation operations that explains the expected state of the stack
[ ] Comment for SmiOperation (possibly move comment from implementation)
[ ] Make CallWithArguments::construct an enum value
[x] Rewrite UpdateWriteBarrier in assembly and inline it in the generated code
[ ] Allow handles to be returned from handle scopes so that we can return a handle from CompileFunction even though its HandleScope is destroyed
[ ] Consider using local handle scopes in the loops in CompileFunction, or ensure that it is not necessary
[ ] Unify comment format (capitalization, punctuation)
[ ] Consider moving Push from the MacroAssembler to the CodeGenerator
[ ] Move the assignments to function_return_ before and after the block that compiles the function body (~ line 300) into the block
[x] Consider renaming MacroAssembler::Finalize (eg. Close?)
[x] Return a bool from Finalize instead of having a separate overflow() method.
[ ] Add comment on expected_nof_properties (ie. that it's an estimate etc.)
[ ] Add constructor for CodeGenState that handles linking/unlinking within CodeGenerator
[ ] Use Arguments abstraction everywhere
[ ] Rename {Get,Set}Property to reflect what they are used for.  Consider moving them to object.
[x] Move all runtime code out of compiler.
[ ] Consider moving the type determination logic into Reference from LoadReference?
[ ] Add comment that UnloadReference doesn't touch TOS
[ ] Rename ToBool
[ ] Ensure that stacks grow the same way in all documentation ([a], b, ... vs. ..., b, [a]).  Document [tos] notation.
[ ] Refactor smi checks
[ ] Add CallC function that doesn't pop its arguments (or add a flag to the existing one)
[ ] Add comment for AccessPropertyOfTOS, LoadProperty, LoadNamedProperty
[ ] Fix reg. assignment in AccessPropertyOfTOS
[ ] Group Add, Sub, Div, etc. together
[x] Move all static functions in compiler that take Arguments somewhere else, possibly together with the definition of Arguments
[x] Enforce semicolons for {BEGIN,END}_STUB
[ ] BIT_{OR, XOR, ...} should be in stubs
[ ] Fix the problem with with (nan < nan) returning a boolean, not undefined
[ ] Rename CallWithArguments to Invoke.  Use an enum for CallWithArguments::construct.
[ ] Fix Pop(no_reg)
[ ] Don't set properties in the global object in VisitVariableStatement
[ ] Consider not using Label::unuse?
[ ] Revisit try/catch/finally
[ ] Clean up Comment business.  Macro?  In the visitor?  Who knows...
[ ] Comments for VisitAssignment
[ ] Add examples to VisitCall
[ ] See if the two branches in VisitCall can share more code
[ ] In NewObject, throw a proper exception when instantiating non-function
[ ] Stubify BIT_NOT
[x] s/evaluting/evaluating/g
[ ] please do add function to add a return into the last statement instead of having it in the compiler


frames.h:
[ ] do we still need to keep the function in the caller or should it be in the callee?
[ ] do we need both code and function?
[ ] Frame::Unwind(): perhaps replace it with Caller()
[x] Frame::Unwind should not be inlined anymore
[x] reform JS_Entry comment (match previous comment)
[ ] change Handler name (abstraction over exception handlers)
[ ] Unwind? (make it the same as in Frames)
[ ] try to unify this with closures


frames-inl.h:
[ ] cleanup Unwind, comments in Unwind


frames.cc:
[ ] Frame::Frame: put in the comment
[x] Frame::Iterate: simplify! something is rotten here
[x] Frame::code(): the const attribute,  while correct, is misleading
[ ] Handler::code(): same here


lookup_table.h:
[ ] complete a comment
[ ] try to make the helper functions simpler'


lookup_table.cc:
[ ] general comment on the table structure (2-way associative mapping?)
[ ] Get/Set: similar code - any sharing possible?
[ ] have a comment on LookupTable::GenerateProbe: where is it used?
[ ] try to consolidate prototype.h/lookuptable.*


ic.h:
[ ] needs some comments, incl. about the various IC types
[ ] what's the pc? where? Hey you!
[ ] consider storing JSEnv as a field in IC
[ ] global comment should have a transition diagram
[ ] add testers for inline caches?
[ ] consider moving the static private functions into the .cc file w/o mentioning in the header


ic-inl.h:
[ ] set_target: have some abstraction over a ia32 call


ic.cc:
[ ] think about where the handles are introduced
[x] do code sharing for function call inline caches
[ ] GenerateXXX have 3x the same code pattern
[ ] comment why there is EnterJSFrame in ICC::Generate
    (perhaps also choose a better name instead of 'Generate')
[ ] need a general smi checker
