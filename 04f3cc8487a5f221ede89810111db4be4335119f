{
  "comments": [
    {
      "key": {
        "uuid": "739d088b_317c1777",
        "filename": "chrome/browser/ui/app_list/search/answer_card/answer_card_web_contents.cc",
        "patchSetId": 1
      },
      "lineNbr": 189,
      "author": {
        "id": 1136699
      },
      "writtenOn": "2017-07-30T02:45:09Z",
      "side": 1,
      "message": "Passing only few events to view look bit hacky.\nIf we pass kMouseUp event we also need to pass kMouseDown (kMouseMove) events to have the right sequence of events.\n\nCan we use AnswerCardContents to pass request to do specific action instead of generating some input events to an abstract view? This would be safer.\n\nWe already passing some data to AnswerCardContents at L171 for example.",
      "range": {
        "startLine": 189,
        "startChar": 0,
        "endLine": 189,
        "endChar": 32
      },
      "revId": "04f3cc8487a5f221ede89810111db4be4335119f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5ce31773_bf73648f",
        "filename": "chrome/browser/ui/app_list/search/answer_card/answer_card_web_contents.cc",
        "patchSetId": 1
      },
      "lineNbr": 189,
      "author": {
        "id": 1116056
      },
      "writtenOn": "2017-07-31T22:11:07Z",
      "side": 1,
      "message": "When I introduced SetIsMouseInView, xiyuan@ was quite unhappy, as this event gets passed to the UI layer (SearchResultAnswerCardView and co) via SearchResult... We always considered this as a temporary measure, dreaming of a future when WebView would get events and pass to the parent. We planned taking care of this in post-M61 cleanup.\n\nThen I realized that some early approximation of that future is achievable right now, using the just-implemented pattern. I also plan getting rid of SetIsMouseInView in favor of this pattern.\n\nAs for passing also DOWN event, I’d kind-of prefer to not overdoing it. The event goes to a known class SearchResultAnswerCardView, which is CustomButton, and behaves well if it receives only events I send.\n\nWe could send other events, but this seems to be unnecessary work, and, arguably, it could reduce stability (more code \u003d\u003e more bugs).\n\nThat’s my take on this.",
      "parentUuid": "739d088b_317c1777",
      "range": {
        "startLine": 189,
        "startChar": 0,
        "endLine": 189,
        "endChar": 32
      },
      "revId": "04f3cc8487a5f221ede89810111db4be4335119f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ad991378_750d152f",
        "filename": "chrome/browser/ui/app_list/search/answer_card/answer_card_web_contents.cc",
        "patchSetId": 1
      },
      "lineNbr": 189,
      "author": {
        "id": 1136699
      },
      "writtenOn": "2017-08-02T03:01:15Z",
      "side": 1,
      "message": "I still prefer to pass this via delegate. This code for me looks even worse then you described above for SetIsMouseView. \n\nAlternatively you may use following construction:\n  SearchResultAnswerCardView* const parent \u003d GetParent(); // from web_view_-\u003eparent();\n\n  parent-\u003eOpen(...);//\n\n were Open is function of SearchResultAnswerCardView\n\nWDYT?",
      "parentUuid": "5ce31773_bf73648f",
      "range": {
        "startLine": 189,
        "startChar": 0,
        "endLine": 189,
        "endChar": 32
      },
      "revId": "04f3cc8487a5f221ede89810111db4be4335119f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "966fd880_09cfe4b5",
        "filename": "chrome/browser/ui/app_list/search/answer_card/answer_card_web_contents.cc",
        "patchSetId": 1
      },
      "lineNbr": 189,
      "author": {
        "id": 1116056
      },
      "writtenOn": "2017-08-03T18:35:19Z",
      "side": 1,
      "message": "1. On using delegate. Perhaps, you mean AppListViewDelegate::OpenSearchResult. The issue is that AppListViewDelegate instance lives in places inaccessible to search providers (AnswerCardWebContents is a part of the search provider). It basically reflects the design where opening a result is a business of UI, not provider. We probably can plumb AppListViewDelegate into AnswerCardWebContents, but this is hacky in a worser sense, as details of by-design isolated components start leaking across component borders.\n\n2. On “SearchResultAnswerCardView* const parent \u003d GetParent();”\nAgain, components. The provider, and its WebView lives in chrome/browser/ui component, and its parent lives in ui/app_list component. Making cross-component assumptions on what is the type of parent seems wrong. As of now, the search provider just provides the view to the UI layer, it the UI layer adds it to the view hierarchy, and that’s the whole contract between the components.\n\nAlso, it\u0027s worth noting that after this, I\u0027m going to take care of scroll events, that are eaten by WebView. My plan was to propagate them using a similar mechanism. It would be nice to not have two completely different approaches for tapping/clicking and for scrolling.",
      "parentUuid": "ad991378_750d152f",
      "range": {
        "startLine": 189,
        "startChar": 0,
        "endLine": 189,
        "endChar": 32
      },
      "revId": "04f3cc8487a5f221ede89810111db4be4335119f",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    }
  ]
}