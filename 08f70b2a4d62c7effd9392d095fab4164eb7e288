{
  "comments": [
    {
      "key": {
        "uuid": "22af4407_cff1f07a",
        "filename": "chrome/browser/media/router/discovery/dial/dial_media_sink_service.cc",
        "patchSetId": 8
      },
      "lineNbr": 18,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2017-11-20T17:39:57Z",
      "side": 1,
      "message": "I was going to suggest using template arguments to capture this pattern, e.g. RunOnUIThread(C cb, T arg).\n\nAlthough it seem like you\u0027d also have to std::move |sink| below, which is a no-op but a bit of a waste.",
      "revId": "08f70b2a4d62c7effd9392d095fab4164eb7e288",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "29745b21_299aa568",
        "filename": "chrome/browser/media/router/discovery/dial/dial_media_sink_service.cc",
        "patchSetId": 8
      },
      "lineNbr": 18,
      "author": {
        "id": 1133789
      },
      "writtenOn": "2017-11-21T22:44:13Z",
      "side": 1,
      "message": "We can do that using perfect forwarding, and std::forward / std::move has no runtime cost. It might be less useful now that these are no longer free functions.",
      "parentUuid": "22af4407_cff1f07a",
      "revId": "08f70b2a4d62c7effd9392d095fab4164eb7e288",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "377e80b1_167583f6",
        "filename": "chrome/browser/media/router/discovery/dial/dial_media_sink_service.cc",
        "patchSetId": 8
      },
      "lineNbr": 18,
      "author": {
        "id": 1001385
      },
      "writtenOn": "2017-11-30T21:47:23Z",
      "side": 1,
      "message": "FWIW there are similar bind-to-sequence templates e.g. in media/, and there has been substantial push-back against making a generic equivalent in base/ because of the lack of clarity as to where a callback will actually run, as a result; we should be wary of over-generalizing this and ending up with code that is harder to follow!",
      "parentUuid": "29745b21_299aa568",
      "revId": "08f70b2a4d62c7effd9392d095fab4164eb7e288",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f7d3cc73_52aaffae",
        "filename": "chrome/browser/media/router/discovery/dial/dial_media_sink_service.cc",
        "patchSetId": 8
      },
      "lineNbr": 22,
      "author": {
        "id": 1001385
      },
      "writtenOn": "2017-11-21T01:23:45Z",
      "side": 1,
      "message": "You could bind the reply TaskRunner in to the Callback (e.g. grab it with SequenceTaskRunnerHandle::Get()) to avoid the need to explicitly mention the UI thread here.",
      "range": {
        "startLine": 21,
        "startChar": 2,
        "endLine": 22,
        "endChar": 44
      },
      "revId": "08f70b2a4d62c7effd9392d095fab4164eb7e288",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "20f82f5b_e70fad6c",
        "filename": "chrome/browser/media/router/discovery/dial/dial_media_sink_service.cc",
        "patchSetId": 8
      },
      "lineNbr": 22,
      "author": {
        "id": 1133789
      },
      "writtenOn": "2017-11-21T22:44:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f7d3cc73_52aaffae",
      "range": {
        "startLine": 21,
        "startChar": 2,
        "endLine": 22,
        "endChar": 44
      },
      "revId": "08f70b2a4d62c7effd9392d095fab4164eb7e288",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "86874694_492d4385",
        "filename": "chrome/browser/media/router/discovery/dial/dial_media_sink_service.cc",
        "patchSetId": 8
      },
      "lineNbr": 31,
      "author": {
        "id": 1001385
      },
      "writtenOn": "2017-11-21T01:23:45Z",
      "side": 1,
      "message": "Note that these implementations mean that a called that invokes Stop() can still find itself being called-back at some later time, if these tasks were in-flight at the time.\n\nYou could avoid that by moving these to be methods on DialMediaSinkService and posting them through a WeakPtr, which you invalidate in Stop().",
      "range": {
        "startLine": 18,
        "startChar": 0,
        "endLine": 31,
        "endChar": 1
      },
      "revId": "08f70b2a4d62c7effd9392d095fab4164eb7e288",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cec63de0_05e284e4",
        "filename": "chrome/browser/media/router/discovery/dial/dial_media_sink_service.cc",
        "patchSetId": 8
      },
      "lineNbr": 31,
      "author": {
        "id": 1133789
      },
      "writtenOn": "2017-11-21T22:44:13Z",
      "side": 1,
      "message": "I debated a little about it. Since the callbacks aren\u0027t related to DialMediaSinkService, it might make sense to let those callbacks go through if they outlive DialMediaSinkService. OTOH, if DialMediaSinkService is no longer valid, perhaps this means the results are no longer valid either. I changed it so the callback is bound to DMSS\u0027s WeakPtr.",
      "parentUuid": "86874694_492d4385",
      "range": {
        "startLine": 18,
        "startChar": 0,
        "endLine": 31,
        "endChar": 1
      },
      "revId": "08f70b2a4d62c7effd9392d095fab4164eb7e288",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "66415477_47f6136f",
        "filename": "chrome/browser/media/router/discovery/dial/dial_media_sink_service.cc",
        "patchSetId": 8
      },
      "lineNbr": 31,
      "author": {
        "id": 1133789
      },
      "writtenOn": "2017-11-23T00:41:37Z",
      "side": 1,
      "message": "On second thought, I don\u0027t think this is going to work because that would violate WeakPtr\u0027s contract of dereferencing and invalidating on the same sequence. So the trampoline method cannot be in DMSS unless we also invalidate the WeakPtr in DMSSImpl\u0027s sequence. I think it would be easier accounting if we go back to the original design of binding a free function since the callback really has nothing to do with DMSS itself.",
      "parentUuid": "cec63de0_05e284e4",
      "range": {
        "startLine": 18,
        "startChar": 0,
        "endLine": 31,
        "endChar": 1
      },
      "revId": "08f70b2a4d62c7effd9392d095fab4164eb7e288",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2c2ef647_b0e15cca",
        "filename": "chrome/browser/media/router/discovery/dial/dial_media_sink_service.cc",
        "patchSetId": 8
      },
      "lineNbr": 31,
      "author": {
        "id": 1001385
      },
      "writtenOn": "2017-11-30T02:07:12Z",
      "side": 1,
      "message": "I\u0027m not sure what you mean by \"the callback really has nothing to do with DMMS itself\" - this is invoking the sink-added callback that the caller provided to DMSS::Start(), so it\u0027s reasonable for the caller to assume that once the service is torn-down, the callback won\u0027t be invoked.\n\nIs the issue here that we have three distinct sequences involved? i.e:\n1. The one that the DMSS is created, called and destroyed on.\n2. The one that the DMSS actually does work on.\n3. The one that the caller wants to be notified on.\n\nWhy are #1 and #3 not the same sequence, for example?",
      "parentUuid": "66415477_47f6136f",
      "range": {
        "startLine": 18,
        "startChar": 0,
        "endLine": 31,
        "endChar": 1
      },
      "revId": "08f70b2a4d62c7effd9392d095fab4164eb7e288",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "51cd92cf_f393ba97",
        "filename": "chrome/browser/media/router/discovery/dial/dial_media_sink_service.cc",
        "patchSetId": 8
      },
      "lineNbr": 31,
      "author": {
        "id": 1133789
      },
      "writtenOn": "2017-11-30T07:15:43Z",
      "side": 1,
      "message": "What I meant is that the callback is passed through from DMSS to DMSSImpl. It is possible to structure it so that DMSS acts as the trampoline in order to support the assumption you described, but this results in an extra thread hop because DMSS is only safe to access on UI thread. I agree it is a reasonable API contract to enforce, and I am happy to look into this after this patch.",
      "parentUuid": "2c2ef647_b0e15cca",
      "range": {
        "startLine": 18,
        "startChar": 0,
        "endLine": 31,
        "endChar": 1
      },
      "revId": "08f70b2a4d62c7effd9392d095fab4164eb7e288",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "675eb480_f74d1a1b",
        "filename": "chrome/browser/media/router/discovery/dial/dial_media_sink_service.cc",
        "patchSetId": 8
      },
      "lineNbr": 36,
      "author": {
        "id": 1001385
      },
      "writtenOn": "2017-11-21T01:23:45Z",
      "side": 1,
      "message": "Is there actually a UI-thread requirement, or just a requirement that it\u0027s the same thread as the rest of the calls?",
      "range": {
        "startLine": 36,
        "startChar": 0,
        "endLine": 36,
        "endChar": 41
      },
      "revId": "08f70b2a4d62c7effd9392d095fab4164eb7e288",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "07e3e896_670a52b8",
        "filename": "chrome/browser/media/router/discovery/dial/dial_media_sink_service.cc",
        "patchSetId": 8
      },
      "lineNbr": 36,
      "author": {
        "id": 1133789
      },
      "writtenOn": "2017-11-21T22:44:13Z",
      "side": 1,
      "message": "No requirement other than the constructor (which accesses BrowserContext) needs to run on UI thread, but that should be quite obvious. I can replace the checks with SequenceChecker.",
      "parentUuid": "675eb480_f74d1a1b",
      "range": {
        "startLine": 36,
        "startChar": 0,
        "endLine": 36,
        "endChar": 41
      },
      "revId": "08f70b2a4d62c7effd9392d095fab4164eb7e288",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa3ba850_7ae6fc54",
        "filename": "chrome/browser/media/router/discovery/dial/dial_media_sink_service.cc",
        "patchSetId": 8
      },
      "lineNbr": 36,
      "author": {
        "id": 1001385
      },
      "writtenOn": "2017-11-30T02:07:12Z",
      "side": 1,
      "message": "If the constructor actually *needs* to be called on the UI thread then let\u0027s leave the DCHECK for that in here.",
      "parentUuid": "07e3e896_670a52b8",
      "range": {
        "startLine": 36,
        "startChar": 0,
        "endLine": 36,
        "endChar": 41
      },
      "revId": "08f70b2a4d62c7effd9392d095fab4164eb7e288",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "86866422_18e8c48c",
        "filename": "chrome/browser/media/router/discovery/dial/dial_media_sink_service.cc",
        "patchSetId": 8
      },
      "lineNbr": 53,
      "author": {
        "id": 1001385
      },
      "writtenOn": "2017-11-21T01:23:45Z",
      "side": 1,
      "message": "Under what circumstances do we expect Start() to be called multiple times?  Won\u0027t this early-exit confuse callers, since the second and subsequent pairs of callbacks won\u0027t get invoked?",
      "range": {
        "startLine": 52,
        "startChar": 0,
        "endLine": 53,
        "endChar": 11
      },
      "revId": "08f70b2a4d62c7effd9392d095fab4164eb7e288",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "693dc1fb_2bdbd1e0",
        "filename": "chrome/browser/media/router/discovery/dial/dial_media_sink_service.cc",
        "patchSetId": 8
      },
      "lineNbr": 53,
      "author": {
        "id": 1133789
      },
      "writtenOn": "2017-11-21T22:44:13Z",
      "side": 1,
      "message": "The contract states subsequent Start() calls are no-op. It is only expected to be called once by MediaRouterDesktop.",
      "parentUuid": "86866422_18e8c48c",
      "range": {
        "startLine": 52,
        "startChar": 0,
        "endLine": 53,
        "endChar": 11
      },
      "revId": "08f70b2a4d62c7effd9392d095fab4164eb7e288",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "941ae75a_216e9b60",
        "filename": "chrome/browser/media/router/discovery/dial/dial_media_sink_service.cc",
        "patchSetId": 8
      },
      "lineNbr": 53,
      "author": {
        "id": 1001385
      },
      "writtenOn": "2017-11-30T02:07:12Z",
      "side": 1,
      "message": "Right; what I\u0027m asking is why do we give that API contract? Why not stipulate that it must be called at-most-once?",
      "parentUuid": "693dc1fb_2bdbd1e0",
      "range": {
        "startLine": 52,
        "startChar": 0,
        "endLine": 53,
        "endChar": 11
      },
      "revId": "08f70b2a4d62c7effd9392d095fab4164eb7e288",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "10b06668_c0f3f941",
        "filename": "chrome/browser/media/router/discovery/dial/dial_media_sink_service.cc",
        "patchSetId": 8
      },
      "lineNbr": 53,
      "author": {
        "id": 1133789
      },
      "writtenOn": "2017-11-30T07:15:43Z",
      "side": 1,
      "message": "Ok, I am doing a CHECK(!impl_); here and in CMSS.",
      "parentUuid": "941ae75a_216e9b60",
      "range": {
        "startLine": 52,
        "startChar": 0,
        "endLine": 53,
        "endChar": 11
      },
      "revId": "08f70b2a4d62c7effd9392d095fab4164eb7e288",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "665bb06b_cafafd8e",
        "filename": "chrome/browser/media/router/discovery/dial/dial_media_sink_service.cc",
        "patchSetId": 8
      },
      "lineNbr": 56,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2017-11-20T17:39:57Z",
      "side": 1,
      "message": "When would a caller pass in a null callback?",
      "revId": "08f70b2a4d62c7effd9392d095fab4164eb7e288",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "16bc061a_7f5b6f54",
        "filename": "chrome/browser/media/router/discovery/dial/dial_media_sink_service.cc",
        "patchSetId": 8
      },
      "lineNbr": 56,
      "author": {
        "id": 1133789
      },
      "writtenOn": "2017-11-21T22:44:13Z",
      "side": 1,
      "message": "If in-browser DIAL is on but in-browser Cast is not, then there would not be a dual discovery callback.",
      "parentUuid": "665bb06b_cafafd8e",
      "revId": "08f70b2a4d62c7effd9392d095fab4164eb7e288",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0cbb9c0a_d1f026cf",
        "filename": "chrome/browser/media/router/discovery/dial/dial_media_sink_service.cc",
        "patchSetId": 8
      },
      "lineNbr": 60,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2017-11-20T17:39:57Z",
      "side": 1,
      "message": "Is there a reason to create the implementation lazily?\n\nIt seems like this would be simpler to implement by passing the callbacks in the ctor to set everything up, and just calling Start() to post a task to start the implementation.\n\nYou\u0027d need to have some state reflecting whether the impl_ successfully started to check in the rest of the API before posting additional tasks, so maybe it doesn\u0027t buy you as much as I thought at first.\n\nOr are different callbacks needed to be passed each time it\u0027s started?",
      "revId": "08f70b2a4d62c7effd9392d095fab4164eb7e288",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "509e3c61_dd02bfc6",
        "filename": "chrome/browser/media/router/discovery/dial/dial_media_sink_service.cc",
        "patchSetId": 8
      },
      "lineNbr": 60,
      "author": {
        "id": 1133789
      },
      "writtenOn": "2017-11-21T22:44:13Z",
      "side": 1,
      "message": "It could go either way. The advantage of creating impl_ lazily is you can also use it to check if Start() has already been called. Start() can only be called once.",
      "parentUuid": "0cbb9c0a_d1f026cf",
      "revId": "08f70b2a4d62c7effd9392d095fab4164eb7e288",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8b4d445b_373067a8",
        "filename": "chrome/browser/media/router/discovery/dial/dial_media_sink_service.cc",
        "patchSetId": 8
      },
      "lineNbr": 60,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2017-11-22T18:57:49Z",
      "side": 1,
      "message": "Right.  There would need to be some new state variable keeping track of the status of the impl (started/stopped).  I don\u0027t see much benefit with the current version of this class.",
      "parentUuid": "509e3c61_dd02bfc6",
      "revId": "08f70b2a4d62c7effd9392d095fab4164eb7e288",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b49c0a3e_e396570e",
        "filename": "chrome/browser/media/router/discovery/dial/dial_media_sink_service.cc",
        "patchSetId": 8
      },
      "lineNbr": 65,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2017-11-20T17:39:57Z",
      "side": 1,
      "message": "Will this always succeed, or does there need to be a callback to return a result?",
      "revId": "08f70b2a4d62c7effd9392d095fab4164eb7e288",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b0c680cb_c3ea2364",
        "filename": "chrome/browser/media/router/discovery/dial/dial_media_sink_service.cc",
        "patchSetId": 8
      },
      "lineNbr": 65,
      "author": {
        "id": 1133789
      },
      "writtenOn": "2017-11-21T22:44:13Z",
      "side": 1,
      "message": "This will always succeed.",
      "parentUuid": "b49c0a3e_e396570e",
      "revId": "08f70b2a4d62c7effd9392d095fab4164eb7e288",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ec207460_452b357f",
        "filename": "chrome/browser/media/router/discovery/dial/dial_media_sink_service.cc",
        "patchSetId": 8
      },
      "lineNbr": 78,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2017-11-20T17:39:57Z",
      "side": 1,
      "message": "Could impl_-\u003eStop() cause impl_ to destroy itself to reduce the number of tasks by one (you would still have to release the unique_ptr first)?",
      "revId": "08f70b2a4d62c7effd9392d095fab4164eb7e288",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f3873a93_49061820",
        "filename": "chrome/browser/media/router/discovery/dial/dial_media_sink_service.cc",
        "patchSetId": 8
      },
      "lineNbr": 78,
      "author": {
        "id": 1001385
      },
      "writtenOn": "2017-11-21T01:23:45Z",
      "side": 1,
      "message": "Is there any need for Stop() at all, given that it neither has a return-value nor any sort of completion-callback, presumably the work could just be done in the destructor?",
      "parentUuid": "ec207460_452b357f",
      "revId": "08f70b2a4d62c7effd9392d095fab4164eb7e288",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c568733f_e9338fff",
        "filename": "chrome/browser/media/router/discovery/dial/dial_media_sink_service.cc",
        "patchSetId": 8
      },
      "lineNbr": 78,
      "author": {
        "id": 1133789
      },
      "writtenOn": "2017-11-21T22:44:13Z",
      "side": 1,
      "message": "I removed Stop() from both Service and ServiceImpl classes and moved the logic to dtor.",
      "parentUuid": "f3873a93_49061820",
      "revId": "08f70b2a4d62c7effd9392d095fab4164eb7e288",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "19831fad_9615e435",
        "filename": "chrome/browser/media/router/discovery/dial/dial_media_sink_service.cc",
        "patchSetId": 8
      },
      "lineNbr": 86,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2017-11-20T17:39:57Z",
      "side": 1,
      "message": "You\u0027re assuming that impl_ successfully started before this task is posted?",
      "revId": "08f70b2a4d62c7effd9392d095fab4164eb7e288",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4cf8484d_e1c91f0e",
        "filename": "chrome/browser/media/router/discovery/dial/dial_media_sink_service.cc",
        "patchSetId": 8
      },
      "lineNbr": 86,
      "author": {
        "id": 1133789
      },
      "writtenOn": "2017-11-21T22:44:13Z",
      "side": 1,
      "message": "Yeah, Start() always succeeds.",
      "parentUuid": "19831fad_9615e435",
      "revId": "08f70b2a4d62c7effd9392d095fab4164eb7e288",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "bbbf70ff_ed3a6ed9",
        "filename": "chrome/browser/media/router/discovery/dial/dial_media_sink_service.cc",
        "patchSetId": 8
      },
      "lineNbr": 98,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2017-11-20T17:39:57Z",
      "side": 1,
      "message": "Similar comment as above.",
      "revId": "08f70b2a4d62c7effd9392d095fab4164eb7e288",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9b4cc4a4_e3f52a49",
        "filename": "chrome/browser/media/router/discovery/dial/dial_media_sink_service.cc",
        "patchSetId": 8
      },
      "lineNbr": 98,
      "author": {
        "id": 1133789
      },
      "writtenOn": "2017-11-21T22:44:13Z",
      "side": 1,
      "message": "Ditto",
      "parentUuid": "bbbf70ff_ed3a6ed9",
      "revId": "08f70b2a4d62c7effd9392d095fab4164eb7e288",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "09cd31b4_ba6c8235",
        "filename": "chrome/browser/media/router/discovery/dial/dial_media_sink_service.h",
        "patchSetId": 8
      },
      "lineNbr": 37,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2017-11-20T17:39:57Z",
      "side": 1,
      "message": "Do you think we can eventually remove the dependency on content::BrowserContext (and thus the UI thread)?   Maybe a NOTE/TODO here explaining the situation / path forward?",
      "revId": "08f70b2a4d62c7effd9392d095fab4164eb7e288",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "70ec40bc_20f0b502",
        "filename": "chrome/browser/media/router/discovery/dial/dial_media_sink_service.h",
        "patchSetId": 8
      },
      "lineNbr": 37,
      "author": {
        "id": 1133789
      },
      "writtenOn": "2017-11-21T22:44:13Z",
      "side": 1,
      "message": "It isn\u0027t clear if we can get a URLRequestContextGetter independent of a BrowserContext. Regardless, what we can do in the future is to pass scoped_refptr\u003cURLRequestContextGetter\u003e across threads to here if we want to move this out of UI thread. This is in fact what we currently do in DialMediaSinkServiceImpl, so more likely scenario is that this class will be gone if we want to have Cast MRP run outside of UI thread.\n\nWith network servicification down the road, it seems network operations will run in its own sandboxed process, so the picture w.r.t. BrowserContext might look a bit different. We may also no longer need to manage as many thread hops since some stuff will be moved out of IO thread.",
      "parentUuid": "09cd31b4_ba6c8235",
      "revId": "08f70b2a4d62c7effd9392d095fab4164eb7e288",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a841a25f_9af9da43",
        "filename": "chrome/browser/media/router/discovery/dial/dial_media_sink_service.h",
        "patchSetId": 8
      },
      "lineNbr": 37,
      "author": {
        "id": 1133789
      },
      "writtenOn": "2017-11-21T22:57:32Z",
      "side": 1,
      "message": "Actually it looks like we can use g_browser_process-\u003esystem_request_context(). I think it is worth trying after this patch lands.",
      "parentUuid": "70ec40bc_20f0b502",
      "revId": "08f70b2a4d62c7effd9392d095fab4164eb7e288",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2baa3f65_6ce5adc3",
        "filename": "chrome/browser/media/router/discovery/dial/dial_media_sink_service.h",
        "patchSetId": 8
      },
      "lineNbr": 37,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2017-11-28T01:22:19Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "a841a25f_9af9da43",
      "revId": "08f70b2a4d62c7effd9392d095fab4164eb7e288",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "15309faa_05fddc43",
        "filename": "chrome/browser/media/router/discovery/dial/dial_media_sink_service.h",
        "patchSetId": 8
      },
      "lineNbr": 43,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2017-11-20T17:39:57Z",
      "side": 1,
      "message": "So if a new sink is added, both callbacks are invoked, but if a sink is removed, only |sink_discovery_cb| is run?",
      "revId": "08f70b2a4d62c7effd9392d095fab4164eb7e288",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "48ebb439_88d10d79",
        "filename": "chrome/browser/media/router/discovery/dial/dial_media_sink_service.h",
        "patchSetId": 8
      },
      "lineNbr": 43,
      "author": {
        "id": 1133789
      },
      "writtenOn": "2017-11-21T22:44:13Z",
      "side": 1,
      "message": "Yep. The first callback is for ProvideSinks to the extension, and the second is for dual discovery.",
      "parentUuid": "15309faa_05fddc43",
      "revId": "08f70b2a4d62c7effd9392d095fab4164eb7e288",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0bfaaf31_e082fa4c",
        "filename": "chrome/browser/media/router/discovery/dial/dial_media_sink_service.h",
        "patchSetId": 8
      },
      "lineNbr": 43,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2017-11-22T18:57:49Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "48ebb439_88d10d79",
      "revId": "08f70b2a4d62c7effd9392d095fab4164eb7e288",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e9eda022_00430491",
        "filename": "chrome/browser/media/router/discovery/dial/dial_media_sink_service.h",
        "patchSetId": 8
      },
      "lineNbr": 53,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2017-11-20T17:39:57Z",
      "side": 1,
      "message": "Can you add more specific documentation for each of the methods below?",
      "revId": "08f70b2a4d62c7effd9392d095fab4164eb7e288",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1af4a55a_2c0049dd",
        "filename": "chrome/browser/media/router/discovery/dial/dial_media_sink_service.h",
        "patchSetId": 8
      },
      "lineNbr": 53,
      "author": {
        "id": 1133789
      },
      "writtenOn": "2017-11-21T22:44:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "e9eda022_00430491",
      "revId": "08f70b2a4d62c7effd9392d095fab4164eb7e288",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0c99c727_4776aa4c",
        "filename": "chrome/browser/media/router/discovery/dial/dial_media_sink_service.h",
        "patchSetId": 8
      },
      "lineNbr": 55,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2017-11-20T17:39:57Z",
      "side": 1,
      "message": "I know we force discovery on a user gesture (opening the dialog).\nIs there a need for both of these methods in the API?",
      "revId": "08f70b2a4d62c7effd9392d095fab4164eb7e288",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "889c3e5f_57b959c5",
        "filename": "chrome/browser/media/router/discovery/dial/dial_media_sink_service.h",
        "patchSetId": 8
      },
      "lineNbr": 55,
      "author": {
        "id": 1133789
      },
      "writtenOn": "2017-11-21T22:44:13Z",
      "side": 1,
      "message": "Force discovery callback is slightly different -- it\u0027s to send sinks back to the extension when it is brought back up, to ensure the extension state is synced up with MR.",
      "parentUuid": "0c99c727_4776aa4c",
      "revId": "08f70b2a4d62c7effd9392d095fab4164eb7e288",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f4767010_ea940df0",
        "filename": "chrome/browser/media/router/discovery/dial/dial_media_sink_service.h",
        "patchSetId": 8
      },
      "lineNbr": 55,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2017-11-22T18:57:49Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "889c3e5f_57b959c5",
      "revId": "08f70b2a4d62c7effd9392d095fab4164eb7e288",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "943055ca_0697cb3e",
        "filename": "chrome/browser/media/router/discovery/dial/dial_media_sink_service_impl.h",
        "patchSetId": 8
      },
      "lineNbr": 27,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2017-11-20T17:39:57Z",
      "side": 1,
      "message": "nit: given by task_runner() (the public API)",
      "revId": "08f70b2a4d62c7effd9392d095fab4164eb7e288",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1a38883e_0858f483",
        "filename": "chrome/browser/media/router/discovery/dial/dial_media_sink_service_impl.h",
        "patchSetId": 8
      },
      "lineNbr": 27,
      "author": {
        "id": 1133789
      },
      "writtenOn": "2017-11-21T22:44:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "943055ca_0697cb3e",
      "revId": "08f70b2a4d62c7effd9392d095fab4164eb7e288",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "86179e81_ddac399f",
        "filename": "chrome/browser/media/router/discovery/dial/dial_media_sink_service_impl.h",
        "patchSetId": 8
      },
      "lineNbr": 49,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2017-11-20T17:39:57Z",
      "side": 1,
      "message": "I\u0027m assuming that this object can only be run on one thread at the moment?\n\nIn the future we want components to have greater thread mobility, so it would make sense to allow the owner to pass in the task runner to use.\n\nThis would also make the set_for_test method unnecessary.",
      "revId": "08f70b2a4d62c7effd9392d095fab4164eb7e288",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "90d10ccb_254f812e",
        "filename": "chrome/browser/media/router/discovery/dial/dial_media_sink_service_impl.h",
        "patchSetId": 8
      },
      "lineNbr": 49,
      "author": {
        "id": 1133789
      },
      "writtenOn": "2017-11-21T22:44:13Z",
      "side": 1,
      "message": "There shouldn\u0027t be any problem if we pass in the SequencedTaskRunner to use from DialMediaSinkService.",
      "parentUuid": "86179e81_ddac399f",
      "revId": "08f70b2a4d62c7effd9392d095fab4164eb7e288",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0d169972_240e7f75",
        "filename": "chrome/browser/media/router/discovery/dial/dial_media_sink_service_impl.h",
        "patchSetId": 8
      },
      "lineNbr": 53,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2017-11-20T17:39:57Z",
      "side": 1,
      "message": "Nit: add blank line before",
      "revId": "08f70b2a4d62c7effd9392d095fab4164eb7e288",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4c362877_fe1d8feb",
        "filename": "chrome/browser/media/router/discovery/dial/dial_media_sink_service_impl.h",
        "patchSetId": 8
      },
      "lineNbr": 53,
      "author": {
        "id": 1133789
      },
      "writtenOn": "2017-11-21T22:44:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0d169972_240e7f75",
      "revId": "08f70b2a4d62c7effd9392d095fab4164eb7e288",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4489c6fa_a2ee47de",
        "filename": "chrome/browser/media/router/discovery/dial/dial_media_sink_service_unittest.cc",
        "patchSetId": 8
      },
      "lineNbr": 85,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2017-11-20T17:39:57Z",
      "side": 1,
      "message": "Is there a way we can validate that this callback is invoked properly by mocking the behavior of the impl?",
      "revId": "08f70b2a4d62c7effd9392d095fab4164eb7e288",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "081e9257_9667f869",
        "filename": "chrome/browser/media/router/discovery/dial/dial_media_sink_service_unittest.cc",
        "patchSetId": 8
      },
      "lineNbr": 85,
      "author": {
        "id": 1133789
      },
      "writtenOn": "2017-11-21T22:44:13Z",
      "side": 1,
      "message": "What I can do is to invoke this cb in the mock impl to test that the thread hopping is done correctly.",
      "parentUuid": "4489c6fa_a2ee47de",
      "revId": "08f70b2a4d62c7effd9392d095fab4164eb7e288",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fb1787dc_b9009f6f",
        "filename": "chrome/browser/media/router/discovery/dial/dial_media_sink_service_unittest.cc",
        "patchSetId": 8
      },
      "lineNbr": 88,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2017-11-20T17:39:57Z",
      "side": 1,
      "message": "nit: can you just bind |task_runner_| in the closure instead of |this| here and below?",
      "revId": "08f70b2a4d62c7effd9392d095fab4164eb7e288",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d89ec42c_fb0f9941",
        "filename": "chrome/browser/media/router/discovery/dial/dial_media_sink_service_unittest.cc",
        "patchSetId": 8
      },
      "lineNbr": 88,
      "author": {
        "id": 1133789
      },
      "writtenOn": "2017-11-21T22:44:13Z",
      "side": 1,
      "message": "I tried doing this, but don\u0027t think that\u0027s possible with lambdas. You have to capture |this| to access member variables, or extract it from |this| before passing it to the capture list.",
      "parentUuid": "fb1787dc_b9009f6f",
      "revId": "08f70b2a4d62c7effd9392d095fab4164eb7e288",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6c6f63b1_493aabbf",
        "filename": "chrome/browser/media/router/discovery/dial/dial_media_sink_service_unittest.cc",
        "patchSetId": 8
      },
      "lineNbr": 132,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2017-11-20T17:39:57Z",
      "side": 1,
      "message": "Nit: A slightly better test would validate correct arguments are passed to the callback.",
      "revId": "08f70b2a4d62c7effd9392d095fab4164eb7e288",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e7d68f85_8f8815a2",
        "filename": "chrome/browser/media/router/discovery/dial/dial_media_sink_service_unittest.cc",
        "patchSetId": 8
      },
      "lineNbr": 132,
      "author": {
        "id": 1133789
      },
      "writtenOn": "2017-11-21T22:44:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6c6f63b1_493aabbf",
      "revId": "08f70b2a4d62c7effd9392d095fab4164eb7e288",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fb30ecfd_957ce6f1",
        "filename": "chrome/browser/media/router/discovery/mdns/cast_media_sink_service.cc",
        "patchSetId": 8
      },
      "lineNbr": 92,
      "author": {
        "id": 1001385
      },
      "writtenOn": "2017-11-21T01:23:45Z",
      "side": 1,
      "message": "As noted for DIAL, this implementation means that callers may see their callback invoked _after_ Stop() has returned - we should either prevent that, by posting via the CastMediaSinkService\u0027 WeakPtr, or document it.",
      "range": {
        "startLine": 85,
        "startChar": 0,
        "endLine": 92,
        "endChar": 61
      },
      "revId": "08f70b2a4d62c7effd9392d095fab4164eb7e288",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6fb63525_6362b9e3",
        "filename": "chrome/browser/media/router/discovery/mdns/cast_media_sink_service.cc",
        "patchSetId": 8
      },
      "lineNbr": 92,
      "author": {
        "id": 1133789
      },
      "writtenOn": "2017-11-21T22:44:13Z",
      "side": 1,
      "message": "Moved function into class method and bound with WeakPtr.",
      "parentUuid": "fb30ecfd_957ce6f1",
      "range": {
        "startLine": 85,
        "startChar": 0,
        "endLine": 92,
        "endChar": 61
      },
      "revId": "08f70b2a4d62c7effd9392d095fab4164eb7e288",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "67aa9356_ff7d96cb",
        "filename": "chrome/browser/media/router/discovery/mdns/cast_media_sink_service.cc",
        "patchSetId": 8
      },
      "lineNbr": 92,
      "author": {
        "id": 1133789
      },
      "writtenOn": "2017-11-23T00:41:37Z",
      "side": 1,
      "message": "Reverted to binding to free function; see previous comment.",
      "parentUuid": "6fb63525_6362b9e3",
      "range": {
        "startLine": 85,
        "startChar": 0,
        "endLine": 92,
        "endChar": 61
      },
      "revId": "08f70b2a4d62c7effd9392d095fab4164eb7e288",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a81ca3e9_c0ea9da8",
        "filename": "chrome/browser/media/router/discovery/mdns/cast_media_sink_service.cc",
        "patchSetId": 8
      },
      "lineNbr": 92,
      "author": {
        "id": 1001385
      },
      "writtenOn": "2017-11-30T02:07:12Z",
      "side": 1,
      "message": "OK, but we then need to document in the CMSS API that callers must cope with the callback potentially being invoked _after_ the CMSS has been torn-down.\n\nYou should also document on the CMSS::GetDialSinkAddedCallback that it is safe to invoke even after teardown, since that is actually a requirement in order for it to be passed to the DMSS safely.",
      "parentUuid": "67aa9356_ff7d96cb",
      "range": {
        "startLine": 85,
        "startChar": 0,
        "endLine": 92,
        "endChar": 61
      },
      "revId": "08f70b2a4d62c7effd9392d095fab4164eb7e288",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7e5be717_a6d0e3ba",
        "filename": "chrome/browser/media/router/discovery/mdns/cast_media_sink_service.cc",
        "patchSetId": 8
      },
      "lineNbr": 92,
      "author": {
        "id": 1133789
      },
      "writtenOn": "2017-11-30T07:15:43Z",
      "side": 1,
      "message": "Added comments.",
      "parentUuid": "a81ca3e9_c0ea9da8",
      "range": {
        "startLine": 85,
        "startChar": 0,
        "endLine": 92,
        "endChar": 61
      },
      "revId": "08f70b2a4d62c7effd9392d095fab4164eb7e288",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1c792743_450d25d6",
        "filename": "chrome/browser/media/router/discovery/mdns/cast_media_sink_service.cc",
        "patchSetId": 8
      },
      "lineNbr": 213,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2017-11-20T17:39:57Z",
      "side": 1,
      "message": "Check that impl_ hasn\u0027t been released first?",
      "revId": "08f70b2a4d62c7effd9392d095fab4164eb7e288",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "81832c9b_2576f158",
        "filename": "chrome/browser/media/router/discovery/mdns/cast_media_sink_service.cc",
        "patchSetId": 8
      },
      "lineNbr": 213,
      "author": {
        "id": 1133789
      },
      "writtenOn": "2017-11-21T22:44:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "1c792743_450d25d6",
      "revId": "08f70b2a4d62c7effd9392d095fab4164eb7e288",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "786ef0fe_0bf27453",
        "filename": "chrome/browser/media/router/discovery/mdns/cast_media_sink_service.cc",
        "patchSetId": 8
      },
      "lineNbr": 225,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2017-11-20T17:39:57Z",
      "side": 1,
      "message": "Do we really need the IO -\u003e UI -\u003e IO hop to pass a DIAL sink from the DIAL discovery impl to the Cast discovery impl?\n\nCan the DialMediaSinkService hand a callback directly from its impl to register with the Cast impl?  I imagine they will always share the same task sequence.",
      "revId": "08f70b2a4d62c7effd9392d095fab4164eb7e288",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2828f3b1_6bf69518",
        "filename": "chrome/browser/media/router/discovery/mdns/cast_media_sink_service.cc",
        "patchSetId": 8
      },
      "lineNbr": 225,
      "author": {
        "id": 1001385
      },
      "writtenOn": "2017-11-21T01:23:45Z",
      "side": 1,
      "message": "This seems to be an artefact of having the TaskRunner associated with the objects themselves, rather than having them use SequenceTaskRunnerHandle or similar to post to their own TaskRunner, and requiring the calling code to manage the actual thread assignments?",
      "parentUuid": "786ef0fe_0bf27453",
      "revId": "08f70b2a4d62c7effd9392d095fab4164eb7e288",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "652c0d2a_43dbbeb5",
        "filename": "chrome/browser/media/router/discovery/mdns/cast_media_sink_service.cc",
        "patchSetId": 8
      },
      "lineNbr": 225,
      "author": {
        "id": 1133789
      },
      "writtenOn": "2017-11-21T22:44:13Z",
      "side": 1,
      "message": "Yes it\u0027s possible to optimize this as mentioned in the patch description. But I decided not to do this because (1) I don\u0027t want to assume that DMSSImpl and CMSSImpl run on the same sequence (which is true, due to IO thread restrictions) and (2) for consistency with OnSinksDiscoveredCallback so it\u0027s easier to understand by not having to pass in 2 callbacks that run on different sequences.",
      "parentUuid": "2828f3b1_6bf69518",
      "revId": "08f70b2a4d62c7effd9392d095fab4164eb7e288",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c34c97f7_2eabfe2d",
        "filename": "chrome/browser/media/router/discovery/mdns/cast_media_sink_service.cc",
        "patchSetId": 8
      },
      "lineNbr": 225,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2017-11-22T18:57:49Z",
      "side": 1,
      "message": "Can the DIAL impl pass a handle to the task runner to use for its callback?",
      "parentUuid": "652c0d2a_43dbbeb5",
      "revId": "08f70b2a4d62c7effd9392d095fab4164eb7e288",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "97dcb5b0_76cb2762",
        "filename": "chrome/browser/media/router/discovery/mdns/cast_media_sink_service.cc",
        "patchSetId": 8
      },
      "lineNbr": 225,
      "author": {
        "id": 1133789
      },
      "writtenOn": "2017-11-23T00:41:37Z",
      "side": 1,
      "message": "Yes, we can do that (see latest PS), but exposing the internals of CMSS is not ideal in terms of layering. But I did it anyway so we can save 1 thread hop, and because this code will likely change again later to merge DMSS/CMSS into a single class managed by Cast MRP.",
      "parentUuid": "c34c97f7_2eabfe2d",
      "revId": "08f70b2a4d62c7effd9392d095fab4164eb7e288",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b9236d66_d520a48e",
        "filename": "chrome/browser/media/router/discovery/mdns/cast_media_sink_service.cc",
        "patchSetId": 8
      },
      "lineNbr": 225,
      "author": {
        "id": 1001385
      },
      "writtenOn": "2017-11-30T02:07:12Z",
      "side": 1,
      "message": "My point was rather about the fact that the Impl objects have a task_runner() that they themselves never use, but that their owning object uses.  That\u0027s not a pattern we really use in Chromium code, in my experience; usually the owning object maintains the TaskRunner reference, to use to PostTask to the Impl.\n\nRe the thread-bouncing: Mark, it is important to bounce IO-\u003eUI-\u003eIO when invoking CastMediaSinkServiceImpl::OnDialSinkAdded(), to maintain correct ordering with respect to the Impl\u0027s teardown - if you simple PostTask directly from IO-thread to IO-thread then it is possible that the UI thread has DeleteSoon()\u0027d the Impl before the IO-\u003eIO task is processed. That\u0027s the limitation of the unique_ptr\u003c\u003e/DeleteSoon() model.\n\nIf we want to be able to invoke directly, on the IO thread, we would just need to return a callback object that is bound directly to a WeakPtr\u003cImpl\u003e, and it\u0027s SequencedTaskRunner, e.g.\n\n// static\nvoid Impl::RunOnDialSinkAdded(scoped_refptr\u003cSequenceTaskRunner\u003e runner, WeakPtr\u003cImpl\u003e impl, Sink sink) {\n  // (Optionally shortcut if we\u0027re already running on |runner|).\n  runner-\u003ePostTask(Bind(\u0026Impl::OnDialSinkAdded, impl, sink));\n}\n\nCallback CMSS::GetDialSinkAddedCallback() {\n  return Bind(\u0026RunOnDialSinkAdded, impl_runner_, impl_weak_ptr_);\n}",
      "parentUuid": "97dcb5b0_76cb2762",
      "revId": "08f70b2a4d62c7effd9392d095fab4164eb7e288",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6e8f6bba_b84c2d4a",
        "filename": "chrome/browser/media/router/discovery/mdns/cast_media_sink_service.cc",
        "patchSetId": 8
      },
      "lineNbr": 225,
      "author": {
        "id": 1133789
      },
      "writtenOn": "2017-11-30T07:15:43Z",
      "side": 1,
      "message": "That\u0027s similar to what I have done, except the callback returned here is a CMSSImpl member function bound with WeakPtr and runner-\u003ePostTask is done in DMSS rather than in CMSSImpl.\n\nSee other comment regarding task_runner() pattern.",
      "parentUuid": "b9236d66_d520a48e",
      "revId": "08f70b2a4d62c7effd9392d095fab4164eb7e288",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f88fab3a_09da3b72",
        "filename": "chrome/browser/media/router/discovery/mdns/cast_media_sink_service.h",
        "patchSetId": 8
      },
      "lineNbr": 43,
      "author": {
        "id": 1001385
      },
      "writtenOn": "2017-11-21T01:23:45Z",
      "side": 1,
      "message": "Why is it desirable to no-op if already started? What happens if we re-start with a different callback, then?",
      "range": {
        "startLine": 43,
        "startChar": 33,
        "endLine": 43,
        "endChar": 59
      },
      "revId": "08f70b2a4d62c7effd9392d095fab4164eb7e288",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "53017536_cefa207d",
        "filename": "chrome/browser/media/router/discovery/mdns/cast_media_sink_service.h",
        "patchSetId": 8
      },
      "lineNbr": 43,
      "author": {
        "id": 1133789
      },
      "writtenOn": "2017-11-21T22:44:13Z",
      "side": 1,
      "message": "Because it only makes sense to only start it once (i.e. when MediaRouter is started up). Would you like me to add a DCHECK to assert this?",
      "parentUuid": "f88fab3a_09da3b72",
      "range": {
        "startLine": 43,
        "startChar": 33,
        "endLine": 43,
        "endChar": 59
      },
      "revId": "08f70b2a4d62c7effd9392d095fab4164eb7e288",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "014f273c_30e87138",
        "filename": "chrome/browser/media/router/discovery/mdns/cast_media_sink_service.h",
        "patchSetId": 8
      },
      "lineNbr": 50,
      "author": {
        "id": 1001385
      },
      "writtenOn": "2017-11-21T01:23:45Z",
      "side": 1,
      "message": "Do we actually need this API, or could we just do the work in the destructor?",
      "range": {
        "startLine": 48,
        "startChar": 0,
        "endLine": 50,
        "endChar": 14
      },
      "revId": "08f70b2a4d62c7effd9392d095fab4164eb7e288",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e8b13fe6_48bb8c67",
        "filename": "chrome/browser/media/router/discovery/mdns/cast_media_sink_service.h",
        "patchSetId": 8
      },
      "lineNbr": 50,
      "author": {
        "id": 1133789
      },
      "writtenOn": "2017-11-21T22:44:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "014f273c_30e87138",
      "range": {
        "startLine": 48,
        "startChar": 0,
        "endLine": 50,
        "endChar": 14
      },
      "revId": "08f70b2a4d62c7effd9392d095fab4164eb7e288",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ab6b0043_6b2b5d61",
        "filename": "chrome/browser/media/router/discovery/mdns/cast_media_sink_service.h",
        "patchSetId": 8
      },
      "lineNbr": 85,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2017-11-20T17:39:57Z",
      "side": 1,
      "message": "This should always be set in the ctor?",
      "revId": "08f70b2a4d62c7effd9392d095fab4164eb7e288",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c36e9da5_6190493f",
        "filename": "chrome/browser/media/router/discovery/mdns/cast_media_sink_service.h",
        "patchSetId": 8
      },
      "lineNbr": 85,
      "author": {
        "id": 1133789
      },
      "writtenOn": "2017-11-21T22:44:13Z",
      "side": 1,
      "message": "Yep, I got rid of the other ctor that didn\u0027t set it.",
      "parentUuid": "ab6b0043_6b2b5d61",
      "revId": "08f70b2a4d62c7effd9392d095fab4164eb7e288",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ad5d63e8_f42f93e3",
        "filename": "chrome/browser/media/router/discovery/mdns/cast_media_sink_service.h",
        "patchSetId": 8
      },
      "lineNbr": 85,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2017-11-22T18:57:49Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "c36e9da5_6190493f",
      "revId": "08f70b2a4d62c7effd9392d095fab4164eb7e288",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "136daeb5_539ef639",
        "filename": "chrome/browser/media/router/discovery/mdns/cast_media_sink_service_impl.cc",
        "patchSetId": 8
      },
      "lineNbr": 177,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2017-11-20T17:39:57Z",
      "side": 1,
      "message": "This is unused in this class AFAICT.  Can we just remove it (and the dependency on the UI thread?)",
      "revId": "08f70b2a4d62c7effd9392d095fab4164eb7e288",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "318b1d73_bc2781eb",
        "filename": "chrome/browser/media/router/discovery/mdns/cast_media_sink_service_impl.cc",
        "patchSetId": 8
      },
      "lineNbr": 177,
      "author": {
        "id": 1133789
      },
      "writtenOn": "2017-11-21T22:44:13Z",
      "side": 1,
      "message": "It\u0027s used in net_log below, but my understanding is that it is temporary (see .h file)",
      "parentUuid": "136daeb5_539ef639",
      "revId": "08f70b2a4d62c7effd9392d095fab4164eb7e288",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bde04f3e_fc463753",
        "filename": "chrome/browser/media/router/discovery/mdns/cast_media_sink_service_impl.cc",
        "patchSetId": 8
      },
      "lineNbr": 177,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2017-11-22T18:57:49Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "318b1d73_bc2781eb",
      "revId": "08f70b2a4d62c7effd9392d095fab4164eb7e288",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1687829a_3cb3954d",
        "filename": "chrome/browser/media/router/discovery/mdns/cast_media_sink_service_impl.cc",
        "patchSetId": 8
      },
      "lineNbr": 283,
      "author": {
        "id": 1001385
      },
      "writtenOn": "2017-11-21T01:23:45Z",
      "side": 1,
      "message": "nit: Why quantize to 100ms granularity? Is this just to avoid inadvertently triggering high-precision timers?",
      "range": {
        "startLine": 283,
        "startChar": 40,
        "endLine": 283,
        "endChar": 66
      },
      "revId": "08f70b2a4d62c7effd9392d095fab4164eb7e288",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cffa8c29_9ab7c22e",
        "filename": "chrome/browser/media/router/discovery/mdns/cast_media_sink_service_impl.cc",
        "patchSetId": 8
      },
      "lineNbr": 283,
      "author": {
        "id": 1133789
      },
      "writtenOn": "2017-11-21T22:44:13Z",
      "side": 1,
      "message": "No particular reason that I can think of. Bin may know why, but she\u0027s OOO currently.",
      "parentUuid": "1687829a_3cb3954d",
      "range": {
        "startLine": 283,
        "startChar": 40,
        "endLine": 283,
        "endChar": 66
      },
      "revId": "08f70b2a4d62c7effd9392d095fab4164eb7e288",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bed4bf95_ab2e7172",
        "filename": "chrome/browser/media/router/discovery/mdns/cast_media_sink_service_impl.h",
        "patchSetId": 8
      },
      "lineNbr": 322,
      "author": {
        "id": 1001385
      },
      "writtenOn": "2017-11-21T01:23:45Z",
      "side": 1,
      "message": "This is rather vague; can we be more specific, e.g. \"on which methods are called\" or \"on which work is done\" or similar?\n\nWhy do we have methods in this class which _don\u0027t_ run on this task-runner?",
      "range": {
        "startLine": 322,
        "startChar": 29,
        "endLine": 322,
        "endChar": 58
      },
      "revId": "08f70b2a4d62c7effd9392d095fab4164eb7e288",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4e54c3bf_26bc5f64",
        "filename": "chrome/browser/media/router/discovery/mdns/cast_media_sink_service_impl.h",
        "patchSetId": 8
      },
      "lineNbr": 322,
      "author": {
        "id": 1133789
      },
      "writtenOn": "2017-11-21T22:44:13Z",
      "side": 1,
      "message": "task_runner() is the only method that can run on any thread. Since that is already called out specifically, I can change this to say all methods.",
      "parentUuid": "bed4bf95_ab2e7172",
      "range": {
        "startLine": 322,
        "startChar": 29,
        "endLine": 322,
        "endChar": 58
      },
      "revId": "08f70b2a4d62c7effd9392d095fab4164eb7e288",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "53775ee2_5ba027c7",
        "filename": "chrome/browser/media/router/mojo/media_router_desktop.cc",
        "patchSetId": 8
      },
      "lineNbr": 162,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2017-11-20T17:39:57Z",
      "side": 1,
      "message": "OK, the \"sink added\" callback is optional because we can run in a mode with in-browser DIAL discovery but no in-browser Cast discovery.",
      "revId": "08f70b2a4d62c7effd9392d095fab4164eb7e288",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d5548b10_c77e8bce",
        "filename": "chrome/browser/media/router/mojo/media_router_desktop.cc",
        "patchSetId": 8
      },
      "lineNbr": 162,
      "author": {
        "id": 1133789
      },
      "writtenOn": "2017-11-21T22:44:13Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "53775ee2_5ba027c7",
      "revId": "08f70b2a4d62c7effd9392d095fab4164eb7e288",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "080e454f_3e993d45",
        "filename": "chrome/common/media_router/discovery/media_sink_service_base.h",
        "patchSetId": 8
      },
      "lineNbr": 20,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2017-11-20T17:39:57Z",
      "side": 1,
      "message": "throttle invocations of the callback",
      "revId": "08f70b2a4d62c7effd9392d095fab4164eb7e288",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5fff6008_6389ed6d",
        "filename": "chrome/common/media_router/discovery/media_sink_service_base.h",
        "patchSetId": 8
      },
      "lineNbr": 20,
      "author": {
        "id": 1133789
      },
      "writtenOn": "2017-11-21T22:44:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "080e454f_3e993d45",
      "revId": "08f70b2a4d62c7effd9392d095fab4164eb7e288",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f82b7ed3_03dde2e0",
        "filename": "chrome/common/media_router/discovery/media_sink_service_base.h",
        "patchSetId": 8
      },
      "lineNbr": 28,
      "author": {
        "id": 1001385
      },
      "writtenOn": "2017-11-21T01:23:45Z",
      "side": 1,
      "message": "This needs to be virtual, since you have virtual methods.",
      "range": {
        "startLine": 28,
        "startChar": 0,
        "endLine": 28,
        "endChar": 26
      },
      "revId": "08f70b2a4d62c7effd9392d095fab4164eb7e288",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3f8fb0b4_368b69fe",
        "filename": "chrome/common/media_router/discovery/media_sink_service_base.h",
        "patchSetId": 8
      },
      "lineNbr": 28,
      "author": {
        "id": 1133789
      },
      "writtenOn": "2017-11-21T22:44:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f82b7ed3_03dde2e0",
      "range": {
        "startLine": 28,
        "startChar": 0,
        "endLine": 28,
        "endChar": 26
      },
      "revId": "08f70b2a4d62c7effd9392d095fab4164eb7e288",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "81c6781c_9a8f0431",
        "filename": "chrome/common/media_router/discovery/media_sink_service_base.h",
        "patchSetId": 8
      },
      "lineNbr": 30,
      "author": {
        "id": 1001385
      },
      "writtenOn": "2017-11-21T01:23:45Z",
      "side": 1,
      "message": "nit: Looks like some of this comment went missing?",
      "range": {
        "startLine": 30,
        "startChar": 37,
        "endLine": 30,
        "endChar": 63
      },
      "revId": "08f70b2a4d62c7effd9392d095fab4164eb7e288",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8464b453_e1a6c331",
        "filename": "chrome/common/media_router/discovery/media_sink_service_base.h",
        "patchSetId": 8
      },
      "lineNbr": 30,
      "author": {
        "id": 1133789
      },
      "writtenOn": "2017-11-21T22:44:13Z",
      "side": 1,
      "message": "s/when/with",
      "parentUuid": "81c6781c_9a8f0431",
      "range": {
        "startLine": 30,
        "startChar": 37,
        "endLine": 30,
        "endChar": 63
      },
      "revId": "08f70b2a4d62c7effd9392d095fab4164eb7e288",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4b09e043_2145a2d5",
        "filename": "chrome/common/media_router/discovery/media_sink_service_base.h",
        "patchSetId": 8
      },
      "lineNbr": 30,
      "author": {
        "id": 1001385
      },
      "writtenOn": "2017-11-30T02:07:12Z",
      "side": 1,
      "message": "OK, but it doesn\u0027t look like you actually made that change. :)",
      "parentUuid": "8464b453_e1a6c331",
      "range": {
        "startLine": 30,
        "startChar": 37,
        "endLine": 30,
        "endChar": 63
      },
      "revId": "08f70b2a4d62c7effd9392d095fab4164eb7e288",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "794587d2_ecec2ebc",
        "filename": "chrome/common/media_router/discovery/media_sink_service_base.h",
        "patchSetId": 8
      },
      "lineNbr": 30,
      "author": {
        "id": 1133789
      },
      "writtenOn": "2017-11-30T07:15:43Z",
      "side": 1,
      "message": "Ok, done for real.",
      "parentUuid": "4b09e043_2145a2d5",
      "range": {
        "startLine": 30,
        "startChar": 37,
        "endLine": 30,
        "endChar": 63
      },
      "revId": "08f70b2a4d62c7effd9392d095fab4164eb7e288",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "523ed05e_96ae6c53",
        "filename": "chrome/common/media_router/discovery/media_sink_service_base.h",
        "patchSetId": 8
      },
      "lineNbr": 38,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2017-11-20T17:39:57Z",
      "side": 1,
      "message": "OnDiscoveryComplete ?",
      "revId": "08f70b2a4d62c7effd9392d095fab4164eb7e288",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "394009ff_7d9469ac",
        "filename": "chrome/common/media_router/discovery/media_sink_service_base.h",
        "patchSetId": 8
      },
      "lineNbr": 38,
      "author": {
        "id": 1133789
      },
      "writtenOn": "2017-11-21T22:44:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "523ed05e_96ae6c53",
      "revId": "08f70b2a4d62c7effd9392d095fab4164eb7e288",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1827a348_83804d6d",
        "filename": "chrome/common/media_router/discovery/media_sink_service_base.h",
        "patchSetId": 8
      },
      "lineNbr": 47,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2017-11-20T17:39:57Z",
      "side": 1,
      "message": "Is this for testing?  Or to cancel the current round of discovery?",
      "revId": "08f70b2a4d62c7effd9392d095fab4164eb7e288",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1bed8eb6_d0749280",
        "filename": "chrome/common/media_router/discovery/media_sink_service_base.h",
        "patchSetId": 8
      },
      "lineNbr": 47,
      "author": {
        "id": 1133789
      },
      "writtenOn": "2017-11-21T22:44:13Z",
      "side": 1,
      "message": "I got rid of it since it\u0027s only called on subclass dtors, and destroying this object has the same effect.",
      "parentUuid": "1827a348_83804d6d",
      "revId": "08f70b2a4d62c7effd9392d095fab4164eb7e288",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fa34d20a_8c6bfb01",
        "filename": "chrome/common/media_router/discovery/media_sink_service_base.h",
        "patchSetId": 8
      },
      "lineNbr": 52,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2017-11-20T17:39:57Z",
      "side": 1,
      "message": "When is it okay to call this method?  Any time after StartTimer()?  Please document.",
      "revId": "08f70b2a4d62c7effd9392d095fab4164eb7e288",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1de495ec_0a06b533",
        "filename": "chrome/common/media_router/discovery/media_sink_service_base.h",
        "patchSetId": 8
      },
      "lineNbr": 52,
      "author": {
        "id": 1133789
      },
      "writtenOn": "2017-11-21T22:44:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fa34d20a_8c6bfb01",
      "revId": "08f70b2a4d62c7effd9392d095fab4164eb7e288",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4f655ba8_c89e4b7d",
        "filename": "chrome/common/media_router/discovery/media_sink_service_base.h",
        "patchSetId": 8
      },
      "lineNbr": 63,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2017-11-20T17:39:57Z",
      "side": 1,
      "message": "Better named as finish_timer_secs_ ?",
      "revId": "08f70b2a4d62c7effd9392d095fab4164eb7e288",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "054711eb_5290cf32",
        "filename": "chrome/common/media_router/discovery/media_sink_service_base.h",
        "patchSetId": 8
      },
      "lineNbr": 63,
      "author": {
        "id": 1133789
      },
      "writtenOn": "2017-11-21T22:44:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4f655ba8_c89e4b7d",
      "revId": "08f70b2a4d62c7effd9392d095fab4164eb7e288",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4bdc7391_85a69fb0",
        "filename": "chrome/common/media_router/discovery/media_sink_service_base.h",
        "patchSetId": 8
      },
      "lineNbr": 67,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2017-11-20T17:39:57Z",
      "side": 1,
      "message": "Where is FetchCompleted() declared?",
      "revId": "08f70b2a4d62c7effd9392d095fab4164eb7e288",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "09be8421_101b2d81",
        "filename": "chrome/common/media_router/discovery/media_sink_service_base.h",
        "patchSetId": 8
      },
      "lineNbr": 67,
      "author": {
        "id": 1133789
      },
      "writtenOn": "2017-11-21T22:44:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "4bdc7391_85a69fb0",
      "revId": "08f70b2a4d62c7effd9392d095fab4164eb7e288",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "53f1367e_abf26686",
        "filename": "chrome/common/media_router/discovery/media_sink_service_base.h",
        "patchSetId": 8
      },
      "lineNbr": 70,
      "author": {
        "id": 1001982
      },
      "writtenOn": "2017-11-20T17:39:57Z",
      "side": 1,
      "message": "Maybe: \"Timer for completing the current round of discovery.\"\nIt\u0027s not clear what is being \"fetched\" in this API.",
      "revId": "08f70b2a4d62c7effd9392d095fab4164eb7e288",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a4d9d763_a89d30c2",
        "filename": "chrome/common/media_router/discovery/media_sink_service_base.h",
        "patchSetId": 8
      },
      "lineNbr": 70,
      "author": {
        "id": 1001385
      },
      "writtenOn": "2017-11-21T01:23:45Z",
      "side": 1,
      "message": "\"finish\" is also a little strange terminology; is this a _timeout_ or actually the timer for stopping discovery, for example?",
      "parentUuid": "53f1367e_abf26686",
      "revId": "08f70b2a4d62c7effd9392d095fab4164eb7e288",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a8c2c703_9fcbd0c4",
        "filename": "chrome/common/media_router/discovery/media_sink_service_base.h",
        "patchSetId": 8
      },
      "lineNbr": 70,
      "author": {
        "id": 1133789
      },
      "writtenOn": "2017-11-21T22:44:13Z",
      "side": 1,
      "message": "Done on comment.\n\nLet\u0027s call this variable discovery_timer_?",
      "parentUuid": "a4d9d763_a89d30c2",
      "revId": "08f70b2a4d62c7effd9392d095fab4164eb7e288",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7e7fd072_f8208365",
        "filename": "chrome/common/media_router/discovery/media_sink_service_base.h",
        "patchSetId": 8
      },
      "lineNbr": 74,
      "author": {
        "id": 1001385
      },
      "writtenOn": "2017-11-21T01:23:45Z",
      "side": 1,
      "message": "DISALLOW_COPY_AND_ASSIGN here.",
      "range": {
        "startLine": 74,
        "startChar": 0,
        "endLine": 74,
        "endChar": 2
      },
      "revId": "08f70b2a4d62c7effd9392d095fab4164eb7e288",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c60c8452_62723ddd",
        "filename": "chrome/common/media_router/discovery/media_sink_service_base.h",
        "patchSetId": 8
      },
      "lineNbr": 74,
      "author": {
        "id": 1133789
      },
      "writtenOn": "2017-11-21T22:44:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7e7fd072_f8208365",
      "range": {
        "startLine": 74,
        "startChar": 0,
        "endLine": 74,
        "endChar": 2
      },
      "revId": "08f70b2a4d62c7effd9392d095fab4164eb7e288",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8ebe7845_772f8d73",
        "filename": "components/cast_channel/cast_socket_service.cc",
        "patchSetId": 8
      },
      "lineNbr": 36,
      "author": {
        "id": 1001385
      },
      "writtenOn": "2017-11-21T01:23:45Z",
      "side": 1,
      "message": "If this is leaked then can we just use a static here, e.g:\n\nCastSocketService::GetInstance() {\n  static CastSocketService* instance \u003d new CastSocketService;\n  return instance;\n}",
      "range": {
        "startLine": 35,
        "startChar": 0,
        "endLine": 36,
        "endChar": 79
      },
      "revId": "08f70b2a4d62c7effd9392d095fab4164eb7e288",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "05dff268_7337f0a5",
        "filename": "components/cast_channel/cast_socket_service.cc",
        "patchSetId": 8
      },
      "lineNbr": 36,
      "author": {
        "id": 1133789
      },
      "writtenOn": "2017-11-21T22:44:13Z",
      "side": 1,
      "message": "Done. This should be thread safe in C++11.",
      "parentUuid": "8ebe7845_772f8d73",
      "range": {
        "startLine": 35,
        "startChar": 0,
        "endLine": 36,
        "endChar": 79
      },
      "revId": "08f70b2a4d62c7effd9392d095fab4164eb7e288",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2cb7cc21_79633112",
        "filename": "components/cast_channel/cast_socket_service.h",
        "patchSetId": 8
      },
      "lineNbr": 64,
      "author": {
        "id": 1001385
      },
      "writtenOn": "2017-11-21T01:23:45Z",
      "side": 1,
      "message": "nit: It seems a little strange to associate this with the CastSocketService itself, if it is then the callers that must arrange to use it.",
      "range": {
        "startLine": 60,
        "startChar": 0,
        "endLine": 64,
        "endChar": 3
      },
      "revId": "08f70b2a4d62c7effd9392d095fab4164eb7e288",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "85631f01_2b351391",
        "filename": "components/cast_channel/cast_socket_service.h",
        "patchSetId": 8
      },
      "lineNbr": 64,
      "author": {
        "id": 1133789
      },
      "writtenOn": "2017-11-21T22:44:13Z",
      "side": 1,
      "message": "An alternative is to expose a set of public thread safe methods that post task to the actual method to |task_runner_|. Both ways are valid but I chose this way so we don\u0027t have to define 2 versions of each method. Given that only 2 places use this I think it is not a big deal.",
      "parentUuid": "2cb7cc21_79633112",
      "range": {
        "startLine": 60,
        "startChar": 0,
        "endLine": 64,
        "endChar": 3
      },
      "revId": "08f70b2a4d62c7effd9392d095fab4164eb7e288",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "105e18fc_c8012fad",
        "filename": "components/cast_channel/cast_socket_service.h",
        "patchSetId": 8
      },
      "lineNbr": 98,
      "author": {
        "id": 1001385
      },
      "writtenOn": "2017-11-21T01:23:45Z",
      "side": 1,
      "message": "nit: You could just do:\n\nDCHECK(task_runner_-\u003eBelongsToCurrentThread())\n\nto avoid the need for this.",
      "range": {
        "startLine": 97,
        "startChar": 0,
        "endLine": 98,
        "endChar": 38
      },
      "revId": "08f70b2a4d62c7effd9392d095fab4164eb7e288",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4d221905_b6169f82",
        "filename": "components/cast_channel/cast_socket_service.h",
        "patchSetId": 8
      },
      "lineNbr": 98,
      "author": {
        "id": 1133789
      },
      "writtenOn": "2017-11-21T22:44:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "105e18fc_c8012fad",
      "range": {
        "startLine": 97,
        "startChar": 0,
        "endLine": 98,
        "endChar": 38
      },
      "revId": "08f70b2a4d62c7effd9392d095fab4164eb7e288",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7ac351d4_04e6e64a",
        "filename": "extensions/browser/api/cast_channel/cast_channel_api.cc",
        "patchSetId": 8
      },
      "lineNbr": 172,
      "author": {
        "id": 1001385
      },
      "writtenOn": "2017-11-21T01:23:45Z",
      "side": 1,
      "message": "Is it valid for this instance to be torn-down via delete, or should we just DCHECK(!observer_) here?",
      "range": {
        "startLine": 169,
        "startChar": 0,
        "endLine": 172,
        "endChar": 3
      },
      "revId": "08f70b2a4d62c7effd9392d095fab4164eb7e288",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0d6eae63_de5d96f3",
        "filename": "extensions/browser/api/cast_channel/cast_channel_api.cc",
        "patchSetId": 8
      },
      "lineNbr": 172,
      "author": {
        "id": 1133789
      },
      "writtenOn": "2017-11-21T22:44:13Z",
      "side": 1,
      "message": "I think so, if the browser shuts down without the listener being removed first, then observer_ will be non-null here.",
      "parentUuid": "7ac351d4_04e6e64a",
      "range": {
        "startLine": 169,
        "startChar": 0,
        "endLine": 172,
        "endChar": 3
      },
      "revId": "08f70b2a4d62c7effd9392d095fab4164eb7e288",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "37af24db_e12dc96c",
        "filename": "extensions/browser/api/cast_channel/cast_channel_api.cc",
        "patchSetId": 8
      },
      "lineNbr": 181,
      "author": {
        "id": 1001385
      },
      "writtenOn": "2017-11-21T01:23:45Z",
      "side": 1,
      "message": "nit: Now that this is a handler rather than one-of-many \"observers\", can we rename it accordingly?",
      "range": {
        "startLine": 181,
        "startChar": 2,
        "endLine": 181,
        "endChar": 11
      },
      "revId": "08f70b2a4d62c7effd9392d095fab4164eb7e288",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f831ea60_8eae6991",
        "filename": "extensions/browser/api/cast_channel/cast_channel_api.cc",
        "patchSetId": 8
      },
      "lineNbr": 181,
      "author": {
        "id": 1133789
      },
      "writtenOn": "2017-11-21T22:44:13Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "37af24db_e12dc96c",
      "range": {
        "startLine": 181,
        "startChar": 2,
        "endLine": 181,
        "endChar": 11
      },
      "revId": "08f70b2a4d62c7effd9392d095fab4164eb7e288",
      "serverId": "3ce6091f-6c88-37e8-8c75-72f92ae8dfba",
      "unresolved": false
    }
  ]
}